void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint32x2_t v41;
  int8x8_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  int v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  unsigned int v59;
  BOOL v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  BOOL v66;
  __int32 v67;
  __int32 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  BOOL v78;
  BOOL v79;
  int v80;
  BOOL v81;
  unint64_t v82;
  unsigned char *v83;
  int v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned char *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  BOOL v116;
  BOOL v117;
  int8x8_t v118;
  unsigned int v119;
  __int32 v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  void block[7];
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  char v145;
  char v146;
  unsigned char __dst[4096];
  unsigned char v148[128];
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void v155[114];

  v12 = MEMORY[0x270FA5388](a1);
  v14 = v13;
  v136 = v15;
  v17 = v16;
  v19 = v18;
  v129 = v20;
  v130 = v21;
  v113 = v22;
  v23 = v12;
  v155[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  v133 = v14;
  v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    v24 = 0;
  }
  v25 = v19 - 1;
  v26 = v17 - 1;
  v27 = v14 >> 4;
  v114 = v115 >> 4;
  v28 = (v24 & 0xD00) == 0 || v24 == 768;
  v29 = v24 & 0xE00;
  v31 = !v28 && v29 != 1024;
  v128 = v31;
  v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    v33 = *(unsigned __int8 *)(v23 + 255);
    v34 = *(unsigned __int8 *)(v23 + 254);
    v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          v38 = 0;
        }
        else {
          v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        v33 = -v38;
      }
    }
    else
    {
      v36 = 32 - __clz(~(-1 << -v35));
      v37 = v34 + v33;
      if (v19 < 2) {
        v36 = 0;
      }
      v33 = v37 - v36;
      v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      v127 = 0;
LABEL_32:
      v124 = v34 - 4;
      v119 = v33 - 4;
      v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      v39 = 0;
    }
    else {
      v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    v127 = v39 >= v33;
    goto LABEL_32;
  }
  v127 = 0;
  v112 = 0;
  v119 = 0;
  v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    v126 = v136 + a9 - 1;
    if (v136 >> 4 <= v126 >> 4)
    {
      v135 = v25 >> 4;
      v111 = v26 >> 4;
      v134 = (v25 & 0xF) + 1;
      v110 = (v26 & 0xF) + 1;
      v121 = 8 * a11;
      v122 = 4 * a11;
      v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      v120 = v42.i32[0] | v42.i32[1];
      v118 = v42;
      v116 = v42.i32[0] != 0;
      v117 = v42.i32[1] != 0;
      v125 = v23;
      do
      {
        v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v133) {
          v44 = v133;
        }
        else {
          v44 = 16 * v27;
        }
        if (v115 < v43) {
          v43 = v115;
        }
        v123 = v44 - 16 * v27;
        v132 = v43 - v44 + 1;
        v45 = v136 >> 4;
        v46 = v110;
        if (v27 != v111) {
          v46 = 16;
        }
        v137 = v46;
        v131 = v113 + (v44 - v133) * a11;
        do
        {
          v47 = 16 * v45;
          v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            v49 = v32;
          }
          else {
            v49 = 16 * v45;
          }
          if (v126 < v48) {
            v48 = v136 + a9 - 1;
          }
          v50 = v48 - v49 + 1;
          if (v45 == v135) {
            v51 = v134;
          }
          else {
            v51 = 16;
          }
          v52 = 1;
          if (16 * v27 >= v133 && v47 >= v32)
          {
            v53 = v134;
            if (v45 != v135) {
              v53 = 16;
            }
            v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              v55 = 0;
              v56 = 0;
              v57 = v119 != 0;
              v58 = 1;
              v60 = v124 != 0;
              v59 = v119;
              v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  v59 = 0;
                }
                v58 *= 2;
                --v55;
                v57 = v59 != 0;
                v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              v56 = 0;
            }
            v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 12);
          }
          else
          {
            if (v120)
            {
              v62 = 0;
              v63 = 0;
              v64 = 1;
              v65 = v116;
              v66 = v117;
              v68 = v118.i32[0];
              v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  v68 = 0;
                }
                v64 *= 2;
                --v62;
                v65 = v68 != 0;
                v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              v63 = 0;
            }
            v69 = v63 << 12;
          }
          v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            v70 = 1;
          }
          v71 = v70 + 15;
          if (v71 < 0x20) {
            v72 = 0;
          }
          else {
            v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            v73 = 1;
          }
          v74 = v73 + 15;
          if (v74 < 0x20)
          {
            v75 = 0;
            if (!v72)
            {
LABEL_114:
              v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          v76 = 0;
          v77 = 0;
          v78 = v72 != 0;
          v79 = v75 != 0;
          v80 = 1;
          do
          {
            --v72;
            v81 = !v78;
            if (v78)
            {
              v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              v72 = 0;
              v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              v75 = 0;
              v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            v79 = v75 != 0;
            v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            v50 = v84;
            v32 = v136;
            v83 = __dst;
          }
          v85 = (unsigned __int8 *)(v130 + 8 * v77);
          v86 = v131 + 16 * (v49 - v32);
          v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v137 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            v145 = v51;
            v146 = v137;
            v141 = v123;
            v142 = v49 - v47;
            block[6] = v85;
            v139 = v131 + 16 * (v49 - v32);
            v140 = a11;
            v143 = v132;
            v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              v32 = v136;
              v23 = v125;
            }
            else
            {
              v97 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 256, (unint64_t)v83, *v85)];
              v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 256, v97, v85[1]);
              v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 256, v98, v85[2]);
              v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 256, v99, v85[3]);
              v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 256, v100, v85[4]);
              v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 256, v101, v85[5]);
              v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 256, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 256, v102 + v103, v85[7]);
              v104 = v143;
              v23 = v125;
              if (v143)
              {
                v105 = 0;
                v106 = &v148[256 * (unint64_t)v141 + 16 * v142];
                v107 = v144;
                do
                {
                  if (v107)
                  {
                    v108 = 0;
                    v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      v107 = v144;
                    }
                    while (16 * (unint64_t)v144 > v108);
                    v104 = v143;
                  }
                  ++v105;
                  v106 += 256;
                }
                while (v105 < v104);
              }
              v32 = v136;
            }
          }
          else
          {
            v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122, a11, v88, v85[1]);
            v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v89, v85[2]);
            v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122 + 128, a11, v90, v85[3]);
            v92 = v86 + v121;
            v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v121, a11, v91, v85[4]);
            v94 = v86 + 12 * a11;
            v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 128, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 128, a11, v95 + v96, v85[7]);
            v32 = v136;
            v23 = v125;
          }
          v28 = v45++ == v126 >> 4;
        }
        while (!v28);
        v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v136 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v129 = v20;
  uint64_t v130 = v21;
  uint64_t v113 = v22;
  uint64_t v23 = v12;
  v155[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v133 = v14;
  unsigned int v115 = v14 + a10 - 1;
  if (*(void *)(v23 + 168)) {
    int v24 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v24 = 0;
  }
  unsigned int v25 = v19 - 1;
  unsigned int v26 = v17 - 1;
  unsigned int v27 = v14 >> 4;
  unsigned int v114 = v115 >> 4;
  BOOL v28 = (v24 & 0xD00) == 0 || v24 == 768;
  int v29 = v24 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v128 = v31;
  unsigned int v32 = v136;
  if (*(unsigned char *)(v23 + 232))
  {
    unsigned int v33 = *(unsigned __int8 *)(v23 + 255);
    unsigned int v34 = *(unsigned __int8 *)(v23 + 254);
    char v35 = __clz(v25);
    if (1 << v33 >= v17 || v19 >> v34)
    {
      if (!(v17 >> v33) && 1 << v34 < v19)
      {
        if (v17 < 2) {
          unsigned int v38 = 0;
        }
        else {
          unsigned int v38 = __clz(~(-1 << -(char)__clz(v26))) - 32;
        }
        v34 += v33 + v38;
        unsigned int v33 = -v38;
      }
    }
    else
    {
      unsigned int v36 = 32 - __clz(~(-1 << -v35));
      unsigned int v37 = v34 + v33;
      if (v19 < 2) {
        unsigned int v36 = 0;
      }
      unsigned int v33 = v37 - v36;
      unsigned int v34 = v36;
    }
    if (v19 < 2)
    {
      if (v34) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v35)) < v34)
    {
LABEL_27:
      BOOL v127 = 0;
LABEL_32:
      unsigned int v124 = v34 - 4;
      unsigned int v119 = v33 - 4;
      int v40 = -1 << *(unsigned char *)(*(void *)(v23 + 208) + 48);
      unsigned int v112 = (((~v40 + v19) & v40) + ~(-1 << v34)) >> v34;
      goto LABEL_33;
    }
    if (v17 < 2) {
      unsigned int v39 = 0;
    }
    else {
      unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz(v26)));
    }
    BOOL v127 = v39 >= v33;
    goto LABEL_32;
  }
  BOOL v127 = 0;
  unsigned int v112 = 0;
  unsigned int v119 = 0;
  unsigned int v124 = 0;
LABEL_33:
  if (v27 <= v114)
  {
    unsigned int v126 = v136 + a9 - 1;
    if (v136 >> 4 <= v126 >> 4)
    {
      unsigned int v135 = v25 >> 4;
      unsigned int v111 = v26 >> 4;
      int v134 = (v25 & 0xF) + 1;
      int v110 = (v26 & 0xF) + 1;
      uint64_t v121 = 8 * a11;
      uint64_t v122 = 4 * a11;
      uint32x2_t v41 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF0000000FLL);
      int8x8_t v42 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v41, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v41));
      __int32 v120 = v42.i32[0] | v42.i32[1];
      int8x8_t v118 = v42;
      BOOL v116 = v42.i32[0] != 0;
      BOOL v117 = v42.i32[1] != 0;
      uint64_t v125 = v23;
      do
      {
        unsigned int v43 = (16 * v27) | 0xF;
        if (16 * v27 <= v133) {
          int v44 = v133;
        }
        else {
          int v44 = 16 * v27;
        }
        if (v115 < v43) {
          unsigned int v43 = v115;
        }
        int v123 = v44 - 16 * v27;
        int v132 = v43 - v44 + 1;
        unsigned int v45 = v136 >> 4;
        int v46 = v110;
        if (v27 != v111) {
          int v46 = 16;
        }
        unsigned int v137 = v46;
        uint64_t v131 = v113 + (v44 - v133) * a11;
        do
        {
          unsigned int v47 = 16 * v45;
          unsigned int v48 = 16 * (v45 + 1) - 1;
          if (16 * v45 <= v32) {
            int v49 = v32;
          }
          else {
            int v49 = 16 * v45;
          }
          if (v126 < v48) {
            unsigned int v48 = v136 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v45 == v135) {
            unsigned int v51 = v134;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (16 * v27 >= v133 && v47 >= v32)
          {
            int v53 = v134;
            if (v45 != v135) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v132 != v137;
          }
          if (v127)
          {
            if (v124 | v119)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              BOOL v57 = v119 != 0;
              int v58 = 1;
              BOOL v60 = v124 != 0;
              unsigned int v59 = v119;
              unsigned int v61 = v124;
              do
              {
                --v61;
                if (v60) {
                  v56 |= (unint64_t)(v45 & ~(-1 << v124) & v58) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                --v59;
                if (v57) {
                  v56 |= (unint64_t)(v27 & ~(-1 << v119) & v58) << v55++;
                }
                else {
                  unsigned int v59 = 0;
                }
                v58 *= 2;
                --v55;
                BOOL v57 = v59 != 0;
                BOOL v60 = v61 != 0;
              }
              while (v59 | v61);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v23 + 320) * ((v45 >> v124) + (v27 >> v119) * v112) + (v56 << 12);
          }
          else
          {
            if (v120)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v116;
              BOOL v66 = v117;
              __int32 v68 = v118.i32[0];
              __int32 v67 = v118.i32[1];
              do
              {
                --v67;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v45) << v62++;
                }
                else {
                  __int32 v67 = 0;
                }
                --v68;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v27) << v62++;
                }
                else {
                  __int32 v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v65 = v68 != 0;
                BOOL v66 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 12;
          }
          unsigned int v70 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 15;
          if (v74 < 0x20)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_114:
              unint64_t v77 = 0;
              goto LABEL_115;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 4) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_114;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v45) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v27) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_115:
          v83 = (unsigned char *)(v129 + v69);
          if (v128)
          {
            int v84 = v50;
            memcpy(__dst, v83, sizeof(__dst));
            int v50 = v84;
            unsigned int v32 = v136;
            v83 = __dst;
          }
          v85 = (unsigned __int8 *)(v130 + 8 * v77);
          uint64_t v86 = v131 + 16 * (v49 - v32);
          char v87 = v51 < 0x10 || v52;
          if ((v87 & 1) != 0 || v137 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v125;
            block[5] = v83;
            char v145 = v51;
            char v146 = v137;
            unsigned int v141 = v123;
            unsigned int v142 = v49 - v47;
            block[6] = v85;
            uint64_t v139 = v131 + 16 * (v49 - v32);
            uint64_t v140 = a11;
            unsigned int v143 = v132;
            unsigned int v144 = v50;
            if (v52)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v125 + 8) + 7384), block);
              unsigned int v32 = v136;
              uint64_t v23 = v125;
            }
            else
            {
              unint64_t v97 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 256, (unint64_t)v83, *v85)];
              unint64_t v98 = v97
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 256, v97, v85[1]);
              unint64_t v99 = v98
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 256, v98, v85[2]);
              unint64_t v100 = v99
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 256, v99, v85[3]);
              unint64_t v101 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 256, v100, v85[4]);
              unint64_t v102 = v101
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 256, v101, v85[5]);
              uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 256, v102, v85[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 256, v102 + v103, v85[7]);
              unint64_t v104 = v143;
              uint64_t v23 = v125;
              if (v143)
              {
                unint64_t v105 = 0;
                v106 = &v148[256 * (unint64_t)v141 + 16 * v142];
                unsigned int v107 = v144;
                do
                {
                  if (v107)
                  {
                    uint64_t v108 = 0;
                    uint64_t v109 = v139 + v140 * v105;
                    do
                    {
                      *(unsigned char *)(v109 + v108) = v106[v108];
                      ++v108;
                      unsigned int v107 = v144;
                    }
                    while (16 * (unint64_t)v144 > v108);
                    unint64_t v104 = v143;
                  }
                  ++v105;
                  v106 += 256;
                }
                while (v105 < v104);
              }
              unsigned int v32 = v136;
            }
          }
          else
          {
            unint64_t v88 = (unint64_t)&v83[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, (unint64_t)v83, *v85)];
            unint64_t v89 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122, a11, v88, v85[1]);
            unint64_t v90 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v89, v85[2]);
            unint64_t v91 = v90
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v122 + 128, a11, v90, v85[3]);
            uint64_t v92 = v86 + v121;
            unint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + v121, a11, v91, v85[4]);
            uint64_t v94 = v86 + 12 * a11;
            unint64_t v95 = v93
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94, a11, v93, v85[5]);
            uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v92 + 128, a11, v95, v85[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v94 + 128, a11, v95 + v96, v85[7]);
            unsigned int v32 = v136;
            uint64_t v23 = v125;
          }
          BOOL v28 = v45++ == v126 >> 4;
        }
        while (!v28);
        BOOL v28 = v27++ == v114;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v129 = v21;
  uint64_t v130 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  v155[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v134 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v128 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v126 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v126 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 4;
      int v135 = ((v20 - 1) & 0xF) + 1;
      unsigned int v136 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 0xF) + 1;
      uint64_t v119 = 8 * a11;
      uint64_t v120 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v125 = v34.i32[0] | v34.i32[1];
      BOOL v123 = v34.i32[1] != 0;
      int8x8_t v124 = v34;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v134) {
          int v36 = v134;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v121 = v36 - 16 * v25;
        int v132 = v35 - v36 + 1;
        unsigned int v133 = 16 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 16;
        }
        unsigned int v137 = v38;
        uint64_t v131 = v117 + (v36 - v134) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v126 < v40) {
            unsigned int v40 = v126;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v136) {
            unsigned int v43 = v135;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v133 >= v134 && v39 >= v16)
          {
            int v45 = v135;
            if (v37 != v136) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v132 != v137;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v103 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v104 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v104 | v103) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v106 = 0;
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v104 = 0;
              if (!v103) {
                goto LABEL_131;
              }
LABEL_120:
              int v105 = 0;
              uint64_t v106 = 0;
              int v107 = v37 & v102;
              BOOL v108 = v103 != 0;
              BOOL v109 = v104 != 0;
              int v110 = 1;
              do
              {
                --v103;
                if (v108) {
                  v106 |= (unint64_t)(v110 & v107) << v105++;
                }
                else {
                  unsigned int v103 = 0;
                }
                --v104;
                if (v109) {
                  v106 |= (unint64_t)(v110 & v25 & ((v72 >> 4) - 1)) << v105++;
                }
                else {
                  unsigned int v104 = 0;
                }
                v110 *= 2;
                --v105;
                BOOL v109 = v104 != 0;
                BOOL v108 = v103 != 0;
              }
              while (v104 | v103);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v133 / v72 * ((v68 + v112) / v68)) << 14) + (v106 << 12);
            goto LABEL_60;
          }
          if (v125)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v122;
            BOOL v51 = v123;
            __int32 v53 = v124.i32[0];
            __int32 v52 = v124.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v129 + v54);
          if (v128)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v129 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v130 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v131 + 16 * (v41 - v16);
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v137 > 0xF)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v120, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 128, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v120 + 128, a11, v82, v76[3]);
            uint64_t v84 = v78 + v119;
            unint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119, a11, v83, v76[4]);
            uint64_t v86 = v78 + 12 * a11;
            unint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 128, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v145 = v43;
          char v146 = v137;
          unsigned int v141 = v121;
          unsigned int v142 = v41 - v39;
          block[6] = v76;
          uint64_t v139 = v78;
          uint64_t v140 = a11;
          unsigned int v143 = v132;
          unsigned int v144 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v89 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 256, (unint64_t)v73, *v76)];
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 256, v89, v76[1]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 256, v90, v76[2]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 256, v91, v76[3]);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 256, v92, v76[4]);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 256, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 256, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 256, v94 + v95, v76[7]);
          unint64_t v96 = v143;
          uint64_t v16 = v77;
          if (v143)
          {
            unint64_t v97 = 0;
            unint64_t v98 = &v148[256 * (unint64_t)v141 + 16 * v142];
            unsigned int v99 = v144;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = v139 + v140 * v97;
                do
                {
                  *(unsigned char *)(v101 + v100) = v98[v100];
                  ++v100;
                  unsigned int v99 = v144;
                }
                while (16 * (unint64_t)v144 > v100);
                unint64_t v96 = v143;
              }
              ++v97;
              v98 += 256;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v126 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v129 = v21;
  uint64_t v130 = v22;
  uint64_t v117 = v23;
  uint64_t v24 = v12;
  v155[112] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v134 = v14;
  unsigned int v25 = v14 >> 4;
  unsigned int v116 = v14 + a10 - 1;
  unsigned int v118 = v116 >> 4;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v128 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  if (v25 <= v118)
  {
    unsigned int v126 = v16 + a9 - 1;
    unsigned int v115 = v16 >> 4;
    if (v16 >> 4 <= v126 >> 4)
    {
      unsigned int v112 = v20 - 1;
      unsigned int v114 = (v18 - 1) >> 4;
      int v135 = ((v20 - 1) & 0xF) + 1;
      unsigned int v136 = (v20 - 1) >> 4;
      int v113 = ((v18 - 1) & 0xF) + 1;
      uint64_t v119 = 8 * a11;
      uint64_t v120 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF0000000FLL);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v33, 4uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000020, v33));
      __int32 v125 = v34.i32[0] | v34.i32[1];
      BOOL v123 = v34.i32[1] != 0;
      int8x8_t v124 = v34;
      BOOL v122 = v34.i32[0] != 0;
      unint64_t v111 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v35 = (16 * v25) | 0xF;
        if (16 * v25 <= v134) {
          int v36 = v134;
        }
        else {
          int v36 = 16 * v25;
        }
        unsigned int v37 = v115;
        if (v116 < v35) {
          unsigned int v35 = v116;
        }
        int v121 = v36 - 16 * v25;
        int v132 = v35 - v36 + 1;
        unsigned int v133 = 16 * v25;
        int v38 = v113;
        if (v25 != v114) {
          int v38 = 16;
        }
        unsigned int v137 = v38;
        uint64_t v131 = v117 + (v36 - v134) * a11;
        do
        {
          unsigned int v39 = 16 * v37;
          unsigned int v40 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v16) {
            int v41 = v16;
          }
          else {
            int v41 = 16 * v37;
          }
          if (v126 < v40) {
            unsigned int v40 = v126;
          }
          int v42 = v40 - v41 + 1;
          if (v37 == v136) {
            unsigned int v43 = v135;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v133 >= v134 && v39 >= v16)
          {
            int v45 = v135;
            if (v37 != v136) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v132 != v137;
          }
          if (isLevelTiled)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v111 >> (*(unsigned char *)(v24 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  unsigned int v68 = 16;
                  char v71 = 1;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v102 = (v68 >> 4) - 1;
            if (v70)
            {
              unsigned int v103 = 0;
              if (v71) {
                goto LABEL_130;
              }
LABEL_119:
              unsigned int v104 = 32 - __clz(~(-1 << -(char)__clz(((v72 + 15) >> 4) - 1)));
              if (v104 | v103) {
                goto LABEL_120;
              }
LABEL_131:
              uint64_t v106 = 0;
            }
            else
            {
              unsigned int v103 = 32 - __clz(~(-1 << -(char)__clz(v102)));
              if ((v71 & 1) == 0) {
                goto LABEL_119;
              }
LABEL_130:
              unsigned int v104 = 0;
              if (!v103) {
                goto LABEL_131;
              }
LABEL_120:
              int v105 = 0;
              uint64_t v106 = 0;
              int v107 = v37 & v102;
              BOOL v108 = v103 != 0;
              BOOL v109 = v104 != 0;
              int v110 = 1;
              do
              {
                --v103;
                if (v108) {
                  v106 |= (unint64_t)(v110 & v107) << v105++;
                }
                else {
                  unsigned int v103 = 0;
                }
                --v104;
                if (v109) {
                  v106 |= (unint64_t)(v110 & v25 & ((v72 >> 4) - 1)) << v105++;
                }
                else {
                  unsigned int v104 = 0;
                }
                v110 *= 2;
                --v105;
                BOOL v109 = v104 != 0;
                BOOL v108 = v103 != 0;
              }
              while (v104 | v103);
            }
            unint64_t v54 = ((unint64_t)(v39 / v68 + v133 / v72 * ((v68 + v112) / v68)) << 14) + (v106 << 12);
            goto LABEL_60;
          }
          if (v125)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v122;
            BOOL v51 = v123;
            __int32 v53 = v124.i32[0];
            __int32 v52 = v124.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v37) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v25) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 12;
LABEL_60:
          unsigned int v55 = *(_DWORD *)(v24 + 128) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v24 + 132) >> (*(unsigned char *)(v24 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 15;
          if (v59 < 0x20)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_86:
              unint64_t v62 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 4) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_86;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v37) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v25) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_87:
          unsigned int v73 = (unsigned char *)(v129 + v54);
          if (v128)
          {
            int v74 = v42;
            unsigned int v75 = v43;
            memcpy(__dst, (const void *)(v129 + v54), sizeof(__dst));
            unsigned int v43 = v75;
            int v42 = v74;
            unsigned int v73 = __dst;
          }
          int v76 = (unsigned __int8 *)(v130 + 8 * v62);
          uint64_t v77 = v16;
          uint64_t v78 = v131 + 16 * (v41 - v16);
          char v79 = v43 < 0x10 || v44;
          if ((v79 & 1) == 0 && v137 > 0xF)
          {
            unint64_t v80 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78, a11, (unint64_t)v73, *v76)];
            unint64_t v81 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v120, a11, v80, v76[1]);
            unint64_t v82 = v81
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + 128, a11, v81, v76[2]);
            unint64_t v83 = v82
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v120 + 128, a11, v82, v76[3]);
            uint64_t v84 = v78 + v119;
            unint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v78 + v119, a11, v83, v76[4]);
            uint64_t v86 = v78 + 12 * a11;
            unint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86, a11, v85, v76[5]);
            uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v84 + 128, a11, v87, v76[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v86 + 128, a11, v87 + v88, v76[7]);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v24;
          block[5] = v73;
          char v145 = v43;
          char v146 = v137;
          unsigned int v141 = v121;
          unsigned int v142 = v41 - v39;
          block[6] = v76;
          uint64_t v139 = v78;
          uint64_t v140 = a11;
          unsigned int v143 = v132;
          unsigned int v144 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v24 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v77;
            goto LABEL_28;
          }
          unint64_t v89 = (unint64_t)&v73[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v148, 256, (unint64_t)v73, *v76)];
          unint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v150, 256, v89, v76[1]);
          unint64_t v91 = v90
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v149, 256, v90, v76[2]);
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v151, 256, v91, v76[3]);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v152, 256, v92, v76[4]);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v154, 256, v93, v76[5]);
          uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)&v153, 256, v94, v76[6]);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((uint64_t)v155, 256, v94 + v95, v76[7]);
          unint64_t v96 = v143;
          uint64_t v16 = v77;
          if (v143)
          {
            unint64_t v97 = 0;
            unint64_t v98 = &v148[256 * (unint64_t)v141 + 16 * v142];
            unsigned int v99 = v144;
            do
            {
              if (v99)
              {
                uint64_t v100 = 0;
                uint64_t v101 = v139 + v140 * v97;
                do
                {
                  *(unsigned char *)(v101 + v100) = v98[v100];
                  ++v100;
                  unsigned int v99 = v144;
                }
                while (16 * (unint64_t)v144 > v100);
                unint64_t v96 = v143;
              }
              ++v97;
              v98 += 256;
            }
            while (v97 < v96);
          }
LABEL_28:
          BOOL v29 = v37++ == v126 >> 4;
        }
        while (!v29);
        BOOL v29 = v25++ == v118;
      }
      while (!v29);
    }
  }
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[256 * (unint64_t)*(unsigned int *)(v1 + 72) + 16 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[256 * (unint64_t)*(unsigned int *)(v1 + 72) + 16 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[256 * (unint64_t)*(unsigned int *)(v1 + 72) + 16 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[256 * (unint64_t)*(unsigned int *)(v1 + 72) + 16 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE14ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)14,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE12ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)12,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE9ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)9,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE7ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)7,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE8ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)8,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE10ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int32x4_t *)&v19[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 63)
    {
      int32x4_t v9 = *(int32x4_t *)v3;
      int32x4_t v10 = *(int32x4_t *)(v3 + 16);
      int32x4_t v11 = *(int32x4_t *)(v3 + 32);
      int32x4_t v12 = *(int32x4_t *)(v3 + 48);
      *uint64_t result = vuzp1q_s32(*(int32x4_t *)v3, v11);
      result[2] = vuzp2q_s32(v9, v11);
      result[4] = vuzp1q_s32(v10, v12);
      result[6] = vuzp2q_s32(v10, v12);
      uint64_t v6 = 64;
    }
    else if (v8 == 1)
    {
      int16x8_t v5 = vld1q_dup_s16((const __int16 *)v3);
      *uint64_t result = (int32x4_t)v5;
      result[2] = (int32x4_t)v5;
      result[4] = (int32x4_t)v5;
      result[6] = (int32x4_t)v5;
      uint64_t v6 = 2;
    }
    else if (*v4)
    {
      uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)10,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 32, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v13 = *(unsigned int *)(a1 + 80);
  if (v13)
  {
    unint64_t v14 = 0;
    uint64_t v15 = &v19[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v16) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v16)
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v14;
        do
        {
          *(unsigned char *)(v18 + v17) = v15[v17];
          ++v17;
          uint64_t v16 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v16 > (unint64_t)v17);
        unint64_t v13 = *(unsigned int *)(a1 + 80);
      }
      ++v14;
      v15 += 32;
    }
    while (v14 < v13);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int16x8_t v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 48);
      long long v11 = *(_OWORD *)(v3 + 144);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 176);
      long long v14 = *(_OWORD *)(v3 + 192);
      long long v15 = *(_OWORD *)(v3 + 224);
      long long v16 = *(_OWORD *)(v3 + 32);
      long long v17 = *(_OWORD *)(v3 + 128);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 80);
      long long v20 = *(_OWORD *)(v3 + 112);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 240);
      long long v23 = *(_OWORD *)(v3 + 96);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v16;
      result[2] = v17;
      result[3] = v18;
      result[8] = v9;
      result[9] = v10;
      result[10] = v11;
      result[11] = v13;
      result[16] = v12;
      result[17] = v23;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[24] = v19;
      result[25] = v20;
      result[26] = v21;
      result[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[8] = v5;
      result[9] = v5;
      result[10] = v5;
      result[11] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[24] = v5;
      result[25] = v5;
      result[26] = v5;
      result[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[26] = 0u;
      result[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 128;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 48);
      long long v11 = *(_OWORD *)(v3 + 144);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 176);
      long long v14 = *(_OWORD *)(v3 + 192);
      long long v15 = *(_OWORD *)(v3 + 224);
      long long v16 = *(_OWORD *)(v3 + 32);
      long long v17 = *(_OWORD *)(v3 + 128);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 80);
      long long v20 = *(_OWORD *)(v3 + 112);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 240);
      long long v23 = *(_OWORD *)(v3 + 96);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v16;
      result[2] = v17;
      result[3] = v18;
      result[8] = v9;
      result[9] = v10;
      result[10] = v11;
      result[11] = v13;
      result[16] = v12;
      result[17] = v23;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[24] = v19;
      result[25] = v20;
      result[26] = v21;
      result[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[8] = v5;
      result[9] = v5;
      result[10] = v5;
      result[11] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[24] = v5;
      result[25] = v5;
      result[26] = v5;
      result[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[26] = 0u;
      result[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 128;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 48);
      long long v11 = *(_OWORD *)(v3 + 144);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 176);
      long long v14 = *(_OWORD *)(v3 + 192);
      long long v15 = *(_OWORD *)(v3 + 224);
      long long v16 = *(_OWORD *)(v3 + 32);
      long long v17 = *(_OWORD *)(v3 + 128);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 80);
      long long v20 = *(_OWORD *)(v3 + 112);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 240);
      long long v23 = *(_OWORD *)(v3 + 96);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v16;
      result[2] = v17;
      result[3] = v18;
      result[8] = v9;
      result[9] = v10;
      result[10] = v11;
      result[11] = v13;
      result[16] = v12;
      result[17] = v23;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[24] = v19;
      result[25] = v20;
      result[26] = v21;
      result[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[8] = v5;
      result[9] = v5;
      result[10] = v5;
      result[11] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[24] = v5;
      result[25] = v5;
      result[26] = v5;
      result[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[26] = 0u;
      result[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 128;
    }
    while (v25 < v24);
  }
  return result;
}

_OWORD *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = &v30[512
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                + 64
                * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 255)
    {
      long long v9 = *(_OWORD *)(v3 + 16);
      long long v10 = *(_OWORD *)(v3 + 48);
      long long v11 = *(_OWORD *)(v3 + 144);
      long long v12 = *(_OWORD *)(v3 + 64);
      long long v13 = *(_OWORD *)(v3 + 176);
      long long v14 = *(_OWORD *)(v3 + 192);
      long long v15 = *(_OWORD *)(v3 + 224);
      long long v16 = *(_OWORD *)(v3 + 32);
      long long v17 = *(_OWORD *)(v3 + 128);
      long long v18 = *(_OWORD *)(v3 + 160);
      long long v19 = *(_OWORD *)(v3 + 80);
      long long v20 = *(_OWORD *)(v3 + 112);
      long long v21 = *(_OWORD *)(v3 + 208);
      long long v22 = *(_OWORD *)(v3 + 240);
      long long v23 = *(_OWORD *)(v3 + 96);
      *uint64_t result = *(_OWORD *)v3;
      result[1] = v16;
      result[2] = v17;
      result[3] = v18;
      result[8] = v9;
      result[9] = v10;
      result[10] = v11;
      result[11] = v13;
      result[16] = v12;
      result[17] = v23;
      result[18] = v14;
      result[19] = v15;
      uint64_t v6 = 256;
      result[24] = v19;
      result[25] = v20;
      result[26] = v21;
      result[27] = v22;
    }
    else if (v8 == 7)
    {
      float64x2_t v5 = vld1q_dup_f64((const double *)v3);
      *uint64_t result = v5;
      result[1] = v5;
      result[2] = v5;
      result[3] = v5;
      result[8] = v5;
      result[9] = v5;
      result[10] = v5;
      result[11] = v5;
      result[16] = v5;
      result[17] = v5;
      result[18] = v5;
      result[19] = v5;
      result[24] = v5;
      result[25] = v5;
      result[26] = v5;
      result[27] = v5;
      uint64_t v6 = 8;
    }
    else if (*v4)
    {
      uint64_t result = (_OWORD *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 128, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      result[2] = 0u;
      result[3] = 0u;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[10] = 0u;
      result[11] = 0u;
      result[16] = 0u;
      result[17] = 0u;
      result[18] = 0u;
      result[19] = 0u;
      result[24] = 0u;
      result[25] = 0u;
      result[26] = 0u;
      result[27] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v24 = *(unsigned int *)(a1 + 80);
  if (v24)
  {
    unint64_t v25 = 0;
    unsigned int v26 = &v30[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v27) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v27)
      {
        uint64_t v28 = 0;
        uint64_t v29 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v25;
        do
        {
          *(unsigned char *)(v29 + v28) = v26[v28];
          ++v28;
          uint64_t v27 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v27 > (unint64_t)v28);
        unint64_t v24 = *(unsigned int *)(a1 + 80);
      }
      ++v25;
      v26 += 128;
    }
    while (v25 < v24);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v12, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4);
  unint64_t v6 = *(unsigned int *)(a1 + 80);
  if (v6)
  {
    unint64_t v7 = 0;
    unsigned int v8 = (char *)&v12[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v9) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v9)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v7;
        do
        {
          *(unsigned char *)(v11 + v10) = v8[v10];
          ++v10;
          uint64_t v9 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v9 > (unint64_t)v10);
        unint64_t v6 = *(unsigned int *)(a1 + 80);
      }
      ++v7;
      v8 += 32;
    }
    while (v7 < v6);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (char *)&v10[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = v6[v8];
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 128;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (char *)&v10[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = v6[v8];
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 128;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (char *)&v10[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = v6[v8];
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 128;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (char *)&v10[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = v6[v8];
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 128;
    }
    while (v5 < v4);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v24[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v5, v11);
      result[1] = vzip1q_s64(v14, v15);
      result[4] = vzip2q_s64(v10, v11);
      result[5] = vzip2q_s64(v14, v15);
      result[8] = vzip1q_s64(v12, v13);
      result[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t result = (int64x2_t)a2;
      result[1] = (int64x2_t)a2;
      result[4] = (int64x2_t)a2;
      result[5] = (int64x2_t)a2;
      result[8] = (int64x2_t)a2;
      result[9] = (int64x2_t)a2;
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v5, v9, a2, a3);
      uint64_t v7 = (uint64_t)result;
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    unint64_t v19 = 0;
    long long v20 = &v24[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v21) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v19;
        do
        {
          *(unsigned char *)(v23 + v22) = v20[v22];
          ++v22;
          uint64_t v21 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v21 > (unint64_t)v22);
        unint64_t v18 = *(unsigned int *)(a1 + 80);
      }
      ++v19;
      v20 += 64;
    }
    while (v19 < v18);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v24[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v5, v11);
      result[1] = vzip1q_s64(v14, v15);
      result[4] = vzip2q_s64(v10, v11);
      result[5] = vzip2q_s64(v14, v15);
      result[8] = vzip1q_s64(v12, v13);
      result[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t result = (int64x2_t)a2;
      result[1] = (int64x2_t)a2;
      result[4] = (int64x2_t)a2;
      result[5] = (int64x2_t)a2;
      result[8] = (int64x2_t)a2;
      result[9] = (int64x2_t)a2;
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v5, v9, a2, a3);
      uint64_t v7 = (uint64_t)result;
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    unint64_t v19 = 0;
    long long v20 = &v24[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v21) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v19;
        do
        {
          *(unsigned char *)(v23 + v22) = v20[v22];
          ++v22;
          uint64_t v21 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v21 > (unint64_t)v22);
        unint64_t v18 = *(unsigned int *)(a1 + 80);
      }
      ++v19;
      v20 += 64;
    }
    while (v19 < v18);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v24[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v5, v11);
      result[1] = vzip1q_s64(v14, v15);
      result[4] = vzip2q_s64(v10, v11);
      result[5] = vzip2q_s64(v14, v15);
      result[8] = vzip1q_s64(v12, v13);
      result[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t result = (int64x2_t)a2;
      result[1] = (int64x2_t)a2;
      result[4] = (int64x2_t)a2;
      result[5] = (int64x2_t)a2;
      result[8] = (int64x2_t)a2;
      result[9] = (int64x2_t)a2;
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v5, v9, a2, a3);
      uint64_t v7 = (uint64_t)result;
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    unint64_t v19 = 0;
    long long v20 = &v24[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v21) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v19;
        do
        {
          *(unsigned char *)(v23 + v22) = v20[v22];
          ++v22;
          uint64_t v21 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v21 > (unint64_t)v22);
        unint64_t v18 = *(unsigned int *)(a1 + 80);
      }
      ++v19;
      v20 += 64;
    }
    while (v19 < v18);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v24[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v9 = *v6;
    if (v9 == 127)
    {
      int64x2_t v10 = *(int64x2_t *)v5;
      int64x2_t v11 = *(int64x2_t *)(v5 + 16);
      int64x2_t v12 = *(int64x2_t *)(v5 + 32);
      int64x2_t v13 = *(int64x2_t *)(v5 + 48);
      int64x2_t v14 = *(int64x2_t *)(v5 + 64);
      int64x2_t v15 = *(int64x2_t *)(v5 + 80);
      int64x2_t v16 = *(int64x2_t *)(v5 + 96);
      int64x2_t v17 = *(int64x2_t *)(v5 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v5, v11);
      result[1] = vzip1q_s64(v14, v15);
      result[4] = vzip2q_s64(v10, v11);
      result[5] = vzip2q_s64(v14, v15);
      result[8] = vzip1q_s64(v12, v13);
      result[9] = vzip1q_s64(v16, v17);
      a2 = (int32x4_t)vzip2q_s64(v12, v13);
      a3 = (int32x4_t)vzip2q_s64(v16, v17);
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a3;
      uint64_t v7 = 128;
    }
    else if (v9 == 3)
    {
      a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
      *uint64_t result = (int64x2_t)a2;
      result[1] = (int64x2_t)a2;
      result[4] = (int64x2_t)a2;
      result[5] = (int64x2_t)a2;
      result[8] = (int64x2_t)a2;
      result[9] = (int64x2_t)a2;
      result[12] = (int64x2_t)a2;
      result[13] = (int64x2_t)a2;
      uint64_t v7 = 4;
    }
    else if (*v6)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v5, v9, a2, a3);
      uint64_t v7 = (uint64_t)result;
    }
    else
    {
      uint64_t v7 = 0;
      a2 = 0uLL;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v5 += v7;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    unint64_t v19 = 0;
    long long v20 = &v24[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v21) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v19;
        do
        {
          *(unsigned char *)(v23 + v22) = v20[v22];
          ++v22;
          uint64_t v21 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v21 > (unint64_t)v22);
        unint64_t v18 = *(unsigned int *)(a1 + 80);
      }
      ++v19;
      v20 += 64;
    }
    while (v19 < v18);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, __n128 a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((uint64_t)v13, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), a2, a3, a4, a5);
  unint64_t v7 = *(unsigned int *)(a1 + 80);
  if (v7)
  {
    unint64_t v8 = 0;
    unsigned int v9 = (char *)&v13[2 * *(unsigned int *)(a1 + 72)] + 2 * *(unsigned int *)(a1 + 76);
    LODWORD(v10) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v10)
      {
        uint64_t v11 = 0;
        uint64_t v12 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v8;
        do
        {
          *(unsigned char *)(v12 + v11) = v9[v11];
          ++v11;
          uint64_t v10 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v10 > (unint64_t)v11);
        unint64_t v7 = *(unsigned int *)(a1 + 80);
      }
      ++v8;
      v9 += 32;
    }
    while (v8 < v7);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v23[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[1] = vzip1q_s64(v13, v14);
      result[4] = vzip2q_s64(v9, v10);
      result[5] = vzip2q_s64(v13, v14);
      result[8] = vzip1q_s64(v11, v12);
      result[9] = vzip1q_s64(v15, v16);
      result[12] = vzip2q_s64(v11, v12);
      result[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[1] = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[5] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[9] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      result[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v23[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 64;
    }
    while (v18 < v17);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v23[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[1] = vzip1q_s64(v13, v14);
      result[4] = vzip2q_s64(v9, v10);
      result[5] = vzip2q_s64(v13, v14);
      result[8] = vzip1q_s64(v11, v12);
      result[9] = vzip1q_s64(v15, v16);
      result[12] = vzip2q_s64(v11, v12);
      result[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[1] = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[5] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[9] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      result[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v23[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 64;
    }
    while (v18 < v17);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v23[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[1] = vzip1q_s64(v13, v14);
      result[4] = vzip2q_s64(v9, v10);
      result[5] = vzip2q_s64(v13, v14);
      result[8] = vzip1q_s64(v11, v12);
      result[9] = vzip1q_s64(v15, v16);
      result[12] = vzip2q_s64(v11, v12);
      result[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[1] = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[5] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[9] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      result[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v23[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 64;
    }
    while (v18 < v17);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  do
  {
    uint64_t result = (int64x2_t *)&v23[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (v8 == 127)
    {
      int64x2_t v9 = *(int64x2_t *)v3;
      int64x2_t v10 = *(int64x2_t *)(v3 + 16);
      int64x2_t v11 = *(int64x2_t *)(v3 + 32);
      int64x2_t v12 = *(int64x2_t *)(v3 + 48);
      int64x2_t v13 = *(int64x2_t *)(v3 + 64);
      int64x2_t v14 = *(int64x2_t *)(v3 + 80);
      int64x2_t v15 = *(int64x2_t *)(v3 + 96);
      int64x2_t v16 = *(int64x2_t *)(v3 + 112);
      *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v10);
      result[1] = vzip1q_s64(v13, v14);
      result[4] = vzip2q_s64(v9, v10);
      result[5] = vzip2q_s64(v13, v14);
      result[8] = vzip1q_s64(v11, v12);
      result[9] = vzip1q_s64(v15, v16);
      result[12] = vzip2q_s64(v11, v12);
      result[13] = vzip2q_s64(v15, v16);
      uint64_t v6 = 128;
    }
    else if (v8 == 3)
    {
      float32x4_t v5 = vld1q_dup_f32((const float *)v3);
      *uint64_t result = (int64x2_t)v5;
      result[1] = (int64x2_t)v5;
      result[4] = (int64x2_t)v5;
      result[5] = (int64x2_t)v5;
      result[8] = (int64x2_t)v5;
      result[9] = (int64x2_t)v5;
      result[12] = (int64x2_t)v5;
      result[13] = (int64x2_t)v5;
      uint64_t v6 = 4;
    }
    else if (*v4)
    {
      uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
      uint64_t v6 = (uint64_t)result;
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v17 = *(unsigned int *)(a1 + 80);
  if (v17)
  {
    unint64_t v18 = 0;
    unint64_t v19 = &v23[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v20) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v20)
      {
        uint64_t v21 = 0;
        uint64_t v22 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v18;
        do
        {
          *(unsigned char *)(v22 + v21) = v19[v21];
          ++v21;
          uint64_t v20 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v20 > (unint64_t)v21);
        unint64_t v17 = *(unsigned int *)(a1 + 80);
      }
      ++v18;
      v19 += 64;
    }
    while (v18 < v17);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock(v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v9, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    float32x4_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v9, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    float32x4_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v9, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    float32x4_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressMacroblock((int8x8_t *)v9, *(int8x8_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v4 = 0;
    float32x4_t v5 = (char *)&v9[*(unsigned int *)(a1 + 72)] + *(unsigned int *)(a1 + 76);
    unsigned int v6 = 1;
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          unsigned int v6 = *(_DWORD *)(a1 + 84);
          ++v7;
        }
        while (v6 > v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 16;
    }
    while (v4 < v3);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(void *)(v1 + 40), *(unsigned __int8 **)(v1 + 48), *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(v1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[256 * (unint64_t)*(unsigned int *)(v1 + 72) + 16 * *(unsigned int *)(v1 + 76)];
    LODWORD(v6) = *(_DWORD *)(v1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(v1 + 56) + *(void *)(v1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(v1 + 84);
        }
        while (16 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(v1 + 80);
      }
      ++v4;
      v5 += 256;
    }
    while (v4 < v3);
  }
  return result;
}

int16x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(const double **)(a1 + 40), *(unsigned char **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    float32x4_t v5 = &v9[128 * (unint64_t)*(unsigned int *)(a1 + 72) + 8 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  uint64_t v5 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned char **)(a1 + 48);
  int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int32x4_t *)&v20[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v5 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v5]];
    unsigned int v11 = *v7;
    if (*v7)
    {
      if (v11 < 0xF0)
      {
        if (v11 == 63)
        {
          int32x4_t v12 = *(int32x4_t *)v6;
          a3 = *(int32x4_t *)(v6 + 16);
          a4 = *(int32x4_t *)(v6 + 32);
          int32x4_t v13 = *(int32x4_t *)(v6 + 48);
          *uint64_t result = vuzp1q_s32(*(int32x4_t *)v6, a4);
          result[2] = vuzp2q_s32(v12, a4);
          result[4] = vuzp1q_s32(a3, v13);
          a2 = vuzp2q_s32(a3, v13);
          result[6] = a2;
          uint64_t v9 = 64;
        }
        else if (v11 == 1)
        {
          a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v6);
          *uint64_t result = a2;
          result[2] = a2;
          result[4] = a2;
          result[6] = a2;
          uint64_t v9 = 2;
        }
        else
        {
          uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 32, v6, v11, *(int8x8_t *)a2.i8, *(double *)a3.i64, *(int8x8_t *)a4.i8);
          uint64_t v9 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 32, v6, v11, v8);
        uint64_t v9 = 32;
      }
    }
    else
    {
      uint64_t v9 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v6 += v9;
    ++v7;
    v5 += 2;
  }
  while (v5 != 16);
  unint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    unint64_t v15 = 0;
    int64x2_t v16 = &v20[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v17) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v15;
        do
        {
          *(unsigned char *)(v19 + v18) = v16[v18];
          ++v18;
          uint64_t v17 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v17 > (unint64_t)v18);
        unint64_t v14 = *(unsigned int *)(a1 + 80);
      }
      ++v15;
      v16 += 32;
    }
    while (v15 < v14);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int8x8_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v10, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52), a2);
  unint64_t v4 = *(unsigned int *)(a1 + 80);
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = (char *)&v10[8 * (unint64_t)*(unsigned int *)(a1 + 72)].f64[*(unsigned int *)(a1 + 76)];
    LODWORD(v7) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v5;
        do
        {
          *(unsigned char *)(v9 + v8) = v6[v8];
          ++v8;
          uint64_t v7 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v7 > (unint64_t)v8);
        unint64_t v4 = *(unsigned int *)(a1 + 80);
      }
      ++v5;
      v6 += 128;
    }
    while (v5 < v4);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3)
{
  uint64_t v4 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned char **)(a1 + 48);
  int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int64x2_t *)&v25[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v4]];
    unsigned int v10 = *v6;
    if (*v6)
    {
      if (v10 < 0xF0)
      {
        if (v10 == 127)
        {
          int64x2_t v11 = *(int64x2_t *)v5;
          int64x2_t v12 = *(int64x2_t *)(v5 + 16);
          int64x2_t v13 = *(int64x2_t *)(v5 + 32);
          int64x2_t v14 = *(int64x2_t *)(v5 + 48);
          int64x2_t v15 = *(int64x2_t *)(v5 + 64);
          int64x2_t v16 = *(int64x2_t *)(v5 + 80);
          int64x2_t v17 = *(int64x2_t *)(v5 + 96);
          int64x2_t v18 = *(int64x2_t *)(v5 + 112);
          *uint64_t result = vzip1q_s64(*(int64x2_t *)v5, v12);
          result[1] = vzip1q_s64(v15, v16);
          result[4] = vzip2q_s64(v11, v12);
          result[5] = vzip2q_s64(v15, v16);
          result[8] = vzip1q_s64(v13, v14);
          result[9] = vzip1q_s64(v17, v18);
          a2 = (int32x4_t)vzip2q_s64(v13, v14);
          a3 = (int32x4_t)vzip2q_s64(v17, v18);
          result[12] = (int64x2_t)a2;
          result[13] = (int64x2_t)a3;
          uint64_t v8 = 128;
        }
        else if (v10 == 3)
        {
          a2 = (int32x4_t)vld1q_dup_f32((const float *)v5);
          *uint64_t result = (int64x2_t)a2;
          result[1] = (int64x2_t)a2;
          result[4] = (int64x2_t)a2;
          result[5] = (int64x2_t)a2;
          result[8] = (int64x2_t)a2;
          result[9] = (int64x2_t)a2;
          result[12] = (int64x2_t)a2;
          result[13] = (int64x2_t)a2;
          uint64_t v8 = 4;
        }
        else
        {
          uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 64, v5, v10, a2, a3);
          uint64_t v8 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result->i32, 64, v5, v10, v7);
        uint64_t v8 = 64;
      }
    }
    else
    {
      uint64_t v8 = 0;
      a2 = 0uLL;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v5 += v8;
    ++v6;
    v4 += 2;
  }
  while (v4 != 16);
  unint64_t v19 = *(unsigned int *)(a1 + 80);
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = &v25[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v22) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v22)
      {
        uint64_t v23 = 0;
        uint64_t v24 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v20;
        do
        {
          *(unsigned char *)(v24 + v23) = v21[v23];
          ++v23;
          uint64_t v22 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v22 > (unint64_t)v23);
        unint64_t v19 = *(unsigned int *)(a1 + 80);
      }
      ++v20;
      v21 += 64;
    }
    while (v20 < v19);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock((uint64_t)v9, *(int64x2_t **)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &v9[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

int32x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4, int32x4_t a5)
{
  uint64_t v6 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(unsigned char **)(a1 + 48);
  int v9 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int32x4_t *)&v20[128
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v6 + 1]
                             + 16
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v6]];
    unsigned int v12 = *v8;
    if (*v8)
    {
      if (v12 < 0xF0)
      {
        if (v12 == 63)
        {
          int32x4_t v13 = *(int32x4_t *)v7;
          a3 = *(int32x4_t *)(v7 + 16);
          a4 = *(int32x4_t *)(v7 + 32);
          a5 = *(int32x4_t *)(v7 + 48);
          *uint64_t result = vuzp1q_s32(*(int32x4_t *)v7, a4);
          result[2] = vuzp2q_s32(v13, a4);
          result[4] = vuzp1q_s32(a3, a5);
          a2 = vuzp2q_s32(a3, a5);
          result[6] = a2;
          uint64_t v10 = 64;
        }
        else if (v12 == 1)
        {
          a2 = (int32x4_t)vld1q_dup_s16((const __int16 *)v7);
          *uint64_t result = a2;
          result[2] = a2;
          result[4] = a2;
          result[6] = a2;
          uint64_t v10 = 2;
        }
        else
        {
          uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 32, v7, v12, *(double *)a2.i64, *(double *)a3.i64, *(double *)a4.i64, *(int8x8_t *)a5.i8);
          uint64_t v10 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int32x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 32, v7, v12, v9);
        uint64_t v10 = 32;
      }
    }
    else
    {
      uint64_t v10 = 0;
      result->i64[0] = 0;
      result->i64[1] = 0;
      result[2].i64[0] = 0;
      result[2].i64[1] = 0;
      result[4].i64[0] = 0;
      result[4].i64[1] = 0;
      result[6].i64[0] = 0;
      result[6].i64[1] = 0;
    }
    v7 += v10;
    ++v8;
    v6 += 2;
  }
  while (v6 != 16);
  unint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14)
  {
    unint64_t v15 = 0;
    int64x2_t v16 = &v20[32 * *(unsigned int *)(a1 + 72) + 2 * *(unsigned int *)(a1 + 76)];
    LODWORD(v17) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v15;
        do
        {
          *(unsigned char *)(v19 + v18) = v16[v18];
          ++v18;
          uint64_t v17 = *(unsigned int *)(a1 + 84);
        }
        while (2 * v17 > (unint64_t)v18);
        unint64_t v14 = *(unsigned int *)(a1 + 80);
      }
      ++v15;
      v16 += 32;
    }
    while (v15 < v14);
  }
  return result;
}

int64x2_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(void *)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int64x2_t *)&v24[256
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 32
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 127)
        {
          int64x2_t v10 = *(int64x2_t *)v3;
          int64x2_t v11 = *(int64x2_t *)(v3 + 16);
          int64x2_t v12 = *(int64x2_t *)(v3 + 32);
          int64x2_t v13 = *(int64x2_t *)(v3 + 48);
          int64x2_t v14 = *(int64x2_t *)(v3 + 64);
          int64x2_t v15 = *(int64x2_t *)(v3 + 80);
          int64x2_t v16 = *(int64x2_t *)(v3 + 96);
          int64x2_t v17 = *(int64x2_t *)(v3 + 112);
          *uint64_t result = vzip1q_s64(*(int64x2_t *)v3, v11);
          result[1] = vzip1q_s64(v14, v15);
          result[4] = vzip2q_s64(v10, v11);
          result[5] = vzip2q_s64(v14, v15);
          result[8] = vzip1q_s64(v12, v13);
          result[9] = vzip1q_s64(v16, v17);
          result[12] = vzip2q_s64(v12, v13);
          result[13] = vzip2q_s64(v16, v17);
          uint64_t v6 = 128;
        }
        else if (v8 == 3)
        {
          float32x4_t v9 = vld1q_dup_f32((const float *)v3);
          *uint64_t result = (int64x2_t)v9;
          result[1] = (int64x2_t)v9;
          result[4] = (int64x2_t)v9;
          result[5] = (int64x2_t)v9;
          result[8] = (int64x2_t)v9;
          result[9] = (int64x2_t)v9;
          result[12] = (int64x2_t)v9;
          result[13] = (int64x2_t)v9;
          uint64_t v6 = 4;
        }
        else
        {
          uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 64, v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int64x2_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 64, v3, v8, v5);
        uint64_t v6 = 64;
      }
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0u;
      result[1] = 0u;
      result[4] = 0u;
      result[5] = 0u;
      result[8] = 0u;
      result[9] = 0u;
      result[12] = 0u;
      result[13] = 0u;
    }
    v3 += v6;
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v18 = *(unsigned int *)(a1 + 80);
  if (v18)
  {
    unint64_t v19 = 0;
    unint64_t v20 = &v24[64 * (unint64_t)*(unsigned int *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v21) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v21)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v19;
        do
        {
          *(unsigned char *)(v23 + v22) = v20[v22];
          ++v22;
          uint64_t v21 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v21 > (unint64_t)v22);
        unint64_t v18 = *(unsigned int *)(a1 + 80);
      }
      ++v19;
      v20 += 64;
    }
    while (v19 < v18);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = &v9[4 * (unint64_t)*(unsigned int *)(a1 + 72)].i8[4 * *(unsigned int *)(a1 + 76)];
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (4 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 64;
    }
    while (v4 < v3);
  }
  return result;
}

int16x4_t *___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v21 = *MEMORY[0x263EF8340];
  unint64_t v3 = *(int16x4_t **)(a1 + 40);
  unint64_t v4 = *(unsigned char **)(a1 + 48);
  int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52);
  do
  {
    uint64_t result = (int16x4_t *)&v20[64
                             * (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2 + 1]
                             + 8
                             * AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)0,1u>::kSubblockPositions[v2]];
    unsigned int v8 = *v4;
    if (*v4)
    {
      if (v8 < 0xF0)
      {
        if (v8 == 31)
        {
          int16x4_t v10 = *v3;
          int16x4_t v11 = v3[1];
          int16x4_t v12 = v3[2];
          int16x4_t v13 = v3[3];
          *uint64_t result = vuzp1_s16(*v3, v12);
          result[2] = vuzp2_s16(v10, v12);
          result[4] = vuzp1_s16(v11, v13);
          result[6] = vuzp2_s16(v11, v13);
          uint64_t v6 = 32;
        }
        else if (v8 == 96)
        {
          int8x8_t v9 = vdup_lane_s8((int8x8_t)*v3, 0);
          *uint64_t result = (int16x4_t)v9;
          result[2] = (int16x4_t)v9;
          result[4] = (int16x4_t)v9;
          result[6] = (int16x4_t)v9;
          uint64_t v6 = 1;
        }
        else
        {
          uint64_t result = (int16x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(result, 16, (uint64_t)v3, v8);
          uint64_t v6 = (uint64_t)result;
        }
      }
      else
      {
        uint64_t result = (int16x4_t *)AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(result, 16, (uint64_t)v3, v8, v5);
        uint64_t v6 = 16;
      }
    }
    else
    {
      uint64_t v6 = 0;
      *uint64_t result = 0;
      result[2] = 0;
      result[4] = 0;
      result[6] = 0;
    }
    unint64_t v3 = (int16x4_t *)((char *)v3 + v6);
    ++v4;
    v2 += 2;
  }
  while (v2 != 16);
  unint64_t v14 = *(unsigned int *)(a1 + 80);
  if (v14 && *(_DWORD *)(a1 + 84))
  {
    unint64_t v15 = 0;
    int64x2_t v16 = &v20[16 * *(unsigned int *)(a1 + 72) + *(unsigned int *)(a1 + 76)];
    unsigned int v17 = 1;
    do
    {
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v15;
        do
        {
          *(unsigned char *)(v19 + v18) = v16[v18];
          unsigned int v17 = *(_DWORD *)(a1 + 84);
          ++v18;
        }
        while (v17 > v18);
        unint64_t v14 = *(unsigned int *)(a1 + 80);
      }
      ++v15;
      v16 += 16;
    }
    while (v15 < v14);
  }
  return result;
}

uint64_t ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressMacroblock(v9, *(void *)(a1 + 40), *(unsigned __int8 **)(a1 + 48), *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 208) + 52));
  unint64_t v3 = *(unsigned int *)(a1 + 80);
  if (v3)
  {
    unint64_t v4 = 0;
    int v5 = (char *)&v9[8 * (unint64_t)*(unsigned int *)(a1 + 72)] + 8 * *(unsigned int *)(a1 + 76);
    LODWORD(v6) = *(_DWORD *)(a1 + 84);
    do
    {
      if (v6)
      {
        uint64_t v7 = 0;
        uint64_t v8 = *(void *)(a1 + 56) + *(void *)(a1 + 64) * v4;
        do
        {
          *(unsigned char *)(v8 + v7) = v5[v7];
          ++v7;
          uint64_t v6 = *(unsigned int *)(a1 + 84);
        }
        while (8 * v6 > (unint64_t)v7);
        unint64_t v3 = *(unsigned int *)(a1 + 80);
      }
      ++v4;
      v5 += 128;
    }
    while (v4 < v3);
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  size_t v72 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v83 = a8;
  uint64_t v17 = a8 >> 5;
  unsigned int v71 = a8 + a10 - 1;
  unsigned int v18 = v71 >> 5;
  uint64_t v86 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v78 = v23;
  if (v17 <= v18)
  {
    unsigned int v77 = a7 + a9 - 1;
    if (a7 >> 5 <= v77 >> 5)
    {
      uint64_t v85 = (a5 - 1) >> 5;
      int v84 = ((a5 - 1) & 0x1F) + 1;
      unint64_t v75 = a7;
      uint64_t v69 = v18 + 1;
      unint64_t v70 = (unint64_t)a7 >> 5;
      unsigned int v76 = a7;
      do
      {
        unsigned int v24 = (32 * v17) | 0x1F;
        if (32 * (int)v17 <= v83) {
          unsigned int v25 = v83;
        }
        else {
          unsigned int v25 = 32 * v17;
        }
        if (v71 < v24) {
          unsigned int v24 = v71;
        }
        int v74 = v25 - 32 * v17;
        int v82 = v24 - v25 + 1;
        int v26 = ((a6 - 1) & 0x1F) + 1;
        if (v17 != (a6 - 1) >> 5) {
          int v26 = 32;
        }
        unsigned int v87 = v26;
        uint64_t v81 = a2 + (v25 - v83) * a11;
        unint64_t v27 = v70;
        do
        {
          unint64_t v28 = 32 * v27;
          unsigned int v29 = 32 * (v27 + 1) - 1;
          if (32 * (int)v27 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 32 * v27;
          }
          if (v77 < v29) {
            unsigned int v29 = v77;
          }
          int v31 = v29 - v30 + 1;
          uint64_t v32 = v86;
          if (v27 == v85) {
            unsigned int v33 = v84;
          }
          else {
            unsigned int v33 = 32;
          }
          BOOL v34 = 1;
          unint64_t v88 = v27 + 1;
          if (32 * (int)v17 >= v83 && v28 >= v75)
          {
            int v35 = v84;
            if (v27 != v85) {
              int v35 = 32;
            }
            BOOL v34 = v31 != v35 || v82 != v87;
          }
          unsigned int v37 = *(_DWORD *)(v86 + 128) >> (*(unsigned char *)(v86 + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 31;
          BOOL v39 = v38 >= 0x40;
          unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 5) - 1)));
          if (!v39) {
            unsigned int v40 = 0;
          }
          unsigned int v41 = *(_DWORD *)(v86 + 132) >> (*(unsigned char *)(v86 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 31;
          unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 5) - 1)));
          if (v42 >= 0x40) {
            unsigned int v44 = v43;
          }
          else {
            unsigned int v44 = 0;
          }
          if (v44 | v40)
          {
            int v45 = 0;
            unint64_t v46 = 0;
            BOOL v47 = v40 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v40;
              BOOL v50 = !v47;
              if (v47)
              {
                unint64_t v51 = ((unint64_t)(v49 & v27) << v45) | v46;
              }
              else
              {
                unsigned int v40 = 0;
                unint64_t v51 = v46;
              }
              if (!v50) {
                ++v45;
              }
              --v44;
              if (v48)
              {
                unint64_t v46 = ((unint64_t)(v49 & v17) << v45) | v51;
              }
              else
              {
                unsigned int v44 = 0;
                unint64_t v46 = v51;
              }
              if (v48) {
                ++v45;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v40 != 0;
            }
            while (v44 | v40);
          }
          else
          {
            unint64_t v46 = 0;
          }
          __int32 v52 = (int8x8_t *)(a3 + v17 * v72 + (v27 << 10));
          if (v78)
          {
            int v53 = v31;
            BOOL v54 = v34;
            int v55 = 32 * v27;
            memcpy(__dst, (const void *)(a3 + v17 * v72 + (v27 << 10)), 0x400uLL);
            LODWORD(v28) = v55;
            BOOL v34 = v54;
            int v31 = v53;
            uint64_t v32 = v86;
            __int32 v52 = (int8x8_t *)__dst;
          }
          unsigned int v56 = (unsigned __int8 *)(a4 + 32 * v46);
          uint64_t v57 = v81 + v30 - a7;
          char v58 = v33 < 0x20 || v34;
          if ((v58 & 1) != 0 || v87 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v32;
            block[5] = v52;
            char v96 = v33;
            char v97 = v87;
            int v92 = v74;
            int v93 = v30 - v28;
            block[6] = v56;
            uint64_t v90 = v81 + v30 - a7;
            uint64_t v91 = a11;
            unsigned int v94 = v82;
            unsigned int v95 = v31;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v32 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                unsigned int v62 = *v56++;
                __int32 v52 = (int8x8_t *)((char *)v52
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[i + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[i]], 32, v52, v62));
              }
              unint64_t v63 = v94;
              if (v94 && v95)
              {
                unint64_t v64 = 0;
                int v65 = &__dst[32 * v92 + 1024 + v93];
                int v66 = 1;
                do
                {
                  if (v66)
                  {
                    uint64_t v67 = 0;
                    uint64_t v68 = v90 + v91 * v64;
                    do
                    {
                      *(unsigned char *)(v68 + v67) = v65[v67];
                      int v66 = v95;
                      ++v67;
                    }
                    while (v95 > v67);
                    unint64_t v63 = v94;
                  }
                  ++v64;
                  v65 += 32;
                }
                while (v64 < v63);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              unsigned int v60 = *v56++;
              __int32 v52 = (int8x8_t *)((char *)v52
                               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)(v57+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[j + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[j]), a11, v52, v60));
            }
          }
          unint64_t v27 = v88;
          a7 = v76;
        }
        while (v88 != (v77 >> 5) + 1);
        ++v17;
      }
      while (v17 != v69);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  size_t v72 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v83 = a8;
  uint64_t v17 = a8 >> 5;
  unsigned int v71 = a8 + a10 - 1;
  unsigned int v18 = v71 >> 5;
  uint64_t v86 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v78 = v23;
  if (v17 <= v18)
  {
    unsigned int v77 = a7 + a9 - 1;
    if (a7 >> 5 <= v77 >> 5)
    {
      uint64_t v85 = (a5 - 1) >> 5;
      int v84 = ((a5 - 1) & 0x1F) + 1;
      unint64_t v75 = a7;
      uint64_t v69 = v18 + 1;
      unint64_t v70 = (unint64_t)a7 >> 5;
      unsigned int v76 = a7;
      do
      {
        unsigned int v24 = (32 * v17) | 0x1F;
        if (32 * (int)v17 <= v83) {
          unsigned int v25 = v83;
        }
        else {
          unsigned int v25 = 32 * v17;
        }
        if (v71 < v24) {
          unsigned int v24 = v71;
        }
        int v74 = v25 - 32 * v17;
        int v82 = v24 - v25 + 1;
        int v26 = ((a6 - 1) & 0x1F) + 1;
        if (v17 != (a6 - 1) >> 5) {
          int v26 = 32;
        }
        unsigned int v87 = v26;
        uint64_t v81 = a2 + (v25 - v83) * a11;
        unint64_t v27 = v70;
        do
        {
          unint64_t v28 = 32 * v27;
          unsigned int v29 = 32 * (v27 + 1) - 1;
          if (32 * (int)v27 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 32 * v27;
          }
          if (v77 < v29) {
            unsigned int v29 = v77;
          }
          int v31 = v29 - v30 + 1;
          uint64_t v32 = v86;
          if (v27 == v85) {
            unsigned int v33 = v84;
          }
          else {
            unsigned int v33 = 32;
          }
          BOOL v34 = 1;
          unint64_t v88 = v27 + 1;
          if (32 * (int)v17 >= v83 && v28 >= v75)
          {
            int v35 = v84;
            if (v27 != v85) {
              int v35 = 32;
            }
            BOOL v34 = v31 != v35 || v82 != v87;
          }
          unsigned int v37 = *(_DWORD *)(v86 + 128) >> (*(unsigned char *)(v86 + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 31;
          BOOL v39 = v38 >= 0x40;
          unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 5) - 1)));
          if (!v39) {
            unsigned int v40 = 0;
          }
          unsigned int v41 = *(_DWORD *)(v86 + 132) >> (*(unsigned char *)(v86 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 31;
          unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 5) - 1)));
          if (v42 >= 0x40) {
            unsigned int v44 = v43;
          }
          else {
            unsigned int v44 = 0;
          }
          if (v44 | v40)
          {
            int v45 = 0;
            unint64_t v46 = 0;
            BOOL v47 = v40 != 0;
            BOOL v48 = v44 != 0;
            int v49 = 1;
            do
            {
              --v40;
              BOOL v50 = !v47;
              if (v47)
              {
                unint64_t v51 = ((unint64_t)(v49 & v27) << v45) | v46;
              }
              else
              {
                unsigned int v40 = 0;
                unint64_t v51 = v46;
              }
              if (!v50) {
                ++v45;
              }
              --v44;
              if (v48)
              {
                unint64_t v46 = ((unint64_t)(v49 & v17) << v45) | v51;
              }
              else
              {
                unsigned int v44 = 0;
                unint64_t v46 = v51;
              }
              if (v48) {
                ++v45;
              }
              v49 *= 2;
              --v45;
              BOOL v48 = v44 != 0;
              BOOL v47 = v40 != 0;
            }
            while (v44 | v40);
          }
          else
          {
            unint64_t v46 = 0;
          }
          __int32 v52 = (int8x8_t *)(a3 + v17 * v72 + (v27 << 10));
          if (v78)
          {
            int v53 = v31;
            BOOL v54 = v34;
            int v55 = 32 * v27;
            memcpy(__dst, (const void *)(a3 + v17 * v72 + (v27 << 10)), 0x400uLL);
            LODWORD(v28) = v55;
            BOOL v34 = v54;
            int v31 = v53;
            uint64_t v32 = v86;
            __int32 v52 = (int8x8_t *)__dst;
          }
          unsigned int v56 = (unsigned __int8 *)(a4 + 32 * v46);
          uint64_t v57 = v81 + v30 - a7;
          char v58 = v33 < 0x20 || v34;
          if ((v58 & 1) != 0 || v87 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v32;
            block[5] = v52;
            char v96 = v33;
            char v97 = v87;
            int v92 = v74;
            int v93 = v30 - v28;
            block[6] = v56;
            uint64_t v90 = v81 + v30 - a7;
            uint64_t v91 = a11;
            unsigned int v94 = v82;
            unsigned int v95 = v31;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v32 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                unsigned int v62 = *v56++;
                __int32 v52 = (int8x8_t *)((char *)v52
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[i + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[i]], 32, v52, v62));
              }
              unint64_t v63 = v94;
              if (v94 && v95)
              {
                unint64_t v64 = 0;
                int v65 = &__dst[32 * v92 + 1024 + v93];
                int v66 = 1;
                do
                {
                  if (v66)
                  {
                    uint64_t v67 = 0;
                    uint64_t v68 = v90 + v91 * v64;
                    do
                    {
                      *(unsigned char *)(v68 + v67) = v65[v67];
                      int v66 = v95;
                      ++v67;
                    }
                    while (v95 > v67);
                    unint64_t v63 = v94;
                  }
                  ++v64;
                  v65 += 32;
                }
                while (v64 < v63);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              unsigned int v60 = *v56++;
              __int32 v52 = (int8x8_t *)((char *)v52
                               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int8x8_t *)(v57+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[j + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[j]), a11, v52, v60));
            }
          }
          unint64_t v27 = v88;
          a7 = v76;
        }
        while (v88 != (v77 >> 5) + 1);
        ++v17;
      }
      while (v17 != v69);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  size_t v71 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v80 = a8;
  uint64_t v16 = a8 >> 5;
  unsigned int v70 = a8 + a10 - 1;
  unsigned int v17 = v70 >> 5;
  uint64_t v83 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v75 = v22;
  if (v16 <= v17)
  {
    unsigned int v74 = a7 + a9 - 1;
    if (a7 >> 5 <= v74 >> 5)
    {
      uint64_t v82 = (a5 - 1) >> 5;
      int v81 = ((a5 - 1) & 0x1F) + 1;
      uint64_t v69 = v17 + 1;
      do
      {
        unsigned int v23 = (32 * v16) | 0x1F;
        if (32 * (int)v16 <= v80) {
          unsigned int v24 = v80;
        }
        else {
          unsigned int v24 = 32 * v16;
        }
        if (v70 < v23) {
          unsigned int v23 = v70;
        }
        int v73 = v24 - 32 * v16;
        int v79 = v23 - v24 + 1;
        int v25 = ((a6 - 1) & 0x1F) + 1;
        if (v16 != (a6 - 1) >> 5) {
          int v25 = 32;
        }
        unsigned int v84 = v25;
        uint64_t v78 = a2 + (v24 - v80) * a11;
        unint64_t v26 = (unint64_t)a7 >> 5;
        do
        {
          unint64_t v27 = 32 * v26;
          unsigned int v28 = 32 * (v26 + 1) - 1;
          if (32 * (int)v26 <= a7) {
            unsigned int v29 = a7;
          }
          else {
            unsigned int v29 = 32 * v26;
          }
          if (v74 < v28) {
            unsigned int v28 = a7 + a9 - 1;
          }
          int v30 = v28 - v29 + 1;
          if (v26 == v82) {
            unsigned int v31 = v81;
          }
          else {
            unsigned int v31 = 32;
          }
          BOOL v32 = 1;
          unint64_t v85 = v26 + 1;
          if (32 * (int)v16 < v80)
          {
            uint64_t v33 = v83;
          }
          else
          {
            uint64_t v33 = v83;
            if (v27 >= a7)
            {
              int v34 = v81;
              if (v26 != v82) {
                int v34 = 32;
              }
              BOOL v32 = v30 != v34 || v79 != v84;
            }
          }
          unsigned int v36 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 31;
          BOOL v38 = v37 >= 0x40;
          unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 5) - 1)));
          if (!v38) {
            unsigned int v39 = 0;
          }
          unsigned int v40 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 31;
          unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 5) - 1)));
          if (v41 >= 0x40) {
            unsigned int v43 = v42;
          }
          else {
            unsigned int v43 = 0;
          }
          if (v43 | v39)
          {
            int v44 = 0;
            unint64_t v45 = 0;
            BOOL v46 = v39 != 0;
            BOOL v47 = v43 != 0;
            int v48 = 1;
            do
            {
              --v39;
              BOOL v49 = !v46;
              if (v46)
              {
                unint64_t v50 = ((unint64_t)(v48 & v26) << v44) | v45;
              }
              else
              {
                unsigned int v39 = 0;
                unint64_t v50 = v45;
              }
              if (!v49) {
                ++v44;
              }
              --v43;
              if (v47)
              {
                unint64_t v45 = ((unint64_t)(v48 & v16) << v44) | v50;
              }
              else
              {
                unsigned int v43 = 0;
                unint64_t v45 = v50;
              }
              if (v47) {
                ++v44;
              }
              v48 *= 2;
              --v44;
              BOOL v47 = v43 != 0;
              BOOL v46 = v39 != 0;
            }
            while (v43 | v39);
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v51 = (int16x4_t *)(a3 + v16 * v71 + 768 * v26);
          if (v75)
          {
            int v52 = v30;
            unsigned int v53 = v31;
            memcpy(__dst, (const void *)(a3 + v16 * v71 + 768 * v26), 0x400uLL);
            unsigned int v31 = v53;
            int v30 = v52;
            uint64_t v33 = v83;
            unint64_t v51 = (int16x4_t *)__dst;
          }
          BOOL v54 = (unsigned __int8 *)(a4 + 32 * v45);
          uint64_t v55 = v78 + v29 - a7;
          char v56 = v31 < 0x20 || v32;
          if ((v56 & 1) != 0 || v84 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v33;
            block[5] = v51;
            char v94 = v31;
            char v95 = v84;
            int v90 = v73;
            int v91 = v29 - v27;
            block[6] = v54;
            uint64_t v88 = v78 + v29 - a7;
            uint64_t v89 = a11;
            unsigned int v92 = v79;
            unsigned int v93 = v30;
            if (v32)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            }
            else
            {
              uint64_t v60 = 0;
              int v61 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
              do
              {
                unsigned int v62 = *v54++;
                unint64_t v51 = (int16x4_t *)((char *)v51
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60]], 32, v51, v62, v61));
                v60 += 2;
              }
              while (v60 != 64);
              unint64_t v63 = v92;
              if (v92 && v93)
              {
                unint64_t v64 = 0;
                int v65 = &__dst[32 * v90 + 1024 + v91];
                int v66 = 1;
                do
                {
                  if (v66)
                  {
                    uint64_t v67 = 0;
                    uint64_t v68 = v88 + v89 * v64;
                    do
                    {
                      *(unsigned char *)(v68 + v67) = v65[v67];
                      int v66 = v93;
                      ++v67;
                    }
                    while (v93 > v67);
                    unint64_t v63 = v92;
                  }
                  ++v64;
                  v65 += 32;
                }
                while (v64 < v63);
              }
            }
          }
          else
          {
            uint64_t v57 = 0;
            int v58 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
            do
            {
              unsigned int v59 = *v54++;
              unint64_t v51 = (int16x4_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57], a11, v51, v59, v58));
              v57 += 2;
            }
            while (v57 != 64);
          }
          unint64_t v26 = v85;
        }
        while (v85 != (v74 >> 5) + 1);
        ++v16;
      }
      while (v16 != v69);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  size_t v71 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v80 = a8;
  uint64_t v16 = a8 >> 5;
  unsigned int v70 = a8 + a10 - 1;
  unsigned int v17 = v70 >> 5;
  uint64_t v83 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v75 = v22;
  if (v16 <= v17)
  {
    unsigned int v74 = a7 + a9 - 1;
    if (a7 >> 5 <= v74 >> 5)
    {
      uint64_t v82 = (a5 - 1) >> 5;
      int v81 = ((a5 - 1) & 0x1F) + 1;
      uint64_t v69 = v17 + 1;
      do
      {
        unsigned int v23 = (32 * v16) | 0x1F;
        if (32 * (int)v16 <= v80) {
          unsigned int v24 = v80;
        }
        else {
          unsigned int v24 = 32 * v16;
        }
        if (v70 < v23) {
          unsigned int v23 = v70;
        }
        int v73 = v24 - 32 * v16;
        int v79 = v23 - v24 + 1;
        int v25 = ((a6 - 1) & 0x1F) + 1;
        if (v16 != (a6 - 1) >> 5) {
          int v25 = 32;
        }
        unsigned int v84 = v25;
        uint64_t v78 = a2 + (v24 - v80) * a11;
        unint64_t v26 = (unint64_t)a7 >> 5;
        do
        {
          unint64_t v27 = 32 * v26;
          unsigned int v28 = 32 * (v26 + 1) - 1;
          if (32 * (int)v26 <= a7) {
            unsigned int v29 = a7;
          }
          else {
            unsigned int v29 = 32 * v26;
          }
          if (v74 < v28) {
            unsigned int v28 = a7 + a9 - 1;
          }
          int v30 = v28 - v29 + 1;
          if (v26 == v82) {
            unsigned int v31 = v81;
          }
          else {
            unsigned int v31 = 32;
          }
          BOOL v32 = 1;
          unint64_t v85 = v26 + 1;
          if (32 * (int)v16 < v80)
          {
            uint64_t v33 = v83;
          }
          else
          {
            uint64_t v33 = v83;
            if (v27 >= a7)
            {
              int v34 = v81;
              if (v26 != v82) {
                int v34 = 32;
              }
              BOOL v32 = v30 != v34 || v79 != v84;
            }
          }
          unsigned int v36 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 31;
          BOOL v38 = v37 >= 0x40;
          unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 5) - 1)));
          if (!v38) {
            unsigned int v39 = 0;
          }
          unsigned int v40 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 31;
          unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 5) - 1)));
          if (v41 >= 0x40) {
            unsigned int v43 = v42;
          }
          else {
            unsigned int v43 = 0;
          }
          if (v43 | v39)
          {
            int v44 = 0;
            unint64_t v45 = 0;
            BOOL v46 = v39 != 0;
            BOOL v47 = v43 != 0;
            int v48 = 1;
            do
            {
              --v39;
              BOOL v49 = !v46;
              if (v46)
              {
                unint64_t v50 = ((unint64_t)(v48 & v26) << v44) | v45;
              }
              else
              {
                unsigned int v39 = 0;
                unint64_t v50 = v45;
              }
              if (!v49) {
                ++v44;
              }
              --v43;
              if (v47)
              {
                unint64_t v45 = ((unint64_t)(v48 & v16) << v44) | v50;
              }
              else
              {
                unsigned int v43 = 0;
                unint64_t v45 = v50;
              }
              if (v47) {
                ++v44;
              }
              v48 *= 2;
              --v44;
              BOOL v47 = v43 != 0;
              BOOL v46 = v39 != 0;
            }
            while (v43 | v39);
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v51 = (int16x4_t *)(a3 + v16 * v71 + 640 * v26);
          if (v75)
          {
            int v52 = v30;
            unsigned int v53 = v31;
            memcpy(__dst, (const void *)(a3 + v16 * v71 + 640 * v26), 0x400uLL);
            unsigned int v31 = v53;
            int v30 = v52;
            uint64_t v33 = v83;
            unint64_t v51 = (int16x4_t *)__dst;
          }
          BOOL v54 = (unsigned __int8 *)(a4 + 32 * v45);
          uint64_t v55 = v78 + v29 - a7;
          char v56 = v31 < 0x20 || v32;
          if ((v56 & 1) != 0 || v84 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v33;
            block[5] = v51;
            char v94 = v31;
            char v95 = v84;
            int v90 = v73;
            int v91 = v29 - v27;
            block[6] = v54;
            uint64_t v88 = v78 + v29 - a7;
            uint64_t v89 = a11;
            unsigned int v92 = v79;
            unsigned int v93 = v30;
            if (v32)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            }
            else
            {
              uint64_t v60 = 0;
              int v61 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
              do
              {
                unsigned int v62 = *v54++;
                unint64_t v51 = (int16x4_t *)((char *)v51
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60]], 32, v51, v62, v61));
                v60 += 2;
              }
              while (v60 != 64);
              unint64_t v63 = v92;
              if (v92 && v93)
              {
                unint64_t v64 = 0;
                int v65 = &__dst[32 * v90 + 1024 + v91];
                int v66 = 1;
                do
                {
                  if (v66)
                  {
                    uint64_t v67 = 0;
                    uint64_t v68 = v88 + v89 * v64;
                    do
                    {
                      *(unsigned char *)(v68 + v67) = v65[v67];
                      int v66 = v93;
                      ++v67;
                    }
                    while (v93 > v67);
                    unint64_t v63 = v92;
                  }
                  ++v64;
                  v65 += 32;
                }
                while (v64 < v63);
              }
            }
          }
          else
          {
            uint64_t v57 = 0;
            int v58 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
            do
            {
              unsigned int v59 = *v54++;
              unint64_t v51 = (int16x4_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57], a11, v51, v59, v58));
              v57 += 2;
            }
            while (v57 != 64);
          }
          unint64_t v26 = v85;
        }
        while (v85 != (v74 >> 5) + 1);
        ++v16;
      }
      while (v16 != v69);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v97 = *MEMORY[0x263EF8340];
  size_t v71 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v80 = a8;
  uint64_t v16 = a8 >> 5;
  unsigned int v70 = a8 + a10 - 1;
  unsigned int v17 = v70 >> 5;
  uint64_t v83 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v75 = v22;
  if (v16 <= v17)
  {
    unsigned int v74 = a7 + a9 - 1;
    if (a7 >> 5 <= v74 >> 5)
    {
      uint64_t v82 = (a5 - 1) >> 5;
      int v81 = ((a5 - 1) & 0x1F) + 1;
      uint64_t v69 = v17 + 1;
      do
      {
        unsigned int v23 = (32 * v16) | 0x1F;
        if (32 * (int)v16 <= v80) {
          unsigned int v24 = v80;
        }
        else {
          unsigned int v24 = 32 * v16;
        }
        if (v70 < v23) {
          unsigned int v23 = v70;
        }
        int v73 = v24 - 32 * v16;
        int v79 = v23 - v24 + 1;
        int v25 = ((a6 - 1) & 0x1F) + 1;
        if (v16 != (a6 - 1) >> 5) {
          int v25 = 32;
        }
        unsigned int v84 = v25;
        uint64_t v78 = a2 + (v24 - v80) * a11;
        unint64_t v26 = (unint64_t)a7 >> 5;
        do
        {
          unint64_t v27 = 32 * v26;
          unsigned int v28 = 32 * (v26 + 1) - 1;
          if (32 * (int)v26 <= a7) {
            unsigned int v29 = a7;
          }
          else {
            unsigned int v29 = 32 * v26;
          }
          if (v74 < v28) {
            unsigned int v28 = a7 + a9 - 1;
          }
          int v30 = v28 - v29 + 1;
          if (v26 == v82) {
            unsigned int v31 = v81;
          }
          else {
            unsigned int v31 = 32;
          }
          BOOL v32 = 1;
          unint64_t v85 = v26 + 1;
          if (32 * (int)v16 < v80)
          {
            uint64_t v33 = v83;
          }
          else
          {
            uint64_t v33 = v83;
            if (v27 >= a7)
            {
              int v34 = v81;
              if (v26 != v82) {
                int v34 = 32;
              }
              BOOL v32 = v30 != v34 || v79 != v84;
            }
          }
          unsigned int v36 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 31;
          BOOL v38 = v37 >= 0x40;
          unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 5) - 1)));
          if (!v38) {
            unsigned int v39 = 0;
          }
          unsigned int v40 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 31;
          unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 5) - 1)));
          if (v41 >= 0x40) {
            unsigned int v43 = v42;
          }
          else {
            unsigned int v43 = 0;
          }
          if (v43 | v39)
          {
            int v44 = 0;
            unint64_t v45 = 0;
            BOOL v46 = v39 != 0;
            BOOL v47 = v43 != 0;
            int v48 = 1;
            do
            {
              --v39;
              BOOL v49 = !v46;
              if (v46)
              {
                unint64_t v50 = ((unint64_t)(v48 & v26) << v44) | v45;
              }
              else
              {
                unsigned int v39 = 0;
                unint64_t v50 = v45;
              }
              if (!v49) {
                ++v44;
              }
              --v43;
              if (v47)
              {
                unint64_t v45 = ((unint64_t)(v48 & v16) << v44) | v50;
              }
              else
              {
                unsigned int v43 = 0;
                unint64_t v45 = v50;
              }
              if (v47) {
                ++v44;
              }
              v48 *= 2;
              --v44;
              BOOL v47 = v43 != 0;
              BOOL v46 = v39 != 0;
            }
            while (v43 | v39);
          }
          else
          {
            unint64_t v45 = 0;
          }
          unint64_t v51 = (int16x4_t *)(a3 + v16 * v71 + (v26 << 9));
          if (v75)
          {
            int v52 = v30;
            unsigned int v53 = v31;
            memcpy(__dst, (const void *)(a3 + v16 * v71 + (v26 << 9)), 0x400uLL);
            unsigned int v31 = v53;
            int v30 = v52;
            uint64_t v33 = v83;
            unint64_t v51 = (int16x4_t *)__dst;
          }
          BOOL v54 = (unsigned __int8 *)(a4 + 32 * v45);
          uint64_t v55 = v78 + v29 - a7;
          char v56 = v31 < 0x20 || v32;
          if ((v56 & 1) != 0 || v84 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v33;
            block[5] = v51;
            char v94 = v31;
            char v95 = v84;
            int v90 = v73;
            int v91 = v29 - v27;
            block[6] = v54;
            uint64_t v88 = v78 + v29 - a7;
            uint64_t v89 = a11;
            unsigned int v92 = v79;
            unsigned int v93 = v30;
            if (v32)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            }
            else
            {
              uint64_t v60 = 0;
              int v61 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
              do
              {
                unsigned int v62 = *v54++;
                unint64_t v51 = (int16x4_t *)((char *)v51
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[128* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60 + 1]+ 1024+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v60]], 32, v51, v62, v61));
                v60 += 2;
              }
              while (v60 != 64);
              unint64_t v63 = v92;
              if (v92 && v93)
              {
                unint64_t v64 = 0;
                int v65 = &__dst[32 * v90 + 1024 + v91];
                int v66 = 1;
                do
                {
                  if (v66)
                  {
                    uint64_t v67 = 0;
                    uint64_t v68 = v88 + v89 * v64;
                    do
                    {
                      *(unsigned char *)(v68 + v67) = v65[v67];
                      int v66 = v93;
                      ++v67;
                    }
                    while (v93 > v67);
                    unint64_t v63 = v92;
                  }
                  ++v64;
                  v65 += 32;
                }
                while (v64 < v63);
              }
            }
          }
          else
          {
            uint64_t v57 = 0;
            int v58 = *(_DWORD *)(*(void *)(v33 + 208) + 52);
            do
            {
              unsigned int v59 = *v54++;
              unint64_t v51 = (int16x4_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57 + 1]+ 8* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v57], a11, v51, v59, v58));
              v57 += 2;
            }
            while (v57 != 64);
          }
          unint64_t v26 = v85;
        }
        while (v85 != (v74 >> 5) + 1);
        ++v16;
      }
      while (v16 != v69);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      unsigned int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            uint64_t v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            unsigned int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          size_t v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                unsigned int v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      unsigned int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            uint64_t v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            unsigned int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          size_t v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                unsigned int v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + (v38 << 10));
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + (v38 << 10)), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 768 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 768 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 640 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 640 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE1ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)1,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            char v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          unsigned int v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                unsigned int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                uint64_t v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              unsigned int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            char v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          unsigned int v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                unsigned int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                uint64_t v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              unsigned int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 1536 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 1536 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                unsigned int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 1280 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 1280 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                unsigned int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + (v38 << 10));
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + (v38 << 10)), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                unsigned int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            char v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          unsigned int v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                uint64_t v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v16 = v15;
  int v18 = v17;
  int v20 = v19;
  uint64_t v94 = v21;
  uint64_t v95 = v22;
  uint64_t v88 = v23;
  uint64_t v24 = v12;
  uint64_t v115 = *MEMORY[0x263EF8340];
  size_t v87 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v99 = v14;
  uint64_t v29 = v14 >> 5;
  unsigned int v86 = v14 + a10 - 1;
  unsigned int v30 = v86 >> 5;
  uint64_t v102 = v24;
  if (*(void *)(v24 + 168)) {
    int v31 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v31 = 0;
  }
  BOOL v32 = (v31 & 0xD00) == 0 || v31 == 768;
  int v33 = v31 & 0xE00;
  int v35 = !v32 && v33 != 1024;
  int v93 = v35;
  if (v29 <= v30)
  {
    unsigned int v92 = v16 + a9 - 1;
    if (v16 >> 5 <= v92 >> 5)
    {
      uint64_t v101 = (v20 - 1) >> 5;
      int v100 = ((v20 - 1) & 0x1F) + 1;
      uint64_t v36 = 4 * a11;
      unint64_t v90 = v16;
      uint64_t v84 = v30 + 1;
      unint64_t v85 = (unint64_t)v16 >> 5;
      int v37 = AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions;
      unsigned int v91 = v16;
      do
      {
        unsigned int v38 = (32 * v29) | 0x1F;
        if (32 * (int)v29 <= v99) {
          unsigned int v39 = v99;
        }
        else {
          unsigned int v39 = 32 * v29;
        }
        if (v86 < v38) {
          unsigned int v38 = v86;
        }
        unsigned int v89 = v39 - 32 * v29;
        int v98 = v38 - v39 + 1;
        int v40 = ((v18 - 1) & 0x1F) + 1;
        if (v29 != (v18 - 1) >> 5) {
          int v40 = 32;
        }
        unsigned int v103 = v40;
        uint64_t v96 = v88 + (v39 - v99) * a11;
        size_t v97 = v29 * v87;
        unint64_t v41 = v85;
        do
        {
          unint64_t v42 = 32 * v41;
          unsigned int v43 = 32 * (v41 + 1) - 1;
          if (32 * (int)v41 <= v16) {
            unsigned int v44 = v16;
          }
          else {
            unsigned int v44 = 32 * v41;
          }
          if (v92 < v43) {
            unsigned int v43 = v92;
          }
          int v45 = v43 - v44 + 1;
          uint64_t v46 = v102;
          if (v41 == v101) {
            unsigned int v47 = v100;
          }
          else {
            unsigned int v47 = 32;
          }
          BOOL v48 = 1;
          unint64_t v104 = v41 + 1;
          if (32 * (int)v29 >= v99 && v42 >= v90)
          {
            int v49 = v100;
            if (v41 != v101) {
              int v49 = 32;
            }
            BOOL v48 = v45 != v49 || v98 != v103;
          }
          unsigned int v51 = *(_DWORD *)(v102 + 128) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v51 <= 1) {
            unsigned int v51 = 1;
          }
          unsigned int v52 = v51 + 31;
          BOOL v53 = v52 >= 0x40;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v52 >> 5) - 1)));
          if (!v53) {
            unsigned int v54 = 0;
          }
          unsigned int v55 = *(_DWORD *)(v102 + 132) >> (*(unsigned char *)(v102 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 31;
          unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 5) - 1)));
          if (v56 >= 0x40) {
            unsigned int v58 = v57;
          }
          else {
            unsigned int v58 = 0;
          }
          if (v58 | v54)
          {
            int v59 = 0;
            unint64_t v60 = 0;
            BOOL v61 = v54 != 0;
            BOOL v62 = v58 != 0;
            int v63 = 1;
            do
            {
              --v54;
              BOOL v64 = !v61;
              if (v61)
              {
                unint64_t v65 = ((unint64_t)(v63 & v41) << v59) | v60;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v65 = v60;
              }
              if (!v64) {
                ++v59;
              }
              --v58;
              if (v62)
              {
                unint64_t v60 = ((unint64_t)(v63 & v29) << v59) | v65;
              }
              else
              {
                unsigned int v58 = 0;
                unint64_t v60 = v65;
              }
              if (v62) {
                ++v59;
              }
              v63 *= 2;
              --v59;
              BOOL v62 = v58 != 0;
              BOOL v61 = v54 != 0;
            }
            while (v58 | v54);
          }
          else
          {
            unint64_t v60 = 0;
          }
          int v66 = (int32x4_t *)(v94 + v97 + (v41 << 11));
          if (v93)
          {
            BOOL v67 = v48;
            char v68 = v37;
            unsigned int v69 = v47;
            int v70 = 32 * v41;
            memcpy(__dst, (const void *)(v94 + v97 + (v41 << 11)), 0x800uLL);
            LODWORD(v42) = v70;
            unsigned int v47 = v69;
            int v37 = v68;
            uint64_t v36 = 4 * a11;
            BOOL v48 = v67;
            uint64_t v46 = v102;
            int v66 = (int32x4_t *)__dst;
          }
          unsigned int v71 = (unsigned __int8 *)(v95 + 32 * v60);
          uint64_t v72 = v96 + 2 * (v44 - v16);
          char v73 = v47 < 0x20 || v48;
          if ((v73 & 1) != 0 || v103 < 0x20)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh1ELNS7_13SubblockOrderE2EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v46;
            block[5] = v66;
            char v112 = v47;
            char v113 = v103;
            unsigned int v108 = v89;
            unsigned int v109 = v44 - v42;
            block[6] = v71;
            uint64_t v106 = v96 + 2 * (v44 - v16);
            uint64_t v107 = a11;
            unsigned int v110 = v98;
            unsigned int v111 = v45;
            if (v48)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v46 + 8) + 7384), block);
            }
            else
            {
              for (uint64_t i = 0; i != 64; i += 2)
              {
                int v77 = *v71++;
                int v66 = (int32x4_t *)((char *)v66
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)&__dst[256 * (unint64_t)v37[i + 1] + 2048 + 16 * v37[i]], 64, v66, v77, v25, v26, v27, v28));
              }
              unint64_t v78 = v110;
              if (v110)
              {
                unint64_t v79 = 0;
                uint64_t v80 = &__dst[64 * (unint64_t)v108 + 2048 + 2 * v109];
                unsigned int v81 = v111;
                do
                {
                  if (v81)
                  {
                    uint64_t v82 = 0;
                    uint64_t v83 = v106 + v107 * v79;
                    do
                    {
                      *(unsigned char *)(v83 + v82) = v80[v82];
                      ++v82;
                      unsigned int v81 = v111;
                    }
                    while (2 * (unint64_t)v111 > v82);
                    unint64_t v78 = v110;
                  }
                  ++v79;
                  v80 += 64;
                }
                while (v79 < v78);
              }
            }
          }
          else
          {
            for (uint64_t j = 0; j != 64; j += 2)
            {
              int v75 = *v71++;
              int v66 = (int32x4_t *)((char *)v66
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock((int32x4_t *)(v72 + v36 * v37[j + 1] + 16 * v37[j]), a11, v66, v75, v25, v26, v27, v28));
            }
          }
          unint64_t v41 = v104;
          unsigned int v16 = v91;
        }
        while (v104 != (v92 >> 5) + 1);
        ++v29;
      }
      while (v29 != v84);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 1152 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 1152 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)1>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + (v38 << 10));
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + (v38 << 10)), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)2>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v98 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v88 = v20;
  uint64_t v89 = v21;
  uint64_t v84 = v22;
  uint64_t v23 = v12;
  uint64_t v109 = *MEMORY[0x263EF8340];
  size_t v83 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v92 = v14;
  uint64_t v28 = v14 >> 5;
  unsigned int v82 = v14 + a10 - 1;
  unsigned int v29 = v82 >> 5;
  uint64_t v95 = v23;
  if (*(void *)(v23 + 168)) {
    int v30 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v30 = 0;
  }
  BOOL v31 = (v30 & 0xD00) == 0 || v30 == 768;
  int v32 = v30 & 0xE00;
  int v34 = !v31 && v32 != 1024;
  int v87 = v34;
  if (v28 <= v29)
  {
    unsigned int v86 = v98 + a9 - 1;
    if (v98 >> 5 <= v86 >> 5)
    {
      uint64_t v94 = (v19 - 1) >> 5;
      int v93 = ((v19 - 1) & 0x1F) + 1;
      uint64_t v81 = v29 + 1;
      do
      {
        unsigned int v35 = (32 * v28) | 0x1F;
        if (32 * (int)v28 <= v92) {
          unsigned int v36 = v92;
        }
        else {
          unsigned int v36 = 32 * v28;
        }
        if (v82 < v35) {
          unsigned int v35 = v82;
        }
        unsigned int v85 = v36 - 32 * v28;
        int v91 = v35 - v36 + 1;
        int v37 = ((v17 - 1) & 0x1F) + 1;
        if (v28 != (v17 - 1) >> 5) {
          int v37 = 32;
        }
        unsigned int v96 = v37;
        uint64_t v90 = v84 + (v36 - v92) * a11;
        unint64_t v38 = (unint64_t)v98 >> 5;
        do
        {
          unint64_t v39 = 32 * v38;
          unsigned int v40 = 32 * (v38 + 1) - 1;
          if (32 * (int)v38 <= v98) {
            unsigned int v41 = v98;
          }
          else {
            unsigned int v41 = 32 * v38;
          }
          if (v86 < v40) {
            unsigned int v40 = v98 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v38 == v94) {
            unsigned int v43 = v93;
          }
          else {
            unsigned int v43 = 32;
          }
          BOOL v44 = 1;
          unint64_t v97 = v38 + 1;
          if (32 * (int)v28 < v92)
          {
            uint64_t v45 = v95;
          }
          else
          {
            uint64_t v45 = v95;
            if (v39 >= v98)
            {
              int v46 = v93;
              if (v38 != v94) {
                int v46 = 32;
              }
              BOOL v44 = v42 != v46 || v91 != v96;
            }
          }
          unsigned int v48 = *(_DWORD *)(v45 + 128) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 31;
          BOOL v50 = v49 >= 0x40;
          unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 5) - 1)));
          if (!v50) {
            unsigned int v51 = 0;
          }
          unsigned int v52 = *(_DWORD *)(v45 + 132) >> (*(unsigned char *)(v45 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 31;
          unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 5) - 1)));
          if (v53 >= 0x40) {
            unsigned int v55 = v54;
          }
          else {
            unsigned int v55 = 0;
          }
          if (v55 | v51)
          {
            int v56 = 0;
            unint64_t v57 = 0;
            BOOL v58 = v51 != 0;
            BOOL v59 = v55 != 0;
            int v60 = 1;
            do
            {
              --v51;
              BOOL v61 = !v58;
              if (v58)
              {
                unint64_t v62 = ((unint64_t)(v60 & v38) << v56) | v57;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v62 = v57;
              }
              if (!v61) {
                ++v56;
              }
              --v55;
              if (v59)
              {
                unint64_t v57 = ((unint64_t)(v60 & v28) << v56) | v62;
              }
              else
              {
                unsigned int v55 = 0;
                unint64_t v57 = v62;
              }
              if (v59) {
                ++v56;
              }
              v60 *= 2;
              --v56;
              BOOL v59 = v55 != 0;
              BOOL v58 = v51 != 0;
            }
            while (v55 | v51);
          }
          else
          {
            unint64_t v57 = 0;
          }
          int v63 = (int32x4_t *)(v88 + v28 * v83 + 768 * v38);
          if (v87)
          {
            int v64 = v42;
            unsigned int v65 = v43;
            memcpy(__dst, (const void *)(v88 + v28 * v83 + 768 * v38), 0x800uLL);
            unsigned int v43 = v65;
            int v42 = v64;
            uint64_t v45 = v95;
            int v63 = (int32x4_t *)__dst;
          }
          int v66 = (unsigned __int8 *)(v89 + 32 * v57);
          uint64_t v67 = v90 + 2 * (v41 - v98);
          char v68 = v43 < 0x20 || v44;
          if ((v68 & 1) != 0 || v96 <= 0x1F)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE2ELj1ELh0ELNS7_13SubblockOrderE2EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v45;
            block[5] = v63;
            char v106 = v43;
            char v107 = v96;
            unsigned int v102 = v85;
            unsigned int v103 = v41 - v39;
            block[6] = v66;
            uint64_t v100 = v90 + 2 * (v41 - v98);
            uint64_t v101 = a11;
            unsigned int v104 = v91;
            unsigned int v105 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v45 + 8) + 7384), block);
            }
            else
            {
              uint64_t v72 = 0;
              int v73 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
              do
              {
                unsigned int v74 = *v66++;
                int v63 = (int32x4_t *)((char *)v63
                                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&__dst[256* (unint64_t)AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72 + 1]+ 2048+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v72]], 64, v63, v74, v73, v24, v25, v26, v27));
                v72 += 2;
              }
              while (v72 != 64);
              unint64_t v75 = v104;
              if (v104)
              {
                unint64_t v76 = 0;
                int v77 = &__dst[64 * (unint64_t)v102 + 2048 + 2 * v103];
                unsigned int v78 = v105;
                do
                {
                  if (v78)
                  {
                    uint64_t v79 = 0;
                    uint64_t v80 = v100 + v101 * v76;
                    do
                    {
                      *(unsigned char *)(v80 + v79) = v77[v79];
                      ++v79;
                      unsigned int v78 = v105;
                    }
                    while (2 * (unint64_t)v105 > v79);
                    unint64_t v75 = v104;
                  }
                  ++v76;
                  v77 += 64;
                }
                while (v76 < v75);
              }
            }
          }
          else
          {
            uint64_t v69 = 0;
            int v70 = *(_DWORD *)(*(void *)(v45 + 208) + 52);
            do
            {
              unsigned int v71 = *v66++;
              int v63 = (int32x4_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)2,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)3>::decompressSubblock(v67+ 4* a11* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69 + 1]+ 16* AGX::AppleCompressionGen2::SubblockOrderInfo<(AGX::AppleCompressionGen2::SubblockOrder)2,1u>::kSubblockPositions[v69], a11, v63, v71, v70, v24, v25, v26, v27));
              v69 += 2;
            }
            while (v69 != 64);
          }
          unint64_t v38 = v97;
        }
        while (v97 != (v86 >> 5) + 1);
        ++v28;
      }
      while (v28 != v81);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v258 = *MEMORY[0x263EF8340];
  size_t v201 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a8 >> 4;
  unsigned int v200 = a8 + a10 - 1;
  unsigned int v18 = v200 >> 4;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v208 = v23;
  if (v17 <= v18)
  {
    unsigned int v207 = a7 + a9 - 1;
    if (a7 >> 4 <= v207 >> 4)
    {
      uint64_t v214 = (a5 - 1) >> 4;
      int v213 = ((a5 - 1) & 0xF) + 1;
      uint64_t v203 = a11;
      uint64_t v204 = 4 * a11;
      uint64_t v199 = v18 + 1;
      uint64_t v24 = 2 * a11;
      unsigned int v205 = a8;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= a8) {
          unsigned int v26 = a8;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v200 < v25) {
          unsigned int v25 = v200;
        }
        int v206 = v26 - 16 * v17;
        int v212 = v25 - v26 + 1;
        int v27 = ((a6 - 1) & 0xF) + 1;
        if (v17 != (a6 - 1) >> 4) {
          int v27 = 16;
        }
        unsigned int v215 = v27;
        uint64_t v211 = a2 + (v26 - a8) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v207 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v214) {
            unsigned int v34 = v213;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v17 >= a8 && v29 >= a7)
          {
            int v36 = v213;
            if (v28 != v214) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v212 != v215;
          }
          unsigned int v38 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_65:
              uint64_t v45 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_65;
            }
          }
          int v44 = 0;
          uint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            if (v46) {
              v45 |= (unint64_t)(v48 & v28) << v44++;
            }
            else {
              unsigned int v40 = 0;
            }
            --v43;
            if (v47) {
              v45 |= (unint64_t)(v48 & v17) << v44++;
            }
            else {
              unsigned int v43 = 0;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_66:
          unsigned int v49 = (_OWORD *)(a3 + v17 * v201 + (v28 << 8));
          if (v208)
          {
            long long v50 = v49[13];
            v225[12] = v49[12];
            v225[13] = v50;
            long long v51 = v49[15];
            v225[14] = v49[14];
            v225[15] = v51;
            long long v52 = v49[9];
            v225[8] = v49[8];
            v225[9] = v52;
            long long v53 = v49[11];
            v225[10] = v49[10];
            v225[11] = v53;
            long long v54 = v49[5];
            v225[4] = v49[4];
            v225[5] = v54;
            long long v55 = v49[7];
            v225[6] = v49[6];
            v225[7] = v55;
            long long v56 = v49[1];
            v225[0] = *v49;
            v225[1] = v56;
            long long v57 = v49[2];
            long long v58 = v49[3];
            unsigned int v49 = v225;
            v225[2] = v57;
            v225[3] = v58;
          }
          BOOL v59 = (unsigned __int8 *)(a4 + 8 * v45);
          int v60 = (int8x8_t *)(v211 + v32 - a7);
          char v61 = v34 < 0x10 || v35;
          if ((v61 & 1) != 0 || v215 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v49;
            char v223 = v34;
            char v224 = v215;
            int v219 = v206;
            unsigned int v220 = v32 - v29;
            block[6] = a4 + 8 * v45;
            uint64_t v217 = v211 + v32 - a7;
            uint64_t v218 = a11;
            unsigned int v221 = v212;
            unsigned int v222 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v64 = *v59;
            if (v64 == 96)
            {
              int16x4_t v226 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v49, 0);
              int16x4_t v228 = v226;
              int16x4_t v230 = v226;
              int16x4_t v232 = v226;
              uint64_t v65 = 1;
            }
            else if (v64 == 31)
            {
              int16x4_t v141 = *(int16x4_t *)((char *)v49 + 8);
              int16x4_t v142 = (int16x4_t)v49[1];
              int16x4_t v143 = *(int16x4_t *)((char *)v49 + 24);
              int16x4_t v144 = vuzp2_s16(*(int16x4_t *)v49, v142);
              int16x4_t v226 = vuzp1_s16(*(int16x4_t *)v49, v142);
              int16x4_t v228 = v144;
              int16x4_t v230 = vuzp1_s16(v141, v143);
              int16x4_t v232 = vuzp2_s16(v141, v143);
              uint64_t v65 = 32;
            }
            else if (*v59)
            {
              uint64_t v65 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 16, (uint64_t)v49, v64);
            }
            else
            {
              uint64_t v65 = 0;
              int16x4_t v226 = 0;
              int16x4_t v228 = 0;
              int16x4_t v230 = 0;
              int16x4_t v232 = 0;
            }
            char v145 = (int8x8_t *)((char *)v49 + v65);
            unsigned int v146 = v59[1];
            if (v146 == 96)
            {
              int16x4_t v227 = (int16x4_t)vdup_lane_s8(*v145, 0);
              int16x4_t v229 = v227;
              int16x4_t v231 = v227;
              int16x4_t v233 = v227;
              uint64_t v147 = 1;
            }
            else if (v146 == 31)
            {
              int16x4_t v148 = (int16x4_t)v145[1];
              int16x4_t v149 = (int16x4_t)v145[2];
              int16x4_t v150 = (int16x4_t)v145[3];
              int16x4_t v151 = vuzp2_s16((int16x4_t)*v145, v149);
              int16x4_t v227 = vuzp1_s16((int16x4_t)*v145, v149);
              int16x4_t v229 = v151;
              int16x4_t v231 = vuzp1_s16(v148, v150);
              int16x4_t v233 = vuzp2_s16(v148, v150);
              uint64_t v147 = 32;
            }
            else if (v59[1])
            {
              uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 16, (uint64_t)v145, v146);
            }
            else
            {
              uint64_t v147 = 0;
              int16x4_t v227 = 0;
              int16x4_t v229 = 0;
              int16x4_t v231 = 0;
              int16x4_t v233 = 0;
            }
            uint64_t v152 = (int8x8_t *)((char *)v145 + v147);
            unsigned int v153 = v59[2];
            if (v153 == 96)
            {
              int16x4_t v234 = (int16x4_t)vdup_lane_s8(*v152, 0);
              int16x4_t v236 = v234;
              int16x4_t v238 = v234;
              int16x4_t v240 = v234;
              uint64_t v154 = 1;
            }
            else if (v153 == 31)
            {
              int16x4_t v155 = (int16x4_t)v152[1];
              int16x4_t v156 = (int16x4_t)v152[2];
              int16x4_t v157 = (int16x4_t)v152[3];
              int16x4_t v158 = vuzp2_s16((int16x4_t)*v152, v156);
              int16x4_t v234 = vuzp1_s16((int16x4_t)*v152, v156);
              int16x4_t v236 = v158;
              int16x4_t v238 = vuzp1_s16(v155, v157);
              int16x4_t v240 = vuzp2_s16(v155, v157);
              uint64_t v154 = 32;
            }
            else if (v59[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 16, (uint64_t)v152, v153);
            }
            else
            {
              uint64_t v154 = 0;
              int16x4_t v234 = 0;
              int16x4_t v236 = 0;
              int16x4_t v238 = 0;
              int16x4_t v240 = 0;
            }
            v159 = (int8x8_t *)((char *)v152 + v154);
            unsigned int v160 = v59[3];
            if (v160 == 96)
            {
              int16x4_t v235 = (int16x4_t)vdup_lane_s8(*v159, 0);
              int16x4_t v237 = v235;
              int16x4_t v239 = v235;
              int16x4_t v241 = v235;
              uint64_t v161 = 1;
            }
            else if (v160 == 31)
            {
              int16x4_t v162 = (int16x4_t)v159[1];
              int16x4_t v163 = (int16x4_t)v159[2];
              int16x4_t v164 = (int16x4_t)v159[3];
              int16x4_t v165 = vuzp2_s16((int16x4_t)*v159, v163);
              int16x4_t v235 = vuzp1_s16((int16x4_t)*v159, v163);
              int16x4_t v237 = v165;
              int16x4_t v239 = vuzp1_s16(v162, v164);
              int16x4_t v241 = vuzp2_s16(v162, v164);
              uint64_t v161 = 32;
            }
            else if (v59[3])
            {
              uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 16, (uint64_t)v159, v160);
            }
            else
            {
              uint64_t v161 = 0;
              int16x4_t v235 = 0;
              int16x4_t v237 = 0;
              int16x4_t v239 = 0;
              int16x4_t v241 = 0;
            }
            v166 = (int8x8_t *)((char *)v159 + v161);
            unsigned int v167 = v59[4];
            if (v167 == 96)
            {
              int16x4_t v242 = (int16x4_t)vdup_lane_s8(*v166, 0);
              int16x4_t v244 = v242;
              int16x4_t v246 = v242;
              int16x4_t v248 = v242;
              uint64_t v168 = 1;
            }
            else if (v167 == 31)
            {
              int16x4_t v169 = (int16x4_t)v166[1];
              int16x4_t v170 = (int16x4_t)v166[2];
              int16x4_t v171 = (int16x4_t)v166[3];
              int16x4_t v172 = vuzp2_s16((int16x4_t)*v166, v170);
              int16x4_t v242 = vuzp1_s16((int16x4_t)*v166, v170);
              int16x4_t v244 = v172;
              int16x4_t v246 = vuzp1_s16(v169, v171);
              int16x4_t v248 = vuzp2_s16(v169, v171);
              uint64_t v168 = 32;
            }
            else if (v59[4])
            {
              uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 16, (uint64_t)v166, v167);
            }
            else
            {
              uint64_t v168 = 0;
              int16x4_t v242 = 0;
              int16x4_t v244 = 0;
              int16x4_t v246 = 0;
              int16x4_t v248 = 0;
            }
            v173 = (int8x8_t *)((char *)v166 + v168);
            unsigned int v174 = v59[5];
            if (v174 == 96)
            {
              int16x4_t v243 = (int16x4_t)vdup_lane_s8(*v173, 0);
              int16x4_t v245 = v243;
              int16x4_t v247 = v243;
              int16x4_t v249 = v243;
              uint64_t v175 = 1;
            }
            else if (v174 == 31)
            {
              int16x4_t v176 = (int16x4_t)v173[1];
              int16x4_t v177 = (int16x4_t)v173[2];
              int16x4_t v178 = (int16x4_t)v173[3];
              int16x4_t v179 = vuzp2_s16((int16x4_t)*v173, v177);
              int16x4_t v243 = vuzp1_s16((int16x4_t)*v173, v177);
              int16x4_t v245 = v179;
              int16x4_t v247 = vuzp1_s16(v176, v178);
              int16x4_t v249 = vuzp2_s16(v176, v178);
              uint64_t v175 = 32;
            }
            else if (v59[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 16, (uint64_t)v173, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int16x4_t v243 = 0;
              int16x4_t v245 = 0;
              int16x4_t v247 = 0;
              int16x4_t v249 = 0;
            }
            v180 = (int8x8_t *)((char *)v173 + v175);
            unsigned int v181 = v59[6];
            if (v181 == 96)
            {
              int16x4_t v250 = (int16x4_t)vdup_lane_s8(*v180, 0);
              int16x4_t v252 = v250;
              int16x4_t v254 = v250;
              int16x4_t v256 = v250;
              uint64_t v182 = 1;
            }
            else if (v181 == 31)
            {
              int16x4_t v183 = (int16x4_t)v180[1];
              int16x4_t v184 = (int16x4_t)v180[2];
              int16x4_t v185 = (int16x4_t)v180[3];
              int16x4_t v186 = vuzp2_s16((int16x4_t)*v180, v184);
              int16x4_t v250 = vuzp1_s16((int16x4_t)*v180, v184);
              int16x4_t v252 = v186;
              int16x4_t v254 = vuzp1_s16(v183, v185);
              int16x4_t v256 = vuzp2_s16(v183, v185);
              uint64_t v182 = 32;
            }
            else if (v59[6])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 16, (uint64_t)v180, v181);
            }
            else
            {
              uint64_t v182 = 0;
              int16x4_t v250 = 0;
              int16x4_t v252 = 0;
              int16x4_t v254 = 0;
              int16x4_t v256 = 0;
            }
            v187 = (int8x8_t *)((char *)v180 + v182);
            unsigned int v188 = v59[7];
            if (v188 == 96)
            {
              int16x4_t v251 = (int16x4_t)vdup_lane_s8(*v187, 0);
              int16x4_t v253 = v251;
              int16x4_t v255 = v251;
              int16x4_t v257 = v251;
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else if (v188 == 31)
            {
              int16x4_t v190 = (int16x4_t)v187[1];
              int16x4_t v191 = (int16x4_t)v187[2];
              int16x4_t v192 = (int16x4_t)v187[3];
              int16x4_t v193 = vuzp2_s16((int16x4_t)*v187, v191);
              int16x4_t v251 = vuzp1_s16((int16x4_t)*v187, v191);
              int16x4_t v253 = v193;
              int16x4_t v255 = vuzp1_s16(v190, v192);
              int16x4_t v257 = vuzp2_s16(v190, v192);
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else if (v59[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 16, (uint64_t)v187, v188);
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else
            {
              int16x4_t v251 = 0;
              int16x4_t v253 = 0;
              int16x4_t v255 = 0;
              int16x4_t v257 = 0;
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            if (v222)
            {
              unint64_t v194 = 0;
              v195 = (char *)&v226 + 16 * v219 + v220;
              int v196 = 1;
              do
              {
                if (v196)
                {
                  uint64_t v197 = 0;
                  uint64_t v198 = v217 + v218 * v194;
                  do
                  {
                    *(unsigned char *)(v198 + v197) = v195[v197];
                    int v196 = v222;
                    ++v197;
                  }
                  while (v222 > v197);
                  unint64_t v189 = v221;
                }
                ++v194;
                v195 += 16;
              }
              while (v194 < v189);
            }
          }
          else
          {
            unsigned int v62 = *v59;
            if (v62 == 96)
            {
              int8x8_t v71 = vdup_lane_s8(*(int8x8_t *)v49, 0);
              *int v60 = v71;
              *(int8x8_t *)((char *)v60 + a11) = v71;
              *(int8x8_t *)((char *)v60 + 2 * a11) = v71;
              *(int8x8_t *)((char *)v60 + 3 * a11) = v71;
              uint64_t v63 = 1;
            }
            else if (v62 == 31)
            {
              int16x4_t v66 = *(int16x4_t *)v49;
              int16x4_t v67 = *(int16x4_t *)((char *)v49 + 8);
              int16x4_t v68 = (int16x4_t)v49[1];
              int16x4_t v69 = *(int16x4_t *)((char *)v49 + 24);
              *int v60 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v49, v68);
              *(int16x4_t *)((char *)v60 + a11) = vuzp2_s16(v66, v68);
              int v70 = (int16x4_t *)((char *)v60 + v24);
              *int v70 = vuzp1_s16(v67, v69);
              *(int16x4_t *)((char *)v70 + a11) = vuzp2_s16(v67, v69);
              uint64_t v63 = 32;
            }
            else if (*v59)
            {
              uint64_t v63 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v60, a11, (uint64_t)v49, v62);
            }
            else
            {
              uint64_t v63 = 0;
              *int v60 = 0;
              *(int8x8_t *)((char *)v60 + a11) = 0;
              *(int8x8_t *)((char *)v60 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v60 + 3 * a11) = 0;
            }
            uint64_t v72 = (int8x8_t *)((char *)v49 + v63);
            int v73 = v60 + 1;
            unsigned int v74 = v59[1];
            if (v74 == 96)
            {
              int8x8_t v81 = vdup_lane_s8(*v72, 0);
              *int v73 = v81;
              *(int8x8_t *)((char *)v73 + a11) = v81;
              *(int8x8_t *)((char *)v73 + 2 * a11) = v81;
              *(int8x8_t *)((char *)v73 + 3 * a11) = v81;
              uint64_t v75 = 1;
            }
            else if (v74 == 31)
            {
              int16x4_t v76 = (int16x4_t)*v72;
              int16x4_t v77 = (int16x4_t)v72[1];
              int16x4_t v78 = (int16x4_t)v72[2];
              int16x4_t v79 = (int16x4_t)v72[3];
              *int v73 = (int8x8_t)vuzp1_s16((int16x4_t)*v72, v78);
              *(int16x4_t *)((char *)v73 + a11) = vuzp2_s16(v76, v78);
              uint64_t v80 = (int16x4_t *)((char *)v73 + v24);
              *uint64_t v80 = vuzp1_s16(v77, v79);
              *(int16x4_t *)((char *)v80 + a11) = vuzp2_s16(v77, v79);
              uint64_t v75 = 32;
            }
            else if (v59[1])
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v73, a11, (uint64_t)v72, v74);
            }
            else
            {
              uint64_t v75 = 0;
              *int v73 = 0;
              *(int8x8_t *)((char *)v73 + a11) = 0;
              *(int8x8_t *)((char *)v73 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v73 + 3 * a11) = 0;
            }
            unsigned int v82 = (int8x8_t *)((char *)v72 + v75);
            size_t v83 = (int8x8_t *)((char *)v60 + v204);
            unsigned int v84 = v59[2];
            if (v84 == 96)
            {
              int8x8_t v91 = vdup_lane_s8(*v82, 0);
              int8x8_t *v83 = v91;
              *(int8x8_t *)((char *)v83 + a11) = v91;
              *(int8x8_t *)((char *)v83 + 2 * a11) = v91;
              *(int8x8_t *)((char *)v83 + 3 * a11) = v91;
              uint64_t v85 = 1;
            }
            else if (v84 == 31)
            {
              int16x4_t v86 = (int16x4_t)*v82;
              int16x4_t v87 = (int16x4_t)v82[1];
              int16x4_t v88 = (int16x4_t)v82[2];
              int16x4_t v89 = (int16x4_t)v82[3];
              int8x8_t *v83 = (int8x8_t)vuzp1_s16((int16x4_t)*v82, v88);
              *(int16x4_t *)((char *)v83 + a11) = vuzp2_s16(v86, v88);
              uint64_t v90 = (int16x4_t *)((char *)v83 + v24);
              *uint64_t v90 = vuzp1_s16(v87, v89);
              *(int16x4_t *)((char *)v90 + a11) = vuzp2_s16(v87, v89);
              uint64_t v85 = 32;
            }
            else if (v59[2])
            {
              uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v60 + v204), a11, (uint64_t)v82, v84);
            }
            else
            {
              uint64_t v85 = 0;
              int8x8_t *v83 = 0;
              *(int8x8_t *)((char *)v83 + a11) = 0;
              *(int8x8_t *)((char *)v83 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v83 + 3 * a11) = 0;
            }
            unsigned int v92 = (int8x8_t *)((char *)v82 + v85);
            int v93 = v83 + 1;
            unsigned int v94 = v59[3];
            if (v94 == 96)
            {
              int8x8_t v101 = vdup_lane_s8(*v92, 0);
              *int v93 = v101;
              *(int8x8_t *)((char *)v93 + a11) = v101;
              *(int8x8_t *)((char *)v93 + 2 * a11) = v101;
              *(int8x8_t *)((char *)v93 + 3 * a11) = v101;
              uint64_t v95 = 1;
            }
            else if (v94 == 31)
            {
              int16x4_t v96 = (int16x4_t)*v92;
              int16x4_t v97 = (int16x4_t)v92[1];
              int16x4_t v98 = (int16x4_t)v92[2];
              int16x4_t v99 = (int16x4_t)v92[3];
              *int v93 = (int8x8_t)vuzp1_s16((int16x4_t)*v92, v98);
              *(int16x4_t *)((char *)v93 + a11) = vuzp2_s16(v96, v98);
              uint64_t v100 = (int16x4_t *)((char *)v93 + v24);
              *uint64_t v100 = vuzp1_s16(v97, v99);
              *(int16x4_t *)((char *)v100 + a11) = vuzp2_s16(v97, v99);
              uint64_t v95 = 32;
            }
            else if (v59[3])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v93, a11, (uint64_t)v92, v94);
            }
            else
            {
              uint64_t v95 = 0;
              *int v93 = 0;
              *(int8x8_t *)((char *)v93 + a11) = 0;
              *(int8x8_t *)((char *)v93 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v93 + 3 * a11) = 0;
            }
            unsigned int v102 = (int8x8_t *)((char *)v92 + v95);
            unsigned int v103 = &v60[v203];
            unsigned int v104 = v59[4];
            if (v104 == 96)
            {
              int8x8_t v111 = vdup_lane_s8(*v102, 0);
              *unsigned int v103 = v111;
              *(int8x8_t *)((char *)v103 + a11) = v111;
              *(int8x8_t *)((char *)v103 + 2 * a11) = v111;
              *(int8x8_t *)((char *)v103 + 3 * a11) = v111;
              uint64_t v105 = 1;
            }
            else if (v104 == 31)
            {
              int16x4_t v106 = (int16x4_t)*v102;
              int16x4_t v107 = (int16x4_t)v102[1];
              int16x4_t v108 = (int16x4_t)v102[2];
              int16x4_t v109 = (int16x4_t)v102[3];
              *unsigned int v103 = (int8x8_t)vuzp1_s16((int16x4_t)*v102, v108);
              *(int16x4_t *)((char *)v103 + a11) = vuzp2_s16(v106, v108);
              unsigned int v110 = (int16x4_t *)((char *)v103 + v24);
              *unsigned int v110 = vuzp1_s16(v107, v109);
              *(int16x4_t *)((char *)v110 + a11) = vuzp2_s16(v107, v109);
              uint64_t v105 = 32;
            }
            else if (v59[4])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v60[v203], a11, (uint64_t)v102, v104);
            }
            else
            {
              uint64_t v105 = 0;
              *unsigned int v103 = 0;
              *(int8x8_t *)((char *)v103 + a11) = 0;
              *(int8x8_t *)((char *)v103 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v103 + 3 * a11) = 0;
            }
            char v112 = (int8x8_t *)((char *)v102 + v105);
            char v113 = v103 + 1;
            unsigned int v114 = v59[5];
            if (v114 == 96)
            {
              int8x8_t v121 = vdup_lane_s8(*v112, 0);
              *char v113 = v121;
              *(int8x8_t *)((char *)v113 + a11) = v121;
              *(int8x8_t *)((char *)v113 + 2 * a11) = v121;
              *(int8x8_t *)((char *)v113 + 3 * a11) = v121;
              uint64_t v115 = 1;
              a8 = v205;
            }
            else
            {
              a8 = v205;
              if (v114 == 31)
              {
                int16x4_t v116 = (int16x4_t)*v112;
                int16x4_t v117 = (int16x4_t)v112[1];
                int16x4_t v118 = (int16x4_t)v112[2];
                int16x4_t v119 = (int16x4_t)v112[3];
                *char v113 = (int8x8_t)vuzp1_s16((int16x4_t)*v112, v118);
                *(int16x4_t *)((char *)v113 + a11) = vuzp2_s16(v116, v118);
                uint64_t v120 = (int16x4_t *)((char *)v113 + v24);
                *uint64_t v120 = vuzp1_s16(v117, v119);
                *(int16x4_t *)((char *)v120 + a11) = vuzp2_s16(v117, v119);
                uint64_t v115 = 32;
              }
              else if (v59[5])
              {
                uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v113, a11, (uint64_t)v112, v114);
              }
              else
              {
                uint64_t v115 = 0;
                *char v113 = 0;
                *(int8x8_t *)((char *)v113 + a11) = 0;
                *(int8x8_t *)((char *)v113 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v113 + 3 * a11) = 0;
              }
            }
            BOOL v122 = (int8x8_t *)((char *)v112 + v115);
            BOOL v123 = (int8x8_t *)((char *)v60 + 12 * a11);
            unsigned int v124 = v59[6];
            if (v124 == 96)
            {
              int8x8_t v131 = vdup_lane_s8(*v122, 0);
              *BOOL v123 = v131;
              *(int8x8_t *)((char *)v123 + a11) = v131;
              *(int8x8_t *)((char *)v123 + 2 * a11) = v131;
              *(int8x8_t *)((char *)v123 + 3 * a11) = v131;
              uint64_t v125 = 1;
            }
            else if (v124 == 31)
            {
              int16x4_t v126 = (int16x4_t)*v122;
              int16x4_t v127 = (int16x4_t)v122[1];
              int16x4_t v128 = (int16x4_t)v122[2];
              int16x4_t v129 = (int16x4_t)v122[3];
              *BOOL v123 = (int8x8_t)vuzp1_s16((int16x4_t)*v122, v128);
              *(int16x4_t *)((char *)v123 + a11) = vuzp2_s16(v126, v128);
              uint64_t v130 = (int16x4_t *)((char *)v123 + v24);
              *uint64_t v130 = vuzp1_s16(v127, v129);
              *(int16x4_t *)((char *)v130 + a11) = vuzp2_s16(v127, v129);
              uint64_t v125 = 32;
            }
            else if (v59[6])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v123, a11, (uint64_t)v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              *BOOL v123 = 0;
              *(int8x8_t *)((char *)v123 + a11) = 0;
              *(int8x8_t *)((char *)v123 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v123 + 3 * a11) = 0;
            }
            int v132 = (int8x8_t *)((char *)v122 + v125);
            unsigned int v133 = v123 + 1;
            unsigned int v134 = v59[7];
            if (v134 == 96)
            {
              int8x8_t v140 = vdup_lane_s8(*v132, 0);
              *unsigned int v133 = v140;
              *(int8x8_t *)((char *)v133 + a11) = v140;
              *(int8x8_t *)((char *)v133 + 2 * a11) = v140;
              *(int8x8_t *)((char *)v133 + 3 * a11) = v140;
            }
            else if (v134 == 31)
            {
              int16x4_t v135 = (int16x4_t)*v132;
              int16x4_t v136 = (int16x4_t)v132[1];
              int16x4_t v137 = (int16x4_t)v132[2];
              int16x4_t v138 = (int16x4_t)v132[3];
              *unsigned int v133 = (int8x8_t)vuzp1_s16((int16x4_t)*v132, v137);
              *(int16x4_t *)((char *)v133 + a11) = vuzp2_s16(v135, v137);
              uint64_t v139 = (int16x4_t *)((char *)v133 + v24);
              *uint64_t v139 = vuzp1_s16(v136, v138);
              *(int16x4_t *)((char *)v139 + a11) = vuzp2_s16(v136, v138);
            }
            else if (v59[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, a11, (uint64_t)v132, v134);
            }
            else
            {
              *unsigned int v133 = 0;
              *(int8x8_t *)((char *)v133 + a11) = 0;
              *(int8x8_t *)((char *)v133 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v133 + 3 * a11) = 0;
            }
          }
LABEL_27:
          unint64_t v28 = v30;
        }
        while (v30 != (v207 >> 4) + 1);
        ++v17;
      }
      while (v17 != v199);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v258 = *MEMORY[0x263EF8340];
  size_t v201 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v17 = a8 >> 4;
  unsigned int v200 = a8 + a10 - 1;
  unsigned int v18 = v200 >> 4;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v208 = v23;
  if (v17 <= v18)
  {
    unsigned int v207 = a7 + a9 - 1;
    if (a7 >> 4 <= v207 >> 4)
    {
      uint64_t v214 = (a5 - 1) >> 4;
      int v213 = ((a5 - 1) & 0xF) + 1;
      uint64_t v203 = a11;
      uint64_t v204 = 4 * a11;
      uint64_t v199 = v18 + 1;
      uint64_t v24 = 2 * a11;
      unsigned int v205 = a8;
      do
      {
        unsigned int v25 = (16 * v17) | 0xF;
        if (16 * (int)v17 <= a8) {
          unsigned int v26 = a8;
        }
        else {
          unsigned int v26 = 16 * v17;
        }
        if (v200 < v25) {
          unsigned int v25 = v200;
        }
        int v206 = v26 - 16 * v17;
        int v212 = v25 - v26 + 1;
        int v27 = ((a6 - 1) & 0xF) + 1;
        if (v17 != (a6 - 1) >> 4) {
          int v27 = 16;
        }
        unsigned int v215 = v27;
        uint64_t v211 = a2 + (v26 - a8) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v207 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v214) {
            unsigned int v34 = v213;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v17 >= a8 && v29 >= a7)
          {
            int v36 = v213;
            if (v28 != v214) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v212 != v215;
          }
          unsigned int v38 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_65:
              uint64_t v45 = 0;
              goto LABEL_66;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_65;
            }
          }
          int v44 = 0;
          uint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            if (v46) {
              v45 |= (unint64_t)(v48 & v28) << v44++;
            }
            else {
              unsigned int v40 = 0;
            }
            --v43;
            if (v47) {
              v45 |= (unint64_t)(v48 & v17) << v44++;
            }
            else {
              unsigned int v43 = 0;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_66:
          unsigned int v49 = (_OWORD *)(a3 + v17 * v201 + (v28 << 8));
          if (v208)
          {
            long long v50 = v49[13];
            v225[12] = v49[12];
            v225[13] = v50;
            long long v51 = v49[15];
            v225[14] = v49[14];
            v225[15] = v51;
            long long v52 = v49[9];
            v225[8] = v49[8];
            v225[9] = v52;
            long long v53 = v49[11];
            v225[10] = v49[10];
            v225[11] = v53;
            long long v54 = v49[5];
            v225[4] = v49[4];
            v225[5] = v54;
            long long v55 = v49[7];
            v225[6] = v49[6];
            v225[7] = v55;
            long long v56 = v49[1];
            v225[0] = *v49;
            v225[1] = v56;
            long long v57 = v49[2];
            long long v58 = v49[3];
            unsigned int v49 = v225;
            v225[2] = v57;
            v225[3] = v58;
          }
          BOOL v59 = (unsigned __int8 *)(a4 + 8 * v45);
          int v60 = (int8x8_t *)(v211 + v32 - a7);
          char v61 = v34 < 0x10 || v35;
          if ((v61 & 1) != 0 || v215 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v49;
            char v223 = v34;
            char v224 = v215;
            int v219 = v206;
            unsigned int v220 = v32 - v29;
            block[6] = a4 + 8 * v45;
            uint64_t v217 = v211 + v32 - a7;
            uint64_t v218 = a11;
            unsigned int v221 = v212;
            unsigned int v222 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v64 = *v59;
            if (v64 == 96)
            {
              int16x4_t v226 = (int16x4_t)vdup_lane_s8(*(int8x8_t *)v49, 0);
              int16x4_t v228 = v226;
              int16x4_t v230 = v226;
              int16x4_t v232 = v226;
              uint64_t v65 = 1;
            }
            else if (v64 == 31)
            {
              int16x4_t v141 = *(int16x4_t *)((char *)v49 + 8);
              int16x4_t v142 = (int16x4_t)v49[1];
              int16x4_t v143 = *(int16x4_t *)((char *)v49 + 24);
              int16x4_t v144 = vuzp2_s16(*(int16x4_t *)v49, v142);
              int16x4_t v226 = vuzp1_s16(*(int16x4_t *)v49, v142);
              int16x4_t v228 = v144;
              int16x4_t v230 = vuzp1_s16(v141, v143);
              int16x4_t v232 = vuzp2_s16(v141, v143);
              uint64_t v65 = 32;
            }
            else if (*v59)
            {
              uint64_t v65 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 16, (uint64_t)v49, v64);
            }
            else
            {
              uint64_t v65 = 0;
              int16x4_t v226 = 0;
              int16x4_t v228 = 0;
              int16x4_t v230 = 0;
              int16x4_t v232 = 0;
            }
            char v145 = (int8x8_t *)((char *)v49 + v65);
            unsigned int v146 = v59[1];
            if (v146 == 96)
            {
              int16x4_t v227 = (int16x4_t)vdup_lane_s8(*v145, 0);
              int16x4_t v229 = v227;
              int16x4_t v231 = v227;
              int16x4_t v233 = v227;
              uint64_t v147 = 1;
            }
            else if (v146 == 31)
            {
              int16x4_t v148 = (int16x4_t)v145[1];
              int16x4_t v149 = (int16x4_t)v145[2];
              int16x4_t v150 = (int16x4_t)v145[3];
              int16x4_t v151 = vuzp2_s16((int16x4_t)*v145, v149);
              int16x4_t v227 = vuzp1_s16((int16x4_t)*v145, v149);
              int16x4_t v229 = v151;
              int16x4_t v231 = vuzp1_s16(v148, v150);
              int16x4_t v233 = vuzp2_s16(v148, v150);
              uint64_t v147 = 32;
            }
            else if (v59[1])
            {
              uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 16, (uint64_t)v145, v146);
            }
            else
            {
              uint64_t v147 = 0;
              int16x4_t v227 = 0;
              int16x4_t v229 = 0;
              int16x4_t v231 = 0;
              int16x4_t v233 = 0;
            }
            uint64_t v152 = (int8x8_t *)((char *)v145 + v147);
            unsigned int v153 = v59[2];
            if (v153 == 96)
            {
              int16x4_t v234 = (int16x4_t)vdup_lane_s8(*v152, 0);
              int16x4_t v236 = v234;
              int16x4_t v238 = v234;
              int16x4_t v240 = v234;
              uint64_t v154 = 1;
            }
            else if (v153 == 31)
            {
              int16x4_t v155 = (int16x4_t)v152[1];
              int16x4_t v156 = (int16x4_t)v152[2];
              int16x4_t v157 = (int16x4_t)v152[3];
              int16x4_t v158 = vuzp2_s16((int16x4_t)*v152, v156);
              int16x4_t v234 = vuzp1_s16((int16x4_t)*v152, v156);
              int16x4_t v236 = v158;
              int16x4_t v238 = vuzp1_s16(v155, v157);
              int16x4_t v240 = vuzp2_s16(v155, v157);
              uint64_t v154 = 32;
            }
            else if (v59[2])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 16, (uint64_t)v152, v153);
            }
            else
            {
              uint64_t v154 = 0;
              int16x4_t v234 = 0;
              int16x4_t v236 = 0;
              int16x4_t v238 = 0;
              int16x4_t v240 = 0;
            }
            v159 = (int8x8_t *)((char *)v152 + v154);
            unsigned int v160 = v59[3];
            if (v160 == 96)
            {
              int16x4_t v235 = (int16x4_t)vdup_lane_s8(*v159, 0);
              int16x4_t v237 = v235;
              int16x4_t v239 = v235;
              int16x4_t v241 = v235;
              uint64_t v161 = 1;
            }
            else if (v160 == 31)
            {
              int16x4_t v162 = (int16x4_t)v159[1];
              int16x4_t v163 = (int16x4_t)v159[2];
              int16x4_t v164 = (int16x4_t)v159[3];
              int16x4_t v165 = vuzp2_s16((int16x4_t)*v159, v163);
              int16x4_t v235 = vuzp1_s16((int16x4_t)*v159, v163);
              int16x4_t v237 = v165;
              int16x4_t v239 = vuzp1_s16(v162, v164);
              int16x4_t v241 = vuzp2_s16(v162, v164);
              uint64_t v161 = 32;
            }
            else if (v59[3])
            {
              uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 16, (uint64_t)v159, v160);
            }
            else
            {
              uint64_t v161 = 0;
              int16x4_t v235 = 0;
              int16x4_t v237 = 0;
              int16x4_t v239 = 0;
              int16x4_t v241 = 0;
            }
            v166 = (int8x8_t *)((char *)v159 + v161);
            unsigned int v167 = v59[4];
            if (v167 == 96)
            {
              int16x4_t v242 = (int16x4_t)vdup_lane_s8(*v166, 0);
              int16x4_t v244 = v242;
              int16x4_t v246 = v242;
              int16x4_t v248 = v242;
              uint64_t v168 = 1;
            }
            else if (v167 == 31)
            {
              int16x4_t v169 = (int16x4_t)v166[1];
              int16x4_t v170 = (int16x4_t)v166[2];
              int16x4_t v171 = (int16x4_t)v166[3];
              int16x4_t v172 = vuzp2_s16((int16x4_t)*v166, v170);
              int16x4_t v242 = vuzp1_s16((int16x4_t)*v166, v170);
              int16x4_t v244 = v172;
              int16x4_t v246 = vuzp1_s16(v169, v171);
              int16x4_t v248 = vuzp2_s16(v169, v171);
              uint64_t v168 = 32;
            }
            else if (v59[4])
            {
              uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 16, (uint64_t)v166, v167);
            }
            else
            {
              uint64_t v168 = 0;
              int16x4_t v242 = 0;
              int16x4_t v244 = 0;
              int16x4_t v246 = 0;
              int16x4_t v248 = 0;
            }
            v173 = (int8x8_t *)((char *)v166 + v168);
            unsigned int v174 = v59[5];
            if (v174 == 96)
            {
              int16x4_t v243 = (int16x4_t)vdup_lane_s8(*v173, 0);
              int16x4_t v245 = v243;
              int16x4_t v247 = v243;
              int16x4_t v249 = v243;
              uint64_t v175 = 1;
            }
            else if (v174 == 31)
            {
              int16x4_t v176 = (int16x4_t)v173[1];
              int16x4_t v177 = (int16x4_t)v173[2];
              int16x4_t v178 = (int16x4_t)v173[3];
              int16x4_t v179 = vuzp2_s16((int16x4_t)*v173, v177);
              int16x4_t v243 = vuzp1_s16((int16x4_t)*v173, v177);
              int16x4_t v245 = v179;
              int16x4_t v247 = vuzp1_s16(v176, v178);
              int16x4_t v249 = vuzp2_s16(v176, v178);
              uint64_t v175 = 32;
            }
            else if (v59[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 16, (uint64_t)v173, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int16x4_t v243 = 0;
              int16x4_t v245 = 0;
              int16x4_t v247 = 0;
              int16x4_t v249 = 0;
            }
            v180 = (int8x8_t *)((char *)v173 + v175);
            unsigned int v181 = v59[6];
            if (v181 == 96)
            {
              int16x4_t v250 = (int16x4_t)vdup_lane_s8(*v180, 0);
              int16x4_t v252 = v250;
              int16x4_t v254 = v250;
              int16x4_t v256 = v250;
              uint64_t v182 = 1;
            }
            else if (v181 == 31)
            {
              int16x4_t v183 = (int16x4_t)v180[1];
              int16x4_t v184 = (int16x4_t)v180[2];
              int16x4_t v185 = (int16x4_t)v180[3];
              int16x4_t v186 = vuzp2_s16((int16x4_t)*v180, v184);
              int16x4_t v250 = vuzp1_s16((int16x4_t)*v180, v184);
              int16x4_t v252 = v186;
              int16x4_t v254 = vuzp1_s16(v183, v185);
              int16x4_t v256 = vuzp2_s16(v183, v185);
              uint64_t v182 = 32;
            }
            else if (v59[6])
            {
              uint64_t v182 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v250, 16, (uint64_t)v180, v181);
            }
            else
            {
              uint64_t v182 = 0;
              int16x4_t v250 = 0;
              int16x4_t v252 = 0;
              int16x4_t v254 = 0;
              int16x4_t v256 = 0;
            }
            v187 = (int8x8_t *)((char *)v180 + v182);
            unsigned int v188 = v59[7];
            if (v188 == 96)
            {
              int16x4_t v251 = (int16x4_t)vdup_lane_s8(*v187, 0);
              int16x4_t v253 = v251;
              int16x4_t v255 = v251;
              int16x4_t v257 = v251;
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else if (v188 == 31)
            {
              int16x4_t v190 = (int16x4_t)v187[1];
              int16x4_t v191 = (int16x4_t)v187[2];
              int16x4_t v192 = (int16x4_t)v187[3];
              int16x4_t v193 = vuzp2_s16((int16x4_t)*v187, v191);
              int16x4_t v251 = vuzp1_s16((int16x4_t)*v187, v191);
              int16x4_t v253 = v193;
              int16x4_t v255 = vuzp1_s16(v190, v192);
              int16x4_t v257 = vuzp2_s16(v190, v192);
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else if (v59[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v251, 16, (uint64_t)v187, v188);
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            else
            {
              int16x4_t v251 = 0;
              int16x4_t v253 = 0;
              int16x4_t v255 = 0;
              int16x4_t v257 = 0;
              unint64_t v189 = v221;
              if (!v221) {
                goto LABEL_27;
              }
            }
            if (v222)
            {
              unint64_t v194 = 0;
              v195 = (char *)&v226 + 16 * v219 + v220;
              int v196 = 1;
              do
              {
                if (v196)
                {
                  uint64_t v197 = 0;
                  uint64_t v198 = v217 + v218 * v194;
                  do
                  {
                    *(unsigned char *)(v198 + v197) = v195[v197];
                    int v196 = v222;
                    ++v197;
                  }
                  while (v222 > v197);
                  unint64_t v189 = v221;
                }
                ++v194;
                v195 += 16;
              }
              while (v194 < v189);
            }
          }
          else
          {
            unsigned int v62 = *v59;
            if (v62 == 96)
            {
              int8x8_t v71 = vdup_lane_s8(*(int8x8_t *)v49, 0);
              *int v60 = v71;
              *(int8x8_t *)((char *)v60 + a11) = v71;
              *(int8x8_t *)((char *)v60 + 2 * a11) = v71;
              *(int8x8_t *)((char *)v60 + 3 * a11) = v71;
              uint64_t v63 = 1;
            }
            else if (v62 == 31)
            {
              int16x4_t v66 = *(int16x4_t *)v49;
              int16x4_t v67 = *(int16x4_t *)((char *)v49 + 8);
              int16x4_t v68 = (int16x4_t)v49[1];
              int16x4_t v69 = *(int16x4_t *)((char *)v49 + 24);
              *int v60 = (int8x8_t)vuzp1_s16(*(int16x4_t *)v49, v68);
              *(int16x4_t *)((char *)v60 + a11) = vuzp2_s16(v66, v68);
              int v70 = (int16x4_t *)((char *)v60 + v24);
              *int v70 = vuzp1_s16(v67, v69);
              *(int16x4_t *)((char *)v70 + a11) = vuzp2_s16(v67, v69);
              uint64_t v63 = 32;
            }
            else if (*v59)
            {
              uint64_t v63 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v60, a11, (uint64_t)v49, v62);
            }
            else
            {
              uint64_t v63 = 0;
              *int v60 = 0;
              *(int8x8_t *)((char *)v60 + a11) = 0;
              *(int8x8_t *)((char *)v60 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v60 + 3 * a11) = 0;
            }
            uint64_t v72 = (int8x8_t *)((char *)v49 + v63);
            int v73 = v60 + 1;
            unsigned int v74 = v59[1];
            if (v74 == 96)
            {
              int8x8_t v81 = vdup_lane_s8(*v72, 0);
              *int v73 = v81;
              *(int8x8_t *)((char *)v73 + a11) = v81;
              *(int8x8_t *)((char *)v73 + 2 * a11) = v81;
              *(int8x8_t *)((char *)v73 + 3 * a11) = v81;
              uint64_t v75 = 1;
            }
            else if (v74 == 31)
            {
              int16x4_t v76 = (int16x4_t)*v72;
              int16x4_t v77 = (int16x4_t)v72[1];
              int16x4_t v78 = (int16x4_t)v72[2];
              int16x4_t v79 = (int16x4_t)v72[3];
              *int v73 = (int8x8_t)vuzp1_s16((int16x4_t)*v72, v78);
              *(int16x4_t *)((char *)v73 + a11) = vuzp2_s16(v76, v78);
              uint64_t v80 = (int16x4_t *)((char *)v73 + v24);
              *uint64_t v80 = vuzp1_s16(v77, v79);
              *(int16x4_t *)((char *)v80 + a11) = vuzp2_s16(v77, v79);
              uint64_t v75 = 32;
            }
            else if (v59[1])
            {
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v73, a11, (uint64_t)v72, v74);
            }
            else
            {
              uint64_t v75 = 0;
              *int v73 = 0;
              *(int8x8_t *)((char *)v73 + a11) = 0;
              *(int8x8_t *)((char *)v73 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v73 + 3 * a11) = 0;
            }
            unsigned int v82 = (int8x8_t *)((char *)v72 + v75);
            size_t v83 = (int8x8_t *)((char *)v60 + v204);
            unsigned int v84 = v59[2];
            if (v84 == 96)
            {
              int8x8_t v91 = vdup_lane_s8(*v82, 0);
              int8x8_t *v83 = v91;
              *(int8x8_t *)((char *)v83 + a11) = v91;
              *(int8x8_t *)((char *)v83 + 2 * a11) = v91;
              *(int8x8_t *)((char *)v83 + 3 * a11) = v91;
              uint64_t v85 = 1;
            }
            else if (v84 == 31)
            {
              int16x4_t v86 = (int16x4_t)*v82;
              int16x4_t v87 = (int16x4_t)v82[1];
              int16x4_t v88 = (int16x4_t)v82[2];
              int16x4_t v89 = (int16x4_t)v82[3];
              int8x8_t *v83 = (int8x8_t)vuzp1_s16((int16x4_t)*v82, v88);
              *(int16x4_t *)((char *)v83 + a11) = vuzp2_s16(v86, v88);
              uint64_t v90 = (int16x4_t *)((char *)v83 + v24);
              *uint64_t v90 = vuzp1_s16(v87, v89);
              *(int16x4_t *)((char *)v90 + a11) = vuzp2_s16(v87, v89);
              uint64_t v85 = 32;
            }
            else if (v59[2])
            {
              uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x8_t *)((char *)v60 + v204), a11, (uint64_t)v82, v84);
            }
            else
            {
              uint64_t v85 = 0;
              int8x8_t *v83 = 0;
              *(int8x8_t *)((char *)v83 + a11) = 0;
              *(int8x8_t *)((char *)v83 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v83 + 3 * a11) = 0;
            }
            unsigned int v92 = (int8x8_t *)((char *)v82 + v85);
            int v93 = v83 + 1;
            unsigned int v94 = v59[3];
            if (v94 == 96)
            {
              int8x8_t v101 = vdup_lane_s8(*v92, 0);
              *int v93 = v101;
              *(int8x8_t *)((char *)v93 + a11) = v101;
              *(int8x8_t *)((char *)v93 + 2 * a11) = v101;
              *(int8x8_t *)((char *)v93 + 3 * a11) = v101;
              uint64_t v95 = 1;
            }
            else if (v94 == 31)
            {
              int16x4_t v96 = (int16x4_t)*v92;
              int16x4_t v97 = (int16x4_t)v92[1];
              int16x4_t v98 = (int16x4_t)v92[2];
              int16x4_t v99 = (int16x4_t)v92[3];
              *int v93 = (int8x8_t)vuzp1_s16((int16x4_t)*v92, v98);
              *(int16x4_t *)((char *)v93 + a11) = vuzp2_s16(v96, v98);
              uint64_t v100 = (int16x4_t *)((char *)v93 + v24);
              *uint64_t v100 = vuzp1_s16(v97, v99);
              *(int16x4_t *)((char *)v100 + a11) = vuzp2_s16(v97, v99);
              uint64_t v95 = 32;
            }
            else if (v59[3])
            {
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v93, a11, (uint64_t)v92, v94);
            }
            else
            {
              uint64_t v95 = 0;
              *int v93 = 0;
              *(int8x8_t *)((char *)v93 + a11) = 0;
              *(int8x8_t *)((char *)v93 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v93 + 3 * a11) = 0;
            }
            unsigned int v102 = (int8x8_t *)((char *)v92 + v95);
            unsigned int v103 = &v60[v203];
            unsigned int v104 = v59[4];
            if (v104 == 96)
            {
              int8x8_t v111 = vdup_lane_s8(*v102, 0);
              *unsigned int v103 = v111;
              *(int8x8_t *)((char *)v103 + a11) = v111;
              *(int8x8_t *)((char *)v103 + 2 * a11) = v111;
              *(int8x8_t *)((char *)v103 + 3 * a11) = v111;
              uint64_t v105 = 1;
            }
            else if (v104 == 31)
            {
              int16x4_t v106 = (int16x4_t)*v102;
              int16x4_t v107 = (int16x4_t)v102[1];
              int16x4_t v108 = (int16x4_t)v102[2];
              int16x4_t v109 = (int16x4_t)v102[3];
              *unsigned int v103 = (int8x8_t)vuzp1_s16((int16x4_t)*v102, v108);
              *(int16x4_t *)((char *)v103 + a11) = vuzp2_s16(v106, v108);
              unsigned int v110 = (int16x4_t *)((char *)v103 + v24);
              *unsigned int v110 = vuzp1_s16(v107, v109);
              *(int16x4_t *)((char *)v110 + a11) = vuzp2_s16(v107, v109);
              uint64_t v105 = 32;
            }
            else if (v59[4])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v60[v203], a11, (uint64_t)v102, v104);
            }
            else
            {
              uint64_t v105 = 0;
              *unsigned int v103 = 0;
              *(int8x8_t *)((char *)v103 + a11) = 0;
              *(int8x8_t *)((char *)v103 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v103 + 3 * a11) = 0;
            }
            char v112 = (int8x8_t *)((char *)v102 + v105);
            char v113 = v103 + 1;
            unsigned int v114 = v59[5];
            if (v114 == 96)
            {
              int8x8_t v121 = vdup_lane_s8(*v112, 0);
              *char v113 = v121;
              *(int8x8_t *)((char *)v113 + a11) = v121;
              *(int8x8_t *)((char *)v113 + 2 * a11) = v121;
              *(int8x8_t *)((char *)v113 + 3 * a11) = v121;
              uint64_t v115 = 1;
              a8 = v205;
            }
            else
            {
              a8 = v205;
              if (v114 == 31)
              {
                int16x4_t v116 = (int16x4_t)*v112;
                int16x4_t v117 = (int16x4_t)v112[1];
                int16x4_t v118 = (int16x4_t)v112[2];
                int16x4_t v119 = (int16x4_t)v112[3];
                *char v113 = (int8x8_t)vuzp1_s16((int16x4_t)*v112, v118);
                *(int16x4_t *)((char *)v113 + a11) = vuzp2_s16(v116, v118);
                uint64_t v120 = (int16x4_t *)((char *)v113 + v24);
                *uint64_t v120 = vuzp1_s16(v117, v119);
                *(int16x4_t *)((char *)v120 + a11) = vuzp2_s16(v117, v119);
                uint64_t v115 = 32;
              }
              else if (v59[5])
              {
                uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v113, a11, (uint64_t)v112, v114);
              }
              else
              {
                uint64_t v115 = 0;
                *char v113 = 0;
                *(int8x8_t *)((char *)v113 + a11) = 0;
                *(int8x8_t *)((char *)v113 + 2 * a11) = 0;
                *(int8x8_t *)((char *)v113 + 3 * a11) = 0;
              }
            }
            BOOL v122 = (int8x8_t *)((char *)v112 + v115);
            BOOL v123 = (int8x8_t *)((char *)v60 + 12 * a11);
            unsigned int v124 = v59[6];
            if (v124 == 96)
            {
              int8x8_t v131 = vdup_lane_s8(*v122, 0);
              *BOOL v123 = v131;
              *(int8x8_t *)((char *)v123 + a11) = v131;
              *(int8x8_t *)((char *)v123 + 2 * a11) = v131;
              *(int8x8_t *)((char *)v123 + 3 * a11) = v131;
              uint64_t v125 = 1;
            }
            else if (v124 == 31)
            {
              int16x4_t v126 = (int16x4_t)*v122;
              int16x4_t v127 = (int16x4_t)v122[1];
              int16x4_t v128 = (int16x4_t)v122[2];
              int16x4_t v129 = (int16x4_t)v122[3];
              *BOOL v123 = (int8x8_t)vuzp1_s16((int16x4_t)*v122, v128);
              *(int16x4_t *)((char *)v123 + a11) = vuzp2_s16(v126, v128);
              uint64_t v130 = (int16x4_t *)((char *)v123 + v24);
              *uint64_t v130 = vuzp1_s16(v127, v129);
              *(int16x4_t *)((char *)v130 + a11) = vuzp2_s16(v127, v129);
              uint64_t v125 = 32;
            }
            else if (v59[6])
            {
              uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v123, a11, (uint64_t)v122, v124);
            }
            else
            {
              uint64_t v125 = 0;
              *BOOL v123 = 0;
              *(int8x8_t *)((char *)v123 + a11) = 0;
              *(int8x8_t *)((char *)v123 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v123 + 3 * a11) = 0;
            }
            int v132 = (int8x8_t *)((char *)v122 + v125);
            unsigned int v133 = v123 + 1;
            unsigned int v134 = v59[7];
            if (v134 == 96)
            {
              int8x8_t v140 = vdup_lane_s8(*v132, 0);
              *unsigned int v133 = v140;
              *(int8x8_t *)((char *)v133 + a11) = v140;
              *(int8x8_t *)((char *)v133 + 2 * a11) = v140;
              *(int8x8_t *)((char *)v133 + 3 * a11) = v140;
            }
            else if (v134 == 31)
            {
              int16x4_t v135 = (int16x4_t)*v132;
              int16x4_t v136 = (int16x4_t)v132[1];
              int16x4_t v137 = (int16x4_t)v132[2];
              int16x4_t v138 = (int16x4_t)v132[3];
              *unsigned int v133 = (int8x8_t)vuzp1_s16((int16x4_t)*v132, v137);
              *(int16x4_t *)((char *)v133 + a11) = vuzp2_s16(v135, v137);
              uint64_t v139 = (int16x4_t *)((char *)v133 + v24);
              *uint64_t v139 = vuzp1_s16(v136, v138);
              *(int16x4_t *)((char *)v139 + a11) = vuzp2_s16(v136, v138);
            }
            else if (v59[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v133, a11, (uint64_t)v132, v134);
            }
            else
            {
              *unsigned int v133 = 0;
              *(int8x8_t *)((char *)v133 + a11) = 0;
              *(int8x8_t *)((char *)v133 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v133 + 3 * a11) = 0;
            }
          }
LABEL_27:
          unint64_t v28 = v30;
        }
        while (v30 != (v207 >> 4) + 1);
        ++v17;
      }
      while (v17 != v199);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v18 = a1;
  v126[7] = *MEMORY[0x263EF8340];
  size_t v92 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v19 = a8 >> 4;
  unsigned int v91 = a8 + a10 - 1;
  unsigned int v20 = v91 >> 4;
  if (*(void *)(v18 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v102 = v25;
  if (v19 <= v20)
  {
    unsigned int v101 = a7 + a9 - 1;
    if (a7 >> 4 <= v101 >> 4)
    {
      uint64_t v106 = (a5 - 1) >> 4;
      int v105 = ((a5 - 1) & 0xF) + 1;
      uint64_t v95 = 8 * a11;
      uint64_t v96 = 4 * a11;
      uint64_t v94 = 12 * a11;
      unint64_t v100 = a7;
      uint64_t v89 = v20 + 1;
      unint64_t v90 = (unint64_t)a7 >> 4;
      uint64_t v97 = a3;
      uint64_t v98 = v18;
      do
      {
        unsigned int v26 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= a8) {
          int v27 = a8;
        }
        else {
          int v27 = 16 * v19;
        }
        if (v91 < v26) {
          unsigned int v26 = v91;
        }
        int v99 = v27 - 16 * v19;
        int v104 = v26 - v27 + 1;
        int v28 = ((a6 - 1) & 0xF) + 1;
        if (v19 != (a6 - 1) >> 4) {
          int v28 = 16;
        }
        unsigned int v107 = v28;
        uint64_t v103 = a2 + (v27 - a8) * a11;
        unint64_t v29 = v90;
        do
        {
          unint64_t v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v101 < v32) {
            unsigned int v32 = v101;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v106) {
            unsigned int v35 = v105;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          unint64_t v108 = v29 + 1;
          if (16 * (int)v19 >= a8 && v31 >= v100)
          {
            int v37 = v105;
            if (v29 != v106) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v104 != v107;
          }
          unsigned int v39 = *(_DWORD *)(v18 + 128) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(v18 + 132) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_66:
              uint64_t v46 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_66;
            }
          }
          int v45 = 0;
          uint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            if (v47) {
              v46 |= (unint64_t)(v49 & v29) << v45++;
            }
            else {
              unsigned int v41 = 0;
            }
            --v44;
            if (v48) {
              v46 |= (unint64_t)(v49 & v19) << v45++;
            }
            else {
              unsigned int v44 = 0;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_67:
          long long v50 = (int16x4_t *)(a3 + v19 * v92 + 192 * v29);
          if (v102)
          {
            long long v51 = *(_OWORD *)v50[26].i8;
            v118[12] = *(_OWORD *)v50[24].i8;
            v118[13] = v51;
            long long v52 = *(_OWORD *)v50[30].i8;
            v118[14] = *(_OWORD *)v50[28].i8;
            v118[15] = v52;
            long long v53 = *(_OWORD *)v50[18].i8;
            v118[8] = *(_OWORD *)v50[16].i8;
            v118[9] = v53;
            long long v54 = *(_OWORD *)v50[22].i8;
            v118[10] = *(_OWORD *)v50[20].i8;
            v118[11] = v54;
            long long v55 = *(_OWORD *)v50[10].i8;
            v118[4] = *(_OWORD *)v50[8].i8;
            v118[5] = v55;
            long long v56 = *(_OWORD *)v50[14].i8;
            v118[6] = *(_OWORD *)v50[12].i8;
            v118[7] = v56;
            long long v57 = *(_OWORD *)v50[2].i8;
            v118[0] = *(_OWORD *)v50->i8;
            v118[1] = v57;
            long long v58 = *(_OWORD *)v50[4].i8;
            long long v59 = *(_OWORD *)v50[6].i8;
            long long v50 = (int16x4_t *)v118;
            v118[2] = v58;
            v118[3] = v59;
          }
          int v60 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v61 = v103 + (v33 - a7);
          char v62 = v35 < 0x10 || v36;
          if ((v62 & 1) == 0 && v107 > 0xF)
          {
            uint64_t v63 = a4;
            uint64_t v64 = a7;
            uint64_t v65 = a8;
            int v66 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
            int16x4_t v67 = (int16x4_t *)((char *)v50
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61, a11, v50, *v60, v66));
            int16x4_t v68 = (int16x4_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + 8, a11, v67, v60[1], v66));
            int16x4_t v69 = (int16x4_t *)((char *)v68
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v96, a11, v68, v60[2], v66));
            int v70 = (int16x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v96 + 8, a11, v69, v60[3], v66));
            int8x8_t v71 = (int16x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v95, a11, v70, v60[4], v66));
            uint64_t v72 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v95 + 8, a11, v71, v60[5], v66));
            int v73 = (int16x4_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v94, a11, v72, v60[6], v66));
            int v74 = v66;
            a8 = v65;
            a7 = v64;
            a4 = v63;
            a3 = v97;
            uint64_t v18 = v98;
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + v94 + 8, a11, v73, v60[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v18;
          block[5] = v50;
          char v116 = v35;
          char v117 = v107;
          int v112 = v99;
          int v113 = v33 - v31;
          block[6] = a4 + 8 * v46;
          uint64_t v110 = v103 + (v33 - a7);
          uint64_t v111 = a11;
          unsigned int v114 = v104;
          unsigned int v115 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v18 + 8) + 7384), block);
LABEL_27:
            unint64_t v30 = v108;
            goto LABEL_28;
          }
          int v75 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
          int16x4_t v76 = (int16x4_t *)((char *)v50
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v119, 16, v50, *v60, v75));
          int16x4_t v77 = (int16x4_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v120, 16, v76, v60[1], v75));
          int16x4_t v78 = (int16x4_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v121, 16, v77, v60[2], v75));
          int16x4_t v79 = (int16x4_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v122, 16, v78, v60[3], v75));
          uint64_t v80 = (int16x4_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v123, 16, v79, v60[4], v75));
          int8x8_t v81 = (int16x4_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v124, 16, v80, v60[5], v75));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v125, 16, v81, v60[6], v75);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v126, 16, (int16x4_t *)((char *)v81 + v82), v60[7], v75);
          unint64_t v83 = v114;
          unint64_t v30 = v108;
          if (v114 && v115)
          {
            unint64_t v84 = 0;
            uint64_t v85 = &v119[16 * v112 + v113];
            int v86 = 1;
            do
            {
              if (v86)
              {
                uint64_t v87 = 0;
                uint64_t v88 = v110 + v111 * v84;
                do
                {
                  *(unsigned char *)(v88 + v87) = v85[v87];
                  int v86 = v115;
                  ++v87;
                }
                while (v115 > v87);
                unint64_t v83 = v114;
              }
              ++v84;
              v85 += 16;
            }
            while (v84 < v83);
          }
LABEL_28:
          unint64_t v29 = v30;
        }
        while (v30 != (v101 >> 4) + 1);
        ++v19;
      }
      while (v19 != v89);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v18 = a1;
  v126[7] = *MEMORY[0x263EF8340];
  size_t v92 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v19 = a8 >> 4;
  unsigned int v91 = a8 + a10 - 1;
  unsigned int v20 = v91 >> 4;
  if (*(void *)(v18 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v102 = v25;
  if (v19 <= v20)
  {
    unsigned int v101 = a7 + a9 - 1;
    if (a7 >> 4 <= v101 >> 4)
    {
      uint64_t v106 = (a5 - 1) >> 4;
      int v105 = ((a5 - 1) & 0xF) + 1;
      uint64_t v95 = 8 * a11;
      uint64_t v96 = 4 * a11;
      uint64_t v94 = 12 * a11;
      unint64_t v100 = a7;
      uint64_t v89 = v20 + 1;
      unint64_t v90 = (unint64_t)a7 >> 4;
      uint64_t v97 = a3;
      uint64_t v98 = v18;
      do
      {
        unsigned int v26 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= a8) {
          int v27 = a8;
        }
        else {
          int v27 = 16 * v19;
        }
        if (v91 < v26) {
          unsigned int v26 = v91;
        }
        int v99 = v27 - 16 * v19;
        int v104 = v26 - v27 + 1;
        int v28 = ((a6 - 1) & 0xF) + 1;
        if (v19 != (a6 - 1) >> 4) {
          int v28 = 16;
        }
        unsigned int v107 = v28;
        uint64_t v103 = a2 + (v27 - a8) * a11;
        unint64_t v29 = v90;
        do
        {
          unint64_t v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v101 < v32) {
            unsigned int v32 = v101;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v106) {
            unsigned int v35 = v105;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          unint64_t v108 = v29 + 1;
          if (16 * (int)v19 >= a8 && v31 >= v100)
          {
            int v37 = v105;
            if (v29 != v106) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v104 != v107;
          }
          unsigned int v39 = *(_DWORD *)(v18 + 128) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(v18 + 132) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_66:
              uint64_t v46 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_66;
            }
          }
          int v45 = 0;
          uint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            if (v47) {
              v46 |= (unint64_t)(v49 & v29) << v45++;
            }
            else {
              unsigned int v41 = 0;
            }
            --v44;
            if (v48) {
              v46 |= (unint64_t)(v49 & v19) << v45++;
            }
            else {
              unsigned int v44 = 0;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_67:
          long long v50 = (int16x4_t *)(a3 + v19 * v92 + 160 * v29);
          if (v102)
          {
            long long v51 = *(_OWORD *)v50[26].i8;
            v118[12] = *(_OWORD *)v50[24].i8;
            v118[13] = v51;
            long long v52 = *(_OWORD *)v50[30].i8;
            v118[14] = *(_OWORD *)v50[28].i8;
            v118[15] = v52;
            long long v53 = *(_OWORD *)v50[18].i8;
            v118[8] = *(_OWORD *)v50[16].i8;
            v118[9] = v53;
            long long v54 = *(_OWORD *)v50[22].i8;
            v118[10] = *(_OWORD *)v50[20].i8;
            v118[11] = v54;
            long long v55 = *(_OWORD *)v50[10].i8;
            v118[4] = *(_OWORD *)v50[8].i8;
            v118[5] = v55;
            long long v56 = *(_OWORD *)v50[14].i8;
            v118[6] = *(_OWORD *)v50[12].i8;
            v118[7] = v56;
            long long v57 = *(_OWORD *)v50[2].i8;
            v118[0] = *(_OWORD *)v50->i8;
            v118[1] = v57;
            long long v58 = *(_OWORD *)v50[4].i8;
            long long v59 = *(_OWORD *)v50[6].i8;
            long long v50 = (int16x4_t *)v118;
            v118[2] = v58;
            v118[3] = v59;
          }
          int v60 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v61 = v103 + (v33 - a7);
          char v62 = v35 < 0x10 || v36;
          if ((v62 & 1) == 0 && v107 > 0xF)
          {
            uint64_t v63 = a4;
            uint64_t v64 = a7;
            uint64_t v65 = a8;
            int v66 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
            int16x4_t v67 = (int16x4_t *)((char *)v50
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61, a11, v50, *v60, v66));
            int16x4_t v68 = (int16x4_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + 8, a11, v67, v60[1], v66));
            int16x4_t v69 = (int16x4_t *)((char *)v68
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v96, a11, v68, v60[2], v66));
            int v70 = (int16x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v96 + 8, a11, v69, v60[3], v66));
            int8x8_t v71 = (int16x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v95, a11, v70, v60[4], v66));
            uint64_t v72 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v95 + 8, a11, v71, v60[5], v66));
            int v73 = (int16x4_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v94, a11, v72, v60[6], v66));
            int v74 = v66;
            a8 = v65;
            a7 = v64;
            a4 = v63;
            a3 = v97;
            uint64_t v18 = v98;
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + v94 + 8, a11, v73, v60[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v18;
          block[5] = v50;
          char v116 = v35;
          char v117 = v107;
          int v112 = v99;
          int v113 = v33 - v31;
          block[6] = a4 + 8 * v46;
          uint64_t v110 = v103 + (v33 - a7);
          uint64_t v111 = a11;
          unsigned int v114 = v104;
          unsigned int v115 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v18 + 8) + 7384), block);
LABEL_27:
            unint64_t v30 = v108;
            goto LABEL_28;
          }
          int v75 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
          int16x4_t v76 = (int16x4_t *)((char *)v50
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v119, 16, v50, *v60, v75));
          int16x4_t v77 = (int16x4_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v120, 16, v76, v60[1], v75));
          int16x4_t v78 = (int16x4_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v121, 16, v77, v60[2], v75));
          int16x4_t v79 = (int16x4_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v122, 16, v78, v60[3], v75));
          uint64_t v80 = (int16x4_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v123, 16, v79, v60[4], v75));
          int8x8_t v81 = (int16x4_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v124, 16, v80, v60[5], v75));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v125, 16, v81, v60[6], v75);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v126, 16, (int16x4_t *)((char *)v81 + v82), v60[7], v75);
          unint64_t v83 = v114;
          unint64_t v30 = v108;
          if (v114 && v115)
          {
            unint64_t v84 = 0;
            uint64_t v85 = &v119[16 * v112 + v113];
            int v86 = 1;
            do
            {
              if (v86)
              {
                uint64_t v87 = 0;
                uint64_t v88 = v110 + v111 * v84;
                do
                {
                  *(unsigned char *)(v88 + v87) = v85[v87];
                  int v86 = v115;
                  ++v87;
                }
                while (v115 > v87);
                unint64_t v83 = v114;
              }
              ++v84;
              v85 += 16;
            }
            while (v84 < v83);
          }
LABEL_28:
          unint64_t v29 = v30;
        }
        while (v30 != (v101 >> 4) + 1);
        ++v19;
      }
      while (v19 != v89);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v18 = a1;
  v126[7] = *MEMORY[0x263EF8340];
  size_t v92 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v19 = a8 >> 4;
  unsigned int v91 = a8 + a10 - 1;
  unsigned int v20 = v91 >> 4;
  if (*(void *)(v18 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v102 = v25;
  if (v19 <= v20)
  {
    unsigned int v101 = a7 + a9 - 1;
    if (a7 >> 4 <= v101 >> 4)
    {
      uint64_t v106 = (a5 - 1) >> 4;
      int v105 = ((a5 - 1) & 0xF) + 1;
      uint64_t v95 = 8 * a11;
      uint64_t v96 = 4 * a11;
      uint64_t v94 = 12 * a11;
      unint64_t v100 = a7;
      uint64_t v89 = v20 + 1;
      unint64_t v90 = (unint64_t)a7 >> 4;
      uint64_t v97 = a3;
      uint64_t v98 = v18;
      do
      {
        unsigned int v26 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= a8) {
          int v27 = a8;
        }
        else {
          int v27 = 16 * v19;
        }
        if (v91 < v26) {
          unsigned int v26 = v91;
        }
        int v99 = v27 - 16 * v19;
        int v104 = v26 - v27 + 1;
        int v28 = ((a6 - 1) & 0xF) + 1;
        if (v19 != (a6 - 1) >> 4) {
          int v28 = 16;
        }
        unsigned int v107 = v28;
        uint64_t v103 = a2 + (v27 - a8) * a11;
        unint64_t v29 = v90;
        do
        {
          unint64_t v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            int v33 = a7;
          }
          else {
            int v33 = 16 * v29;
          }
          if (v101 < v32) {
            unsigned int v32 = v101;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v106) {
            unsigned int v35 = v105;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          unint64_t v108 = v29 + 1;
          if (16 * (int)v19 >= a8 && v31 >= v100)
          {
            int v37 = v105;
            if (v29 != v106) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v104 != v107;
          }
          unsigned int v39 = *(_DWORD *)(v18 + 128) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(v18 + 132) >> (*(unsigned char *)(v18 + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_66:
              uint64_t v46 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_66;
            }
          }
          int v45 = 0;
          uint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            if (v47) {
              v46 |= (unint64_t)(v49 & v29) << v45++;
            }
            else {
              unsigned int v41 = 0;
            }
            --v44;
            if (v48) {
              v46 |= (unint64_t)(v49 & v19) << v45++;
            }
            else {
              unsigned int v44 = 0;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_67:
          long long v50 = (int16x4_t *)(a3 + v19 * v92 + (v29 << 7));
          if (v102)
          {
            long long v51 = *(_OWORD *)v50[26].i8;
            v118[12] = *(_OWORD *)v50[24].i8;
            v118[13] = v51;
            long long v52 = *(_OWORD *)v50[30].i8;
            v118[14] = *(_OWORD *)v50[28].i8;
            v118[15] = v52;
            long long v53 = *(_OWORD *)v50[18].i8;
            v118[8] = *(_OWORD *)v50[16].i8;
            v118[9] = v53;
            long long v54 = *(_OWORD *)v50[22].i8;
            v118[10] = *(_OWORD *)v50[20].i8;
            v118[11] = v54;
            long long v55 = *(_OWORD *)v50[10].i8;
            v118[4] = *(_OWORD *)v50[8].i8;
            v118[5] = v55;
            long long v56 = *(_OWORD *)v50[14].i8;
            v118[6] = *(_OWORD *)v50[12].i8;
            v118[7] = v56;
            long long v57 = *(_OWORD *)v50[2].i8;
            v118[0] = *(_OWORD *)v50->i8;
            v118[1] = v57;
            long long v58 = *(_OWORD *)v50[4].i8;
            long long v59 = *(_OWORD *)v50[6].i8;
            long long v50 = (int16x4_t *)v118;
            v118[2] = v58;
            v118[3] = v59;
          }
          int v60 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v61 = v103 + (v33 - a7);
          char v62 = v35 < 0x10 || v36;
          if ((v62 & 1) == 0 && v107 > 0xF)
          {
            uint64_t v63 = a4;
            uint64_t v64 = a7;
            uint64_t v65 = a8;
            int v66 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
            int16x4_t v67 = (int16x4_t *)((char *)v50
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61, a11, v50, *v60, v66));
            int16x4_t v68 = (int16x4_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + 8, a11, v67, v60[1], v66));
            int16x4_t v69 = (int16x4_t *)((char *)v68
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v96, a11, v68, v60[2], v66));
            int v70 = (int16x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v96 + 8, a11, v69, v60[3], v66));
            int8x8_t v71 = (int16x4_t *)((char *)v70
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v95, a11, v70, v60[4], v66));
            uint64_t v72 = (int16x4_t *)((char *)v71
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v95 + 8, a11, v71, v60[5], v66));
            int v73 = (int16x4_t *)((char *)v72
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v94, a11, v72, v60[6], v66));
            int v74 = v66;
            a8 = v65;
            a7 = v64;
            a4 = v63;
            a3 = v97;
            uint64_t v18 = v98;
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + v94 + 8, a11, v73, v60[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v18;
          block[5] = v50;
          char v116 = v35;
          char v117 = v107;
          int v112 = v99;
          int v113 = v33 - v31;
          block[6] = a4 + 8 * v46;
          uint64_t v110 = v103 + (v33 - a7);
          uint64_t v111 = a11;
          unsigned int v114 = v104;
          unsigned int v115 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v18 + 8) + 7384), block);
LABEL_27:
            unint64_t v30 = v108;
            goto LABEL_28;
          }
          int v75 = *(_DWORD *)(*(void *)(v18 + 208) + 52);
          int16x4_t v76 = (int16x4_t *)((char *)v50
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v119, 16, v50, *v60, v75));
          int16x4_t v77 = (int16x4_t *)((char *)v76
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v120, 16, v76, v60[1], v75));
          int16x4_t v78 = (int16x4_t *)((char *)v77
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v121, 16, v77, v60[2], v75));
          int16x4_t v79 = (int16x4_t *)((char *)v78
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v122, 16, v78, v60[3], v75));
          uint64_t v80 = (int16x4_t *)((char *)v79
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v123, 16, v79, v60[4], v75));
          int8x8_t v81 = (int16x4_t *)((char *)v80
                            + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v124, 16, v80, v60[5], v75));
          uint64_t v82 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v125, 16, v81, v60[6], v75);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v126, 16, (int16x4_t *)((char *)v81 + v82), v60[7], v75);
          unint64_t v83 = v114;
          unint64_t v30 = v108;
          if (v114 && v115)
          {
            unint64_t v84 = 0;
            uint64_t v85 = &v119[16 * v112 + v113];
            int v86 = 1;
            do
            {
              if (v86)
              {
                uint64_t v87 = 0;
                uint64_t v88 = v110 + v111 * v84;
                do
                {
                  *(unsigned char *)(v88 + v87) = v85[v87];
                  int v86 = v115;
                  ++v87;
                }
                while (v115 > v87);
                unint64_t v83 = v114;
              }
              ++v84;
              v85 += 16;
            }
            while (v84 < v83);
          }
LABEL_28:
          unint64_t v29 = v30;
        }
        while (v30 != (v101 >> 4) + 1);
        ++v19;
      }
      while (v19 != v89);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v250 = *MEMORY[0x263EF8340];
  size_t v189 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v201 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v188 = a8 + a10 - 1;
  unsigned int v20 = v188 >> 4;
  if (*(void *)(v15 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v196 = v25;
  if (v19 <= v20)
  {
    unsigned int v195 = a7 + a9 - 1;
    if (a7 >> 4 <= v195 >> 4)
    {
      uint64_t v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      uint64_t v192 = 8 * a11;
      uint64_t v193 = 4 * a11;
      uint64_t v187 = v20 + 1;
      uint64_t v202 = v15;
      uint64_t v191 = 2 * a11;
      do
      {
        unsigned int v26 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v201) {
          unsigned int v27 = v201;
        }
        else {
          unsigned int v27 = 16 * v19;
        }
        if (v188 < v26) {
          unsigned int v26 = v188;
        }
        int v194 = v27 - 16 * v19;
        int v200 = v26 - v27 + 1;
        int v28 = ((a6 - 1) & 0xF) + 1;
        if (v19 != (a6 - 1) >> 4) {
          int v28 = 16;
        }
        unsigned int v205 = v28;
        uint64_t v199 = a2 + (v27 - v201) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v195 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v204) {
            unsigned int v35 = v203;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v201 && v31 >= a7)
          {
            int v37 = v203;
            if (v29 != v204) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v200 != v205;
          }
          unsigned int v39 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_70:
              unint64_t v46 = 0;
              goto LABEL_71;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_70;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v19) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_71:
          long long v52 = (int32x4_t *)(a3 + v19 * v189 + (v29 << 9));
          unint64_t v206 = v29 + 1;
          if (v196)
          {
            memcpy(__dst, v52, sizeof(__dst));
            long long v52 = (int32x4_t *)__dst;
          }
          long long v53 = (unsigned __int8 *)(a4 + 8 * v46);
          long long v54 = (int32x4_t *)(v199 + 2 * (v33 - a7));
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) == 0 && v205 > 0xF)
          {
            unsigned int v56 = *v53;
            if (v56 == 63)
            {
              int32x4_t v65 = *v52;
              int32x4_t v17 = v52[1];
              int32x4_t v18 = v52[2];
              int32x4_t v66 = v52[3];
              *long long v54 = vuzp1q_s32(*v52, v18);
              *(int32x4_t *)((char *)v54 + a11) = vuzp2q_s32(v65, v18);
              uint64_t v58 = 3 * a11;
              uint64_t v57 = 2 * a11;
              int16x4_t v67 = (int32x4_t *)((char *)v54 + v191);
              *int16x4_t v67 = vuzp1q_s32(v17, v66);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v66);
              *(int16x8_t *)((char *)v67 + a11) = v16;
              uint64_t v59 = 64;
            }
            else
            {
              uint64_t v57 = 2 * a11;
              if (v56 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16(v52->i16);
                *long long v54 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v54 + a11) = v16;
                *(int16x8_t *)((char *)v54 + 2 * a11) = v16;
                uint64_t v58 = 3 * a11;
                *(int16x8_t *)((char *)v54 + 3 * a11) = v16;
                uint64_t v59 = 2;
              }
              else
              {
                uint64_t v58 = 3 * a11;
                if (*v53)
                {
                  uint64_t v59 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v54, a11, (uint64_t)v52, v56, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
                }
                else
                {
                  uint64_t v59 = 0;
                  v54->i64[0] = 0;
                  v54->i64[1] = 0;
                  int v60 = (uint64_t *)((char *)v54->i64 + a11);
                  *int v60 = 0;
                  v60[1] = 0;
                  uint64_t v61 = (uint64_t *)((char *)v54->i64 + v191);
                  *uint64_t v61 = 0;
                  v61[1] = 0;
                  char v62 = (uint64_t *)((char *)v54->i64 + 3 * a11);
                  *char v62 = 0;
                  v62[1] = 0;
                }
              }
            }
            uint64_t v68 = (uint64_t)v52->i64 + v59;
            int16x4_t v69 = v54 + 1;
            unsigned int v70 = v53[1];
            if (v70 == 63)
            {
              int32x4_t v75 = *(int32x4_t *)v68;
              int32x4_t v17 = *(int32x4_t *)(v68 + 16);
              int32x4_t v18 = *(int32x4_t *)(v68 + 32);
              int32x4_t v76 = *(int32x4_t *)(v68 + 48);
              *int16x4_t v69 = vuzp1q_s32(*(int32x4_t *)v68, v18);
              *(int32x4_t *)((char *)v69 + a11) = vuzp2q_s32(v75, v18);
              int16x4_t v77 = (int32x4_t *)((char *)v69 + v57);
              *int16x4_t v77 = vuzp1q_s32(v17, v76);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v76);
              *(int16x8_t *)((char *)v77 + a11) = v16;
              uint64_t v71 = 64;
            }
            else if (v70 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v68);
              *int16x4_t v69 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v69 + a11) = v16;
              *(int16x8_t *)((char *)v69 + v57) = v16;
              *(int16x8_t *)((char *)v69 + v58) = v16;
              uint64_t v71 = 2;
            }
            else if (v53[1])
            {
              uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v69, a11, v68, v70, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v71 = 0;
              v69->i64[0] = 0;
              v54[1].i64[1] = 0;
              uint64_t v72 = (uint64_t *)((char *)v69->i64 + a11);
              *uint64_t v72 = 0;
              v72[1] = 0;
              int v73 = (uint64_t *)((char *)v69->i64 + v57);
              *int v73 = 0;
              v73[1] = 0;
              int v74 = (uint64_t *)((char *)v69->i64 + v58);
              *int v74 = 0;
              v74[1] = 0;
            }
            uint64_t v78 = v68 + v71;
            int16x4_t v79 = (int32x4_t *)((char *)v54 + v193);
            unsigned int v80 = v53[2];
            if (v80 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)v78;
              int32x4_t v17 = *(int32x4_t *)(v78 + 16);
              int32x4_t v18 = *(int32x4_t *)(v78 + 32);
              int32x4_t v86 = *(int32x4_t *)(v78 + 48);
              *int16x4_t v79 = vuzp1q_s32(*(int32x4_t *)v78, v18);
              *(int32x4_t *)((char *)v79 + a11) = vuzp2q_s32(v85, v18);
              uint64_t v87 = (int32x4_t *)((char *)v79 + v57);
              *uint64_t v87 = vuzp1q_s32(v17, v86);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v86);
              *(int16x8_t *)((char *)v87 + a11) = v16;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v78);
              *int16x4_t v79 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v79 + a11) = v16;
              *(int16x8_t *)((char *)v79 + v57) = v16;
              *(int16x8_t *)((char *)v79 + v58) = v16;
              uint64_t v81 = 2;
            }
            else if (v53[2])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v54 + v193), a11, v78, v80, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v79->i64[0] = 0;
              v79->i64[1] = 0;
              uint64_t v82 = (uint64_t *)((char *)v79->i64 + a11);
              *uint64_t v82 = 0;
              v82[1] = 0;
              unint64_t v83 = (uint64_t *)((char *)v79->i64 + v57);
              void *v83 = 0;
              v83[1] = 0;
              unint64_t v84 = (uint64_t *)((char *)v79->i64 + v58);
              *unint64_t v84 = 0;
              v84[1] = 0;
            }
            uint64_t v88 = v78 + v81;
            uint64_t v89 = v79 + 1;
            unsigned int v90 = v53[3];
            if (v90 == 63)
            {
              int32x4_t v95 = *(int32x4_t *)v88;
              int32x4_t v17 = *(int32x4_t *)(v88 + 16);
              int32x4_t v18 = *(int32x4_t *)(v88 + 32);
              int32x4_t v96 = *(int32x4_t *)(v88 + 48);
              *uint64_t v89 = vuzp1q_s32(*(int32x4_t *)v88, v18);
              *(int32x4_t *)((char *)v89 + a11) = vuzp2q_s32(v95, v18);
              uint64_t v97 = (int32x4_t *)((char *)v89 + v57);
              *uint64_t v97 = vuzp1q_s32(v17, v96);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v96);
              *(int16x8_t *)((char *)v97 + a11) = v16;
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v88);
              *uint64_t v89 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v89 + a11) = v16;
              *(int16x8_t *)((char *)v89 + v57) = v16;
              *(int16x8_t *)((char *)v89 + v58) = v16;
              uint64_t v91 = 2;
            }
            else if (v53[3])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, a11, v88, v90, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v91 = 0;
              v89->i64[0] = 0;
              v79[1].i64[1] = 0;
              size_t v92 = (uint64_t *)((char *)v89->i64 + a11);
              *size_t v92 = 0;
              v92[1] = 0;
              int v93 = (uint64_t *)((char *)v89->i64 + v57);
              *int v93 = 0;
              v93[1] = 0;
              uint64_t v94 = (uint64_t *)((char *)v89->i64 + v58);
              *uint64_t v94 = 0;
              v94[1] = 0;
            }
            uint64_t v98 = v88 + v91;
            int v99 = (int32x4_t *)((char *)v54 + v192);
            unsigned int v100 = v53[4];
            if (v100 == 63)
            {
              int32x4_t v105 = *(int32x4_t *)v98;
              int32x4_t v17 = *(int32x4_t *)(v98 + 16);
              int32x4_t v18 = *(int32x4_t *)(v98 + 32);
              int32x4_t v106 = *(int32x4_t *)(v98 + 48);
              *int v99 = vuzp1q_s32(*(int32x4_t *)v98, v18);
              *(int32x4_t *)((char *)v99 + a11) = vuzp2q_s32(v105, v18);
              unsigned int v107 = (int32x4_t *)((char *)v99 + v57);
              *unsigned int v107 = vuzp1q_s32(v17, v106);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v106);
              *(int16x8_t *)((char *)v107 + a11) = v16;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v98);
              *int v99 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v99 + a11) = v16;
              *(int16x8_t *)((char *)v99 + v57) = v16;
              *(int16x8_t *)((char *)v99 + v58) = v16;
              uint64_t v101 = 2;
            }
            else if (v53[4])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v54 + v192), a11, v98, v100, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v101 = 0;
              v99->i64[0] = 0;
              v99->i64[1] = 0;
              int v102 = (uint64_t *)((char *)v99->i64 + a11);
              *int v102 = 0;
              v102[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v99->i64 + v57);
              *uint64_t v103 = 0;
              v103[1] = 0;
              int v104 = (uint64_t *)((char *)v99->i64 + v58);
              *int v104 = 0;
              v104[1] = 0;
            }
            uint64_t v108 = v98 + v101;
            int16x4_t v109 = v99 + 1;
            unsigned int v110 = v53[5];
            if (v110 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v108;
              int32x4_t v17 = *(int32x4_t *)(v108 + 16);
              int32x4_t v18 = *(int32x4_t *)(v108 + 32);
              int32x4_t v116 = *(int32x4_t *)(v108 + 48);
              *int16x4_t v109 = vuzp1q_s32(*(int32x4_t *)v108, v18);
              *(int32x4_t *)((char *)v109 + a11) = vuzp2q_s32(v115, v18);
              char v117 = (int32x4_t *)((char *)v109 + v57);
              *char v117 = vuzp1q_s32(v17, v116);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v116);
              *(int16x8_t *)((char *)v117 + a11) = v16;
              uint64_t v111 = 64;
            }
            else if (v110 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v108);
              *int16x4_t v109 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v109 + a11) = v16;
              *(int16x8_t *)((char *)v109 + v57) = v16;
              *(int16x8_t *)((char *)v109 + v58) = v16;
              uint64_t v111 = 2;
            }
            else if (v53[5])
            {
              uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, a11, v108, v110, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v111 = 0;
              v109->i64[0] = 0;
              v99[1].i64[1] = 0;
              int v112 = (uint64_t *)((char *)v109->i64 + a11);
              *int v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v109->i64 + v57);
              *int v113 = 0;
              v113[1] = 0;
              unsigned int v114 = (uint64_t *)((char *)v109->i64 + v58);
              *unsigned int v114 = 0;
              v114[1] = 0;
            }
            uint64_t v118 = v108 + v111;
            int16x4_t v119 = (int32x4_t *)((char *)v54 + 12 * a11);
            unsigned int v120 = v53[6];
            if (v120 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)v118;
              int32x4_t v17 = *(int32x4_t *)(v118 + 16);
              int32x4_t v18 = *(int32x4_t *)(v118 + 32);
              int32x4_t v126 = *(int32x4_t *)(v118 + 48);
              *int16x4_t v119 = vuzp1q_s32(*(int32x4_t *)v118, v18);
              *(int32x4_t *)((char *)v119 + a11) = vuzp2q_s32(v125, v18);
              int16x4_t v127 = (int32x4_t *)((char *)v119 + v57);
              *int16x4_t v127 = vuzp1q_s32(v17, v126);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v126);
              *(int16x8_t *)((char *)v127 + a11) = v16;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v118);
              *int16x4_t v119 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v119 + a11) = v16;
              *(int16x8_t *)((char *)v119 + v57) = v16;
              *(int16x8_t *)((char *)v119 + v58) = v16;
              uint64_t v121 = 2;
            }
            else if (v53[6])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, a11, v118, v120, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v119->i64[0] = 0;
              v119->i64[1] = 0;
              uint64_t v122 = (uint64_t *)((char *)v119->i64 + a11);
              *uint64_t v122 = 0;
              v122[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v119->i64 + v57);
              *uint64_t v123 = 0;
              v123[1] = 0;
              uint64_t v124 = (uint64_t *)((char *)v119->i64 + v58);
              *uint64_t v124 = 0;
              v124[1] = 0;
            }
            uint64_t v128 = v118 + v121;
            int16x4_t v129 = v119 + 1;
            unsigned int v130 = v53[7];
            if (v130 == 63)
            {
              int32x4_t v134 = *(int32x4_t *)v128;
              int32x4_t v17 = *(int32x4_t *)(v128 + 16);
              int32x4_t v18 = *(int32x4_t *)(v128 + 32);
              int32x4_t v135 = *(int32x4_t *)(v128 + 48);
              *int16x4_t v129 = vuzp1q_s32(*(int32x4_t *)v128, v18);
              *(int32x4_t *)((char *)v129 + a11) = vuzp2q_s32(v134, v18);
              int16x4_t v136 = (int32x4_t *)((char *)v129 + v57);
              *int16x4_t v136 = vuzp1q_s32(v17, v135);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v135);
              *(int16x8_t *)((char *)v136 + a11) = v16;
              uint64_t v15 = v202;
            }
            else
            {
              uint64_t v15 = v202;
              if (v130 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16((const __int16 *)v128);
                *int16x4_t v129 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v129 + a11) = v16;
                *(int16x8_t *)((char *)v129 + v57) = v16;
                *(int16x8_t *)((char *)v129 + v58) = v16;
              }
              else if (v53[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v129, a11, v128, v130, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
              }
              else
              {
                v129->i64[0] = 0;
                v119[1].i64[1] = 0;
                int8x8_t v131 = (uint64_t *)((char *)v129->i64 + a11);
                *int8x8_t v131 = 0;
                v131[1] = 0;
                int v132 = (uint64_t *)((char *)v129->i64 + v57);
                *int v132 = 0;
                v132[1] = 0;
                unsigned int v133 = (uint64_t *)((char *)v129->i64 + v58);
                *unsigned int v133 = 0;
                v133[1] = 0;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v202;
          block[5] = v52;
          char v215 = v35;
          char v216 = v205;
          int v211 = v194;
          int v212 = v33 - v31;
          block[6] = v53;
          uint64_t v209 = v199 + 2 * (v33 - a7);
          uint64_t v210 = a11;
          unsigned int v213 = v200;
          unsigned int v214 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v202 + 8) + 7384), block);
            uint64_t v15 = v202;
LABEL_27:
            unint64_t v30 = v206;
            goto LABEL_28;
          }
          unsigned int v63 = *v53;
          if (v63 == 63)
          {
            int32x4_t v137 = v52[1];
            int32x4_t v18 = v52[2];
            int32x4_t v138 = v52[3];
            int32x4_t v139 = vuzp2q_s32(*v52, v18);
            int32x4_t v218 = vuzp1q_s32(*v52, v18);
            int32x4_t v220 = v139;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v137, v138);
            int32x4_t v17 = vuzp2q_s32(v137, v138);
            int16x8_t v222 = v16;
            int32x4_t v224 = v17;
            uint64_t v64 = 64;
          }
          else if (v63 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16(v52->i16);
            int32x4_t v218 = (int32x4_t)v16;
            int32x4_t v220 = (int32x4_t)v16;
            int16x8_t v222 = v16;
            int32x4_t v224 = (int32x4_t)v16;
            uint64_t v64 = 2;
          }
          else if (*v53)
          {
            uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 32, (uint64_t)v52, v63, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v64 = 0;
            int32x4_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
            int16x8_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
          }
          uint64_t v140 = (uint64_t)v52->i64 + v64;
          unsigned int v141 = v53[1];
          if (v141 == 63)
          {
            int32x4_t v143 = *(int32x4_t *)(v140 + 16);
            int32x4_t v18 = *(int32x4_t *)(v140 + 32);
            int32x4_t v144 = *(int32x4_t *)(v140 + 48);
            int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v140, v18);
            int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v140, v18);
            int32x4_t v221 = v145;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v143, v144);
            int32x4_t v17 = vuzp2q_s32(v143, v144);
            int16x8_t v223 = v16;
            int32x4_t v225 = v17;
            uint64_t v142 = 64;
            uint64_t v15 = v202;
          }
          else
          {
            uint64_t v15 = v202;
            if (v141 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v140);
              int32x4_t v219 = (int32x4_t)v16;
              int32x4_t v221 = (int32x4_t)v16;
              int16x8_t v223 = v16;
              int32x4_t v225 = (int32x4_t)v16;
              uint64_t v142 = 2;
            }
            else if (v53[1])
            {
              uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v140, v141, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v142 = 0;
              int32x4_t v219 = 0uLL;
              int32x4_t v221 = 0uLL;
              int16x8_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
            }
          }
          uint64_t v146 = v140 + v142;
          unsigned int v147 = v53[2];
          if (v147 == 63)
          {
            int32x4_t v149 = *(int32x4_t *)(v146 + 16);
            int32x4_t v18 = *(int32x4_t *)(v146 + 32);
            int32x4_t v150 = *(int32x4_t *)(v146 + 48);
            int32x4_t v151 = vuzp2q_s32(*(int32x4_t *)v146, v18);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v146, v18);
            int32x4_t v228 = v151;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v149, v150);
            int32x4_t v17 = vuzp2q_s32(v149, v150);
            int16x8_t v230 = v16;
            int32x4_t v232 = v17;
            uint64_t v148 = 64;
          }
          else if (v147 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v146);
            int32x4_t v226 = (int32x4_t)v16;
            int32x4_t v228 = (int32x4_t)v16;
            int16x8_t v230 = v16;
            int32x4_t v232 = (int32x4_t)v16;
            uint64_t v148 = 2;
          }
          else if (v53[2])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v146, v147, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v148 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int16x8_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v152 = v146 + v148;
          unsigned int v153 = v53[3];
          if (v153 == 63)
          {
            int32x4_t v155 = *(int32x4_t *)(v152 + 16);
            int32x4_t v18 = *(int32x4_t *)(v152 + 32);
            int32x4_t v156 = *(int32x4_t *)(v152 + 48);
            int32x4_t v157 = vuzp2q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v229 = v157;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v155, v156);
            int32x4_t v17 = vuzp2q_s32(v155, v156);
            int16x8_t v231 = v16;
            int32x4_t v233 = v17;
            uint64_t v154 = 64;
          }
          else if (v153 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v152);
            int32x4_t v227 = (int32x4_t)v16;
            int32x4_t v229 = (int32x4_t)v16;
            int16x8_t v231 = v16;
            int32x4_t v233 = (int32x4_t)v16;
            uint64_t v154 = 2;
          }
          else if (v53[3])
          {
            uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v152, v153, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v154 = 0;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int16x8_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
          }
          uint64_t v158 = v152 + v154;
          unsigned int v159 = v53[4];
          if (v159 == 63)
          {
            int32x4_t v161 = *(int32x4_t *)(v158 + 16);
            int32x4_t v18 = *(int32x4_t *)(v158 + 32);
            int32x4_t v162 = *(int32x4_t *)(v158 + 48);
            int32x4_t v163 = vuzp2q_s32(*(int32x4_t *)v158, v18);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v158, v18);
            int32x4_t v236 = v163;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v161, v162);
            int32x4_t v17 = vuzp2q_s32(v161, v162);
            int16x8_t v238 = v16;
            int32x4_t v240 = v17;
            uint64_t v160 = 64;
          }
          else if (v159 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v158);
            int32x4_t v234 = (int32x4_t)v16;
            int32x4_t v236 = (int32x4_t)v16;
            int16x8_t v238 = v16;
            int32x4_t v240 = (int32x4_t)v16;
            uint64_t v160 = 2;
          }
          else if (v53[4])
          {
            uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v158, v159, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v160 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int16x8_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v164 = v158 + v160;
          unsigned int v165 = v53[5];
          if (v165 == 63)
          {
            int32x4_t v167 = *(int32x4_t *)(v164 + 16);
            int32x4_t v18 = *(int32x4_t *)(v164 + 32);
            int32x4_t v168 = *(int32x4_t *)(v164 + 48);
            int32x4_t v169 = vuzp2q_s32(*(int32x4_t *)v164, v18);
            int32x4_t v235 = vuzp1q_s32(*(int32x4_t *)v164, v18);
            int32x4_t v237 = v169;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v167, v168);
            int32x4_t v17 = vuzp2q_s32(v167, v168);
            int16x8_t v239 = v16;
            int32x4_t v241 = v17;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v164);
            int32x4_t v235 = (int32x4_t)v16;
            int32x4_t v237 = (int32x4_t)v16;
            int16x8_t v239 = v16;
            int32x4_t v241 = (int32x4_t)v16;
            uint64_t v166 = 2;
          }
          else if (v53[5])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 32, v164, v165, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v166 = 0;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int16x8_t v239 = 0uLL;
            int32x4_t v241 = 0uLL;
          }
          uint64_t v170 = v164 + v166;
          unsigned int v171 = v53[6];
          if (v171 == 63)
          {
            int32x4_t v173 = *(int32x4_t *)(v170 + 16);
            int32x4_t v18 = *(int32x4_t *)(v170 + 32);
            int32x4_t v174 = *(int32x4_t *)(v170 + 48);
            int32x4_t v175 = vuzp2q_s32(*(int32x4_t *)v170, v18);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v170, v18);
            int32x4_t v244 = v175;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v173, v174);
            int32x4_t v17 = vuzp2q_s32(v173, v174);
            int16x8_t v246 = v16;
            int32x4_t v248 = v17;
            uint64_t v172 = 64;
          }
          else if (v171 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v170);
            int32x4_t v242 = (int32x4_t)v16;
            int32x4_t v244 = (int32x4_t)v16;
            int16x8_t v246 = v16;
            int32x4_t v248 = (int32x4_t)v16;
            uint64_t v172 = 2;
          }
          else if (v53[6])
          {
            uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v170, v171, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v172 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int16x8_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v176 = v170 + v172;
          unsigned int v177 = v53[7];
          if (v177 == 63)
          {
            int32x4_t v178 = *(int32x4_t *)(v176 + 16);
            int32x4_t v18 = *(int32x4_t *)(v176 + 32);
            int32x4_t v179 = *(int32x4_t *)(v176 + 48);
            int32x4_t v180 = vuzp2q_s32(*(int32x4_t *)v176, v18);
            int32x4_t v243 = vuzp1q_s32(*(int32x4_t *)v176, v18);
            int32x4_t v245 = v180;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v178, v179);
            int32x4_t v17 = vuzp2q_s32(v178, v179);
            int16x8_t v247 = v16;
            int32x4_t v249 = v17;
          }
          else if (v177 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v176);
            int32x4_t v243 = (int32x4_t)v16;
            int32x4_t v245 = (int32x4_t)v16;
            int16x8_t v247 = v16;
            int32x4_t v249 = (int32x4_t)v16;
          }
          else if (v53[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 32, v176, v177, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int16x8_t v247 = 0uLL;
            int32x4_t v249 = 0uLL;
          }
          unint64_t v181 = v213;
          unint64_t v30 = v206;
          if (v213)
          {
            unint64_t v182 = 0;
            int16x4_t v183 = &v218.i8[32 * v211 + 2 * v212];
            unsigned int v184 = v214;
            do
            {
              if (v184)
              {
                uint64_t v185 = 0;
                uint64_t v186 = v209 + v210 * v182;
                do
                {
                  *(unsigned char *)(v186 + v185) = v183[v185];
                  ++v185;
                  unsigned int v184 = v214;
                }
                while (2 * (unint64_t)v214 > v185);
                unint64_t v181 = v213;
              }
              ++v182;
              v183 += 32;
            }
            while (v182 < v181);
          }
LABEL_28:
          unint64_t v29 = v30;
        }
        while (v30 != (v195 >> 4) + 1);
        ++v19;
      }
      while (v19 != v187);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v250 = *MEMORY[0x263EF8340];
  size_t v189 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v201 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v188 = a8 + a10 - 1;
  unsigned int v20 = v188 >> 4;
  if (*(void *)(v15 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v196 = v25;
  if (v19 <= v20)
  {
    unsigned int v195 = a7 + a9 - 1;
    if (a7 >> 4 <= v195 >> 4)
    {
      uint64_t v204 = (a5 - 1) >> 4;
      int v203 = ((a5 - 1) & 0xF) + 1;
      uint64_t v192 = 8 * a11;
      uint64_t v193 = 4 * a11;
      uint64_t v187 = v20 + 1;
      uint64_t v202 = v15;
      uint64_t v191 = 2 * a11;
      do
      {
        unsigned int v26 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v201) {
          unsigned int v27 = v201;
        }
        else {
          unsigned int v27 = 16 * v19;
        }
        if (v188 < v26) {
          unsigned int v26 = v188;
        }
        int v194 = v27 - 16 * v19;
        int v200 = v26 - v27 + 1;
        int v28 = ((a6 - 1) & 0xF) + 1;
        if (v19 != (a6 - 1) >> 4) {
          int v28 = 16;
        }
        unsigned int v205 = v28;
        uint64_t v199 = a2 + (v27 - v201) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v31 = 16 * v29;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v195 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v204) {
            unsigned int v35 = v203;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v19 >= v201 && v31 >= a7)
          {
            int v37 = v203;
            if (v29 != v204) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v200 != v205;
          }
          unsigned int v39 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_70:
              unint64_t v46 = 0;
              goto LABEL_71;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_70;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v19) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_71:
          long long v52 = (int32x4_t *)(a3 + v19 * v189 + (v29 << 9));
          unint64_t v206 = v29 + 1;
          if (v196)
          {
            memcpy(__dst, v52, sizeof(__dst));
            long long v52 = (int32x4_t *)__dst;
          }
          long long v53 = (unsigned __int8 *)(a4 + 8 * v46);
          long long v54 = (int32x4_t *)(v199 + 2 * (v33 - a7));
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) == 0 && v205 > 0xF)
          {
            unsigned int v56 = *v53;
            if (v56 == 63)
            {
              int32x4_t v65 = *v52;
              int32x4_t v17 = v52[1];
              int32x4_t v18 = v52[2];
              int32x4_t v66 = v52[3];
              *long long v54 = vuzp1q_s32(*v52, v18);
              *(int32x4_t *)((char *)v54 + a11) = vuzp2q_s32(v65, v18);
              uint64_t v58 = 3 * a11;
              uint64_t v57 = 2 * a11;
              int16x4_t v67 = (int32x4_t *)((char *)v54 + v191);
              *int16x4_t v67 = vuzp1q_s32(v17, v66);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v66);
              *(int16x8_t *)((char *)v67 + a11) = v16;
              uint64_t v59 = 64;
            }
            else
            {
              uint64_t v57 = 2 * a11;
              if (v56 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16(v52->i16);
                *long long v54 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v54 + a11) = v16;
                *(int16x8_t *)((char *)v54 + 2 * a11) = v16;
                uint64_t v58 = 3 * a11;
                *(int16x8_t *)((char *)v54 + 3 * a11) = v16;
                uint64_t v59 = 2;
              }
              else
              {
                uint64_t v58 = 3 * a11;
                if (*v53)
                {
                  uint64_t v59 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v54, a11, (uint64_t)v52, v56, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
                }
                else
                {
                  uint64_t v59 = 0;
                  v54->i64[0] = 0;
                  v54->i64[1] = 0;
                  int v60 = (uint64_t *)((char *)v54->i64 + a11);
                  *int v60 = 0;
                  v60[1] = 0;
                  uint64_t v61 = (uint64_t *)((char *)v54->i64 + v191);
                  *uint64_t v61 = 0;
                  v61[1] = 0;
                  char v62 = (uint64_t *)((char *)v54->i64 + 3 * a11);
                  *char v62 = 0;
                  v62[1] = 0;
                }
              }
            }
            uint64_t v68 = (uint64_t)v52->i64 + v59;
            int16x4_t v69 = v54 + 1;
            unsigned int v70 = v53[1];
            if (v70 == 63)
            {
              int32x4_t v75 = *(int32x4_t *)v68;
              int32x4_t v17 = *(int32x4_t *)(v68 + 16);
              int32x4_t v18 = *(int32x4_t *)(v68 + 32);
              int32x4_t v76 = *(int32x4_t *)(v68 + 48);
              *int16x4_t v69 = vuzp1q_s32(*(int32x4_t *)v68, v18);
              *(int32x4_t *)((char *)v69 + a11) = vuzp2q_s32(v75, v18);
              int16x4_t v77 = (int32x4_t *)((char *)v69 + v57);
              *int16x4_t v77 = vuzp1q_s32(v17, v76);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v76);
              *(int16x8_t *)((char *)v77 + a11) = v16;
              uint64_t v71 = 64;
            }
            else if (v70 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v68);
              *int16x4_t v69 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v69 + a11) = v16;
              *(int16x8_t *)((char *)v69 + v57) = v16;
              *(int16x8_t *)((char *)v69 + v58) = v16;
              uint64_t v71 = 2;
            }
            else if (v53[1])
            {
              uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v69, a11, v68, v70, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v71 = 0;
              v69->i64[0] = 0;
              v54[1].i64[1] = 0;
              uint64_t v72 = (uint64_t *)((char *)v69->i64 + a11);
              *uint64_t v72 = 0;
              v72[1] = 0;
              int v73 = (uint64_t *)((char *)v69->i64 + v57);
              *int v73 = 0;
              v73[1] = 0;
              int v74 = (uint64_t *)((char *)v69->i64 + v58);
              *int v74 = 0;
              v74[1] = 0;
            }
            uint64_t v78 = v68 + v71;
            int16x4_t v79 = (int32x4_t *)((char *)v54 + v193);
            unsigned int v80 = v53[2];
            if (v80 == 63)
            {
              int32x4_t v85 = *(int32x4_t *)v78;
              int32x4_t v17 = *(int32x4_t *)(v78 + 16);
              int32x4_t v18 = *(int32x4_t *)(v78 + 32);
              int32x4_t v86 = *(int32x4_t *)(v78 + 48);
              *int16x4_t v79 = vuzp1q_s32(*(int32x4_t *)v78, v18);
              *(int32x4_t *)((char *)v79 + a11) = vuzp2q_s32(v85, v18);
              uint64_t v87 = (int32x4_t *)((char *)v79 + v57);
              *uint64_t v87 = vuzp1q_s32(v17, v86);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v86);
              *(int16x8_t *)((char *)v87 + a11) = v16;
              uint64_t v81 = 64;
            }
            else if (v80 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v78);
              *int16x4_t v79 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v79 + a11) = v16;
              *(int16x8_t *)((char *)v79 + v57) = v16;
              *(int16x8_t *)((char *)v79 + v58) = v16;
              uint64_t v81 = 2;
            }
            else if (v53[2])
            {
              uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v54 + v193), a11, v78, v80, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v81 = 0;
              v79->i64[0] = 0;
              v79->i64[1] = 0;
              uint64_t v82 = (uint64_t *)((char *)v79->i64 + a11);
              *uint64_t v82 = 0;
              v82[1] = 0;
              unint64_t v83 = (uint64_t *)((char *)v79->i64 + v57);
              void *v83 = 0;
              v83[1] = 0;
              unint64_t v84 = (uint64_t *)((char *)v79->i64 + v58);
              *unint64_t v84 = 0;
              v84[1] = 0;
            }
            uint64_t v88 = v78 + v81;
            uint64_t v89 = v79 + 1;
            unsigned int v90 = v53[3];
            if (v90 == 63)
            {
              int32x4_t v95 = *(int32x4_t *)v88;
              int32x4_t v17 = *(int32x4_t *)(v88 + 16);
              int32x4_t v18 = *(int32x4_t *)(v88 + 32);
              int32x4_t v96 = *(int32x4_t *)(v88 + 48);
              *uint64_t v89 = vuzp1q_s32(*(int32x4_t *)v88, v18);
              *(int32x4_t *)((char *)v89 + a11) = vuzp2q_s32(v95, v18);
              uint64_t v97 = (int32x4_t *)((char *)v89 + v57);
              *uint64_t v97 = vuzp1q_s32(v17, v96);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v96);
              *(int16x8_t *)((char *)v97 + a11) = v16;
              uint64_t v91 = 64;
            }
            else if (v90 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v88);
              *uint64_t v89 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v89 + a11) = v16;
              *(int16x8_t *)((char *)v89 + v57) = v16;
              *(int16x8_t *)((char *)v89 + v58) = v16;
              uint64_t v91 = 2;
            }
            else if (v53[3])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, a11, v88, v90, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v91 = 0;
              v89->i64[0] = 0;
              v79[1].i64[1] = 0;
              size_t v92 = (uint64_t *)((char *)v89->i64 + a11);
              *size_t v92 = 0;
              v92[1] = 0;
              int v93 = (uint64_t *)((char *)v89->i64 + v57);
              *int v93 = 0;
              v93[1] = 0;
              uint64_t v94 = (uint64_t *)((char *)v89->i64 + v58);
              *uint64_t v94 = 0;
              v94[1] = 0;
            }
            uint64_t v98 = v88 + v91;
            int v99 = (int32x4_t *)((char *)v54 + v192);
            unsigned int v100 = v53[4];
            if (v100 == 63)
            {
              int32x4_t v105 = *(int32x4_t *)v98;
              int32x4_t v17 = *(int32x4_t *)(v98 + 16);
              int32x4_t v18 = *(int32x4_t *)(v98 + 32);
              int32x4_t v106 = *(int32x4_t *)(v98 + 48);
              *int v99 = vuzp1q_s32(*(int32x4_t *)v98, v18);
              *(int32x4_t *)((char *)v99 + a11) = vuzp2q_s32(v105, v18);
              unsigned int v107 = (int32x4_t *)((char *)v99 + v57);
              *unsigned int v107 = vuzp1q_s32(v17, v106);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v106);
              *(int16x8_t *)((char *)v107 + a11) = v16;
              uint64_t v101 = 64;
            }
            else if (v100 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v98);
              *int v99 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v99 + a11) = v16;
              *(int16x8_t *)((char *)v99 + v57) = v16;
              *(int16x8_t *)((char *)v99 + v58) = v16;
              uint64_t v101 = 2;
            }
            else if (v53[4])
            {
              uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v54 + v192), a11, v98, v100, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v101 = 0;
              v99->i64[0] = 0;
              v99->i64[1] = 0;
              int v102 = (uint64_t *)((char *)v99->i64 + a11);
              *int v102 = 0;
              v102[1] = 0;
              uint64_t v103 = (uint64_t *)((char *)v99->i64 + v57);
              *uint64_t v103 = 0;
              v103[1] = 0;
              int v104 = (uint64_t *)((char *)v99->i64 + v58);
              *int v104 = 0;
              v104[1] = 0;
            }
            uint64_t v108 = v98 + v101;
            int16x4_t v109 = v99 + 1;
            unsigned int v110 = v53[5];
            if (v110 == 63)
            {
              int32x4_t v115 = *(int32x4_t *)v108;
              int32x4_t v17 = *(int32x4_t *)(v108 + 16);
              int32x4_t v18 = *(int32x4_t *)(v108 + 32);
              int32x4_t v116 = *(int32x4_t *)(v108 + 48);
              *int16x4_t v109 = vuzp1q_s32(*(int32x4_t *)v108, v18);
              *(int32x4_t *)((char *)v109 + a11) = vuzp2q_s32(v115, v18);
              char v117 = (int32x4_t *)((char *)v109 + v57);
              *char v117 = vuzp1q_s32(v17, v116);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v116);
              *(int16x8_t *)((char *)v117 + a11) = v16;
              uint64_t v111 = 64;
            }
            else if (v110 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v108);
              *int16x4_t v109 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v109 + a11) = v16;
              *(int16x8_t *)((char *)v109 + v57) = v16;
              *(int16x8_t *)((char *)v109 + v58) = v16;
              uint64_t v111 = 2;
            }
            else if (v53[5])
            {
              uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v109, a11, v108, v110, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v111 = 0;
              v109->i64[0] = 0;
              v99[1].i64[1] = 0;
              int v112 = (uint64_t *)((char *)v109->i64 + a11);
              *int v112 = 0;
              v112[1] = 0;
              int v113 = (uint64_t *)((char *)v109->i64 + v57);
              *int v113 = 0;
              v113[1] = 0;
              unsigned int v114 = (uint64_t *)((char *)v109->i64 + v58);
              *unsigned int v114 = 0;
              v114[1] = 0;
            }
            uint64_t v118 = v108 + v111;
            int16x4_t v119 = (int32x4_t *)((char *)v54 + 12 * a11);
            unsigned int v120 = v53[6];
            if (v120 == 63)
            {
              int32x4_t v125 = *(int32x4_t *)v118;
              int32x4_t v17 = *(int32x4_t *)(v118 + 16);
              int32x4_t v18 = *(int32x4_t *)(v118 + 32);
              int32x4_t v126 = *(int32x4_t *)(v118 + 48);
              *int16x4_t v119 = vuzp1q_s32(*(int32x4_t *)v118, v18);
              *(int32x4_t *)((char *)v119 + a11) = vuzp2q_s32(v125, v18);
              int16x4_t v127 = (int32x4_t *)((char *)v119 + v57);
              *int16x4_t v127 = vuzp1q_s32(v17, v126);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v126);
              *(int16x8_t *)((char *)v127 + a11) = v16;
              uint64_t v121 = 64;
            }
            else if (v120 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v118);
              *int16x4_t v119 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v119 + a11) = v16;
              *(int16x8_t *)((char *)v119 + v57) = v16;
              *(int16x8_t *)((char *)v119 + v58) = v16;
              uint64_t v121 = 2;
            }
            else if (v53[6])
            {
              uint64_t v121 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v119, a11, v118, v120, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v121 = 0;
              v119->i64[0] = 0;
              v119->i64[1] = 0;
              uint64_t v122 = (uint64_t *)((char *)v119->i64 + a11);
              *uint64_t v122 = 0;
              v122[1] = 0;
              uint64_t v123 = (uint64_t *)((char *)v119->i64 + v57);
              *uint64_t v123 = 0;
              v123[1] = 0;
              uint64_t v124 = (uint64_t *)((char *)v119->i64 + v58);
              *uint64_t v124 = 0;
              v124[1] = 0;
            }
            uint64_t v128 = v118 + v121;
            int16x4_t v129 = v119 + 1;
            unsigned int v130 = v53[7];
            if (v130 == 63)
            {
              int32x4_t v134 = *(int32x4_t *)v128;
              int32x4_t v17 = *(int32x4_t *)(v128 + 16);
              int32x4_t v18 = *(int32x4_t *)(v128 + 32);
              int32x4_t v135 = *(int32x4_t *)(v128 + 48);
              *int16x4_t v129 = vuzp1q_s32(*(int32x4_t *)v128, v18);
              *(int32x4_t *)((char *)v129 + a11) = vuzp2q_s32(v134, v18);
              int16x4_t v136 = (int32x4_t *)((char *)v129 + v57);
              *int16x4_t v136 = vuzp1q_s32(v17, v135);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v135);
              *(int16x8_t *)((char *)v136 + a11) = v16;
              uint64_t v15 = v202;
            }
            else
            {
              uint64_t v15 = v202;
              if (v130 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16((const __int16 *)v128);
                *int16x4_t v129 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v129 + a11) = v16;
                *(int16x8_t *)((char *)v129 + v57) = v16;
                *(int16x8_t *)((char *)v129 + v58) = v16;
              }
              else if (v53[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v129, a11, v128, v130, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
              }
              else
              {
                v129->i64[0] = 0;
                v119[1].i64[1] = 0;
                int8x8_t v131 = (uint64_t *)((char *)v129->i64 + a11);
                *int8x8_t v131 = 0;
                v131[1] = 0;
                int v132 = (uint64_t *)((char *)v129->i64 + v57);
                *int v132 = 0;
                v132[1] = 0;
                unsigned int v133 = (uint64_t *)((char *)v129->i64 + v58);
                *unsigned int v133 = 0;
                v133[1] = 0;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v202;
          block[5] = v52;
          char v215 = v35;
          char v216 = v205;
          int v211 = v194;
          int v212 = v33 - v31;
          block[6] = v53;
          uint64_t v209 = v199 + 2 * (v33 - a7);
          uint64_t v210 = a11;
          unsigned int v213 = v200;
          unsigned int v214 = v34;
          if (v36)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v202 + 8) + 7384), block);
            uint64_t v15 = v202;
LABEL_27:
            unint64_t v30 = v206;
            goto LABEL_28;
          }
          unsigned int v63 = *v53;
          if (v63 == 63)
          {
            int32x4_t v137 = v52[1];
            int32x4_t v18 = v52[2];
            int32x4_t v138 = v52[3];
            int32x4_t v139 = vuzp2q_s32(*v52, v18);
            int32x4_t v218 = vuzp1q_s32(*v52, v18);
            int32x4_t v220 = v139;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v137, v138);
            int32x4_t v17 = vuzp2q_s32(v137, v138);
            int16x8_t v222 = v16;
            int32x4_t v224 = v17;
            uint64_t v64 = 64;
          }
          else if (v63 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16(v52->i16);
            int32x4_t v218 = (int32x4_t)v16;
            int32x4_t v220 = (int32x4_t)v16;
            int16x8_t v222 = v16;
            int32x4_t v224 = (int32x4_t)v16;
            uint64_t v64 = 2;
          }
          else if (*v53)
          {
            uint64_t v64 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v218, 32, (uint64_t)v52, v63, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v64 = 0;
            int32x4_t v218 = 0uLL;
            int32x4_t v220 = 0uLL;
            int16x8_t v222 = 0uLL;
            int32x4_t v224 = 0uLL;
          }
          uint64_t v140 = (uint64_t)v52->i64 + v64;
          unsigned int v141 = v53[1];
          if (v141 == 63)
          {
            int32x4_t v143 = *(int32x4_t *)(v140 + 16);
            int32x4_t v18 = *(int32x4_t *)(v140 + 32);
            int32x4_t v144 = *(int32x4_t *)(v140 + 48);
            int32x4_t v145 = vuzp2q_s32(*(int32x4_t *)v140, v18);
            int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v140, v18);
            int32x4_t v221 = v145;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v143, v144);
            int32x4_t v17 = vuzp2q_s32(v143, v144);
            int16x8_t v223 = v16;
            int32x4_t v225 = v17;
            uint64_t v142 = 64;
            uint64_t v15 = v202;
          }
          else
          {
            uint64_t v15 = v202;
            if (v141 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v140);
              int32x4_t v219 = (int32x4_t)v16;
              int32x4_t v221 = (int32x4_t)v16;
              int16x8_t v223 = v16;
              int32x4_t v225 = (int32x4_t)v16;
              uint64_t v142 = 2;
            }
            else if (v53[1])
            {
              uint64_t v142 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v140, v141, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
            }
            else
            {
              uint64_t v142 = 0;
              int32x4_t v219 = 0uLL;
              int32x4_t v221 = 0uLL;
              int16x8_t v223 = 0uLL;
              int32x4_t v225 = 0uLL;
            }
          }
          uint64_t v146 = v140 + v142;
          unsigned int v147 = v53[2];
          if (v147 == 63)
          {
            int32x4_t v149 = *(int32x4_t *)(v146 + 16);
            int32x4_t v18 = *(int32x4_t *)(v146 + 32);
            int32x4_t v150 = *(int32x4_t *)(v146 + 48);
            int32x4_t v151 = vuzp2q_s32(*(int32x4_t *)v146, v18);
            int32x4_t v226 = vuzp1q_s32(*(int32x4_t *)v146, v18);
            int32x4_t v228 = v151;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v149, v150);
            int32x4_t v17 = vuzp2q_s32(v149, v150);
            int16x8_t v230 = v16;
            int32x4_t v232 = v17;
            uint64_t v148 = 64;
          }
          else if (v147 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v146);
            int32x4_t v226 = (int32x4_t)v16;
            int32x4_t v228 = (int32x4_t)v16;
            int16x8_t v230 = v16;
            int32x4_t v232 = (int32x4_t)v16;
            uint64_t v148 = 2;
          }
          else if (v53[2])
          {
            uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v226, 32, v146, v147, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v148 = 0;
            int32x4_t v226 = 0uLL;
            int32x4_t v228 = 0uLL;
            int16x8_t v230 = 0uLL;
            int32x4_t v232 = 0uLL;
          }
          uint64_t v152 = v146 + v148;
          unsigned int v153 = v53[3];
          if (v153 == 63)
          {
            int32x4_t v155 = *(int32x4_t *)(v152 + 16);
            int32x4_t v18 = *(int32x4_t *)(v152 + 32);
            int32x4_t v156 = *(int32x4_t *)(v152 + 48);
            int32x4_t v157 = vuzp2q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v229 = v157;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v155, v156);
            int32x4_t v17 = vuzp2q_s32(v155, v156);
            int16x8_t v231 = v16;
            int32x4_t v233 = v17;
            uint64_t v154 = 64;
          }
          else if (v153 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v152);
            int32x4_t v227 = (int32x4_t)v16;
            int32x4_t v229 = (int32x4_t)v16;
            int16x8_t v231 = v16;
            int32x4_t v233 = (int32x4_t)v16;
            uint64_t v154 = 2;
          }
          else if (v53[3])
          {
            uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v152, v153, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v154 = 0;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int16x8_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
          }
          uint64_t v158 = v152 + v154;
          unsigned int v159 = v53[4];
          if (v159 == 63)
          {
            int32x4_t v161 = *(int32x4_t *)(v158 + 16);
            int32x4_t v18 = *(int32x4_t *)(v158 + 32);
            int32x4_t v162 = *(int32x4_t *)(v158 + 48);
            int32x4_t v163 = vuzp2q_s32(*(int32x4_t *)v158, v18);
            int32x4_t v234 = vuzp1q_s32(*(int32x4_t *)v158, v18);
            int32x4_t v236 = v163;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v161, v162);
            int32x4_t v17 = vuzp2q_s32(v161, v162);
            int16x8_t v238 = v16;
            int32x4_t v240 = v17;
            uint64_t v160 = 64;
          }
          else if (v159 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v158);
            int32x4_t v234 = (int32x4_t)v16;
            int32x4_t v236 = (int32x4_t)v16;
            int16x8_t v238 = v16;
            int32x4_t v240 = (int32x4_t)v16;
            uint64_t v160 = 2;
          }
          else if (v53[4])
          {
            uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v234, 32, v158, v159, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v160 = 0;
            int32x4_t v234 = 0uLL;
            int32x4_t v236 = 0uLL;
            int16x8_t v238 = 0uLL;
            int32x4_t v240 = 0uLL;
          }
          uint64_t v164 = v158 + v160;
          unsigned int v165 = v53[5];
          if (v165 == 63)
          {
            int32x4_t v167 = *(int32x4_t *)(v164 + 16);
            int32x4_t v18 = *(int32x4_t *)(v164 + 32);
            int32x4_t v168 = *(int32x4_t *)(v164 + 48);
            int32x4_t v169 = vuzp2q_s32(*(int32x4_t *)v164, v18);
            int32x4_t v235 = vuzp1q_s32(*(int32x4_t *)v164, v18);
            int32x4_t v237 = v169;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v167, v168);
            int32x4_t v17 = vuzp2q_s32(v167, v168);
            int16x8_t v239 = v16;
            int32x4_t v241 = v17;
            uint64_t v166 = 64;
          }
          else if (v165 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v164);
            int32x4_t v235 = (int32x4_t)v16;
            int32x4_t v237 = (int32x4_t)v16;
            int16x8_t v239 = v16;
            int32x4_t v241 = (int32x4_t)v16;
            uint64_t v166 = 2;
          }
          else if (v53[5])
          {
            uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v235, 32, v164, v165, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v166 = 0;
            int32x4_t v235 = 0uLL;
            int32x4_t v237 = 0uLL;
            int16x8_t v239 = 0uLL;
            int32x4_t v241 = 0uLL;
          }
          uint64_t v170 = v164 + v166;
          unsigned int v171 = v53[6];
          if (v171 == 63)
          {
            int32x4_t v173 = *(int32x4_t *)(v170 + 16);
            int32x4_t v18 = *(int32x4_t *)(v170 + 32);
            int32x4_t v174 = *(int32x4_t *)(v170 + 48);
            int32x4_t v175 = vuzp2q_s32(*(int32x4_t *)v170, v18);
            int32x4_t v242 = vuzp1q_s32(*(int32x4_t *)v170, v18);
            int32x4_t v244 = v175;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v173, v174);
            int32x4_t v17 = vuzp2q_s32(v173, v174);
            int16x8_t v246 = v16;
            int32x4_t v248 = v17;
            uint64_t v172 = 64;
          }
          else if (v171 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v170);
            int32x4_t v242 = (int32x4_t)v16;
            int32x4_t v244 = (int32x4_t)v16;
            int16x8_t v246 = v16;
            int32x4_t v248 = (int32x4_t)v16;
            uint64_t v172 = 2;
          }
          else if (v53[6])
          {
            uint64_t v172 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v242, 32, v170, v171, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            uint64_t v172 = 0;
            int32x4_t v242 = 0uLL;
            int32x4_t v244 = 0uLL;
            int16x8_t v246 = 0uLL;
            int32x4_t v248 = 0uLL;
          }
          uint64_t v176 = v170 + v172;
          unsigned int v177 = v53[7];
          if (v177 == 63)
          {
            int32x4_t v178 = *(int32x4_t *)(v176 + 16);
            int32x4_t v18 = *(int32x4_t *)(v176 + 32);
            int32x4_t v179 = *(int32x4_t *)(v176 + 48);
            int32x4_t v180 = vuzp2q_s32(*(int32x4_t *)v176, v18);
            int32x4_t v243 = vuzp1q_s32(*(int32x4_t *)v176, v18);
            int32x4_t v245 = v180;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v178, v179);
            int32x4_t v17 = vuzp2q_s32(v178, v179);
            int16x8_t v247 = v16;
            int32x4_t v249 = v17;
          }
          else if (v177 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v176);
            int32x4_t v243 = (int32x4_t)v16;
            int32x4_t v245 = (int32x4_t)v16;
            int16x8_t v247 = v16;
            int32x4_t v249 = (int32x4_t)v16;
          }
          else if (v53[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 32, v176, v177, *(int8x8_t *)v16.i8, *(double *)v17.i64, *(int8x8_t *)v18.i8);
          }
          else
          {
            int32x4_t v243 = 0uLL;
            int32x4_t v245 = 0uLL;
            int16x8_t v247 = 0uLL;
            int32x4_t v249 = 0uLL;
          }
          unint64_t v181 = v213;
          unint64_t v30 = v206;
          if (v213)
          {
            unint64_t v182 = 0;
            int16x4_t v183 = &v218.i8[32 * v211 + 2 * v212];
            unsigned int v184 = v214;
            do
            {
              if (v184)
              {
                uint64_t v185 = 0;
                uint64_t v186 = v209 + v210 * v182;
                do
                {
                  *(unsigned char *)(v186 + v185) = v183[v185];
                  ++v185;
                  unsigned int v184 = v214;
                }
                while (2 * (unint64_t)v214 > v185);
                unint64_t v181 = v213;
              }
              ++v182;
              v183 += 32;
            }
            while (v182 < v181);
          }
LABEL_28:
          unint64_t v29 = v30;
        }
        while (v30 != (v195 >> 4) + 1);
        ++v19;
      }
      while (v19 != v187);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v160[14] = *MEMORY[0x263EF8340];
  size_t v126 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v125 = a8 + a10 - 1;
  unsigned int v20 = v125 >> 4;
  uint64_t v140 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v132 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v131 = a7 + a9 - 1;
    if (a7 >> 4 <= v131 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v124 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v123 = ((a6 - 1) & 0xF) + 1;
      uint64_t v128 = 8 * a11;
      uint64_t v129 = 4 * a11;
      uint64_t v122 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v137) {
          unsigned int v28 = v137;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v125 < v27) {
          unsigned int v27 = v125;
        }
        int v130 = v28 - 16 * v19;
        int v136 = v27 - v28 + 1;
        int v29 = v123;
        if (v19 != v124) {
          int v29 = 16;
        }
        unsigned int v141 = v29;
        uint64_t v135 = a2 + (v28 - v137) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v131 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v139) {
            unsigned int v36 = v138;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v137 && v31 >= a7)
          {
            int v38 = v138;
            if (v30 != v139) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v136 != v141;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_69:
              unint64_t v47 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_69;
            }
          }
          int v46 = 0;
          unint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            BOOL v51 = !v48;
            if (v48)
            {
              unint64_t v52 = ((unint64_t)(v50 & v30) << v46) | v47;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v52 = v47;
            }
            if (!v51) {
              ++v46;
            }
            --v45;
            if (v49)
            {
              unint64_t v47 = ((unint64_t)(v50 & v19) << v46) | v52;
            }
            else
            {
              unsigned int v45 = 0;
              unint64_t v47 = v52;
            }
            if (v49) {
              ++v46;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_70:
          long long v53 = (unsigned char *)(a3 + v19 * v126 + 384 * v30);
          if (v132)
          {
            memcpy(__dst, v53, sizeof(__dst));
            uint64_t result = v140;
            long long v53 = __dst;
          }
          long long v54 = (unsigned __int8 *)(a4 + 8 * v47);
          uint64_t v55 = v135 + 2 * (v34 - a7);
          char v56 = v36 < 0x10 || v37;
          if ((v56 & 1) != 0 || v141 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v53;
            char v150 = v36;
            char v151 = v141;
            int v146 = v130;
            int v147 = v34 - v31;
            block[6] = v54;
            uint64_t v144 = v135 + 2 * (v34 - a7);
            uint64_t v145 = a11;
            unsigned int v148 = v136;
            unsigned int v149 = v35;
            if (v37)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v87 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v88 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v153, 32, (uint64_t)v53, *v54, v87, v16, v17, v18)];
              uint64_t v92 = v88
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v154, 32, v88, v54[1], v87, v89, v90, v91);
              uint64_t v96 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v155, 32, v92, v54[2], v87, v93, v94, v95);
              uint64_t v100 = v96
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v156, 32, v96, v54[3], v87, v97, v98, v99);
              uint64_t v104 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v157, 32, v100, v54[4], v87, v101, v102, v103);
              uint64_t v108 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v158, 32, v104, v54[5], v87, v105, v106, v107);
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v159, 32, v108, v54[6], v87, v109, v110, v111);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v160, 32, v108 + v112, v54[7], v87, v113, v114, v115);
              unint64_t v116 = v148;
              if (v148)
              {
                unint64_t v117 = 0;
                uint64_t v118 = &v153[32 * v146 + 2 * v147];
                unsigned int v119 = v149;
                do
                {
                  if (v119)
                  {
                    uint64_t v120 = 0;
                    uint64_t v121 = v144 + v145 * v117;
                    do
                    {
                      *(unsigned char *)(v121 + v120) = v118[v120];
                      ++v120;
                      unsigned int v119 = v149;
                    }
                    while (2 * (unint64_t)v149 > v120);
                    unint64_t v116 = v148;
                  }
                  ++v117;
                  v118 += 32;
                }
                while (v117 < v116);
              }
            }
          }
          else
          {
            int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v58 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55, a11, (uint64_t)v53, *v54, v57, v16, v17, v18)];
            uint64_t v62 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55 + 16, a11, v58, v54[1], v57, v59, v60, v61);
            uint64_t v66 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55 + v129, a11, v62, v54[2], v57, v63, v64, v65);
            uint64_t v70 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55 + v129 + 16, a11, v66, v54[3], v57, v67, v68, v69);
            uint64_t v74 = v70
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55 + v128, a11, v70, v54[4], v57, v71, v72, v73);
            uint64_t v78 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v55 + v128 + 16, a11, v74, v54[5], v57, v75, v76, v77);
            uint64_t v79 = v55 + 12 * a11;
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v79, a11, v78, v54[6], v57, v80, v81, v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v79 + 16, a11, v78 + v83, v54[7], v57, v84, v85, v86);
          }
          unint64_t v30 = v32;
          uint64_t result = v140;
        }
        while (v32 != (v131 >> 4) + 1);
        ++v19;
      }
      while (v19 != v122);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v160[14] = *MEMORY[0x263EF8340];
  size_t v126 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v125 = a8 + a10 - 1;
  unsigned int v20 = v125 >> 4;
  uint64_t v140 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v132 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v131 = a7 + a9 - 1;
    if (a7 >> 4 <= v131 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v124 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v123 = ((a6 - 1) & 0xF) + 1;
      uint64_t v128 = 8 * a11;
      uint64_t v129 = 4 * a11;
      uint64_t v122 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v137) {
          unsigned int v28 = v137;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v125 < v27) {
          unsigned int v27 = v125;
        }
        int v130 = v28 - 16 * v19;
        int v136 = v27 - v28 + 1;
        int v29 = v123;
        if (v19 != v124) {
          int v29 = 16;
        }
        unsigned int v141 = v29;
        uint64_t v135 = a2 + (v28 - v137) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v131 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v139) {
            unsigned int v36 = v138;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v137 && v31 >= a7)
          {
            int v38 = v138;
            if (v30 != v139) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v136 != v141;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_69:
              unint64_t v47 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_69;
            }
          }
          int v46 = 0;
          unint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            BOOL v51 = !v48;
            if (v48)
            {
              unint64_t v52 = ((unint64_t)(v50 & v30) << v46) | v47;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v52 = v47;
            }
            if (!v51) {
              ++v46;
            }
            --v45;
            if (v49)
            {
              unint64_t v47 = ((unint64_t)(v50 & v19) << v46) | v52;
            }
            else
            {
              unsigned int v45 = 0;
              unint64_t v47 = v52;
            }
            if (v49) {
              ++v46;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_70:
          long long v53 = (unsigned char *)(a3 + v19 * v126 + (v30 << 8));
          if (v132)
          {
            memcpy(__dst, v53, sizeof(__dst));
            uint64_t result = v140;
            long long v53 = __dst;
          }
          long long v54 = (unsigned __int8 *)(a4 + 8 * v47);
          uint64_t v55 = v135 + 2 * (v34 - a7);
          char v56 = v36 < 0x10 || v37;
          if ((v56 & 1) != 0 || v141 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v53;
            char v150 = v36;
            char v151 = v141;
            int v146 = v130;
            int v147 = v34 - v31;
            block[6] = v54;
            uint64_t v144 = v135 + 2 * (v34 - a7);
            uint64_t v145 = a11;
            unsigned int v148 = v136;
            unsigned int v149 = v35;
            if (v37)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v87 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v88 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v153, 32, (uint64_t)v53, *v54, v87, v16, v17, v18)];
              uint64_t v92 = v88
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v154, 32, v88, v54[1], v87, v89, v90, v91);
              uint64_t v96 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v155, 32, v92, v54[2], v87, v93, v94, v95);
              uint64_t v100 = v96
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v156, 32, v96, v54[3], v87, v97, v98, v99);
              uint64_t v104 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v157, 32, v100, v54[4], v87, v101, v102, v103);
              uint64_t v108 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v158, 32, v104, v54[5], v87, v105, v106, v107);
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v159, 32, v108, v54[6], v87, v109, v110, v111);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v160, 32, v108 + v112, v54[7], v87, v113, v114, v115);
              unint64_t v116 = v148;
              if (v148)
              {
                unint64_t v117 = 0;
                uint64_t v118 = &v153[32 * v146 + 2 * v147];
                unsigned int v119 = v149;
                do
                {
                  if (v119)
                  {
                    uint64_t v120 = 0;
                    uint64_t v121 = v144 + v145 * v117;
                    do
                    {
                      *(unsigned char *)(v121 + v120) = v118[v120];
                      ++v120;
                      unsigned int v119 = v149;
                    }
                    while (2 * (unint64_t)v149 > v120);
                    unint64_t v116 = v148;
                  }
                  ++v117;
                  v118 += 32;
                }
                while (v117 < v116);
              }
            }
          }
          else
          {
            int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v58 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55, a11, (uint64_t)v53, *v54, v57, v16, v17, v18)];
            uint64_t v62 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55 + 16, a11, v58, v54[1], v57, v59, v60, v61);
            uint64_t v66 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55 + v129, a11, v62, v54[2], v57, v63, v64, v65);
            uint64_t v70 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55 + v129 + 16, a11, v66, v54[3], v57, v67, v68, v69);
            uint64_t v74 = v70
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55 + v128, a11, v70, v54[4], v57, v71, v72, v73);
            uint64_t v78 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v55 + v128 + 16, a11, v74, v54[5], v57, v75, v76, v77);
            uint64_t v79 = v55 + 12 * a11;
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v79, a11, v78, v54[6], v57, v80, v81, v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v79 + 16, a11, v78 + v83, v54[7], v57, v84, v85, v86);
          }
          unint64_t v30 = v32;
          uint64_t result = v140;
        }
        while (v32 != (v131 >> 4) + 1);
        ++v19;
      }
      while (v19 != v122);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v160[14] = *MEMORY[0x263EF8340];
  size_t v126 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v137 = a8;
  uint64_t v19 = a8 >> 4;
  unsigned int v125 = a8 + a10 - 1;
  unsigned int v20 = v125 >> 4;
  uint64_t v140 = a1;
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v132 = v25;
  uint64_t result = a1;
  if (v19 <= v20)
  {
    unsigned int v131 = a7 + a9 - 1;
    if (a7 >> 4 <= v131 >> 4)
    {
      uint64_t v139 = (a5 - 1) >> 4;
      uint64_t v124 = (a6 - 1) >> 4;
      int v138 = ((a5 - 1) & 0xF) + 1;
      int v123 = ((a6 - 1) & 0xF) + 1;
      uint64_t v128 = 8 * a11;
      uint64_t v129 = 4 * a11;
      uint64_t v122 = v20 + 1;
      do
      {
        unsigned int v27 = (16 * v19) | 0xF;
        if (16 * (int)v19 <= v137) {
          unsigned int v28 = v137;
        }
        else {
          unsigned int v28 = 16 * v19;
        }
        if (v125 < v27) {
          unsigned int v27 = v125;
        }
        int v130 = v28 - 16 * v19;
        int v136 = v27 - v28 + 1;
        int v29 = v123;
        if (v19 != v124) {
          int v29 = 16;
        }
        unsigned int v141 = v29;
        uint64_t v135 = a2 + (v28 - v137) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v31 = 16 * v30;
          unint64_t v32 = v30 + 1;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v131 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v139) {
            unsigned int v36 = v138;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v19 >= v137 && v31 >= a7)
          {
            int v38 = v138;
            if (v30 != v139) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v136 != v141;
          }
          unsigned int v40 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_69:
              unint64_t v47 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_69;
            }
          }
          int v46 = 0;
          unint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            BOOL v51 = !v48;
            if (v48)
            {
              unint64_t v52 = ((unint64_t)(v50 & v30) << v46) | v47;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v52 = v47;
            }
            if (!v51) {
              ++v46;
            }
            --v45;
            if (v49)
            {
              unint64_t v47 = ((unint64_t)(v50 & v19) << v46) | v52;
            }
            else
            {
              unsigned int v45 = 0;
              unint64_t v47 = v52;
            }
            if (v49) {
              ++v46;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_70:
          long long v53 = (unsigned char *)(a3 + v19 * v126 + (v30 << 8));
          if (v132)
          {
            memcpy(__dst, v53, sizeof(__dst));
            uint64_t result = v140;
            long long v53 = __dst;
          }
          long long v54 = (unsigned __int8 *)(a4 + 8 * v47);
          uint64_t v55 = v135 + 2 * (v34 - a7);
          char v56 = v36 < 0x10 || v37;
          if ((v56 & 1) != 0 || v141 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v53;
            char v150 = v36;
            char v151 = v141;
            int v146 = v130;
            int v147 = v34 - v31;
            block[6] = v54;
            uint64_t v144 = v135 + 2 * (v34 - a7);
            uint64_t v145 = a11;
            unsigned int v148 = v136;
            unsigned int v149 = v35;
            if (v37)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v87 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v88 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v153, 32, (uint64_t)v53, *v54, v87, v16, v17, v18)];
              uint64_t v92 = v88
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 32, v88, v54[1], v87, v89, v90, v91);
              uint64_t v96 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 32, v92, v54[2], v87, v93, v94, v95);
              uint64_t v100 = v96
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 32, v96, v54[3], v87, v97, v98, v99);
              uint64_t v104 = v100
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v157, 32, v100, v54[4], v87, v101, v102, v103);
              uint64_t v108 = v104
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v158, 32, v104, v54[5], v87, v105, v106, v107);
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v159, 32, v108, v54[6], v87, v109, v110, v111);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v160, 32, v108 + v112, v54[7], v87, v113, v114, v115);
              unint64_t v116 = v148;
              if (v148)
              {
                unint64_t v117 = 0;
                uint64_t v118 = &v153[32 * v146 + 2 * v147];
                unsigned int v119 = v149;
                do
                {
                  if (v119)
                  {
                    uint64_t v120 = 0;
                    uint64_t v121 = v144 + v145 * v117;
                    do
                    {
                      *(unsigned char *)(v121 + v120) = v118[v120];
                      ++v120;
                      unsigned int v119 = v149;
                    }
                    while (2 * (unint64_t)v149 > v120);
                    unint64_t v116 = v148;
                  }
                  ++v117;
                  v118 += 32;
                }
                while (v117 < v116);
              }
            }
          }
          else
          {
            int v57 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v58 = (uint64_t)&v53[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55, a11, (uint64_t)v53, *v54, v57, v16, v17, v18)];
            uint64_t v62 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55 + 16, a11, v58, v54[1], v57, v59, v60, v61);
            uint64_t v66 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55 + v129, a11, v62, v54[2], v57, v63, v64, v65);
            uint64_t v70 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55 + v129 + 16, a11, v66, v54[3], v57, v67, v68, v69);
            uint64_t v74 = v70
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55 + v128, a11, v70, v54[4], v57, v71, v72, v73);
            uint64_t v78 = v74
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v55 + v128 + 16, a11, v74, v54[5], v57, v75, v76, v77);
            uint64_t v79 = v55 + 12 * a11;
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v79, a11, v78, v54[6], v57, v80, v81, v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v79 + 16, a11, v78 + v83, v54[7], v57, v84, v85, v86);
          }
          unint64_t v30 = v32;
          uint64_t result = v140;
        }
        while (v32 != (v131 >> 4) + 1);
        ++v19;
      }
      while (v19 != v122);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  size_t v78 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v90 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v77 = a8 + a10 - 1;
  unsigned int v17 = v77 >> 4;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v85 = v22;
  if (v16 <= v17)
  {
    unsigned int v84 = a7 + a9 - 1;
    if (a7 >> 4 <= v84 >> 4)
    {
      uint64_t v92 = (a5 - 1) >> 4;
      uint64_t v76 = (a6 - 1) >> 4;
      int v91 = ((a5 - 1) & 0xF) + 1;
      int v75 = ((a6 - 1) & 0xF) + 1;
      uint64_t v80 = 8 * a11;
      uint64_t v81 = 4 * a11;
      uint64_t v74 = v17 + 1;
      uint64_t v83 = v15;
      do
      {
        unsigned int v23 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v90) {
          unsigned int v24 = v90;
        }
        else {
          unsigned int v24 = 16 * v16;
        }
        if (v77 < v23) {
          unsigned int v23 = v77;
        }
        unsigned int v82 = v24 - 16 * v16;
        int v89 = v23 - v24 + 1;
        int v25 = v75;
        if (v16 != v76) {
          int v25 = 16;
        }
        unsigned int v93 = v25;
        uint64_t v88 = a2 + (v24 - v90) * a11;
        unint64_t v26 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v27 = 16 * v26;
          unint64_t v28 = v26 + 1;
          unsigned int v29 = 16 * (v26 + 1) - 1;
          if (16 * (int)v26 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 16 * v26;
          }
          if (v84 < v29) {
            unsigned int v29 = a7 + a9 - 1;
          }
          int v31 = v29 - v30 + 1;
          if (v26 == v92) {
            unsigned int v32 = v91;
          }
          else {
            unsigned int v32 = 16;
          }
          BOOL v33 = 1;
          if (16 * (int)v16 >= v90 && v27 >= a7)
          {
            int v34 = v91;
            if (v26 != v92) {
              int v34 = 16;
            }
            BOOL v33 = v31 != v34 || v89 != v93;
          }
          unsigned int v36 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 15;
          if (v37 < 0x20) {
            unsigned int v38 = 0;
          }
          else {
            unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 4) - 1)));
          }
          unsigned int v39 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20)
          {
            unsigned int v41 = 0;
            if (!v38)
            {
LABEL_69:
              unint64_t v43 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
            if (!(v41 | v38)) {
              goto LABEL_69;
            }
          }
          int v42 = 0;
          unint64_t v43 = 0;
          BOOL v44 = v38 != 0;
          BOOL v45 = v41 != 0;
          int v46 = 1;
          do
          {
            --v38;
            BOOL v47 = !v44;
            if (v44)
            {
              unint64_t v48 = ((unint64_t)(v46 & v26) << v42) | v43;
            }
            else
            {
              unsigned int v38 = 0;
              unint64_t v48 = v43;
            }
            if (!v47) {
              ++v42;
            }
            --v41;
            if (v45)
            {
              unint64_t v43 = ((unint64_t)(v46 & v16) << v42) | v48;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v43 = v48;
            }
            if (v45) {
              ++v42;
            }
            v46 *= 2;
            --v42;
            BOOL v45 = v41 != 0;
            BOOL v44 = v38 != 0;
          }
          while (v41 | v38);
LABEL_70:
          BOOL v49 = (int64x2_t *)(a3 + v16 * v78 + (v26 << 10));
          if (v85)
          {
            memcpy(__dst, v49, sizeof(__dst));
            BOOL v49 = (int64x2_t *)__dst;
          }
          int v50 = (unsigned __int8 *)(a4 + 8 * v43);
          BOOL v51 = (int64x2_t *)(v88 + 4 * (v30 - a7));
          char v52 = v32 < 0x10 || v33;
          if ((v52 & 1) != 0 || v93 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v83;
            block[5] = v49;
            char v102 = v32;
            char v103 = v93;
            unsigned int v98 = v82;
            int v99 = v30 - v27;
            block[6] = v50;
            uint64_t v96 = v88 + 4 * (v30 - a7);
            uint64_t v97 = a11;
            unsigned int v100 = v89;
            unsigned int v101 = v31;
            if (v33)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v83 + 8) + 7384), block);
              uint64_t v15 = v83;
            }
            else
            {
              int8x8_t v61 = (int64x2_t *)((char *)v49
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v105, 64, v49, *v50));
              uint64_t v62 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v106, 64, v61, v50[1]));
              int8x8_t v63 = (int64x2_t *)((char *)v62
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v107, 64, v62, v50[2]));
              double v64 = (int64x2_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v108, 64, v63, v50[3]));
              int8x8_t v65 = (int64x2_t *)((char *)v64
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v109, 64, v64, v50[4]));
              uint64_t v66 = (int64x2_t *)((char *)v65
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v110, 64, v65, v50[5]));
              uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v111, 64, v66, v50[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v112, 64, (int64x2_t *)((char *)v66 + v67), v50[7]);
              unint64_t v68 = v100;
              uint64_t v15 = v83;
              if (v100)
              {
                unint64_t v69 = 0;
                uint64_t v70 = &v105[4 * (unint64_t)v98].i8[4 * v99];
                unsigned int v71 = v101;
                do
                {
                  if (v71)
                  {
                    uint64_t v72 = 0;
                    uint64_t v73 = v96 + v97 * v69;
                    do
                    {
                      *(unsigned char *)(v73 + v72) = v70[v72];
                      ++v72;
                      unsigned int v71 = v101;
                    }
                    while (4 * (unint64_t)v101 > v72);
                    unint64_t v68 = v100;
                  }
                  ++v69;
                  v70 += 64;
                }
                while (v69 < v68);
              }
            }
          }
          else
          {
            long long v53 = (int64x2_t *)((char *)v49
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v51, a11, v49, *v50));
            long long v54 = (int64x2_t *)((char *)v53
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v51 + 2, a11, v53, v50[1]));
            uint64_t v55 = (int64x2_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81), a11, v54, v50[2]));
            char v56 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81 + 32), a11, v55, v50[3]));
            int v57 = (int64x2_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80), a11, v56, v50[4]));
            uint64_t v58 = (int64x2_t *)((char *)v57
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80 + 32), a11, v57, v50[5]));
            int8x8_t v59 = (int64x2_t *)((char *)v51 + 12 * a11);
            uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, v58, v50[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59 + 2, a11, (int64x2_t *)((char *)v58 + v60), v50[7]);
            uint64_t v15 = v83;
          }
          unint64_t v26 = v28;
        }
        while (v28 != (v84 >> 4) + 1);
        ++v16;
      }
      while (v16 != v74);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  size_t v78 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v90 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v77 = a8 + a10 - 1;
  unsigned int v17 = v77 >> 4;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v85 = v22;
  if (v16 <= v17)
  {
    unsigned int v84 = a7 + a9 - 1;
    if (a7 >> 4 <= v84 >> 4)
    {
      uint64_t v92 = (a5 - 1) >> 4;
      uint64_t v76 = (a6 - 1) >> 4;
      int v91 = ((a5 - 1) & 0xF) + 1;
      int v75 = ((a6 - 1) & 0xF) + 1;
      uint64_t v80 = 8 * a11;
      uint64_t v81 = 4 * a11;
      uint64_t v74 = v17 + 1;
      uint64_t v83 = v15;
      do
      {
        unsigned int v23 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v90) {
          unsigned int v24 = v90;
        }
        else {
          unsigned int v24 = 16 * v16;
        }
        if (v77 < v23) {
          unsigned int v23 = v77;
        }
        unsigned int v82 = v24 - 16 * v16;
        int v89 = v23 - v24 + 1;
        int v25 = v75;
        if (v16 != v76) {
          int v25 = 16;
        }
        unsigned int v93 = v25;
        uint64_t v88 = a2 + (v24 - v90) * a11;
        unint64_t v26 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v27 = 16 * v26;
          unint64_t v28 = v26 + 1;
          unsigned int v29 = 16 * (v26 + 1) - 1;
          if (16 * (int)v26 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 16 * v26;
          }
          if (v84 < v29) {
            unsigned int v29 = a7 + a9 - 1;
          }
          int v31 = v29 - v30 + 1;
          if (v26 == v92) {
            unsigned int v32 = v91;
          }
          else {
            unsigned int v32 = 16;
          }
          BOOL v33 = 1;
          if (16 * (int)v16 >= v90 && v27 >= a7)
          {
            int v34 = v91;
            if (v26 != v92) {
              int v34 = 16;
            }
            BOOL v33 = v31 != v34 || v89 != v93;
          }
          unsigned int v36 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 15;
          if (v37 < 0x20) {
            unsigned int v38 = 0;
          }
          else {
            unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 4) - 1)));
          }
          unsigned int v39 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20)
          {
            unsigned int v41 = 0;
            if (!v38)
            {
LABEL_69:
              unint64_t v43 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
            if (!(v41 | v38)) {
              goto LABEL_69;
            }
          }
          int v42 = 0;
          unint64_t v43 = 0;
          BOOL v44 = v38 != 0;
          BOOL v45 = v41 != 0;
          int v46 = 1;
          do
          {
            --v38;
            BOOL v47 = !v44;
            if (v44)
            {
              unint64_t v48 = ((unint64_t)(v46 & v26) << v42) | v43;
            }
            else
            {
              unsigned int v38 = 0;
              unint64_t v48 = v43;
            }
            if (!v47) {
              ++v42;
            }
            --v41;
            if (v45)
            {
              unint64_t v43 = ((unint64_t)(v46 & v16) << v42) | v48;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v43 = v48;
            }
            if (v45) {
              ++v42;
            }
            v46 *= 2;
            --v42;
            BOOL v45 = v41 != 0;
            BOOL v44 = v38 != 0;
          }
          while (v41 | v38);
LABEL_70:
          BOOL v49 = (int64x2_t *)(a3 + v16 * v78 + (v26 << 10));
          if (v85)
          {
            memcpy(__dst, v49, sizeof(__dst));
            BOOL v49 = (int64x2_t *)__dst;
          }
          int v50 = (unsigned __int8 *)(a4 + 8 * v43);
          BOOL v51 = (int64x2_t *)(v88 + 4 * (v30 - a7));
          char v52 = v32 < 0x10 || v33;
          if ((v52 & 1) != 0 || v93 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v83;
            block[5] = v49;
            char v102 = v32;
            char v103 = v93;
            unsigned int v98 = v82;
            int v99 = v30 - v27;
            block[6] = v50;
            uint64_t v96 = v88 + 4 * (v30 - a7);
            uint64_t v97 = a11;
            unsigned int v100 = v89;
            unsigned int v101 = v31;
            if (v33)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v83 + 8) + 7384), block);
              uint64_t v15 = v83;
            }
            else
            {
              int8x8_t v61 = (int64x2_t *)((char *)v49
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v105, 64, v49, *v50));
              uint64_t v62 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v106, 64, v61, v50[1]));
              int8x8_t v63 = (int64x2_t *)((char *)v62
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v107, 64, v62, v50[2]));
              double v64 = (int64x2_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v108, 64, v63, v50[3]));
              int8x8_t v65 = (int64x2_t *)((char *)v64
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v109, 64, v64, v50[4]));
              uint64_t v66 = (int64x2_t *)((char *)v65
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v110, 64, v65, v50[5]));
              uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v111, 64, v66, v50[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v112, 64, (int64x2_t *)((char *)v66 + v67), v50[7]);
              unint64_t v68 = v100;
              uint64_t v15 = v83;
              if (v100)
              {
                unint64_t v69 = 0;
                uint64_t v70 = &v105[4 * (unint64_t)v98].i8[4 * v99];
                unsigned int v71 = v101;
                do
                {
                  if (v71)
                  {
                    uint64_t v72 = 0;
                    uint64_t v73 = v96 + v97 * v69;
                    do
                    {
                      *(unsigned char *)(v73 + v72) = v70[v72];
                      ++v72;
                      unsigned int v71 = v101;
                    }
                    while (4 * (unint64_t)v101 > v72);
                    unint64_t v68 = v100;
                  }
                  ++v69;
                  v70 += 64;
                }
                while (v69 < v68);
              }
            }
          }
          else
          {
            long long v53 = (int64x2_t *)((char *)v49
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v51, a11, v49, *v50));
            long long v54 = (int64x2_t *)((char *)v53
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v51 + 2, a11, v53, v50[1]));
            uint64_t v55 = (int64x2_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81), a11, v54, v50[2]));
            char v56 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81 + 32), a11, v55, v50[3]));
            int v57 = (int64x2_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80), a11, v56, v50[4]));
            uint64_t v58 = (int64x2_t *)((char *)v57
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80 + 32), a11, v57, v50[5]));
            int8x8_t v59 = (int64x2_t *)((char *)v51 + 12 * a11);
            uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, v58, v50[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59 + 2, a11, (int64x2_t *)((char *)v58 + v60), v50[7]);
            uint64_t v15 = v83;
          }
          unint64_t v26 = v28;
        }
        while (v28 != (v84 >> 4) + 1);
        ++v16;
      }
      while (v16 != v74);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + 768 * v27);
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v64 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v108, 64, (unint64_t)v50, *v51, v63)];
              unint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v109, 64, v64, v51[1], v63);
              unint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v110, 64, v65, v51[2], v63);
              unint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v111, 64, v66, v51[3], v63);
              unint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v112, 64, v67, v51[4], v63);
              unint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v55 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v52, a11, (unint64_t)v50, *v51, v54)];
            unint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            unint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            unint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            unint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            unint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + 640 * v27);
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v64 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v108, 64, (unint64_t)v50, *v51, v63)];
              unint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v109, 64, v64, v51[1], v63);
              unint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v110, 64, v65, v51[2], v63);
              unint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v111, 64, v66, v51[3], v63);
              unint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v112, 64, v67, v51[4], v63);
              unint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v55 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v52, a11, (unint64_t)v50, *v51, v54)];
            unint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            unint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            unint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            unint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            unint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + (v27 << 9));
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v64 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v108, 64, (unint64_t)v50, *v51, v63)];
              unint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v109, 64, v64, v51[1], v63);
              unint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v110, 64, v65, v51[2], v63);
              unint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v111, 64, v66, v51[3], v63);
              unint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v112, 64, v67, v51[4], v63);
              unint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v55 = (unint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v52, a11, (unint64_t)v50, *v51, v54)];
            unint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            unint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            unint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            unint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            unint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  size_t v78 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v90 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v77 = a8 + a10 - 1;
  unsigned int v17 = v77 >> 4;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v85 = v22;
  if (v16 <= v17)
  {
    unsigned int v84 = a7 + a9 - 1;
    if (a7 >> 4 <= v84 >> 4)
    {
      uint64_t v92 = (a5 - 1) >> 4;
      uint64_t v76 = (a6 - 1) >> 4;
      int v91 = ((a5 - 1) & 0xF) + 1;
      int v75 = ((a6 - 1) & 0xF) + 1;
      uint64_t v80 = 8 * a11;
      uint64_t v81 = 4 * a11;
      uint64_t v74 = v17 + 1;
      uint64_t v83 = v15;
      do
      {
        unsigned int v23 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v90) {
          unsigned int v24 = v90;
        }
        else {
          unsigned int v24 = 16 * v16;
        }
        if (v77 < v23) {
          unsigned int v23 = v77;
        }
        unsigned int v82 = v24 - 16 * v16;
        int v89 = v23 - v24 + 1;
        int v25 = v75;
        if (v16 != v76) {
          int v25 = 16;
        }
        unsigned int v93 = v25;
        uint64_t v88 = a2 + (v24 - v90) * a11;
        unint64_t v26 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v27 = 16 * v26;
          unint64_t v28 = v26 + 1;
          unsigned int v29 = 16 * (v26 + 1) - 1;
          if (16 * (int)v26 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 16 * v26;
          }
          if (v84 < v29) {
            unsigned int v29 = a7 + a9 - 1;
          }
          int v31 = v29 - v30 + 1;
          if (v26 == v92) {
            unsigned int v32 = v91;
          }
          else {
            unsigned int v32 = 16;
          }
          BOOL v33 = 1;
          if (16 * (int)v16 >= v90 && v27 >= a7)
          {
            int v34 = v91;
            if (v26 != v92) {
              int v34 = 16;
            }
            BOOL v33 = v31 != v34 || v89 != v93;
          }
          unsigned int v36 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 15;
          if (v37 < 0x20) {
            unsigned int v38 = 0;
          }
          else {
            unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 4) - 1)));
          }
          unsigned int v39 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20)
          {
            unsigned int v41 = 0;
            if (!v38)
            {
LABEL_69:
              unint64_t v43 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
            if (!(v41 | v38)) {
              goto LABEL_69;
            }
          }
          int v42 = 0;
          unint64_t v43 = 0;
          BOOL v44 = v38 != 0;
          BOOL v45 = v41 != 0;
          int v46 = 1;
          do
          {
            --v38;
            BOOL v47 = !v44;
            if (v44)
            {
              unint64_t v48 = ((unint64_t)(v46 & v26) << v42) | v43;
            }
            else
            {
              unsigned int v38 = 0;
              unint64_t v48 = v43;
            }
            if (!v47) {
              ++v42;
            }
            --v41;
            if (v45)
            {
              unint64_t v43 = ((unint64_t)(v46 & v16) << v42) | v48;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v43 = v48;
            }
            if (v45) {
              ++v42;
            }
            v46 *= 2;
            --v42;
            BOOL v45 = v41 != 0;
            BOOL v44 = v38 != 0;
          }
          while (v41 | v38);
LABEL_70:
          unint64_t v49 = (int64x2_t *)(a3 + v16 * v78 + (v26 << 10));
          if (v85)
          {
            memcpy(__dst, v49, sizeof(__dst));
            unint64_t v49 = (int64x2_t *)__dst;
          }
          int v50 = (unsigned __int8 *)(a4 + 8 * v43);
          BOOL v51 = (int64x2_t *)(v88 + 4 * (v30 - a7));
          char v52 = v32 < 0x10 || v33;
          if ((v52 & 1) != 0 || v93 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v83;
            block[5] = v49;
            char v102 = v32;
            char v103 = v93;
            unsigned int v98 = v82;
            int v99 = v30 - v27;
            block[6] = v50;
            uint64_t v96 = v88 + 4 * (v30 - a7);
            uint64_t v97 = a11;
            unsigned int v100 = v89;
            unsigned int v101 = v31;
            if (v33)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v83 + 8) + 7384), block);
              uint64_t v15 = v83;
            }
            else
            {
              int8x8_t v61 = (int64x2_t *)((char *)v49
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v105, 64, v49, *v50));
              uint64_t v62 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v106, 64, v61, v50[1]));
              int v63 = (int64x2_t *)((char *)v62
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v107, 64, v62, v50[2]));
              unint64_t v64 = (int64x2_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v108, 64, v63, v50[3]));
              unint64_t v65 = (int64x2_t *)((char *)v64
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v109, 64, v64, v50[4]));
              unint64_t v66 = (int64x2_t *)((char *)v65
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v110, 64, v65, v50[5]));
              uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v111, 64, v66, v50[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v112, 64, (int64x2_t *)((char *)v66 + v67), v50[7]);
              unint64_t v68 = v100;
              uint64_t v15 = v83;
              if (v100)
              {
                unint64_t v69 = 0;
                uint64_t v70 = &v105[4 * (unint64_t)v98].i8[4 * v99];
                unsigned int v71 = v101;
                do
                {
                  if (v71)
                  {
                    uint64_t v72 = 0;
                    uint64_t v73 = v96 + v97 * v69;
                    do
                    {
                      *(unsigned char *)(v73 + v72) = v70[v72];
                      ++v72;
                      unsigned int v71 = v101;
                    }
                    while (4 * (unint64_t)v101 > v72);
                    unint64_t v68 = v100;
                  }
                  ++v69;
                  v70 += 64;
                }
                while (v69 < v68);
              }
            }
          }
          else
          {
            char v53 = (int64x2_t *)((char *)v49
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v51, a11, v49, *v50));
            int v54 = (int64x2_t *)((char *)v53
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v51 + 2, a11, v53, v50[1]));
            unint64_t v55 = (int64x2_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81), a11, v54, v50[2]));
            unint64_t v56 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81 + 32), a11, v55, v50[3]));
            unint64_t v57 = (int64x2_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80), a11, v56, v50[4]));
            unint64_t v58 = (int64x2_t *)((char *)v57
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80 + 32), a11, v57, v50[5]));
            unint64_t v59 = (int64x2_t *)((char *)v51 + 12 * a11);
            uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, v58, v50[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59 + 2, a11, (int64x2_t *)((char *)v58 + v60), v50[7]);
            uint64_t v15 = v83;
          }
          unint64_t v26 = v28;
        }
        while (v28 != (v84 >> 4) + 1);
        ++v16;
      }
      while (v16 != v74);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v113 = *MEMORY[0x263EF8340];
  size_t v78 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v90 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v77 = a8 + a10 - 1;
  unsigned int v17 = v77 >> 4;
  if (*(void *)(v15 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v85 = v22;
  if (v16 <= v17)
  {
    unsigned int v84 = a7 + a9 - 1;
    if (a7 >> 4 <= v84 >> 4)
    {
      uint64_t v92 = (a5 - 1) >> 4;
      uint64_t v76 = (a6 - 1) >> 4;
      int v91 = ((a5 - 1) & 0xF) + 1;
      int v75 = ((a6 - 1) & 0xF) + 1;
      uint64_t v80 = 8 * a11;
      uint64_t v81 = 4 * a11;
      uint64_t v74 = v17 + 1;
      uint64_t v83 = v15;
      do
      {
        unsigned int v23 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v90) {
          unsigned int v24 = v90;
        }
        else {
          unsigned int v24 = 16 * v16;
        }
        if (v77 < v23) {
          unsigned int v23 = v77;
        }
        unsigned int v82 = v24 - 16 * v16;
        int v89 = v23 - v24 + 1;
        int v25 = v75;
        if (v16 != v76) {
          int v25 = 16;
        }
        unsigned int v93 = v25;
        uint64_t v88 = a2 + (v24 - v90) * a11;
        unint64_t v26 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v27 = 16 * v26;
          unint64_t v28 = v26 + 1;
          unsigned int v29 = 16 * (v26 + 1) - 1;
          if (16 * (int)v26 <= a7) {
            unsigned int v30 = a7;
          }
          else {
            unsigned int v30 = 16 * v26;
          }
          if (v84 < v29) {
            unsigned int v29 = a7 + a9 - 1;
          }
          int v31 = v29 - v30 + 1;
          if (v26 == v92) {
            unsigned int v32 = v91;
          }
          else {
            unsigned int v32 = 16;
          }
          BOOL v33 = 1;
          if (16 * (int)v16 >= v90 && v27 >= a7)
          {
            int v34 = v91;
            if (v26 != v92) {
              int v34 = 16;
            }
            BOOL v33 = v31 != v34 || v89 != v93;
          }
          unsigned int v36 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v36 <= 1) {
            unsigned int v36 = 1;
          }
          unsigned int v37 = v36 + 15;
          if (v37 < 0x20) {
            unsigned int v38 = 0;
          }
          else {
            unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz((v37 >> 4) - 1)));
          }
          unsigned int v39 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20)
          {
            unsigned int v41 = 0;
            if (!v38)
            {
LABEL_69:
              unint64_t v43 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
            if (!(v41 | v38)) {
              goto LABEL_69;
            }
          }
          int v42 = 0;
          unint64_t v43 = 0;
          BOOL v44 = v38 != 0;
          BOOL v45 = v41 != 0;
          int v46 = 1;
          do
          {
            --v38;
            BOOL v47 = !v44;
            if (v44)
            {
              unint64_t v48 = ((unint64_t)(v46 & v26) << v42) | v43;
            }
            else
            {
              unsigned int v38 = 0;
              unint64_t v48 = v43;
            }
            if (!v47) {
              ++v42;
            }
            --v41;
            if (v45)
            {
              unint64_t v43 = ((unint64_t)(v46 & v16) << v42) | v48;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v43 = v48;
            }
            if (v45) {
              ++v42;
            }
            v46 *= 2;
            --v42;
            BOOL v45 = v41 != 0;
            BOOL v44 = v38 != 0;
          }
          while (v41 | v38);
LABEL_70:
          unint64_t v49 = (int64x2_t *)(a3 + v16 * v78 + (v26 << 10));
          if (v85)
          {
            memcpy(__dst, v49, sizeof(__dst));
            unint64_t v49 = (int64x2_t *)__dst;
          }
          int v50 = (unsigned __int8 *)(a4 + 8 * v43);
          BOOL v51 = (int64x2_t *)(v88 + 4 * (v30 - a7));
          char v52 = v32 < 0x10 || v33;
          if ((v52 & 1) != 0 || v93 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v83;
            block[5] = v49;
            char v102 = v32;
            char v103 = v93;
            unsigned int v98 = v82;
            int v99 = v30 - v27;
            block[6] = v50;
            uint64_t v96 = v88 + 4 * (v30 - a7);
            uint64_t v97 = a11;
            unsigned int v100 = v89;
            unsigned int v101 = v31;
            if (v33)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v83 + 8) + 7384), block);
              uint64_t v15 = v83;
            }
            else
            {
              int8x8_t v61 = (int64x2_t *)((char *)v49
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v105, 64, v49, *v50));
              uint64_t v62 = (int64x2_t *)((char *)v61
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v106, 64, v61, v50[1]));
              int v63 = (int64x2_t *)((char *)v62
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v107, 64, v62, v50[2]));
              unint64_t v64 = (int64x2_t *)((char *)v63
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v108, 64, v63, v50[3]));
              unint64_t v65 = (int64x2_t *)((char *)v64
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v109, 64, v64, v50[4]));
              unint64_t v66 = (int64x2_t *)((char *)v65
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v110, 64, v65, v50[5]));
              uint64_t v67 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v111, 64, v66, v50[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v112, 64, (int64x2_t *)((char *)v66 + v67), v50[7]);
              unint64_t v68 = v100;
              uint64_t v15 = v83;
              if (v100)
              {
                unint64_t v69 = 0;
                uint64_t v70 = &v105[4 * (unint64_t)v98].i8[4 * v99];
                unsigned int v71 = v101;
                do
                {
                  if (v71)
                  {
                    uint64_t v72 = 0;
                    uint64_t v73 = v96 + v97 * v69;
                    do
                    {
                      *(unsigned char *)(v73 + v72) = v70[v72];
                      ++v72;
                      unsigned int v71 = v101;
                    }
                    while (4 * (unint64_t)v101 > v72);
                    unint64_t v68 = v100;
                  }
                  ++v69;
                  v70 += 64;
                }
                while (v69 < v68);
              }
            }
          }
          else
          {
            char v53 = (int64x2_t *)((char *)v49
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v51, a11, v49, *v50));
            int v54 = (int64x2_t *)((char *)v53
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v51 + 2, a11, v53, v50[1]));
            unint64_t v55 = (int64x2_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81), a11, v54, v50[2]));
            unint64_t v56 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v81 + 32), a11, v55, v50[3]));
            unint64_t v57 = (int64x2_t *)((char *)v56
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80), a11, v56, v50[4]));
            unint64_t v58 = (int64x2_t *)((char *)v57
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v51 + v80 + 32), a11, v57, v50[5]));
            unint64_t v59 = (int64x2_t *)((char *)v51 + 12 * a11);
            uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, v58, v50[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59 + 2, a11, (int64x2_t *)((char *)v58 + v60), v50[7]);
            uint64_t v15 = v83;
          }
          unint64_t v26 = v28;
        }
        while (v28 != (v84 >> 4) + 1);
        ++v16;
      }
      while (v16 != v74);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + 896 * v27);
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v64 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v108, 64, (uint64_t)v50, *v51, v63)];
              uint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v109, 64, v64, v51[1], v63);
              uint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v110, 64, v65, v51[2], v63);
              uint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v111, 64, v66, v51[3], v63);
              uint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v112, 64, v67, v51[4], v63);
              uint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v55 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v52, a11, (uint64_t)v50, *v51, v54)];
            uint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            uint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            uint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            uint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            uint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + 640 * v27);
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v64 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v108, 64, (uint64_t)v50, *v51, v63)];
              uint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v109, 64, v64, v51[1], v63);
              uint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v110, 64, v65, v51[2], v63);
              uint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v111, 64, v66, v51[3], v63);
              uint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v112, 64, v67, v51[4], v63);
              uint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v55 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v52, a11, (uint64_t)v50, *v51, v54)];
            uint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            uint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            uint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            uint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            uint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  size_t v81 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v92 = a8;
  uint64_t v16 = a8 >> 4;
  unsigned int v80 = a8 + a10 - 1;
  unsigned int v17 = v80 >> 4;
  uint64_t v95 = a1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  BOOL v19 = (v18 & 0xD00) == 0 || v18 == 768;
  int v20 = v18 & 0xE00;
  int v22 = !v19 && v20 != 1024;
  int v87 = v22;
  uint64_t result = a1;
  if (v16 <= v17)
  {
    unsigned int v86 = a7 + a9 - 1;
    if (a7 >> 4 <= v86 >> 4)
    {
      uint64_t v94 = (a5 - 1) >> 4;
      uint64_t v79 = (a6 - 1) >> 4;
      int v93 = ((a5 - 1) & 0xF) + 1;
      int v78 = ((a6 - 1) & 0xF) + 1;
      uint64_t v83 = 8 * a11;
      uint64_t v84 = 4 * a11;
      uint64_t v77 = v17 + 1;
      do
      {
        unsigned int v24 = (16 * v16) | 0xF;
        if (16 * (int)v16 <= v92) {
          unsigned int v25 = v92;
        }
        else {
          unsigned int v25 = 16 * v16;
        }
        if (v80 < v24) {
          unsigned int v24 = v80;
        }
        unsigned int v85 = v25 - 16 * v16;
        int v91 = v24 - v25 + 1;
        int v26 = v78;
        if (v16 != v79) {
          int v26 = 16;
        }
        unsigned int v96 = v26;
        uint64_t v90 = a2 + (v25 - v92) * a11;
        unint64_t v27 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v28 = 16 * v27;
          unint64_t v29 = v27 + 1;
          unsigned int v30 = 16 * (v27 + 1) - 1;
          if (16 * (int)v27 <= a7) {
            unsigned int v31 = a7;
          }
          else {
            unsigned int v31 = 16 * v27;
          }
          if (v86 < v30) {
            unsigned int v30 = a7 + a9 - 1;
          }
          int v32 = v30 - v31 + 1;
          if (v27 == v94) {
            unsigned int v33 = v93;
          }
          else {
            unsigned int v33 = 16;
          }
          BOOL v34 = 1;
          if (16 * (int)v16 >= v92 && v28 >= a7)
          {
            int v35 = v93;
            if (v27 != v94) {
              int v35 = 16;
            }
            BOOL v34 = v32 != v35 || v91 != v96;
          }
          unsigned int v37 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v37 <= 1) {
            unsigned int v37 = 1;
          }
          unsigned int v38 = v37 + 15;
          if (v38 < 0x20) {
            unsigned int v39 = 0;
          }
          else {
            unsigned int v39 = 32 - __clz(~(-1 << -(char)__clz((v38 >> 4) - 1)));
          }
          unsigned int v40 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20)
          {
            unsigned int v42 = 0;
            if (!v39)
            {
LABEL_69:
              unint64_t v44 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
            if (!(v42 | v39)) {
              goto LABEL_69;
            }
          }
          int v43 = 0;
          unint64_t v44 = 0;
          BOOL v45 = v39 != 0;
          BOOL v46 = v42 != 0;
          int v47 = 1;
          do
          {
            --v39;
            BOOL v48 = !v45;
            if (v45)
            {
              unint64_t v49 = ((unint64_t)(v47 & v27) << v43) | v44;
            }
            else
            {
              unsigned int v39 = 0;
              unint64_t v49 = v44;
            }
            if (!v48) {
              ++v43;
            }
            --v42;
            if (v46)
            {
              unint64_t v44 = ((unint64_t)(v47 & v16) << v43) | v49;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v44 = v49;
            }
            if (v46) {
              ++v43;
            }
            v47 *= 2;
            --v43;
            BOOL v46 = v42 != 0;
            BOOL v45 = v39 != 0;
          }
          while (v42 | v39);
LABEL_70:
          int v50 = (unsigned char *)(a3 + v16 * v81 + (v27 << 9));
          if (v87)
          {
            memcpy(__dst, v50, sizeof(__dst));
            uint64_t result = v95;
            int v50 = __dst;
          }
          BOOL v51 = (unsigned __int8 *)(a4 + 8 * v44);
          char v52 = (float32x4_t *)(v90 + 4 * (v31 - a7));
          char v53 = v33 < 0x10 || v34;
          if ((v53 & 1) != 0 || v96 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v50;
            char v105 = v33;
            char v106 = v96;
            unsigned int v101 = v85;
            int v102 = v31 - v28;
            block[6] = v51;
            uint64_t v99 = v90 + 4 * (v31 - a7);
            uint64_t v100 = a11;
            unsigned int v103 = v91;
            unsigned int v104 = v32;
            if (v34)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v63 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v64 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v108, 64, (uint64_t)v50, *v51, v63)];
              uint64_t v65 = v64
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v109, 64, v64, v51[1], v63);
              uint64_t v66 = v65
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v110, 64, v65, v51[2], v63);
              uint64_t v67 = v66
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v111, 64, v66, v51[3], v63);
              uint64_t v68 = v67
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v112, 64, v67, v51[4], v63);
              uint64_t v69 = v68
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v113, 64, v68, v51[5], v63);
              uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v114, 64, v69, v51[6], v63);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v115, 64, v69 + v70, v51[7], v63);
              unint64_t v71 = v103;
              if (v103)
              {
                unint64_t v72 = 0;
                uint64_t v73 = &v108[4 * (unint64_t)v101].i8[4 * v102];
                unsigned int v74 = v104;
                do
                {
                  if (v74)
                  {
                    uint64_t v75 = 0;
                    uint64_t v76 = v99 + v100 * v72;
                    do
                    {
                      *(unsigned char *)(v76 + v75) = v73[v75];
                      ++v75;
                      unsigned int v74 = v104;
                    }
                    while (4 * (unint64_t)v104 > v75);
                    unint64_t v71 = v103;
                  }
                  ++v72;
                  v73 += 64;
                }
                while (v72 < v71);
              }
            }
          }
          else
          {
            int v54 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v55 = (uint64_t)&v50[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v52, a11, (uint64_t)v50, *v51, v54)];
            uint64_t v56 = v55
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v52 + 2, a11, v55, v51[1], v54);
            uint64_t v57 = v56
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v84), a11, v56, v51[2], v54);
            uint64_t v58 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v84 + 32), a11, v57, v51[3], v54);
            uint64_t v59 = v58
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v83), a11, v58, v51[4], v54);
            uint64_t v60 = v59
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v52 + v83 + 32), a11, v59, v51[5], v54);
            int8x8_t v61 = (float32x4_t *)((char *)v52 + 12 * a11);
            uint64_t v62 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v61, a11, v60, v51[6], v54);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v61 + 2, a11, v60 + v62, v51[7], v54);
          }
          unint64_t v27 = v29;
          uint64_t result = v95;
        }
        while (v29 != (v86 >> 4) + 1);
        ++v16;
      }
      while (v16 != v77);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          BOOL v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            BOOL v51 = (int64x2_t *)__dst;
          }
          char v52 = (unsigned __int8 *)(a4 + 8 * v45);
          char v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              uint64_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              unsigned int v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              unsigned int v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              int v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              unsigned int v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                uint64_t v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            uint64_t v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            uint64_t v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            int8x8_t v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            uint64_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            uint64_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            uint64_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            unint64_t v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          BOOL v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            BOOL v51 = (int64x2_t *)__dst;
          }
          char v52 = (unsigned __int8 *)(a4 + 8 * v45);
          char v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              uint64_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              unsigned int v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              unsigned int v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              int v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              unsigned int v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                uint64_t v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            uint64_t v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            uint64_t v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            int8x8_t v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            uint64_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            uint64_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            uint64_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            unint64_t v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          char v52 = (unsigned char *)(a3 + v18 * v111 + (v29 << 9));
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            char v52 = __dst;
          }
          char v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          char v52 = (unsigned char *)(a3 + v18 * v111 + 384 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            char v52 = __dst;
          }
          char v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          char v52 = (unsigned char *)(a3 + v18 * v111 + 384 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            char v52 = __dst;
          }
          char v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE5ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)5,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v102 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v94 = v20;
  uint64_t v95 = v21;
  uint64_t v87 = v22;
  uint64_t v23 = v12;
  uint64_t v121 = *MEMORY[0x263EF8340];
  size_t v86 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v98 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v85 = v14 + a10 - 1;
  unsigned int v25 = v85 >> 4;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v93 = v30;
  if (v24 <= v25)
  {
    unsigned int v92 = v102 + a9 - 1;
    if (v102 >> 4 <= v92 >> 4)
    {
      uint64_t v100 = (v19 - 1) >> 4;
      uint64_t v84 = (v17 - 1) >> 4;
      int v99 = ((v19 - 1) & 0xF) + 1;
      int v83 = ((v17 - 1) & 0xF) + 1;
      uint64_t v88 = 8 * a11;
      uint64_t v89 = 4 * a11;
      uint64_t v82 = v25 + 1;
      uint64_t v91 = v23;
      do
      {
        unsigned int v31 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v98) {
          unsigned int v32 = v98;
        }
        else {
          unsigned int v32 = 16 * v24;
        }
        if (v85 < v31) {
          unsigned int v31 = v85;
        }
        unsigned int v90 = v32 - 16 * v24;
        int v97 = v31 - v32 + 1;
        int v33 = v83;
        if (v24 != v84) {
          int v33 = 16;
        }
        unsigned int v101 = v33;
        uint64_t v96 = v87 + (v32 - v98) * a11;
        unint64_t v34 = (unint64_t)v102 >> 4;
        do
        {
          unint64_t v35 = 16 * v34;
          unint64_t v36 = v34 + 1;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * (int)v34 <= v102) {
            unsigned int v38 = v102;
          }
          else {
            unsigned int v38 = 16 * v34;
          }
          if (v92 < v37) {
            unsigned int v37 = v102 + a9 - 1;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v100) {
            unsigned int v40 = v99;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (16 * (int)v24 >= v98 && v35 >= v102)
          {
            int v42 = v99;
            if (v34 != v100) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v97 != v101;
          }
          unsigned int v44 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20)
          {
            unsigned int v49 = 0;
            if (!v46)
            {
LABEL_69:
              unint64_t v51 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
            if (!(v49 | v46)) {
              goto LABEL_69;
            }
          }
          int v50 = 0;
          unint64_t v51 = 0;
          BOOL v52 = v46 != 0;
          BOOL v53 = v49 != 0;
          int v54 = 1;
          do
          {
            --v46;
            BOOL v55 = !v52;
            if (v52)
            {
              unint64_t v56 = ((unint64_t)(v54 & v34) << v50) | v51;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v56 = v51;
            }
            if (!v55) {
              ++v50;
            }
            --v49;
            if (v53)
            {
              unint64_t v51 = ((unint64_t)(v54 & v24) << v50) | v56;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v51 = v56;
            }
            if (v53) {
              ++v50;
            }
            v54 *= 2;
            --v50;
            BOOL v53 = v49 != 0;
            BOOL v52 = v46 != 0;
          }
          while (v49 | v46);
LABEL_70:
          uint64_t v57 = (unsigned char *)(v94 + v24 * v86 + (v34 << 11));
          if (v93)
          {
            memcpy(__dst, v57, sizeof(__dst));
            uint64_t v57 = __dst;
          }
          int32x4_t v58 = (unsigned __int8 *)(v95 + 8 * v51);
          int32x4_t v59 = (_OWORD *)(v96 + 8 * (v38 - v102));
          char v60 = v40 < 0x10 || v41;
          if ((v60 & 1) != 0 || v101 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v91;
            block[5] = v57;
            char v110 = v40;
            char v111 = v101;
            unsigned int v106 = v90;
            unsigned int v107 = v38 - v35;
            block[6] = v58;
            uint64_t v104 = v96 + 8 * (v38 - v102);
            uint64_t v105 = a11;
            unsigned int v108 = v97;
            unsigned int v109 = v39;
            if (v41)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v91 + 8) + 7384), block);
              uint64_t v23 = v91;
            }
            else
            {
              uint64_t v69 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v113, 128, (uint64_t)v57, *v58)];
              uint64_t v70 = v69
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v114, 128, v69, v58[1]);
              uint64_t v71 = v70
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v115, 128, v70, v58[2]);
              uint64_t v72 = v71
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v116, 128, v71, v58[3]);
              uint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v117, 128, v72, v58[4]);
              uint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v118, 128, v73, v58[5]);
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v119, 128, v74, v58[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v120, 128, v74 + v75, v58[7]);
              unint64_t v76 = v108;
              uint64_t v23 = v91;
              if (v108)
              {
                unint64_t v77 = 0;
                int32x4_t v78 = (char *)&v113[8 * (unint64_t)v106] + 8 * v107;
                unsigned int v79 = v109;
                do
                {
                  if (v79)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = v104 + v105 * v77;
                    do
                    {
                      *(unsigned char *)(v81 + v80) = v78[v80];
                      ++v80;
                      unsigned int v79 = v109;
                    }
                    while (8 * (unint64_t)v109 > v80);
                    unint64_t v76 = v108;
                  }
                  ++v77;
                  v78 += 128;
                }
                while (v77 < v76);
              }
            }
          }
          else
          {
            uint64_t v61 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, (uint64_t)v57, *v58)];
            uint64_t v62 = v61
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59 + 4, a11, v61, v58[1]);
            uint64_t v63 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v89), a11, v62, v58[2]);
            uint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v89 + 64), a11, v63, v58[3]);
            uint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v88), a11, v64, v58[4]);
            uint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v88 + 64), a11, v65, v58[5]);
            int32x4_t v67 = (_OWORD *)((char *)v59 + 12 * a11);
            uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v67, a11, v66, v58[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v67 + 4, a11, v66 + v68, v58[7]);
            uint64_t v23 = v91;
          }
          unint64_t v34 = v36;
        }
        while (v36 != (v92 >> 4) + 1);
        ++v24;
      }
      while (v24 != v82);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v102 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v94 = v20;
  uint64_t v95 = v21;
  uint64_t v87 = v22;
  uint64_t v23 = v12;
  uint64_t v121 = *MEMORY[0x263EF8340];
  size_t v86 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v98 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v85 = v14 + a10 - 1;
  unsigned int v25 = v85 >> 4;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v93 = v30;
  if (v24 <= v25)
  {
    unsigned int v92 = v102 + a9 - 1;
    if (v102 >> 4 <= v92 >> 4)
    {
      uint64_t v100 = (v19 - 1) >> 4;
      uint64_t v84 = (v17 - 1) >> 4;
      int v99 = ((v19 - 1) & 0xF) + 1;
      int v83 = ((v17 - 1) & 0xF) + 1;
      uint64_t v88 = 8 * a11;
      uint64_t v89 = 4 * a11;
      uint64_t v82 = v25 + 1;
      uint64_t v91 = v23;
      do
      {
        unsigned int v31 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v98) {
          unsigned int v32 = v98;
        }
        else {
          unsigned int v32 = 16 * v24;
        }
        if (v85 < v31) {
          unsigned int v31 = v85;
        }
        unsigned int v90 = v32 - 16 * v24;
        int v97 = v31 - v32 + 1;
        int v33 = v83;
        if (v24 != v84) {
          int v33 = 16;
        }
        unsigned int v101 = v33;
        uint64_t v96 = v87 + (v32 - v98) * a11;
        unint64_t v34 = (unint64_t)v102 >> 4;
        do
        {
          unint64_t v35 = 16 * v34;
          unint64_t v36 = v34 + 1;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * (int)v34 <= v102) {
            unsigned int v38 = v102;
          }
          else {
            unsigned int v38 = 16 * v34;
          }
          if (v92 < v37) {
            unsigned int v37 = v102 + a9 - 1;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v100) {
            unsigned int v40 = v99;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (16 * (int)v24 >= v98 && v35 >= v102)
          {
            int v42 = v99;
            if (v34 != v100) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v97 != v101;
          }
          unsigned int v44 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20)
          {
            unsigned int v49 = 0;
            if (!v46)
            {
LABEL_69:
              unint64_t v51 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
            if (!(v49 | v46)) {
              goto LABEL_69;
            }
          }
          int v50 = 0;
          unint64_t v51 = 0;
          BOOL v52 = v46 != 0;
          BOOL v53 = v49 != 0;
          int v54 = 1;
          do
          {
            --v46;
            BOOL v55 = !v52;
            if (v52)
            {
              unint64_t v56 = ((unint64_t)(v54 & v34) << v50) | v51;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v56 = v51;
            }
            if (!v55) {
              ++v50;
            }
            --v49;
            if (v53)
            {
              unint64_t v51 = ((unint64_t)(v54 & v24) << v50) | v56;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v51 = v56;
            }
            if (v53) {
              ++v50;
            }
            v54 *= 2;
            --v50;
            BOOL v53 = v49 != 0;
            BOOL v52 = v46 != 0;
          }
          while (v49 | v46);
LABEL_70:
          uint64_t v57 = (unsigned char *)(v94 + v24 * v86 + (v34 << 11));
          if (v93)
          {
            memcpy(__dst, v57, sizeof(__dst));
            uint64_t v57 = __dst;
          }
          int32x4_t v58 = (unsigned __int8 *)(v95 + 8 * v51);
          int32x4_t v59 = (_OWORD *)(v96 + 8 * (v38 - v102));
          char v60 = v40 < 0x10 || v41;
          if ((v60 & 1) != 0 || v101 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v91;
            block[5] = v57;
            char v110 = v40;
            char v111 = v101;
            unsigned int v106 = v90;
            unsigned int v107 = v38 - v35;
            block[6] = v58;
            uint64_t v104 = v96 + 8 * (v38 - v102);
            uint64_t v105 = a11;
            unsigned int v108 = v97;
            unsigned int v109 = v39;
            if (v41)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v91 + 8) + 7384), block);
              uint64_t v23 = v91;
            }
            else
            {
              uint64_t v69 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v113, 128, (uint64_t)v57, *v58)];
              uint64_t v70 = v69
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v114, 128, v69, v58[1]);
              uint64_t v71 = v70
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v115, 128, v70, v58[2]);
              uint64_t v72 = v71
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v116, 128, v71, v58[3]);
              uint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v117, 128, v72, v58[4]);
              uint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v118, 128, v73, v58[5]);
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v119, 128, v74, v58[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v120, 128, v74 + v75, v58[7]);
              unint64_t v76 = v108;
              uint64_t v23 = v91;
              if (v108)
              {
                unint64_t v77 = 0;
                int32x4_t v78 = (char *)&v113[8 * (unint64_t)v106] + 8 * v107;
                unsigned int v79 = v109;
                do
                {
                  if (v79)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = v104 + v105 * v77;
                    do
                    {
                      *(unsigned char *)(v81 + v80) = v78[v80];
                      ++v80;
                      unsigned int v79 = v109;
                    }
                    while (8 * (unint64_t)v109 > v80);
                    unint64_t v76 = v108;
                  }
                  ++v77;
                  v78 += 128;
                }
                while (v77 < v76);
              }
            }
          }
          else
          {
            uint64_t v61 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, (uint64_t)v57, *v58)];
            uint64_t v62 = v61
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v59 + 4, a11, v61, v58[1]);
            uint64_t v63 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v89), a11, v62, v58[2]);
            uint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v89 + 64), a11, v63, v58[3]);
            uint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v88), a11, v64, v58[4]);
            uint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock((_OWORD *)((char *)v59 + v88 + 64), a11, v65, v58[5]);
            int32x4_t v67 = (_OWORD *)((char *)v59 + 12 * a11);
            uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v67, a11, v66, v58[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressSubblock(v67 + 4, a11, v66 + v68, v58[7]);
            uint64_t v23 = v91;
          }
          unint64_t v34 = v36;
        }
        while (v36 != (v92 >> 4) + 1);
        ++v24;
      }
      while (v24 != v82);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  uint64_t v124 = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int32x4_t v58 = (unsigned char *)(v96 + v24 * v89 + (v35 << 10));
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int32x4_t v58 = __dst;
          }
          int32x4_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          char v60 = (_OWORD *)(v98 + 8 * (v39 - v105));
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = (char *)&v116[8 * (unint64_t)v109] + 8 * v110;
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v60 + 4, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v60 + v92), a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v60 + v92 + 64), a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v60 + v91), a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v60 + v91 + 64), a11, v67, v59[5], v62);
            uint64_t v69 = (_OWORD *)((char *)v60 + 12 * a11);
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v69 + 4, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  uint64_t v124 = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int32x4_t v58 = (unsigned char *)(v96 + v24 * v89 + 768 * v35);
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int32x4_t v58 = __dst;
          }
          int32x4_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          char v60 = (_OWORD *)(v98 + 8 * (v39 - v105));
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = (char *)&v116[8 * (unint64_t)v109] + 8 * v110;
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + 4, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((_OWORD *)((char *)v60 + v92), a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((_OWORD *)((char *)v60 + v92 + 64), a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((_OWORD *)((char *)v60 + v91), a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((_OWORD *)((char *)v60 + v91 + 64), a11, v67, v59[5], v62);
            uint64_t v69 = (_OWORD *)((char *)v60 + 12 * a11);
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v69 + 4, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  uint64_t v124 = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int32x4_t v58 = (unsigned char *)(v96 + v24 * v89 + 768 * v35);
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int32x4_t v58 = __dst;
          }
          int32x4_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          char v60 = (_OWORD *)(v98 + 8 * (v39 - v105));
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = (char *)&v116[8 * (unint64_t)v109] + 8 * v110;
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + 4, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((_OWORD *)((char *)v60 + v92), a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((_OWORD *)((char *)v60 + v92 + 64), a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((_OWORD *)((char *)v60 + v91), a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((_OWORD *)((char *)v60 + v91 + 64), a11, v67, v59[5], v62);
            uint64_t v69 = (_OWORD *)((char *)v60 + 12 * a11);
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v69 + 4, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v235 = *MEMORY[0x263EF8340];
  size_t v174 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v186 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v173 = a8 + a10 - 1;
  unsigned int v21 = v173 >> 4;
  if (*(void *)(v15 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v181 = v26;
  if (v20 <= v21)
  {
    unsigned int v180 = a7 + a9 - 1;
    if (a7 >> 4 <= v180 >> 4)
    {
      uint64_t v189 = (a5 - 1) >> 4;
      int v188 = ((a5 - 1) & 0xF) + 1;
      uint64_t v177 = 8 * a11;
      uint64_t v178 = 4 * a11;
      uint64_t v172 = v21 + 1;
      uint64_t v187 = v15;
      uint64_t v176 = 2 * a11;
      do
      {
        unsigned int v27 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v186) {
          unsigned int v28 = v186;
        }
        else {
          unsigned int v28 = 16 * v20;
        }
        if (v173 < v27) {
          unsigned int v27 = v173;
        }
        int v179 = v28 - 16 * v20;
        int v185 = v27 - v28 + 1;
        int v29 = ((a6 - 1) & 0xF) + 1;
        if (v20 != (a6 - 1) >> 4) {
          int v29 = 16;
        }
        unsigned int v190 = v29;
        uint64_t v184 = a2 + (v28 - v186) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v32 = 16 * v30;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v180 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v189) {
            unsigned int v36 = v188;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v20 >= v186 && v32 >= a7)
          {
            int v38 = v188;
            if (v30 != v189) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v185 != v190;
          }
          unsigned int v40 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_70:
              unint64_t v47 = 0;
              goto LABEL_71;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_70;
            }
          }
          int v46 = 0;
          unint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            BOOL v51 = !v48;
            if (v48)
            {
              unint64_t v52 = ((unint64_t)(v50 & v30) << v46) | v47;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v52 = v47;
            }
            if (!v51) {
              ++v46;
            }
            --v45;
            if (v49)
            {
              unint64_t v47 = ((unint64_t)(v50 & v20) << v46) | v52;
            }
            else
            {
              unsigned int v45 = 0;
              unint64_t v47 = v52;
            }
            if (v49) {
              ++v46;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_71:
          BOOL v53 = (int32x4_t *)(a3 + v20 * v174 + (v30 << 9));
          unint64_t v191 = v30 + 1;
          if (v181)
          {
            memcpy(__dst, v53, sizeof(__dst));
            BOOL v53 = (int32x4_t *)__dst;
          }
          BOOL v54 = (unsigned __int8 *)(a4 + 8 * v47);
          int v55 = (int32x4_t *)(v184 + 2 * (v34 - a7));
          char v56 = v36 < 0x10 || v37;
          if ((v56 & 1) == 0 && v190 > 0xF)
          {
            unsigned int v57 = *v54;
            if (v57 == 63)
            {
              int32x4_t v66 = *v53;
              int32x4_t v17 = v53[1];
              int32x4_t v18 = v53[2];
              int32x4_t v19 = v53[3];
              *int v55 = vuzp1q_s32(*v53, v18);
              *(int32x4_t *)((char *)v55 + a11) = vuzp2q_s32(v66, v18);
              uint64_t v59 = 3 * a11;
              uint64_t v58 = 2 * a11;
              unint64_t v67 = (int32x4_t *)((char *)v55 + v176);
              *unint64_t v67 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v67 + a11) = v16;
              uint64_t v60 = 64;
            }
            else
            {
              uint64_t v58 = 2 * a11;
              if (v57 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16(v53->i16);
                *int v55 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v55 + a11) = v16;
                *(int16x8_t *)((char *)v55 + 2 * a11) = v16;
                uint64_t v59 = 3 * a11;
                *(int16x8_t *)((char *)v55 + 3 * a11) = v16;
                uint64_t v60 = 2;
              }
              else
              {
                uint64_t v59 = 3 * a11;
                if (*v54)
                {
                  uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v55, a11, (uint64_t)v53, v57, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
                }
                else
                {
                  uint64_t v60 = 0;
                  v55->i64[0] = 0;
                  v55->i64[1] = 0;
                  char v61 = (uint64_t *)((char *)v55->i64 + a11);
                  *char v61 = 0;
                  v61[1] = 0;
                  int v62 = (uint64_t *)((char *)v55->i64 + v176);
                  *int v62 = 0;
                  v62[1] = 0;
                  unint64_t v63 = (uint64_t *)((char *)v55->i64 + 3 * a11);
                  *unint64_t v63 = 0;
                  v63[1] = 0;
                }
              }
            }
            uint64_t v68 = (uint64_t)v53->i64 + v60;
            uint64_t v69 = v55 + 1;
            unsigned int v70 = v54[1];
            if (v70 == 63)
            {
              int32x4_t v75 = *(int32x4_t *)v68;
              int32x4_t v17 = *(int32x4_t *)(v68 + 16);
              int32x4_t v18 = *(int32x4_t *)(v68 + 32);
              int32x4_t v19 = *(int32x4_t *)(v68 + 48);
              *uint64_t v69 = vuzp1q_s32(*(int32x4_t *)v68, v18);
              *(int32x4_t *)((char *)v69 + a11) = vuzp2q_s32(v75, v18);
              unint64_t v76 = (int32x4_t *)((char *)v69 + v58);
              *unint64_t v76 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v76 + a11) = v16;
              uint64_t v71 = 64;
            }
            else if (v70 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v68);
              *uint64_t v69 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v69 + a11) = v16;
              *(int16x8_t *)((char *)v69 + v58) = v16;
              *(int16x8_t *)((char *)v69 + v59) = v16;
              uint64_t v71 = 2;
            }
            else if (v54[1])
            {
              uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v69, a11, v68, v70, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v71 = 0;
              v69->i64[0] = 0;
              v55[1].i64[1] = 0;
              unint64_t v72 = (uint64_t *)((char *)v69->i64 + a11);
              *unint64_t v72 = 0;
              v72[1] = 0;
              unint64_t v73 = (uint64_t *)((char *)v69->i64 + v58);
              *unint64_t v73 = 0;
              v73[1] = 0;
              unint64_t v74 = (uint64_t *)((char *)v69->i64 + v59);
              *unint64_t v74 = 0;
              v74[1] = 0;
            }
            uint64_t v77 = v68 + v71;
            uint64_t v78 = (int32x4_t *)((char *)v55 + v178);
            unsigned int v79 = v54[2];
            if (v79 == 63)
            {
              int32x4_t v84 = *(int32x4_t *)v77;
              int32x4_t v17 = *(int32x4_t *)(v77 + 16);
              int32x4_t v18 = *(int32x4_t *)(v77 + 32);
              int32x4_t v19 = *(int32x4_t *)(v77 + 48);
              *uint64_t v78 = vuzp1q_s32(*(int32x4_t *)v77, v18);
              *(int32x4_t *)((char *)v78 + a11) = vuzp2q_s32(v84, v18);
              uint64_t v85 = (int32x4_t *)((char *)v78 + v58);
              int32x4_t *v85 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v85 + a11) = v16;
              uint64_t v80 = 64;
            }
            else if (v79 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v77);
              *uint64_t v78 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v78 + a11) = v16;
              *(int16x8_t *)((char *)v78 + v58) = v16;
              *(int16x8_t *)((char *)v78 + v59) = v16;
              uint64_t v80 = 2;
            }
            else if (v54[2])
            {
              uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v55 + v178), a11, v77, v79, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v80 = 0;
              v78->i64[0] = 0;
              v78->i64[1] = 0;
              uint64_t v81 = (uint64_t *)((char *)v78->i64 + a11);
              *uint64_t v81 = 0;
              v81[1] = 0;
              unsigned int v82 = (uint64_t *)((char *)v78->i64 + v58);
              *unsigned int v82 = 0;
              v82[1] = 0;
              uint64_t v83 = (uint64_t *)((char *)v78->i64 + v59);
              void *v83 = 0;
              v83[1] = 0;
            }
            uint64_t v86 = v77 + v80;
            uint64_t v87 = v78 + 1;
            unsigned int v88 = v54[3];
            if (v88 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)v86;
              int32x4_t v17 = *(int32x4_t *)(v86 + 16);
              int32x4_t v18 = *(int32x4_t *)(v86 + 32);
              int32x4_t v19 = *(int32x4_t *)(v86 + 48);
              *uint64_t v87 = vuzp1q_s32(*(int32x4_t *)v86, v18);
              *(int32x4_t *)((char *)v87 + a11) = vuzp2q_s32(v93, v18);
              unsigned int v94 = (int32x4_t *)((char *)v87 + v58);
              *unsigned int v94 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v94 + a11) = v16;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v86);
              *uint64_t v87 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v87 + a11) = v16;
              *(int16x8_t *)((char *)v87 + v58) = v16;
              *(int16x8_t *)((char *)v87 + v59) = v16;
              uint64_t v89 = 2;
            }
            else if (v54[3])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, v86, v88, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v89 = 0;
              v87->i64[0] = 0;
              v78[1].i64[1] = 0;
              uint64_t v90 = (uint64_t *)((char *)v87->i64 + a11);
              *uint64_t v90 = 0;
              v90[1] = 0;
              uint64_t v91 = (uint64_t *)((char *)v87->i64 + v58);
              *uint64_t v91 = 0;
              v91[1] = 0;
              uint64_t v92 = (uint64_t *)((char *)v87->i64 + v59);
              *uint64_t v92 = 0;
              v92[1] = 0;
            }
            uint64_t v95 = v86 + v89;
            uint64_t v96 = (int32x4_t *)((char *)v55 + v177);
            unsigned int v97 = v54[4];
            if (v97 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v95;
              int32x4_t v17 = *(int32x4_t *)(v95 + 16);
              int32x4_t v18 = *(int32x4_t *)(v95 + 32);
              int32x4_t v19 = *(int32x4_t *)(v95 + 48);
              *uint64_t v96 = vuzp1q_s32(*(int32x4_t *)v95, v18);
              *(int32x4_t *)((char *)v96 + a11) = vuzp2q_s32(v102, v18);
              uint64_t v103 = (int32x4_t *)((char *)v96 + v58);
              *uint64_t v103 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v103 + a11) = v16;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v95);
              *uint64_t v96 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v96 + a11) = v16;
              *(int16x8_t *)((char *)v96 + v58) = v16;
              *(int16x8_t *)((char *)v96 + v59) = v16;
              uint64_t v98 = 2;
            }
            else if (v54[4])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v55 + v177), a11, v95, v97, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v98 = 0;
              v96->i64[0] = 0;
              v96->i64[1] = 0;
              int v99 = (uint64_t *)((char *)v96->i64 + a11);
              *int v99 = 0;
              v99[1] = 0;
              unsigned int v100 = (uint64_t *)((char *)v96->i64 + v58);
              *unsigned int v100 = 0;
              v100[1] = 0;
              int v101 = (uint64_t *)((char *)v96->i64 + v59);
              *int v101 = 0;
              v101[1] = 0;
            }
            uint64_t v104 = v95 + v98;
            unsigned int v105 = v96 + 1;
            unsigned int v106 = v54[5];
            if (v106 == 63)
            {
              int32x4_t v111 = *(int32x4_t *)v104;
              int32x4_t v17 = *(int32x4_t *)(v104 + 16);
              int32x4_t v18 = *(int32x4_t *)(v104 + 32);
              int32x4_t v19 = *(int32x4_t *)(v104 + 48);
              *unsigned int v105 = vuzp1q_s32(*(int32x4_t *)v104, v18);
              *(int32x4_t *)((char *)v105 + a11) = vuzp2q_s32(v111, v18);
              unsigned int v112 = (int32x4_t *)((char *)v105 + v58);
              *unsigned int v112 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v112 + a11) = v16;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v104);
              *unsigned int v105 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v105 + a11) = v16;
              *(int16x8_t *)((char *)v105 + v58) = v16;
              *(int16x8_t *)((char *)v105 + v59) = v16;
              uint64_t v107 = 2;
            }
            else if (v54[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v105, a11, v104, v106, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v107 = 0;
              v105->i64[0] = 0;
              v96[1].i64[1] = 0;
              uint64_t v108 = (uint64_t *)((char *)v105->i64 + a11);
              *uint64_t v108 = 0;
              v108[1] = 0;
              unsigned int v109 = (uint64_t *)((char *)v105->i64 + v58);
              *unsigned int v109 = 0;
              v109[1] = 0;
              unsigned int v110 = (uint64_t *)((char *)v105->i64 + v59);
              *unsigned int v110 = 0;
              v110[1] = 0;
            }
            uint64_t v113 = v104 + v107;
            char v114 = (int32x4_t *)((char *)v55 + 12 * a11);
            unsigned int v115 = v54[6];
            if (v115 == 63)
            {
              int32x4_t v120 = *(int32x4_t *)v113;
              int32x4_t v17 = *(int32x4_t *)(v113 + 16);
              int32x4_t v18 = *(int32x4_t *)(v113 + 32);
              int32x4_t v19 = *(int32x4_t *)(v113 + 48);
              *char v114 = vuzp1q_s32(*(int32x4_t *)v113, v18);
              *(int32x4_t *)((char *)v114 + a11) = vuzp2q_s32(v120, v18);
              uint64_t v121 = (int32x4_t *)((char *)v114 + v58);
              *uint64_t v121 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v121 + a11) = v16;
              uint64_t v116 = 64;
            }
            else if (v115 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v113);
              *char v114 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v114 + a11) = v16;
              *(int16x8_t *)((char *)v114 + v58) = v16;
              *(int16x8_t *)((char *)v114 + v59) = v16;
              uint64_t v116 = 2;
            }
            else if (v54[6])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, a11, v113, v115, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v116 = 0;
              v114->i64[0] = 0;
              v114->i64[1] = 0;
              int v117 = (uint64_t *)((char *)v114->i64 + a11);
              *int v117 = 0;
              v117[1] = 0;
              uint64_t v118 = (uint64_t *)((char *)v114->i64 + v58);
              *uint64_t v118 = 0;
              v118[1] = 0;
              int v119 = (uint64_t *)((char *)v114->i64 + v59);
              *int v119 = 0;
              v119[1] = 0;
            }
            uint64_t v122 = v113 + v116;
            int v123 = v114 + 1;
            unsigned int v124 = v54[7];
            if (v124 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v122;
              int32x4_t v17 = *(int32x4_t *)(v122 + 16);
              int32x4_t v18 = *(int32x4_t *)(v122 + 32);
              int32x4_t v19 = *(int32x4_t *)(v122 + 48);
              *int v123 = vuzp1q_s32(*(int32x4_t *)v122, v18);
              *(int32x4_t *)((char *)v123 + a11) = vuzp2q_s32(v128, v18);
              uint64_t v129 = (int32x4_t *)((char *)v123 + v58);
              *uint64_t v129 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v129 + a11) = v16;
              uint64_t v15 = v187;
            }
            else
            {
              uint64_t v15 = v187;
              if (v124 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16((const __int16 *)v122);
                *int v123 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v123 + a11) = v16;
                *(int16x8_t *)((char *)v123 + v58) = v16;
                *(int16x8_t *)((char *)v123 + v59) = v16;
              }
              else if (v54[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v123, a11, v122, v124, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
              }
              else
              {
                v123->i64[0] = 0;
                v114[1].i64[1] = 0;
                uint64_t v125 = (uint64_t *)((char *)v123->i64 + a11);
                *uint64_t v125 = 0;
                v125[1] = 0;
                unsigned int v126 = (uint64_t *)((char *)v123->i64 + v58);
                *unsigned int v126 = 0;
                v126[1] = 0;
                uint64_t v127 = (uint64_t *)((char *)v123->i64 + v59);
                *uint64_t v127 = 0;
                v127[1] = 0;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v187;
          block[5] = v53;
          char v200 = v36;
          char v201 = v190;
          int v196 = v179;
          int v197 = v34 - v32;
          block[6] = v54;
          uint64_t v194 = v184 + 2 * (v34 - a7);
          uint64_t v195 = a11;
          unsigned int v198 = v185;
          unsigned int v199 = v35;
          if (v37)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v187 + 8) + 7384), block);
            uint64_t v15 = v187;
LABEL_27:
            unint64_t v31 = v191;
            goto LABEL_28;
          }
          unsigned int v64 = *v54;
          if (v64 == 63)
          {
            int32x4_t v130 = v53[1];
            int32x4_t v18 = v53[2];
            int32x4_t v19 = v53[3];
            int32x4_t v131 = vuzp2q_s32(*v53, v18);
            int32x4_t v203 = vuzp1q_s32(*v53, v18);
            int32x4_t v205 = v131;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v130, v19);
            int32x4_t v17 = vuzp2q_s32(v130, v19);
            int16x8_t v207 = v16;
            int32x4_t v209 = v17;
            uint64_t v65 = 64;
          }
          else if (v64 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16(v53->i16);
            int32x4_t v203 = (int32x4_t)v16;
            int32x4_t v205 = (int32x4_t)v16;
            int16x8_t v207 = v16;
            int32x4_t v209 = (int32x4_t)v16;
            uint64_t v65 = 2;
          }
          else if (*v54)
          {
            uint64_t v65 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 32, (uint64_t)v53, v64, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v65 = 0;
            int32x4_t v203 = 0uLL;
            int32x4_t v205 = 0uLL;
            int16x8_t v207 = 0uLL;
            int32x4_t v209 = 0uLL;
          }
          uint64_t v132 = (uint64_t)v53->i64 + v65;
          unsigned int v133 = v54[1];
          if (v133 == 63)
          {
            int32x4_t v135 = *(int32x4_t *)(v132 + 16);
            int32x4_t v18 = *(int32x4_t *)(v132 + 32);
            int32x4_t v19 = *(int32x4_t *)(v132 + 48);
            int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v132, v18);
            int32x4_t v204 = vuzp1q_s32(*(int32x4_t *)v132, v18);
            int32x4_t v206 = v136;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v135, v19);
            int32x4_t v17 = vuzp2q_s32(v135, v19);
            int16x8_t v208 = v16;
            int32x4_t v210 = v17;
            uint64_t v134 = 64;
            uint64_t v15 = v187;
          }
          else
          {
            uint64_t v15 = v187;
            if (v133 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v132);
              int32x4_t v204 = (int32x4_t)v16;
              int32x4_t v206 = (int32x4_t)v16;
              int16x8_t v208 = v16;
              int32x4_t v210 = (int32x4_t)v16;
              uint64_t v134 = 2;
            }
            else if (v54[1])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 32, v132, v133, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v134 = 0;
              int32x4_t v204 = 0uLL;
              int32x4_t v206 = 0uLL;
              int16x8_t v208 = 0uLL;
              int32x4_t v210 = 0uLL;
            }
          }
          uint64_t v137 = v132 + v134;
          unsigned int v138 = v54[2];
          if (v138 == 63)
          {
            int32x4_t v140 = *(int32x4_t *)(v137 + 16);
            int32x4_t v18 = *(int32x4_t *)(v137 + 32);
            int32x4_t v19 = *(int32x4_t *)(v137 + 48);
            int32x4_t v141 = vuzp2q_s32(*(int32x4_t *)v137, v18);
            int32x4_t v211 = vuzp1q_s32(*(int32x4_t *)v137, v18);
            int32x4_t v213 = v141;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v140, v19);
            int32x4_t v17 = vuzp2q_s32(v140, v19);
            int16x8_t v215 = v16;
            int32x4_t v217 = v17;
            uint64_t v139 = 64;
          }
          else if (v138 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v137);
            int32x4_t v211 = (int32x4_t)v16;
            int32x4_t v213 = (int32x4_t)v16;
            int16x8_t v215 = v16;
            int32x4_t v217 = (int32x4_t)v16;
            uint64_t v139 = 2;
          }
          else if (v54[2])
          {
            uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 32, v137, v138, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v139 = 0;
            int32x4_t v211 = 0uLL;
            int32x4_t v213 = 0uLL;
            int16x8_t v215 = 0uLL;
            int32x4_t v217 = 0uLL;
          }
          uint64_t v142 = v137 + v139;
          unsigned int v143 = v54[3];
          if (v143 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v142 + 16);
            int32x4_t v18 = *(int32x4_t *)(v142 + 32);
            int32x4_t v19 = *(int32x4_t *)(v142 + 48);
            int32x4_t v146 = vuzp2q_s32(*(int32x4_t *)v142, v18);
            int32x4_t v212 = vuzp1q_s32(*(int32x4_t *)v142, v18);
            int32x4_t v214 = v146;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v145, v19);
            int32x4_t v17 = vuzp2q_s32(v145, v19);
            int16x8_t v216 = v16;
            int32x4_t v218 = v17;
            uint64_t v144 = 64;
          }
          else if (v143 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v142);
            int32x4_t v212 = (int32x4_t)v16;
            int32x4_t v214 = (int32x4_t)v16;
            int16x8_t v216 = v16;
            int32x4_t v218 = (int32x4_t)v16;
            uint64_t v144 = 2;
          }
          else if (v54[3])
          {
            uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 32, v142, v143, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v144 = 0;
            int32x4_t v212 = 0uLL;
            int32x4_t v214 = 0uLL;
            int16x8_t v216 = 0uLL;
            int32x4_t v218 = 0uLL;
          }
          uint64_t v147 = v142 + v144;
          unsigned int v148 = v54[4];
          if (v148 == 63)
          {
            int32x4_t v150 = *(int32x4_t *)(v147 + 16);
            int32x4_t v18 = *(int32x4_t *)(v147 + 32);
            int32x4_t v19 = *(int32x4_t *)(v147 + 48);
            int32x4_t v151 = vuzp2q_s32(*(int32x4_t *)v147, v18);
            int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v147, v18);
            int32x4_t v221 = v151;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v150, v19);
            int32x4_t v17 = vuzp2q_s32(v150, v19);
            int16x8_t v223 = v16;
            int32x4_t v225 = v17;
            uint64_t v149 = 64;
          }
          else if (v148 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v147);
            int32x4_t v219 = (int32x4_t)v16;
            int32x4_t v221 = (int32x4_t)v16;
            int16x8_t v223 = v16;
            int32x4_t v225 = (int32x4_t)v16;
            uint64_t v149 = 2;
          }
          else if (v54[4])
          {
            uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v147, v148, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v149 = 0;
            int32x4_t v219 = 0uLL;
            int32x4_t v221 = 0uLL;
            int16x8_t v223 = 0uLL;
            int32x4_t v225 = 0uLL;
          }
          uint64_t v152 = v147 + v149;
          unsigned int v153 = v54[5];
          if (v153 == 63)
          {
            int32x4_t v155 = *(int32x4_t *)(v152 + 16);
            int32x4_t v18 = *(int32x4_t *)(v152 + 32);
            int32x4_t v19 = *(int32x4_t *)(v152 + 48);
            int32x4_t v156 = vuzp2q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v220 = vuzp1q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v222 = v156;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v155, v19);
            int32x4_t v17 = vuzp2q_s32(v155, v19);
            int16x8_t v224 = v16;
            int32x4_t v226 = v17;
            uint64_t v154 = 64;
          }
          else if (v153 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v152);
            int32x4_t v220 = (int32x4_t)v16;
            int32x4_t v222 = (int32x4_t)v16;
            int16x8_t v224 = v16;
            int32x4_t v226 = (int32x4_t)v16;
            uint64_t v154 = 2;
          }
          else if (v54[5])
          {
            uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, v152, v153, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v154 = 0;
            int32x4_t v220 = 0uLL;
            int32x4_t v222 = 0uLL;
            int16x8_t v224 = 0uLL;
            int32x4_t v226 = 0uLL;
          }
          uint64_t v157 = v152 + v154;
          unsigned int v158 = v54[6];
          if (v158 == 63)
          {
            int32x4_t v160 = *(int32x4_t *)(v157 + 16);
            int32x4_t v18 = *(int32x4_t *)(v157 + 32);
            int32x4_t v19 = *(int32x4_t *)(v157 + 48);
            int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v157, v18);
            int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v157, v18);
            int32x4_t v229 = v161;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v160, v19);
            int32x4_t v17 = vuzp2q_s32(v160, v19);
            int16x8_t v231 = v16;
            int32x4_t v233 = v17;
            uint64_t v159 = 64;
          }
          else if (v158 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v157);
            int32x4_t v227 = (int32x4_t)v16;
            int32x4_t v229 = (int32x4_t)v16;
            int16x8_t v231 = v16;
            int32x4_t v233 = (int32x4_t)v16;
            uint64_t v159 = 2;
          }
          else if (v54[6])
          {
            uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v157, v158, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v159 = 0;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int16x8_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
          }
          uint64_t v162 = v157 + v159;
          unsigned int v163 = v54[7];
          if (v163 == 63)
          {
            int32x4_t v164 = *(int32x4_t *)(v162 + 16);
            int32x4_t v18 = *(int32x4_t *)(v162 + 32);
            int32x4_t v19 = *(int32x4_t *)(v162 + 48);
            int32x4_t v165 = vuzp2q_s32(*(int32x4_t *)v162, v18);
            int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v162, v18);
            int32x4_t v230 = v165;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v164, v19);
            int32x4_t v17 = vuzp2q_s32(v164, v19);
            int16x8_t v232 = v16;
            int32x4_t v234 = v17;
          }
          else if (v163 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v162);
            int32x4_t v228 = (int32x4_t)v16;
            int32x4_t v230 = (int32x4_t)v16;
            int16x8_t v232 = v16;
            int32x4_t v234 = (int32x4_t)v16;
          }
          else if (v54[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v162, v163, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int16x8_t v232 = 0uLL;
            int32x4_t v234 = 0uLL;
          }
          unint64_t v166 = v198;
          unint64_t v31 = v191;
          if (v198)
          {
            unint64_t v167 = 0;
            int32x4_t v168 = &v203.i8[32 * v196 + 2 * v197];
            unsigned int v169 = v199;
            do
            {
              if (v169)
              {
                uint64_t v170 = 0;
                uint64_t v171 = v194 + v195 * v167;
                do
                {
                  *(unsigned char *)(v171 + v170) = v168[v170];
                  ++v170;
                  unsigned int v169 = v199;
                }
                while (2 * (unint64_t)v199 > v170);
                unint64_t v166 = v198;
              }
              ++v167;
              v168 += 32;
            }
            while (v167 < v166);
          }
LABEL_28:
          unint64_t v30 = v31;
        }
        while (v31 != (v180 >> 4) + 1);
        ++v20;
      }
      while (v20 != v172);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v235 = *MEMORY[0x263EF8340];
  size_t v174 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v186 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v173 = a8 + a10 - 1;
  unsigned int v21 = v173 >> 4;
  if (*(void *)(v15 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v181 = v26;
  if (v20 <= v21)
  {
    unsigned int v180 = a7 + a9 - 1;
    if (a7 >> 4 <= v180 >> 4)
    {
      uint64_t v189 = (a5 - 1) >> 4;
      int v188 = ((a5 - 1) & 0xF) + 1;
      uint64_t v177 = 8 * a11;
      uint64_t v178 = 4 * a11;
      uint64_t v172 = v21 + 1;
      uint64_t v187 = v15;
      uint64_t v176 = 2 * a11;
      do
      {
        unsigned int v27 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v186) {
          unsigned int v28 = v186;
        }
        else {
          unsigned int v28 = 16 * v20;
        }
        if (v173 < v27) {
          unsigned int v27 = v173;
        }
        int v179 = v28 - 16 * v20;
        int v185 = v27 - v28 + 1;
        int v29 = ((a6 - 1) & 0xF) + 1;
        if (v20 != (a6 - 1) >> 4) {
          int v29 = 16;
        }
        unsigned int v190 = v29;
        uint64_t v184 = a2 + (v28 - v186) * a11;
        unint64_t v30 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v32 = 16 * v30;
          unsigned int v33 = 16 * (v30 + 1) - 1;
          if (16 * (int)v30 <= a7) {
            unsigned int v34 = a7;
          }
          else {
            unsigned int v34 = 16 * v30;
          }
          if (v180 < v33) {
            unsigned int v33 = a7 + a9 - 1;
          }
          int v35 = v33 - v34 + 1;
          if (v30 == v189) {
            unsigned int v36 = v188;
          }
          else {
            unsigned int v36 = 16;
          }
          BOOL v37 = 1;
          if (16 * (int)v20 >= v186 && v32 >= a7)
          {
            int v38 = v188;
            if (v30 != v189) {
              int v38 = 16;
            }
            BOOL v37 = v35 != v38 || v185 != v190;
          }
          unsigned int v40 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v40 <= 1) {
            unsigned int v40 = 1;
          }
          unsigned int v41 = v40 + 15;
          if (v41 < 0x20) {
            unsigned int v42 = 0;
          }
          else {
            unsigned int v42 = 32 - __clz(~(-1 << -(char)__clz((v41 >> 4) - 1)));
          }
          unsigned int v43 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v43 <= 1) {
            unsigned int v43 = 1;
          }
          unsigned int v44 = v43 + 15;
          if (v44 < 0x20)
          {
            unsigned int v45 = 0;
            if (!v42)
            {
LABEL_70:
              unint64_t v47 = 0;
              goto LABEL_71;
            }
          }
          else
          {
            unsigned int v45 = 32 - __clz(~(-1 << -(char)__clz((v44 >> 4) - 1)));
            if (!(v45 | v42)) {
              goto LABEL_70;
            }
          }
          int v46 = 0;
          unint64_t v47 = 0;
          BOOL v48 = v42 != 0;
          BOOL v49 = v45 != 0;
          int v50 = 1;
          do
          {
            --v42;
            BOOL v51 = !v48;
            if (v48)
            {
              unint64_t v52 = ((unint64_t)(v50 & v30) << v46) | v47;
            }
            else
            {
              unsigned int v42 = 0;
              unint64_t v52 = v47;
            }
            if (!v51) {
              ++v46;
            }
            --v45;
            if (v49)
            {
              unint64_t v47 = ((unint64_t)(v50 & v20) << v46) | v52;
            }
            else
            {
              unsigned int v45 = 0;
              unint64_t v47 = v52;
            }
            if (v49) {
              ++v46;
            }
            v50 *= 2;
            --v46;
            BOOL v49 = v45 != 0;
            BOOL v48 = v42 != 0;
          }
          while (v45 | v42);
LABEL_71:
          BOOL v53 = (int32x4_t *)(a3 + v20 * v174 + (v30 << 9));
          unint64_t v191 = v30 + 1;
          if (v181)
          {
            memcpy(__dst, v53, sizeof(__dst));
            BOOL v53 = (int32x4_t *)__dst;
          }
          BOOL v54 = (unsigned __int8 *)(a4 + 8 * v47);
          int v55 = (int32x4_t *)(v184 + 2 * (v34 - a7));
          char v56 = v36 < 0x10 || v37;
          if ((v56 & 1) == 0 && v190 > 0xF)
          {
            unsigned int v57 = *v54;
            if (v57 == 63)
            {
              int32x4_t v66 = *v53;
              int32x4_t v17 = v53[1];
              int32x4_t v18 = v53[2];
              int32x4_t v19 = v53[3];
              *int v55 = vuzp1q_s32(*v53, v18);
              *(int32x4_t *)((char *)v55 + a11) = vuzp2q_s32(v66, v18);
              uint64_t v59 = 3 * a11;
              uint64_t v58 = 2 * a11;
              unint64_t v67 = (int32x4_t *)((char *)v55 + v176);
              *unint64_t v67 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v67 + a11) = v16;
              uint64_t v60 = 64;
            }
            else
            {
              uint64_t v58 = 2 * a11;
              if (v57 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16(v53->i16);
                *int v55 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v55 + a11) = v16;
                *(int16x8_t *)((char *)v55 + 2 * a11) = v16;
                uint64_t v59 = 3 * a11;
                *(int16x8_t *)((char *)v55 + 3 * a11) = v16;
                uint64_t v60 = 2;
              }
              else
              {
                uint64_t v59 = 3 * a11;
                if (*v54)
                {
                  uint64_t v60 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v55, a11, (uint64_t)v53, v57, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
                }
                else
                {
                  uint64_t v60 = 0;
                  v55->i64[0] = 0;
                  v55->i64[1] = 0;
                  char v61 = (uint64_t *)((char *)v55->i64 + a11);
                  *char v61 = 0;
                  v61[1] = 0;
                  int v62 = (uint64_t *)((char *)v55->i64 + v176);
                  *int v62 = 0;
                  v62[1] = 0;
                  unint64_t v63 = (uint64_t *)((char *)v55->i64 + 3 * a11);
                  *unint64_t v63 = 0;
                  v63[1] = 0;
                }
              }
            }
            uint64_t v68 = (uint64_t)v53->i64 + v60;
            uint64_t v69 = v55 + 1;
            unsigned int v70 = v54[1];
            if (v70 == 63)
            {
              int32x4_t v75 = *(int32x4_t *)v68;
              int32x4_t v17 = *(int32x4_t *)(v68 + 16);
              int32x4_t v18 = *(int32x4_t *)(v68 + 32);
              int32x4_t v19 = *(int32x4_t *)(v68 + 48);
              *uint64_t v69 = vuzp1q_s32(*(int32x4_t *)v68, v18);
              *(int32x4_t *)((char *)v69 + a11) = vuzp2q_s32(v75, v18);
              unint64_t v76 = (int32x4_t *)((char *)v69 + v58);
              *unint64_t v76 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v76 + a11) = v16;
              uint64_t v71 = 64;
            }
            else if (v70 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v68);
              *uint64_t v69 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v69 + a11) = v16;
              *(int16x8_t *)((char *)v69 + v58) = v16;
              *(int16x8_t *)((char *)v69 + v59) = v16;
              uint64_t v71 = 2;
            }
            else if (v54[1])
            {
              uint64_t v71 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v69, a11, v68, v70, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v71 = 0;
              v69->i64[0] = 0;
              v55[1].i64[1] = 0;
              unint64_t v72 = (uint64_t *)((char *)v69->i64 + a11);
              *unint64_t v72 = 0;
              v72[1] = 0;
              unint64_t v73 = (uint64_t *)((char *)v69->i64 + v58);
              *unint64_t v73 = 0;
              v73[1] = 0;
              unint64_t v74 = (uint64_t *)((char *)v69->i64 + v59);
              *unint64_t v74 = 0;
              v74[1] = 0;
            }
            uint64_t v77 = v68 + v71;
            uint64_t v78 = (int32x4_t *)((char *)v55 + v178);
            unsigned int v79 = v54[2];
            if (v79 == 63)
            {
              int32x4_t v84 = *(int32x4_t *)v77;
              int32x4_t v17 = *(int32x4_t *)(v77 + 16);
              int32x4_t v18 = *(int32x4_t *)(v77 + 32);
              int32x4_t v19 = *(int32x4_t *)(v77 + 48);
              *uint64_t v78 = vuzp1q_s32(*(int32x4_t *)v77, v18);
              *(int32x4_t *)((char *)v78 + a11) = vuzp2q_s32(v84, v18);
              uint64_t v85 = (int32x4_t *)((char *)v78 + v58);
              int32x4_t *v85 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v85 + a11) = v16;
              uint64_t v80 = 64;
            }
            else if (v79 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v77);
              *uint64_t v78 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v78 + a11) = v16;
              *(int16x8_t *)((char *)v78 + v58) = v16;
              *(int16x8_t *)((char *)v78 + v59) = v16;
              uint64_t v80 = 2;
            }
            else if (v54[2])
            {
              uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v55 + v178), a11, v77, v79, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v80 = 0;
              v78->i64[0] = 0;
              v78->i64[1] = 0;
              uint64_t v81 = (uint64_t *)((char *)v78->i64 + a11);
              *uint64_t v81 = 0;
              v81[1] = 0;
              unsigned int v82 = (uint64_t *)((char *)v78->i64 + v58);
              *unsigned int v82 = 0;
              v82[1] = 0;
              uint64_t v83 = (uint64_t *)((char *)v78->i64 + v59);
              void *v83 = 0;
              v83[1] = 0;
            }
            uint64_t v86 = v77 + v80;
            uint64_t v87 = v78 + 1;
            unsigned int v88 = v54[3];
            if (v88 == 63)
            {
              int32x4_t v93 = *(int32x4_t *)v86;
              int32x4_t v17 = *(int32x4_t *)(v86 + 16);
              int32x4_t v18 = *(int32x4_t *)(v86 + 32);
              int32x4_t v19 = *(int32x4_t *)(v86 + 48);
              *uint64_t v87 = vuzp1q_s32(*(int32x4_t *)v86, v18);
              *(int32x4_t *)((char *)v87 + a11) = vuzp2q_s32(v93, v18);
              unsigned int v94 = (int32x4_t *)((char *)v87 + v58);
              *unsigned int v94 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v94 + a11) = v16;
              uint64_t v89 = 64;
            }
            else if (v88 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v86);
              *uint64_t v87 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v87 + a11) = v16;
              *(int16x8_t *)((char *)v87 + v58) = v16;
              *(int16x8_t *)((char *)v87 + v59) = v16;
              uint64_t v89 = 2;
            }
            else if (v54[3])
            {
              uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v87, a11, v86, v88, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v89 = 0;
              v87->i64[0] = 0;
              v78[1].i64[1] = 0;
              uint64_t v90 = (uint64_t *)((char *)v87->i64 + a11);
              *uint64_t v90 = 0;
              v90[1] = 0;
              uint64_t v91 = (uint64_t *)((char *)v87->i64 + v58);
              *uint64_t v91 = 0;
              v91[1] = 0;
              uint64_t v92 = (uint64_t *)((char *)v87->i64 + v59);
              *uint64_t v92 = 0;
              v92[1] = 0;
            }
            uint64_t v95 = v86 + v89;
            uint64_t v96 = (int32x4_t *)((char *)v55 + v177);
            unsigned int v97 = v54[4];
            if (v97 == 63)
            {
              int32x4_t v102 = *(int32x4_t *)v95;
              int32x4_t v17 = *(int32x4_t *)(v95 + 16);
              int32x4_t v18 = *(int32x4_t *)(v95 + 32);
              int32x4_t v19 = *(int32x4_t *)(v95 + 48);
              *uint64_t v96 = vuzp1q_s32(*(int32x4_t *)v95, v18);
              *(int32x4_t *)((char *)v96 + a11) = vuzp2q_s32(v102, v18);
              uint64_t v103 = (int32x4_t *)((char *)v96 + v58);
              *uint64_t v103 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v103 + a11) = v16;
              uint64_t v98 = 64;
            }
            else if (v97 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v95);
              *uint64_t v96 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v96 + a11) = v16;
              *(int16x8_t *)((char *)v96 + v58) = v16;
              *(int16x8_t *)((char *)v96 + v59) = v16;
              uint64_t v98 = 2;
            }
            else if (v54[4])
            {
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x4_t *)((char *)v55 + v177), a11, v95, v97, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v98 = 0;
              v96->i64[0] = 0;
              v96->i64[1] = 0;
              int v99 = (uint64_t *)((char *)v96->i64 + a11);
              *int v99 = 0;
              v99[1] = 0;
              unsigned int v100 = (uint64_t *)((char *)v96->i64 + v58);
              *unsigned int v100 = 0;
              v100[1] = 0;
              int v101 = (uint64_t *)((char *)v96->i64 + v59);
              *int v101 = 0;
              v101[1] = 0;
            }
            uint64_t v104 = v95 + v98;
            unsigned int v105 = v96 + 1;
            unsigned int v106 = v54[5];
            if (v106 == 63)
            {
              int32x4_t v111 = *(int32x4_t *)v104;
              int32x4_t v17 = *(int32x4_t *)(v104 + 16);
              int32x4_t v18 = *(int32x4_t *)(v104 + 32);
              int32x4_t v19 = *(int32x4_t *)(v104 + 48);
              *unsigned int v105 = vuzp1q_s32(*(int32x4_t *)v104, v18);
              *(int32x4_t *)((char *)v105 + a11) = vuzp2q_s32(v111, v18);
              unsigned int v112 = (int32x4_t *)((char *)v105 + v58);
              *unsigned int v112 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v112 + a11) = v16;
              uint64_t v107 = 64;
            }
            else if (v106 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v104);
              *unsigned int v105 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v105 + a11) = v16;
              *(int16x8_t *)((char *)v105 + v58) = v16;
              *(int16x8_t *)((char *)v105 + v59) = v16;
              uint64_t v107 = 2;
            }
            else if (v54[5])
            {
              uint64_t v107 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v105, a11, v104, v106, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v107 = 0;
              v105->i64[0] = 0;
              v96[1].i64[1] = 0;
              uint64_t v108 = (uint64_t *)((char *)v105->i64 + a11);
              *uint64_t v108 = 0;
              v108[1] = 0;
              unsigned int v109 = (uint64_t *)((char *)v105->i64 + v58);
              *unsigned int v109 = 0;
              v109[1] = 0;
              unsigned int v110 = (uint64_t *)((char *)v105->i64 + v59);
              *unsigned int v110 = 0;
              v110[1] = 0;
            }
            uint64_t v113 = v104 + v107;
            char v114 = (int32x4_t *)((char *)v55 + 12 * a11);
            unsigned int v115 = v54[6];
            if (v115 == 63)
            {
              int32x4_t v120 = *(int32x4_t *)v113;
              int32x4_t v17 = *(int32x4_t *)(v113 + 16);
              int32x4_t v18 = *(int32x4_t *)(v113 + 32);
              int32x4_t v19 = *(int32x4_t *)(v113 + 48);
              *char v114 = vuzp1q_s32(*(int32x4_t *)v113, v18);
              *(int32x4_t *)((char *)v114 + a11) = vuzp2q_s32(v120, v18);
              uint64_t v121 = (int32x4_t *)((char *)v114 + v58);
              *uint64_t v121 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v121 + a11) = v16;
              uint64_t v116 = 64;
            }
            else if (v115 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v113);
              *char v114 = (int32x4_t)v16;
              *(int16x8_t *)((char *)v114 + a11) = v16;
              *(int16x8_t *)((char *)v114 + v58) = v16;
              *(int16x8_t *)((char *)v114 + v59) = v16;
              uint64_t v116 = 2;
            }
            else if (v54[6])
            {
              uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v114, a11, v113, v115, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v116 = 0;
              v114->i64[0] = 0;
              v114->i64[1] = 0;
              int v117 = (uint64_t *)((char *)v114->i64 + a11);
              *int v117 = 0;
              v117[1] = 0;
              uint64_t v118 = (uint64_t *)((char *)v114->i64 + v58);
              *uint64_t v118 = 0;
              v118[1] = 0;
              int v119 = (uint64_t *)((char *)v114->i64 + v59);
              *int v119 = 0;
              v119[1] = 0;
            }
            uint64_t v122 = v113 + v116;
            int v123 = v114 + 1;
            unsigned int v124 = v54[7];
            if (v124 == 63)
            {
              int32x4_t v128 = *(int32x4_t *)v122;
              int32x4_t v17 = *(int32x4_t *)(v122 + 16);
              int32x4_t v18 = *(int32x4_t *)(v122 + 32);
              int32x4_t v19 = *(int32x4_t *)(v122 + 48);
              *int v123 = vuzp1q_s32(*(int32x4_t *)v122, v18);
              *(int32x4_t *)((char *)v123 + a11) = vuzp2q_s32(v128, v18);
              uint64_t v129 = (int32x4_t *)((char *)v123 + v58);
              *uint64_t v129 = vuzp1q_s32(v17, v19);
              int16x8_t v16 = (int16x8_t)vuzp2q_s32(v17, v19);
              *(int16x8_t *)((char *)v129 + a11) = v16;
              uint64_t v15 = v187;
            }
            else
            {
              uint64_t v15 = v187;
              if (v124 == 1)
              {
                int16x8_t v16 = vld1q_dup_s16((const __int16 *)v122);
                *int v123 = (int32x4_t)v16;
                *(int16x8_t *)((char *)v123 + a11) = v16;
                *(int16x8_t *)((char *)v123 + v58) = v16;
                *(int16x8_t *)((char *)v123 + v59) = v16;
              }
              else if (v54[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v123, a11, v122, v124, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
              }
              else
              {
                v123->i64[0] = 0;
                v114[1].i64[1] = 0;
                uint64_t v125 = (uint64_t *)((char *)v123->i64 + a11);
                *uint64_t v125 = 0;
                v125[1] = 0;
                unsigned int v126 = (uint64_t *)((char *)v123->i64 + v58);
                *unsigned int v126 = 0;
                v126[1] = 0;
                uint64_t v127 = (uint64_t *)((char *)v123->i64 + v59);
                *uint64_t v127 = 0;
                v127[1] = 0;
              }
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v187;
          block[5] = v53;
          char v200 = v36;
          char v201 = v190;
          int v196 = v179;
          int v197 = v34 - v32;
          block[6] = v54;
          uint64_t v194 = v184 + 2 * (v34 - a7);
          uint64_t v195 = a11;
          unsigned int v198 = v185;
          unsigned int v199 = v35;
          if (v37)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v187 + 8) + 7384), block);
            uint64_t v15 = v187;
LABEL_27:
            unint64_t v31 = v191;
            goto LABEL_28;
          }
          unsigned int v64 = *v54;
          if (v64 == 63)
          {
            int32x4_t v130 = v53[1];
            int32x4_t v18 = v53[2];
            int32x4_t v19 = v53[3];
            int32x4_t v131 = vuzp2q_s32(*v53, v18);
            int32x4_t v203 = vuzp1q_s32(*v53, v18);
            int32x4_t v205 = v131;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v130, v19);
            int32x4_t v17 = vuzp2q_s32(v130, v19);
            int16x8_t v207 = v16;
            int32x4_t v209 = v17;
            uint64_t v65 = 64;
          }
          else if (v64 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16(v53->i16);
            int32x4_t v203 = (int32x4_t)v16;
            int32x4_t v205 = (int32x4_t)v16;
            int16x8_t v207 = v16;
            int32x4_t v209 = (int32x4_t)v16;
            uint64_t v65 = 2;
          }
          else if (*v54)
          {
            uint64_t v65 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v203, 32, (uint64_t)v53, v64, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v65 = 0;
            int32x4_t v203 = 0uLL;
            int32x4_t v205 = 0uLL;
            int16x8_t v207 = 0uLL;
            int32x4_t v209 = 0uLL;
          }
          uint64_t v132 = (uint64_t)v53->i64 + v65;
          unsigned int v133 = v54[1];
          if (v133 == 63)
          {
            int32x4_t v135 = *(int32x4_t *)(v132 + 16);
            int32x4_t v18 = *(int32x4_t *)(v132 + 32);
            int32x4_t v19 = *(int32x4_t *)(v132 + 48);
            int32x4_t v136 = vuzp2q_s32(*(int32x4_t *)v132, v18);
            int32x4_t v204 = vuzp1q_s32(*(int32x4_t *)v132, v18);
            int32x4_t v206 = v136;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v135, v19);
            int32x4_t v17 = vuzp2q_s32(v135, v19);
            int16x8_t v208 = v16;
            int32x4_t v210 = v17;
            uint64_t v134 = 64;
            uint64_t v15 = v187;
          }
          else
          {
            uint64_t v15 = v187;
            if (v133 == 1)
            {
              int16x8_t v16 = vld1q_dup_s16((const __int16 *)v132);
              int32x4_t v204 = (int32x4_t)v16;
              int32x4_t v206 = (int32x4_t)v16;
              int16x8_t v208 = v16;
              int32x4_t v210 = (int32x4_t)v16;
              uint64_t v134 = 2;
            }
            else if (v54[1])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v204, 32, v132, v133, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
            }
            else
            {
              uint64_t v134 = 0;
              int32x4_t v204 = 0uLL;
              int32x4_t v206 = 0uLL;
              int16x8_t v208 = 0uLL;
              int32x4_t v210 = 0uLL;
            }
          }
          uint64_t v137 = v132 + v134;
          unsigned int v138 = v54[2];
          if (v138 == 63)
          {
            int32x4_t v140 = *(int32x4_t *)(v137 + 16);
            int32x4_t v18 = *(int32x4_t *)(v137 + 32);
            int32x4_t v19 = *(int32x4_t *)(v137 + 48);
            int32x4_t v141 = vuzp2q_s32(*(int32x4_t *)v137, v18);
            int32x4_t v211 = vuzp1q_s32(*(int32x4_t *)v137, v18);
            int32x4_t v213 = v141;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v140, v19);
            int32x4_t v17 = vuzp2q_s32(v140, v19);
            int16x8_t v215 = v16;
            int32x4_t v217 = v17;
            uint64_t v139 = 64;
          }
          else if (v138 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v137);
            int32x4_t v211 = (int32x4_t)v16;
            int32x4_t v213 = (int32x4_t)v16;
            int16x8_t v215 = v16;
            int32x4_t v217 = (int32x4_t)v16;
            uint64_t v139 = 2;
          }
          else if (v54[2])
          {
            uint64_t v139 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v211, 32, v137, v138, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v139 = 0;
            int32x4_t v211 = 0uLL;
            int32x4_t v213 = 0uLL;
            int16x8_t v215 = 0uLL;
            int32x4_t v217 = 0uLL;
          }
          uint64_t v142 = v137 + v139;
          unsigned int v143 = v54[3];
          if (v143 == 63)
          {
            int32x4_t v145 = *(int32x4_t *)(v142 + 16);
            int32x4_t v18 = *(int32x4_t *)(v142 + 32);
            int32x4_t v19 = *(int32x4_t *)(v142 + 48);
            int32x4_t v146 = vuzp2q_s32(*(int32x4_t *)v142, v18);
            int32x4_t v212 = vuzp1q_s32(*(int32x4_t *)v142, v18);
            int32x4_t v214 = v146;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v145, v19);
            int32x4_t v17 = vuzp2q_s32(v145, v19);
            int16x8_t v216 = v16;
            int32x4_t v218 = v17;
            uint64_t v144 = 64;
          }
          else if (v143 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v142);
            int32x4_t v212 = (int32x4_t)v16;
            int32x4_t v214 = (int32x4_t)v16;
            int16x8_t v216 = v16;
            int32x4_t v218 = (int32x4_t)v16;
            uint64_t v144 = 2;
          }
          else if (v54[3])
          {
            uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v212, 32, v142, v143, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v144 = 0;
            int32x4_t v212 = 0uLL;
            int32x4_t v214 = 0uLL;
            int16x8_t v216 = 0uLL;
            int32x4_t v218 = 0uLL;
          }
          uint64_t v147 = v142 + v144;
          unsigned int v148 = v54[4];
          if (v148 == 63)
          {
            int32x4_t v150 = *(int32x4_t *)(v147 + 16);
            int32x4_t v18 = *(int32x4_t *)(v147 + 32);
            int32x4_t v19 = *(int32x4_t *)(v147 + 48);
            int32x4_t v151 = vuzp2q_s32(*(int32x4_t *)v147, v18);
            int32x4_t v219 = vuzp1q_s32(*(int32x4_t *)v147, v18);
            int32x4_t v221 = v151;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v150, v19);
            int32x4_t v17 = vuzp2q_s32(v150, v19);
            int16x8_t v223 = v16;
            int32x4_t v225 = v17;
            uint64_t v149 = 64;
          }
          else if (v148 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v147);
            int32x4_t v219 = (int32x4_t)v16;
            int32x4_t v221 = (int32x4_t)v16;
            int16x8_t v223 = v16;
            int32x4_t v225 = (int32x4_t)v16;
            uint64_t v149 = 2;
          }
          else if (v54[4])
          {
            uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v219, 32, v147, v148, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v149 = 0;
            int32x4_t v219 = 0uLL;
            int32x4_t v221 = 0uLL;
            int16x8_t v223 = 0uLL;
            int32x4_t v225 = 0uLL;
          }
          uint64_t v152 = v147 + v149;
          unsigned int v153 = v54[5];
          if (v153 == 63)
          {
            int32x4_t v155 = *(int32x4_t *)(v152 + 16);
            int32x4_t v18 = *(int32x4_t *)(v152 + 32);
            int32x4_t v19 = *(int32x4_t *)(v152 + 48);
            int32x4_t v156 = vuzp2q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v220 = vuzp1q_s32(*(int32x4_t *)v152, v18);
            int32x4_t v222 = v156;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v155, v19);
            int32x4_t v17 = vuzp2q_s32(v155, v19);
            int16x8_t v224 = v16;
            int32x4_t v226 = v17;
            uint64_t v154 = 64;
          }
          else if (v153 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v152);
            int32x4_t v220 = (int32x4_t)v16;
            int32x4_t v222 = (int32x4_t)v16;
            int16x8_t v224 = v16;
            int32x4_t v226 = (int32x4_t)v16;
            uint64_t v154 = 2;
          }
          else if (v54[5])
          {
            uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v220, 32, v152, v153, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v154 = 0;
            int32x4_t v220 = 0uLL;
            int32x4_t v222 = 0uLL;
            int16x8_t v224 = 0uLL;
            int32x4_t v226 = 0uLL;
          }
          uint64_t v157 = v152 + v154;
          unsigned int v158 = v54[6];
          if (v158 == 63)
          {
            int32x4_t v160 = *(int32x4_t *)(v157 + 16);
            int32x4_t v18 = *(int32x4_t *)(v157 + 32);
            int32x4_t v19 = *(int32x4_t *)(v157 + 48);
            int32x4_t v161 = vuzp2q_s32(*(int32x4_t *)v157, v18);
            int32x4_t v227 = vuzp1q_s32(*(int32x4_t *)v157, v18);
            int32x4_t v229 = v161;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v160, v19);
            int32x4_t v17 = vuzp2q_s32(v160, v19);
            int16x8_t v231 = v16;
            int32x4_t v233 = v17;
            uint64_t v159 = 64;
          }
          else if (v158 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v157);
            int32x4_t v227 = (int32x4_t)v16;
            int32x4_t v229 = (int32x4_t)v16;
            int16x8_t v231 = v16;
            int32x4_t v233 = (int32x4_t)v16;
            uint64_t v159 = 2;
          }
          else if (v54[6])
          {
            uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v227, 32, v157, v158, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            uint64_t v159 = 0;
            int32x4_t v227 = 0uLL;
            int32x4_t v229 = 0uLL;
            int16x8_t v231 = 0uLL;
            int32x4_t v233 = 0uLL;
          }
          uint64_t v162 = v157 + v159;
          unsigned int v163 = v54[7];
          if (v163 == 63)
          {
            int32x4_t v164 = *(int32x4_t *)(v162 + 16);
            int32x4_t v18 = *(int32x4_t *)(v162 + 32);
            int32x4_t v19 = *(int32x4_t *)(v162 + 48);
            int32x4_t v165 = vuzp2q_s32(*(int32x4_t *)v162, v18);
            int32x4_t v228 = vuzp1q_s32(*(int32x4_t *)v162, v18);
            int32x4_t v230 = v165;
            int16x8_t v16 = (int16x8_t)vuzp1q_s32(v164, v19);
            int32x4_t v17 = vuzp2q_s32(v164, v19);
            int16x8_t v232 = v16;
            int32x4_t v234 = v17;
          }
          else if (v163 == 1)
          {
            int16x8_t v16 = vld1q_dup_s16((const __int16 *)v162);
            int32x4_t v228 = (int32x4_t)v16;
            int32x4_t v230 = (int32x4_t)v16;
            int16x8_t v232 = v16;
            int32x4_t v234 = (int32x4_t)v16;
          }
          else if (v54[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v228, 32, v162, v163, *(double *)v16.i64, *(double *)v17.i64, *(double *)v18.i64, *(int8x8_t *)v19.i8);
          }
          else
          {
            int32x4_t v228 = 0uLL;
            int32x4_t v230 = 0uLL;
            int16x8_t v232 = 0uLL;
            int32x4_t v234 = 0uLL;
          }
          unint64_t v166 = v198;
          unint64_t v31 = v191;
          if (v198)
          {
            unint64_t v167 = 0;
            int32x4_t v168 = &v203.i8[32 * v196 + 2 * v197];
            unsigned int v169 = v199;
            do
            {
              if (v169)
              {
                uint64_t v170 = 0;
                uint64_t v171 = v194 + v195 * v167;
                do
                {
                  *(unsigned char *)(v171 + v170) = v168[v170];
                  ++v170;
                  unsigned int v169 = v199;
                }
                while (2 * (unint64_t)v199 > v170);
                unint64_t v166 = v198;
              }
              ++v167;
              v168 += 32;
            }
            while (v167 < v166);
          }
LABEL_28:
          unint64_t v30 = v31;
        }
        while (v31 != (v180 >> 4) + 1);
        ++v20;
      }
      while (v20 != v172);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v175[14] = *MEMORY[0x263EF8340];
  size_t v141 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v152 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v140 = a8 + a10 - 1;
  unsigned int v21 = v140 >> 4;
  uint64_t v155 = a1;
  if (*(void *)(a1 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v147 = v26;
  uint64_t result = a1;
  if (v20 <= v21)
  {
    unsigned int v146 = a7 + a9 - 1;
    if (a7 >> 4 <= v146 >> 4)
    {
      uint64_t v154 = (a5 - 1) >> 4;
      uint64_t v139 = (a6 - 1) >> 4;
      int v153 = ((a5 - 1) & 0xF) + 1;
      int v138 = ((a6 - 1) & 0xF) + 1;
      uint64_t v143 = 8 * a11;
      uint64_t v144 = 4 * a11;
      uint64_t v137 = v21 + 1;
      do
      {
        unsigned int v28 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v152) {
          unsigned int v29 = v152;
        }
        else {
          unsigned int v29 = 16 * v20;
        }
        if (v140 < v28) {
          unsigned int v28 = v140;
        }
        int v145 = v29 - 16 * v20;
        int v151 = v28 - v29 + 1;
        int v30 = v138;
        if (v20 != v139) {
          int v30 = 16;
        }
        unsigned int v156 = v30;
        uint64_t v150 = a2 + (v29 - v152) * a11;
        unint64_t v31 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v33 = v31 + 1;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v35 = a7;
          }
          else {
            unsigned int v35 = 16 * v31;
          }
          if (v146 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v154) {
            unsigned int v37 = v153;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (16 * (int)v20 >= v152 && v32 >= a7)
          {
            int v39 = v153;
            if (v31 != v154) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v151 != v156;
          }
          unsigned int v41 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
          }
          unsigned int v44 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20)
          {
            unsigned int v46 = 0;
            if (!v43)
            {
LABEL_69:
              unint64_t v48 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
            if (!(v46 | v43)) {
              goto LABEL_69;
            }
          }
          int v47 = 0;
          unint64_t v48 = 0;
          BOOL v49 = v43 != 0;
          BOOL v50 = v46 != 0;
          int v51 = 1;
          do
          {
            --v43;
            BOOL v52 = !v49;
            if (v49)
            {
              unint64_t v53 = ((unint64_t)(v51 & v31) << v47) | v48;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v53 = v48;
            }
            if (!v52) {
              ++v47;
            }
            --v46;
            if (v50)
            {
              unint64_t v48 = ((unint64_t)(v51 & v20) << v47) | v53;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v48 = v53;
            }
            if (v50) {
              ++v47;
            }
            v51 *= 2;
            --v47;
            BOOL v50 = v46 != 0;
            BOOL v49 = v43 != 0;
          }
          while (v46 | v43);
LABEL_70:
          BOOL v54 = (int32x4_t *)(a3 + v20 * v141 + 384 * v31);
          if (v147)
          {
            memcpy(__dst, v54, sizeof(__dst));
            uint64_t result = v155;
            BOOL v54 = (int32x4_t *)__dst;
          }
          int v55 = (unsigned __int8 *)(a4 + 8 * v48);
          uint64_t v56 = v150 + 2 * (v35 - a7);
          char v57 = v37 < 0x10 || v38;
          if ((v57 & 1) != 0 || v156 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v54;
            char v165 = v37;
            char v166 = v156;
            int v161 = v145;
            int v162 = v35 - v32;
            block[6] = v55;
            uint64_t v159 = v150 + 2 * (v35 - a7);
            uint64_t v160 = a11;
            unsigned int v163 = v151;
            unsigned int v164 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v95 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v96 = (int32x4_t *)((char *)v54
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v168, 32, v54, *v55, v95, v16, v17, v18, v19));
              int v101 = (int32x4_t *)((char *)v96
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v169, 32, v96, v55[1], v95, v97, v98, v99, v100));
              unsigned int v106 = (int32x4_t *)((char *)v101
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v170, 32, v101, v55[2], v95, v102, v103, v104, v105));
              int32x4_t v111 = (int32x4_t *)((char *)v106
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v171, 32, v106, v55[3], v95, v107, v108, v109, v110));
              uint64_t v116 = (int32x4_t *)((char *)v111
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v172, 32, v111, v55[4], v95, v112, v113, v114, v115));
              uint64_t v121 = (int32x4_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v173, 32, v116, v55[5], v95, v117, v118, v119, v120));
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v174, 32, v121, v55[6], v95, v122, v123, v124, v125);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v175, 32, (int32x4_t *)((char *)v121 + v126), v55[7], v95, v127, v128, v129, v130);
              unint64_t v131 = v163;
              if (v163)
              {
                unint64_t v132 = 0;
                unsigned int v133 = &v168[32 * v161 + 2 * v162];
                unsigned int v134 = v164;
                do
                {
                  if (v134)
                  {
                    uint64_t v135 = 0;
                    uint64_t v136 = v159 + v160 * v132;
                    do
                    {
                      *(unsigned char *)(v136 + v135) = v133[v135];
                      ++v135;
                      unsigned int v134 = v164;
                    }
                    while (2 * (unint64_t)v164 > v135);
                    unint64_t v131 = v163;
                  }
                  ++v132;
                  v133 += 32;
                }
                while (v132 < v131);
              }
            }
          }
          else
          {
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v59 = (int32x4_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56, a11, v54, *v55, v58, v16, v17, v18, v19));
            unsigned int v64 = (int32x4_t *)((char *)v59
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56 + 16, a11, v59, v55[1], v58, v60, v61, v62, v63));
            uint64_t v69 = (int32x4_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56 + v144, a11, v64, v55[2], v58, v65, v66, v67, v68));
            unint64_t v74 = (int32x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56 + v144 + 16, a11, v69, v55[3], v58, v70, v71, v72, v73));
            unsigned int v79 = (int32x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56 + v143, a11, v74, v55[4], v58, v75, v76, v77, v78));
            int32x4_t v84 = (int32x4_t *)((char *)v79
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v56 + v143 + 16, a11, v79, v55[5], v58, v80, v81, v82, v83));
            uint64_t v85 = v56 + 12 * a11;
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v85, a11, v84, v55[6], v58, v86, v87, v88, v89);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v85 + 16, a11, (int32x4_t *)((char *)v84 + v90), v55[7], v58, v91, v92, v93, v94);
          }
          unint64_t v31 = v33;
          uint64_t result = v155;
        }
        while (v33 != (v146 >> 4) + 1);
        ++v20;
      }
      while (v20 != v137);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v175[14] = *MEMORY[0x263EF8340];
  size_t v141 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v152 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v140 = a8 + a10 - 1;
  unsigned int v21 = v140 >> 4;
  uint64_t v155 = a1;
  if (*(void *)(a1 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v147 = v26;
  uint64_t result = a1;
  if (v20 <= v21)
  {
    unsigned int v146 = a7 + a9 - 1;
    if (a7 >> 4 <= v146 >> 4)
    {
      uint64_t v154 = (a5 - 1) >> 4;
      uint64_t v139 = (a6 - 1) >> 4;
      int v153 = ((a5 - 1) & 0xF) + 1;
      int v138 = ((a6 - 1) & 0xF) + 1;
      uint64_t v143 = 8 * a11;
      uint64_t v144 = 4 * a11;
      uint64_t v137 = v21 + 1;
      do
      {
        unsigned int v28 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v152) {
          unsigned int v29 = v152;
        }
        else {
          unsigned int v29 = 16 * v20;
        }
        if (v140 < v28) {
          unsigned int v28 = v140;
        }
        int v145 = v29 - 16 * v20;
        int v151 = v28 - v29 + 1;
        int v30 = v138;
        if (v20 != v139) {
          int v30 = 16;
        }
        unsigned int v156 = v30;
        uint64_t v150 = a2 + (v29 - v152) * a11;
        unint64_t v31 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v33 = v31 + 1;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v35 = a7;
          }
          else {
            unsigned int v35 = 16 * v31;
          }
          if (v146 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v154) {
            unsigned int v37 = v153;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (16 * (int)v20 >= v152 && v32 >= a7)
          {
            int v39 = v153;
            if (v31 != v154) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v151 != v156;
          }
          unsigned int v41 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
          }
          unsigned int v44 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20)
          {
            unsigned int v46 = 0;
            if (!v43)
            {
LABEL_69:
              unint64_t v48 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
            if (!(v46 | v43)) {
              goto LABEL_69;
            }
          }
          int v47 = 0;
          unint64_t v48 = 0;
          BOOL v49 = v43 != 0;
          BOOL v50 = v46 != 0;
          int v51 = 1;
          do
          {
            --v43;
            BOOL v52 = !v49;
            if (v49)
            {
              unint64_t v53 = ((unint64_t)(v51 & v31) << v47) | v48;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v53 = v48;
            }
            if (!v52) {
              ++v47;
            }
            --v46;
            if (v50)
            {
              unint64_t v48 = ((unint64_t)(v51 & v20) << v47) | v53;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v48 = v53;
            }
            if (v50) {
              ++v47;
            }
            v51 *= 2;
            --v47;
            BOOL v50 = v46 != 0;
            BOOL v49 = v43 != 0;
          }
          while (v46 | v43);
LABEL_70:
          BOOL v54 = (int32x4_t *)(a3 + v20 * v141 + 320 * v31);
          if (v147)
          {
            memcpy(__dst, v54, sizeof(__dst));
            uint64_t result = v155;
            BOOL v54 = (int32x4_t *)__dst;
          }
          int v55 = (unsigned __int8 *)(a4 + 8 * v48);
          uint64_t v56 = v150 + 2 * (v35 - a7);
          char v57 = v37 < 0x10 || v38;
          if ((v57 & 1) != 0 || v156 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v54;
            char v165 = v37;
            char v166 = v156;
            int v161 = v145;
            int v162 = v35 - v32;
            block[6] = v55;
            uint64_t v159 = v150 + 2 * (v35 - a7);
            uint64_t v160 = a11;
            unsigned int v163 = v151;
            unsigned int v164 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v95 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v96 = (int32x4_t *)((char *)v54
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v168, 32, v54, *v55, v95, v16, v17, v18, v19));
              int v101 = (int32x4_t *)((char *)v96
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v169, 32, v96, v55[1], v95, v97, v98, v99, v100));
              unsigned int v106 = (int32x4_t *)((char *)v101
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v170, 32, v101, v55[2], v95, v102, v103, v104, v105));
              int32x4_t v111 = (int32x4_t *)((char *)v106
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v171, 32, v106, v55[3], v95, v107, v108, v109, v110));
              uint64_t v116 = (int32x4_t *)((char *)v111
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v172, 32, v111, v55[4], v95, v112, v113, v114, v115));
              uint64_t v121 = (int32x4_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v173, 32, v116, v55[5], v95, v117, v118, v119, v120));
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v174, 32, v121, v55[6], v95, v122, v123, v124, v125);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v175, 32, (int32x4_t *)((char *)v121 + v126), v55[7], v95, v127, v128, v129, v130);
              unint64_t v131 = v163;
              if (v163)
              {
                unint64_t v132 = 0;
                unsigned int v133 = &v168[32 * v161 + 2 * v162];
                unsigned int v134 = v164;
                do
                {
                  if (v134)
                  {
                    uint64_t v135 = 0;
                    uint64_t v136 = v159 + v160 * v132;
                    do
                    {
                      *(unsigned char *)(v136 + v135) = v133[v135];
                      ++v135;
                      unsigned int v134 = v164;
                    }
                    while (2 * (unint64_t)v164 > v135);
                    unint64_t v131 = v163;
                  }
                  ++v132;
                  v133 += 32;
                }
                while (v132 < v131);
              }
            }
          }
          else
          {
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v59 = (int32x4_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56, a11, v54, *v55, v58, v16, v17, v18, v19));
            unsigned int v64 = (int32x4_t *)((char *)v59
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56 + 16, a11, v59, v55[1], v58, v60, v61, v62, v63));
            uint64_t v69 = (int32x4_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56 + v144, a11, v64, v55[2], v58, v65, v66, v67, v68));
            unint64_t v74 = (int32x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56 + v144 + 16, a11, v69, v55[3], v58, v70, v71, v72, v73));
            unsigned int v79 = (int32x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56 + v143, a11, v74, v55[4], v58, v75, v76, v77, v78));
            int32x4_t v84 = (int32x4_t *)((char *)v79
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v56 + v143 + 16, a11, v79, v55[5], v58, v80, v81, v82, v83));
            uint64_t v85 = v56 + 12 * a11;
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v85, a11, v84, v55[6], v58, v86, v87, v88, v89);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v85 + 16, a11, (int32x4_t *)((char *)v84 + v90), v55[7], v58, v91, v92, v93, v94);
          }
          unint64_t v31 = v33;
          uint64_t result = v155;
        }
        while (v33 != (v146 >> 4) + 1);
        ++v20;
      }
      while (v20 != v137);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v175[14] = *MEMORY[0x263EF8340];
  size_t v141 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v152 = a8;
  uint64_t v20 = a8 >> 4;
  unsigned int v140 = a8 + a10 - 1;
  unsigned int v21 = v140 >> 4;
  uint64_t v155 = a1;
  if (*(void *)(a1 + 168)) {
    int v22 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v22 = 0;
  }
  BOOL v23 = (v22 & 0xD00) == 0 || v22 == 768;
  int v24 = v22 & 0xE00;
  int v26 = !v23 && v24 != 1024;
  int v147 = v26;
  uint64_t result = a1;
  if (v20 <= v21)
  {
    unsigned int v146 = a7 + a9 - 1;
    if (a7 >> 4 <= v146 >> 4)
    {
      uint64_t v154 = (a5 - 1) >> 4;
      uint64_t v139 = (a6 - 1) >> 4;
      int v153 = ((a5 - 1) & 0xF) + 1;
      int v138 = ((a6 - 1) & 0xF) + 1;
      uint64_t v143 = 8 * a11;
      uint64_t v144 = 4 * a11;
      uint64_t v137 = v21 + 1;
      do
      {
        unsigned int v28 = (16 * v20) | 0xF;
        if (16 * (int)v20 <= v152) {
          unsigned int v29 = v152;
        }
        else {
          unsigned int v29 = 16 * v20;
        }
        if (v140 < v28) {
          unsigned int v28 = v140;
        }
        int v145 = v29 - 16 * v20;
        int v151 = v28 - v29 + 1;
        int v30 = v138;
        if (v20 != v139) {
          int v30 = 16;
        }
        unsigned int v156 = v30;
        uint64_t v150 = a2 + (v29 - v152) * a11;
        unint64_t v31 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v32 = 16 * v31;
          unint64_t v33 = v31 + 1;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * (int)v31 <= a7) {
            unsigned int v35 = a7;
          }
          else {
            unsigned int v35 = 16 * v31;
          }
          if (v146 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v154) {
            unsigned int v37 = v153;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (16 * (int)v20 >= v152 && v32 >= a7)
          {
            int v39 = v153;
            if (v31 != v154) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v151 != v156;
          }
          unsigned int v41 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20) {
            unsigned int v43 = 0;
          }
          else {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
          }
          unsigned int v44 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20)
          {
            unsigned int v46 = 0;
            if (!v43)
            {
LABEL_69:
              unint64_t v48 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
            if (!(v46 | v43)) {
              goto LABEL_69;
            }
          }
          int v47 = 0;
          unint64_t v48 = 0;
          BOOL v49 = v43 != 0;
          BOOL v50 = v46 != 0;
          int v51 = 1;
          do
          {
            --v43;
            BOOL v52 = !v49;
            if (v49)
            {
              unint64_t v53 = ((unint64_t)(v51 & v31) << v47) | v48;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v53 = v48;
            }
            if (!v52) {
              ++v47;
            }
            --v46;
            if (v50)
            {
              unint64_t v48 = ((unint64_t)(v51 & v20) << v47) | v53;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v48 = v53;
            }
            if (v50) {
              ++v47;
            }
            v51 *= 2;
            --v47;
            BOOL v50 = v46 != 0;
            BOOL v49 = v43 != 0;
          }
          while (v46 | v43);
LABEL_70:
          BOOL v54 = (int32x4_t *)(a3 + v20 * v141 + (v31 << 8));
          if (v147)
          {
            memcpy(__dst, v54, sizeof(__dst));
            uint64_t result = v155;
            BOOL v54 = (int32x4_t *)__dst;
          }
          int v55 = (unsigned __int8 *)(a4 + 8 * v48);
          uint64_t v56 = v150 + 2 * (v35 - a7);
          char v57 = v37 < 0x10 || v38;
          if ((v57 & 1) != 0 || v156 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v54;
            char v165 = v37;
            char v166 = v156;
            int v161 = v145;
            int v162 = v35 - v32;
            block[6] = v55;
            uint64_t v159 = v150 + 2 * (v35 - a7);
            uint64_t v160 = a11;
            unsigned int v163 = v151;
            unsigned int v164 = v36;
            if (v38)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v95 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v96 = (int32x4_t *)((char *)v54
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v168, 32, v54, *v55, v95, v16, v17, v18, v19));
              int v101 = (int32x4_t *)((char *)v96
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v169, 32, v96, v55[1], v95, v97, v98, v99, v100));
              unsigned int v106 = (int32x4_t *)((char *)v101
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v170, 32, v101, v55[2], v95, v102, v103, v104, v105));
              int32x4_t v111 = (int32x4_t *)((char *)v106
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v171, 32, v106, v55[3], v95, v107, v108, v109, v110));
              uint64_t v116 = (int32x4_t *)((char *)v111
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v172, 32, v111, v55[4], v95, v112, v113, v114, v115));
              uint64_t v121 = (int32x4_t *)((char *)v116
                                 + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v173, 32, v116, v55[5], v95, v117, v118, v119, v120));
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v174, 32, v121, v55[6], v95, v122, v123, v124, v125);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v175, 32, (int32x4_t *)((char *)v121 + v126), v55[7], v95, v127, v128, v129, v130);
              unint64_t v131 = v163;
              if (v163)
              {
                unint64_t v132 = 0;
                unsigned int v133 = &v168[32 * v161 + 2 * v162];
                unsigned int v134 = v164;
                do
                {
                  if (v134)
                  {
                    uint64_t v135 = 0;
                    uint64_t v136 = v159 + v160 * v132;
                    do
                    {
                      *(unsigned char *)(v136 + v135) = v133[v135];
                      ++v135;
                      unsigned int v134 = v164;
                    }
                    while (2 * (unint64_t)v164 > v135);
                    unint64_t v131 = v163;
                  }
                  ++v132;
                  v133 += 32;
                }
                while (v132 < v131);
              }
            }
          }
          else
          {
            int v58 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v59 = (int32x4_t *)((char *)v54
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56, a11, v54, *v55, v58, v16, v17, v18, v19));
            unsigned int v64 = (int32x4_t *)((char *)v59
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56 + 16, a11, v59, v55[1], v58, v60, v61, v62, v63));
            uint64_t v69 = (int32x4_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56 + v144, a11, v64, v55[2], v58, v65, v66, v67, v68));
            unint64_t v74 = (int32x4_t *)((char *)v69
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56 + v144 + 16, a11, v69, v55[3], v58, v70, v71, v72, v73));
            unsigned int v79 = (int32x4_t *)((char *)v74
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56 + v143, a11, v74, v55[4], v58, v75, v76, v77, v78));
            int32x4_t v84 = (int32x4_t *)((char *)v79
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v56 + v143 + 16, a11, v79, v55[5], v58, v80, v81, v82, v83));
            uint64_t v85 = v56 + 12 * a11;
            uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v85, a11, v84, v55[6], v58, v86, v87, v88, v89);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v85 + 16, a11, (int32x4_t *)((char *)v84 + v90), v55[7], v58, v91, v92, v93, v94);
          }
          unint64_t v31 = v33;
          uint64_t result = v155;
        }
        while (v33 != (v146 >> 4) + 1);
        ++v20;
      }
      while (v20 != v137);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v102 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v94 = v20;
  uint64_t v95 = v21;
  uint64_t v87 = v22;
  uint64_t v23 = v12;
  uint64_t v121 = *MEMORY[0x263EF8340];
  size_t v86 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v98 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v85 = v14 + a10 - 1;
  unsigned int v25 = v85 >> 4;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v93 = v30;
  if (v24 <= v25)
  {
    unsigned int v92 = v102 + a9 - 1;
    if (v102 >> 4 <= v92 >> 4)
    {
      uint64_t v100 = (v19 - 1) >> 4;
      uint64_t v84 = (v17 - 1) >> 4;
      int v99 = ((v19 - 1) & 0xF) + 1;
      int v83 = ((v17 - 1) & 0xF) + 1;
      uint64_t v88 = 8 * a11;
      uint64_t v89 = 4 * a11;
      uint64_t v82 = v25 + 1;
      uint64_t v91 = v23;
      do
      {
        unsigned int v31 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v98) {
          unsigned int v32 = v98;
        }
        else {
          unsigned int v32 = 16 * v24;
        }
        if (v85 < v31) {
          unsigned int v31 = v85;
        }
        unsigned int v90 = v32 - 16 * v24;
        int v97 = v31 - v32 + 1;
        int v33 = v83;
        if (v24 != v84) {
          int v33 = 16;
        }
        unsigned int v101 = v33;
        uint64_t v96 = v87 + (v32 - v98) * a11;
        unint64_t v34 = (unint64_t)v102 >> 4;
        do
        {
          unint64_t v35 = 16 * v34;
          unint64_t v36 = v34 + 1;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * (int)v34 <= v102) {
            unsigned int v38 = v102;
          }
          else {
            unsigned int v38 = 16 * v34;
          }
          if (v92 < v37) {
            unsigned int v37 = v102 + a9 - 1;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v100) {
            unsigned int v40 = v99;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (16 * (int)v24 >= v98 && v35 >= v102)
          {
            int v42 = v99;
            if (v34 != v100) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v97 != v101;
          }
          unsigned int v44 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20)
          {
            unsigned int v49 = 0;
            if (!v46)
            {
LABEL_69:
              unint64_t v51 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
            if (!(v49 | v46)) {
              goto LABEL_69;
            }
          }
          int v50 = 0;
          unint64_t v51 = 0;
          BOOL v52 = v46 != 0;
          BOOL v53 = v49 != 0;
          int v54 = 1;
          do
          {
            --v46;
            BOOL v55 = !v52;
            if (v52)
            {
              unint64_t v56 = ((unint64_t)(v54 & v34) << v50) | v51;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v56 = v51;
            }
            if (!v55) {
              ++v50;
            }
            --v49;
            if (v53)
            {
              unint64_t v51 = ((unint64_t)(v54 & v24) << v50) | v56;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v51 = v56;
            }
            if (v53) {
              ++v50;
            }
            v54 *= 2;
            --v50;
            BOOL v53 = v49 != 0;
            BOOL v52 = v46 != 0;
          }
          while (v49 | v46);
LABEL_70:
          char v57 = (unsigned char *)(v94 + v24 * v86 + (v34 << 11));
          if (v93)
          {
            memcpy(__dst, v57, sizeof(__dst));
            char v57 = __dst;
          }
          int v58 = (unsigned __int8 *)(v95 + 8 * v51);
          uint64_t v59 = (float64x2_t *)(v96 + 8 * (v38 - v102));
          char v60 = v40 < 0x10 || v41;
          if ((v60 & 1) != 0 || v101 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v91;
            block[5] = v57;
            char v110 = v40;
            char v111 = v101;
            unsigned int v106 = v90;
            int v107 = v38 - v35;
            block[6] = v58;
            uint64_t v104 = v96 + 8 * (v38 - v102);
            uint64_t v105 = a11;
            unsigned int v108 = v97;
            unsigned int v109 = v39;
            if (v41)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v91 + 8) + 7384), block);
              uint64_t v23 = v91;
            }
            else
            {
              uint64_t v69 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v113, 128, (uint64_t)v57, *v58)];
              uint64_t v70 = v69
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v114, 128, v69, v58[1]);
              uint64_t v71 = v70
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v115, 128, v70, v58[2]);
              uint64_t v72 = v71
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v116, 128, v71, v58[3]);
              uint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v117, 128, v72, v58[4]);
              uint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v118, 128, v73, v58[5]);
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v119, 128, v74, v58[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v120, 128, v74 + v75, v58[7]);
              unint64_t v76 = v108;
              uint64_t v23 = v91;
              if (v108)
              {
                unint64_t v77 = 0;
                int8x8_t v78 = (char *)&v113[8 * (unint64_t)v106].f64[v107];
                unsigned int v79 = v109;
                do
                {
                  if (v79)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = v104 + v105 * v77;
                    do
                    {
                      *(unsigned char *)(v81 + v80) = v78[v80];
                      ++v80;
                      unsigned int v79 = v109;
                    }
                    while (8 * (unint64_t)v109 > v80);
                    unint64_t v76 = v108;
                  }
                  ++v77;
                  v78 += 128;
                }
                while (v77 < v76);
              }
            }
          }
          else
          {
            uint64_t v61 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, (uint64_t)v57, *v58)];
            uint64_t v62 = v61
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59 + 4, a11, v61, v58[1]);
            uint64_t v63 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v89), a11, v62, v58[2]);
            uint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v89 + 64), a11, v63, v58[3]);
            uint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v88), a11, v64, v58[4]);
            uint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v88 + 64), a11, v65, v58[5]);
            double v67 = (float64x2_t *)((char *)v59 + 12 * a11);
            uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v67, a11, v66, v58[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v67 + 4, a11, v66 + v68, v58[7]);
            uint64_t v23 = v91;
          }
          unint64_t v34 = v36;
        }
        while (v36 != (v92 >> 4) + 1);
        ++v24;
      }
      while (v24 != v82);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v102 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v94 = v20;
  uint64_t v95 = v21;
  uint64_t v87 = v22;
  uint64_t v23 = v12;
  uint64_t v121 = *MEMORY[0x263EF8340];
  size_t v86 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v98 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v85 = v14 + a10 - 1;
  unsigned int v25 = v85 >> 4;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v93 = v30;
  if (v24 <= v25)
  {
    unsigned int v92 = v102 + a9 - 1;
    if (v102 >> 4 <= v92 >> 4)
    {
      uint64_t v100 = (v19 - 1) >> 4;
      uint64_t v84 = (v17 - 1) >> 4;
      int v99 = ((v19 - 1) & 0xF) + 1;
      int v83 = ((v17 - 1) & 0xF) + 1;
      uint64_t v88 = 8 * a11;
      uint64_t v89 = 4 * a11;
      uint64_t v82 = v25 + 1;
      uint64_t v91 = v23;
      do
      {
        unsigned int v31 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v98) {
          unsigned int v32 = v98;
        }
        else {
          unsigned int v32 = 16 * v24;
        }
        if (v85 < v31) {
          unsigned int v31 = v85;
        }
        unsigned int v90 = v32 - 16 * v24;
        int v97 = v31 - v32 + 1;
        int v33 = v83;
        if (v24 != v84) {
          int v33 = 16;
        }
        unsigned int v101 = v33;
        uint64_t v96 = v87 + (v32 - v98) * a11;
        unint64_t v34 = (unint64_t)v102 >> 4;
        do
        {
          unint64_t v35 = 16 * v34;
          unint64_t v36 = v34 + 1;
          unsigned int v37 = 16 * (v34 + 1) - 1;
          if (16 * (int)v34 <= v102) {
            unsigned int v38 = v102;
          }
          else {
            unsigned int v38 = 16 * v34;
          }
          if (v92 < v37) {
            unsigned int v37 = v102 + a9 - 1;
          }
          int v39 = v37 - v38 + 1;
          if (v34 == v100) {
            unsigned int v40 = v99;
          }
          else {
            unsigned int v40 = 16;
          }
          BOOL v41 = 1;
          if (16 * (int)v24 >= v98 && v35 >= v102)
          {
            int v42 = v99;
            if (v34 != v100) {
              int v42 = 16;
            }
            BOOL v41 = v39 != v42 || v97 != v101;
          }
          unsigned int v44 = *(_DWORD *)(v23 + 128) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v44 <= 1) {
            unsigned int v44 = 1;
          }
          unsigned int v45 = v44 + 15;
          if (v45 < 0x20) {
            unsigned int v46 = 0;
          }
          else {
            unsigned int v46 = 32 - __clz(~(-1 << -(char)__clz((v45 >> 4) - 1)));
          }
          unsigned int v47 = *(_DWORD *)(v23 + 132) >> (*(unsigned char *)(v23 + 144) + a12);
          if (v47 <= 1) {
            unsigned int v47 = 1;
          }
          unsigned int v48 = v47 + 15;
          if (v48 < 0x20)
          {
            unsigned int v49 = 0;
            if (!v46)
            {
LABEL_69:
              unint64_t v51 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v49 = 32 - __clz(~(-1 << -(char)__clz((v48 >> 4) - 1)));
            if (!(v49 | v46)) {
              goto LABEL_69;
            }
          }
          int v50 = 0;
          unint64_t v51 = 0;
          BOOL v52 = v46 != 0;
          BOOL v53 = v49 != 0;
          int v54 = 1;
          do
          {
            --v46;
            BOOL v55 = !v52;
            if (v52)
            {
              unint64_t v56 = ((unint64_t)(v54 & v34) << v50) | v51;
            }
            else
            {
              unsigned int v46 = 0;
              unint64_t v56 = v51;
            }
            if (!v55) {
              ++v50;
            }
            --v49;
            if (v53)
            {
              unint64_t v51 = ((unint64_t)(v54 & v24) << v50) | v56;
            }
            else
            {
              unsigned int v49 = 0;
              unint64_t v51 = v56;
            }
            if (v53) {
              ++v50;
            }
            v54 *= 2;
            --v50;
            BOOL v53 = v49 != 0;
            BOOL v52 = v46 != 0;
          }
          while (v49 | v46);
LABEL_70:
          char v57 = (unsigned char *)(v94 + v24 * v86 + (v34 << 11));
          if (v93)
          {
            memcpy(__dst, v57, sizeof(__dst));
            char v57 = __dst;
          }
          int v58 = (unsigned __int8 *)(v95 + 8 * v51);
          uint64_t v59 = (float64x2_t *)(v96 + 8 * (v38 - v102));
          char v60 = v40 < 0x10 || v41;
          if ((v60 & 1) != 0 || v101 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v91;
            block[5] = v57;
            char v110 = v40;
            char v111 = v101;
            unsigned int v106 = v90;
            int v107 = v38 - v35;
            block[6] = v58;
            uint64_t v104 = v96 + 8 * (v38 - v102);
            uint64_t v105 = a11;
            unsigned int v108 = v97;
            unsigned int v109 = v39;
            if (v41)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v91 + 8) + 7384), block);
              uint64_t v23 = v91;
            }
            else
            {
              uint64_t v69 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v113, 128, (uint64_t)v57, *v58)];
              uint64_t v70 = v69
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v114, 128, v69, v58[1]);
              uint64_t v71 = v70
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v115, 128, v70, v58[2]);
              uint64_t v72 = v71
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v116, 128, v71, v58[3]);
              uint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v117, 128, v72, v58[4]);
              uint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v118, 128, v73, v58[5]);
              uint64_t v75 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v119, 128, v74, v58[6]);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v120, 128, v74 + v75, v58[7]);
              unint64_t v76 = v108;
              uint64_t v23 = v91;
              if (v108)
              {
                unint64_t v77 = 0;
                int8x8_t v78 = (char *)&v113[8 * (unint64_t)v106].f64[v107];
                unsigned int v79 = v109;
                do
                {
                  if (v79)
                  {
                    uint64_t v80 = 0;
                    uint64_t v81 = v104 + v105 * v77;
                    do
                    {
                      *(unsigned char *)(v81 + v80) = v78[v80];
                      ++v80;
                      unsigned int v79 = v109;
                    }
                    while (8 * (unint64_t)v109 > v80);
                    unint64_t v76 = v108;
                  }
                  ++v77;
                  v78 += 128;
                }
                while (v77 < v76);
              }
            }
          }
          else
          {
            uint64_t v61 = (uint64_t)&v57[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59, a11, (uint64_t)v57, *v58)];
            uint64_t v62 = v61
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v59 + 4, a11, v61, v58[1]);
            uint64_t v63 = v62
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v89), a11, v62, v58[2]);
            uint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v89 + 64), a11, v63, v58[3]);
            uint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v88), a11, v64, v58[4]);
            uint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((float64x2_t *)((char *)v59 + v88 + 64), a11, v65, v58[5]);
            double v67 = (float64x2_t *)((char *)v59 + 12 * a11);
            uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v67, a11, v66, v58[6]);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v67 + 4, a11, v66 + v68, v58[7]);
            uint64_t v23 = v91;
          }
          unint64_t v34 = v36;
        }
        while (v36 != (v92 >> 4) + 1);
        ++v24;
      }
      while (v24 != v82);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  v123[56] = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int v58 = (unsigned char *)(v96 + v24 * v89 + 1536 * v35);
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int v58 = __dst;
          }
          uint64_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          uint64_t v60 = v98 + 8 * (v39 - v105);
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = &v116[128 * (unint64_t)v109 + 8 * v110];
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60 + 64, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60 + v92, a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60 + v92 + 64, a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60 + v91, a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v60 + v91 + 64, a11, v67, v59[5], v62);
            uint64_t v69 = v60 + 12 * a11;
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v69 + 64, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  v123[56] = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int v58 = (unsigned char *)(v96 + v24 * v89 + 1280 * v35);
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int v58 = __dst;
          }
          uint64_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          uint64_t v60 = v98 + 8 * (v39 - v105);
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = &v116[128 * (unint64_t)v109 + 8 * v110];
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + 64, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + v92, a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + v92 + 64, a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + v91, a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v60 + v91 + 64, a11, v67, v59[5], v62);
            uint64_t v69 = v60 + 12 * a11;
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v69 + 64, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v105 = v15;
  int v17 = v16;
  int v19 = v18;
  uint64_t v96 = v20;
  uint64_t v97 = v21;
  uint64_t v90 = v22;
  uint64_t v23 = v12;
  v123[56] = *MEMORY[0x263EF8340];
  size_t v89 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v100 = v14;
  uint64_t v24 = v14 >> 4;
  unsigned int v88 = v14 + a10 - 1;
  unsigned int v25 = v88 >> 4;
  uint64_t v103 = v23;
  if (*(void *)(v23 + 168)) {
    int v26 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v26 = 0;
  }
  BOOL v27 = (v26 & 0xD00) == 0 || v26 == 768;
  int v28 = v26 & 0xE00;
  int v30 = !v27 && v28 != 1024;
  int v95 = v30;
  uint64_t result = v23;
  if (v24 <= v25)
  {
    unsigned int v94 = v105 + a9 - 1;
    if (v105 >> 4 <= v94 >> 4)
    {
      uint64_t v102 = (v19 - 1) >> 4;
      uint64_t v87 = (v17 - 1) >> 4;
      int v101 = ((v19 - 1) & 0xF) + 1;
      int v86 = ((v17 - 1) & 0xF) + 1;
      uint64_t v91 = 8 * a11;
      uint64_t v92 = 4 * a11;
      uint64_t v85 = v25 + 1;
      do
      {
        unsigned int v32 = (16 * v24) | 0xF;
        if (16 * (int)v24 <= v100) {
          unsigned int v33 = v100;
        }
        else {
          unsigned int v33 = 16 * v24;
        }
        if (v88 < v32) {
          unsigned int v32 = v88;
        }
        unsigned int v93 = v33 - 16 * v24;
        int v99 = v32 - v33 + 1;
        int v34 = v86;
        if (v24 != v87) {
          int v34 = 16;
        }
        unsigned int v104 = v34;
        uint64_t v98 = v90 + (v33 - v100) * a11;
        unint64_t v35 = (unint64_t)v105 >> 4;
        do
        {
          unint64_t v36 = 16 * v35;
          unint64_t v37 = v35 + 1;
          unsigned int v38 = 16 * (v35 + 1) - 1;
          if (16 * (int)v35 <= v105) {
            unsigned int v39 = v105;
          }
          else {
            unsigned int v39 = 16 * v35;
          }
          if (v94 < v38) {
            unsigned int v38 = v105 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v35 == v102) {
            unsigned int v41 = v101;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (16 * (int)v24 >= v100 && v36 >= v105)
          {
            int v43 = v101;
            if (v35 != v102) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v99 != v104;
          }
          unsigned int v45 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v45 <= 1) {
            unsigned int v45 = 1;
          }
          unsigned int v46 = v45 + 15;
          if (v46 < 0x20) {
            unsigned int v47 = 0;
          }
          else {
            unsigned int v47 = 32 - __clz(~(-1 << -(char)__clz((v46 >> 4) - 1)));
          }
          unsigned int v48 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v48 <= 1) {
            unsigned int v48 = 1;
          }
          unsigned int v49 = v48 + 15;
          if (v49 < 0x20)
          {
            unsigned int v50 = 0;
            if (!v47)
            {
LABEL_69:
              unint64_t v52 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v50 = 32 - __clz(~(-1 << -(char)__clz((v49 >> 4) - 1)));
            if (!(v50 | v47)) {
              goto LABEL_69;
            }
          }
          int v51 = 0;
          unint64_t v52 = 0;
          BOOL v53 = v47 != 0;
          BOOL v54 = v50 != 0;
          int v55 = 1;
          do
          {
            --v47;
            BOOL v56 = !v53;
            if (v53)
            {
              unint64_t v57 = ((unint64_t)(v55 & v35) << v51) | v52;
            }
            else
            {
              unsigned int v47 = 0;
              unint64_t v57 = v52;
            }
            if (!v56) {
              ++v51;
            }
            --v50;
            if (v54)
            {
              unint64_t v52 = ((unint64_t)(v55 & v24) << v51) | v57;
            }
            else
            {
              unsigned int v50 = 0;
              unint64_t v52 = v57;
            }
            if (v54) {
              ++v51;
            }
            v55 *= 2;
            --v51;
            BOOL v54 = v50 != 0;
            BOOL v53 = v47 != 0;
          }
          while (v50 | v47);
LABEL_70:
          int v58 = (unsigned char *)(v96 + v24 * v89 + (v35 << 10));
          if (v95)
          {
            memcpy(__dst, v58, sizeof(__dst));
            uint64_t result = v103;
            int v58 = __dst;
          }
          uint64_t v59 = (unsigned __int8 *)(v97 + 8 * v52);
          uint64_t v60 = v98 + 8 * (v39 - v105);
          char v61 = v41 < 0x10 || v42;
          if ((v61 & 1) != 0 || v104 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v58;
            char v113 = v41;
            char v114 = v104;
            unsigned int v109 = v93;
            unsigned int v110 = v39 - v36;
            block[6] = v59;
            uint64_t v107 = v98 + 8 * (v39 - v105);
            uint64_t v108 = a11;
            unsigned int v111 = v99;
            unsigned int v112 = v40;
            if (v42)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v71 = *(_DWORD *)(*(void *)(result + 208) + 52);
              unint64_t v72 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v116, 128, (unint64_t)v58, *v59, v71)];
              unint64_t v73 = v72
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v117, 128, v72, v59[1], v71);
              unint64_t v74 = v73
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v118, 128, v73, v59[2], v71);
              unint64_t v75 = v74
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v119, 128, v74, v59[3], v71);
              unint64_t v76 = v75
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v120, 128, v75, v59[4], v71);
              unint64_t v77 = v76
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v121, 128, v76, v59[5], v71);
              uint64_t v78 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v122, 128, v77, v59[6], v71);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v123, 128, v77 + v78, v59[7], v71);
              unint64_t v79 = v111;
              if (v111)
              {
                unint64_t v80 = 0;
                uint64_t v81 = &v116[128 * (unint64_t)v109 + 8 * v110];
                unsigned int v82 = v112;
                do
                {
                  if (v82)
                  {
                    uint64_t v83 = 0;
                    uint64_t v84 = v107 + v108 * v80;
                    do
                    {
                      *(unsigned char *)(v84 + v83) = v81[v83];
                      ++v83;
                      unsigned int v82 = v112;
                    }
                    while (8 * (unint64_t)v112 > v83);
                    unint64_t v79 = v111;
                  }
                  ++v80;
                  v81 += 128;
                }
                while (v80 < v79);
              }
            }
          }
          else
          {
            int v62 = *(_DWORD *)(*(void *)(result + 208) + 52);
            unint64_t v63 = (unint64_t)&v58[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60, a11, (unint64_t)v58, *v59, v62)];
            unint64_t v64 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + 64, a11, v63, v59[1], v62);
            unint64_t v65 = v64
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + v92, a11, v64, v59[2], v62);
            unint64_t v66 = v65
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + v92 + 64, a11, v65, v59[3], v62);
            unint64_t v67 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + v91, a11, v66, v59[4], v62);
            unint64_t v68 = v67
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v60 + v91 + 64, a11, v67, v59[5], v62);
            uint64_t v69 = v60 + 12 * a11;
            uint64_t v70 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v69, a11, v68, v59[6], v62);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v69 + 64, a11, v68 + v70, v59[7], v62);
          }
          unint64_t v35 = v37;
          uint64_t result = v103;
        }
        while (v37 != (v94 >> 4) + 1);
        ++v24;
      }
      while (v24 != v85);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          int v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            int v51 = (int64x2_t *)__dst;
          }
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          BOOL v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              unint64_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              unint64_t v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              int v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              size_t v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              uint64_t v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                unsigned int v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            int v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            int v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            char v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            unint64_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            unint64_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            uint64_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            int v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          int v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            int v51 = (int64x2_t *)__dst;
          }
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          BOOL v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              unint64_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              unint64_t v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              int v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              size_t v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              uint64_t v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                unsigned int v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            int v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            int v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            char v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            unint64_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            unint64_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            uint64_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            int v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + 768 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          char v54 = (float32x4_t *)(v120 + 4 * (v33 - a7));
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[4 * (unint64_t)v131].i8[4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + 2, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v54 + v114), a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v54 + v114 + 32), a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v54 + v113), a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((float32x4_t *)((char *)v54 + v113 + 32), a11, v69, v53[5], v56, v70, v71);
            int32x4_t v73 = (float32x4_t *)((char *)v54 + 12 * a11);
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73 + 2, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + 640 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          char v54 = (float32x4_t *)(v120 + 4 * (v33 - a7));
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[4 * (unint64_t)v131].i8[4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + 2, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v54 + v114), a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v54 + v114 + 32), a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v54 + v113), a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((float32x4_t *)((char *)v54 + v113 + 32), a11, v69, v53[5], v56, v70, v71);
            int32x4_t v73 = (float32x4_t *)((char *)v54 + 12 * a11);
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73 + 2, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + (v29 << 9));
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          char v54 = (float32x4_t *)(v120 + 4 * (v33 - a7));
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[4 * (unint64_t)v131].i8[4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + 2, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v54 + v114), a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v54 + v114 + 32), a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v54 + v113), a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((float32x4_t *)((char *)v54 + v113 + 32), a11, v69, v53[5], v56, v70, v71);
            int32x4_t v73 = (float32x4_t *)((char *)v54 + 12 * a11);
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73 + 2, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          unint64_t v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            unint64_t v51 = (int64x2_t *)__dst;
          }
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          BOOL v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              int32x4_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              uint64_t v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              uint64_t v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              uint64_t v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              uint64_t v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                int32x4_t v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            char v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            int32x4_t v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            int32x4_t v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            int32x4_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            int32x4_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            int32x4_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            int32x4_t v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v143 = *MEMORY[0x263EF8340];
  size_t v108 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v120 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v107 = a8 + a10 - 1;
  unsigned int v19 = v107 >> 4;
  if (*(void *)(v15 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v115 = v24;
  if (v18 <= v19)
  {
    unsigned int v114 = a7 + a9 - 1;
    if (a7 >> 4 <= v114 >> 4)
    {
      uint64_t v122 = (a5 - 1) >> 4;
      uint64_t v106 = (a6 - 1) >> 4;
      int v121 = ((a5 - 1) & 0xF) + 1;
      int v105 = ((a6 - 1) & 0xF) + 1;
      uint64_t v110 = 8 * a11;
      uint64_t v111 = 4 * a11;
      uint64_t v104 = v19 + 1;
      uint64_t v113 = v15;
      do
      {
        unsigned int v25 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v120) {
          unsigned int v26 = v120;
        }
        else {
          unsigned int v26 = 16 * v18;
        }
        if (v107 < v25) {
          unsigned int v25 = v107;
        }
        unsigned int v112 = v26 - 16 * v18;
        int v119 = v25 - v26 + 1;
        int v27 = v105;
        if (v18 != v106) {
          int v27 = 16;
        }
        unsigned int v123 = v27;
        uint64_t v118 = a2 + (v26 - v120) * a11;
        unint64_t v28 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v29 = 16 * v28;
          unint64_t v30 = v28 + 1;
          unsigned int v31 = 16 * (v28 + 1) - 1;
          if (16 * (int)v28 <= a7) {
            unsigned int v32 = a7;
          }
          else {
            unsigned int v32 = 16 * v28;
          }
          if (v114 < v31) {
            unsigned int v31 = a7 + a9 - 1;
          }
          int v33 = v31 - v32 + 1;
          if (v28 == v122) {
            unsigned int v34 = v121;
          }
          else {
            unsigned int v34 = 16;
          }
          BOOL v35 = 1;
          if (16 * (int)v18 >= v120 && v29 >= a7)
          {
            int v36 = v121;
            if (v28 != v122) {
              int v36 = 16;
            }
            BOOL v35 = v33 != v36 || v119 != v123;
          }
          unsigned int v38 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v38 <= 1) {
            unsigned int v38 = 1;
          }
          unsigned int v39 = v38 + 15;
          if (v39 < 0x20) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = 32 - __clz(~(-1 << -(char)__clz((v39 >> 4) - 1)));
          }
          unsigned int v41 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v41 <= 1) {
            unsigned int v41 = 1;
          }
          unsigned int v42 = v41 + 15;
          if (v42 < 0x20)
          {
            unsigned int v43 = 0;
            if (!v40)
            {
LABEL_69:
              unint64_t v45 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v43 = 32 - __clz(~(-1 << -(char)__clz((v42 >> 4) - 1)));
            if (!(v43 | v40)) {
              goto LABEL_69;
            }
          }
          int v44 = 0;
          unint64_t v45 = 0;
          BOOL v46 = v40 != 0;
          BOOL v47 = v43 != 0;
          int v48 = 1;
          do
          {
            --v40;
            BOOL v49 = !v46;
            if (v46)
            {
              unint64_t v50 = ((unint64_t)(v48 & v28) << v44) | v45;
            }
            else
            {
              unsigned int v40 = 0;
              unint64_t v50 = v45;
            }
            if (!v49) {
              ++v44;
            }
            --v43;
            if (v47)
            {
              unint64_t v45 = ((unint64_t)(v48 & v18) << v44) | v50;
            }
            else
            {
              unsigned int v43 = 0;
              unint64_t v45 = v50;
            }
            if (v47) {
              ++v44;
            }
            v48 *= 2;
            --v44;
            BOOL v47 = v43 != 0;
            BOOL v46 = v40 != 0;
          }
          while (v43 | v40);
LABEL_70:
          unint64_t v51 = (int64x2_t *)(a3 + v18 * v108 + (v28 << 10));
          if (v115)
          {
            memcpy(__dst, v51, sizeof(__dst));
            unint64_t v51 = (int64x2_t *)__dst;
          }
          unint64_t v52 = (unsigned __int8 *)(a4 + 8 * v45);
          BOOL v53 = (int64x2_t *)(v118 + 4 * (v32 - a7));
          char v54 = v34 < 0x10 || v35;
          if ((v54 & 1) != 0 || v123 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh1ELNS7_13SubblockOrderE1EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = v113;
            block[5] = v51;
            char v132 = v34;
            char v133 = v123;
            unsigned int v128 = v112;
            int v129 = v32 - v29;
            block[6] = v52;
            uint64_t v126 = v118 + 4 * (v32 - a7);
            uint64_t v127 = a11;
            unsigned int v130 = v119;
            unsigned int v131 = v33;
            if (v35)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(v113 + 8) + 7384), block);
              uint64_t v15 = v113;
            }
            else
            {
              int32x4_t v77 = (int64x2_t *)((char *)v51
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v135, 64, v51, *v52, v16, v17));
              uint64_t v80 = (int64x2_t *)((char *)v77
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v136, 64, v77, v52[1], v78, v79));
              uint64_t v83 = (int64x2_t *)((char *)v80
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v137, 64, v80, v52[2], v81, v82));
              uint64_t v86 = (int64x2_t *)((char *)v83
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v138, 64, v83, v52[3], v84, v85));
              uint64_t v89 = (int64x2_t *)((char *)v86
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v139, 64, v86, v52[4], v87, v88));
              uint64_t v92 = (int64x2_t *)((char *)v89
                                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v140, 64, v89, v52[5], v90, v91));
              uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v141, 64, v92, v52[6], v93, v94);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v142, 64, (int64x2_t *)((char *)v92 + v95), v52[7], v96, v97);
              unint64_t v98 = v130;
              uint64_t v15 = v113;
              if (v130)
              {
                unint64_t v99 = 0;
                int32x4_t v100 = &v135[4 * (unint64_t)v128].i8[4 * v129];
                unsigned int v101 = v131;
                do
                {
                  if (v101)
                  {
                    uint64_t v102 = 0;
                    uint64_t v103 = v126 + v127 * v99;
                    do
                    {
                      *(unsigned char *)(v103 + v102) = v100[v102];
                      ++v102;
                      unsigned int v101 = v131;
                    }
                    while (4 * (unint64_t)v131 > v102);
                    unint64_t v98 = v130;
                  }
                  ++v99;
                  v100 += 64;
                }
                while (v99 < v98);
              }
            }
          }
          else
          {
            char v55 = (int64x2_t *)((char *)v51
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53, a11, v51, *v52, v16, v17));
            int32x4_t v58 = (int64x2_t *)((char *)v55
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v53 + 2, a11, v55, v52[1], v56, v57));
            int32x4_t v61 = (int64x2_t *)((char *)v58
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111), a11, v58, v52[2], v59, v60));
            int32x4_t v64 = (int64x2_t *)((char *)v61
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v111 + 32), a11, v61, v52[3], v62, v63));
            int32x4_t v67 = (int64x2_t *)((char *)v64
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110), a11, v64, v52[4], v65, v66));
            int32x4_t v70 = (int64x2_t *)((char *)v67
                              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock((int64x2_t *)((char *)v53 + v110 + 32), a11, v67, v52[5], v68, v69));
            int32x4_t v71 = (int64x2_t *)((char *)v53 + 12 * a11);
            uint64_t v74 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71, a11, v70, v52[6], v72, v73);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(v71 + 2, a11, (int64x2_t *)((char *)v70 + v74), v52[7], v75, v76);
            uint64_t v15 = v113;
          }
          unint64_t v28 = v30;
        }
        while (v30 != (v114 >> 4) + 1);
        ++v18;
      }
      while (v18 != v104);
    }
  }
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + 640 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + (v29 << 9));
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint2EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  v145[28] = *MEMORY[0x263EF8340];
  size_t v111 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v122 = a8;
  uint64_t v18 = a8 >> 4;
  unsigned int v110 = a8 + a10 - 1;
  unsigned int v19 = v110 >> 4;
  uint64_t v125 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v117 = v24;
  uint64_t result = a1;
  if (v18 <= v19)
  {
    unsigned int v116 = a7 + a9 - 1;
    if (a7 >> 4 <= v116 >> 4)
    {
      uint64_t v124 = (a5 - 1) >> 4;
      uint64_t v109 = (a6 - 1) >> 4;
      int v123 = ((a5 - 1) & 0xF) + 1;
      int v108 = ((a6 - 1) & 0xF) + 1;
      uint64_t v113 = 8 * a11;
      uint64_t v114 = 4 * a11;
      uint64_t v107 = v19 + 1;
      do
      {
        unsigned int v26 = (16 * v18) | 0xF;
        if (16 * (int)v18 <= v122) {
          unsigned int v27 = v122;
        }
        else {
          unsigned int v27 = 16 * v18;
        }
        if (v110 < v26) {
          unsigned int v26 = v110;
        }
        unsigned int v115 = v27 - 16 * v18;
        int v121 = v26 - v27 + 1;
        int v28 = v108;
        if (v18 != v109) {
          int v28 = 16;
        }
        unsigned int v126 = v28;
        uint64_t v120 = a2 + (v27 - v122) * a11;
        unint64_t v29 = (unint64_t)a7 >> 4;
        do
        {
          unint64_t v30 = 16 * v29;
          unint64_t v31 = v29 + 1;
          unsigned int v32 = 16 * (v29 + 1) - 1;
          if (16 * (int)v29 <= a7) {
            unsigned int v33 = a7;
          }
          else {
            unsigned int v33 = 16 * v29;
          }
          if (v116 < v32) {
            unsigned int v32 = a7 + a9 - 1;
          }
          int v34 = v32 - v33 + 1;
          if (v29 == v124) {
            unsigned int v35 = v123;
          }
          else {
            unsigned int v35 = 16;
          }
          BOOL v36 = 1;
          if (16 * (int)v18 >= v122 && v30 >= a7)
          {
            int v37 = v123;
            if (v29 != v124) {
              int v37 = 16;
            }
            BOOL v36 = v34 != v37 || v121 != v126;
          }
          unsigned int v39 = *(_DWORD *)(result + 128) >> (*(unsigned char *)(result + 144) + a12);
          if (v39 <= 1) {
            unsigned int v39 = 1;
          }
          unsigned int v40 = v39 + 15;
          if (v40 < 0x20) {
            unsigned int v41 = 0;
          }
          else {
            unsigned int v41 = 32 - __clz(~(-1 << -(char)__clz((v40 >> 4) - 1)));
          }
          unsigned int v42 = *(_DWORD *)(result + 132) >> (*(unsigned char *)(result + 144) + a12);
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
          unsigned int v43 = v42 + 15;
          if (v43 < 0x20)
          {
            unsigned int v44 = 0;
            if (!v41)
            {
LABEL_69:
              unint64_t v46 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            unsigned int v44 = 32 - __clz(~(-1 << -(char)__clz((v43 >> 4) - 1)));
            if (!(v44 | v41)) {
              goto LABEL_69;
            }
          }
          int v45 = 0;
          unint64_t v46 = 0;
          BOOL v47 = v41 != 0;
          BOOL v48 = v44 != 0;
          int v49 = 1;
          do
          {
            --v41;
            BOOL v50 = !v47;
            if (v47)
            {
              unint64_t v51 = ((unint64_t)(v49 & v29) << v45) | v46;
            }
            else
            {
              unsigned int v41 = 0;
              unint64_t v51 = v46;
            }
            if (!v50) {
              ++v45;
            }
            --v44;
            if (v48)
            {
              unint64_t v46 = ((unint64_t)(v49 & v18) << v45) | v51;
            }
            else
            {
              unsigned int v44 = 0;
              unint64_t v46 = v51;
            }
            if (v48) {
              ++v45;
            }
            v49 *= 2;
            --v45;
            BOOL v48 = v44 != 0;
            BOOL v47 = v41 != 0;
          }
          while (v44 | v41);
LABEL_70:
          unint64_t v52 = (unsigned char *)(a3 + v18 * v111 + 384 * v29);
          if (v117)
          {
            memcpy(__dst, v52, sizeof(__dst));
            uint64_t result = v125;
            unint64_t v52 = __dst;
          }
          BOOL v53 = (unsigned __int8 *)(a4 + 8 * v46);
          uint64_t v54 = v120 + 4 * (v33 - a7);
          char v55 = v35 < 0x10 || v36;
          if ((v55 & 1) != 0 || v126 <= 0xF)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE6ELj1ELh0ELNS7_13SubblockOrderE1EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder3EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = result;
            block[5] = v52;
            char v135 = v35;
            char v136 = v126;
            unsigned int v131 = v115;
            unsigned int v132 = v33 - v30;
            block[6] = v53;
            uint64_t v129 = v120 + 4 * (v33 - a7);
            uint64_t v130 = a11;
            unsigned int v133 = v121;
            unsigned int v134 = v34;
            if (v36)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(result + 8) + 7384), block);
            }
            else
            {
              int v79 = *(_DWORD *)(*(void *)(result + 208) + 52);
              uint64_t v80 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v138, 64, (uint64_t)v52, *v53, v79, v16, v17)];
              uint64_t v83 = v80
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v139, 64, v80, v53[1], v79, v81, v82);
              uint64_t v86 = v83
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v140, 64, v83, v53[2], v79, v84, v85);
              uint64_t v89 = v86
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v141, 64, v86, v53[3], v79, v87, v88);
              uint64_t v92 = v89
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v142, 64, v89, v53[4], v79, v90, v91);
              uint64_t v95 = v92
                  + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v143, 64, v92, v53[5], v79, v93, v94);
              uint64_t v98 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v144, 64, v95, v53[6], v79, v96, v97);
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v145, 64, v95 + v98, v53[7], v79, v99, v100);
              unint64_t v101 = v133;
              if (v133)
              {
                unint64_t v102 = 0;
                uint64_t v103 = &v138[64 * (unint64_t)v131 + 4 * v132];
                unsigned int v104 = v134;
                do
                {
                  if (v104)
                  {
                    uint64_t v105 = 0;
                    uint64_t v106 = v129 + v130 * v102;
                    do
                    {
                      *(unsigned char *)(v106 + v105) = v103[v105];
                      ++v105;
                      unsigned int v104 = v134;
                    }
                    while (4 * (unint64_t)v134 > v105);
                    unint64_t v101 = v133;
                  }
                  ++v102;
                  v103 += 64;
                }
                while (v102 < v101);
              }
            }
          }
          else
          {
            int v56 = *(_DWORD *)(*(void *)(result + 208) + 52);
            uint64_t v57 = (uint64_t)&v52[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54, a11, (uint64_t)v52, *v53, v56, v16, v17)];
            uint64_t v60 = v57
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + 32, a11, v57, v53[1], v56, v58, v59);
            uint64_t v63 = v60
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v114, a11, v60, v53[2], v56, v61, v62);
            uint64_t v66 = v63
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v114 + 32, a11, v63, v53[3], v56, v64, v65);
            uint64_t v69 = v66
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v113, a11, v66, v53[4], v56, v67, v68);
            uint64_t v72 = v69
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v54 + v113 + 32, a11, v69, v53[5], v56, v70, v71);
            uint64_t v73 = v54 + 12 * a11;
            uint64_t v76 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73, a11, v72, v53[6], v56, v74, v75);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)6,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(v73 + 32, a11, v72 + v76, v53[7], v56, v77, v78);
          }
          unint64_t v29 = v31;
          uint64_t result = v125;
        }
        while (v31 != (v116 >> 4) + 1);
        ++v18;
      }
      while (v18 != v107);
    }
  }
  return result;
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v132 = v21;
  uint64_t v133 = v22;
  uint64_t v121 = v23;
  uint64_t v24 = v12;
  uint64_t v160 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v137 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v120 = v14 + a10 - 1;
  unsigned int v122 = v120 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v140 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v131 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v130 = isLevelTiled;
  if (v25 <= v122)
  {
    unsigned int v129 = v16 + a9 - 1;
    unsigned int v119 = v16 >> 4;
    if (v16 >> 4 <= v129 >> 4)
    {
      unsigned int v116 = v20 - 1;
      unsigned int v118 = (v18 - 1) >> 3;
      int v138 = ((v20 - 1) & 0xF) + 1;
      unsigned int v139 = (v20 - 1) >> 4;
      int v117 = ((v18 - 1) & 7) + 1;
      uint64_t v123 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v128 = v36.i32[0] | v36.i32[1];
      int8x8_t v127 = v36;
      BOOL v125 = v36.i32[1] != 0;
      BOOL v126 = v36.i32[0] != 0;
      unint64_t v115 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (8 * v25) | 7;
        if (8 * v25 <= v137) {
          int v38 = v137;
        }
        else {
          int v38 = 8 * v25;
        }
        unsigned int v39 = v119;
        if (v120 < v37) {
          unsigned int v37 = v120;
        }
        int v124 = v38 - 8 * v25;
        int v135 = v37 - v38 + 1;
        unsigned int v136 = 8 * v25;
        int v40 = v117;
        if (v25 != v118) {
          int v40 = 8;
        }
        unsigned int v141 = v40;
        uint64_t v134 = v121 + (v38 - v137) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v129 < v42) {
            unsigned int v42 = v129;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v139) {
            unsigned int v45 = v138;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v136 >= v137 && v41 >= v16)
          {
            int v47 = v138;
            if (v39 != v139) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v135 != v141;
          }
          if (v130)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v115 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v104 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v105 = 0;
            }
            else {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
            }
            unsigned int v106 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v107 = 0;
              if (v105) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
              if (v107 | v105)
              {
LABEL_121:
                int v108 = 0;
                uint64_t v109 = 0;
                int v110 = v39 & v104;
                int v111 = v25 & v106;
                BOOL v112 = v107 != 0;
                BOOL v113 = v105 != 0;
                int v114 = 1;
                do
                {
                  --v107;
                  if (v112) {
                    v109 |= (unint64_t)(v114 & v111) << v108++;
                  }
                  else {
                    unsigned int v107 = 0;
                  }
                  --v105;
                  if (v113) {
                    v109 |= (unint64_t)(v114 & v110) << v108++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v114 *= 2;
                  --v108;
                  BOOL v113 = v105 != 0;
                  BOOL v112 = v107 != 0;
                }
                while (v105 | v107);
                goto LABEL_133;
              }
            }
            uint64_t v109 = 0;
LABEL_133:
            unint64_t v56 = ((unint64_t)(v41 / v70 + v136 / v74 * ((v70 + v116) / v70)) << 14) + (v109 << 10);
            goto LABEL_60;
          }
          if (v128)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v125;
            BOOL v53 = v126;
            __int32 v54 = v127.i32[0];
            __int32 v55 = v127.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 10;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          int32x4_t v75 = (unsigned char *)(v132 + v56);
          if (v131)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v132 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v140;
            int32x4_t v75 = __dst;
          }
          int32x4_t v78 = (unsigned __int8 *)(v133 + 8 * v64);
          uint64_t v79 = v16;
          uint64_t v80 = (_OWORD *)(v134 + 16 * (v43 - v16));
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v141 > 7)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80 + 4, a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v123), a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v123 + 64), a11, v85, v78[3], v82);
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80 + 8, a11, v86, v78[4], v82);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80 + 12, a11, v87, v78[5], v82);
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v123 + 128), a11, v88, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((_OWORD *)((char *)v80 + v123 + 192), a11, v88 + v89, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v149 = v45;
          char v150 = v141;
          unsigned int v145 = v124;
          unsigned int v146 = v43 - v41;
          block[6] = v78;
          uint64_t v143 = v80;
          uint64_t v144 = a11;
          unsigned int v147 = v135;
          unsigned int v148 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v90 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v91 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v152, 256, (unint64_t)v75, *v78, v90)];
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v153, 256, v91, v78[1], v90);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v156, 256, v92, v78[2], v90);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v157, 256, v93, v78[3], v90);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v154, 256, v94, v78[4], v90);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v155, 256, v95, v78[5], v90);
          uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v158, 256, v96, v78[6], v90);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v159, 256, v96 + v97, v78[7], v90);
          unint64_t v98 = v147;
          uint64_t v16 = v79;
          if (v147)
          {
            unint64_t v99 = 0;
            int32x4_t v100 = &v152[16 * (unint64_t)v145 + v146];
            unsigned int v101 = v148;
            do
            {
              if (v101)
              {
                uint64_t v102 = 0;
                uint64_t v103 = (char *)v143 + v144 * v99;
                do
                {
                  v103[v102] = *((unsigned char *)v100 + v102);
                  ++v102;
                  unsigned int v101 = v148;
                }
                while (16 * (unint64_t)v148 > v102);
                unint64_t v98 = v147;
              }
              ++v99;
              v100 += 16;
            }
            while (v99 < v98);
          }
LABEL_28:
          BOOL v29 = v39++ == v129 >> 4;
          uint64_t v34 = v140;
        }
        while (!v29);
        BOOL v29 = v25++ == v122;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v135 = v21;
  uint64_t v136 = v22;
  uint64_t v123 = v23;
  uint64_t v24 = v12;
  uint64_t v163 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v140 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v122 = v14 + a10 - 1;
  unsigned int v124 = v122 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v143 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v134 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v133 = isLevelTiled;
  if (v25 <= v124)
  {
    unsigned int v132 = v16 + a9 - 1;
    unsigned int v121 = v16 >> 3;
    if (v16 >> 3 <= v132 >> 3)
    {
      unsigned int v118 = v20 - 1;
      unsigned int v120 = (v18 - 1) >> 3;
      int v141 = ((v20 - 1) & 7) + 1;
      unsigned int v142 = (v20 - 1) >> 3;
      int v119 = ((v18 - 1) & 7) + 1;
      uint64_t v125 = 4 * a11;
      uint64_t v126 = 2 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v131 = v36.i32[0] | v36.i32[1];
      BOOL v129 = v36.i32[1] != 0;
      int8x8_t v130 = v36;
      BOOL v128 = v36.i32[0] != 0;
      unint64_t v117 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (8 * v25) | 7;
        if (8 * v25 <= v140) {
          int v38 = v140;
        }
        else {
          int v38 = 8 * v25;
        }
        unsigned int v39 = v121;
        if (v122 < v37) {
          unsigned int v37 = v122;
        }
        int v127 = v38 - 8 * v25;
        int v138 = v37 - v38 + 1;
        unsigned int v139 = 8 * v25;
        int v40 = v119;
        if (v25 != v120) {
          int v40 = 8;
        }
        unsigned int v144 = v40;
        uint64_t v137 = v123 + (v38 - v140) * a11;
        do
        {
          unsigned int v41 = 8 * v39;
          unsigned int v42 = 8 * (v39 + 1) - 1;
          if (8 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 8 * v39;
          }
          if (v132 < v42) {
            unsigned int v42 = v132;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v142) {
            unsigned int v45 = v141;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (v139 >= v140 && v41 >= v16)
          {
            int v47 = v141;
            if (v39 != v142) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v138 != v144;
          }
          if (v133)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v117 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v106 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v107 = 0;
            }
            else {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
            }
            unsigned int v108 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v109 = 0;
              if (v107) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v109 = 32 - __clz(~(-1 << -(char)__clz(v108)));
              if (v109 | v107)
              {
LABEL_121:
                int v110 = 0;
                uint64_t v111 = 0;
                int v112 = v39 & v106;
                int v113 = v25 & v108;
                BOOL v114 = v107 != 0;
                BOOL v115 = v109 != 0;
                int v116 = 1;
                do
                {
                  --v107;
                  if (v114) {
                    v111 |= (unint64_t)(v116 & v112) << v110++;
                  }
                  else {
                    unsigned int v107 = 0;
                  }
                  --v109;
                  if (v115) {
                    v111 |= (unint64_t)(v116 & v113) << v110++;
                  }
                  else {
                    unsigned int v109 = 0;
                  }
                  v116 *= 2;
                  --v110;
                  BOOL v115 = v109 != 0;
                  BOOL v114 = v107 != 0;
                }
                while (v109 | v107);
                goto LABEL_133;
              }
            }
            uint64_t v111 = 0;
LABEL_133:
            unint64_t v56 = ((unint64_t)(v41 / v70 + v139 / v74 * ((v70 + v118) / v70)) << 14) + (v111 << 10);
            goto LABEL_60;
          }
          if (v131)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v128;
            BOOL v53 = v129;
            __int32 v55 = v130.i32[0];
            __int32 v54 = v130.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 10;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          int32x4_t v75 = (unsigned char *)(v135 + v56);
          if (v134)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v135 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v143;
            int32x4_t v75 = __dst;
          }
          int32x4_t v78 = (unsigned __int8 *)(v136 + 8 * v64);
          uint64_t v79 = v16;
          uint64_t v80 = (int16x8_t *)(v137 + 32 * (v43 - v16));
          char v81 = v45 < 8 || v46;
          if ((v81 & 1) == 0 && v144 > 7)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((int16x8_t *)((char *)v80 + v126), a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v80 + 8, a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((int16x8_t *)((char *)v80 + v126 + 128), a11, v85, v78[3], v82);
            unint64_t v87 = (int16x8_t *)((char *)v80 + v125);
            unint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock((int16x8_t *)((char *)v80 + v125), a11, v86, v78[4], v82);
            uint64_t v89 = (int16x8_t *)((char *)v80 + 6 * a11);
            unint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v89, a11, v88, v78[5], v82);
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v87 + 8, a11, v90, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v89 + 8, a11, v90 + v91, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE19ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint1EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v152 = v45;
          char v153 = v144;
          unsigned int v148 = v127;
          unsigned int v149 = v43 - v41;
          block[6] = v78;
          unsigned int v146 = v80;
          uint64_t v147 = a11;
          unsigned int v150 = v138;
          unsigned int v151 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v92 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v93 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v155, 256, (unint64_t)v75, *v78, v92)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v157, 256, v93, v78[1], v92);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v156, 256, v94, v78[2], v92);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v158, 256, v95, v78[3], v92);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v159, 256, v96, v78[4], v92);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v161, 256, v97, v78[5], v92);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v160, 256, v98, v78[6], v92);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)1>::decompressSubblock(v162, 256, v98 + v99, v78[7], v92);
          unint64_t v100 = v150;
          uint64_t v16 = v79;
          if (v150)
          {
            unint64_t v101 = 0;
            uint64_t v102 = &v155[16 * (unint64_t)v148 + 2 * v149];
            unsigned int v103 = v151;
            do
            {
              if (v103)
              {
                uint64_t v104 = 0;
                unsigned int v105 = &v146->i8[v147 * v101];
                do
                {
                  v105[v104] = v102->i8[v104];
                  ++v104;
                  unsigned int v103 = v151;
                }
                while (32 * (unint64_t)v151 > v104);
                unint64_t v100 = v150;
              }
              ++v101;
              v102 += 16;
            }
            while (v101 < v100);
          }
LABEL_28:
          BOOL v29 = v39++ == v132 >> 3;
          uint64_t v34 = v143;
        }
        while (!v29);
        BOOL v29 = v25++ == v124;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v298 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v252 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v234 = a8 + a10 - 1;
  unsigned int v236 = v234 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v246 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v236)
  {
    unsigned int v244 = a7 + a9 - 1;
    if (a7 >> 4 <= v244 >> 4)
    {
      unsigned int v25 = (a5 - 1) >> 4;
      unsigned int v233 = (a6 - 1) >> 3;
      int v253 = ((a5 - 1) & 0xF) + 1;
      unsigned int v231 = a5 - 1;
      int v232 = ((a6 - 1) & 7) + 1;
      uint64_t v237 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v243 = v27.i32[0] | v27.i32[1];
      int8x8_t v241 = v27;
      BOOL v239 = v27.i32[1] != 0;
      BOOL v240 = v27.i32[0] != 0;
      unint64_t v230 = 8 * v19 * (unint64_t)v18;
      uint64_t v255 = 2 * a11;
      unsigned int v242 = v25;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v252) {
          int v29 = v252;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = a7 >> 4;
        if (v234 < v28) {
          unsigned int v28 = v234;
        }
        int v238 = v29 - 8 * v17;
        int v250 = v28 - v29 + 1;
        unsigned int v251 = 8 * v17;
        int v31 = v232;
        if (v17 != v233) {
          int v31 = 8;
        }
        unsigned int v254 = v31;
        uint64_t v249 = a2 + (v29 - v252) * a11;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v244 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v25) {
            unsigned int v37 = v253;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v251 >= v252 && v33 >= a7)
          {
            int v39 = v253;
            if (v30 != v25) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v250 != v254;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v230 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v219 = (v60 >> 4) - 1;
            if (v62) {
              unsigned int v220 = 0;
            }
            else {
              unsigned int v220 = 32 - __clz(~(-1 << -(char)__clz(v219)));
            }
            unsigned int v221 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v222 = 0;
              if (v220) {
                goto LABEL_264;
              }
            }
            else
            {
              unsigned int v222 = 32 - __clz(~(-1 << -(char)__clz(v221)));
              if (v222 | v220)
              {
LABEL_264:
                int v223 = 0;
                uint64_t v224 = 0;
                int v225 = v30 & v219;
                int v226 = v17 & v221;
                BOOL v227 = v222 != 0;
                BOOL v228 = v220 != 0;
                int v229 = 1;
                do
                {
                  --v222;
                  if (v227) {
                    v224 |= (unint64_t)(v229 & v226) << v223++;
                  }
                  else {
                    unsigned int v222 = 0;
                  }
                  --v220;
                  if (v228) {
                    v224 |= (unint64_t)(v229 & v225) << v223++;
                  }
                  else {
                    unsigned int v220 = 0;
                  }
                  v229 *= 2;
                  --v223;
                  BOOL v228 = v220 != 0;
                  BOOL v227 = v222 != 0;
                }
                while (v220 | v222);
                goto LABEL_276;
              }
            }
            uint64_t v224 = 0;
LABEL_276:
            unint64_t v48 = ((unint64_t)(v33 / v60 + v251 / v64 * ((v60 + v231) / v60)) << 14) + (v224 << 7);
            goto LABEL_60;
          }
          if (v243)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v239;
            BOOL v45 = v240;
            __int32 v46 = v241.i32[0];
            __int32 v47 = v241.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 7;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_82:
              uint64_t v56 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_82;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v30) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v17) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_83:
          BOOL v65 = (_OWORD *)(a3 + v48);
          if (v246)
          {
            long long v66 = v65[13];
            v265[12] = v65[12];
            v265[13] = v66;
            long long v67 = v65[15];
            v265[14] = v65[14];
            v265[15] = v67;
            long long v68 = v65[9];
            v265[8] = v65[8];
            v265[9] = v68;
            long long v69 = v65[11];
            v265[10] = v65[10];
            v265[11] = v69;
            long long v70 = v65[5];
            v265[4] = v65[4];
            v265[5] = v70;
            long long v71 = v65[7];
            v265[6] = v65[6];
            v265[7] = v71;
            long long v72 = v65[1];
            v265[0] = *v65;
            v265[1] = v72;
            long long v73 = v65[2];
            long long v74 = v65[3];
            BOOL v65 = v265;
            v265[2] = v73;
            v265[3] = v74;
          }
          int32x4_t v75 = (unsigned __int8 *)(a4 + 8 * v56);
          int v76 = (int32x2_t *)(v249 + 2 * (v35 - a7));
          char v77 = v37 < 0x10 || v38;
          if ((v77 & 1) == 0 && v254 > 7)
          {
            uint64_t v78 = *(void *)(a1 + 208);
            int v79 = *(_DWORD *)(v78 + 52);
            unsigned int v80 = *v75;
            if (*v75)
            {
              if (v80 < 0xF0)
              {
                if (v80 == 31)
                {
                  int32x2_t v87 = *(int32x2_t *)v65;
                  int32x2_t v88 = *(int32x2_t *)((char *)v65 + 8);
                  int32x2_t v89 = (int32x2_t)v65[1];
                  int32x2_t v90 = *(int32x2_t *)((char *)v65 + 24);
                  *int v76 = vzip1_s32(*(int32x2_t *)v65, v88);
                  *(int32x2_t *)((char *)v76 + a11) = vzip2_s32(v87, v88);
                  uint64_t v91 = (int32x2_t *)((char *)v76 + v255);
                  *uint64_t v91 = vzip1_s32(v89, v90);
                  *(int32x2_t *)((char *)v91 + a11) = vzip2_s32(v89, v90);
                  uint64_t v81 = 32;
                }
                else if (v80 == 96)
                {
                  int8x8_t v86 = vdup_lane_s8(*(int8x8_t *)v65, 0);
                  *int v76 = (int32x2_t)v86;
                  *(int8x8_t *)((char *)v76 + a11) = v86;
                  *(int8x8_t *)((char *)v76 + 2 * a11) = v86;
                  *(int8x8_t *)((char *)v76 + 3 * a11) = v86;
                  uint64_t v81 = 1;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v76, a11, (uint64_t)v65, v80);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v76, a11, (uint64_t)v65, v80, *(_DWORD *)(v78 + 52));
                uint64_t v81 = 16;
              }
            }
            else
            {
              uint64_t v81 = 0;
              *int v76 = 0;
              *(int32x2_t *)((char *)v76 + a11) = 0;
              *(int32x2_t *)((char *)v76 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v76 + 3 * a11) = 0;
            }
            int v92 = (int32x2_t *)((char *)v65 + v81);
            unint64_t v93 = v76 + 1;
            unsigned int v94 = v75[1];
            if (v75[1])
            {
              if (v94 < 0xF0)
              {
                if (v94 == 31)
                {
                  int32x2_t v97 = *v92;
                  int32x2_t v98 = v92[1];
                  int32x2_t v99 = v92[2];
                  int32x2_t v100 = v92[3];
                  *unint64_t v93 = vzip1_s32(*v92, v98);
                  *(int32x2_t *)((char *)v93 + a11) = vzip2_s32(v97, v98);
                  unint64_t v101 = (int32x2_t *)((char *)v93 + v255);
                  *unint64_t v101 = vzip1_s32(v99, v100);
                  *(int32x2_t *)((char *)v101 + a11) = vzip2_s32(v99, v100);
                  uint64_t v95 = 32;
                }
                else if (v94 == 96)
                {
                  int8x8_t v96 = vdup_lane_s8((int8x8_t)*v92, 0);
                  *unint64_t v93 = (int32x2_t)v96;
                  *(int8x8_t *)((char *)v93 + a11) = v96;
                  *(int8x8_t *)((char *)v93 + 2 * a11) = v96;
                  *(int8x8_t *)((char *)v93 + 3 * a11) = v96;
                  uint64_t v95 = 1;
                }
                else
                {
                  uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v93, a11, (uint64_t)v92, v94);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v93, a11, (uint64_t)v92, v94, v79);
                uint64_t v95 = 16;
              }
            }
            else
            {
              uint64_t v95 = 0;
              *unint64_t v93 = 0;
              *(int32x2_t *)((char *)v93 + a11) = 0;
              *(int32x2_t *)((char *)v93 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v93 + 3 * a11) = 0;
            }
            uint64_t v102 = (int32x2_t *)((char *)v92 + v95);
            unsigned int v103 = (int32x2_t *)((char *)v76 + v237);
            unsigned int v104 = v75[2];
            if (v75[2])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 31)
                {
                  int32x2_t v107 = *v102;
                  int32x2_t v108 = v102[1];
                  int32x2_t v109 = v102[2];
                  int32x2_t v110 = v102[3];
                  *unsigned int v103 = vzip1_s32(*v102, v108);
                  *(int32x2_t *)((char *)v103 + a11) = vzip2_s32(v107, v108);
                  uint64_t v111 = (int32x2_t *)((char *)v103 + v255);
                  *uint64_t v111 = vzip1_s32(v109, v110);
                  *(int32x2_t *)((char *)v111 + a11) = vzip2_s32(v109, v110);
                  uint64_t v105 = 32;
                }
                else if (v104 == 96)
                {
                  int8x8_t v106 = vdup_lane_s8((int8x8_t)*v102, 0);
                  *unsigned int v103 = (int32x2_t)v106;
                  *(int8x8_t *)((char *)v103 + a11) = v106;
                  *(int8x8_t *)((char *)v103 + 2 * a11) = v106;
                  *(int8x8_t *)((char *)v103 + 3 * a11) = v106;
                  uint64_t v105 = 1;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x2_t *)((char *)v76 + v237), a11, (uint64_t)v102, v104);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)((char *)v76 + v237), a11, (uint64_t)v102, v104, v79);
                uint64_t v105 = 16;
              }
            }
            else
            {
              uint64_t v105 = 0;
              *unsigned int v103 = 0;
              *(int32x2_t *)((char *)v103 + a11) = 0;
              *(int32x2_t *)((char *)v103 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v103 + 3 * a11) = 0;
            }
            int v112 = (int32x2_t *)((char *)v102 + v105);
            int v113 = v103 + 1;
            unsigned int v114 = v75[3];
            if (v75[3])
            {
              if (v114 < 0xF0)
              {
                if (v114 == 31)
                {
                  int32x2_t v117 = *v112;
                  int32x2_t v118 = v112[1];
                  int32x2_t v119 = v112[2];
                  int32x2_t v120 = v112[3];
                  *int v113 = vzip1_s32(*v112, v118);
                  *(int32x2_t *)((char *)v113 + a11) = vzip2_s32(v117, v118);
                  unsigned int v121 = (int32x2_t *)((char *)v113 + v255);
                  *unsigned int v121 = vzip1_s32(v119, v120);
                  *(int32x2_t *)((char *)v121 + a11) = vzip2_s32(v119, v120);
                  uint64_t v115 = 32;
                }
                else if (v114 == 96)
                {
                  int8x8_t v116 = vdup_lane_s8((int8x8_t)*v112, 0);
                  *int v113 = (int32x2_t)v116;
                  *(int8x8_t *)((char *)v113 + a11) = v116;
                  *(int8x8_t *)((char *)v113 + 2 * a11) = v116;
                  *(int8x8_t *)((char *)v113 + 3 * a11) = v116;
                  uint64_t v115 = 1;
                }
                else
                {
                  uint64_t v115 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v113, a11, (uint64_t)v112, v114);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v113, a11, (uint64_t)v112, v114, v79);
                uint64_t v115 = 16;
              }
            }
            else
            {
              uint64_t v115 = 0;
              *int v113 = 0;
              *(int32x2_t *)((char *)v113 + a11) = 0;
              *(int32x2_t *)((char *)v113 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v113 + 3 * a11) = 0;
            }
            unsigned int v122 = (int32x2_t *)((char *)v112 + v115);
            uint64_t v123 = v76 + 2;
            unsigned int v124 = v75[4];
            if (v75[4])
            {
              if (v124 < 0xF0)
              {
                if (v124 == 31)
                {
                  int32x2_t v127 = *v122;
                  int32x2_t v128 = v122[1];
                  int32x2_t v129 = v122[2];
                  int32x2_t v130 = v122[3];
                  *uint64_t v123 = vzip1_s32(*v122, v128);
                  *(int32x2_t *)((char *)v123 + a11) = vzip2_s32(v127, v128);
                  __int32 v131 = (int32x2_t *)((char *)v123 + v255);
                  *__int32 v131 = vzip1_s32(v129, v130);
                  *(int32x2_t *)((char *)v131 + a11) = vzip2_s32(v129, v130);
                  uint64_t v125 = 32;
                }
                else if (v124 == 96)
                {
                  int8x8_t v126 = vdup_lane_s8((int8x8_t)*v122, 0);
                  *uint64_t v123 = (int32x2_t)v126;
                  *(int8x8_t *)((char *)v123 + a11) = v126;
                  *(int8x8_t *)((char *)v123 + 2 * a11) = v126;
                  *(int8x8_t *)((char *)v123 + 3 * a11) = v126;
                  uint64_t v125 = 1;
                }
                else
                {
                  uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v123, a11, (uint64_t)v122, v124);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v123, a11, (uint64_t)v122, v124, v79);
                uint64_t v125 = 16;
              }
            }
            else
            {
              uint64_t v125 = 0;
              *uint64_t v123 = 0;
              *(int32x2_t *)((char *)v123 + a11) = 0;
              *(int32x2_t *)((char *)v123 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v123 + 3 * a11) = 0;
            }
            unsigned int v132 = (int32x2_t *)((char *)v122 + v125);
            BOOL v133 = v76 + 3;
            unsigned int v134 = v75[5];
            if (v75[5])
            {
              if (v134 < 0xF0)
              {
                if (v134 == 31)
                {
                  int32x2_t v137 = *v132;
                  int32x2_t v138 = v132[1];
                  int32x2_t v139 = v132[2];
                  int32x2_t v140 = v132[3];
                  *BOOL v133 = vzip1_s32(*v132, v138);
                  *(int32x2_t *)((char *)v133 + a11) = vzip2_s32(v137, v138);
                  int v141 = (int32x2_t *)((char *)v133 + v255);
                  *int v141 = vzip1_s32(v139, v140);
                  *(int32x2_t *)((char *)v141 + a11) = vzip2_s32(v139, v140);
                  uint64_t v135 = 32;
                }
                else if (v134 == 96)
                {
                  int8x8_t v136 = vdup_lane_s8((int8x8_t)*v132, 0);
                  *BOOL v133 = (int32x2_t)v136;
                  *(int8x8_t *)((char *)v133 + a11) = v136;
                  *(int8x8_t *)((char *)v133 + 2 * a11) = v136;
                  *(int8x8_t *)((char *)v133 + 3 * a11) = v136;
                  uint64_t v135 = 1;
                }
                else
                {
                  uint64_t v135 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v133, a11, (uint64_t)v132, v134);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v133, a11, (uint64_t)v132, v134, v79);
                uint64_t v135 = 16;
              }
            }
            else
            {
              uint64_t v135 = 0;
              *BOOL v133 = 0;
              *(int32x2_t *)((char *)v133 + a11) = 0;
              *(int32x2_t *)((char *)v133 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v133 + 3 * a11) = 0;
            }
            unsigned int v142 = (int32x2_t *)((char *)v132 + v135);
            uint64_t v143 = v103 + 2;
            unsigned int v144 = v75[6];
            if (v75[6])
            {
              if (v144 < 0xF0)
              {
                if (v144 == 31)
                {
                  int32x2_t v147 = *v142;
                  int32x2_t v148 = v142[1];
                  int32x2_t v149 = v142[2];
                  int32x2_t v150 = v142[3];
                  *uint64_t v143 = vzip1_s32(*v142, v148);
                  *(int32x2_t *)((char *)v143 + a11) = vzip2_s32(v147, v148);
                  unsigned int v151 = (int32x2_t *)((char *)v143 + v255);
                  *unsigned int v151 = vzip1_s32(v149, v150);
                  *(int32x2_t *)((char *)v151 + a11) = vzip2_s32(v149, v150);
                  uint64_t v145 = 32;
                }
                else if (v144 == 96)
                {
                  int8x8_t v146 = vdup_lane_s8((int8x8_t)*v142, 0);
                  *uint64_t v143 = (int32x2_t)v146;
                  *(int8x8_t *)((char *)v143 + a11) = v146;
                  *(int8x8_t *)((char *)v143 + 2 * a11) = v146;
                  *(int8x8_t *)((char *)v143 + 3 * a11) = v146;
                  uint64_t v145 = 1;
                }
                else
                {
                  uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v143, a11, (uint64_t)v142, v144);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)v143, a11, (uint64_t)v142, v144, v79);
                uint64_t v145 = 16;
              }
            }
            else
            {
              uint64_t v145 = 0;
              *uint64_t v143 = 0;
              *(int32x2_t *)((char *)v143 + a11) = 0;
              *(int32x2_t *)((char *)v143 + 2 * a11) = 0;
              *(int32x2_t *)((char *)v143 + 3 * a11) = 0;
            }
            char v152 = (int8x8_t *)&v103[3];
            unsigned int v153 = v75[7];
            if (v75[7])
            {
              uint64_t v154 = (int32x2_t *)((char *)v142 + v145);
              if (v153 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v152, a11, (uint64_t)v154, v153, v79);
                goto LABEL_165;
              }
              if (v153 == 31)
              {
                int32x2_t v156 = *v154;
                int32x2_t v157 = v154[1];
                int32x2_t v158 = v154[2];
                int32x2_t v159 = v154[3];
                *char v152 = (int8x8_t)vzip1_s32(*v154, v157);
                *(int32x2_t *)((char *)v152 + a11) = vzip2_s32(v156, v157);
                uint64_t v160 = (int32x2_t *)((char *)v152 + v255);
                *uint64_t v160 = vzip1_s32(v158, v159);
                *(int32x2_t *)((char *)v160 + a11) = vzip2_s32(v158, v159);
                unsigned int v25 = v242;
              }
              else
              {
                unsigned int v25 = v242;
                if (v153 == 96)
                {
                  int8x8_t v155 = vdup_lane_s8((int8x8_t)*v154, 0);
                  *char v152 = v155;
                  *(int8x8_t *)((char *)v152 + a11) = v155;
                  *(int8x8_t *)((char *)v152 + 2 * a11) = v155;
                  *(int8x8_t *)((char *)v152 + 3 * a11) = v155;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int32x2_t *)v152, a11, (uint64_t)v154, v153);
                }
              }
            }
            else
            {
              *char v152 = 0;
              *(int8x8_t *)((char *)v152 + a11) = 0;
              *(int8x8_t *)((char *)v152 + 2 * a11) = 0;
              *(int8x8_t *)((char *)v152 + 3 * a11) = 0;
LABEL_165:
              unsigned int v25 = v242;
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v263 = v37;
          char v264 = v254;
          int v259 = v238;
          unsigned int v260 = v35 - v33;
          block[6] = a4 + 8 * v56;
          uint64_t v257 = v249 + 2 * (v35 - a7);
          uint64_t v258 = a11;
          unsigned int v261 = v250;
          unsigned int v262 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            goto LABEL_27;
          }
          uint64_t v82 = *(void *)(a1 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v75;
          if (*v75)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 31)
              {
                int32x2_t v161 = *(int32x2_t *)((char *)v65 + 8);
                int32x2_t v162 = (int32x2_t)v65[1];
                int32x2_t v163 = *(int32x2_t *)((char *)v65 + 24);
                int32x2_t v164 = vzip2_s32(*(int32x2_t *)v65, v161);
                int32x2_t v266 = vzip1_s32(*(int32x2_t *)v65, v161);
                int32x2_t v270 = v164;
                int32x2_t v274 = vzip1_s32(v162, v163);
                int32x2_t v278 = vzip2_s32(v162, v163);
                uint64_t v85 = 32;
              }
              else if (v84 == 96)
              {
                int32x2_t v266 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v65, 0);
                int32x2_t v270 = v266;
                int32x2_t v274 = v266;
                int32x2_t v278 = v266;
                uint64_t v85 = 1;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v266, 32, (uint64_t)v65, v84);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v266, 32, (uint64_t)v65, v84, *(_DWORD *)(v82 + 52));
              uint64_t v85 = 16;
            }
          }
          else
          {
            uint64_t v85 = 0;
            int32x2_t v266 = 0;
            int32x2_t v270 = 0;
            int32x2_t v274 = 0;
            int32x2_t v278 = 0;
          }
          char v165 = (int32x2_t *)((char *)v65 + v85);
          unsigned int v166 = v75[1];
          if (v75[1])
          {
            if (v166 < 0xF0)
            {
              if (v166 == 31)
              {
                int32x2_t v168 = v165[1];
                int32x2_t v169 = v165[2];
                int32x2_t v170 = v165[3];
                int32x2_t v171 = vzip2_s32(*v165, v168);
                int32x2_t v267 = vzip1_s32(*v165, v168);
                int32x2_t v271 = v171;
                int32x2_t v275 = vzip1_s32(v169, v170);
                int32x2_t v279 = vzip2_s32(v169, v170);
                uint64_t v167 = 32;
              }
              else if (v166 == 96)
              {
                int32x2_t v267 = (int32x2_t)vdup_lane_s8((int8x8_t)*v165, 0);
                int32x2_t v271 = v267;
                int32x2_t v275 = v267;
                int32x2_t v279 = v267;
                uint64_t v167 = 1;
              }
              else
              {
                uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v267, 32, (uint64_t)v165, v166);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v267, 32, (uint64_t)v165, v166, v83);
              uint64_t v167 = 16;
            }
          }
          else
          {
            uint64_t v167 = 0;
            int32x2_t v267 = 0;
            int32x2_t v271 = 0;
            int32x2_t v275 = 0;
            int32x2_t v279 = 0;
          }
          uint64_t v172 = (int32x2_t *)((char *)v165 + v167);
          unsigned int v173 = v75[2];
          if (v75[2])
          {
            if (v173 < 0xF0)
            {
              if (v173 == 31)
              {
                int32x2_t v175 = v172[1];
                int32x2_t v176 = v172[2];
                int32x2_t v177 = v172[3];
                int32x2_t v178 = vzip2_s32(*v172, v175);
                int32x2_t v282 = vzip1_s32(*v172, v175);
                int32x2_t v286 = v178;
                int32x2_t v290 = vzip1_s32(v176, v177);
                int32x2_t v294 = vzip2_s32(v176, v177);
                uint64_t v174 = 32;
              }
              else if (v173 == 96)
              {
                int32x2_t v282 = (int32x2_t)vdup_lane_s8((int8x8_t)*v172, 0);
                int32x2_t v286 = v282;
                int32x2_t v290 = v282;
                int32x2_t v294 = v282;
                uint64_t v174 = 1;
              }
              else
              {
                uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v282, 32, (uint64_t)v172, v173);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v282, 32, (uint64_t)v172, v173, v83);
              uint64_t v174 = 16;
            }
          }
          else
          {
            uint64_t v174 = 0;
            int32x2_t v282 = 0;
            int32x2_t v286 = 0;
            int32x2_t v290 = 0;
            int32x2_t v294 = 0;
          }
          int v179 = (int32x2_t *)((char *)v172 + v174);
          unsigned int v180 = v75[3];
          if (v75[3])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 31)
              {
                int32x2_t v182 = v179[1];
                int32x2_t v183 = v179[2];
                int32x2_t v184 = v179[3];
                int32x2_t v185 = vzip2_s32(*v179, v182);
                int32x2_t v283 = vzip1_s32(*v179, v182);
                int32x2_t v287 = v185;
                int32x2_t v291 = vzip1_s32(v183, v184);
                int32x2_t v295 = vzip2_s32(v183, v184);
                uint64_t v181 = 32;
              }
              else if (v180 == 96)
              {
                int32x2_t v283 = (int32x2_t)vdup_lane_s8((int8x8_t)*v179, 0);
                int32x2_t v287 = v283;
                int32x2_t v291 = v283;
                int32x2_t v295 = v283;
                uint64_t v181 = 1;
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v283, 32, (uint64_t)v179, v180);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v283, 32, (uint64_t)v179, v180, v83);
              uint64_t v181 = 16;
            }
          }
          else
          {
            uint64_t v181 = 0;
            int32x2_t v283 = 0;
            int32x2_t v287 = 0;
            int32x2_t v291 = 0;
            int32x2_t v295 = 0;
          }
          unsigned int v186 = (int32x2_t *)((char *)v179 + v181);
          unsigned int v187 = v75[4];
          if (v75[4])
          {
            if (v187 < 0xF0)
            {
              if (v187 == 31)
              {
                int32x2_t v189 = v186[1];
                int32x2_t v190 = v186[2];
                int32x2_t v191 = v186[3];
                int32x2_t v192 = vzip2_s32(*v186, v189);
                int32x2_t v268 = vzip1_s32(*v186, v189);
                int32x2_t v272 = v192;
                int32x2_t v276 = vzip1_s32(v190, v191);
                int32x2_t v280 = vzip2_s32(v190, v191);
                uint64_t v188 = 32;
              }
              else if (v187 == 96)
              {
                int32x2_t v268 = (int32x2_t)vdup_lane_s8((int8x8_t)*v186, 0);
                int32x2_t v272 = v268;
                int32x2_t v276 = v268;
                int32x2_t v280 = v268;
                uint64_t v188 = 1;
              }
              else
              {
                uint64_t v188 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v268, 32, (uint64_t)v186, v187);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v268, 32, (uint64_t)v186, v187, v83);
              uint64_t v188 = 16;
            }
          }
          else
          {
            uint64_t v188 = 0;
            int32x2_t v268 = 0;
            int32x2_t v272 = 0;
            int32x2_t v276 = 0;
            int32x2_t v280 = 0;
          }
          uint64_t v193 = (int32x2_t *)((char *)v186 + v188);
          unsigned int v194 = v75[5];
          if (v75[5])
          {
            if (v194 < 0xF0)
            {
              if (v194 == 31)
              {
                int32x2_t v196 = v193[1];
                int32x2_t v197 = v193[2];
                int32x2_t v198 = v193[3];
                int32x2_t v199 = vzip2_s32(*v193, v196);
                int32x2_t v269 = vzip1_s32(*v193, v196);
                int32x2_t v273 = v199;
                int32x2_t v277 = vzip1_s32(v197, v198);
                int32x2_t v281 = vzip2_s32(v197, v198);
                uint64_t v195 = 32;
              }
              else if (v194 == 96)
              {
                int32x2_t v269 = (int32x2_t)vdup_lane_s8((int8x8_t)*v193, 0);
                int32x2_t v273 = v269;
                int32x2_t v277 = v269;
                int32x2_t v281 = v269;
                uint64_t v195 = 1;
              }
              else
              {
                uint64_t v195 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v269, 32, (uint64_t)v193, v194);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v269, 32, (uint64_t)v193, v194, v83);
              uint64_t v195 = 16;
            }
          }
          else
          {
            uint64_t v195 = 0;
            int32x2_t v269 = 0;
            int32x2_t v273 = 0;
            int32x2_t v277 = 0;
            int32x2_t v281 = 0;
          }
          char v200 = (int32x2_t *)((char *)v193 + v195);
          unsigned int v201 = v75[6];
          if (v75[6])
          {
            if (v201 < 0xF0)
            {
              if (v201 == 31)
              {
                int32x2_t v204 = v200[1];
                int32x2_t v205 = v200[2];
                int32x2_t v206 = v200[3];
                int32x2_t v207 = vzip2_s32(*v200, v204);
                int32x2_t v284 = vzip1_s32(*v200, v204);
                int32x2_t v288 = v207;
                int32x2_t v292 = vzip1_s32(v205, v206);
                int32x2_t v296 = vzip2_s32(v205, v206);
                uint64_t v202 = 32;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_235;
                }
              }
              else if (v201 == 96)
              {
                int32x2_t v284 = (int32x2_t)vdup_lane_s8((int8x8_t)*v200, 0);
                int32x2_t v288 = v284;
                int32x2_t v292 = v284;
                int32x2_t v296 = v284;
                uint64_t v202 = 1;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_235;
                }
              }
              else
              {
                uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v284, 32, (uint64_t)v200, v201);
                unsigned int v203 = v75[7];
                if (!v75[7])
                {
LABEL_235:
                  int32x2_t v285 = 0;
                  int32x2_t v289 = 0;
                  int32x2_t v293 = 0;
                  int32x2_t v297 = 0;
                  goto LABEL_236;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v284, 32, (uint64_t)v200, v201, v83);
              uint64_t v202 = 16;
              unsigned int v203 = v75[7];
              if (!v75[7]) {
                goto LABEL_235;
              }
            }
          }
          else
          {
            uint64_t v202 = 0;
            int32x2_t v284 = 0;
            int32x2_t v288 = 0;
            int32x2_t v292 = 0;
            int32x2_t v296 = 0;
            unsigned int v203 = v75[7];
            if (!v75[7]) {
              goto LABEL_235;
            }
          }
          int16x8_t v208 = (int32x2_t *)((char *)v200 + v202);
          if (v203 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int8x8_t *)&v285, 32, (uint64_t)v208, v203, v83);
LABEL_236:
            unsigned int v25 = v242;
            goto LABEL_237;
          }
          if (v203 == 31)
          {
            int32x2_t v215 = v208[1];
            int32x2_t v216 = v208[2];
            int32x2_t v217 = v208[3];
            int32x2_t v218 = vzip2_s32(*v208, v215);
            int32x2_t v285 = vzip1_s32(*v208, v215);
            int32x2_t v289 = v218;
            int32x2_t v293 = vzip1_s32(v216, v217);
            int32x2_t v297 = vzip2_s32(v216, v217);
            unsigned int v25 = v242;
          }
          else
          {
            unsigned int v25 = v242;
            if (v203 == 96)
            {
              int32x2_t v285 = (int32x2_t)vdup_lane_s8((int8x8_t)*v208, 0);
              int32x2_t v289 = v285;
              int32x2_t v293 = v285;
              int32x2_t v297 = v285;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v285, 32, (uint64_t)v208, v203);
            }
          }
LABEL_237:
          unsigned int v32 = v30 + 1;
          unint64_t v209 = v261;
          if (v261)
          {
            unint64_t v210 = 0;
            int32x4_t v211 = (char *)&v266 + 32 * v259 + 2 * v260;
            unsigned int v212 = v262;
            do
            {
              if (v212)
              {
                uint64_t v213 = 0;
                uint64_t v214 = v257 + v258 * v210;
                do
                {
                  *(unsigned char *)(v214 + v213) = v211[v213];
                  ++v213;
                  unsigned int v212 = v262;
                }
                while (2 * (unint64_t)v262 > v213);
                unint64_t v209 = v261;
              }
              ++v210;
              v211 += 32;
            }
            while (v210 < v209);
          }
LABEL_28:
          BOOL v21 = v30 == v244 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v236;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v151[52] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v129 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v112 = a8 + a10 - 1;
  unsigned int v114 = v112 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v132 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v123 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v122 = isLevelTiled;
  if (v17 <= v114)
  {
    unsigned int v121 = a7 + a9 - 1;
    unsigned int v111 = a7 >> 4;
    if (a7 >> 4 <= v121 >> 4)
    {
      unsigned int v108 = a5 - 1;
      unsigned int v110 = (a6 - 1) >> 3;
      int v130 = ((a5 - 1) & 0xF) + 1;
      unsigned int v131 = (a5 - 1) >> 4;
      int v109 = ((a6 - 1) & 7) + 1;
      uint64_t v115 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v120 = v28.i32[0] | v28.i32[1];
      int8x8_t v119 = v28;
      BOOL v117 = v28.i32[1] != 0;
      BOOL v118 = v28.i32[0] != 0;
      unint64_t v107 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v129) {
          int v30 = v129;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v111;
        if (v112 < v29) {
          unsigned int v29 = v112;
        }
        int v116 = v30 - 8 * v17;
        int v127 = v29 - v30 + 1;
        unsigned int v128 = 8 * v17;
        int v32 = v109;
        if (v17 != v110) {
          int v32 = 8;
        }
        unsigned int v133 = v32;
        uint64_t v126 = a2 + (v30 - v129) * a11;
        do
        {
          unsigned int v33 = 16 * v31;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v31;
          }
          if (v121 < v34) {
            unsigned int v34 = v121;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v131) {
            unsigned int v37 = v130;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v128 >= v129 && v33 >= a7)
          {
            int v39 = v130;
            if (v31 != v131) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v127 != v133;
          }
          if (v122)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v107 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v96 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v97 = 0;
            }
            else {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
            }
            unsigned int v98 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v99 = 0;
              if (v97) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
              if (v99 | v97)
              {
LABEL_121:
                int v100 = 0;
                uint64_t v101 = 0;
                int v102 = v31 & v96;
                int v103 = v17 & v98;
                BOOL v104 = v99 != 0;
                BOOL v105 = v97 != 0;
                int v106 = 1;
                do
                {
                  --v99;
                  if (v104) {
                    v101 |= (unint64_t)(v106 & v103) << v100++;
                  }
                  else {
                    unsigned int v99 = 0;
                  }
                  --v97;
                  if (v105) {
                    v101 |= (unint64_t)(v106 & v102) << v100++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v106 *= 2;
                  --v100;
                  BOOL v105 = v97 != 0;
                  BOOL v104 = v99 != 0;
                }
                while (v97 | v99);
                goto LABEL_133;
              }
            }
            uint64_t v101 = 0;
LABEL_133:
            unint64_t v48 = ((unint64_t)(v33 / v62 + v128 / v66 * ((v62 + v108) / v62)) << 14) + (v101 << 9);
            goto LABEL_60;
          }
          if (v120)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v117;
            BOOL v45 = v118;
            __int32 v46 = v119.i32[0];
            __int32 v47 = v119.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_86:
              unint64_t v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          int v55 = 0;
          unint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            BOOL v60 = !v57;
            if (v57)
            {
              unint64_t v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              unsigned int v51 = 0;
              unint64_t v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              unsigned int v54 = 0;
              unint64_t v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          long long v67 = (unsigned char *)(a3 + v48);
          if (v123)
          {
            int v68 = v36;
            unsigned int v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            unsigned int v37 = v69;
            int v36 = v68;
            uint64_t v26 = v132;
            long long v67 = __dst;
          }
          long long v70 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v71 = a7;
          uint64_t v72 = v126 + 8 * (v35 - a7);
          char v73 = v37 < 0x10 || v38;
          if ((v73 & 1) == 0 && v133 > 7)
          {
            int v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            uint64_t v75 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, (uint64_t)v67, *v70, v74)];
            uint64_t v76 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 32, a11, v75, v70[1], v74);
            uint64_t v77 = v76
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115, a11, v76, v70[2], v74);
            uint64_t v78 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 32, a11, v77, v70[3], v74);
            uint64_t v79 = v78
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 64, a11, v78, v70[4], v74);
            uint64_t v80 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 96, a11, v79, v70[5], v74);
            uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 64, a11, v80, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 96, a11, v80 + v81, v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          char v141 = v37;
          char v142 = v133;
          unsigned int v137 = v116;
          unsigned int v138 = v35 - v33;
          block[6] = v70;
          uint64_t v135 = v72;
          uint64_t v136 = a11;
          unsigned int v139 = v127;
          unsigned int v140 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          int v82 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          uint64_t v83 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v144, 128, (uint64_t)v67, *v70, v82)];
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v145, 128, v83, v70[1], v82);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v148, 128, v84, v70[2], v82);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v149, 128, v85, v70[3], v82);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v146, 128, v86, v70[4], v82);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v147, 128, v87, v70[5], v82);
          uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v150, 128, v88, v70[6], v82);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v151, 128, v88 + v89, v70[7], v82);
          unint64_t v90 = v139;
          a7 = v71;
          if (v139)
          {
            unint64_t v91 = 0;
            int v92 = &v144[128 * (unint64_t)v137 + 8 * v138];
            unsigned int v93 = v140;
            do
            {
              if (v93)
              {
                uint64_t v94 = 0;
                uint64_t v95 = v135 + v136 * v91;
                do
                {
                  *(unsigned char *)(v95 + v94) = v92[v94];
                  ++v94;
                  unsigned int v93 = v140;
                }
                while (8 * (unint64_t)v140 > v94);
                unint64_t v90 = v139;
              }
              ++v91;
              v92 += 128;
            }
            while (v91 < v90);
          }
LABEL_28:
          BOOL v21 = v31++ == v121 >> 4;
          uint64_t v26 = v132;
        }
        while (!v21);
        BOOL v21 = v17++ == v114;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v451 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v370 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v352 = a8 + a10 - 1;
  unsigned int v354 = v352 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v374 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v374;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v364 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v27 = v374;
  BOOL v363 = isLevelTiled;
  if (v17 <= v354)
  {
    unsigned int v362 = a7 + a9 - 1;
    if (a7 >> 4 <= v362 >> 4)
    {
      uint64_t v28 = a11;
      unsigned int v349 = a5 - 1;
      unsigned int v373 = (a5 - 1) >> 4;
      int v372 = ((a5 - 1) & 0xF) + 1;
      int v350 = ((a6 - 1) & 7) + 1;
      unsigned int v351 = (a6 - 1) >> 3;
      uint64_t v356 = 4 * a11;
      uint32x2_t v29 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v30 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v29, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v29));
      __int32 v361 = v30.i32[0] | v30.i32[1];
      int8x8_t v360 = v30;
      BOOL v359 = v30.i32[0] != 0;
      BOOL v358 = v30.i32[1] != 0;
      unint64_t v348 = 8 * v19 * (unint64_t)v18;
      uint64_t v376 = 3 * a11;
      uint64_t v355 = 2 * a11;
      do
      {
        unsigned int v31 = (8 * v17) | 7;
        if (8 * v17 <= v370) {
          int v32 = v370;
        }
        else {
          int v32 = 8 * v17;
        }
        unsigned int v33 = a7 >> 4;
        if (v352 < v31) {
          unsigned int v31 = v352;
        }
        unsigned int v369 = 8 * v17;
        int v357 = v32 - 8 * v17;
        int v368 = v31 - v32 + 1;
        int v34 = v350;
        if (v17 != v351) {
          int v34 = 8;
        }
        unsigned int v375 = v34;
        uint64_t v367 = a2 + (v32 - v370) * v28;
        unsigned int v35 = a7;
        do
        {
          unsigned int v37 = 16 * v33;
          unsigned int v38 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= v35) {
            int v39 = v35;
          }
          else {
            int v39 = 16 * v33;
          }
          if (v362 < v38) {
            unsigned int v38 = a7 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v33 == v373) {
            unsigned int v41 = v372;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v369 >= v370 && v37 >= v35)
          {
            int v43 = v372;
            if (v33 != v373) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v368 != v375;
          }
          if (v363)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v348 >> (*(unsigned char *)(v27 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v337 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v338 = 0;
            }
            else {
              unsigned int v338 = 32 - __clz(~(-1 << -(char)__clz(v337)));
            }
            unsigned int v339 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v340 = 0;
              if (v338) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v340 = 32 - __clz(~(-1 << -(char)__clz(v339)));
              if (v340 | v338)
              {
LABEL_268:
                int v341 = 0;
                uint64_t v342 = 0;
                int v343 = v33 & v337;
                int v344 = v17 & v339;
                BOOL v345 = v340 != 0;
                BOOL v346 = v338 != 0;
                int v347 = 1;
                do
                {
                  --v340;
                  if (v345) {
                    v342 |= (unint64_t)(v347 & v344) << v341++;
                  }
                  else {
                    unsigned int v340 = 0;
                  }
                  --v338;
                  if (v346) {
                    v342 |= (unint64_t)(v347 & v343) << v341++;
                  }
                  else {
                    unsigned int v338 = 0;
                  }
                  v347 *= 2;
                  --v341;
                  BOOL v346 = v338 != 0;
                  BOOL v345 = v340 != 0;
                }
                while (v338 | v340);
                goto LABEL_280;
              }
            }
            uint64_t v342 = 0;
LABEL_280:
            unint64_t v52 = ((unint64_t)(v37 / v66 + v369 / v70 * ((v66 + v349) / v66)) << 14) + (v342 << 9);
            goto LABEL_60;
          }
          if (v361)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v359;
            BOOL v49 = v358;
            __int32 v50 = v360.i32[0];
            __int32 v51 = v360.i32[1];
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v17) << v45++;
              }
              else {
                __int32 v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v33) << v45++;
              }
              else {
                __int32 v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 9;
LABEL_60:
          unsigned int v53 = *(_DWORD *)(v27 + 128) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v27 + 132) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_86:
              unint64_t v60 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_86;
            }
          }
          int v59 = 0;
          unint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            BOOL v64 = !v61;
            if (v61)
            {
              unint64_t v65 = ((unint64_t)(v63 & v33) << v59) | v60;
            }
            else
            {
              unsigned int v55 = 0;
              unint64_t v65 = v60;
            }
            if (!v64) {
              ++v59;
            }
            --v58;
            if (v62)
            {
              unint64_t v60 = ((unint64_t)(v63 & v17) << v59) | v65;
            }
            else
            {
              unsigned int v58 = 0;
              unint64_t v60 = v65;
            }
            if (v62) {
              ++v59;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_87:
          uint64_t v71 = (float32x4_t *)(a3 + v52);
          if (v364)
          {
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v27 = v374;
            uint64_t v71 = (float32x4_t *)__dst;
          }
          uint64_t v72 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v73 = v367 + 8 * (v39 - v35);
          char v74 = v41 < 0x10 || v42;
          if ((v74 & 1) == 0 && v375 > 7)
          {
            uint64_t v75 = *(void *)(v27 + 208);
            int v76 = *(_DWORD *)(v75 + 52);
            unsigned int v77 = *v72;
            if (*v72)
            {
              uint64_t v28 = a11;
              uint64_t v78 = 2 * a11;
              if (v77 < 0xF0)
              {
                if (v77 == 127)
                {
                  float32x4_t v92 = v71[1];
                  float32x4_t v93 = v71[2];
                  float32x4_t v94 = v71[3];
                  float32x4_t v95 = v71[5];
                  float32x4_t v96 = v71[6];
                  float32x4_t v97 = v71[7];
                  float32x4_t v98 = v71[4];
                  *(float32x4_t *)uint64_t v73 = *v71;
                  *(float32x4_t *)(v73 + 16) = v93;
                  unsigned int v99 = (float32x4_t *)(v73 + v355);
                  int v100 = (float32x4_t *)(v73 + a11);
                  *int v100 = v92;
                  v100[1] = v94;
                  *unsigned int v99 = v98;
                  v99[1] = v96;
                  uint64_t v101 = (float32x4_t *)(v73 + v355 + a11);
                  *uint64_t v101 = v95;
                  v101[1] = v97;
                  uint64_t v79 = 128;
                }
                else if (v77 == 3)
                {
                  float32x4_t v87 = vld1q_dup_f32(v71->f32);
                  *(float32x4_t *)uint64_t v73 = v87;
                  *(float32x4_t *)(v73 + 16) = v87;
                  uint64_t v88 = (float32x4_t *)(v73 + a11);
                  *uint64_t v88 = v87;
                  v88[1] = v87;
                  uint64_t v89 = (float32x4_t *)(v73 + v355);
                  *uint64_t v89 = v87;
                  v89[1] = v87;
                  unint64_t v90 = (float32x4_t *)(v73 + v376);
                  *unint64_t v90 = v87;
                  v90[1] = v87;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v73, a11, (uint64_t)v71, v77);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)v73, a11, (unint64_t)v71, v77, *(_DWORD *)(v75 + 52));
                uint64_t v79 = 64;
              }
            }
            else
            {
              uint64_t v79 = 0;
              *(_OWORD *)uint64_t v73 = 0u;
              *(_OWORD *)(v73 + 16) = 0u;
              uint64_t v28 = a11;
              uint64_t v84 = (_OWORD *)(v73 + a11);
              *uint64_t v84 = 0u;
              v84[1] = 0u;
              uint64_t v78 = 2 * a11;
              uint64_t v85 = (_OWORD *)(v73 + v355);
              _OWORD *v85 = 0u;
              v85[1] = 0u;
              uint64_t v86 = (_OWORD *)(v73 + v376);
              *uint64_t v86 = 0u;
              v86[1] = 0u;
            }
            unint64_t v102 = (unint64_t)v71 + v79;
            int v103 = (int8x16_t *)(v73 + 32);
            unsigned int v104 = v72[1];
            if (v72[1])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 127)
                {
                  long long v113 = *(_OWORD *)(v102 + 16);
                  long long v114 = *(_OWORD *)(v102 + 32);
                  long long v115 = *(_OWORD *)(v102 + 48);
                  long long v116 = *(_OWORD *)(v102 + 80);
                  long long v117 = *(_OWORD *)(v102 + 96);
                  long long v118 = *(_OWORD *)(v102 + 112);
                  long long v119 = *(_OWORD *)(v102 + 64);
                  *int v103 = *(int8x16_t *)v102;
                  *(_OWORD *)(v73 + 48) = v114;
                  __int32 v120 = &v103->i8[v78];
                  unsigned int v121 = &v103->i8[v28];
                  *(_OWORD *)unsigned int v121 = v113;
                  *((_OWORD *)v121 + 1) = v115;
                  *(_OWORD *)__int32 v120 = v119;
                  *((_OWORD *)v120 + 1) = v117;
                  BOOL v122 = &v103->i8[v78 + v28];
                  *(_OWORD *)BOOL v122 = v116;
                  *((_OWORD *)v122 + 1) = v118;
                  uint64_t v105 = 128;
                }
                else if (v104 == 3)
                {
                  float32x4_t v109 = vld1q_dup_f32((const float *)v102);
                  *(float32x4_t *)(v73 + 32) = v109;
                  *(float32x4_t *)(v73 + 48) = v109;
                  unsigned int v110 = (float32x4_t *)&v103->i8[v28];
                  *unsigned int v110 = v109;
                  v110[1] = v109;
                  unsigned int v111 = (float32x4_t *)&v103->i8[v78];
                  *unsigned int v111 = v109;
                  v111[1] = v109;
                  unsigned int v112 = (float32x4_t *)&v103->i8[v376];
                  *unsigned int v112 = v109;
                  v112[1] = v109;
                  uint64_t v105 = 4;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v103, v28, v102, v104);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v103, v28, v102, v104, v76);
                uint64_t v105 = 64;
              }
            }
            else
            {
              uint64_t v105 = 0;
              *int v103 = 0u;
              *(_OWORD *)(v73 + 48) = 0u;
              int v106 = &v103->i8[v28];
              *(_OWORD *)int v106 = 0u;
              *((_OWORD *)v106 + 1) = 0u;
              unint64_t v107 = &v103->i8[v78];
              *(_OWORD *)unint64_t v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
              unsigned int v108 = &v103->i8[v376];
              *(_OWORD *)unsigned int v108 = 0u;
              *((_OWORD *)v108 + 1) = 0u;
            }
            unint64_t v123 = v102 + v105;
            unsigned int v124 = (float32x4_t *)(v73 + v356);
            unsigned int v125 = v72[2];
            if (v72[2])
            {
              if (v125 < 0xF0)
              {
                if (v125 == 127)
                {
                  long long v134 = *(_OWORD *)(v123 + 16);
                  float32x4_t v135 = *(float32x4_t *)(v123 + 32);
                  long long v136 = *(_OWORD *)(v123 + 48);
                  long long v137 = *(_OWORD *)(v123 + 80);
                  long long v138 = *(_OWORD *)(v123 + 96);
                  long long v139 = *(_OWORD *)(v123 + 112);
                  long long v140 = *(_OWORD *)(v123 + 64);
                  *unsigned int v124 = *(float32x4_t *)v123;
                  v124[1] = v135;
                  char v141 = (_OWORD *)((char *)v124->f32 + v78);
                  char v142 = (_OWORD *)((char *)v124->f32 + v28);
                  *char v142 = v134;
                  v142[1] = v136;
                  *char v141 = v140;
                  v141[1] = v138;
                  uint64_t v143 = (_OWORD *)((char *)v124->f32 + v78 + v28);
                  *uint64_t v143 = v137;
                  v143[1] = v139;
                  uint64_t v126 = 128;
                }
                else if (v125 == 3)
                {
                  float32x4_t v130 = vld1q_dup_f32((const float *)v123);
                  *unsigned int v124 = v130;
                  v124[1] = v130;
                  unsigned int v131 = (float32x4_t *)((char *)v124 + v28);
                  *unsigned int v131 = v130;
                  v131[1] = v130;
                  uint64_t v132 = (float32x4_t *)((char *)v124 + v78);
                  *uint64_t v132 = v130;
                  v132[1] = v130;
                  unsigned int v133 = (float32x4_t *)((char *)v124 + v376);
                  *unsigned int v133 = v130;
                  v133[1] = v130;
                  uint64_t v126 = 4;
                }
                else
                {
                  uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)(v73 + v356), v28, v123, v125);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)(v73 + v356), v28, v123, v125, v76);
                uint64_t v126 = 64;
              }
            }
            else
            {
              uint64_t v126 = 0;
              *unsigned int v124 = 0u;
              v124[1] = 0u;
              int v127 = (_OWORD *)((char *)v124->f32 + v28);
              *int v127 = 0u;
              v127[1] = 0u;
              unsigned int v128 = (_OWORD *)((char *)v124->f32 + v78);
              *unsigned int v128 = 0u;
              v128[1] = 0u;
              unsigned int v129 = (_OWORD *)((char *)v124->f32 + v376);
              *unsigned int v129 = 0u;
              v129[1] = 0u;
            }
            unint64_t v144 = v123 + v126;
            uint64_t v145 = (int8x16_t *)&v124[2];
            unsigned int v146 = v72[3];
            if (v72[3])
            {
              if (v146 < 0xF0)
              {
                if (v146 == 127)
                {
                  long long v155 = *(_OWORD *)(v144 + 16);
                  float32x4_t v156 = *(float32x4_t *)(v144 + 32);
                  long long v157 = *(_OWORD *)(v144 + 48);
                  long long v158 = *(_OWORD *)(v144 + 80);
                  long long v159 = *(_OWORD *)(v144 + 96);
                  long long v160 = *(_OWORD *)(v144 + 112);
                  long long v161 = *(_OWORD *)(v144 + 64);
                  *uint64_t v145 = *(int8x16_t *)v144;
                  v124[3] = v156;
                  int32x2_t v162 = &v145->i8[v78];
                  int32x2_t v163 = &v145->i8[v28];
                  *(_OWORD *)int32x2_t v163 = v155;
                  *((_OWORD *)v163 + 1) = v157;
                  *(_OWORD *)int32x2_t v162 = v161;
                  *((_OWORD *)v162 + 1) = v159;
                  int32x2_t v164 = &v145->i8[v78 + v28];
                  *(_OWORD *)int32x2_t v164 = v158;
                  *((_OWORD *)v164 + 1) = v160;
                  uint64_t v147 = 128;
                }
                else if (v146 == 3)
                {
                  float32x4_t v151 = vld1q_dup_f32((const float *)v144);
                  v124[2] = v151;
                  v124[3] = v151;
                  char v152 = (float32x4_t *)&v145->i8[v28];
                  *char v152 = v151;
                  v152[1] = v151;
                  unsigned int v153 = (float32x4_t *)&v145->i8[v78];
                  *unsigned int v153 = v151;
                  v153[1] = v151;
                  uint64_t v154 = (float32x4_t *)&v145->i8[v376];
                  *uint64_t v154 = v151;
                  v154[1] = v151;
                  uint64_t v147 = 4;
                }
                else
                {
                  uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v145, v28, v144, v146);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v145, v28, v144, v146, v76);
                uint64_t v147 = 64;
              }
            }
            else
            {
              uint64_t v147 = 0;
              *uint64_t v145 = 0u;
              v124[3] = 0u;
              uint64_t v148 = &v145->i8[v28];
              *(_OWORD *)uint64_t v148 = 0u;
              *((_OWORD *)v148 + 1) = 0u;
              uint64_t v149 = &v145->i8[v78];
              *(_OWORD *)uint64_t v149 = 0u;
              *((_OWORD *)v149 + 1) = 0u;
              uint64_t v150 = &v145->i8[v376];
              *(_OWORD *)uint64_t v150 = 0u;
              *((_OWORD *)v150 + 1) = 0u;
            }
            unint64_t v165 = v144 + v147;
            unsigned int v166 = (int8x16_t *)(v73 + 64);
            unsigned int v167 = v72[4];
            if (v72[4])
            {
              if (v167 < 0xF0)
              {
                if (v167 == 127)
                {
                  long long v176 = *(_OWORD *)(v165 + 16);
                  long long v177 = *(_OWORD *)(v165 + 32);
                  long long v178 = *(_OWORD *)(v165 + 48);
                  long long v179 = *(_OWORD *)(v165 + 80);
                  long long v180 = *(_OWORD *)(v165 + 96);
                  long long v181 = *(_OWORD *)(v165 + 112);
                  long long v182 = *(_OWORD *)(v165 + 64);
                  int8x16_t *v166 = *(int8x16_t *)v165;
                  *(_OWORD *)(v73 + 80) = v177;
                  int32x2_t v183 = &v166->i8[v78];
                  int32x2_t v184 = &v166->i8[v28];
                  *(_OWORD *)int32x2_t v184 = v176;
                  *((_OWORD *)v184 + 1) = v178;
                  *(_OWORD *)int32x2_t v183 = v182;
                  *((_OWORD *)v183 + 1) = v180;
                  int32x2_t v185 = &v166->i8[v78 + v28];
                  *(_OWORD *)int32x2_t v185 = v179;
                  *((_OWORD *)v185 + 1) = v181;
                  uint64_t v168 = 128;
                }
                else if (v167 == 3)
                {
                  float32x4_t v172 = vld1q_dup_f32((const float *)v165);
                  *(float32x4_t *)(v73 + 64) = v172;
                  *(float32x4_t *)(v73 + 80) = v172;
                  unsigned int v173 = (float32x4_t *)&v166->i8[v28];
                  float32x4_t *v173 = v172;
                  v173[1] = v172;
                  uint64_t v174 = (float32x4_t *)&v166->i8[v78];
                  *uint64_t v174 = v172;
                  v174[1] = v172;
                  int32x2_t v175 = (float32x4_t *)&v166->i8[v376];
                  *int32x2_t v175 = v172;
                  v175[1] = v172;
                  uint64_t v168 = 4;
                }
                else
                {
                  uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v166, v28, v165, v167);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v166, v28, v165, v167, v76);
                uint64_t v168 = 64;
              }
            }
            else
            {
              uint64_t v168 = 0;
              int8x16_t *v166 = 0u;
              *(_OWORD *)(v73 + 80) = 0u;
              int32x2_t v169 = &v166->i8[v28];
              *(_OWORD *)int32x2_t v169 = 0u;
              *((_OWORD *)v169 + 1) = 0u;
              int32x2_t v170 = &v166->i8[v78];
              *(_OWORD *)int32x2_t v170 = 0u;
              *((_OWORD *)v170 + 1) = 0u;
              int32x2_t v171 = &v166->i8[v376];
              *(_OWORD *)int32x2_t v171 = 0u;
              *((_OWORD *)v171 + 1) = 0u;
            }
            unint64_t v186 = v165 + v168;
            unsigned int v187 = (int8x16_t *)(v73 + 96);
            unsigned int v188 = v72[5];
            if (v72[5])
            {
              if (v188 < 0xF0)
              {
                if (v188 == 127)
                {
                  long long v197 = *(_OWORD *)(v186 + 16);
                  long long v198 = *(_OWORD *)(v186 + 32);
                  long long v199 = *(_OWORD *)(v186 + 48);
                  long long v200 = *(_OWORD *)(v186 + 80);
                  long long v201 = *(_OWORD *)(v186 + 96);
                  long long v202 = *(_OWORD *)(v186 + 112);
                  long long v203 = *(_OWORD *)(v186 + 64);
                  int8x16_t *v187 = *(int8x16_t *)v186;
                  *(_OWORD *)(v73 + 112) = v198;
                  int32x2_t v204 = &v187->i8[v78];
                  int32x2_t v205 = &v187->i8[v28];
                  *(_OWORD *)int32x2_t v205 = v197;
                  *((_OWORD *)v205 + 1) = v199;
                  *(_OWORD *)int32x2_t v204 = v203;
                  *((_OWORD *)v204 + 1) = v201;
                  int32x2_t v206 = &v187->i8[v78 + v28];
                  *(_OWORD *)int32x2_t v206 = v200;
                  *((_OWORD *)v206 + 1) = v202;
                  uint64_t v189 = 128;
                }
                else if (v188 == 3)
                {
                  float32x4_t v193 = vld1q_dup_f32((const float *)v186);
                  *(float32x4_t *)(v73 + 96) = v193;
                  *(float32x4_t *)(v73 + 112) = v193;
                  unsigned int v194 = (float32x4_t *)&v187->i8[v28];
                  *unsigned int v194 = v193;
                  v194[1] = v193;
                  uint64_t v195 = (float32x4_t *)&v187->i8[v78];
                  float32x4_t *v195 = v193;
                  v195[1] = v193;
                  int32x2_t v196 = (float32x4_t *)&v187->i8[v376];
                  *int32x2_t v196 = v193;
                  v196[1] = v193;
                  uint64_t v189 = 4;
                }
                else
                {
                  uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v187, v28, v186, v188);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v187, v28, v186, v188, v76);
                uint64_t v189 = 64;
              }
            }
            else
            {
              uint64_t v189 = 0;
              int8x16_t *v187 = 0u;
              *(_OWORD *)(v73 + 112) = 0u;
              int32x2_t v190 = &v187->i8[v28];
              *(_OWORD *)int32x2_t v190 = 0u;
              *((_OWORD *)v190 + 1) = 0u;
              int32x2_t v191 = &v187->i8[v78];
              *(_OWORD *)int32x2_t v191 = 0u;
              *((_OWORD *)v191 + 1) = 0u;
              int32x2_t v192 = &v187->i8[v376];
              *(_OWORD *)int32x2_t v192 = 0u;
              *((_OWORD *)v192 + 1) = 0u;
            }
            unint64_t v207 = v186 + v189;
            int16x8_t v208 = (int8x16_t *)&v124[4];
            unsigned int v209 = v72[6];
            if (v72[6])
            {
              if (v209 < 0xF0)
              {
                if (v209 == 127)
                {
                  long long v218 = *(_OWORD *)(v207 + 16);
                  float32x4_t v219 = *(float32x4_t *)(v207 + 32);
                  long long v220 = *(_OWORD *)(v207 + 48);
                  long long v221 = *(_OWORD *)(v207 + 80);
                  long long v222 = *(_OWORD *)(v207 + 96);
                  long long v223 = *(_OWORD *)(v207 + 112);
                  long long v224 = *(_OWORD *)(v207 + 64);
                  *int16x8_t v208 = *(int8x16_t *)v207;
                  v124[5] = v219;
                  int v225 = &v208->i8[v78];
                  int v226 = &v208->i8[v28];
                  *(_OWORD *)int v226 = v218;
                  *((_OWORD *)v226 + 1) = v220;
                  *(_OWORD *)int v225 = v224;
                  *((_OWORD *)v225 + 1) = v222;
                  BOOL v227 = &v208->i8[v78 + v28];
                  *(_OWORD *)BOOL v227 = v221;
                  *((_OWORD *)v227 + 1) = v223;
                  uint64_t v210 = 128;
                }
                else if (v209 == 3)
                {
                  float32x4_t v214 = vld1q_dup_f32((const float *)v207);
                  v124[4] = v214;
                  v124[5] = v214;
                  int32x2_t v215 = (float32x4_t *)&v208->i8[v28];
                  *int32x2_t v215 = v214;
                  v215[1] = v214;
                  int32x2_t v216 = (float32x4_t *)&v208->i8[v78];
                  *int32x2_t v216 = v214;
                  v216[1] = v214;
                  int32x2_t v217 = (float32x4_t *)&v208->i8[v376];
                  *int32x2_t v217 = v214;
                  v217[1] = v214;
                  uint64_t v210 = 4;
                }
                else
                {
                  uint64_t v210 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v208, v28, v186 + v189, v209);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v208, v28, v186 + v189, v209, v76);
                uint64_t v210 = 64;
              }
            }
            else
            {
              uint64_t v210 = 0;
              *int16x8_t v208 = 0u;
              v124[5] = 0u;
              int32x4_t v211 = &v208->i8[v28];
              *(_OWORD *)int32x4_t v211 = 0u;
              *((_OWORD *)v211 + 1) = 0u;
              unsigned int v212 = &v208->i8[v78];
              *(_OWORD *)unsigned int v212 = 0u;
              *((_OWORD *)v212 + 1) = 0u;
              uint64_t v213 = &v208->i8[v376];
              *(_OWORD *)uint64_t v213 = 0u;
              *((_OWORD *)v213 + 1) = 0u;
            }
            BOOL v228 = (int8x16_t *)&v124[6];
            unsigned int v229 = v72[7];
            if (v72[7])
            {
              unint64_t v230 = v207 + v210;
              if (v229 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v228, v28, v230, v229, v76);
                goto LABEL_169;
              }
              unsigned int v35 = a7;
              if (v229 == 127)
              {
                long long v238 = *(_OWORD *)(v230 + 16);
                float32x4_t v239 = *(float32x4_t *)(v230 + 32);
                long long v240 = *(_OWORD *)(v230 + 48);
                long long v241 = *(_OWORD *)(v230 + 64);
                long long v242 = *(_OWORD *)(v230 + 80);
                long long v243 = *(_OWORD *)(v230 + 96);
                long long v244 = *(_OWORD *)(v230 + 112);
                *BOOL v228 = *(int8x16_t *)v230;
                v124[7] = v239;
                int32x4_t v245 = &v228->i8[v78];
                int v246 = &v228->i8[v28];
                *(_OWORD *)int v246 = v238;
                *((_OWORD *)v246 + 1) = v240;
                *(_OWORD *)int32x4_t v245 = v241;
                *((_OWORD *)v245 + 1) = v243;
                int16x8_t v247 = &v228->i8[v78 + v28];
                *(_OWORD *)int16x8_t v247 = v242;
                *((_OWORD *)v247 + 1) = v244;
              }
              else if (v229 == 3)
              {
                float32x4_t v234 = vld1q_dup_f32((const float *)v230);
                v124[6] = v234;
                v124[7] = v234;
                uint64_t v235 = (float32x4_t *)&v228->i8[v28];
                *uint64_t v235 = v234;
                v235[1] = v234;
                unsigned int v236 = (float32x4_t *)&v228->i8[v78];
                *unsigned int v236 = v234;
                v236[1] = v234;
                uint64_t v237 = (float32x4_t *)&v228->i8[v376];
                *uint64_t v237 = v234;
                v237[1] = v234;
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v228, v28, v230, v229);
              }
            }
            else
            {
              *BOOL v228 = 0u;
              v124[7] = 0u;
              unsigned int v231 = &v228->i8[v28];
              *(_OWORD *)unsigned int v231 = 0u;
              *((_OWORD *)v231 + 1) = 0u;
              int v232 = &v228->i8[v78];
              *(_OWORD *)int v232 = 0u;
              *((_OWORD *)v232 + 1) = 0u;
              unsigned int v233 = &v228->i8[v376];
              *(_OWORD *)unsigned int v233 = 0u;
              *((_OWORD *)v233 + 1) = 0u;
LABEL_169:
              unsigned int v35 = a7;
            }
            uint64_t v27 = v374;
LABEL_27:
            unsigned int v36 = v33 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v27;
          block[5] = v71;
          char v384 = v41;
          char v385 = v375;
          unsigned int v380 = v357;
          unsigned int v381 = v39 - v37;
          block[6] = v72;
          uint64_t v378 = v73;
          uint64_t v28 = a11;
          uint64_t v379 = a11;
          unsigned int v382 = v368;
          unsigned int v383 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v27 + 8) + 7384), block);
            uint64_t v27 = v374;
            unsigned int v35 = a7;
            goto LABEL_27;
          }
          uint64_t v80 = *(void *)(v27 + 208);
          int v81 = *(_DWORD *)(v80 + 52);
          unsigned int v82 = *v72;
          unsigned int v35 = a7;
          if (*v72)
          {
            if (v82 < 0xF0)
            {
              if (v82 == 127)
              {
                float32x4_t v248 = v71[1];
                float32x4_t v249 = v71[2];
                float32x4_t v250 = v71[3];
                float32x4_t v251 = v71[4];
                float32x4_t v252 = v71[5];
                float32x4_t v253 = v71[6];
                float32x4_t v254 = v71[7];
                int8x16_t v387 = *(int8x16_t *)v71;
                float32x4_t v388 = v249;
                float32x4_t v395 = v248;
                float32x4_t v396 = v250;
                float32x4_t v403 = v251;
                float32x4_t v404 = v253;
                float32x4_t v411 = v252;
                float32x4_t v412 = v254;
                uint64_t v83 = 128;
              }
              else if (v82 == 3)
              {
                float32x4_t v91 = vld1q_dup_f32(v71->f32);
                int8x16_t v387 = (int8x16_t)v91;
                float32x4_t v388 = v91;
                float32x4_t v395 = v91;
                float32x4_t v396 = v91;
                float32x4_t v403 = v91;
                float32x4_t v404 = v91;
                float32x4_t v411 = v91;
                float32x4_t v412 = v91;
                uint64_t v83 = 4;
              }
              else
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v387, 128, (uint64_t)v71, v82);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v387, 128, (unint64_t)v71, v82, *(_DWORD *)(v80 + 52));
              uint64_t v83 = 64;
            }
          }
          else
          {
            uint64_t v83 = 0;
            float32x4_t v388 = 0u;
            int8x16_t v387 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
            float32x4_t v411 = 0u;
            float32x4_t v412 = 0u;
          }
          unint64_t v255 = (unint64_t)v71 + v83;
          unsigned int v256 = v72[1];
          if (v72[1])
          {
            if (v256 < 0xF0)
            {
              if (v256 == 127)
              {
                float32x4_t v259 = *(float32x4_t *)(v255 + 16);
                float32x4_t v260 = *(float32x4_t *)(v255 + 32);
                float32x4_t v261 = *(float32x4_t *)(v255 + 48);
                float32x4_t v262 = *(float32x4_t *)(v255 + 64);
                float32x4_t v263 = *(float32x4_t *)(v255 + 80);
                float32x4_t v264 = *(float32x4_t *)(v255 + 96);
                float32x4_t v265 = *(float32x4_t *)(v255 + 112);
                int8x16_t v389 = *(int8x16_t *)v255;
                float32x4_t v390 = v260;
                float32x4_t v397 = v259;
                float32x4_t v398 = v261;
                float32x4_t v405 = v262;
                float32x4_t v406 = v264;
                float32x4_t v413 = v263;
                float32x4_t v414 = v265;
                uint64_t v257 = 128;
              }
              else if (v256 == 3)
              {
                float32x4_t v258 = vld1q_dup_f32((const float *)v255);
                int8x16_t v389 = (int8x16_t)v258;
                float32x4_t v390 = v258;
                float32x4_t v397 = v258;
                float32x4_t v398 = v258;
                float32x4_t v405 = v258;
                float32x4_t v406 = v258;
                float32x4_t v413 = v258;
                float32x4_t v414 = v258;
                uint64_t v257 = 4;
              }
              else
              {
                uint64_t v257 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v389, 128, v255, v256);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v389, 128, v255, v256, v81);
              uint64_t v257 = 64;
            }
          }
          else
          {
            uint64_t v257 = 0;
            int8x16_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
            float32x4_t v413 = 0u;
            float32x4_t v414 = 0u;
          }
          unint64_t v266 = v255 + v257;
          unsigned int v267 = v72[2];
          if (v72[2])
          {
            if (v267 < 0xF0)
            {
              if (v267 == 127)
              {
                float32x4_t v270 = *(float32x4_t *)(v266 + 16);
                float32x4_t v271 = *(float32x4_t *)(v266 + 32);
                float32x4_t v272 = *(float32x4_t *)(v266 + 48);
                float32x4_t v273 = *(float32x4_t *)(v266 + 64);
                float32x4_t v274 = *(float32x4_t *)(v266 + 80);
                float32x4_t v275 = *(float32x4_t *)(v266 + 96);
                float32x4_t v276 = *(float32x4_t *)(v266 + 112);
                int8x16_t v419 = *(int8x16_t *)v266;
                float32x4_t v420 = v271;
                float32x4_t v427 = v270;
                float32x4_t v428 = v272;
                float32x4_t v435 = v273;
                float32x4_t v436 = v275;
                float32x4_t v443 = v274;
                float32x4_t v444 = v276;
                uint64_t v268 = 128;
              }
              else if (v267 == 3)
              {
                float32x4_t v269 = vld1q_dup_f32((const float *)v266);
                int8x16_t v419 = (int8x16_t)v269;
                float32x4_t v420 = v269;
                float32x4_t v427 = v269;
                float32x4_t v428 = v269;
                float32x4_t v435 = v269;
                float32x4_t v436 = v269;
                float32x4_t v443 = v269;
                float32x4_t v444 = v269;
                uint64_t v268 = 4;
              }
              else
              {
                uint64_t v268 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v419, 128, v266, v267);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v419, 128, v266, v267, v81);
              uint64_t v268 = 64;
            }
          }
          else
          {
            uint64_t v268 = 0;
            int8x16_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
            float32x4_t v443 = 0u;
            float32x4_t v444 = 0u;
          }
          unint64_t v277 = v266 + v268;
          unsigned int v278 = v72[3];
          if (v72[3])
          {
            if (v278 < 0xF0)
            {
              if (v278 == 127)
              {
                float32x4_t v281 = *(float32x4_t *)(v277 + 16);
                float32x4_t v282 = *(float32x4_t *)(v277 + 32);
                float32x4_t v283 = *(float32x4_t *)(v277 + 48);
                float32x4_t v284 = *(float32x4_t *)(v277 + 64);
                float32x4_t v285 = *(float32x4_t *)(v277 + 80);
                float32x4_t v286 = *(float32x4_t *)(v277 + 96);
                float32x4_t v287 = *(float32x4_t *)(v277 + 112);
                int8x16_t v421 = *(int8x16_t *)v277;
                float32x4_t v422 = v282;
                float32x4_t v429 = v281;
                float32x4_t v430 = v283;
                float32x4_t v437 = v284;
                float32x4_t v438 = v286;
                float32x4_t v445 = v285;
                float32x4_t v446 = v287;
                uint64_t v279 = 128;
              }
              else if (v278 == 3)
              {
                float32x4_t v280 = vld1q_dup_f32((const float *)v277);
                int8x16_t v421 = (int8x16_t)v280;
                float32x4_t v422 = v280;
                float32x4_t v429 = v280;
                float32x4_t v430 = v280;
                float32x4_t v437 = v280;
                float32x4_t v438 = v280;
                float32x4_t v445 = v280;
                float32x4_t v446 = v280;
                uint64_t v279 = 4;
              }
              else
              {
                uint64_t v279 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v421, 128, v277, v278);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v421, 128, v277, v278, v81);
              uint64_t v279 = 64;
            }
          }
          else
          {
            uint64_t v279 = 0;
            int8x16_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
            float32x4_t v445 = 0u;
            float32x4_t v446 = 0u;
          }
          unint64_t v288 = v277 + v279;
          unsigned int v289 = v72[4];
          if (v72[4])
          {
            if (v289 < 0xF0)
            {
              if (v289 == 127)
              {
                float32x4_t v292 = *(float32x4_t *)(v288 + 16);
                float32x4_t v293 = *(float32x4_t *)(v288 + 32);
                float32x4_t v294 = *(float32x4_t *)(v288 + 48);
                float32x4_t v295 = *(float32x4_t *)(v288 + 64);
                float32x4_t v296 = *(float32x4_t *)(v288 + 80);
                float32x4_t v297 = *(float32x4_t *)(v288 + 96);
                float32x4_t v298 = *(float32x4_t *)(v288 + 112);
                int8x16_t v391 = *(int8x16_t *)v288;
                float32x4_t v392 = v293;
                float32x4_t v399 = v292;
                float32x4_t v400 = v294;
                float32x4_t v407 = v295;
                float32x4_t v408 = v297;
                float32x4_t v415 = v296;
                float32x4_t v416 = v298;
                uint64_t v290 = 128;
              }
              else if (v289 == 3)
              {
                float32x4_t v291 = vld1q_dup_f32((const float *)v288);
                int8x16_t v391 = (int8x16_t)v291;
                float32x4_t v392 = v291;
                float32x4_t v399 = v291;
                float32x4_t v400 = v291;
                float32x4_t v407 = v291;
                float32x4_t v408 = v291;
                float32x4_t v415 = v291;
                float32x4_t v416 = v291;
                uint64_t v290 = 4;
              }
              else
              {
                uint64_t v290 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v391, 128, v288, v289);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v391, 128, v288, v289, v81);
              uint64_t v290 = 64;
            }
          }
          else
          {
            uint64_t v290 = 0;
            int8x16_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
            float32x4_t v415 = 0u;
            float32x4_t v416 = 0u;
          }
          unint64_t v299 = v288 + v290;
          unsigned int v300 = v72[5];
          if (v72[5])
          {
            if (v300 < 0xF0)
            {
              if (v300 == 127)
              {
                float32x4_t v303 = *(float32x4_t *)(v299 + 16);
                float32x4_t v304 = *(float32x4_t *)(v299 + 32);
                float32x4_t v305 = *(float32x4_t *)(v299 + 48);
                float32x4_t v306 = *(float32x4_t *)(v299 + 64);
                float32x4_t v307 = *(float32x4_t *)(v299 + 80);
                float32x4_t v308 = *(float32x4_t *)(v299 + 96);
                float32x4_t v309 = *(float32x4_t *)(v299 + 112);
                int8x16_t v393 = *(int8x16_t *)v299;
                float32x4_t v394 = v304;
                float32x4_t v401 = v303;
                float32x4_t v402 = v305;
                float32x4_t v409 = v306;
                float32x4_t v410 = v308;
                float32x4_t v417 = v307;
                float32x4_t v418 = v309;
                uint64_t v301 = 128;
              }
              else if (v300 == 3)
              {
                float32x4_t v302 = vld1q_dup_f32((const float *)v299);
                int8x16_t v393 = (int8x16_t)v302;
                float32x4_t v394 = v302;
                float32x4_t v401 = v302;
                float32x4_t v402 = v302;
                float32x4_t v409 = v302;
                float32x4_t v410 = v302;
                float32x4_t v417 = v302;
                float32x4_t v418 = v302;
                uint64_t v301 = 4;
              }
              else
              {
                uint64_t v301 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v393, 128, v299, v300);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v393, 128, v299, v300, v81);
              uint64_t v301 = 64;
            }
          }
          else
          {
            uint64_t v301 = 0;
            int8x16_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
          }
          unint64_t v310 = v299 + v301;
          unsigned int v311 = v72[6];
          if (v72[6])
          {
            if (v311 < 0xF0)
            {
              if (v311 == 127)
              {
                float32x4_t v317 = *(float32x4_t *)(v310 + 16);
                float32x4_t v318 = *(float32x4_t *)(v310 + 32);
                float32x4_t v319 = *(float32x4_t *)(v310 + 48);
                float32x4_t v320 = *(float32x4_t *)(v310 + 64);
                float32x4_t v321 = *(float32x4_t *)(v310 + 80);
                float32x4_t v322 = *(float32x4_t *)(v310 + 96);
                float32x4_t v323 = *(float32x4_t *)(v310 + 112);
                int8x16_t v423 = *(int8x16_t *)v310;
                float32x4_t v424 = v318;
                float32x4_t v431 = v317;
                float32x4_t v432 = v319;
                float32x4_t v439 = v320;
                float32x4_t v440 = v322;
                float32x4_t v447 = v321;
                float32x4_t v448 = v323;
                uint64_t v312 = 128;
                unsigned int v313 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else if (v311 == 3)
              {
                float32x4_t v315 = vld1q_dup_f32((const float *)v310);
                int8x16_t v423 = (int8x16_t)v315;
                float32x4_t v424 = v315;
                float32x4_t v431 = v315;
                float32x4_t v432 = v315;
                float32x4_t v439 = v315;
                float32x4_t v440 = v315;
                float32x4_t v447 = v315;
                float32x4_t v448 = v315;
                uint64_t v312 = 4;
                unsigned int v313 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v312 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v423, 128, v310, v311);
                unsigned int v313 = v72[7];
                if (!v72[7])
                {
LABEL_226:
                  int8x16_t v425 = 0u;
                  float32x4_t v426 = 0u;
                  float32x4_t v433 = 0u;
                  float32x4_t v434 = 0u;
                  float32x4_t v441 = 0u;
                  float32x4_t v442 = 0u;
                  float32x4_t v449 = 0u;
                  float32x4_t v450 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v423, 128, v310, v311, v81);
              uint64_t v312 = 64;
              unsigned int v313 = v72[7];
              if (!v72[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v312 = 0;
            int8x16_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
            float32x4_t v447 = 0u;
            float32x4_t v448 = 0u;
            unsigned int v313 = v72[7];
            if (!v72[7]) {
              goto LABEL_226;
            }
          }
          unint64_t v314 = v310 + v312;
          if (v313 < 0xF0)
          {
            if (v313 == 127)
            {
              float32x4_t v324 = *(float32x4_t *)(v314 + 16);
              float32x4_t v325 = *(float32x4_t *)(v314 + 32);
              float32x4_t v326 = *(float32x4_t *)(v314 + 48);
              float32x4_t v327 = *(float32x4_t *)(v314 + 80);
              float32x4_t v328 = *(float32x4_t *)(v314 + 96);
              float32x4_t v329 = *(float32x4_t *)(v314 + 112);
              float32x4_t v330 = *(float32x4_t *)(v314 + 64);
              int8x16_t v425 = *(int8x16_t *)v314;
              float32x4_t v426 = v325;
              float32x4_t v433 = v324;
              float32x4_t v434 = v326;
              float32x4_t v441 = v330;
              float32x4_t v442 = v328;
              float32x4_t v449 = v327;
              float32x4_t v450 = v329;
            }
            else if (v313 == 3)
            {
              float32x4_t v316 = vld1q_dup_f32((const float *)v314);
              int8x16_t v425 = (int8x16_t)v316;
              float32x4_t v426 = v316;
              float32x4_t v433 = v316;
              float32x4_t v434 = v316;
              float32x4_t v441 = v316;
              float32x4_t v442 = v316;
              float32x4_t v449 = v316;
              float32x4_t v450 = v316;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v425, 128, v314, v313);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v425, 128, v314, v313, v81);
          }
LABEL_243:
          unsigned int v36 = v33 + 1;
          unint64_t v331 = v382;
          uint64_t v27 = v374;
          if (v382)
          {
            unint64_t v332 = 0;
            v333 = &v387.i8[128 * (unint64_t)v380 + 8 * v381];
            unsigned int v334 = v383;
            do
            {
              if (v334)
              {
                uint64_t v335 = 0;
                uint64_t v336 = v378 + v379 * v332;
                do
                {
                  *(unsigned char *)(v336 + v335) = v333[v335];
                  ++v335;
                  unsigned int v334 = v383;
                }
                while (8 * (unint64_t)v383 > v335);
                unint64_t v331 = v382;
              }
              ++v332;
              v333 += 128;
            }
            while (v332 < v331);
          }
LABEL_28:
          BOOL v22 = v33 == v362 >> 4;
          unsigned int v33 = v36;
        }
        while (!v22);
        BOOL v22 = v17++ == v354;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v276 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v227 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v209 = a8 + a10 - 1;
  unsigned int v211 = v209 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v231 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v221 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v220 = isLevelTiled;
  if (v16 <= v211)
  {
    unsigned int v219 = a7 + a9 - 1;
    if (a7 >> 4 <= v219 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v206 = a5 - 1;
      unsigned int v230 = (a5 - 1) >> 4;
      int v229 = ((a5 - 1) & 0xF) + 1;
      int v207 = ((a6 - 1) & 7) + 1;
      unsigned int v208 = (a6 - 1) >> 3;
      uint64_t v213 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v28.i64[0] = 0x2000000020;
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v30.i64[0] = 0x2000000010;
      *(int8x8_t *)v31.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v218 = v31.i32[0] | v31.i32[1];
      uint64_t v217 = v31.i64[0];
      BOOL v216 = v31.i32[0] != 0;
      BOOL v215 = v31.i32[1] != 0;
      unint64_t v205 = 8 * v18 * (unint64_t)v17;
      uint64_t v233 = 3 * a11;
      uint64_t v212 = 2 * a11;
      do
      {
        unsigned int v32 = (8 * v16) | 7;
        if (8 * v16 <= v227) {
          int v33 = v227;
        }
        else {
          int v33 = 8 * v16;
        }
        unsigned int v34 = a7 >> 4;
        if (v209 < v32) {
          unsigned int v32 = v209;
        }
        unsigned int v226 = 8 * v16;
        int v214 = v33 - 8 * v16;
        int v225 = v32 - v33 + 1;
        int v35 = v207;
        if (v16 != v208) {
          int v35 = 8;
        }
        unsigned int v232 = v35;
        uint64_t v224 = a2 + (v33 - v227) * v26;
        unsigned int v36 = a7;
        do
        {
          unsigned int v38 = 16 * v34;
          unsigned int v39 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= v36) {
            int v40 = v36;
          }
          else {
            int v40 = 16 * v34;
          }
          if (v219 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v34 == v230) {
            unsigned int v42 = v229;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (v226 >= v227 && v38 >= v36)
          {
            int v44 = v229;
            if (v34 != v230) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v225 != v232;
          }
          if (v220)
          {
            unsigned int v67 = 0;
            uint64_t v68 = v205 >> (*(unsigned char *)(v25 + 57) != 0);
            char v69 = 1;
            if (v68 > 127)
            {
              if (v68 > 511)
              {
                if (v68 == 512)
                {
                  char v70 = 0;
                  unsigned int v67 = 16;
                  unsigned int v71 = 16;
                }
                else
                {
                  char v70 = 1;
                  unsigned int v71 = 0;
                  if (v68 == 1024)
                  {
                    unsigned int v71 = 8;
                    unsigned int v67 = 16;
                  }
                }
              }
              else if (v68 == 128)
              {
                char v69 = 0;
                char v70 = 0;
                unsigned int v67 = 32;
                unsigned int v71 = 32;
              }
              else
              {
                char v70 = 1;
                unsigned int v71 = 0;
                if (v68 == 256)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 16;
                  unsigned int v67 = 32;
                }
              }
            }
            else
            {
              char v70 = 1;
              unsigned int v71 = 0;
              switch(v68)
              {
                case 4:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 128;
                  unsigned int v67 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 128;
                  unsigned int v71 = 128;
                  break;
                case 16:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 64;
                  unsigned int v67 = 128;
                  break;
                case 32:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 64;
                  unsigned int v71 = 64;
                  break;
                default:
                  if (v68 == 64)
                  {
                    char v69 = 0;
                    char v70 = 0;
                    unsigned int v71 = 32;
                    unsigned int v67 = 64;
                  }
                  break;
              }
            }
            unsigned int v194 = (v67 >> 4) - 1;
            if (v69) {
              unsigned int v195 = 0;
            }
            else {
              unsigned int v195 = 32 - __clz(~(-1 << -(char)__clz(v194)));
            }
            unsigned int v196 = (v71 >> 3) - 1;
            if (v70)
            {
              unsigned int v197 = 0;
              if (v195) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v197 = 32 - __clz(~(-1 << -(char)__clz(v196)));
              if (v197 | v195)
              {
LABEL_268:
                int v198 = 0;
                uint64_t v199 = 0;
                int v200 = v34 & v194;
                int v201 = v16 & v196;
                BOOL v202 = v197 != 0;
                BOOL v203 = v195 != 0;
                int v204 = 1;
                do
                {
                  --v197;
                  if (v202) {
                    v199 |= (unint64_t)(v204 & v201) << v198++;
                  }
                  else {
                    unsigned int v197 = 0;
                  }
                  --v195;
                  if (v203) {
                    v199 |= (unint64_t)(v204 & v200) << v198++;
                  }
                  else {
                    unsigned int v195 = 0;
                  }
                  v204 *= 2;
                  --v198;
                  BOOL v203 = v195 != 0;
                  BOOL v202 = v197 != 0;
                }
                while (v195 | v197);
                goto LABEL_280;
              }
            }
            uint64_t v199 = 0;
LABEL_280:
            unint64_t v53 = ((unint64_t)(v38 / v67 + v226 / v71 * ((v67 + v206) / v67)) << 14) + (v199 << 8);
            goto LABEL_60;
          }
          if (v218)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v216;
            BOOL v50 = v215;
            int v51 = v217;
            int v52 = HIDWORD(v217);
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v16) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v34) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 8;
LABEL_60:
          unsigned int v54 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_86:
              unint64_t v61 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_86;
            }
          }
          int v60 = 0;
          unint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            BOOL v65 = !v62;
            if (v62)
            {
              unint64_t v66 = ((unint64_t)(v64 & v34) << v60) | v61;
            }
            else
            {
              unsigned int v56 = 0;
              unint64_t v66 = v61;
            }
            if (!v65) {
              ++v60;
            }
            --v59;
            if (v63)
            {
              unint64_t v61 = ((unint64_t)(v64 & v16) << v60) | v66;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v61 = v66;
            }
            if (v63) {
              ++v60;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_87:
          uint64_t v72 = (int64x2_t *)(a3 + v53);
          if (v221)
          {
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v25 = v231;
            uint64_t v72 = (int64x2_t *)__dst;
          }
          uint64_t v73 = (unsigned __int8 *)(a4 + 8 * v61);
          char v74 = (int64x2_t *)(v224 + 4 * (v40 - v36));
          char v75 = v42 < 0x10 || v43;
          if ((v75 & 1) == 0 && v232 > 7)
          {
            uint64_t v76 = *(void *)(v25 + 208);
            int v77 = *(_DWORD *)(v76 + 52);
            unsigned int v78 = *v73;
            if (*v73)
            {
              uint64_t v26 = a11;
              uint64_t v79 = 2 * a11;
              if (v78 < 0xF0)
              {
                if (v78 == 63)
                {
                  i64 = (const double *)v72[2].i64;
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(i64);
                  int64x2_t v89 = *v72;
                  int64x2_t v28 = v72[1];
                  *char v74 = vzip1q_s64(*v72, v28);
                  int64x2_t v30 = vzip2q_s64(v89, v28);
                  *(int64x2_t *)((char *)v74 + a11) = v30;
                  unint64_t v90 = (int64x2_t *)((char *)v74 + v212);
                  *unint64_t v90 = v31;
                  *(int64x2_t *)((char *)v90 + a11) = v29;
                  uint64_t v80 = 64;
                }
                else if (v78 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16(v72->i16);
                  *char v74 = v31;
                  *(int64x2_t *)((char *)v74 + a11) = v31;
                  *(int64x2_t *)((char *)v74 + 2 * a11) = v31;
                  *(int64x2_t *)((char *)v74 + 3 * a11) = v31;
                  uint64_t v80 = 2;
                }
                else
                {
                  uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v74, a11, (uint64_t)v72, v78, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v74->i16, a11, (uint64_t)v72, v78, *(_DWORD *)(v76 + 52));
                uint64_t v80 = 32;
              }
            }
            else
            {
              uint64_t v80 = 0;
              v74->i64[0] = 0;
              v74->i64[1] = 0;
              uint64_t v26 = a11;
              uint64_t v85 = (uint64_t *)((char *)v74->i64 + a11);
              void *v85 = 0;
              v85[1] = 0;
              uint64_t v79 = 2 * a11;
              uint64_t v86 = (uint64_t *)((char *)v74->i64 + v212);
              *uint64_t v86 = 0;
              v86[1] = 0;
              float32x4_t v87 = (uint64_t *)((char *)v74->i64 + v233);
              *float32x4_t v87 = 0;
              v87[1] = 0;
            }
            uint64_t v91 = (uint64_t)v72->i64 + v80;
            float32x4_t v92 = v74 + 1;
            unsigned int v93 = v73[1];
            if (v73[1])
            {
              if (v93 < 0xF0)
              {
                if (v93 == 63)
                {
                  float32x4_t v98 = (const double *)(v91 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v98);
                  int64x2_t v99 = *(int64x2_t *)v91;
                  int64x2_t v28 = *(int64x2_t *)(v91 + 16);
                  *float32x4_t v92 = vzip1q_s64(*(int64x2_t *)v91, v28);
                  int64x2_t v30 = vzip2q_s64(v99, v28);
                  *(int64x2_t *)((char *)v92 + v26) = v30;
                  int v100 = (int64x2_t *)((char *)v92 + v79);
                  *int v100 = v31;
                  *(int64x2_t *)((char *)v100 + v26) = v29;
                  uint64_t v94 = 64;
                }
                else if (v93 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v91);
                  *float32x4_t v92 = v31;
                  *(int64x2_t *)((char *)v92 + v26) = v31;
                  *(int64x2_t *)((char *)v92 + v79) = v31;
                  *(int64x2_t *)((char *)v92 + 3 * a11) = v31;
                  uint64_t v94 = 2;
                }
                else
                {
                  uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v92, v26, v91, v93, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v92->i16, v26, v91, v93, v77);
                uint64_t v94 = 32;
              }
            }
            else
            {
              uint64_t v94 = 0;
              v92->i64[0] = 0;
              v74[1].i64[1] = 0;
              float32x4_t v95 = (uint64_t *)((char *)v92->i64 + v26);
              *float32x4_t v95 = 0;
              v95[1] = 0;
              float32x4_t v96 = (uint64_t *)((char *)v92->i64 + v79);
              *float32x4_t v96 = 0;
              v96[1] = 0;
              float32x4_t v97 = (uint64_t *)((char *)v92->i64 + v233);
              *float32x4_t v97 = 0;
              v97[1] = 0;
            }
            uint64_t v101 = v91 + v94;
            unint64_t v102 = (int64x2_t *)((char *)v74 + v213);
            unsigned int v103 = v73[2];
            if (v73[2])
            {
              if (v103 < 0xF0)
              {
                if (v103 == 63)
                {
                  unsigned int v108 = (const double *)(v101 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v108);
                  int64x2_t v109 = *(int64x2_t *)v101;
                  int64x2_t v28 = *(int64x2_t *)(v101 + 16);
                  *unint64_t v102 = vzip1q_s64(*(int64x2_t *)v101, v28);
                  int64x2_t v30 = vzip2q_s64(v109, v28);
                  *(int64x2_t *)((char *)v102 + v26) = v30;
                  unsigned int v110 = (int64x2_t *)((char *)v102 + v79);
                  *unsigned int v110 = v31;
                  *(int64x2_t *)((char *)v110 + v26) = v29;
                  uint64_t v104 = 64;
                }
                else if (v103 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
                  *unint64_t v102 = v31;
                  *(int64x2_t *)((char *)v102 + v26) = v31;
                  *(int64x2_t *)((char *)v102 + v79) = v31;
                  *(int64x2_t *)((char *)v102 + 3 * a11) = v31;
                  uint64_t v104 = 2;
                }
                else
                {
                  uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v74 + v213), v26, v101, v103, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v74->i16[(unint64_t)v213 / 2], v26, v101, v103, v77);
                uint64_t v104 = 32;
              }
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v102->i64[1] = 0;
              uint64_t v105 = (uint64_t *)((char *)v102->i64 + v26);
              *uint64_t v105 = 0;
              v105[1] = 0;
              int v106 = (uint64_t *)((char *)v102->i64 + v79);
              void *v106 = 0;
              v106[1] = 0;
              unint64_t v107 = (uint64_t *)((char *)v102->i64 + v233);
              *unint64_t v107 = 0;
              v107[1] = 0;
            }
            uint64_t v111 = v101 + v104;
            unsigned int v112 = v102 + 1;
            unsigned int v113 = v73[3];
            if (v73[3])
            {
              if (v113 < 0xF0)
              {
                if (v113 == 63)
                {
                  long long v118 = (const double *)(v111 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v118);
                  int64x2_t v119 = *(int64x2_t *)v111;
                  int64x2_t v28 = *(int64x2_t *)(v111 + 16);
                  *unsigned int v112 = vzip1q_s64(*(int64x2_t *)v111, v28);
                  int64x2_t v30 = vzip2q_s64(v119, v28);
                  *(int64x2_t *)((char *)v112 + v26) = v30;
                  __int32 v120 = (int64x2_t *)((char *)v112 + v79);
                  *__int32 v120 = v31;
                  *(int64x2_t *)((char *)v120 + v26) = v29;
                  uint64_t v114 = 64;
                }
                else if (v113 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v111);
                  *unsigned int v112 = v31;
                  *(int64x2_t *)((char *)v112 + v26) = v31;
                  *(int64x2_t *)((char *)v112 + v79) = v31;
                  *(int64x2_t *)((char *)v112 + 3 * a11) = v31;
                  uint64_t v114 = 2;
                }
                else
                {
                  uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v112, v26, v111, v113, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v112->i16, v26, v111, v113, v77);
                uint64_t v114 = 32;
              }
            }
            else
            {
              uint64_t v114 = 0;
              v112->i64[0] = 0;
              v102[1].i64[1] = 0;
              long long v115 = (uint64_t *)((char *)v112->i64 + v26);
              *long long v115 = 0;
              v115[1] = 0;
              long long v116 = (uint64_t *)((char *)v112->i64 + v79);
              *long long v116 = 0;
              v116[1] = 0;
              long long v117 = (uint64_t *)((char *)v112->i64 + v233);
              *long long v117 = 0;
              v117[1] = 0;
            }
            uint64_t v121 = v111 + v114;
            BOOL v122 = v74 + 2;
            unsigned int v123 = v73[4];
            if (v73[4])
            {
              if (v123 < 0xF0)
              {
                if (v123 == 63)
                {
                  unsigned int v128 = (const double *)(v121 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v128);
                  int64x2_t v129 = *(int64x2_t *)v121;
                  int64x2_t v28 = *(int64x2_t *)(v121 + 16);
                  *BOOL v122 = vzip1q_s64(*(int64x2_t *)v121, v28);
                  int64x2_t v30 = vzip2q_s64(v129, v28);
                  *(int64x2_t *)((char *)v122 + v26) = v30;
                  float32x4_t v130 = (int64x2_t *)((char *)v122 + v79);
                  *float32x4_t v130 = v31;
                  *(int64x2_t *)((char *)v130 + v26) = v29;
                  uint64_t v124 = 64;
                }
                else if (v123 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v121);
                  *BOOL v122 = v31;
                  *(int64x2_t *)((char *)v122 + v26) = v31;
                  *(int64x2_t *)((char *)v122 + v79) = v31;
                  *(int64x2_t *)((char *)v122 + 3 * a11) = v31;
                  uint64_t v124 = 2;
                }
                else
                {
                  uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v122, v26, v121, v123, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v122->i16, v26, v121, v123, v77);
                uint64_t v124 = 32;
              }
            }
            else
            {
              uint64_t v124 = 0;
              v122->i64[0] = 0;
              v74[2].i64[1] = 0;
              unsigned int v125 = (uint64_t *)((char *)v122->i64 + v26);
              *unsigned int v125 = 0;
              v125[1] = 0;
              uint64_t v126 = (uint64_t *)((char *)v122->i64 + v79);
              *uint64_t v126 = 0;
              v126[1] = 0;
              int v127 = (uint64_t *)((char *)v122->i64 + v233);
              *int v127 = 0;
              v127[1] = 0;
            }
            uint64_t v131 = v121 + v124;
            uint64_t v132 = v74 + 3;
            unsigned int v133 = v73[5];
            if (v73[5])
            {
              if (v133 < 0xF0)
              {
                if (v133 == 63)
                {
                  long long v138 = (const double *)(v131 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v138);
                  int64x2_t v139 = *(int64x2_t *)v131;
                  int64x2_t v28 = *(int64x2_t *)(v131 + 16);
                  *uint64_t v132 = vzip1q_s64(*(int64x2_t *)v131, v28);
                  int64x2_t v30 = vzip2q_s64(v139, v28);
                  *(int64x2_t *)((char *)v132 + v26) = v30;
                  long long v140 = (int64x2_t *)((char *)v132 + v79);
                  *long long v140 = v31;
                  *(int64x2_t *)((char *)v140 + v26) = v29;
                  uint64_t v134 = 64;
                }
                else if (v133 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v131);
                  *uint64_t v132 = v31;
                  *(int64x2_t *)((char *)v132 + v26) = v31;
                  *(int64x2_t *)((char *)v132 + v79) = v31;
                  *(int64x2_t *)((char *)v132 + 3 * a11) = v31;
                  uint64_t v134 = 2;
                }
                else
                {
                  uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v132, v26, v131, v133, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v132->i16, v26, v131, v133, v77);
                uint64_t v134 = 32;
              }
            }
            else
            {
              uint64_t v134 = 0;
              v132->i64[0] = 0;
              v74[3].i64[1] = 0;
              float32x4_t v135 = (uint64_t *)((char *)v132->i64 + v26);
              *float32x4_t v135 = 0;
              v135[1] = 0;
              long long v136 = (uint64_t *)((char *)v132->i64 + v79);
              *long long v136 = 0;
              v136[1] = 0;
              long long v137 = (uint64_t *)((char *)v132->i64 + v233);
              *long long v137 = 0;
              v137[1] = 0;
            }
            uint64_t v141 = v131 + v134;
            char v142 = v102 + 2;
            unsigned int v143 = v73[6];
            if (v73[6])
            {
              if (v143 < 0xF0)
              {
                if (v143 == 63)
                {
                  uint64_t v148 = (const double *)(v141 + 32);
                  *(float64x2x2_t *)v31.i8 = vld2q_f64(v148);
                  int64x2_t v149 = *(int64x2_t *)v141;
                  int64x2_t v28 = *(int64x2_t *)(v141 + 16);
                  *char v142 = vzip1q_s64(*(int64x2_t *)v141, v28);
                  int64x2_t v30 = vzip2q_s64(v149, v28);
                  *(int64x2_t *)((char *)v142 + v26) = v30;
                  uint64_t v150 = (int64x2_t *)((char *)v142 + v79);
                  *uint64_t v150 = v31;
                  *(int64x2_t *)((char *)v150 + v26) = v29;
                  uint64_t v144 = 64;
                }
                else if (v143 == 1)
                {
                  int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v141);
                  *char v142 = v31;
                  *(int64x2_t *)((char *)v142 + v26) = v31;
                  *(int64x2_t *)((char *)v142 + v79) = v31;
                  *(int64x2_t *)((char *)v142 + 3 * a11) = v31;
                  uint64_t v144 = 2;
                }
                else
                {
                  uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v142, v26, v131 + v134, v143, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v142->i16, v26, v131 + v134, v143, v77);
                uint64_t v144 = 32;
              }
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v102[2].i64[1] = 0;
              uint64_t v145 = (uint64_t *)((char *)v142->i64 + v26);
              *uint64_t v145 = 0;
              v145[1] = 0;
              unsigned int v146 = (uint64_t *)((char *)v142->i64 + v79);
              *unsigned int v146 = 0;
              v146[1] = 0;
              uint64_t v147 = (uint64_t *)((char *)v142->i64 + v233);
              *uint64_t v147 = 0;
              v147[1] = 0;
            }
            float32x4_t v151 = v102 + 3;
            unsigned int v152 = v73[7];
            if (v73[7])
            {
              uint64_t v153 = v141 + v144;
              if (v152 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v151->i16, v26, v153, v152, v77);
                goto LABEL_169;
              }
              unsigned int v36 = a7;
              if (v152 == 63)
              {
                long long v157 = (const double *)(v153 + 32);
                *(float64x2x2_t *)v31.i8 = vld2q_f64(v157);
                int64x2_t v158 = *(int64x2_t *)v153;
                int64x2_t v28 = *(int64x2_t *)(v153 + 16);
                *float32x4_t v151 = vzip1q_s64(*(int64x2_t *)v153, v28);
                int64x2_t v30 = vzip2q_s64(v158, v28);
                *(int64x2_t *)((char *)v151 + v26) = v30;
                long long v159 = (int64x2_t *)((char *)v151 + v79);
                int64x2_t *v159 = v31;
                *(int64x2_t *)((char *)v159 + v26) = v29;
              }
              else if (v152 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v153);
                *float32x4_t v151 = v31;
                *(int64x2_t *)((char *)v151 + v26) = v31;
                *(int64x2_t *)((char *)v151 + v79) = v31;
                *(int64x2_t *)((char *)v151 + 3 * a11) = v31;
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v151, v26, v153, v152, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              v151->i64[0] = 0;
              v102[3].i64[1] = 0;
              uint64_t v154 = (uint64_t *)((char *)v151->i64 + v26);
              *uint64_t v154 = 0;
              v154[1] = 0;
              long long v155 = (uint64_t *)((char *)v151->i64 + v79);
              *long long v155 = 0;
              v155[1] = 0;
              float32x4_t v156 = (uint64_t *)((char *)v151->i64 + v233);
              *float32x4_t v156 = 0;
              v156[1] = 0;
LABEL_169:
              unsigned int v36 = a7;
            }
            uint64_t v25 = v231;
LABEL_27:
            unsigned int v37 = v34 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v72;
          char v241 = v42;
          char v242 = v232;
          unsigned int v237 = v214;
          unsigned int v238 = v40 - v38;
          block[6] = v73;
          uint64_t v235 = v74;
          uint64_t v26 = a11;
          uint64_t v236 = a11;
          unsigned int v239 = v225;
          unsigned int v240 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v231;
            unsigned int v36 = a7;
            goto LABEL_27;
          }
          uint64_t v81 = *(void *)(v25 + 208);
          int v82 = *(_DWORD *)(v81 + 52);
          unsigned int v83 = *v73;
          if (*v73)
          {
            if (v83 < 0xF0)
            {
              if (v83 == 63)
              {
                int64x2_t v29 = v72[1];
                long long v160 = (const double *)v72[2].i64;
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v160);
                int64x2_t v31 = vzip2q_s64(*v72, v29);
                int64x2_t v244 = vzip1q_s64(*v72, v29);
                int64x2_t v248 = v31;
                int64x2_t v252 = v30;
                int64x2_t v256 = v28;
                uint64_t v84 = 64;
              }
              else if (v83 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16(v72->i16);
                int64x2_t v244 = v31;
                int64x2_t v248 = v31;
                int64x2_t v252 = v31;
                int64x2_t v256 = v31;
                uint64_t v84 = 2;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v244, 64, (uint64_t)v72, v83, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v244.i16, 64, (uint64_t)v72, v83, *(_DWORD *)(v81 + 52));
              uint64_t v84 = 32;
            }
          }
          else
          {
            uint64_t v84 = 0;
            int64x2_t v244 = 0uLL;
            int64x2_t v248 = 0uLL;
            int64x2_t v252 = 0uLL;
            int64x2_t v256 = 0uLL;
          }
          uint64_t v161 = (uint64_t)v72->i64 + v84;
          unsigned int v162 = v73[1];
          if (v73[1])
          {
            if (v162 < 0xF0)
            {
              if (v162 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v161 + 16);
                int32x2_t v164 = (const double *)(v161 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v164);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v161, v29);
                int64x2_t v245 = vzip1q_s64(*(int64x2_t *)v161, v29);
                int64x2_t v249 = v31;
                int64x2_t v253 = v30;
                int64x2_t v257 = v28;
                uint64_t v163 = 64;
              }
              else if (v162 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v161);
                int64x2_t v245 = v31;
                int64x2_t v249 = v31;
                int64x2_t v253 = v31;
                int64x2_t v257 = v31;
                uint64_t v163 = 2;
              }
              else
              {
                uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v245, 64, v161, v162, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v245.i16, 64, v161, v162, v82);
              uint64_t v163 = 32;
            }
          }
          else
          {
            uint64_t v163 = 0;
            int64x2_t v245 = 0uLL;
            int64x2_t v249 = 0uLL;
            int64x2_t v253 = 0uLL;
            int64x2_t v257 = 0uLL;
          }
          uint64_t v165 = v161 + v163;
          unsigned int v166 = v73[2];
          if (v73[2])
          {
            if (v166 < 0xF0)
            {
              if (v166 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v165 + 16);
                uint64_t v168 = (const double *)(v165 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v168);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v165, v29);
                int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v165, v29);
                int64x2_t v264 = v31;
                int64x2_t v268 = v30;
                int64x2_t v272 = v28;
                uint64_t v167 = 64;
              }
              else if (v166 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v165);
                int64x2_t v260 = v31;
                int64x2_t v264 = v31;
                int64x2_t v268 = v31;
                int64x2_t v272 = v31;
                uint64_t v167 = 2;
              }
              else
              {
                uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v260, 64, v165, v166, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v260.i16, 64, v165, v166, v82);
              uint64_t v167 = 32;
            }
          }
          else
          {
            uint64_t v167 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v169 = v165 + v167;
          unsigned int v170 = v73[3];
          if (v73[3])
          {
            if (v170 < 0xF0)
            {
              if (v170 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v169 + 16);
                float32x4_t v172 = (const double *)(v169 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v172);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v169, v29);
                int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v169, v29);
                int64x2_t v265 = v31;
                int64x2_t v269 = v30;
                int64x2_t v273 = v28;
                uint64_t v171 = 64;
              }
              else if (v170 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v169);
                int64x2_t v261 = v31;
                int64x2_t v265 = v31;
                int64x2_t v269 = v31;
                int64x2_t v273 = v31;
                uint64_t v171 = 2;
              }
              else
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v261, 64, v169, v170, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v261.i16, 64, v169, v170, v82);
              uint64_t v171 = 32;
            }
          }
          else
          {
            uint64_t v171 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v173 = v169 + v171;
          unsigned int v174 = v73[4];
          if (v73[4])
          {
            if (v174 < 0xF0)
            {
              if (v174 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v173 + 16);
                long long v176 = (const double *)(v173 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v176);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v173, v29);
                int64x2_t v246 = vzip1q_s64(*(int64x2_t *)v173, v29);
                int64x2_t v250 = v31;
                int64x2_t v254 = v30;
                int64x2_t v258 = v28;
                uint64_t v175 = 64;
              }
              else if (v174 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v173);
                int64x2_t v246 = v31;
                int64x2_t v250 = v31;
                int64x2_t v254 = v31;
                int64x2_t v258 = v31;
                uint64_t v175 = 2;
              }
              else
              {
                uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v246, 64, v173, v174, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v246.i16, 64, v173, v174, v82);
              uint64_t v175 = 32;
            }
          }
          else
          {
            uint64_t v175 = 0;
            int64x2_t v246 = 0uLL;
            int64x2_t v250 = 0uLL;
            int64x2_t v254 = 0uLL;
            int64x2_t v258 = 0uLL;
          }
          uint64_t v177 = v173 + v175;
          unsigned int v178 = v73[5];
          if (v73[5])
          {
            if (v178 < 0xF0)
            {
              if (v178 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v177 + 16);
                long long v180 = (const double *)(v177 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v180);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v177, v29);
                int64x2_t v247 = vzip1q_s64(*(int64x2_t *)v177, v29);
                int64x2_t v251 = v31;
                int64x2_t v255 = v30;
                int64x2_t v259 = v28;
                uint64_t v179 = 64;
              }
              else if (v178 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v177);
                int64x2_t v247 = v31;
                int64x2_t v251 = v31;
                int64x2_t v255 = v31;
                int64x2_t v259 = v31;
                uint64_t v179 = 2;
              }
              else
              {
                uint64_t v179 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v247, 64, v177, v178, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v247.i16, 64, v177, v178, v82);
              uint64_t v179 = 32;
            }
          }
          else
          {
            uint64_t v179 = 0;
            int64x2_t v247 = 0uLL;
            int64x2_t v251 = 0uLL;
            int64x2_t v255 = 0uLL;
            int64x2_t v259 = 0uLL;
          }
          uint64_t v181 = v177 + v179;
          unsigned int v182 = v73[6];
          if (v73[6])
          {
            if (v182 < 0xF0)
            {
              if (v182 == 63)
              {
                int64x2_t v29 = *(int64x2_t *)(v181 + 16);
                unint64_t v186 = (const double *)(v181 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v186);
                int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v181, v29);
                int64x2_t v262 = vzip1q_s64(*(int64x2_t *)v181, v29);
                int64x2_t v266 = v31;
                int64x2_t v270 = v30;
                int64x2_t v274 = v28;
                uint64_t v183 = 64;
                unsigned int v184 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else if (v182 == 1)
              {
                int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v181);
                int64x2_t v262 = v31;
                int64x2_t v266 = v31;
                int64x2_t v270 = v31;
                int64x2_t v274 = v31;
                uint64_t v183 = 2;
                unsigned int v184 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v183 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v262, 64, v181, v182, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
                unsigned int v184 = v73[7];
                if (!v73[7])
                {
LABEL_226:
                  int64x2_t v263 = 0uLL;
                  int64x2_t v267 = 0uLL;
                  int64x2_t v271 = 0uLL;
                  int64x2_t v275 = 0uLL;
                  unsigned int v36 = a7;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v262.i16, 64, v181, v182, v82);
              uint64_t v183 = 32;
              unsigned int v184 = v73[7];
              if (!v73[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v183 = 0;
            int64x2_t v262 = 0uLL;
            int64x2_t v266 = 0uLL;
            int64x2_t v270 = 0uLL;
            int64x2_t v274 = 0uLL;
            unsigned int v184 = v73[7];
            if (!v73[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v185 = v181 + v183;
          if (v184 < 0xF0)
          {
            unsigned int v36 = a7;
            if (v184 == 63)
            {
              int64x2_t v29 = *(int64x2_t *)(v185 + 16);
              unsigned int v187 = (const double *)(v185 + 32);
              *(float64x2x2_t *)v30.i8 = vld2q_f64(v187);
              int64x2_t v31 = vzip2q_s64(*(int64x2_t *)v185, v29);
              int64x2_t v263 = vzip1q_s64(*(int64x2_t *)v185, v29);
              int64x2_t v267 = v31;
              int64x2_t v271 = v30;
              int64x2_t v275 = v28;
            }
            else if (v184 == 1)
            {
              int64x2_t v31 = (int64x2_t)vld1q_dup_s16((const __int16 *)v185);
              int64x2_t v263 = v31;
              int64x2_t v267 = v31;
              int64x2_t v271 = v31;
              int64x2_t v275 = v31;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v263, 64, v185, v184, *(double *)v31.i64, *(double *)v29.i64, *(double *)v30.i64, *(int8x8_t *)v28.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v263.i16, 64, v185, v184, v82);
            unsigned int v36 = a7;
          }
LABEL_243:
          unsigned int v37 = v34 + 1;
          unint64_t v188 = v239;
          uint64_t v25 = v231;
          if (v239)
          {
            unint64_t v189 = 0;
            int32x2_t v190 = &v244.i8[64 * (unint64_t)v237 + 4 * v238];
            unsigned int v191 = v240;
            do
            {
              if (v191)
              {
                uint64_t v192 = 0;
                float32x4_t v193 = &v235->i8[v236 * v189];
                do
                {
                  v193[v192] = v190[v192];
                  ++v192;
                  unsigned int v191 = v240;
                }
                while (4 * (unint64_t)v240 > v192);
                unint64_t v188 = v239;
              }
              ++v189;
              v190 += 64;
            }
            while (v189 < v188);
          }
LABEL_28:
          BOOL v20 = v34 == v219 >> 4;
          unsigned int v34 = v37;
        }
        while (!v20);
        BOOL v20 = v16++ == v211;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v151[52] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v129 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v112 = a8 + a10 - 1;
  unsigned int v114 = v112 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v132 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v123 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v122 = isLevelTiled;
  if (v17 <= v114)
  {
    unsigned int v121 = a7 + a9 - 1;
    unsigned int v111 = a7 >> 4;
    if (a7 >> 4 <= v121 >> 4)
    {
      unsigned int v108 = a5 - 1;
      unsigned int v110 = (a6 - 1) >> 3;
      int v130 = ((a5 - 1) & 0xF) + 1;
      unsigned int v131 = (a5 - 1) >> 4;
      int v109 = ((a6 - 1) & 7) + 1;
      uint64_t v115 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v120 = v28.i32[0] | v28.i32[1];
      int8x8_t v119 = v28;
      BOOL v117 = v28.i32[1] != 0;
      BOOL v118 = v28.i32[0] != 0;
      unint64_t v107 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v129) {
          int v30 = v129;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v111;
        if (v112 < v29) {
          unsigned int v29 = v112;
        }
        int v116 = v30 - 8 * v17;
        int v127 = v29 - v30 + 1;
        unsigned int v128 = 8 * v17;
        int v32 = v109;
        if (v17 != v110) {
          int v32 = 8;
        }
        unsigned int v133 = v32;
        uint64_t v126 = a2 + (v30 - v129) * a11;
        do
        {
          unsigned int v33 = 16 * v31;
          unsigned int v34 = 16 * (v31 + 1) - 1;
          if (16 * v31 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v31;
          }
          if (v121 < v34) {
            unsigned int v34 = v121;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v131) {
            unsigned int v37 = v130;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v128 >= v129 && v33 >= a7)
          {
            int v39 = v130;
            if (v31 != v131) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v127 != v133;
          }
          if (v122)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v107 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v96 = (v62 >> 4) - 1;
            if (v64) {
              unsigned int v97 = 0;
            }
            else {
              unsigned int v97 = 32 - __clz(~(-1 << -(char)__clz(v96)));
            }
            unsigned int v98 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v99 = 0;
              if (v97) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
              if (v99 | v97)
              {
LABEL_121:
                int v100 = 0;
                uint64_t v101 = 0;
                int v102 = v31 & v96;
                int v103 = v17 & v98;
                BOOL v104 = v99 != 0;
                BOOL v105 = v97 != 0;
                int v106 = 1;
                do
                {
                  --v99;
                  if (v104) {
                    v101 |= (unint64_t)(v106 & v103) << v100++;
                  }
                  else {
                    unsigned int v99 = 0;
                  }
                  --v97;
                  if (v105) {
                    v101 |= (unint64_t)(v106 & v102) << v100++;
                  }
                  else {
                    unsigned int v97 = 0;
                  }
                  v106 *= 2;
                  --v100;
                  BOOL v105 = v97 != 0;
                  BOOL v104 = v99 != 0;
                }
                while (v97 | v99);
                goto LABEL_133;
              }
            }
            uint64_t v101 = 0;
LABEL_133:
            unint64_t v48 = ((unint64_t)(v33 / v62 + v128 / v66 * ((v62 + v108) / v62)) << 14) + (v101 << 9);
            goto LABEL_60;
          }
          if (v120)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v117;
            BOOL v45 = v118;
            __int32 v46 = v119.i32[0];
            __int32 v47 = v119.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_86:
              unint64_t v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          int v55 = 0;
          unint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            BOOL v60 = !v57;
            if (v57)
            {
              unint64_t v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              unsigned int v51 = 0;
              unint64_t v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              unsigned int v54 = 0;
              unint64_t v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          unsigned int v67 = (unsigned char *)(a3 + v48);
          if (v123)
          {
            int v68 = v36;
            unsigned int v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            unsigned int v37 = v69;
            int v36 = v68;
            uint64_t v26 = v132;
            unsigned int v67 = __dst;
          }
          char v70 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v71 = a7;
          uint64_t v72 = v126 + 8 * (v35 - a7);
          char v73 = v37 < 0x10 || v38;
          if ((v73 & 1) == 0 && v133 > 7)
          {
            int v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            uint64_t v75 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, (uint64_t)v67, *v70, v74)];
            uint64_t v76 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 32, a11, v75, v70[1], v74);
            uint64_t v77 = v76
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115, a11, v76, v70[2], v74);
            uint64_t v78 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 32, a11, v77, v70[3], v74);
            uint64_t v79 = v78
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 64, a11, v78, v70[4], v74);
            uint64_t v80 = v79
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 96, a11, v79, v70[5], v74);
            uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 64, a11, v80, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v115 + 96, a11, v80 + v81, v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          char v141 = v37;
          char v142 = v133;
          unsigned int v137 = v116;
          unsigned int v138 = v35 - v33;
          block[6] = v70;
          uint64_t v135 = v72;
          uint64_t v136 = a11;
          unsigned int v139 = v127;
          unsigned int v140 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          int v82 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          uint64_t v83 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v144, 128, (uint64_t)v67, *v70, v82)];
          uint64_t v84 = v83
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v145, 128, v83, v70[1], v82);
          uint64_t v85 = v84
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v148, 128, v84, v70[2], v82);
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v149, 128, v85, v70[3], v82);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v146, 128, v86, v70[4], v82);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v147, 128, v87, v70[5], v82);
          uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v150, 128, v88, v70[6], v82);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v151, 128, v88 + v89, v70[7], v82);
          unint64_t v90 = v139;
          a7 = v71;
          if (v139)
          {
            unint64_t v91 = 0;
            float32x4_t v92 = &v144[128 * (unint64_t)v137 + 8 * v138];
            unsigned int v93 = v140;
            do
            {
              if (v93)
              {
                uint64_t v94 = 0;
                uint64_t v95 = v135 + v136 * v91;
                do
                {
                  *(unsigned char *)(v95 + v94) = v92[v94];
                  ++v94;
                  unsigned int v93 = v140;
                }
                while (8 * (unint64_t)v140 > v94);
                unint64_t v90 = v139;
              }
              ++v91;
              v92 += 128;
            }
            while (v91 < v90);
          }
LABEL_28:
          BOOL v21 = v31++ == v121 >> 4;
          uint64_t v26 = v132;
        }
        while (!v21);
        BOOL v21 = v17++ == v114;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v434 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v353 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v335 = a8 + a10 - 1;
  unsigned int v337 = v335 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v357 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v357;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v347 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v29 = v357;
  BOOL v346 = isLevelTiled;
  if (v17 <= v337)
  {
    unsigned int v345 = a7 + a9 - 1;
    if (a7 >> 4 <= v345 >> 4)
    {
      uint64_t v30 = a11;
      unsigned int v332 = a5 - 1;
      unsigned int v356 = (a5 - 1) >> 4;
      int v355 = ((a5 - 1) & 0xF) + 1;
      int v333 = ((a6 - 1) & 7) + 1;
      unsigned int v334 = (a6 - 1) >> 3;
      uint64_t v339 = 4 * a11;
      uint32x2_t v31 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v31, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      *(int8x8_t *)v27.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v31));
      __int32 v344 = v27.i32[0] | v27.i32[1];
      uint64_t v343 = v27.i64[0];
      BOOL v342 = v27.i32[0] != 0;
      BOOL v341 = v27.i32[1] != 0;
      unint64_t v331 = 8 * v19 * (unint64_t)v18;
      uint64_t v359 = 3 * a11;
      uint64_t v338 = 2 * a11;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v353) {
          int v33 = v353;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = a7 >> 4;
        if (v335 < v32) {
          unsigned int v32 = v335;
        }
        unsigned int v352 = 8 * v17;
        int v340 = v33 - 8 * v17;
        int v351 = v32 - v33 + 1;
        int v35 = v333;
        if (v17 != v334) {
          int v35 = 8;
        }
        unsigned int v358 = v35;
        uint64_t v350 = a2 + (v33 - v353) * v30;
        unsigned int v36 = a7;
        do
        {
          unsigned int v38 = 16 * v34;
          unsigned int v39 = 16 * (v34 + 1) - 1;
          if (16 * v34 <= v36) {
            int v40 = v36;
          }
          else {
            int v40 = 16 * v34;
          }
          if (v345 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v34 == v356) {
            unsigned int v42 = v355;
          }
          else {
            unsigned int v42 = 16;
          }
          BOOL v43 = 1;
          if (v352 >= v353 && v38 >= v36)
          {
            int v44 = v355;
            if (v34 != v356) {
              int v44 = 16;
            }
            BOOL v43 = v41 != v44 || v351 != v358;
          }
          if (v346)
          {
            unsigned int v67 = 0;
            uint64_t v68 = v331 >> (*(unsigned char *)(v29 + 57) != 0);
            char v69 = 1;
            if (v68 > 127)
            {
              if (v68 > 511)
              {
                if (v68 == 512)
                {
                  char v70 = 0;
                  unsigned int v67 = 16;
                  unsigned int v71 = 16;
                }
                else
                {
                  char v70 = 1;
                  unsigned int v71 = 0;
                  if (v68 == 1024)
                  {
                    unsigned int v71 = 8;
                    unsigned int v67 = 16;
                  }
                }
              }
              else if (v68 == 128)
              {
                char v69 = 0;
                char v70 = 0;
                unsigned int v67 = 32;
                unsigned int v71 = 32;
              }
              else
              {
                char v70 = 1;
                unsigned int v71 = 0;
                if (v68 == 256)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 16;
                  unsigned int v67 = 32;
                }
              }
            }
            else
            {
              char v70 = 1;
              unsigned int v71 = 0;
              switch(v68)
              {
                case 4:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 128;
                  unsigned int v67 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 128;
                  unsigned int v71 = 128;
                  break;
                case 16:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 64;
                  unsigned int v67 = 128;
                  break;
                case 32:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 64;
                  unsigned int v71 = 64;
                  break;
                default:
                  if (v68 == 64)
                  {
                    char v69 = 0;
                    char v70 = 0;
                    unsigned int v71 = 32;
                    unsigned int v67 = 64;
                  }
                  break;
              }
            }
            unsigned int v320 = (v67 >> 4) - 1;
            if (v69) {
              unsigned int v321 = 0;
            }
            else {
              unsigned int v321 = 32 - __clz(~(-1 << -(char)__clz(v320)));
            }
            unsigned int v322 = (v71 >> 3) - 1;
            if (v70)
            {
              unsigned int v323 = 0;
              if (v321) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v323 = 32 - __clz(~(-1 << -(char)__clz(v322)));
              if (v323 | v321)
              {
LABEL_268:
                int v324 = 0;
                uint64_t v325 = 0;
                int v326 = v34 & v320;
                int v327 = v17 & v322;
                BOOL v328 = v323 != 0;
                BOOL v329 = v321 != 0;
                int v330 = 1;
                do
                {
                  --v323;
                  if (v328) {
                    v325 |= (unint64_t)(v330 & v327) << v324++;
                  }
                  else {
                    unsigned int v323 = 0;
                  }
                  --v321;
                  if (v329) {
                    v325 |= (unint64_t)(v330 & v326) << v324++;
                  }
                  else {
                    unsigned int v321 = 0;
                  }
                  v330 *= 2;
                  --v324;
                  BOOL v329 = v321 != 0;
                  BOOL v328 = v323 != 0;
                }
                while (v321 | v323);
                goto LABEL_280;
              }
            }
            uint64_t v325 = 0;
LABEL_280:
            unint64_t v53 = ((unint64_t)(v38 / v67 + v352 / v71 * ((v67 + v332) / v67)) << 14) + (v325 << 9);
            goto LABEL_60;
          }
          if (v344)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v342;
            BOOL v50 = v341;
            int v51 = v343;
            int v52 = HIDWORD(v343);
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v17) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v34) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_60:
          unsigned int v54 = *(_DWORD *)(v29 + 128) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 15;
          if (v55 < 0x20) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 4) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v29 + 132) >> (*(unsigned char *)(v29 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_86:
              unint64_t v61 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_86;
            }
          }
          int v60 = 0;
          unint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            BOOL v65 = !v62;
            if (v62)
            {
              unint64_t v66 = ((unint64_t)(v64 & v34) << v60) | v61;
            }
            else
            {
              unsigned int v56 = 0;
              unint64_t v66 = v61;
            }
            if (!v65) {
              ++v60;
            }
            --v59;
            if (v63)
            {
              unint64_t v61 = ((unint64_t)(v64 & v17) << v60) | v66;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v61 = v66;
            }
            if (v63) {
              ++v60;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_87:
          uint64_t v72 = (int32x4_t *)(a3 + v53);
          if (v347)
          {
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v29 = v357;
            uint64_t v72 = (int32x4_t *)__dst;
          }
          char v73 = (unsigned __int8 *)(a4 + 8 * v61);
          uint64_t v74 = v350 + 8 * (v40 - v36);
          char v75 = v42 < 0x10 || v43;
          if ((v75 & 1) == 0 && v358 > 7)
          {
            uint64_t v76 = *(void *)(v29 + 208);
            int v77 = *(_DWORD *)(v76 + 52);
            unsigned int v78 = *v73;
            if (*v73)
            {
              uint64_t v30 = a11;
              uint64_t v79 = 2 * a11;
              if (v78 < 0xF0)
              {
                if (v78 == 127)
                {
                  int32x4_t v80 = *v72;
                  int32x4_t v28 = v72[1];
                  int32x4_t v93 = v72[2];
                  int32x4_t v94 = v72[3];
                  int32x4_t v95 = v72[5];
                  int32x4_t v96 = v72[6];
                  int32x4_t v97 = v72[7];
                  int32x4_t v98 = v72[4];
                  *(int32x4_t *)uint64_t v74 = *v72;
                  *(int32x4_t *)(v74 + 16) = v93;
                  unsigned int v99 = (int32x4_t *)(v74 + v338);
                  int v100 = (int32x4_t *)(v74 + a11);
                  *int v100 = v28;
                  v100[1] = v94;
                  *unsigned int v99 = v98;
                  v99[1] = v96;
                  uint64_t v101 = (int32x4_t *)(v74 + v338 + a11);
                  *uint64_t v101 = v95;
                  v101[1] = v97;
                  uint64_t v81 = 128;
                }
                else if (v78 == 3)
                {
                  int32x4_t v80 = (int32x4_t)vld1q_dup_f32((const float *)v72->i32);
                  *(int32x4_t *)uint64_t v74 = v80;
                  *(int32x4_t *)(v74 + 16) = v80;
                  unint64_t v90 = (int32x4_t *)(v74 + a11);
                  *unint64_t v90 = v80;
                  v90[1] = v80;
                  unint64_t v91 = (int32x4_t *)(v74 + v338);
                  *unint64_t v91 = v80;
                  v91[1] = v80;
                  float32x4_t v92 = (int32x4_t *)(v74 + v359);
                  *float32x4_t v92 = v80;
                  v92[1] = v80;
                  uint64_t v81 = 4;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v74, a11, (uint64_t)v72, v78, v27, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v74, a11, (uint64_t)v72, v78, *(_DWORD *)(v76 + 52));
                uint64_t v81 = 64;
              }
            }
            else
            {
              uint64_t v81 = 0;
              int32x4_t v80 = 0uLL;
              *(_OWORD *)uint64_t v74 = 0u;
              *(_OWORD *)(v74 + 16) = 0u;
              uint64_t v30 = a11;
              uint64_t v87 = (_OWORD *)(v74 + a11);
              *uint64_t v87 = 0u;
              v87[1] = 0u;
              uint64_t v79 = 2 * a11;
              uint64_t v88 = (_OWORD *)(v74 + v338);
              *uint64_t v88 = 0u;
              v88[1] = 0u;
              uint64_t v89 = (_OWORD *)(v74 + v359);
              *uint64_t v89 = 0u;
              v89[1] = 0u;
            }
            uint64_t v102 = (uint64_t)v72->i64 + v81;
            int v103 = (int16x8_t *)(v74 + 32);
            unsigned int v104 = v73[1];
            if (v73[1])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 127)
                {
                  int32x4_t v105 = *(int32x4_t *)v102;
                  int32x4_t v28 = *(int32x4_t *)(v102 + 16);
                  long long v113 = *(_OWORD *)(v102 + 32);
                  int32x4_t v114 = *(int32x4_t *)(v102 + 48);
                  long long v115 = *(_OWORD *)(v102 + 80);
                  long long v116 = *(_OWORD *)(v102 + 96);
                  long long v117 = *(_OWORD *)(v102 + 112);
                  long long v118 = *(_OWORD *)(v102 + 64);
                  *int v103 = *(int16x8_t *)v102;
                  *(_OWORD *)(v74 + 48) = v113;
                  int8x8_t v119 = &v103->i8[v79];
                  __int32 v120 = (int32x4_t *)&v103->i8[v30];
                  *__int32 v120 = v28;
                  v120[1] = v114;
                  *(_OWORD *)int8x8_t v119 = v118;
                  *((_OWORD *)v119 + 1) = v116;
                  unsigned int v121 = &v103->i8[v79 + v30];
                  *(_OWORD *)unsigned int v121 = v115;
                  *((_OWORD *)v121 + 1) = v117;
                  uint64_t v106 = 128;
                }
                else if (v104 == 3)
                {
                  int32x4_t v105 = (int32x4_t)vld1q_dup_f32((const float *)v102);
                  *(int32x4_t *)(v74 + 32) = v105;
                  *(int32x4_t *)(v74 + 48) = v105;
                  unsigned int v110 = (int32x4_t *)&v103->i8[v30];
                  *unsigned int v110 = v105;
                  v110[1] = v105;
                  unsigned int v111 = (int32x4_t *)&v103->i8[v79];
                  *unsigned int v111 = v105;
                  v111[1] = v105;
                  unsigned int v112 = (int32x4_t *)&v103->i8[v359];
                  *unsigned int v112 = v105;
                  v112[1] = v105;
                  uint64_t v106 = 4;
                }
                else
                {
                  uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v103, v30, v102, v104, v80, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v103->i32, v30, v102, v104, v77);
                uint64_t v106 = 64;
              }
            }
            else
            {
              uint64_t v106 = 0;
              int32x4_t v105 = 0uLL;
              *int v103 = 0u;
              *(_OWORD *)(v74 + 48) = 0u;
              unint64_t v107 = &v103->i8[v30];
              *(_OWORD *)unint64_t v107 = 0u;
              *((_OWORD *)v107 + 1) = 0u;
              unsigned int v108 = &v103->i8[v79];
              *(_OWORD *)unsigned int v108 = 0u;
              *((_OWORD *)v108 + 1) = 0u;
              int v109 = &v103->i8[v359];
              *(_OWORD *)int v109 = 0u;
              *((_OWORD *)v109 + 1) = 0u;
            }
            uint64_t v122 = v102 + v106;
            int v123 = (int16x8_t *)(v74 + v339);
            unsigned int v124 = v73[2];
            if (v73[2])
            {
              if (v124 < 0xF0)
              {
                if (v124 == 127)
                {
                  int32x4_t v125 = *(int32x4_t *)v122;
                  int32x4_t v28 = *(int32x4_t *)(v122 + 16);
                  int16x8_t v133 = *(int16x8_t *)(v122 + 32);
                  int32x4_t v134 = *(int32x4_t *)(v122 + 48);
                  long long v135 = *(_OWORD *)(v122 + 80);
                  long long v136 = *(_OWORD *)(v122 + 96);
                  long long v137 = *(_OWORD *)(v122 + 112);
                  long long v138 = *(_OWORD *)(v122 + 64);
                  *int v123 = *(int16x8_t *)v122;
                  v123[1] = v133;
                  unsigned int v139 = &v123->i8[v79];
                  unsigned int v140 = (int32x4_t *)&v123->i8[v30];
                  *unsigned int v140 = v28;
                  v140[1] = v134;
                  *(_OWORD *)unsigned int v139 = v138;
                  *((_OWORD *)v139 + 1) = v136;
                  char v141 = &v123->i8[v79 + v30];
                  *(_OWORD *)char v141 = v135;
                  *((_OWORD *)v141 + 1) = v137;
                  uint64_t v126 = 128;
                }
                else if (v124 == 3)
                {
                  int32x4_t v125 = (int32x4_t)vld1q_dup_f32((const float *)v122);
                  *int v123 = (int16x8_t)v125;
                  v123[1] = (int16x8_t)v125;
                  int v130 = (int32x4_t *)&v123->i8[v30];
                  *int v130 = v125;
                  v130[1] = v125;
                  unsigned int v131 = (int32x4_t *)&v123->i8[v79];
                  *unsigned int v131 = v125;
                  v131[1] = v125;
                  uint64_t v132 = (int32x4_t *)&v123->i8[v359];
                  *uint64_t v132 = v125;
                  v132[1] = v125;
                  uint64_t v126 = 4;
                }
                else
                {
                  uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)(v74 + v339), v30, v122, v124, v105, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)(v74 + v339), v30, v122, v124, v77);
                uint64_t v126 = 64;
              }
            }
            else
            {
              uint64_t v126 = 0;
              int32x4_t v125 = 0uLL;
              *int v123 = 0u;
              v123[1] = 0u;
              int v127 = &v123->i8[v30];
              *(_OWORD *)int v127 = 0u;
              *((_OWORD *)v127 + 1) = 0u;
              unsigned int v128 = &v123->i8[v79];
              *(_OWORD *)unsigned int v128 = 0u;
              *((_OWORD *)v128 + 1) = 0u;
              unsigned int v129 = &v123->i8[v359];
              *(_OWORD *)unsigned int v129 = 0u;
              *((_OWORD *)v129 + 1) = 0u;
            }
            uint64_t v142 = v122 + v126;
            unsigned int v143 = v123 + 2;
            unsigned int v144 = v73[3];
            if (v73[3])
            {
              if (v144 < 0xF0)
              {
                if (v144 == 127)
                {
                  int32x4_t v145 = *(int32x4_t *)v142;
                  int32x4_t v28 = *(int32x4_t *)(v142 + 16);
                  int16x8_t v153 = *(int16x8_t *)(v142 + 32);
                  int32x4_t v154 = *(int32x4_t *)(v142 + 48);
                  long long v155 = *(_OWORD *)(v142 + 80);
                  long long v156 = *(_OWORD *)(v142 + 96);
                  long long v157 = *(_OWORD *)(v142 + 112);
                  long long v158 = *(_OWORD *)(v142 + 64);
                  *unsigned int v143 = *(int16x8_t *)v142;
                  v123[3] = v153;
                  long long v159 = &v143->i8[v79];
                  long long v160 = (int32x4_t *)&v143->i8[v30];
                  *long long v160 = v28;
                  v160[1] = v154;
                  *(_OWORD *)long long v159 = v158;
                  *((_OWORD *)v159 + 1) = v156;
                  uint64_t v161 = &v143->i8[v79 + v30];
                  *(_OWORD *)uint64_t v161 = v155;
                  *((_OWORD *)v161 + 1) = v157;
                  uint64_t v146 = 128;
                }
                else if (v144 == 3)
                {
                  int32x4_t v145 = (int32x4_t)vld1q_dup_f32((const float *)v142);
                  v123[2] = (int16x8_t)v145;
                  v123[3] = (int16x8_t)v145;
                  uint64_t v150 = (int32x4_t *)&v143->i8[v30];
                  *uint64_t v150 = v145;
                  v150[1] = v145;
                  float32x4_t v151 = (int32x4_t *)&v143->i8[v79];
                  *float32x4_t v151 = v145;
                  v151[1] = v145;
                  unsigned int v152 = (int32x4_t *)&v143->i8[v359];
                  *unsigned int v152 = v145;
                  v152[1] = v145;
                  uint64_t v146 = 4;
                }
                else
                {
                  uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v143, v30, v142, v144, v125, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v143->i32, v30, v142, v144, v77);
                uint64_t v146 = 64;
              }
            }
            else
            {
              uint64_t v146 = 0;
              int32x4_t v145 = 0uLL;
              *unsigned int v143 = 0u;
              v123[3] = 0u;
              uint64_t v147 = &v143->i8[v30];
              *(_OWORD *)uint64_t v147 = 0u;
              *((_OWORD *)v147 + 1) = 0u;
              uint64_t v148 = &v143->i8[v79];
              *(_OWORD *)uint64_t v148 = 0u;
              *((_OWORD *)v148 + 1) = 0u;
              uint64_t v149 = &v143->i8[v359];
              *(_OWORD *)uint64_t v149 = 0u;
              *((_OWORD *)v149 + 1) = 0u;
            }
            uint64_t v162 = v142 + v146;
            uint64_t v163 = (int16x8_t *)(v74 + 64);
            unsigned int v164 = v73[4];
            if (v73[4])
            {
              if (v164 < 0xF0)
              {
                if (v164 == 127)
                {
                  int32x4_t v165 = *(int32x4_t *)v162;
                  int32x4_t v28 = *(int32x4_t *)(v162 + 16);
                  long long v173 = *(_OWORD *)(v162 + 32);
                  int32x4_t v174 = *(int32x4_t *)(v162 + 48);
                  long long v175 = *(_OWORD *)(v162 + 80);
                  long long v176 = *(_OWORD *)(v162 + 96);
                  long long v177 = *(_OWORD *)(v162 + 112);
                  long long v178 = *(_OWORD *)(v162 + 64);
                  *uint64_t v163 = *(int16x8_t *)v162;
                  *(_OWORD *)(v74 + 80) = v173;
                  uint64_t v179 = &v163->i8[v79];
                  long long v180 = (int32x4_t *)&v163->i8[v30];
                  int32x4_t *v180 = v28;
                  v180[1] = v174;
                  *(_OWORD *)uint64_t v179 = v178;
                  *((_OWORD *)v179 + 1) = v176;
                  uint64_t v181 = &v163->i8[v79 + v30];
                  *(_OWORD *)uint64_t v181 = v175;
                  *((_OWORD *)v181 + 1) = v177;
                  uint64_t v166 = 128;
                }
                else if (v164 == 3)
                {
                  int32x4_t v165 = (int32x4_t)vld1q_dup_f32((const float *)v162);
                  *(int32x4_t *)(v74 + 64) = v165;
                  *(int32x4_t *)(v74 + 80) = v165;
                  unsigned int v170 = (int32x4_t *)&v163->i8[v30];
                  *unsigned int v170 = v165;
                  v170[1] = v165;
                  uint64_t v171 = (int32x4_t *)&v163->i8[v79];
                  *uint64_t v171 = v165;
                  v171[1] = v165;
                  float32x4_t v172 = (int32x4_t *)&v163->i8[v359];
                  *float32x4_t v172 = v165;
                  v172[1] = v165;
                  uint64_t v166 = 4;
                }
                else
                {
                  uint64_t v166 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v163, v30, v162, v164, v145, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v163->i32, v30, v162, v164, v77);
                uint64_t v166 = 64;
              }
            }
            else
            {
              uint64_t v166 = 0;
              int32x4_t v165 = 0uLL;
              *uint64_t v163 = 0u;
              *(_OWORD *)(v74 + 80) = 0u;
              uint64_t v167 = &v163->i8[v30];
              *(_OWORD *)uint64_t v167 = 0u;
              *((_OWORD *)v167 + 1) = 0u;
              uint64_t v168 = &v163->i8[v79];
              *(_OWORD *)uint64_t v168 = 0u;
              *((_OWORD *)v168 + 1) = 0u;
              uint64_t v169 = &v163->i8[v359];
              *(_OWORD *)uint64_t v169 = 0u;
              *((_OWORD *)v169 + 1) = 0u;
            }
            uint64_t v182 = v162 + v166;
            uint64_t v183 = (int16x8_t *)(v74 + 96);
            unsigned int v184 = v73[5];
            if (v73[5])
            {
              if (v184 < 0xF0)
              {
                if (v184 == 127)
                {
                  int32x4_t v185 = *(int32x4_t *)v182;
                  int32x4_t v28 = *(int32x4_t *)(v182 + 16);
                  long long v193 = *(_OWORD *)(v182 + 32);
                  int32x4_t v194 = *(int32x4_t *)(v182 + 48);
                  long long v195 = *(_OWORD *)(v182 + 80);
                  long long v196 = *(_OWORD *)(v182 + 96);
                  long long v197 = *(_OWORD *)(v182 + 112);
                  long long v198 = *(_OWORD *)(v182 + 64);
                  *uint64_t v183 = *(int16x8_t *)v182;
                  *(_OWORD *)(v74 + 112) = v193;
                  uint64_t v199 = &v183->i8[v79];
                  int v200 = (int32x4_t *)&v183->i8[v30];
                  *int v200 = v28;
                  v200[1] = v194;
                  *(_OWORD *)uint64_t v199 = v198;
                  *((_OWORD *)v199 + 1) = v196;
                  int v201 = &v183->i8[v79 + v30];
                  *(_OWORD *)int v201 = v195;
                  *((_OWORD *)v201 + 1) = v197;
                  uint64_t v186 = 128;
                }
                else if (v184 == 3)
                {
                  int32x4_t v185 = (int32x4_t)vld1q_dup_f32((const float *)v182);
                  *(int32x4_t *)(v74 + 96) = v185;
                  *(int32x4_t *)(v74 + 112) = v185;
                  int32x2_t v190 = (int32x4_t *)&v183->i8[v30];
                  *int32x2_t v190 = v185;
                  v190[1] = v185;
                  unsigned int v191 = (int32x4_t *)&v183->i8[v79];
                  *unsigned int v191 = v185;
                  v191[1] = v185;
                  uint64_t v192 = (int32x4_t *)&v183->i8[v359];
                  *uint64_t v192 = v185;
                  v192[1] = v185;
                  uint64_t v186 = 4;
                }
                else
                {
                  uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v183, v30, v182, v184, v165, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v183->i32, v30, v182, v184, v77);
                uint64_t v186 = 64;
              }
            }
            else
            {
              uint64_t v186 = 0;
              int32x4_t v185 = 0uLL;
              *uint64_t v183 = 0u;
              *(_OWORD *)(v74 + 112) = 0u;
              unsigned int v187 = &v183->i8[v30];
              *(_OWORD *)unsigned int v187 = 0u;
              *((_OWORD *)v187 + 1) = 0u;
              unint64_t v188 = &v183->i8[v79];
              *(_OWORD *)unint64_t v188 = 0u;
              *((_OWORD *)v188 + 1) = 0u;
              unint64_t v189 = &v183->i8[v359];
              *(_OWORD *)unint64_t v189 = 0u;
              *((_OWORD *)v189 + 1) = 0u;
            }
            uint64_t v202 = v182 + v186;
            BOOL v203 = v123 + 4;
            unsigned int v204 = v73[6];
            if (v73[6])
            {
              if (v204 < 0xF0)
              {
                if (v204 == 127)
                {
                  int32x4_t v205 = *(int32x4_t *)v202;
                  int32x4_t v28 = *(int32x4_t *)(v202 + 16);
                  int16x8_t v213 = *(int16x8_t *)(v202 + 32);
                  int32x4_t v214 = *(int32x4_t *)(v202 + 48);
                  long long v215 = *(_OWORD *)(v202 + 80);
                  long long v216 = *(_OWORD *)(v202 + 96);
                  long long v217 = *(_OWORD *)(v202 + 112);
                  long long v218 = *(_OWORD *)(v202 + 64);
                  *BOOL v203 = *(int16x8_t *)v202;
                  v123[5] = v213;
                  unsigned int v219 = &v203->i8[v79];
                  BOOL v220 = (int32x4_t *)&v203->i8[v30];
                  *BOOL v220 = v28;
                  v220[1] = v214;
                  *(_OWORD *)unsigned int v219 = v218;
                  *((_OWORD *)v219 + 1) = v216;
                  int v221 = &v203->i8[v79 + v30];
                  *(_OWORD *)int v221 = v215;
                  *((_OWORD *)v221 + 1) = v217;
                  uint64_t v206 = 128;
                }
                else if (v204 == 3)
                {
                  int32x4_t v205 = (int32x4_t)vld1q_dup_f32((const float *)v202);
                  v123[4] = (int16x8_t)v205;
                  v123[5] = (int16x8_t)v205;
                  uint64_t v210 = (int32x4_t *)&v203->i8[v30];
                  *uint64_t v210 = v205;
                  v210[1] = v205;
                  unsigned int v211 = (int32x4_t *)&v203->i8[v79];
                  *unsigned int v211 = v205;
                  v211[1] = v205;
                  uint64_t v212 = (int32x4_t *)&v203->i8[v359];
                  *uint64_t v212 = v205;
                  v212[1] = v205;
                  uint64_t v206 = 4;
                }
                else
                {
                  uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v203, v30, v182 + v186, v204, v185, v28);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v203->i32, v30, v182 + v186, v204, v77);
                uint64_t v206 = 64;
              }
            }
            else
            {
              uint64_t v206 = 0;
              int32x4_t v205 = 0uLL;
              *BOOL v203 = 0u;
              v123[5] = 0u;
              int v207 = &v203->i8[v30];
              *(_OWORD *)int v207 = 0u;
              *((_OWORD *)v207 + 1) = 0u;
              unsigned int v208 = &v203->i8[v79];
              *(_OWORD *)unsigned int v208 = 0u;
              *((_OWORD *)v208 + 1) = 0u;
              unsigned int v209 = &v203->i8[v359];
              *(_OWORD *)unsigned int v209 = 0u;
              *((_OWORD *)v209 + 1) = 0u;
            }
            long long v222 = v123 + 6;
            unsigned int v223 = v73[7];
            if (v73[7])
            {
              uint64_t v224 = v202 + v206;
              if (v223 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v222->i32, v30, v224, v223, v77);
                goto LABEL_169;
              }
              unsigned int v36 = a7;
              if (v223 == 127)
              {
                int32x4_t v27 = *(int32x4_t *)v224;
                int32x4_t v28 = *(int32x4_t *)(v224 + 16);
                int16x8_t v231 = *(int16x8_t *)(v224 + 32);
                int32x4_t v232 = *(int32x4_t *)(v224 + 48);
                long long v233 = *(_OWORD *)(v224 + 64);
                long long v234 = *(_OWORD *)(v224 + 80);
                long long v235 = *(_OWORD *)(v224 + 96);
                long long v236 = *(_OWORD *)(v224 + 112);
                *long long v222 = *(int16x8_t *)v224;
                v123[7] = v231;
                unsigned int v237 = &v222->i8[v79];
                unsigned int v238 = (int32x4_t *)&v222->i8[v30];
                *unsigned int v238 = v28;
                v238[1] = v232;
                *(_OWORD *)unsigned int v237 = v233;
                *((_OWORD *)v237 + 1) = v235;
                unsigned int v239 = &v222->i8[v79 + v30];
                *(_OWORD *)unsigned int v239 = v234;
                *((_OWORD *)v239 + 1) = v236;
              }
              else if (v223 == 3)
              {
                int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v224);
                v123[6] = (int16x8_t)v27;
                v123[7] = (int16x8_t)v27;
                BOOL v228 = (int32x4_t *)&v222->i8[v30];
                *BOOL v228 = v27;
                v228[1] = v27;
                int v229 = (int32x4_t *)&v222->i8[v79];
                *int v229 = v27;
                v229[1] = v27;
                unsigned int v230 = (int32x4_t *)&v222->i8[v359];
                *unsigned int v230 = v27;
                v230[1] = v27;
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v222, v30, v224, v223, v205, v28);
              }
            }
            else
            {
              int32x4_t v27 = 0uLL;
              *long long v222 = 0u;
              v123[7] = 0u;
              int v225 = &v222->i8[v30];
              *(_OWORD *)int v225 = 0u;
              *((_OWORD *)v225 + 1) = 0u;
              unsigned int v226 = &v222->i8[v79];
              *(_OWORD *)unsigned int v226 = 0u;
              *((_OWORD *)v226 + 1) = 0u;
              unsigned int v227 = &v222->i8[v359];
              *(_OWORD *)unsigned int v227 = 0u;
              *((_OWORD *)v227 + 1) = 0u;
LABEL_169:
              unsigned int v36 = a7;
            }
            uint64_t v29 = v357;
LABEL_27:
            unsigned int v37 = v34 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v29;
          block[5] = v72;
          char v367 = v42;
          char v368 = v358;
          unsigned int v363 = v340;
          unsigned int v364 = v40 - v38;
          block[6] = v73;
          uint64_t v361 = v74;
          uint64_t v30 = a11;
          uint64_t v362 = a11;
          unsigned int v365 = v351;
          unsigned int v366 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v29 + 8) + 7384), block);
            uint64_t v29 = v357;
            unsigned int v36 = a7;
            goto LABEL_27;
          }
          uint64_t v82 = *(void *)(v29 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v73;
          unsigned int v36 = a7;
          if (*v73)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 127)
              {
                int32x4_t v85 = *v72;
                int32x4_t v28 = v72[1];
                int32x4_t v240 = v72[2];
                int32x4_t v241 = v72[3];
                int32x4_t v242 = v72[4];
                int32x4_t v243 = v72[5];
                int32x4_t v244 = v72[6];
                int32x4_t v245 = v72[7];
                int16x8_t v370 = *(int16x8_t *)v72;
                int32x4_t v371 = v240;
                int32x4_t v378 = v28;
                int32x4_t v379 = v241;
                int32x4_t v386 = v242;
                int32x4_t v387 = v244;
                int32x4_t v394 = v243;
                int32x4_t v395 = v245;
                uint64_t v86 = 128;
              }
              else if (v84 == 3)
              {
                int32x4_t v85 = (int32x4_t)vld1q_dup_f32((const float *)v72->i32);
                int16x8_t v370 = (int16x8_t)v85;
                int32x4_t v371 = v85;
                int32x4_t v378 = v85;
                int32x4_t v379 = v85;
                int32x4_t v386 = v85;
                int32x4_t v387 = v85;
                int32x4_t v394 = v85;
                int32x4_t v395 = v85;
                uint64_t v86 = 4;
              }
              else
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v370, 128, (uint64_t)v72, v84, v27, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v370.i32, 128, (uint64_t)v72, v84, *(_DWORD *)(v82 + 52));
              uint64_t v86 = 64;
            }
          }
          else
          {
            uint64_t v86 = 0;
            int32x4_t v85 = 0uLL;
            int32x4_t v371 = 0u;
            int16x8_t v370 = 0u;
            int32x4_t v378 = 0u;
            int32x4_t v379 = 0u;
            int32x4_t v386 = 0u;
            int32x4_t v387 = 0u;
            int32x4_t v394 = 0u;
            int32x4_t v395 = 0u;
          }
          uint64_t v246 = (uint64_t)v72->i64 + v86;
          unsigned int v247 = v73[1];
          if (v73[1])
          {
            if (v247 < 0xF0)
            {
              if (v247 == 127)
              {
                int32x4_t v248 = *(int32x4_t *)v246;
                int32x4_t v28 = *(int32x4_t *)(v246 + 16);
                int32x4_t v250 = *(int32x4_t *)(v246 + 32);
                int32x4_t v251 = *(int32x4_t *)(v246 + 48);
                int32x4_t v252 = *(int32x4_t *)(v246 + 64);
                int32x4_t v253 = *(int32x4_t *)(v246 + 80);
                int32x4_t v254 = *(int32x4_t *)(v246 + 96);
                int32x4_t v255 = *(int32x4_t *)(v246 + 112);
                int16x8_t v372 = *(int16x8_t *)v246;
                int32x4_t v373 = v250;
                int32x4_t v380 = v28;
                int32x4_t v381 = v251;
                int32x4_t v388 = v252;
                int32x4_t v389 = v254;
                int32x4_t v396 = v253;
                int32x4_t v397 = v255;
                uint64_t v249 = 128;
              }
              else if (v247 == 3)
              {
                int32x4_t v248 = (int32x4_t)vld1q_dup_f32((const float *)v246);
                int16x8_t v372 = (int16x8_t)v248;
                int32x4_t v373 = v248;
                int32x4_t v380 = v248;
                int32x4_t v381 = v248;
                int32x4_t v388 = v248;
                int32x4_t v389 = v248;
                int32x4_t v396 = v248;
                int32x4_t v397 = v248;
                uint64_t v249 = 4;
              }
              else
              {
                uint64_t v249 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v372, 128, v246, v247, v85, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v372.i32, 128, v246, v247, v83);
              uint64_t v249 = 64;
            }
          }
          else
          {
            uint64_t v249 = 0;
            int32x4_t v248 = 0uLL;
            int16x8_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v388 = 0u;
            int32x4_t v389 = 0u;
            int32x4_t v396 = 0u;
            int32x4_t v397 = 0u;
          }
          uint64_t v256 = v246 + v249;
          unsigned int v257 = v73[2];
          if (v73[2])
          {
            if (v257 < 0xF0)
            {
              if (v257 == 127)
              {
                int32x4_t v258 = *(int32x4_t *)v256;
                int32x4_t v28 = *(int32x4_t *)(v256 + 16);
                int32x4_t v260 = *(int32x4_t *)(v256 + 32);
                int32x4_t v261 = *(int32x4_t *)(v256 + 48);
                int32x4_t v262 = *(int32x4_t *)(v256 + 64);
                int32x4_t v263 = *(int32x4_t *)(v256 + 80);
                int32x4_t v264 = *(int32x4_t *)(v256 + 96);
                int32x4_t v265 = *(int32x4_t *)(v256 + 112);
                int16x8_t v402 = *(int16x8_t *)v256;
                int32x4_t v403 = v260;
                int32x4_t v410 = v28;
                int32x4_t v411 = v261;
                int32x4_t v418 = v262;
                int32x4_t v419 = v264;
                int32x4_t v426 = v263;
                int32x4_t v427 = v265;
                uint64_t v259 = 128;
              }
              else if (v257 == 3)
              {
                int32x4_t v258 = (int32x4_t)vld1q_dup_f32((const float *)v256);
                int16x8_t v402 = (int16x8_t)v258;
                int32x4_t v403 = v258;
                int32x4_t v410 = v258;
                int32x4_t v411 = v258;
                int32x4_t v418 = v258;
                int32x4_t v419 = v258;
                int32x4_t v426 = v258;
                int32x4_t v427 = v258;
                uint64_t v259 = 4;
              }
              else
              {
                uint64_t v259 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v402, 128, v256, v257, v248, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v402.i32, 128, v256, v257, v83);
              uint64_t v259 = 64;
            }
          }
          else
          {
            uint64_t v259 = 0;
            int32x4_t v258 = 0uLL;
            int16x8_t v402 = 0u;
            int32x4_t v403 = 0u;
            int32x4_t v410 = 0u;
            int32x4_t v411 = 0u;
            int32x4_t v418 = 0u;
            int32x4_t v419 = 0u;
            int32x4_t v426 = 0u;
            int32x4_t v427 = 0u;
          }
          uint64_t v266 = v256 + v259;
          unsigned int v267 = v73[3];
          if (v73[3])
          {
            if (v267 < 0xF0)
            {
              if (v267 == 127)
              {
                int32x4_t v268 = *(int32x4_t *)v266;
                int32x4_t v28 = *(int32x4_t *)(v266 + 16);
                int32x4_t v270 = *(int32x4_t *)(v266 + 32);
                int32x4_t v271 = *(int32x4_t *)(v266 + 48);
                int32x4_t v272 = *(int32x4_t *)(v266 + 64);
                int32x4_t v273 = *(int32x4_t *)(v266 + 80);
                int32x4_t v274 = *(int32x4_t *)(v266 + 96);
                int32x4_t v275 = *(int32x4_t *)(v266 + 112);
                int16x8_t v404 = *(int16x8_t *)v266;
                int32x4_t v405 = v270;
                int32x4_t v412 = v28;
                int32x4_t v413 = v271;
                int32x4_t v420 = v272;
                int32x4_t v421 = v274;
                int32x4_t v428 = v273;
                int32x4_t v429 = v275;
                uint64_t v269 = 128;
              }
              else if (v267 == 3)
              {
                int32x4_t v268 = (int32x4_t)vld1q_dup_f32((const float *)v266);
                int16x8_t v404 = (int16x8_t)v268;
                int32x4_t v405 = v268;
                int32x4_t v412 = v268;
                int32x4_t v413 = v268;
                int32x4_t v420 = v268;
                int32x4_t v421 = v268;
                int32x4_t v428 = v268;
                int32x4_t v429 = v268;
                uint64_t v269 = 4;
              }
              else
              {
                uint64_t v269 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v404, 128, v266, v267, v258, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v404.i32, 128, v266, v267, v83);
              uint64_t v269 = 64;
            }
          }
          else
          {
            uint64_t v269 = 0;
            int32x4_t v268 = 0uLL;
            int16x8_t v404 = 0u;
            int32x4_t v405 = 0u;
            int32x4_t v412 = 0u;
            int32x4_t v413 = 0u;
            int32x4_t v420 = 0u;
            int32x4_t v421 = 0u;
            int32x4_t v428 = 0u;
            int32x4_t v429 = 0u;
          }
          uint64_t v276 = v266 + v269;
          unsigned int v277 = v73[4];
          if (v73[4])
          {
            if (v277 < 0xF0)
            {
              if (v277 == 127)
              {
                int32x4_t v278 = *(int32x4_t *)v276;
                int32x4_t v28 = *(int32x4_t *)(v276 + 16);
                int32x4_t v280 = *(int32x4_t *)(v276 + 32);
                int32x4_t v281 = *(int32x4_t *)(v276 + 48);
                int32x4_t v282 = *(int32x4_t *)(v276 + 64);
                int32x4_t v283 = *(int32x4_t *)(v276 + 80);
                int32x4_t v284 = *(int32x4_t *)(v276 + 96);
                int32x4_t v285 = *(int32x4_t *)(v276 + 112);
                int16x8_t v374 = *(int16x8_t *)v276;
                int32x4_t v375 = v280;
                int32x4_t v382 = v28;
                int32x4_t v383 = v281;
                int32x4_t v390 = v282;
                int32x4_t v391 = v284;
                int32x4_t v398 = v283;
                int32x4_t v399 = v285;
                uint64_t v279 = 128;
              }
              else if (v277 == 3)
              {
                int32x4_t v278 = (int32x4_t)vld1q_dup_f32((const float *)v276);
                int16x8_t v374 = (int16x8_t)v278;
                int32x4_t v375 = v278;
                int32x4_t v382 = v278;
                int32x4_t v383 = v278;
                int32x4_t v390 = v278;
                int32x4_t v391 = v278;
                int32x4_t v398 = v278;
                int32x4_t v399 = v278;
                uint64_t v279 = 4;
              }
              else
              {
                uint64_t v279 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v374, 128, v276, v277, v268, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v374.i32, 128, v276, v277, v83);
              uint64_t v279 = 64;
            }
          }
          else
          {
            uint64_t v279 = 0;
            int32x4_t v278 = 0uLL;
            int16x8_t v374 = 0u;
            int32x4_t v375 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
            int32x4_t v390 = 0u;
            int32x4_t v391 = 0u;
            int32x4_t v398 = 0u;
            int32x4_t v399 = 0u;
          }
          uint64_t v286 = v276 + v279;
          unsigned int v287 = v73[5];
          if (v73[5])
          {
            if (v287 < 0xF0)
            {
              if (v287 == 127)
              {
                int32x4_t v288 = *(int32x4_t *)v286;
                int32x4_t v28 = *(int32x4_t *)(v286 + 16);
                int32x4_t v290 = *(int32x4_t *)(v286 + 32);
                int32x4_t v291 = *(int32x4_t *)(v286 + 48);
                int32x4_t v292 = *(int32x4_t *)(v286 + 64);
                int32x4_t v293 = *(int32x4_t *)(v286 + 80);
                int32x4_t v294 = *(int32x4_t *)(v286 + 96);
                int32x4_t v295 = *(int32x4_t *)(v286 + 112);
                int16x8_t v376 = *(int16x8_t *)v286;
                int32x4_t v377 = v290;
                int32x4_t v384 = v28;
                int32x4_t v385 = v291;
                int32x4_t v392 = v292;
                int32x4_t v393 = v294;
                int32x4_t v400 = v293;
                int32x4_t v401 = v295;
                uint64_t v289 = 128;
              }
              else if (v287 == 3)
              {
                int32x4_t v288 = (int32x4_t)vld1q_dup_f32((const float *)v286);
                int16x8_t v376 = (int16x8_t)v288;
                int32x4_t v377 = v288;
                int32x4_t v384 = v288;
                int32x4_t v385 = v288;
                int32x4_t v392 = v288;
                int32x4_t v393 = v288;
                int32x4_t v400 = v288;
                int32x4_t v401 = v288;
                uint64_t v289 = 4;
              }
              else
              {
                uint64_t v289 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v376, 128, v286, v287, v278, v28);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v376.i32, 128, v286, v287, v83);
              uint64_t v289 = 64;
            }
          }
          else
          {
            uint64_t v289 = 0;
            int32x4_t v288 = 0uLL;
            int16x8_t v376 = 0u;
            int32x4_t v377 = 0u;
            int32x4_t v384 = 0u;
            int32x4_t v385 = 0u;
            int32x4_t v392 = 0u;
            int32x4_t v393 = 0u;
            int32x4_t v400 = 0u;
            int32x4_t v401 = 0u;
          }
          uint64_t v296 = v286 + v289;
          unsigned int v297 = v73[6];
          if (v73[6])
          {
            if (v297 < 0xF0)
            {
              if (v297 == 127)
              {
                int32x4_t v298 = *(int32x4_t *)v296;
                int32x4_t v28 = *(int32x4_t *)(v296 + 16);
                int32x4_t v302 = *(int32x4_t *)(v296 + 32);
                int32x4_t v303 = *(int32x4_t *)(v296 + 48);
                int32x4_t v304 = *(int32x4_t *)(v296 + 64);
                int32x4_t v305 = *(int32x4_t *)(v296 + 80);
                int32x4_t v306 = *(int32x4_t *)(v296 + 96);
                int32x4_t v307 = *(int32x4_t *)(v296 + 112);
                int16x8_t v406 = *(int16x8_t *)v296;
                int32x4_t v407 = v302;
                int32x4_t v414 = v28;
                int32x4_t v415 = v303;
                int32x4_t v422 = v304;
                int32x4_t v423 = v306;
                int32x4_t v430 = v305;
                int32x4_t v431 = v307;
                uint64_t v299 = 128;
                unsigned int v300 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else if (v297 == 3)
              {
                int32x4_t v298 = (int32x4_t)vld1q_dup_f32((const float *)v296);
                int16x8_t v406 = (int16x8_t)v298;
                int32x4_t v407 = v298;
                int32x4_t v414 = v298;
                int32x4_t v415 = v298;
                int32x4_t v422 = v298;
                int32x4_t v423 = v298;
                int32x4_t v430 = v298;
                int32x4_t v431 = v298;
                uint64_t v299 = 4;
                unsigned int v300 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v299 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v406, 128, v296, v297, v288, v28);
                unsigned int v300 = v73[7];
                if (!v73[7])
                {
LABEL_226:
                  int32x4_t v27 = 0uLL;
                  int16x8_t v408 = 0u;
                  int32x4_t v409 = 0u;
                  int32x4_t v416 = 0u;
                  int32x4_t v417 = 0u;
                  int32x4_t v424 = 0u;
                  int32x4_t v425 = 0u;
                  int32x4_t v432 = 0u;
                  int32x4_t v433 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v406.i32, 128, v296, v297, v83);
              uint64_t v299 = 64;
              unsigned int v300 = v73[7];
              if (!v73[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v299 = 0;
            int32x4_t v298 = 0uLL;
            int16x8_t v406 = 0u;
            int32x4_t v407 = 0u;
            int32x4_t v414 = 0u;
            int32x4_t v415 = 0u;
            int32x4_t v422 = 0u;
            int32x4_t v423 = 0u;
            int32x4_t v430 = 0u;
            int32x4_t v431 = 0u;
            unsigned int v300 = v73[7];
            if (!v73[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v301 = v296 + v299;
          if (v300 < 0xF0)
          {
            if (v300 == 127)
            {
              int32x4_t v27 = *(int32x4_t *)v301;
              int32x4_t v28 = *(int32x4_t *)(v301 + 16);
              int32x4_t v308 = *(int32x4_t *)(v301 + 32);
              int32x4_t v309 = *(int32x4_t *)(v301 + 48);
              int32x4_t v310 = *(int32x4_t *)(v301 + 80);
              int32x4_t v311 = *(int32x4_t *)(v301 + 96);
              int32x4_t v312 = *(int32x4_t *)(v301 + 112);
              int32x4_t v313 = *(int32x4_t *)(v301 + 64);
              int16x8_t v408 = *(int16x8_t *)v301;
              int32x4_t v409 = v308;
              int32x4_t v416 = v28;
              int32x4_t v417 = v309;
              int32x4_t v424 = v313;
              int32x4_t v425 = v311;
              int32x4_t v432 = v310;
              int32x4_t v433 = v312;
            }
            else if (v300 == 3)
            {
              int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v301);
              int16x8_t v408 = (int16x8_t)v27;
              int32x4_t v409 = v27;
              int32x4_t v416 = v27;
              int32x4_t v417 = v27;
              int32x4_t v424 = v27;
              int32x4_t v425 = v27;
              int32x4_t v432 = v27;
              int32x4_t v433 = v27;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v408, 128, v301, v300, v298, v28);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v408.i32, 128, v301, v300, v83);
          }
LABEL_243:
          unsigned int v37 = v34 + 1;
          unint64_t v314 = v365;
          uint64_t v29 = v357;
          if (v365)
          {
            unint64_t v315 = 0;
            float32x4_t v316 = &v370.i8[128 * (unint64_t)v363 + 8 * v364];
            unsigned int v317 = v366;
            do
            {
              if (v317)
              {
                uint64_t v318 = 0;
                uint64_t v319 = v361 + v362 * v315;
                do
                {
                  *(unsigned char *)(v319 + v318) = v316[v318];
                  ++v318;
                  unsigned int v317 = v366;
                }
                while (8 * (unint64_t)v366 > v318);
                unint64_t v314 = v365;
              }
              ++v315;
              v316 += 128;
            }
            while (v315 < v314);
          }
LABEL_28:
          BOOL v22 = v34 == v345 >> 4;
          unsigned int v34 = v37;
        }
        while (!v22);
        BOOL v22 = v17++ == v337;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v146 = v21;
  uint64_t v147 = v22;
  uint64_t v135 = v23;
  uint64_t v24 = v12;
  uint64_t v174 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v151 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v134 = v14 + a10 - 1;
  unsigned int v136 = v134 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v154 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v145 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v144 = isLevelTiled;
  if (v25 <= v136)
  {
    unsigned int v143 = v16 + a9 - 1;
    unsigned int v133 = v16 >> 4;
    if (v16 >> 4 <= v143 >> 4)
    {
      unsigned int v130 = v20 - 1;
      unsigned int v132 = (v18 - 1) >> 3;
      int v152 = ((v20 - 1) & 0xF) + 1;
      unsigned int v153 = (v20 - 1) >> 4;
      int v131 = ((v18 - 1) & 7) + 1;
      uint64_t v137 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v142 = v36.i32[0] | v36.i32[1];
      int8x8_t v141 = v36;
      BOOL v139 = v36.i32[1] != 0;
      BOOL v140 = v36.i32[0] != 0;
      unint64_t v129 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (8 * v25) | 7;
        if (8 * v25 <= v151) {
          int v38 = v151;
        }
        else {
          int v38 = 8 * v25;
        }
        unsigned int v39 = v133;
        if (v134 < v37) {
          unsigned int v37 = v134;
        }
        int v138 = v38 - 8 * v25;
        int v149 = v37 - v38 + 1;
        unsigned int v150 = 8 * v25;
        int v40 = v131;
        if (v25 != v132) {
          int v40 = 8;
        }
        unsigned int v155 = v40;
        uint64_t v148 = v135 + (v38 - v151) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v143 < v42) {
            unsigned int v42 = v143;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v153) {
            unsigned int v45 = v152;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v150 >= v151 && v41 >= v16)
          {
            int v47 = v152;
            if (v39 != v153) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v149 != v155;
          }
          if (v144)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v129 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v118 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v119 = 0;
            }
            else {
              unsigned int v119 = 32 - __clz(~(-1 << -(char)__clz(v118)));
            }
            unsigned int v120 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v121 = 0;
              if (v119) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v121 = 32 - __clz(~(-1 << -(char)__clz(v120)));
              if (v121 | v119)
              {
LABEL_121:
                int v122 = 0;
                uint64_t v123 = 0;
                int v124 = v39 & v118;
                int v125 = v25 & v120;
                BOOL v126 = v121 != 0;
                BOOL v127 = v119 != 0;
                int v128 = 1;
                do
                {
                  --v121;
                  if (v126) {
                    v123 |= (unint64_t)(v128 & v125) << v122++;
                  }
                  else {
                    unsigned int v121 = 0;
                  }
                  --v119;
                  if (v127) {
                    v123 |= (unint64_t)(v128 & v124) << v122++;
                  }
                  else {
                    unsigned int v119 = 0;
                  }
                  v128 *= 2;
                  --v122;
                  BOOL v127 = v119 != 0;
                  BOOL v126 = v121 != 0;
                }
                while (v119 | v121);
                goto LABEL_133;
              }
            }
            uint64_t v123 = 0;
LABEL_133:
            unint64_t v56 = ((unint64_t)(v41 / v70 + v150 / v74 * ((v70 + v130) / v70)) << 14) + (v123 << 10);
            goto LABEL_60;
          }
          if (v142)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v139;
            BOOL v53 = v140;
            __int32 v54 = v141.i32[0];
            __int32 v55 = v141.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 10;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          char v75 = (unsigned char *)(v146 + v56);
          if (v145)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v146 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v154;
            char v75 = __dst;
          }
          unsigned int v78 = (unsigned __int8 *)(v147 + 8 * v64);
          uint64_t v79 = v16;
          int32x4_t v80 = (float64x2_t *)(v148 + 16 * (v43 - v16));
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v155 > 7)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            uint64_t v83 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80, a11, (uint64_t)v75, *v78, v82, v36)];
            uint64_t v85 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 4, a11, v83, v78[1], v82, v84);
            uint64_t v87 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v137), a11, v85, v78[2], v82, v86);
            uint64_t v89 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v137 + 64), a11, v87, v78[3], v82, v88);
            uint64_t v91 = v89
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 8, a11, v89, v78[4], v82, v90);
            uint64_t v93 = v91
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 12, a11, v91, v78[5], v82, v92);
            uint64_t v95 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v137 + 128), a11, v93, v78[6], v82, v94);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((float64x2_t *)((char *)v80 + v137 + 192), a11, v93 + v95, v78[7], v82, v96);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v163 = v45;
          char v164 = v155;
          unsigned int v159 = v138;
          unsigned int v160 = v43 - v41;
          block[6] = v78;
          long long v157 = v80;
          uint64_t v158 = a11;
          unsigned int v161 = v149;
          unsigned int v162 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v97 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          uint64_t v98 = (uint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v166, 256, (uint64_t)v75, *v78, v97, v36)];
          uint64_t v100 = v98
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v167, 256, v98, v78[1], v97, v99);
          uint64_t v102 = v100
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v170, 256, v100, v78[2], v97, v101);
          uint64_t v104 = v102
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v171, 256, v102, v78[3], v97, v103);
          uint64_t v106 = v104
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v168, 256, v104, v78[4], v97, v105);
          uint64_t v108 = v106
               + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v169, 256, v106, v78[5], v97, v107);
          uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v172, 256, v108, v78[6], v97, v109);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v173, 256, v108 + v110, v78[7], v97, v111);
          unint64_t v112 = v161;
          uint64_t v16 = v79;
          if (v161)
          {
            unint64_t v113 = 0;
            int32x4_t v114 = &v166[16 * (unint64_t)v159 + v160];
            unsigned int v115 = v162;
            do
            {
              if (v115)
              {
                uint64_t v116 = 0;
                long long v117 = (char *)v157 + v158 * v113;
                do
                {
                  v117[v116] = *((unsigned char *)v114->f64 + v116);
                  ++v116;
                  unsigned int v115 = v162;
                }
                while (16 * (unint64_t)v162 > v116);
                unint64_t v112 = v161;
              }
              ++v113;
              v114 += 16;
            }
            while (v113 < v112);
          }
LABEL_28:
          BOOL v29 = v39++ == v143 >> 4;
          uint64_t v34 = v154;
        }
        while (!v29);
        BOOL v29 = v25++ == v136;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v291 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v242 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v224 = a8 + a10 - 1;
  unsigned int v226 = v224 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v246 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v236 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v235 = isLevelTiled;
  if (v16 <= v226)
  {
    unsigned int v234 = a7 + a9 - 1;
    if (a7 >> 4 <= v234 >> 4)
    {
      uint64_t v26 = a11;
      unsigned int v221 = a5 - 1;
      unsigned int v245 = (a5 - 1) >> 4;
      int v244 = ((a5 - 1) & 0xF) + 1;
      int v222 = ((a6 - 1) & 7) + 1;
      unsigned int v223 = (a6 - 1) >> 3;
      uint64_t v228 = 4 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      *(int32x2_t *)v28.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v27, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v29.i64[0] = 0x2000000010;
      *(int8x8_t *)v30.i8 = vbic_s8(*(int8x8_t *)v28.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v27));
      __int32 v233 = v30.i32[0] | v30.i32[1];
      uint64_t v232 = v30.i64[0];
      BOOL v231 = v30.i32[0] != 0;
      BOOL v230 = v30.i32[1] != 0;
      unint64_t v220 = 8 * v18 * (unint64_t)v17;
      uint64_t v248 = 3 * a11;
      uint64_t v227 = 2 * a11;
      do
      {
        unsigned int v31 = (8 * v16) | 7;
        if (8 * v16 <= v242) {
          int v32 = v242;
        }
        else {
          int v32 = 8 * v16;
        }
        unsigned int v33 = a7 >> 4;
        if (v224 < v31) {
          unsigned int v31 = v224;
        }
        unsigned int v241 = 8 * v16;
        int v229 = v32 - 8 * v16;
        int v240 = v31 - v32 + 1;
        int v34 = v222;
        if (v16 != v223) {
          int v34 = 8;
        }
        unsigned int v247 = v34;
        uint64_t v239 = a2 + (v32 - v242) * v26;
        unsigned int v35 = a7;
        do
        {
          unsigned int v37 = 16 * v33;
          unsigned int v38 = 16 * (v33 + 1) - 1;
          if (16 * v33 <= v35) {
            int v39 = v35;
          }
          else {
            int v39 = 16 * v33;
          }
          if (v234 < v38) {
            unsigned int v38 = a7 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v33 == v245) {
            unsigned int v41 = v244;
          }
          else {
            unsigned int v41 = 16;
          }
          BOOL v42 = 1;
          if (v241 >= v242 && v37 >= v35)
          {
            int v43 = v244;
            if (v33 != v245) {
              int v43 = 16;
            }
            BOOL v42 = v40 != v43 || v240 != v247;
          }
          if (v235)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v220 >> (*(unsigned char *)(v25 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v209 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v210 = 0;
            }
            else {
              unsigned int v210 = 32 - __clz(~(-1 << -(char)__clz(v209)));
            }
            unsigned int v211 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v212 = 0;
              if (v210) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v212 = 32 - __clz(~(-1 << -(char)__clz(v211)));
              if (v212 | v210)
              {
LABEL_268:
                int v213 = 0;
                uint64_t v214 = 0;
                int v215 = v33 & v209;
                int v216 = v16 & v211;
                BOOL v217 = v212 != 0;
                BOOL v218 = v210 != 0;
                int v219 = 1;
                do
                {
                  --v212;
                  if (v217) {
                    v214 |= (unint64_t)(v219 & v216) << v213++;
                  }
                  else {
                    unsigned int v212 = 0;
                  }
                  --v210;
                  if (v218) {
                    v214 |= (unint64_t)(v219 & v215) << v213++;
                  }
                  else {
                    unsigned int v210 = 0;
                  }
                  v219 *= 2;
                  --v213;
                  BOOL v218 = v210 != 0;
                  BOOL v217 = v212 != 0;
                }
                while (v210 | v212);
                goto LABEL_280;
              }
            }
            uint64_t v214 = 0;
LABEL_280:
            unint64_t v52 = ((unint64_t)(v37 / v66 + v241 / v70 * ((v66 + v221) / v66)) << 14) + (v214 << 8);
            goto LABEL_60;
          }
          if (v233)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v231;
            BOOL v49 = v230;
            int v50 = v232;
            int v51 = HIDWORD(v232);
            do
            {
              --v50;
              if (v48) {
                v46 |= (unint64_t)(v47 & v16) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v49) {
                v46 |= (unint64_t)(v47 & v33) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v49 = v51 != 0;
              BOOL v48 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_60:
          unsigned int v53 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 15;
          if (v54 < 0x20) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 4) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_86:
              unint64_t v60 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_86;
            }
          }
          int v59 = 0;
          unint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            BOOL v64 = !v61;
            if (v61)
            {
              unint64_t v65 = ((unint64_t)(v63 & v33) << v59) | v60;
            }
            else
            {
              unsigned int v55 = 0;
              unint64_t v65 = v60;
            }
            if (!v64) {
              ++v59;
            }
            --v58;
            if (v62)
            {
              unint64_t v60 = ((unint64_t)(v63 & v16) << v59) | v65;
            }
            else
            {
              unsigned int v58 = 0;
              unint64_t v60 = v65;
            }
            if (v62) {
              ++v59;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_87:
          uint64_t v71 = (int64x2_t *)(a3 + v52);
          if (v236)
          {
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v25 = v246;
            uint64_t v71 = (int64x2_t *)__dst;
          }
          char v72 = (unsigned __int8 *)(a4 + 8 * v60);
          char v73 = (int64x2_t *)(v239 + 4 * (v39 - v35));
          char v74 = v41 < 0x10 || v42;
          if ((v74 & 1) == 0 && v247 > 7)
          {
            uint64_t v75 = *(void *)(v25 + 208);
            int v76 = *(_DWORD *)(v75 + 52);
            unsigned int v77 = *v72;
            if (*v72)
            {
              uint64_t v26 = a11;
              uint64_t v78 = 2 * a11;
              if (v77 < 0xF0)
              {
                if (v77 == 63)
                {
                  i64 = (const double *)v71[2].i64;
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(i64);
                  int64x2_t v88 = *v71;
                  int64x2_t v89 = v71[1];
                  *char v73 = vzip1q_s64(*v71, v89);
                  int64x2_t v29 = vzip2q_s64(v88, v89);
                  *(int64x2_t *)((char *)v73 + a11) = v29;
                  int8x8_t v90 = (int64x2_t *)((char *)v73 + v227);
                  *int8x8_t v90 = v30;
                  *(int64x2_t *)((char *)v90 + a11) = v28;
                  uint64_t v79 = 64;
                }
                else if (v77 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16(v71->i16);
                  *char v73 = v30;
                  *(int64x2_t *)((char *)v73 + a11) = v30;
                  *(int64x2_t *)((char *)v73 + 2 * a11) = v30;
                  *(int64x2_t *)((char *)v73 + 3 * a11) = v30;
                  uint64_t v79 = 2;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v73, a11, (uint64_t)v71, v77, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v73->i16, a11, (uint64_t)v71, v77, *(_DWORD *)(v75 + 52));
                uint64_t v79 = 32;
              }
            }
            else
            {
              uint64_t v79 = 0;
              v73->i64[0] = 0;
              v73->i64[1] = 0;
              uint64_t v26 = a11;
              int8x8_t v84 = (uint64_t *)((char *)v73->i64 + a11);
              *int8x8_t v84 = 0;
              v84[1] = 0;
              uint64_t v78 = 2 * a11;
              uint64_t v85 = (uint64_t *)((char *)v73->i64 + v227);
              void *v85 = 0;
              v85[1] = 0;
              int8x8_t v86 = (uint64_t *)((char *)v73->i64 + v248);
              *int8x8_t v86 = 0;
              v86[1] = 0;
            }
            uint64_t v91 = (uint64_t)v71->i64 + v79;
            int8x8_t v92 = v73 + 1;
            unsigned int v93 = v72[1];
            if (v72[1])
            {
              if (v93 < 0xF0)
              {
                if (v93 == 63)
                {
                  uint64_t v98 = (const double *)(v91 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v98);
                  int64x2_t v99 = *(int64x2_t *)v91;
                  int64x2_t v100 = *(int64x2_t *)(v91 + 16);
                  *int8x8_t v92 = vzip1q_s64(*(int64x2_t *)v91, v100);
                  int64x2_t v29 = vzip2q_s64(v99, v100);
                  *(int64x2_t *)((char *)v92 + v26) = v29;
                  int8x8_t v101 = (int64x2_t *)((char *)v92 + v78);
                  *int8x8_t v101 = v30;
                  *(int64x2_t *)((char *)v101 + v26) = v28;
                  uint64_t v94 = 64;
                }
                else if (v93 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v91);
                  *int8x8_t v92 = v30;
                  *(int64x2_t *)((char *)v92 + v26) = v30;
                  *(int64x2_t *)((char *)v92 + v78) = v30;
                  *(int64x2_t *)((char *)v92 + 3 * a11) = v30;
                  uint64_t v94 = 2;
                }
                else
                {
                  uint64_t v94 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v92, v26, v91, v93, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v92->i16, v26, v91, v93, v76);
                uint64_t v94 = 32;
              }
            }
            else
            {
              uint64_t v94 = 0;
              v92->i64[0] = 0;
              v73[1].i64[1] = 0;
              uint64_t v95 = (uint64_t *)((char *)v92->i64 + v26);
              *uint64_t v95 = 0;
              v95[1] = 0;
              int8x8_t v96 = (uint64_t *)((char *)v92->i64 + v78);
              *int8x8_t v96 = 0;
              v96[1] = 0;
              int v97 = (uint64_t *)((char *)v92->i64 + v248);
              *int v97 = 0;
              v97[1] = 0;
            }
            uint64_t v102 = v91 + v94;
            int8x8_t v103 = (int64x2_t *)((char *)v73 + v228);
            unsigned int v104 = v72[2];
            if (v72[2])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 63)
                {
                  int8x8_t v109 = (const double *)(v102 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v109);
                  int64x2_t v110 = *(int64x2_t *)v102;
                  int64x2_t v111 = *(int64x2_t *)(v102 + 16);
                  *int8x8_t v103 = vzip1q_s64(*(int64x2_t *)v102, v111);
                  int64x2_t v29 = vzip2q_s64(v110, v111);
                  *(int64x2_t *)((char *)v103 + v26) = v29;
                  unint64_t v112 = (int64x2_t *)((char *)v103 + v78);
                  *unint64_t v112 = v30;
                  *(int64x2_t *)((char *)v112 + v26) = v28;
                  uint64_t v105 = 64;
                }
                else if (v104 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v102);
                  *int8x8_t v103 = v30;
                  *(int64x2_t *)((char *)v103 + v26) = v30;
                  *(int64x2_t *)((char *)v103 + v78) = v30;
                  *(int64x2_t *)((char *)v103 + 3 * a11) = v30;
                  uint64_t v105 = 2;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v73 + v228), v26, v102, v104, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v73->i16[(unint64_t)v228 / 2], v26, v102, v104, v76);
                uint64_t v105 = 32;
              }
            }
            else
            {
              uint64_t v105 = 0;
              v103->i64[0] = 0;
              v103->i64[1] = 0;
              uint64_t v106 = (uint64_t *)((char *)v103->i64 + v26);
              void *v106 = 0;
              v106[1] = 0;
              int8x8_t v107 = (uint64_t *)((char *)v103->i64 + v78);
              *int8x8_t v107 = 0;
              v107[1] = 0;
              uint64_t v108 = (uint64_t *)((char *)v103->i64 + v248);
              *uint64_t v108 = 0;
              v108[1] = 0;
            }
            uint64_t v113 = v102 + v105;
            int32x4_t v114 = v103 + 1;
            unsigned int v115 = v72[3];
            if (v72[3])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 63)
                {
                  unsigned int v120 = (const double *)(v113 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v120);
                  int64x2_t v121 = *(int64x2_t *)v113;
                  int64x2_t v122 = *(int64x2_t *)(v113 + 16);
                  *int32x4_t v114 = vzip1q_s64(*(int64x2_t *)v113, v122);
                  int64x2_t v29 = vzip2q_s64(v121, v122);
                  *(int64x2_t *)((char *)v114 + v26) = v29;
                  uint64_t v123 = (int64x2_t *)((char *)v114 + v78);
                  *uint64_t v123 = v30;
                  *(int64x2_t *)((char *)v123 + v26) = v28;
                  uint64_t v116 = 64;
                }
                else if (v115 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v113);
                  *int32x4_t v114 = v30;
                  *(int64x2_t *)((char *)v114 + v26) = v30;
                  *(int64x2_t *)((char *)v114 + v78) = v30;
                  *(int64x2_t *)((char *)v114 + 3 * a11) = v30;
                  uint64_t v116 = 2;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v114, v26, v113, v115, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v114->i16, v26, v113, v115, v76);
                uint64_t v116 = 32;
              }
            }
            else
            {
              uint64_t v116 = 0;
              v114->i64[0] = 0;
              v103[1].i64[1] = 0;
              long long v117 = (uint64_t *)((char *)v114->i64 + v26);
              *long long v117 = 0;
              v117[1] = 0;
              unsigned int v118 = (uint64_t *)((char *)v114->i64 + v78);
              *unsigned int v118 = 0;
              v118[1] = 0;
              unsigned int v119 = (uint64_t *)((char *)v114->i64 + v248);
              *unsigned int v119 = 0;
              v119[1] = 0;
            }
            uint64_t v124 = v113 + v116;
            int v125 = v73 + 2;
            unsigned int v126 = v72[4];
            if (v72[4])
            {
              if (v126 < 0xF0)
              {
                if (v126 == 63)
                {
                  int v131 = (const double *)(v124 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v131);
                  int64x2_t v132 = *(int64x2_t *)v124;
                  int64x2_t v133 = *(int64x2_t *)(v124 + 16);
                  *int v125 = vzip1q_s64(*(int64x2_t *)v124, v133);
                  int64x2_t v29 = vzip2q_s64(v132, v133);
                  *(int64x2_t *)((char *)v125 + v26) = v29;
                  unsigned int v134 = (int64x2_t *)((char *)v125 + v78);
                  *unsigned int v134 = v30;
                  *(int64x2_t *)((char *)v134 + v26) = v28;
                  uint64_t v127 = 64;
                }
                else if (v126 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v124);
                  *int v125 = v30;
                  *(int64x2_t *)((char *)v125 + v26) = v30;
                  *(int64x2_t *)((char *)v125 + v78) = v30;
                  *(int64x2_t *)((char *)v125 + 3 * a11) = v30;
                  uint64_t v127 = 2;
                }
                else
                {
                  uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v125, v26, v124, v126, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v125->i16, v26, v124, v126, v76);
                uint64_t v127 = 32;
              }
            }
            else
            {
              uint64_t v127 = 0;
              v125->i64[0] = 0;
              v73[2].i64[1] = 0;
              int v128 = (uint64_t *)((char *)v125->i64 + v26);
              *int v128 = 0;
              v128[1] = 0;
              unint64_t v129 = (uint64_t *)((char *)v125->i64 + v78);
              *unint64_t v129 = 0;
              v129[1] = 0;
              unsigned int v130 = (uint64_t *)((char *)v125->i64 + v248);
              *unsigned int v130 = 0;
              v130[1] = 0;
            }
            uint64_t v135 = v124 + v127;
            unsigned int v136 = v73 + 3;
            unsigned int v137 = v72[5];
            if (v72[5])
            {
              if (v137 < 0xF0)
              {
                if (v137 == 63)
                {
                  __int32 v142 = (const double *)(v135 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v142);
                  int64x2_t v143 = *(int64x2_t *)v135;
                  int64x2_t v144 = *(int64x2_t *)(v135 + 16);
                  *unsigned int v136 = vzip1q_s64(*(int64x2_t *)v135, v144);
                  int64x2_t v29 = vzip2q_s64(v143, v144);
                  *(int64x2_t *)((char *)v136 + v26) = v29;
                  int v145 = (int64x2_t *)((char *)v136 + v78);
                  *int v145 = v30;
                  *(int64x2_t *)((char *)v145 + v26) = v28;
                  uint64_t v138 = 64;
                }
                else if (v137 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v135);
                  *unsigned int v136 = v30;
                  *(int64x2_t *)((char *)v136 + v26) = v30;
                  *(int64x2_t *)((char *)v136 + v78) = v30;
                  *(int64x2_t *)((char *)v136 + 3 * a11) = v30;
                  uint64_t v138 = 2;
                }
                else
                {
                  uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v136, v26, v135, v137, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v136->i16, v26, v135, v137, v76);
                uint64_t v138 = 32;
              }
            }
            else
            {
              uint64_t v138 = 0;
              v136->i64[0] = 0;
              v73[3].i64[1] = 0;
              BOOL v139 = (uint64_t *)((char *)v136->i64 + v26);
              *BOOL v139 = 0;
              v139[1] = 0;
              BOOL v140 = (uint64_t *)((char *)v136->i64 + v78);
              *BOOL v140 = 0;
              v140[1] = 0;
              int8x8_t v141 = (uint64_t *)((char *)v136->i64 + v248);
              *int8x8_t v141 = 0;
              v141[1] = 0;
            }
            uint64_t v146 = v135 + v138;
            uint64_t v147 = v103 + 2;
            unsigned int v148 = v72[6];
            if (v72[6])
            {
              if (v148 < 0xF0)
              {
                if (v148 == 63)
                {
                  unsigned int v153 = (const double *)(v146 + 32);
                  *(float64x2x2_t *)v30.i8 = vld2q_f64(v153);
                  int64x2_t v154 = *(int64x2_t *)v146;
                  int64x2_t v155 = *(int64x2_t *)(v146 + 16);
                  *uint64_t v147 = vzip1q_s64(*(int64x2_t *)v146, v155);
                  int64x2_t v29 = vzip2q_s64(v154, v155);
                  *(int64x2_t *)((char *)v147 + v26) = v29;
                  long long v156 = (int64x2_t *)((char *)v147 + v78);
                  *long long v156 = v30;
                  *(int64x2_t *)((char *)v156 + v26) = v28;
                  uint64_t v149 = 64;
                }
                else if (v148 == 1)
                {
                  int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v146);
                  *uint64_t v147 = v30;
                  *(int64x2_t *)((char *)v147 + v26) = v30;
                  *(int64x2_t *)((char *)v147 + v78) = v30;
                  *(int64x2_t *)((char *)v147 + 3 * a11) = v30;
                  uint64_t v149 = 2;
                }
                else
                {
                  uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v147, v26, v135 + v138, v148, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v147->i16, v26, v135 + v138, v148, v76);
                uint64_t v149 = 32;
              }
            }
            else
            {
              uint64_t v149 = 0;
              v147->i64[0] = 0;
              v103[2].i64[1] = 0;
              unsigned int v150 = (uint64_t *)((char *)v147->i64 + v26);
              *unsigned int v150 = 0;
              v150[1] = 0;
              unsigned int v151 = (uint64_t *)((char *)v147->i64 + v78);
              *unsigned int v151 = 0;
              v151[1] = 0;
              int v152 = (uint64_t *)((char *)v147->i64 + v248);
              *int v152 = 0;
              v152[1] = 0;
            }
            long long v157 = v103 + 3;
            unsigned int v158 = v72[7];
            if (v72[7])
            {
              uint64_t v159 = v146 + v149;
              if (v158 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v157->i16, v26, v159, v158, v76);
                goto LABEL_169;
              }
              unsigned int v35 = a7;
              if (v158 == 63)
              {
                char v163 = (const double *)(v159 + 32);
                *(float64x2x2_t *)v30.i8 = vld2q_f64(v163);
                int64x2_t v164 = *(int64x2_t *)v159;
                int64x2_t v165 = *(int64x2_t *)(v159 + 16);
                *long long v157 = vzip1q_s64(*(int64x2_t *)v159, v165);
                int64x2_t v29 = vzip2q_s64(v164, v165);
                *(int64x2_t *)((char *)v157 + v26) = v29;
                uint64_t v166 = (int64x2_t *)((char *)v157 + v78);
                int64x2_t *v166 = v30;
                *(int64x2_t *)((char *)v166 + v26) = v28;
              }
              else if (v158 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v159);
                *long long v157 = v30;
                *(int64x2_t *)((char *)v157 + v26) = v30;
                *(int64x2_t *)((char *)v157 + v78) = v30;
                *(int64x2_t *)((char *)v157 + 3 * a11) = v30;
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v157, v26, v159, v158, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              v157->i64[0] = 0;
              v103[3].i64[1] = 0;
              unsigned int v160 = (uint64_t *)((char *)v157->i64 + v26);
              *unsigned int v160 = 0;
              v160[1] = 0;
              unsigned int v161 = (uint64_t *)((char *)v157->i64 + v78);
              *unsigned int v161 = 0;
              v161[1] = 0;
              unsigned int v162 = (uint64_t *)((char *)v157->i64 + v248);
              *unsigned int v162 = 0;
              v162[1] = 0;
LABEL_169:
              unsigned int v35 = a7;
            }
            uint64_t v25 = v246;
LABEL_27:
            unsigned int v36 = v33 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v71;
          char v256 = v41;
          char v257 = v247;
          unsigned int v252 = v229;
          unsigned int v253 = v39 - v37;
          block[6] = v72;
          int32x4_t v250 = v73;
          uint64_t v26 = a11;
          uint64_t v251 = a11;
          unsigned int v254 = v240;
          unsigned int v255 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v246;
            unsigned int v35 = a7;
            goto LABEL_27;
          }
          uint64_t v80 = *(void *)(v25 + 208);
          int v81 = *(_DWORD *)(v80 + 52);
          unsigned int v82 = *v72;
          if (*v72)
          {
            if (v82 < 0xF0)
            {
              if (v82 == 63)
              {
                int64x2_t v28 = v71[1];
                uint64_t v167 = (const double *)v71[2].i64;
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v167);
                int64x2_t v30 = vzip2q_s64(*v71, v28);
                int64x2_t v259 = vzip1q_s64(*v71, v28);
                int64x2_t v263 = v30;
                int64x2_t v267 = v29;
                int64x2_t v271 = v168;
                uint64_t v83 = 64;
              }
              else if (v82 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16(v71->i16);
                int64x2_t v259 = v30;
                int64x2_t v263 = v30;
                int64x2_t v267 = v30;
                int64x2_t v271 = v30;
                uint64_t v83 = 2;
              }
              else
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v259, 64, (uint64_t)v71, v82, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v259.i16, 64, (uint64_t)v71, v82, *(_DWORD *)(v80 + 52));
              uint64_t v83 = 32;
            }
          }
          else
          {
            uint64_t v83 = 0;
            int64x2_t v259 = 0uLL;
            int64x2_t v263 = 0uLL;
            int64x2_t v267 = 0uLL;
            int64x2_t v271 = 0uLL;
          }
          uint64_t v169 = (uint64_t)v71->i64 + v83;
          unsigned int v170 = v72[1];
          if (v72[1])
          {
            if (v170 < 0xF0)
            {
              if (v170 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v169 + 16);
                float32x4_t v172 = (const double *)(v169 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v172);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v169, v28);
                int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v169, v28);
                int64x2_t v264 = v30;
                int64x2_t v268 = v29;
                int64x2_t v272 = v173;
                uint64_t v171 = 64;
              }
              else if (v170 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v169);
                int64x2_t v260 = v30;
                int64x2_t v264 = v30;
                int64x2_t v268 = v30;
                int64x2_t v272 = v30;
                uint64_t v171 = 2;
              }
              else
              {
                uint64_t v171 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v260, 64, v169, v170, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v260.i16, 64, v169, v170, v81);
              uint64_t v171 = 32;
            }
          }
          else
          {
            uint64_t v171 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v174 = v169 + v171;
          unsigned int v175 = v72[2];
          if (v72[2])
          {
            if (v175 < 0xF0)
            {
              if (v175 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v174 + 16);
                long long v177 = (const double *)(v174 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v177);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v174, v28);
                int64x2_t v275 = vzip1q_s64(*(int64x2_t *)v174, v28);
                int64x2_t v279 = v30;
                int64x2_t v283 = v29;
                int64x2_t v287 = v178;
                uint64_t v176 = 64;
              }
              else if (v175 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v174);
                int64x2_t v275 = v30;
                int64x2_t v279 = v30;
                int64x2_t v283 = v30;
                int64x2_t v287 = v30;
                uint64_t v176 = 2;
              }
              else
              {
                uint64_t v176 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 64, v174, v175, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v275.i16, 64, v174, v175, v81);
              uint64_t v176 = 32;
            }
          }
          else
          {
            uint64_t v176 = 0;
            int64x2_t v275 = 0uLL;
            int64x2_t v279 = 0uLL;
            int64x2_t v283 = 0uLL;
            int64x2_t v287 = 0uLL;
          }
          uint64_t v179 = v174 + v176;
          unsigned int v180 = v72[3];
          if (v72[3])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v179 + 16);
                uint64_t v182 = (const double *)(v179 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v182);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v179, v28);
                int64x2_t v276 = vzip1q_s64(*(int64x2_t *)v179, v28);
                int64x2_t v280 = v30;
                int64x2_t v284 = v29;
                int64x2_t v288 = v183;
                uint64_t v181 = 64;
              }
              else if (v180 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v179);
                int64x2_t v276 = v30;
                int64x2_t v280 = v30;
                int64x2_t v284 = v30;
                int64x2_t v288 = v30;
                uint64_t v181 = 2;
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v276, 64, v179, v180, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v276.i16, 64, v179, v180, v81);
              uint64_t v181 = 32;
            }
          }
          else
          {
            uint64_t v181 = 0;
            int64x2_t v276 = 0uLL;
            int64x2_t v280 = 0uLL;
            int64x2_t v284 = 0uLL;
            int64x2_t v288 = 0uLL;
          }
          uint64_t v184 = v179 + v181;
          unsigned int v185 = v72[4];
          if (v72[4])
          {
            if (v185 < 0xF0)
            {
              if (v185 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v184 + 16);
                unsigned int v187 = (const double *)(v184 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v187);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v184, v28);
                int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v184, v28);
                int64x2_t v265 = v30;
                int64x2_t v269 = v29;
                int64x2_t v273 = v188;
                uint64_t v186 = 64;
              }
              else if (v185 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v184);
                int64x2_t v261 = v30;
                int64x2_t v265 = v30;
                int64x2_t v269 = v30;
                int64x2_t v273 = v30;
                uint64_t v186 = 2;
              }
              else
              {
                uint64_t v186 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v261, 64, v184, v185, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v261.i16, 64, v184, v185, v81);
              uint64_t v186 = 32;
            }
          }
          else
          {
            uint64_t v186 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v189 = v184 + v186;
          unsigned int v190 = v72[5];
          if (v72[5])
          {
            if (v190 < 0xF0)
            {
              if (v190 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v189 + 16);
                uint64_t v192 = (const double *)(v189 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v192);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v189, v28);
                int64x2_t v262 = vzip1q_s64(*(int64x2_t *)v189, v28);
                int64x2_t v266 = v30;
                int64x2_t v270 = v29;
                int64x2_t v274 = v193;
                uint64_t v191 = 64;
              }
              else if (v190 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v189);
                int64x2_t v262 = v30;
                int64x2_t v266 = v30;
                int64x2_t v270 = v30;
                int64x2_t v274 = v30;
                uint64_t v191 = 2;
              }
              else
              {
                uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v262, 64, v189, v190, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v262.i16, 64, v189, v190, v81);
              uint64_t v191 = 32;
            }
          }
          else
          {
            uint64_t v191 = 0;
            int64x2_t v262 = 0uLL;
            int64x2_t v266 = 0uLL;
            int64x2_t v270 = 0uLL;
            int64x2_t v274 = 0uLL;
          }
          uint64_t v194 = v189 + v191;
          unsigned int v195 = v72[6];
          if (v72[6])
          {
            if (v195 < 0xF0)
            {
              if (v195 == 63)
              {
                int64x2_t v28 = *(int64x2_t *)(v194 + 16);
                uint64_t v199 = (const double *)(v194 + 32);
                *(float64x2x2_t *)v29.i8 = vld2q_f64(v199);
                int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v194, v28);
                int64x2_t v277 = vzip1q_s64(*(int64x2_t *)v194, v28);
                int64x2_t v281 = v30;
                int64x2_t v285 = v29;
                int64x2_t v289 = v200;
                uint64_t v196 = 64;
                unsigned int v197 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else if (v195 == 1)
              {
                int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v194);
                int64x2_t v277 = v30;
                int64x2_t v281 = v30;
                int64x2_t v285 = v30;
                int64x2_t v289 = v30;
                uint64_t v196 = 2;
                unsigned int v197 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v277, 64, v194, v195, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
                unsigned int v197 = v72[7];
                if (!v72[7])
                {
LABEL_226:
                  int64x2_t v278 = 0uLL;
                  int64x2_t v282 = 0uLL;
                  int64x2_t v286 = 0uLL;
                  int64x2_t v290 = 0uLL;
                  unsigned int v35 = a7;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v277.i16, 64, v194, v195, v81);
              uint64_t v196 = 32;
              unsigned int v197 = v72[7];
              if (!v72[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v196 = 0;
            int64x2_t v277 = 0uLL;
            int64x2_t v281 = 0uLL;
            int64x2_t v285 = 0uLL;
            int64x2_t v289 = 0uLL;
            unsigned int v197 = v72[7];
            if (!v72[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v198 = v194 + v196;
          if (v197 < 0xF0)
          {
            unsigned int v35 = a7;
            if (v197 == 63)
            {
              int64x2_t v28 = *(int64x2_t *)(v198 + 16);
              int v201 = (const double *)(v198 + 32);
              *(float64x2x2_t *)v29.i8 = vld2q_f64(v201);
              int64x2_t v30 = vzip2q_s64(*(int64x2_t *)v198, v28);
              int64x2_t v278 = vzip1q_s64(*(int64x2_t *)v198, v28);
              int64x2_t v282 = v30;
              int64x2_t v286 = v29;
              int64x2_t v290 = v202;
            }
            else if (v197 == 1)
            {
              int64x2_t v30 = (int64x2_t)vld1q_dup_s16((const __int16 *)v198);
              int64x2_t v278 = v30;
              int64x2_t v282 = v30;
              int64x2_t v286 = v30;
              int64x2_t v290 = v30;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v278, 64, v198, v197, *(int8x8_t *)v30.i8, *(double *)v28.i64, *(int8x8_t *)v29.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v278.i16, 64, v198, v197, v81);
            unsigned int v35 = a7;
          }
LABEL_243:
          unsigned int v36 = v33 + 1;
          unint64_t v203 = v254;
          uint64_t v25 = v246;
          if (v254)
          {
            unint64_t v204 = 0;
            int32x4_t v205 = &v259.i8[64 * (unint64_t)v252 + 4 * v253];
            unsigned int v206 = v255;
            do
            {
              if (v206)
              {
                uint64_t v207 = 0;
                unsigned int v208 = &v250->i8[v251 * v204];
                do
                {
                  v208[v207] = v205[v207];
                  ++v207;
                  unsigned int v206 = v255;
                }
                while (4 * (unint64_t)v255 > v207);
                unint64_t v203 = v254;
              }
              ++v204;
              v205 += 64;
            }
            while (v204 < v203);
          }
LABEL_28:
          BOOL v20 = v33 == v234 >> 4;
          unsigned int v33 = v36;
        }
        while (!v20);
        BOOL v20 = v16++ == v226;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v245 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v237 = v20;
  uint64_t v238 = v21;
  uint64_t v224 = v22;
  uint64_t v23 = v12;
  uint64_t v386 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v242 = v14;
  unsigned int v24 = v14 >> 3;
  unsigned int v223 = v14 + a10 - 1;
  unsigned int v225 = v223 >> 3;
  unsigned int v25 = *(unsigned __int8 *)(*(void *)(v23 + 208) + 88);
  unsigned int v26 = *(_DWORD *)(v23 + 112);
  uint64_t v246 = v23;
  if (*(void *)(v23 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v236 = v31;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v23, *(_DWORD *)(v23 + 144) + a12);
  uint64_t v33 = v23;
  BOOL v235 = isLevelTiled;
  unsigned int v34 = v245;
  if (v24 <= v225)
  {
    unsigned int v234 = v245 + a9 - 1;
    if (v245 >> 4 <= v234 >> 4)
    {
      uint64_t v35 = a11;
      unsigned int v220 = v19 - 1;
      unsigned int v244 = (v19 - 1) >> 4;
      int v243 = ((v19 - 1) & 0xF) + 1;
      int v221 = ((v17 - 1) & 7) + 1;
      unsigned int v222 = (v17 - 1) >> 3;
      uint64_t v228 = 4 * a11;
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0xF00000007);
      int8x8_t v37 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v36, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v36));
      __int32 v233 = v37.i32[0] | v37.i32[1];
      int8x8_t v232 = v37;
      BOOL v231 = v37.i32[0] != 0;
      BOOL v230 = v37.i32[1] != 0;
      unint64_t v219 = 8 * v26 * (unint64_t)v25;
      uint64_t v226 = 3 * a11;
      uint64_t v227 = 2 * a11;
      do
      {
        unsigned int v38 = (8 * v24) | 7;
        if (8 * v24 <= v242) {
          int v39 = v242;
        }
        else {
          int v39 = 8 * v24;
        }
        unsigned int v40 = v245 >> 4;
        if (v223 < v38) {
          unsigned int v38 = v223;
        }
        unsigned int v241 = 8 * v24;
        int v229 = v39 - 8 * v24;
        int v240 = v38 - v39 + 1;
        int v41 = v221;
        if (v24 != v222) {
          int v41 = 8;
        }
        unsigned int v247 = v41;
        uint64_t v239 = v224 + (v39 - v242) * v35;
        do
        {
          unsigned int v46 = 16 * v40;
          unsigned int v47 = 16 * (v40 + 1) - 1;
          if (16 * v40 <= v34) {
            int v48 = v34;
          }
          else {
            int v48 = 16 * v40;
          }
          if (v234 < v47) {
            unsigned int v47 = v245 + a9 - 1;
          }
          int v49 = v47 - v48 + 1;
          if (v40 == v244) {
            unsigned int v50 = v243;
          }
          else {
            unsigned int v50 = 16;
          }
          BOOL v51 = 1;
          if (v241 >= v242 && v46 >= v34)
          {
            int v52 = v243;
            if (v40 != v244) {
              int v52 = 16;
            }
            BOOL v51 = v49 != v52 || v240 != v247;
          }
          if (v235)
          {
            unsigned int v75 = 0;
            uint64_t v76 = v219 >> (*(unsigned char *)(v33 + 57) != 0);
            char v77 = 1;
            if (v76 > 127)
            {
              if (v76 > 511)
              {
                if (v76 == 512)
                {
                  char v78 = 0;
                  unsigned int v75 = 16;
                  unsigned int v79 = 16;
                }
                else
                {
                  char v78 = 1;
                  unsigned int v79 = 0;
                  if (v76 == 1024)
                  {
                    unsigned int v79 = 8;
                    unsigned int v75 = 16;
                  }
                }
              }
              else if (v76 == 128)
              {
                char v77 = 0;
                char v78 = 0;
                unsigned int v75 = 32;
                unsigned int v79 = 32;
              }
              else
              {
                char v78 = 1;
                unsigned int v79 = 0;
                if (v76 == 256)
                {
                  char v77 = 0;
                  char v78 = 0;
                  unsigned int v79 = 16;
                  unsigned int v75 = 32;
                }
              }
            }
            else
            {
              char v78 = 1;
              unsigned int v79 = 0;
              switch(v76)
              {
                case 4:
                  char v77 = 0;
                  char v78 = 0;
                  unsigned int v79 = 128;
                  unsigned int v75 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v77 = 0;
                  char v78 = 0;
                  unsigned int v75 = 128;
                  unsigned int v79 = 128;
                  break;
                case 16:
                  char v77 = 0;
                  char v78 = 0;
                  unsigned int v79 = 64;
                  unsigned int v75 = 128;
                  break;
                case 32:
                  char v77 = 0;
                  char v78 = 0;
                  unsigned int v75 = 64;
                  unsigned int v79 = 64;
                  break;
                default:
                  if (v76 == 64)
                  {
                    char v77 = 0;
                    char v78 = 0;
                    unsigned int v79 = 32;
                    unsigned int v75 = 64;
                  }
                  break;
              }
            }
            unsigned int v208 = (v75 >> 4) - 1;
            if (v77) {
              unsigned int v209 = 0;
            }
            else {
              unsigned int v209 = 32 - __clz(~(-1 << -(char)__clz(v208)));
            }
            unsigned int v210 = (v79 >> 3) - 1;
            if (v78)
            {
              unsigned int v211 = 0;
              if (v209) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v211 = 32 - __clz(~(-1 << -(char)__clz(v210)));
              if (v211 | v209)
              {
LABEL_234:
                int v212 = 0;
                uint64_t v213 = 0;
                int v214 = v40 & v208;
                int v215 = v24 & v210;
                BOOL v216 = v211 != 0;
                BOOL v217 = v209 != 0;
                int v218 = 1;
                do
                {
                  --v211;
                  if (v216) {
                    v213 |= (unint64_t)(v218 & v215) << v212++;
                  }
                  else {
                    unsigned int v211 = 0;
                  }
                  --v209;
                  if (v217) {
                    v213 |= (unint64_t)(v218 & v214) << v212++;
                  }
                  else {
                    unsigned int v209 = 0;
                  }
                  v218 *= 2;
                  --v212;
                  BOOL v217 = v209 != 0;
                  BOOL v216 = v211 != 0;
                }
                while (v209 | v211);
                goto LABEL_246;
              }
            }
            uint64_t v213 = 0;
LABEL_246:
            unint64_t v61 = ((unint64_t)(v46 / v75 + v241 / v79 * ((v75 + v220) / v75)) << 14) + (v213 << 10);
            goto LABEL_61;
          }
          if (v233)
          {
            int v54 = 0;
            uint64_t v55 = 0;
            int v56 = 1;
            BOOL v57 = v231;
            BOOL v58 = v230;
            __int32 v59 = v232.i32[0];
            __int32 v60 = v232.i32[1];
            do
            {
              --v59;
              if (v57) {
                v55 |= (unint64_t)(v56 & v24) << v54++;
              }
              else {
                __int32 v59 = 0;
              }
              --v60;
              if (v58) {
                v55 |= (unint64_t)(v56 & v40) << v54++;
              }
              else {
                __int32 v60 = 0;
              }
              v56 *= 2;
              --v54;
              BOOL v58 = v60 != 0;
              BOOL v57 = v59 != 0;
            }
            while (v60 | v59);
          }
          else
          {
            uint64_t v55 = 0;
          }
          unint64_t v61 = v55 << 10;
LABEL_61:
          unsigned int v62 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 15;
          if (v63 < 0x20) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 4) - 1)));
          }
          unsigned int v65 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 7;
          if (v66 < 0x10)
          {
            unsigned int v67 = 0;
            if (!v64)
            {
LABEL_87:
              unint64_t v69 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 3) - 1)));
            if (!(v67 | v64)) {
              goto LABEL_87;
            }
          }
          int v68 = 0;
          unint64_t v69 = 0;
          BOOL v70 = v64 != 0;
          BOOL v71 = v67 != 0;
          int v72 = 1;
          do
          {
            --v64;
            BOOL v73 = !v70;
            if (v70)
            {
              unint64_t v74 = ((unint64_t)(v72 & v40) << v68) | v69;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v74 = v69;
            }
            if (!v73) {
              ++v68;
            }
            --v67;
            if (v71)
            {
              unint64_t v69 = ((unint64_t)(v72 & v24) << v68) | v74;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v69 = v74;
            }
            if (v71) {
              ++v68;
            }
            v72 *= 2;
            --v68;
            BOOL v71 = v67 != 0;
            BOOL v70 = v64 != 0;
          }
          while (v67 | v64);
LABEL_88:
          uint64_t v80 = (unsigned char *)(v237 + v61);
          if (v236)
          {
            memcpy(__dst, v80, sizeof(__dst));
            uint64_t v33 = v246;
            unsigned int v34 = v245;
            uint64_t v80 = __dst;
          }
          int v81 = (unsigned __int8 *)(v238 + 8 * v69);
          uint64_t v82 = v239 + 16 * (v48 - v34);
          char v83 = v50 < 0x10 || v51;
          if ((v83 & 1) == 0 && v247 > 7)
          {
            uint64_t v84 = *(void *)(v33 + 208);
            int v85 = *(_DWORD *)(v84 + 52);
            unsigned int v86 = *v81;
            if (*v81)
            {
              uint64_t v35 = a11;
              uint64_t v88 = 3 * a11;
              uint64_t v87 = 2 * a11;
              if (v86 < 0xF0)
              {
                if (v86 == 7)
                {
                  float64x2_t v97 = vld1q_dup_f64((const double *)v80);
                  *(float64x2_t *)uint64_t v82 = v97;
                  *(float64x2_t *)(v82 + 16) = v97;
                  *(float64x2_t *)(v82 + 32) = v97;
                  *(float64x2_t *)(v82 + 48) = v97;
                  uint64_t v98 = (float64x2_t *)(v82 + a11);
                  *uint64_t v98 = v97;
                  v98[1] = v97;
                  v98[2] = v97;
                  v98[3] = v97;
                  int64x2_t v99 = (float64x2_t *)(v82 + v227);
                  *int64x2_t v99 = v97;
                  v99[1] = v97;
                  v99[2] = v97;
                  v99[3] = v97;
                  int64x2_t v100 = (float64x2_t *)(v82 + v226);
                  *int64x2_t v100 = v97;
                  v100[1] = v97;
                  v100[2] = v97;
                  v100[3] = v97;
                  uint64_t v89 = 8;
                }
                else
                {
                  uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v82, a11, (uint64_t)v80, v86);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v82, a11, (unint64_t)v80, v86, *(_DWORD *)(v84 + 52));
                uint64_t v89 = 128;
              }
            }
            else
            {
              uint64_t v89 = 0;
              *(_OWORD *)(v82 + 32) = 0u;
              *(_OWORD *)(v82 + 48) = 0u;
              *(_OWORD *)uint64_t v82 = 0u;
              *(_OWORD *)(v82 + 16) = 0u;
              uint64_t v35 = a11;
              uint64_t v94 = (_OWORD *)(v82 + a11);
              v94[2] = 0u;
              v94[3] = 0u;
              *uint64_t v94 = 0u;
              v94[1] = 0u;
              uint64_t v88 = 3 * a11;
              uint64_t v87 = 2 * a11;
              uint64_t v95 = (_OWORD *)(v82 + v227);
              v95[2] = 0u;
              v95[3] = 0u;
              *uint64_t v95 = 0u;
              v95[1] = 0u;
              int8x8_t v96 = (_OWORD *)(v82 + v226);
              v96[2] = 0u;
              v96[3] = 0u;
              *int8x8_t v96 = 0u;
              v96[1] = 0u;
            }
            uint64_t v102 = (const double *)&v80[v89];
            int8x8_t v103 = (int16x4_t *)(v82 + 64);
            unsigned int v104 = v81[1];
            if (v81[1])
            {
              if (v104 < 0xF0)
              {
                if (v104 == 7)
                {
                  float64x2_t v109 = vld1q_dup_f64(v102);
                  *(float64x2_t *)(v82 + 64) = v109;
                  *(float64x2_t *)(v82 + 80) = v109;
                  *(float64x2_t *)(v82 + 96) = v109;
                  *(float64x2_t *)(v82 + 112) = v109;
                  int64x2_t v110 = (float64x2_t *)((char *)v103 + v35);
                  *int64x2_t v110 = v109;
                  v110[1] = v109;
                  float32x4_t v110[2] = v109;
                  v110[3] = v109;
                  int64x2_t v111 = (float64x2_t *)((char *)v103 + v87);
                  *int64x2_t v111 = v109;
                  v111[1] = v109;
                  int64x2_t v111[2] = v109;
                  v111[3] = v109;
                  unint64_t v112 = (float64x2_t *)((char *)v103 + v88);
                  *unint64_t v112 = v109;
                  v112[1] = v109;
                  uint64_t v105 = 8;
                  float32x4_t v112[2] = v109;
                  v112[3] = v109;
                }
                else
                {
                  uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v103, v35, (uint64_t)v102, v104);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v103, v35, (unint64_t)v102, v104, v85);
                uint64_t v105 = 128;
              }
            }
            else
            {
              uint64_t v105 = 0;
              *(_OWORD *)(v82 + 96) = 0u;
              *(_OWORD *)(v82 + 112) = 0u;
              *(_OWORD *)v103->i8 = 0u;
              *(_OWORD *)(v82 + 80) = 0u;
              uint64_t v106 = (_OWORD *)((char *)v103 + v35);
              v106[2] = 0u;
              v106[3] = 0u;
              _OWORD *v106 = 0u;
              v106[1] = 0u;
              int8x8_t v107 = (_OWORD *)((char *)v103 + v87);
              int64x2_t v107[2] = 0u;
              v107[3] = 0u;
              *int8x8_t v107 = 0u;
              v107[1] = 0u;
              uint64_t v108 = (_OWORD *)((char *)v103 + v88);
              float32x4_t v108[2] = 0u;
              v108[3] = 0u;
              *uint64_t v108 = 0u;
              v108[1] = 0u;
            }
            uint64_t v113 = (const double *)((char *)v102 + v105);
            int32x4_t v114 = (int16x4_t *)(v82 + v228);
            unsigned int v115 = v81[2];
            if (v81[2])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 7)
                {
                  float64x2_t v120 = vld1q_dup_f64(v113);
                  *(float64x2_t *)v114->i8 = v120;
                  *(float64x2_t *)v114[2].i8 = v120;
                  *(float64x2_t *)v114[4].i8 = v120;
                  *(float64x2_t *)v114[6].i8 = v120;
                  int64x2_t v121 = (float64x2_t *)((char *)v114 + v35);
                  *int64x2_t v121 = v120;
                  v121[1] = v120;
                  v121[2] = v120;
                  v121[3] = v120;
                  int64x2_t v122 = (float64x2_t *)((char *)v114 + v87);
                  *int64x2_t v122 = v120;
                  v122[1] = v120;
                  v122[2] = v120;
                  v122[3] = v120;
                  uint64_t v123 = (float64x2_t *)((char *)v114 + v88);
                  *uint64_t v123 = v120;
                  v123[1] = v120;
                  v123[2] = v120;
                  v123[3] = v120;
                  uint64_t v116 = 8;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v82 + v228, v35, (uint64_t)v113, v115);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)(v82 + v228), v35, (unint64_t)v113, v115, v85);
                uint64_t v116 = 128;
              }
            }
            else
            {
              uint64_t v116 = 0;
              *(_OWORD *)v114[4].i8 = 0u;
              *(_OWORD *)v114[6].i8 = 0u;
              *(_OWORD *)v114->i8 = 0u;
              *(_OWORD *)v114[2].i8 = 0u;
              long long v117 = (_OWORD *)((char *)v114 + v35);
              v117[2] = 0u;
              v117[3] = 0u;
              *long long v117 = 0u;
              v117[1] = 0u;
              unsigned int v118 = (_OWORD *)((char *)v114 + v87);
              v118[2] = 0u;
              v118[3] = 0u;
              *unsigned int v118 = 0u;
              v118[1] = 0u;
              unsigned int v119 = (_OWORD *)((char *)v114 + v88);
              v119[2] = 0u;
              v119[3] = 0u;
              *unsigned int v119 = 0u;
              v119[1] = 0u;
            }
            uint64_t v124 = (const double *)((char *)v113 + v116);
            int v125 = v114 + 8;
            unsigned int v126 = v81[3];
            if (v81[3])
            {
              if (v126 < 0xF0)
              {
                if (v126 == 7)
                {
                  float64x2_t v131 = vld1q_dup_f64(v124);
                  *(float64x2_t *)v114[8].i8 = v131;
                  *(float64x2_t *)v114[10].i8 = v131;
                  *(float64x2_t *)v114[12].i8 = v131;
                  *(float64x2_t *)v114[14].i8 = v131;
                  int64x2_t v132 = (float64x2_t *)((char *)v125 + v35);
                  *int64x2_t v132 = v131;
                  v132[1] = v131;
                  v132[2] = v131;
                  v132[3] = v131;
                  int64x2_t v133 = (float64x2_t *)((char *)v125 + v87);
                  *int64x2_t v133 = v131;
                  v133[1] = v131;
                  v133[2] = v131;
                  v133[3] = v131;
                  unsigned int v134 = (float64x2_t *)((char *)v125 + v88);
                  *unsigned int v134 = v131;
                  v134[1] = v131;
                  uint64_t v127 = 8;
                  v134[2] = v131;
                  v134[3] = v131;
                }
                else
                {
                  uint64_t v127 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v125, v35, (uint64_t)v124, v126);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v125, v35, (unint64_t)v124, v126, v85);
                uint64_t v127 = 128;
              }
            }
            else
            {
              uint64_t v127 = 0;
              *(_OWORD *)v114[12].i8 = 0u;
              *(_OWORD *)v114[14].i8 = 0u;
              *(_OWORD *)v125->i8 = 0u;
              *(_OWORD *)v114[10].i8 = 0u;
              int v128 = (_OWORD *)((char *)v125 + v35);
              v128[2] = 0u;
              v128[3] = 0u;
              *int v128 = 0u;
              v128[1] = 0u;
              unint64_t v129 = (_OWORD *)((char *)v125 + v87);
              v129[2] = 0u;
              v129[3] = 0u;
              *unint64_t v129 = 0u;
              v129[1] = 0u;
              unsigned int v130 = (_OWORD *)((char *)v125 + v88);
              v130[2] = 0u;
              v130[3] = 0u;
              *unsigned int v130 = 0u;
              v130[1] = 0u;
            }
            uint64_t v135 = (const double *)((char *)v124 + v127);
            unsigned int v136 = (int16x4_t *)(v82 + 128);
            unsigned int v137 = v81[4];
            if (v81[4])
            {
              if (v137 < 0xF0)
              {
                if (v137 == 7)
                {
                  float64x2_t v142 = vld1q_dup_f64(v135);
                  *(float64x2_t *)(v82 + 128) = v142;
                  *(float64x2_t *)(v82 + 144) = v142;
                  *(float64x2_t *)(v82 + 160) = v142;
                  *(float64x2_t *)(v82 + 176) = v142;
                  int64x2_t v143 = (float64x2_t *)((char *)v136 + v35);
                  *int64x2_t v143 = v142;
                  v143[1] = v142;
                  v143[2] = v142;
                  v143[3] = v142;
                  int64x2_t v144 = (float64x2_t *)((char *)v136 + v87);
                  *int64x2_t v144 = v142;
                  v144[1] = v142;
                  float32x4_t v144[2] = v142;
                  v144[3] = v142;
                  int v145 = (float64x2_t *)((char *)v136 + v88);
                  *int v145 = v142;
                  v145[1] = v142;
                  uint64_t v138 = 8;
                  v145[2] = v142;
                  v145[3] = v142;
                }
                else
                {
                  uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v136, v35, (uint64_t)v135, v137);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v136, v35, (unint64_t)v135, v137, v85);
                uint64_t v138 = 128;
              }
            }
            else
            {
              uint64_t v138 = 0;
              *(_OWORD *)(v82 + 160) = 0u;
              *(_OWORD *)(v82 + 176) = 0u;
              *(_OWORD *)v136->i8 = 0u;
              *(_OWORD *)(v82 + 144) = 0u;
              BOOL v139 = (_OWORD *)((char *)v136 + v35);
              int64x2_t v139[2] = 0u;
              v139[3] = 0u;
              *BOOL v139 = 0u;
              v139[1] = 0u;
              BOOL v140 = (_OWORD *)((char *)v136 + v87);
              float32x4_t v140[2] = 0u;
              v140[3] = 0u;
              *BOOL v140 = 0u;
              v140[1] = 0u;
              int8x8_t v141 = (_OWORD *)((char *)v136 + v88);
              int64x2_t v141[2] = 0u;
              v141[3] = 0u;
              *int8x8_t v141 = 0u;
              v141[1] = 0u;
            }
            uint64_t v146 = (const double *)((char *)v135 + v138);
            uint64_t v147 = (int16x4_t *)(v82 + 192);
            unsigned int v148 = v81[5];
            if (v81[5])
            {
              if (v148 < 0xF0)
              {
                if (v148 == 7)
                {
                  float64x2_t v153 = vld1q_dup_f64(v146);
                  *(float64x2_t *)(v82 + 192) = v153;
                  *(float64x2_t *)(v82 + 208) = v153;
                  *(float64x2_t *)(v82 + 224) = v153;
                  *(float64x2_t *)(v82 + 240) = v153;
                  int64x2_t v154 = (float64x2_t *)((char *)v147 + v35);
                  *int64x2_t v154 = v153;
                  v154[1] = v153;
                  v154[2] = v153;
                  v154[3] = v153;
                  int64x2_t v155 = (float64x2_t *)((char *)v147 + v87);
                  *int64x2_t v155 = v153;
                  v155[1] = v153;
                  v155[2] = v153;
                  v155[3] = v153;
                  long long v156 = (float64x2_t *)((char *)v147 + v88);
                  *long long v156 = v153;
                  v156[1] = v153;
                  uint64_t v149 = 8;
                  v156[2] = v153;
                  v156[3] = v153;
                }
                else
                {
                  uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v147, v35, (uint64_t)v146, v148);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v147, v35, (unint64_t)v146, v148, v85);
                uint64_t v149 = 128;
              }
            }
            else
            {
              uint64_t v149 = 0;
              *(_OWORD *)(v82 + 224) = 0u;
              *(_OWORD *)(v82 + 240) = 0u;
              *(_OWORD *)v147->i8 = 0u;
              *(_OWORD *)(v82 + 208) = 0u;
              unsigned int v150 = (_OWORD *)((char *)v147 + v35);
              v150[2] = 0u;
              v150[3] = 0u;
              *unsigned int v150 = 0u;
              v150[1] = 0u;
              unsigned int v151 = (_OWORD *)((char *)v147 + v87);
              v151[2] = 0u;
              v151[3] = 0u;
              *unsigned int v151 = 0u;
              v151[1] = 0u;
              int v152 = (_OWORD *)((char *)v147 + v88);
              v152[2] = 0u;
              v152[3] = 0u;
              *int v152 = 0u;
              v152[1] = 0u;
            }
            long long v157 = (const double *)((char *)v146 + v149);
            unsigned int v158 = v114 + 16;
            unsigned int v159 = v81[6];
            if (v81[6])
            {
              if (v159 < 0xF0)
              {
                if (v159 == 7)
                {
                  float64x2_t v164 = vld1q_dup_f64(v157);
                  *(float64x2_t *)v114[16].i8 = v164;
                  *(float64x2_t *)v114[18].i8 = v164;
                  *(float64x2_t *)v114[20].i8 = v164;
                  *(float64x2_t *)v114[22].i8 = v164;
                  int64x2_t v165 = (float64x2_t *)((char *)v158 + v35);
                  *int64x2_t v165 = v164;
                  v165[1] = v164;
                  v165[2] = v164;
                  v165[3] = v164;
                  uint64_t v166 = (float64x2_t *)((char *)v158 + v87);
                  float64x2_t *v166 = v164;
                  v166[1] = v164;
                  v166[2] = v164;
                  v166[3] = v164;
                  uint64_t v167 = (float64x2_t *)((char *)v158 + v88);
                  *uint64_t v167 = v164;
                  v167[1] = v164;
                  uint64_t v160 = 8;
                  v167[2] = v164;
                  v167[3] = v164;
                }
                else
                {
                  uint64_t v160 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v158, v35, (uint64_t)v146 + v149, v159);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v158, v35, (unint64_t)v146 + v149, v159, v85);
                uint64_t v160 = 128;
              }
            }
            else
            {
              uint64_t v160 = 0;
              *(_OWORD *)v114[20].i8 = 0u;
              *(_OWORD *)v114[22].i8 = 0u;
              *(_OWORD *)v158->i8 = 0u;
              *(_OWORD *)v114[18].i8 = 0u;
              unsigned int v161 = (_OWORD *)((char *)v158 + v35);
              v161[2] = 0u;
              v161[3] = 0u;
              *unsigned int v161 = 0u;
              v161[1] = 0u;
              unsigned int v162 = (_OWORD *)((char *)v158 + v87);
              v162[2] = 0u;
              v162[3] = 0u;
              *unsigned int v162 = 0u;
              v162[1] = 0u;
              char v163 = (_OWORD *)((char *)v158 + v88);
              v163[2] = 0u;
              v163[3] = 0u;
              *char v163 = 0u;
              v163[1] = 0u;
            }
            int64x2_t v168 = v114 + 24;
            unsigned int v169 = v81[7];
            if (v81[7])
            {
              unsigned int v170 = (const double *)((char *)v157 + v160);
              if (v169 < 0xF0)
              {
                if (v169 == 7)
                {
                  float64x2_t v171 = vld1q_dup_f64(v170);
                  *(float64x2_t *)v114[24].i8 = v171;
                  *(float64x2_t *)v114[26].i8 = v171;
                  *(float64x2_t *)v114[28].i8 = v171;
                  *(float64x2_t *)v114[30].i8 = v171;
                  float32x4_t v172 = (float64x2_t *)((char *)v168 + v35);
                  *float32x4_t v172 = v171;
                  v172[1] = v171;
                  v172[2] = v171;
                  v172[3] = v171;
                  int64x2_t v173 = (float64x2_t *)((char *)v168 + v87);
                  float64x2_t *v173 = v171;
                  v173[1] = v171;
                  v173[2] = v171;
                  v173[3] = v171;
                  uint64_t v174 = (float64x2_t *)((char *)v168 + v88);
                  *uint64_t v174 = v171;
                  v174[1] = v171;
                  v174[2] = v171;
                  v174[3] = v171;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v168, v35, (uint64_t)v170, v169);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v168, v35, (unint64_t)v170, v169, v85);
              }
            }
            else
            {
              *(_OWORD *)v114[28].i8 = 0u;
              *(_OWORD *)v114[30].i8 = 0u;
              *(_OWORD *)v168->i8 = 0u;
              *(_OWORD *)v114[26].i8 = 0u;
              BOOL v42 = (_OWORD *)((char *)v168 + v35);
              v42[2] = 0u;
              v42[3] = 0u;
              *BOOL v42 = 0u;
              v42[1] = 0u;
              int v43 = (_OWORD *)((char *)v168 + v87);
              v43[2] = 0u;
              v43[3] = 0u;
              *int v43 = 0u;
              v43[1] = 0u;
              int v44 = (_OWORD *)((char *)v168 + v88);
              v44[2] = 0u;
              v44[3] = 0u;
              *int v44 = 0u;
              v44[1] = 0u;
            }
            unsigned int v34 = v245;
            uint64_t v33 = v246;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v33;
          block[5] = v80;
          char v255 = v50;
          char v256 = v247;
          unsigned int v251 = v229;
          unsigned int v252 = v48 - v46;
          block[6] = v81;
          uint64_t v249 = v239 + 16 * (v48 - v34);
          uint64_t v35 = a11;
          uint64_t v250 = a11;
          unsigned int v253 = v240;
          unsigned int v254 = v49;
          if (v51)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            uint64_t v33 = v246;
            unsigned int v34 = v245;
LABEL_28:
            unsigned int v45 = v40 + 1;
            goto LABEL_29;
          }
          uint64_t v90 = *(void *)(v33 + 208);
          int v91 = *(_DWORD *)(v90 + 52);
          unsigned int v92 = *v81;
          if (*v81)
          {
            if (v92 < 0xF0)
            {
              if (v92 == 7)
              {
                float64x2_t v101 = vld1q_dup_f64((const double *)v80);
                float64x2_t v258 = v101;
                float64x2_t v259 = v101;
                float64x2_t v260 = v101;
                float64x2_t v261 = v101;
                float64x2_t v274 = v101;
                float64x2_t v275 = v101;
                float64x2_t v276 = v101;
                float64x2_t v277 = v101;
                float64x2_t v290 = v101;
                float64x2_t v291 = v101;
                float64x2_t v292 = v101;
                float64x2_t v293 = v101;
                float64x2_t v306 = v101;
                float64x2_t v307 = v101;
                uint64_t v93 = 8;
                float64x2_t v308 = v101;
                float64x2_t v309 = v101;
              }
              else
              {
                uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v258, 256, (uint64_t)v80, v92);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v258, 256, (unint64_t)v80, v92, *(_DWORD *)(v90 + 52));
              uint64_t v93 = 128;
            }
          }
          else
          {
            uint64_t v93 = 0;
            float64x2_t v261 = 0u;
            float64x2_t v260 = 0u;
            float64x2_t v259 = 0u;
            float64x2_t v258 = 0u;
            float64x2_t v274 = 0u;
            float64x2_t v275 = 0u;
            float64x2_t v276 = 0u;
            float64x2_t v277 = 0u;
            float64x2_t v290 = 0u;
            float64x2_t v291 = 0u;
            float64x2_t v292 = 0u;
            float64x2_t v293 = 0u;
            float64x2_t v306 = 0u;
            float64x2_t v307 = 0u;
            float64x2_t v308 = 0u;
            float64x2_t v309 = 0u;
          }
          unsigned int v175 = (const double *)&v80[v93];
          unsigned int v176 = v81[1];
          if (v81[1])
          {
            if (v176 < 0xF0)
            {
              if (v176 == 7)
              {
                float64x2_t v178 = vld1q_dup_f64(v175);
                float64x2_t v262 = v178;
                float64x2_t v263 = v178;
                float64x2_t v264 = v178;
                float64x2_t v265 = v178;
                float64x2_t v278 = v178;
                float64x2_t v279 = v178;
                float64x2_t v280 = v178;
                float64x2_t v281 = v178;
                float64x2_t v294 = v178;
                float64x2_t v295 = v178;
                float64x2_t v296 = v178;
                float64x2_t v297 = v178;
                float64x2_t v310 = v178;
                float64x2_t v311 = v178;
                uint64_t v177 = 8;
                float64x2_t v312 = v178;
                float64x2_t v313 = v178;
              }
              else
              {
                uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v262, 256, (uint64_t)v175, v176);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v262, 256, (unint64_t)v175, v176, v91);
              uint64_t v177 = 128;
            }
          }
          else
          {
            uint64_t v177 = 0;
            float64x2_t v264 = 0u;
            float64x2_t v265 = 0u;
            float64x2_t v262 = 0u;
            float64x2_t v263 = 0u;
            float64x2_t v278 = 0u;
            float64x2_t v279 = 0u;
            float64x2_t v280 = 0u;
            float64x2_t v281 = 0u;
            float64x2_t v294 = 0u;
            float64x2_t v295 = 0u;
            float64x2_t v296 = 0u;
            float64x2_t v297 = 0u;
            float64x2_t v310 = 0u;
            float64x2_t v311 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v313 = 0u;
          }
          uint64_t v179 = (const double *)((char *)v175 + v177);
          unsigned int v180 = v81[2];
          if (v81[2])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 7)
              {
                float64x2_t v182 = vld1q_dup_f64(v179);
                float64x2_t v322 = v182;
                float64x2_t v323 = v182;
                float64x2_t v324 = v182;
                float64x2_t v325 = v182;
                float64x2_t v338 = v182;
                float64x2_t v339 = v182;
                float64x2_t v340 = v182;
                float64x2_t v341 = v182;
                float64x2_t v354 = v182;
                float64x2_t v355 = v182;
                float64x2_t v356 = v182;
                float64x2_t v357 = v182;
                float64x2_t v370 = v182;
                float64x2_t v371 = v182;
                float64x2_t v372 = v182;
                uint64_t v181 = 8;
                float64x2_t v373 = v182;
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v322, 256, (uint64_t)v179, v180);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v322, 256, (unint64_t)v179, v180, v91);
              uint64_t v181 = 128;
            }
          }
          else
          {
            uint64_t v181 = 0;
            float64x2_t v324 = 0u;
            float64x2_t v325 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v354 = 0u;
            float64x2_t v355 = 0u;
            float64x2_t v356 = 0u;
            float64x2_t v357 = 0u;
            float64x2_t v370 = 0u;
            float64x2_t v371 = 0u;
            float64x2_t v372 = 0u;
            float64x2_t v373 = 0u;
          }
          int64x2_t v183 = (const double *)((char *)v179 + v181);
          unsigned int v184 = v81[3];
          if (v81[3])
          {
            if (v184 < 0xF0)
            {
              if (v184 == 7)
              {
                float64x2_t v186 = vld1q_dup_f64(v183);
                float64x2_t v326 = v186;
                float64x2_t v327 = v186;
                float64x2_t v328 = v186;
                float64x2_t v329 = v186;
                float64x2_t v342 = v186;
                float64x2_t v343 = v186;
                float64x2_t v344 = v186;
                float64x2_t v345 = v186;
                float64x2_t v358 = v186;
                float64x2_t v359 = v186;
                float64x2_t v360 = v186;
                float64x2_t v361 = v186;
                float64x2_t v374 = v186;
                float64x2_t v375 = v186;
                float64x2_t v376 = v186;
                uint64_t v185 = 8;
                float64x2_t v377 = v186;
              }
              else
              {
                uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v326, 256, (uint64_t)v183, v184);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v326, 256, (unint64_t)v183, v184, v91);
              uint64_t v185 = 128;
            }
          }
          else
          {
            uint64_t v185 = 0;
            float64x2_t v328 = 0u;
            float64x2_t v329 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v327 = 0u;
            float64x2_t v342 = 0u;
            float64x2_t v343 = 0u;
            float64x2_t v344 = 0u;
            float64x2_t v345 = 0u;
            float64x2_t v358 = 0u;
            float64x2_t v359 = 0u;
            float64x2_t v360 = 0u;
            float64x2_t v361 = 0u;
            float64x2_t v374 = 0u;
            float64x2_t v375 = 0u;
            float64x2_t v376 = 0u;
            float64x2_t v377 = 0u;
          }
          unsigned int v187 = (const double *)((char *)v183 + v185);
          unsigned int v188 = v81[4];
          if (v81[4])
          {
            if (v188 < 0xF0)
            {
              if (v188 == 7)
              {
                float64x2_t v190 = vld1q_dup_f64(v187);
                float64x2_t v266 = v190;
                float64x2_t v267 = v190;
                float64x2_t v268 = v190;
                float64x2_t v269 = v190;
                float64x2_t v282 = v190;
                float64x2_t v283 = v190;
                float64x2_t v284 = v190;
                float64x2_t v285 = v190;
                float64x2_t v298 = v190;
                float64x2_t v299 = v190;
                float64x2_t v300 = v190;
                float64x2_t v301 = v190;
                float64x2_t v314 = v190;
                float64x2_t v315 = v190;
                uint64_t v189 = 8;
                float64x2_t v316 = v190;
                float64x2_t v317 = v190;
              }
              else
              {
                uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v266, 256, (uint64_t)v187, v188);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v266, 256, (unint64_t)v187, v188, v91);
              uint64_t v189 = 128;
            }
          }
          else
          {
            uint64_t v189 = 0;
            float64x2_t v268 = 0u;
            float64x2_t v269 = 0u;
            float64x2_t v266 = 0u;
            float64x2_t v267 = 0u;
            float64x2_t v282 = 0u;
            float64x2_t v283 = 0u;
            float64x2_t v284 = 0u;
            float64x2_t v285 = 0u;
            float64x2_t v298 = 0u;
            float64x2_t v299 = 0u;
            float64x2_t v300 = 0u;
            float64x2_t v301 = 0u;
            float64x2_t v314 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v317 = 0u;
          }
          uint64_t v191 = (const double *)((char *)v187 + v189);
          unsigned int v192 = v81[5];
          if (v81[5])
          {
            if (v192 < 0xF0)
            {
              if (v192 == 7)
              {
                float64x2_t v194 = vld1q_dup_f64(v191);
                float64x2_t v270 = v194;
                float64x2_t v271 = v194;
                float64x2_t v272 = v194;
                float64x2_t v273 = v194;
                float64x2_t v286 = v194;
                float64x2_t v287 = v194;
                float64x2_t v288 = v194;
                float64x2_t v289 = v194;
                float64x2_t v302 = v194;
                float64x2_t v303 = v194;
                float64x2_t v304 = v194;
                float64x2_t v305 = v194;
                float64x2_t v318 = v194;
                float64x2_t v319 = v194;
                uint64_t v193 = 8;
                float64x2_t v320 = v194;
                float64x2_t v321 = v194;
              }
              else
              {
                uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v270, 256, (uint64_t)v191, v192);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v270, 256, (unint64_t)v191, v192, v91);
              uint64_t v193 = 128;
            }
          }
          else
          {
            uint64_t v193 = 0;
            float64x2_t v272 = 0u;
            float64x2_t v273 = 0u;
            float64x2_t v270 = 0u;
            float64x2_t v271 = 0u;
            float64x2_t v286 = 0u;
            float64x2_t v287 = 0u;
            float64x2_t v288 = 0u;
            float64x2_t v289 = 0u;
            float64x2_t v302 = 0u;
            float64x2_t v303 = 0u;
            float64x2_t v304 = 0u;
            float64x2_t v305 = 0u;
            float64x2_t v318 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v321 = 0u;
          }
          unsigned int v195 = (const double *)((char *)v191 + v193);
          unsigned int v196 = v81[6];
          if (v81[6])
          {
            if (v196 < 0xF0)
            {
              if (v196 == 7)
              {
                float64x2_t v199 = vld1q_dup_f64(v195);
                float64x2_t v330 = v199;
                float64x2_t v331 = v199;
                float64x2_t v332 = v199;
                float64x2_t v333 = v199;
                float64x2_t v346 = v199;
                float64x2_t v347 = v199;
                float64x2_t v348 = v199;
                float64x2_t v349 = v199;
                float64x2_t v362 = v199;
                float64x2_t v363 = v199;
                float64x2_t v364 = v199;
                float64x2_t v365 = v199;
                float64x2_t v378 = v199;
                float64x2_t v379 = v199;
                float64x2_t v380 = v199;
                uint64_t v197 = 8;
                float64x2_t v381 = v199;
                unsigned int v198 = v81[7];
                if (!v81[7]) {
                  goto LABEL_207;
                }
              }
              else
              {
                uint64_t v197 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v330, 256, (uint64_t)v195, v196);
                unsigned int v198 = v81[7];
                if (!v81[7])
                {
LABEL_207:
                  float64x2_t v336 = 0u;
                  float64x2_t v337 = 0u;
                  float64x2_t v334 = 0u;
                  float64x2_t v335 = 0u;
                  float64x2_t v350 = 0u;
                  float64x2_t v351 = 0u;
                  float64x2_t v352 = 0u;
                  float64x2_t v353 = 0u;
                  float64x2_t v366 = 0u;
                  float64x2_t v367 = 0u;
                  float64x2_t v368 = 0u;
                  float64x2_t v369 = 0u;
                  float64x2_t v382 = 0u;
                  float64x2_t v383 = 0u;
                  float64x2_t v384 = 0u;
                  float64x2_t v385 = 0u;
                  goto LABEL_209;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v330, 256, (unint64_t)v195, v196, v91);
              uint64_t v197 = 128;
              unsigned int v198 = v81[7];
              if (!v81[7]) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            uint64_t v197 = 0;
            float64x2_t v332 = 0u;
            float64x2_t v333 = 0u;
            float64x2_t v330 = 0u;
            float64x2_t v331 = 0u;
            float64x2_t v346 = 0u;
            float64x2_t v347 = 0u;
            float64x2_t v348 = 0u;
            float64x2_t v349 = 0u;
            float64x2_t v362 = 0u;
            float64x2_t v363 = 0u;
            float64x2_t v364 = 0u;
            float64x2_t v365 = 0u;
            float64x2_t v378 = 0u;
            float64x2_t v379 = 0u;
            float64x2_t v380 = 0u;
            float64x2_t v381 = 0u;
            unsigned int v198 = v81[7];
            if (!v81[7]) {
              goto LABEL_207;
            }
          }
          int64x2_t v200 = (const double *)((char *)v195 + v197);
          if (v198 < 0xF0)
          {
            if (v198 == 7)
            {
              float64x2_t v201 = vld1q_dup_f64(v200);
              float64x2_t v334 = v201;
              float64x2_t v335 = v201;
              float64x2_t v336 = v201;
              float64x2_t v337 = v201;
              float64x2_t v350 = v201;
              float64x2_t v351 = v201;
              float64x2_t v352 = v201;
              float64x2_t v353 = v201;
              float64x2_t v366 = v201;
              float64x2_t v367 = v201;
              float64x2_t v368 = v201;
              float64x2_t v369 = v201;
              float64x2_t v382 = v201;
              float64x2_t v383 = v201;
              float64x2_t v384 = v201;
              float64x2_t v385 = v201;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v334, 256, (uint64_t)v200, v198);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v334, 256, (unint64_t)v200, v198, v91);
          }
LABEL_209:
          unsigned int v45 = v40 + 1;
          unint64_t v202 = v253;
          unsigned int v34 = v245;
          uint64_t v33 = v246;
          if (v253)
          {
            unint64_t v203 = 0;
            unint64_t v204 = (_OWORD *)&v258.f64[32 * (unint64_t)v251 + 2 * v252];
            unsigned int v205 = v254;
            do
            {
              if (v205)
              {
                uint64_t v206 = 0;
                uint64_t v207 = v249 + v250 * v203;
                do
                {
                  *(unsigned char *)(v207 + v206) = *((unsigned char *)v204 + v206);
                  ++v206;
                  unsigned int v205 = v254;
                }
                while (16 * (unint64_t)v254 > v206);
                unint64_t v202 = v253;
              }
              ++v203;
              v204 += 16;
            }
            while (v203 < v202);
          }
LABEL_29:
          BOOL v28 = v40 == v234 >> 4;
          unsigned int v40 = v45;
        }
        while (!v28);
        BOOL v28 = v24++ == v225;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v132 = v21;
  uint64_t v133 = v22;
  uint64_t v121 = v23;
  uint64_t v24 = v12;
  v159[208] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v137 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v120 = v14 + a10 - 1;
  unsigned int v122 = v120 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v140 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v131 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v130 = isLevelTiled;
  if (v25 <= v122)
  {
    unsigned int v129 = v16 + a9 - 1;
    unsigned int v119 = v16 >> 4;
    if (v16 >> 4 <= v129 >> 4)
    {
      unsigned int v116 = v20 - 1;
      unsigned int v118 = (v18 - 1) >> 3;
      int v138 = ((v20 - 1) & 0xF) + 1;
      unsigned int v139 = (v20 - 1) >> 4;
      int v117 = ((v18 - 1) & 7) + 1;
      uint64_t v123 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0xF00000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v128 = v36.i32[0] | v36.i32[1];
      int8x8_t v127 = v36;
      BOOL v125 = v36.i32[1] != 0;
      BOOL v126 = v36.i32[0] != 0;
      unint64_t v115 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (8 * v25) | 7;
        if (8 * v25 <= v137) {
          int v38 = v137;
        }
        else {
          int v38 = 8 * v25;
        }
        unsigned int v39 = v119;
        if (v120 < v37) {
          unsigned int v37 = v120;
        }
        int v124 = v38 - 8 * v25;
        int v135 = v37 - v38 + 1;
        unsigned int v136 = 8 * v25;
        int v40 = v117;
        if (v25 != v118) {
          int v40 = 8;
        }
        unsigned int v141 = v40;
        uint64_t v134 = v121 + (v38 - v137) * a11;
        do
        {
          unsigned int v41 = 16 * v39;
          unsigned int v42 = 16 * (v39 + 1) - 1;
          if (16 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 16 * v39;
          }
          if (v129 < v42) {
            unsigned int v42 = v129;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v139) {
            unsigned int v45 = v138;
          }
          else {
            unsigned int v45 = 16;
          }
          BOOL v46 = 1;
          if (v136 >= v137 && v41 >= v16)
          {
            int v47 = v138;
            if (v39 != v139) {
              int v47 = 16;
            }
            BOOL v46 = v44 != v47 || v135 != v141;
          }
          if (v130)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v115 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v104 = (v70 >> 4) - 1;
            if (v72) {
              unsigned int v105 = 0;
            }
            else {
              unsigned int v105 = 32 - __clz(~(-1 << -(char)__clz(v104)));
            }
            unsigned int v106 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v107 = 0;
              if (v105) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
              if (v107 | v105)
              {
LABEL_121:
                int v108 = 0;
                uint64_t v109 = 0;
                int v110 = v39 & v104;
                int v111 = v25 & v106;
                BOOL v112 = v107 != 0;
                BOOL v113 = v105 != 0;
                int v114 = 1;
                do
                {
                  --v107;
                  if (v112) {
                    v109 |= (unint64_t)(v114 & v111) << v108++;
                  }
                  else {
                    unsigned int v107 = 0;
                  }
                  --v105;
                  if (v113) {
                    v109 |= (unint64_t)(v114 & v110) << v108++;
                  }
                  else {
                    unsigned int v105 = 0;
                  }
                  v114 *= 2;
                  --v108;
                  BOOL v113 = v105 != 0;
                  BOOL v112 = v107 != 0;
                }
                while (v105 | v107);
                goto LABEL_133;
              }
            }
            uint64_t v109 = 0;
LABEL_133:
            unint64_t v56 = ((unint64_t)(v41 / v70 + v136 / v74 * ((v70 + v116) / v70)) << 14) + (v109 << 11);
            goto LABEL_60;
          }
          if (v128)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v125;
            BOOL v53 = v126;
            __int32 v54 = v127.i32[0];
            __int32 v55 = v127.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 15;
          if (v58 < 0x20) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 4) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          unsigned int v75 = (unsigned char *)(v132 + v56);
          if (v131)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v132 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v140;
            unsigned int v75 = __dst;
          }
          char v78 = (unsigned __int8 *)(v133 + 8 * v64);
          uint64_t v79 = v16;
          uint64_t v80 = v134 + 32 * (v43 - v16);
          char v81 = v45 < 0x10 || v46;
          if ((v81 & 1) == 0 && v141 > 7)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 128, a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v123, a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v123 + 128, a11, v85, v78[3], v82);
            unint64_t v87 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 256, a11, v86, v78[4], v82);
            unint64_t v88 = v87
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 384, a11, v87, v78[5], v82);
            uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v123 + 256, a11, v88, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v123 + 384, a11, v88 + v89, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v149 = v45;
          char v150 = v141;
          unsigned int v145 = v124;
          unsigned int v146 = v43 - v41;
          block[6] = v78;
          uint64_t v143 = v80;
          uint64_t v144 = a11;
          unsigned int v147 = v135;
          unsigned int v148 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v90 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v91 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v152, 512, (unint64_t)v75, *v78, v90)];
          unint64_t v92 = v91
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v153, 512, v91, v78[1], v90);
          unint64_t v93 = v92
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 512, v92, v78[2], v90);
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v157, 512, v93, v78[3], v90);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v154, 512, v94, v78[4], v90);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v155, 512, v95, v78[5], v90);
          uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v158, 512, v96, v78[6], v90);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v159, 512, v96 + v97, v78[7], v90);
          unint64_t v98 = v147;
          uint64_t v16 = v79;
          if (v147)
          {
            unint64_t v99 = 0;
            int64x2_t v100 = &v152[512 * (unint64_t)v145 + 32 * v146];
            unsigned int v101 = v148;
            do
            {
              if (v101)
              {
                uint64_t v102 = 0;
                uint64_t v103 = v143 + v144 * v99;
                do
                {
                  *(unsigned char *)(v103 + v102) = v100[v102];
                  ++v102;
                  unsigned int v101 = v148;
                }
                while (32 * (unint64_t)v148 > v102);
                unint64_t v98 = v147;
              }
              ++v99;
              v100 += 512;
            }
            while (v99 < v98);
          }
LABEL_28:
          BOOL v29 = v39++ == v129 >> 4;
          uint64_t v34 = v140;
        }
        while (!v29);
        BOOL v29 = v25++ == v122;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v282 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v253 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v234 = a8 + a10 - 1;
  unsigned int v236 = v234 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v247 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v17 <= v236)
  {
    unsigned int v245 = a7 + a9 - 1;
    if (a7 >> 3 <= v245 >> 3)
    {
      unsigned int v25 = (a5 - 1) >> 3;
      unsigned int v233 = (a6 - 1) >> 3;
      int v254 = ((a5 - 1) & 7) + 1;
      unsigned int v231 = a5 - 1;
      int v232 = ((a6 - 1) & 7) + 1;
      uint64_t v237 = 4 * a11;
      uint64_t v238 = 2 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v26, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v26));
      __int32 v244 = v27.i32[0] | v27.i32[1];
      int8x8_t v242 = v27;
      BOOL v240 = v27.i32[0] != 0;
      BOOL v241 = v27.i32[1] != 0;
      unint64_t v230 = 8 * v19 * (unint64_t)v18;
      unsigned int v243 = v25;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v253) {
          int v29 = v253;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = a7 >> 3;
        if (v234 < v28) {
          unsigned int v28 = v234;
        }
        unsigned int v252 = 8 * v17;
        int v239 = v29 - 8 * v17;
        int v251 = v28 - v29 + 1;
        int v31 = v232;
        if (v17 != v233) {
          int v31 = 8;
        }
        unsigned int v255 = v31;
        uint64_t v250 = a2 + (v29 - v253) * a11;
        do
        {
          unsigned int v33 = 8 * v30;
          unsigned int v34 = 8 * (v30 + 1) - 1;
          if (8 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v30;
          }
          if (v245 < v34) {
            unsigned int v34 = a7 + a9 - 1;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v25) {
            unsigned int v37 = v254;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v252 >= v253 && v33 >= a7)
          {
            int v39 = v254;
            if (v30 != v25) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v251 != v255;
          }
          if (isLevelTiled)
          {
            unsigned int v60 = 0;
            uint64_t v61 = v230 >> (*(unsigned char *)(a1 + 57) != 0);
            char v62 = 1;
            if (v61 > 127)
            {
              if (v61 > 511)
              {
                if (v61 == 512)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 16;
                  unsigned int v64 = 16;
                }
                else
                {
                  char v63 = 1;
                  unsigned int v64 = 0;
                  if (v61 == 1024)
                  {
                    char v62 = 0;
                    unsigned int v64 = 8;
                    unsigned int v60 = 16;
                  }
                }
              }
              else if (v61 == 128)
              {
                char v62 = 0;
                char v63 = 0;
                unsigned int v60 = 32;
                unsigned int v64 = 32;
              }
              else
              {
                char v63 = 1;
                unsigned int v64 = 0;
                if (v61 == 256)
                {
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 16;
                  unsigned int v60 = 32;
                }
              }
            }
            else
            {
              char v63 = 1;
              unsigned int v64 = 0;
              switch(v61)
              {
                case 4:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 128;
                  unsigned int v60 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 128;
                  unsigned int v64 = 128;
                  break;
                case 16:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v64 = 64;
                  unsigned int v60 = 128;
                  break;
                case 32:
                  char v62 = 0;
                  char v63 = 0;
                  unsigned int v60 = 64;
                  unsigned int v64 = 64;
                  break;
                default:
                  if (v61 == 64)
                  {
                    char v62 = 0;
                    char v63 = 0;
                    unsigned int v64 = 32;
                    unsigned int v60 = 64;
                  }
                  break;
              }
            }
            unsigned int v219 = (v60 >> 3) - 1;
            if (v62) {
              unsigned int v220 = 0;
            }
            else {
              unsigned int v220 = 32 - __clz(~(-1 << -(char)__clz(v219)));
            }
            unsigned int v221 = (v64 >> 3) - 1;
            if (v63)
            {
              unsigned int v222 = 0;
              if (v220) {
                goto LABEL_264;
              }
            }
            else
            {
              unsigned int v222 = 32 - __clz(~(-1 << -(char)__clz(v221)));
              if (v222 | v220)
              {
LABEL_264:
                int v223 = 0;
                uint64_t v224 = 0;
                int v225 = v30 & v219;
                int v226 = v17 & v221;
                BOOL v227 = v220 != 0;
                BOOL v228 = v222 != 0;
                int v229 = 1;
                do
                {
                  --v220;
                  if (v227) {
                    v224 |= (unint64_t)(v229 & v225) << v223++;
                  }
                  else {
                    unsigned int v220 = 0;
                  }
                  --v222;
                  if (v228) {
                    v224 |= (unint64_t)(v229 & v226) << v223++;
                  }
                  else {
                    unsigned int v222 = 0;
                  }
                  v229 *= 2;
                  --v223;
                  BOOL v228 = v222 != 0;
                  BOOL v227 = v220 != 0;
                }
                while (v222 | v220);
                goto LABEL_276;
              }
            }
            uint64_t v224 = 0;
LABEL_276:
            unint64_t v48 = ((unint64_t)(v33 / v60 + v252 / v64 * ((v60 + v231) / v60)) << 14) + (v224 << 7);
            goto LABEL_60;
          }
          if (v244)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v240;
            BOOL v45 = v241;
            __int32 v47 = v242.i32[0];
            __int32 v46 = v242.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 7;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_82:
              uint64_t v56 = 0;
              goto LABEL_83;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_82;
            }
          }
          int v55 = 0;
          uint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            if (v57) {
              v56 |= (unint64_t)(v59 & v30) << v55++;
            }
            else {
              unsigned int v51 = 0;
            }
            --v54;
            if (v58) {
              v56 |= (unint64_t)(v59 & v17) << v55++;
            }
            else {
              unsigned int v54 = 0;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_83:
          BOOL v65 = (_OWORD *)(a3 + v48);
          if (v247)
          {
            long long v66 = v65[13];
            v265[12] = v65[12];
            v265[13] = v66;
            long long v67 = v65[15];
            v265[14] = v65[14];
            v265[15] = v67;
            long long v68 = v65[9];
            v265[8] = v65[8];
            v265[9] = v68;
            long long v69 = v65[11];
            v265[10] = v65[10];
            v265[11] = v69;
            long long v70 = v65[5];
            v265[4] = v65[4];
            v265[5] = v70;
            long long v71 = v65[7];
            v265[6] = v65[6];
            v265[7] = v71;
            long long v72 = v65[1];
            v265[0] = *v65;
            v265[1] = v72;
            long long v73 = v65[2];
            long long v74 = v65[3];
            BOOL v65 = v265;
            v265[2] = v73;
            v265[3] = v74;
          }
          unsigned int v75 = (unsigned __int8 *)(a4 + 8 * v56);
          int v76 = (int8x16_t *)(v250 + 4 * (v35 - a7));
          char v77 = v37 < 8 || v38;
          if ((v77 & 1) == 0 && v255 > 7)
          {
            uint64_t v78 = *(void *)(a1 + 208);
            int v79 = *(_DWORD *)(v78 + 52);
            unsigned int v80 = *v75;
            if (*v75)
            {
              if (v80 < 0xF0)
              {
                if (v80 == 31)
                {
                  uint64_t v89 = *((void *)v65 + 1);
                  uint64_t v90 = *((void *)v65 + 2);
                  uint64_t v91 = *((void *)v65 + 3);
                  v76->i64[0] = *(void *)v65;
                  v76->i64[1] = v90;
                  unint64_t v92 = (uint64_t *)((char *)v76->i64 + a11);
                  *unint64_t v92 = v89;
                  v92[1] = v91;
                  uint64_t v81 = 32;
                }
                else if (v80 == 96)
                {
                  int8x16_t v87 = vld1q_dup_s8((const char *)v65);
                  *int v76 = v87;
                  *(int8x16_t *)((char *)v76 + a11) = v87;
                  uint64_t v81 = 1;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v76, a11, (uint64_t)v65, v80);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v76, a11, (uint64_t)v65, v80, *(_DWORD *)(v78 + 52));
                uint64_t v81 = 16;
              }
            }
            else
            {
              uint64_t v81 = 0;
              v76->i64[0] = 0;
              v76->i64[1] = 0;
              unint64_t v86 = (uint64_t *)((char *)v76->i64 + a11);
              *unint64_t v86 = 0;
              v86[1] = 0;
            }
            uint64_t v93 = (uint64_t)v65 + v81;
            unint64_t v94 = (int8x16_t *)((char *)v76 + v238);
            unsigned int v95 = v75[1];
            if (v75[1])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 31)
                {
                  uint64_t v99 = *(void *)(v93 + 8);
                  uint64_t v100 = *(void *)(v93 + 16);
                  uint64_t v101 = *(void *)(v93 + 24);
                  v94->i64[0] = *(void *)v93;
                  v94->i64[1] = v100;
                  uint64_t v102 = (uint64_t *)((char *)v94->i64 + a11);
                  *uint64_t v102 = v99;
                  v102[1] = v101;
                  uint64_t v96 = 32;
                }
                else if (v95 == 96)
                {
                  int8x16_t v98 = vld1q_dup_s8((const char *)v93);
                  *unint64_t v94 = v98;
                  *(int8x16_t *)((char *)v94 + a11) = v98;
                  uint64_t v96 = 1;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((__int32 *)((char *)v76->i32 + v238), a11, v93, v95);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v76->i8[v238], a11, v93, v95, v79);
                uint64_t v96 = 16;
              }
            }
            else
            {
              uint64_t v96 = 0;
              v94->i64[0] = 0;
              v94->i64[1] = 0;
              uint64_t v97 = (uint64_t *)((char *)v94->i64 + a11);
              *uint64_t v97 = 0;
              v97[1] = 0;
            }
            uint64_t v103 = v93 + v96;
            unsigned int v104 = v76 + 1;
            unsigned int v105 = v75[2];
            if (v75[2])
            {
              if (v105 < 0xF0)
              {
                if (v105 == 31)
                {
                  uint64_t v109 = *(void *)(v103 + 8);
                  uint64_t v110 = *(void *)(v103 + 16);
                  uint64_t v111 = *(void *)(v103 + 24);
                  v76[1].i64[0] = *(void *)v103;
                  v76[1].i64[1] = v110;
                  BOOL v112 = (uint64_t *)((char *)v104->i64 + a11);
                  *BOOL v112 = v109;
                  v112[1] = v111;
                  uint64_t v106 = 32;
                }
                else if (v105 == 96)
                {
                  int8x16_t v108 = vld1q_dup_s8((const char *)v103);
                  *unsigned int v104 = v108;
                  *(int8x16_t *)((char *)v104 + a11) = v108;
                  uint64_t v106 = 1;
                }
                else
                {
                  uint64_t v106 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v104, a11, v103, v105);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v104, a11, v103, v105, v79);
                uint64_t v106 = 16;
              }
            }
            else
            {
              uint64_t v106 = 0;
              v104->i64[0] = 0;
              v76[1].i64[1] = 0;
              unsigned int v107 = (uint64_t *)((char *)v104->i64 + a11);
              *unsigned int v107 = 0;
              v107[1] = 0;
            }
            uint64_t v113 = v103 + v106;
            int v114 = v94 + 1;
            unsigned int v115 = v75[3];
            if (v75[3])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 31)
                {
                  uint64_t v119 = *(void *)(v113 + 8);
                  uint64_t v120 = *(void *)(v113 + 16);
                  uint64_t v121 = *(void *)(v113 + 24);
                  v94[1].i64[0] = *(void *)v113;
                  v94[1].i64[1] = v120;
                  unsigned int v122 = (uint64_t *)((char *)v114->i64 + a11);
                  *unsigned int v122 = v119;
                  v122[1] = v121;
                  uint64_t v116 = 32;
                }
                else if (v115 == 96)
                {
                  int8x16_t v118 = vld1q_dup_s8((const char *)v113);
                  *int v114 = v118;
                  *(int8x16_t *)((char *)v114 + a11) = v118;
                  uint64_t v116 = 1;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v114, a11, v113, v115);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v114, a11, v113, v115, v79);
                uint64_t v116 = 16;
              }
            }
            else
            {
              uint64_t v116 = 0;
              v114->i64[0] = 0;
              v94[1].i64[1] = 0;
              int v117 = (uint64_t *)((char *)v114->i64 + a11);
              *int v117 = 0;
              v117[1] = 0;
            }
            uint64_t v123 = v113 + v116;
            int v124 = (int8x16_t *)((char *)v76 + v237);
            unsigned int v125 = v75[4];
            if (v75[4])
            {
              if (v125 < 0xF0)
              {
                if (v125 == 31)
                {
                  uint64_t v129 = *(void *)(v123 + 8);
                  uint64_t v130 = *(void *)(v123 + 16);
                  uint64_t v131 = *(void *)(v123 + 24);
                  v124->i64[0] = *(void *)v123;
                  v124->i64[1] = v130;
                  uint64_t v132 = (uint64_t *)((char *)v124->i64 + a11);
                  *uint64_t v132 = v129;
                  v132[1] = v131;
                  uint64_t v126 = 32;
                }
                else if (v125 == 96)
                {
                  int8x16_t v128 = vld1q_dup_s8((const char *)v123);
                  *int v124 = v128;
                  *(int8x16_t *)((char *)v124 + a11) = v128;
                  uint64_t v126 = 1;
                }
                else
                {
                  uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v76->i32[(unint64_t)v237 / 4], a11, v123, v125);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v76->i8[v237], a11, v123, v125, v79);
                uint64_t v126 = 16;
              }
            }
            else
            {
              uint64_t v126 = 0;
              v124->i64[0] = 0;
              v124->i64[1] = 0;
              int8x8_t v127 = (uint64_t *)((char *)v124->i64 + a11);
              *int8x8_t v127 = 0;
              v127[1] = 0;
            }
            uint64_t v133 = v123 + v126;
            uint64_t v134 = (int8x16_t *)((char *)v76 + 6 * a11);
            unsigned int v135 = v75[5];
            if (v75[5])
            {
              if (v135 < 0xF0)
              {
                if (v135 == 31)
                {
                  uint64_t v139 = *(void *)(v133 + 8);
                  uint64_t v140 = *(void *)(v133 + 16);
                  uint64_t v141 = *(void *)(v133 + 24);
                  v134->i64[0] = *(void *)v133;
                  v134->i64[1] = v140;
                  float64x2_t v142 = (uint64_t *)((char *)v134->i64 + a11);
                  *float64x2_t v142 = v139;
                  v142[1] = v141;
                  uint64_t v136 = 32;
                }
                else if (v135 == 96)
                {
                  int8x16_t v138 = vld1q_dup_s8((const char *)v133);
                  *uint64_t v134 = v138;
                  *(int8x16_t *)((char *)v134 + a11) = v138;
                  uint64_t v136 = 1;
                }
                else
                {
                  uint64_t v136 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v134, a11, v133, v135);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v134, a11, v133, v135, v79);
                uint64_t v136 = 16;
              }
            }
            else
            {
              uint64_t v136 = 0;
              v134->i64[0] = 0;
              v134->i64[1] = 0;
              unsigned int v137 = (uint64_t *)((char *)v134->i64 + a11);
              *unsigned int v137 = 0;
              v137[1] = 0;
            }
            uint64_t v143 = v133 + v136;
            uint64_t v144 = v124 + 1;
            unsigned int v145 = v75[6];
            if (v75[6])
            {
              if (v145 < 0xF0)
              {
                if (v145 == 31)
                {
                  uint64_t v149 = *(void *)(v143 + 8);
                  uint64_t v150 = *(void *)(v143 + 16);
                  uint64_t v151 = *(void *)(v143 + 24);
                  v124[1].i64[0] = *(void *)v143;
                  v124[1].i64[1] = v150;
                  int v152 = (uint64_t *)((char *)v144->i64 + a11);
                  *int v152 = v149;
                  v152[1] = v151;
                  uint64_t v146 = 32;
                }
                else if (v145 == 96)
                {
                  int8x16_t v148 = vld1q_dup_s8((const char *)v143);
                  *uint64_t v144 = v148;
                  *(int8x16_t *)((char *)v144 + a11) = v148;
                  uint64_t v146 = 1;
                }
                else
                {
                  uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v144, a11, v143, v145);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v144, a11, v143, v145, v79);
                uint64_t v146 = 16;
              }
            }
            else
            {
              uint64_t v146 = 0;
              v144->i64[0] = 0;
              v124[1].i64[1] = 0;
              unsigned int v147 = (uint64_t *)((char *)v144->i64 + a11);
              *unsigned int v147 = 0;
              v147[1] = 0;
            }
            uint64_t v153 = v134 + 1;
            unsigned int v154 = v75[7];
            if (v75[7])
            {
              uint64_t v155 = v143 + v146;
              if (v154 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v153, a11, v155, v154, v79);
                goto LABEL_165;
              }
              if (v154 == 31)
              {
                uint64_t v158 = *(void *)(v155 + 8);
                uint64_t v159 = *(void *)(v155 + 16);
                uint64_t v160 = *(void *)(v155 + 24);
                v134[1].i64[0] = *(void *)v155;
                v134[1].i64[1] = v159;
                unsigned int v161 = (uint64_t *)((char *)v153->i64 + a11);
                *unsigned int v161 = v158;
                v161[1] = v160;
                unsigned int v25 = v243;
              }
              else
              {
                unsigned int v25 = v243;
                if (v154 == 96)
                {
                  int8x16_t v157 = vld1q_dup_s8((const char *)v155);
                  *uint64_t v153 = v157;
                  *(int8x16_t *)((char *)v153 + a11) = v157;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v153, a11, v155, v154);
                }
              }
            }
            else
            {
              v153->i64[0] = 0;
              v134[1].i64[1] = 0;
              uint64_t v156 = (uint64_t *)((char *)v153->i64 + a11);
              *uint64_t v156 = 0;
              v156[1] = 0;
LABEL_165:
              unsigned int v25 = v243;
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v65;
          char v263 = v37;
          char v264 = v255;
          int v259 = v239;
          unsigned int v260 = v35 - v33;
          block[6] = a4 + 8 * v56;
          uint64_t v257 = v250 + 4 * (v35 - a7);
          uint64_t v258 = a11;
          unsigned int v261 = v251;
          unsigned int v262 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
            goto LABEL_27;
          }
          uint64_t v82 = *(void *)(a1 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v75;
          if (*v75)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 31)
              {
                uint64_t v162 = *((void *)v65 + 1);
                uint64_t v163 = *((void *)v65 + 2);
                uint64_t v164 = *((void *)v65 + 3);
                v266.i64[0] = *(void *)v65;
                v266.i64[1] = v163;
                v268.i64[0] = v162;
                v268.i64[1] = v164;
                uint64_t v85 = 32;
              }
              else if (v84 == 96)
              {
                int8x16_t v88 = vld1q_dup_s8((const char *)v65);
                int8x16_t v266 = v88;
                int8x16_t v268 = v88;
                uint64_t v85 = 1;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v266, 32, (uint64_t)v65, v84);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v266, 32, (uint64_t)v65, v84, *(_DWORD *)(v82 + 52));
              uint64_t v85 = 16;
            }
          }
          else
          {
            uint64_t v85 = 0;
            int8x16_t v266 = 0uLL;
            int8x16_t v268 = 0uLL;
          }
          uint64_t v165 = (uint64_t)v65 + v85;
          unsigned int v166 = v75[1];
          if (v75[1])
          {
            if (v166 < 0xF0)
            {
              if (v166 == 31)
              {
                uint64_t v169 = *(void *)(v165 + 8);
                uint64_t v170 = *(void *)(v165 + 16);
                uint64_t v171 = *(void *)(v165 + 24);
                v270.i64[0] = *(void *)v165;
                v270.i64[1] = v170;
                v272.i64[0] = v169;
                v272.i64[1] = v171;
                uint64_t v167 = 32;
              }
              else if (v166 == 96)
              {
                int8x16_t v168 = vld1q_dup_s8((const char *)v165);
                int8x16_t v270 = v168;
                int8x16_t v272 = v168;
                uint64_t v167 = 1;
              }
              else
              {
                uint64_t v167 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v270, 32, v165, v166);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v270, 32, v165, v166, v83);
              uint64_t v167 = 16;
            }
          }
          else
          {
            uint64_t v167 = 0;
            int8x16_t v270 = 0uLL;
            int8x16_t v272 = 0uLL;
          }
          uint64_t v172 = v165 + v167;
          unsigned int v173 = v75[2];
          if (v75[2])
          {
            if (v173 < 0xF0)
            {
              if (v173 == 31)
              {
                uint64_t v176 = *(void *)(v172 + 8);
                uint64_t v177 = *(void *)(v172 + 16);
                uint64_t v178 = *(void *)(v172 + 24);
                v267.i64[0] = *(void *)v172;
                v267.i64[1] = v177;
                v269.i64[0] = v176;
                v269.i64[1] = v178;
                uint64_t v174 = 32;
              }
              else if (v173 == 96)
              {
                int8x16_t v175 = vld1q_dup_s8((const char *)v172);
                int8x16_t v267 = v175;
                int8x16_t v269 = v175;
                uint64_t v174 = 1;
              }
              else
              {
                uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v267, 32, v172, v173);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v267, 32, v172, v173, v83);
              uint64_t v174 = 16;
            }
          }
          else
          {
            uint64_t v174 = 0;
            int8x16_t v267 = 0uLL;
            int8x16_t v269 = 0uLL;
          }
          uint64_t v179 = v172 + v174;
          unsigned int v180 = v75[3];
          if (v75[3])
          {
            if (v180 < 0xF0)
            {
              if (v180 == 31)
              {
                uint64_t v183 = *(void *)(v179 + 8);
                uint64_t v184 = *(void *)(v179 + 16);
                uint64_t v185 = *(void *)(v179 + 24);
                v271.i64[0] = *(void *)v179;
                v271.i64[1] = v184;
                v273.i64[0] = v183;
                v273.i64[1] = v185;
                uint64_t v181 = 32;
              }
              else if (v180 == 96)
              {
                int8x16_t v182 = vld1q_dup_s8((const char *)v179);
                int8x16_t v271 = v182;
                int8x16_t v273 = v182;
                uint64_t v181 = 1;
              }
              else
              {
                uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v271, 32, v179, v180);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v271, 32, v179, v180, v83);
              uint64_t v181 = 16;
            }
          }
          else
          {
            uint64_t v181 = 0;
            int8x16_t v271 = 0uLL;
            int8x16_t v273 = 0uLL;
          }
          uint64_t v186 = v179 + v181;
          unsigned int v187 = v75[4];
          if (v75[4])
          {
            if (v187 < 0xF0)
            {
              if (v187 == 31)
              {
                uint64_t v190 = *(void *)(v186 + 8);
                uint64_t v191 = *(void *)(v186 + 16);
                uint64_t v192 = *(void *)(v186 + 24);
                v274.i64[0] = *(void *)v186;
                v274.i64[1] = v191;
                v276.i64[0] = v190;
                v276.i64[1] = v192;
                uint64_t v188 = 32;
              }
              else if (v187 == 96)
              {
                int8x16_t v189 = vld1q_dup_s8((const char *)v186);
                int8x16_t v274 = v189;
                int8x16_t v276 = v189;
                uint64_t v188 = 1;
              }
              else
              {
                uint64_t v188 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v274, 32, v186, v187);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v274, 32, v186, v187, v83);
              uint64_t v188 = 16;
            }
          }
          else
          {
            uint64_t v188 = 0;
            int8x16_t v274 = 0uLL;
            int8x16_t v276 = 0uLL;
          }
          uint64_t v193 = v186 + v188;
          unsigned int v194 = v75[5];
          if (v75[5])
          {
            if (v194 < 0xF0)
            {
              if (v194 == 31)
              {
                uint64_t v197 = *(void *)(v193 + 8);
                uint64_t v198 = *(void *)(v193 + 16);
                uint64_t v199 = *(void *)(v193 + 24);
                v278.i64[0] = *(void *)v193;
                v278.i64[1] = v198;
                v280.i64[0] = v197;
                v280.i64[1] = v199;
                uint64_t v195 = 32;
              }
              else if (v194 == 96)
              {
                int8x16_t v196 = vld1q_dup_s8((const char *)v193);
                int8x16_t v278 = v196;
                int8x16_t v280 = v196;
                uint64_t v195 = 1;
              }
              else
              {
                uint64_t v195 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v278, 32, v193, v194);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v278, 32, v193, v194, v83);
              uint64_t v195 = 16;
            }
          }
          else
          {
            uint64_t v195 = 0;
            int8x16_t v278 = 0uLL;
            int8x16_t v280 = 0uLL;
          }
          uint64_t v200 = v193 + v195;
          unsigned int v201 = v75[6];
          if (v75[6])
          {
            if (v201 < 0xF0)
            {
              if (v201 == 31)
              {
                uint64_t v205 = *(void *)(v200 + 8);
                uint64_t v206 = *(void *)(v200 + 16);
                uint64_t v207 = *(void *)(v200 + 24);
                v275.i64[0] = *(void *)v200;
                v275.i64[1] = v206;
                v277.i64[0] = v205;
                v277.i64[1] = v207;
                uint64_t v202 = 32;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_235;
                }
              }
              else if (v201 == 96)
              {
                int8x16_t v204 = vld1q_dup_s8((const char *)v200);
                int8x16_t v275 = v204;
                int8x16_t v277 = v204;
                uint64_t v202 = 1;
                unsigned int v203 = v75[7];
                if (!v75[7]) {
                  goto LABEL_235;
                }
              }
              else
              {
                uint64_t v202 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v275, 32, v200, v201);
                unsigned int v203 = v75[7];
                if (!v75[7])
                {
LABEL_235:
                  int8x16_t v279 = 0uLL;
                  int8x16_t v281 = 0uLL;
                  goto LABEL_236;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v275, 32, v200, v201, v83);
              uint64_t v202 = 16;
              unsigned int v203 = v75[7];
              if (!v75[7]) {
                goto LABEL_235;
              }
            }
          }
          else
          {
            uint64_t v202 = 0;
            int8x16_t v275 = 0uLL;
            int8x16_t v277 = 0uLL;
            unsigned int v203 = v75[7];
            if (!v75[7]) {
              goto LABEL_235;
            }
          }
          uint64_t v208 = v200 + v202;
          if (v203 >= 0xF0)
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v279, 32, v208, v203, v83);
LABEL_236:
            unsigned int v25 = v243;
            goto LABEL_237;
          }
          if (v203 == 31)
          {
            uint64_t v216 = *(void *)(v208 + 8);
            uint64_t v217 = *(void *)(v208 + 16);
            uint64_t v218 = *(void *)(v208 + 24);
            v279.i64[0] = *(void *)v208;
            v279.i64[1] = v217;
            v281.i64[0] = v216;
            v281.i64[1] = v218;
            unsigned int v25 = v243;
          }
          else
          {
            unsigned int v25 = v243;
            if (v203 == 96)
            {
              int8x16_t v209 = vld1q_dup_s8((const char *)v208);
              int8x16_t v279 = v209;
              int8x16_t v281 = v209;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v279, 32, v208, v203);
            }
          }
LABEL_237:
          unsigned int v32 = v30 + 1;
          unint64_t v210 = v261;
          if (v261)
          {
            unint64_t v211 = 0;
            int v212 = &v266.i8[32 * v259 + 4 * v260];
            unsigned int v213 = v262;
            do
            {
              if (v213)
              {
                uint64_t v214 = 0;
                uint64_t v215 = v257 + v258 * v211;
                do
                {
                  *(unsigned char *)(v215 + v214) = v212[v214];
                  ++v214;
                  unsigned int v213 = v262;
                }
                while (4 * (unint64_t)v262 > v214);
                unint64_t v210 = v261;
              }
              ++v211;
              v212 += 32;
            }
            while (v211 < v210);
          }
LABEL_28:
          BOOL v21 = v30 == v245 >> 3;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v236;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v154[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v132 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v114 = a8 + a10 - 1;
  unsigned int v116 = v114 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v135 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v126 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v125 = isLevelTiled;
  if (v17 <= v116)
  {
    unsigned int v124 = a7 + a9 - 1;
    unsigned int v113 = a7 >> 3;
    if (a7 >> 3 <= v124 >> 3)
    {
      unsigned int v110 = a5 - 1;
      unsigned int v112 = (a6 - 1) >> 3;
      int v133 = ((a5 - 1) & 7) + 1;
      unsigned int v134 = (a5 - 1) >> 3;
      int v111 = ((a6 - 1) & 7) + 1;
      uint64_t v117 = 4 * a11;
      uint64_t v118 = 2 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v27));
      __int32 v123 = v28.i32[0] | v28.i32[1];
      BOOL v121 = v28.i32[1] != 0;
      int8x8_t v122 = v28;
      BOOL v120 = v28.i32[0] != 0;
      unint64_t v109 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v132) {
          int v30 = v132;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v113;
        if (v114 < v29) {
          unsigned int v29 = v114;
        }
        int v119 = v30 - 8 * v17;
        int v130 = v29 - v30 + 1;
        unsigned int v131 = 8 * v17;
        int v32 = v111;
        if (v17 != v112) {
          int v32 = 8;
        }
        unsigned int v136 = v32;
        uint64_t v129 = a2 + (v30 - v132) * a11;
        do
        {
          unsigned int v33 = 8 * v31;
          unsigned int v34 = 8 * (v31 + 1) - 1;
          if (8 * v31 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v31;
          }
          if (v124 < v34) {
            unsigned int v34 = v124;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v134) {
            unsigned int v37 = v133;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v131 >= v132 && v33 >= a7)
          {
            int v39 = v133;
            if (v31 != v134) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v130 != v136;
          }
          if (v125)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v109 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v98 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v99 = 0;
            }
            else {
              unsigned int v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
            }
            unsigned int v100 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v101 = 0;
              if (v99) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
              if (v101 | v99)
              {
LABEL_121:
                int v102 = 0;
                uint64_t v103 = 0;
                int v104 = v31 & v98;
                int v105 = v17 & v100;
                BOOL v106 = v99 != 0;
                BOOL v107 = v101 != 0;
                int v108 = 1;
                do
                {
                  --v99;
                  if (v106) {
                    v103 |= (unint64_t)(v108 & v104) << v102++;
                  }
                  else {
                    unsigned int v99 = 0;
                  }
                  --v101;
                  if (v107) {
                    v103 |= (unint64_t)(v108 & v105) << v102++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v108 *= 2;
                  --v102;
                  BOOL v107 = v101 != 0;
                  BOOL v106 = v99 != 0;
                }
                while (v101 | v99);
                goto LABEL_133;
              }
            }
            uint64_t v103 = 0;
LABEL_133:
            unint64_t v48 = ((unint64_t)(v33 / v62 + v131 / v66 * ((v62 + v110) / v62)) << 14) + (v103 << 9);
            goto LABEL_60;
          }
          if (v123)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v120;
            BOOL v45 = v121;
            __int32 v47 = v122.i32[0];
            __int32 v46 = v122.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_86:
              unint64_t v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          int v55 = 0;
          unint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            BOOL v60 = !v57;
            if (v57)
            {
              unint64_t v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              unsigned int v51 = 0;
              unint64_t v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              unsigned int v54 = 0;
              unint64_t v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          long long v67 = (unsigned char *)(a3 + v48);
          if (v126)
          {
            int v68 = v36;
            unsigned int v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            unsigned int v37 = v69;
            int v36 = v68;
            uint64_t v26 = v135;
            long long v67 = __dst;
          }
          long long v70 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v71 = a7;
          uint64_t v72 = v129 + 16 * (v35 - a7);
          char v73 = v37 < 8 || v38;
          if ((v73 & 1) == 0 && v136 > 7)
          {
            int v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            uint64_t v75 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, (uint64_t)v67, *v70, v74)];
            uint64_t v76 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v118, a11, v75, v70[1], v74);
            uint64_t v77 = v76
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 64, a11, v76, v70[2], v74);
            uint64_t v78 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v118 + 64, a11, v77, v70[3], v74);
            uint64_t v79 = v72 + v117;
            uint64_t v80 = v78
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v117, a11, v78, v70[4], v74);
            uint64_t v81 = v72 + 6 * a11;
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81, a11, v80, v70[5], v74);
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v79 + 64, a11, v82, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81 + 64, a11, v82 + v83, v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          char v144 = v37;
          char v145 = v136;
          unsigned int v140 = v119;
          unsigned int v141 = v35 - v33;
          block[6] = v70;
          uint64_t v138 = v72;
          uint64_t v139 = a11;
          unsigned int v142 = v130;
          unsigned int v143 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          int v84 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          uint64_t v85 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v147, 128, (uint64_t)v67, *v70, v84)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v149, 128, v85, v70[1], v84);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v148, 128, v86, v70[2], v84);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v150, 128, v87, v70[3], v84);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v151, 128, v88, v70[4], v84);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v153, 128, v89, v70[5], v84);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v152, 128, v90, v70[6], v84);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v154, 128, v90 + v91, v70[7], v84);
          unint64_t v92 = v142;
          a7 = v71;
          if (v142)
          {
            unint64_t v93 = 0;
            unint64_t v94 = &v147[128 * (unint64_t)v140 + 16 * v141];
            unsigned int v95 = v143;
            do
            {
              if (v95)
              {
                uint64_t v96 = 0;
                uint64_t v97 = v138 + v139 * v93;
                do
                {
                  *(unsigned char *)(v97 + v96) = v94[v96];
                  ++v96;
                  unsigned int v95 = v143;
                }
                while (16 * (unint64_t)v143 > v96);
                unint64_t v92 = v142;
              }
              ++v93;
              v94 += 128;
            }
            while (v93 < v92);
          }
LABEL_28:
          BOOL v21 = v31++ == v124 >> 3;
          uint64_t v26 = v135;
        }
        while (!v21);
        BOOL v21 = v17++ == v116;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v405 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v325 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v307 = a8 + a10 - 1;
  unsigned int v309 = v307 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v329 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v329;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v319 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v27 = v329;
  BOOL v318 = isLevelTiled;
  unsigned int v28 = a7;
  if (v17 <= v309)
  {
    unsigned int v317 = a7 + a9 - 1;
    if (a7 >> 3 <= v317 >> 3)
    {
      uint64_t v29 = a11;
      unsigned int v304 = a5 - 1;
      unsigned int v327 = (a5 - 1) >> 3;
      int v326 = ((a5 - 1) & 7) + 1;
      int v305 = ((a6 - 1) & 7) + 1;
      unsigned int v306 = (a6 - 1) >> 3;
      uint64_t v310 = 4 * a11;
      uint64_t v311 = 2 * a11;
      uint32x2_t v30 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v31 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v30, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v30));
      __int32 v316 = v31.i32[0] | v31.i32[1];
      BOOL v314 = v31.i32[1] != 0;
      int8x8_t v315 = v31;
      BOOL v313 = v31.i32[0] != 0;
      unint64_t v303 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v32 = (8 * v17) | 7;
        if (8 * v17 <= v325) {
          int v33 = v325;
        }
        else {
          int v33 = 8 * v17;
        }
        unsigned int v34 = a7 >> 3;
        if (v307 < v32) {
          unsigned int v32 = v307;
        }
        unsigned int v324 = 8 * v17;
        int v312 = v33 - 8 * v17;
        int v323 = v32 - v33 + 1;
        int v35 = v305;
        if (v17 != v306) {
          int v35 = 8;
        }
        unsigned int v330 = v35;
        uint64_t v322 = a2 + (v33 - v325) * v29;
        do
        {
          unsigned int v38 = 8 * v34;
          unsigned int v39 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= v28) {
            int v40 = v28;
          }
          else {
            int v40 = 8 * v34;
          }
          if (v317 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v34 == v327) {
            unsigned int v42 = v326;
          }
          else {
            unsigned int v42 = 8;
          }
          BOOL v43 = 1;
          if (v324 >= v325 && v38 >= v28)
          {
            int v44 = v326;
            if (v34 != v327) {
              int v44 = 8;
            }
            BOOL v43 = v41 != v44 || v323 != v330;
          }
          if (v318)
          {
            unsigned int v67 = 0;
            uint64_t v68 = v303 >> (*(unsigned char *)(v27 + 57) != 0);
            char v69 = 1;
            if (v68 > 127)
            {
              if (v68 > 511)
              {
                if (v68 == 512)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 16;
                  unsigned int v71 = 16;
                }
                else
                {
                  char v70 = 1;
                  unsigned int v71 = 0;
                  if (v68 == 1024)
                  {
                    char v69 = 0;
                    unsigned int v71 = 8;
                    unsigned int v67 = 16;
                  }
                }
              }
              else if (v68 == 128)
              {
                char v69 = 0;
                char v70 = 0;
                unsigned int v67 = 32;
                unsigned int v71 = 32;
              }
              else
              {
                char v70 = 1;
                unsigned int v71 = 0;
                if (v68 == 256)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 16;
                  unsigned int v67 = 32;
                }
              }
            }
            else
            {
              char v70 = 1;
              unsigned int v71 = 0;
              switch(v68)
              {
                case 4:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 128;
                  unsigned int v67 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 128;
                  unsigned int v71 = 128;
                  break;
                case 16:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 64;
                  unsigned int v67 = 128;
                  break;
                case 32:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 64;
                  unsigned int v71 = 64;
                  break;
                default:
                  if (v68 == 64)
                  {
                    char v69 = 0;
                    char v70 = 0;
                    unsigned int v71 = 32;
                    unsigned int v67 = 64;
                  }
                  break;
              }
            }
            unsigned int v292 = (v67 >> 3) - 1;
            if (v69) {
              unsigned int v293 = 0;
            }
            else {
              unsigned int v293 = 32 - __clz(~(-1 << -(char)__clz(v292)));
            }
            unsigned int v294 = (v71 >> 3) - 1;
            if (v70)
            {
              unsigned int v295 = 0;
              if (v293) {
                goto LABEL_267;
              }
            }
            else
            {
              unsigned int v295 = 32 - __clz(~(-1 << -(char)__clz(v294)));
              if (v295 | v293)
              {
LABEL_267:
                int v296 = 0;
                uint64_t v297 = 0;
                int v298 = v34 & v292;
                int v299 = v17 & v294;
                BOOL v300 = v293 != 0;
                BOOL v301 = v295 != 0;
                int v302 = 1;
                do
                {
                  --v293;
                  if (v300) {
                    v297 |= (unint64_t)(v302 & v298) << v296++;
                  }
                  else {
                    unsigned int v293 = 0;
                  }
                  --v295;
                  if (v301) {
                    v297 |= (unint64_t)(v302 & v299) << v296++;
                  }
                  else {
                    unsigned int v295 = 0;
                  }
                  v302 *= 2;
                  --v296;
                  BOOL v301 = v295 != 0;
                  BOOL v300 = v293 != 0;
                }
                while (v295 | v293);
                goto LABEL_279;
              }
            }
            uint64_t v297 = 0;
LABEL_279:
            unint64_t v53 = ((unint64_t)(v38 / v67 + v324 / v71 * ((v67 + v304) / v67)) << 14) + (v297 << 9);
            goto LABEL_61;
          }
          if (v316)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v314;
            BOOL v50 = v313;
            __int32 v51 = v315.i32[1];
            __int32 v52 = v315.i32[0];
            do
            {
              --v51;
              if (v49) {
                v47 |= (unint64_t)(v48 & v34) << v46++;
              }
              else {
                __int32 v51 = 0;
              }
              --v52;
              if (v50) {
                v47 |= (unint64_t)(v48 & v17) << v46++;
              }
              else {
                __int32 v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v50 = v52 != 0;
              BOOL v49 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 9;
LABEL_61:
          unsigned int v54 = *(_DWORD *)(v27 + 128) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v27 + 132) >> (*(unsigned char *)(v27 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_87:
              unint64_t v61 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_87;
            }
          }
          int v60 = 0;
          unint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            BOOL v65 = !v62;
            if (v62)
            {
              unint64_t v66 = ((unint64_t)(v64 & v34) << v60) | v61;
            }
            else
            {
              unsigned int v56 = 0;
              unint64_t v66 = v61;
            }
            if (!v65) {
              ++v60;
            }
            --v59;
            if (v63)
            {
              unint64_t v61 = ((unint64_t)(v64 & v17) << v60) | v66;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v61 = v66;
            }
            if (v63) {
              ++v60;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_88:
          uint64_t v72 = (float32x4_t *)(a3 + v53);
          if (v319)
          {
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v27 = v329;
            unsigned int v28 = a7;
            uint64_t v72 = (float32x4_t *)__dst;
          }
          char v73 = (unsigned __int8 *)(a4 + 8 * v61);
          uint64_t v74 = v322 + 16 * (v40 - v28);
          char v75 = v42 < 8 || v43;
          if ((v75 & 1) == 0 && v330 > 7)
          {
            uint64_t v76 = *(void *)(v27 + 208);
            int v77 = *(_DWORD *)(v76 + 52);
            unsigned int v78 = *v73;
            if (*v73)
            {
              uint64_t v29 = a11;
              if (v78 < 0xF0)
              {
                if (v78 == 127)
                {
                  float32x4_t v88 = v72[1];
                  float32x4_t v89 = v72[2];
                  float32x4_t v90 = v72[3];
                  float32x4_t v91 = v72[4];
                  float32x4_t v92 = v72[5];
                  float32x4_t v93 = v72[6];
                  float32x4_t v94 = v72[7];
                  *(float32x4_t *)uint64_t v74 = *v72;
                  *(float32x4_t *)(v74 + 16) = v88;
                  unsigned int v95 = (float32x4_t *)(v74 + a11);
                  *(float32x4_t *)(v74 + 32) = v91;
                  *(float32x4_t *)(v74 + 48) = v92;
                  *unsigned int v95 = v89;
                  v95[1] = v90;
                  uint64_t v96 = (float32x4_t *)(v74 + a11 + 32);
                  *uint64_t v96 = v93;
                  v96[1] = v94;
                  uint64_t v79 = 128;
                }
                else if (v78 == 3)
                {
                  float32x4_t v85 = vld1q_dup_f32(v72->f32);
                  *(float32x4_t *)uint64_t v74 = v85;
                  *(float32x4_t *)(v74 + 16) = v85;
                  *(float32x4_t *)(v74 + 32) = v85;
                  *(float32x4_t *)(v74 + 48) = v85;
                  uint64_t v86 = (float32x4_t *)(v74 + a11);
                  *uint64_t v86 = v85;
                  v86[1] = v85;
                  v86[2] = v85;
                  v86[3] = v85;
                  uint64_t v79 = 4;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v74, a11, (uint64_t)v72, v78);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)v74, a11, (unint64_t)v72, v78, *(_DWORD *)(v76 + 52));
                uint64_t v79 = 64;
              }
            }
            else
            {
              uint64_t v79 = 0;
              *(_OWORD *)(v74 + 32) = 0u;
              *(_OWORD *)(v74 + 48) = 0u;
              *(_OWORD *)uint64_t v74 = 0u;
              *(_OWORD *)(v74 + 16) = 0u;
              uint64_t v29 = a11;
              int v84 = (_OWORD *)(v74 + a11);
              v84[2] = 0u;
              v84[3] = 0u;
              *int v84 = 0u;
              v84[1] = 0u;
            }
            unint64_t v97 = (unint64_t)v72 + v79;
            unsigned int v98 = (float32x4_t *)(v74 + v311);
            unsigned int v99 = v73[1];
            if (v73[1])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 127)
                {
                  float32x4_t v104 = *(float32x4_t *)(v97 + 16);
                  long long v105 = *(_OWORD *)(v97 + 32);
                  long long v106 = *(_OWORD *)(v97 + 48);
                  float32x4_t v107 = *(float32x4_t *)(v97 + 64);
                  float32x4_t v108 = *(float32x4_t *)(v97 + 80);
                  long long v109 = *(_OWORD *)(v97 + 96);
                  long long v110 = *(_OWORD *)(v97 + 112);
                  *unsigned int v98 = *(float32x4_t *)v97;
                  v98[1] = v104;
                  int v111 = (_OWORD *)((char *)v98->f32 + v29);
                  v98[2] = v107;
                  v98[3] = v108;
                  *int v111 = v105;
                  v111[1] = v106;
                  unsigned int v112 = (_OWORD *)((char *)v98[2].f32 + v29);
                  *unsigned int v112 = v109;
                  v112[1] = v110;
                  uint64_t v100 = 128;
                }
                else if (v99 == 3)
                {
                  float32x4_t v102 = vld1q_dup_f32((const float *)v97);
                  *unsigned int v98 = v102;
                  v98[1] = v102;
                  v98[2] = v102;
                  v98[3] = v102;
                  uint64_t v103 = (float32x4_t *)((char *)v98 + v29);
                  *uint64_t v103 = v102;
                  v103[1] = v102;
                  v103[2] = v102;
                  v103[3] = v102;
                  uint64_t v100 = 4;
                }
                else
                {
                  uint64_t v100 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)(v74 + v311), v29, v97, v99);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)(v74 + v311), v29, v97, v99, v77);
                uint64_t v100 = 64;
              }
            }
            else
            {
              uint64_t v100 = 0;
              v98[2] = 0u;
              v98[3] = 0u;
              *unsigned int v98 = 0u;
              v98[1] = 0u;
              unsigned int v101 = (_OWORD *)((char *)v98->f32 + v29);
              v101[2] = 0u;
              v101[3] = 0u;
              *unsigned int v101 = 0u;
              v101[1] = 0u;
            }
            unint64_t v113 = v97 + v100;
            unsigned int v114 = (int8x16_t *)(v74 + 64);
            unsigned int v115 = v73[2];
            if (v73[2])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 127)
                {
                  long long v120 = *(_OWORD *)(v113 + 16);
                  long long v121 = *(_OWORD *)(v113 + 32);
                  long long v122 = *(_OWORD *)(v113 + 48);
                  long long v123 = *(_OWORD *)(v113 + 64);
                  long long v124 = *(_OWORD *)(v113 + 80);
                  long long v125 = *(_OWORD *)(v113 + 96);
                  long long v126 = *(_OWORD *)(v113 + 112);
                  *unsigned int v114 = *(int8x16_t *)v113;
                  *(_OWORD *)(v74 + 80) = v120;
                  int8x8_t v127 = &v114->i8[v29];
                  *(_OWORD *)(v74 + 96) = v123;
                  *(_OWORD *)(v74 + 112) = v124;
                  *(_OWORD *)int8x8_t v127 = v121;
                  *((_OWORD *)v127 + 1) = v122;
                  v127 += 32;
                  *(_OWORD *)int8x8_t v127 = v125;
                  *((_OWORD *)v127 + 1) = v126;
                  uint64_t v116 = 128;
                }
                else if (v115 == 3)
                {
                  float32x4_t v118 = vld1q_dup_f32((const float *)v113);
                  *(float32x4_t *)(v74 + 64) = v118;
                  *(float32x4_t *)(v74 + 80) = v118;
                  *(float32x4_t *)(v74 + 96) = v118;
                  *(float32x4_t *)(v74 + 112) = v118;
                  int v119 = (float32x4_t *)&v114->i8[v29];
                  *int v119 = v118;
                  v119[1] = v118;
                  v119[2] = v118;
                  v119[3] = v118;
                  uint64_t v116 = 4;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v114, v29, v113, v115);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v114, v29, v113, v115, v77);
                uint64_t v116 = 64;
              }
            }
            else
            {
              uint64_t v116 = 0;
              *(_OWORD *)(v74 + 96) = 0u;
              *(_OWORD *)(v74 + 112) = 0u;
              *unsigned int v114 = 0u;
              *(_OWORD *)(v74 + 80) = 0u;
              uint64_t v117 = &v114->i8[v29];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            unint64_t v128 = v113 + v116;
            uint64_t v129 = (int8x16_t *)&v98[4];
            unsigned int v130 = v73[3];
            if (v73[3])
            {
              if (v130 < 0xF0)
              {
                if (v130 == 127)
                {
                  float32x4_t v135 = *(float32x4_t *)(v128 + 16);
                  long long v136 = *(_OWORD *)(v128 + 32);
                  long long v137 = *(_OWORD *)(v128 + 48);
                  float32x4_t v138 = *(float32x4_t *)(v128 + 64);
                  float32x4_t v139 = *(float32x4_t *)(v128 + 80);
                  long long v140 = *(_OWORD *)(v128 + 96);
                  long long v141 = *(_OWORD *)(v128 + 112);
                  *uint64_t v129 = *(int8x16_t *)v128;
                  v98[5] = v135;
                  unsigned int v142 = &v129->i8[v29];
                  v98[6] = v138;
                  v98[7] = v139;
                  *(_OWORD *)unsigned int v142 = v136;
                  *((_OWORD *)v142 + 1) = v137;
                  v142 += 32;
                  *(_OWORD *)unsigned int v142 = v140;
                  *((_OWORD *)v142 + 1) = v141;
                  uint64_t v131 = 128;
                }
                else if (v130 == 3)
                {
                  float32x4_t v133 = vld1q_dup_f32((const float *)v128);
                  v98[4] = v133;
                  v98[5] = v133;
                  v98[6] = v133;
                  v98[7] = v133;
                  unsigned int v134 = (float32x4_t *)&v129->i8[v29];
                  *unsigned int v134 = v133;
                  v134[1] = v133;
                  v134[2] = v133;
                  v134[3] = v133;
                  uint64_t v131 = 4;
                }
                else
                {
                  uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v129, v29, v128, v130);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v129, v29, v128, v130, v77);
                uint64_t v131 = 64;
              }
            }
            else
            {
              uint64_t v131 = 0;
              v98[6] = 0u;
              v98[7] = 0u;
              *uint64_t v129 = 0u;
              v98[5] = 0u;
              unsigned int v132 = &v129->i8[v29];
              *((_OWORD *)v132 + 2) = 0u;
              *((_OWORD *)v132 + 3) = 0u;
              *(_OWORD *)unsigned int v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
            }
            unint64_t v143 = v128 + v131;
            char v144 = (float32x4_t *)(v74 + v310);
            unsigned int v145 = v73[4];
            if (v73[4])
            {
              if (v145 < 0xF0)
              {
                if (v145 == 127)
                {
                  float32x4_t v150 = *(float32x4_t *)(v143 + 16);
                  long long v151 = *(_OWORD *)(v143 + 32);
                  long long v152 = *(_OWORD *)(v143 + 48);
                  float32x4_t v153 = *(float32x4_t *)(v143 + 64);
                  float32x4_t v154 = *(float32x4_t *)(v143 + 80);
                  long long v155 = *(_OWORD *)(v143 + 96);
                  long long v156 = *(_OWORD *)(v143 + 112);
                  *char v144 = *(float32x4_t *)v143;
                  v144[1] = v150;
                  int8x16_t v157 = (_OWORD *)((char *)v144->f32 + v29);
                  float32x4_t v144[2] = v153;
                  v144[3] = v154;
                  *int8x16_t v157 = v151;
                  v157[1] = v152;
                  uint64_t v158 = (_OWORD *)((char *)v144[2].f32 + v29);
                  *uint64_t v158 = v155;
                  v158[1] = v156;
                  uint64_t v146 = 128;
                }
                else if (v145 == 3)
                {
                  float32x4_t v148 = vld1q_dup_f32((const float *)v143);
                  *char v144 = v148;
                  v144[1] = v148;
                  float32x4_t v144[2] = v148;
                  v144[3] = v148;
                  uint64_t v149 = (float32x4_t *)((char *)v144 + v29);
                  *uint64_t v149 = v148;
                  v149[1] = v148;
                  v149[2] = v148;
                  v149[3] = v148;
                  uint64_t v146 = 4;
                }
                else
                {
                  uint64_t v146 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)(v74 + v310), v29, v143, v145);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)(v74 + v310), v29, v143, v145, v77);
                uint64_t v146 = 64;
              }
            }
            else
            {
              uint64_t v146 = 0;
              float32x4_t v144[2] = 0u;
              v144[3] = 0u;
              *char v144 = 0u;
              v144[1] = 0u;
              unsigned int v147 = (_OWORD *)((char *)v144->f32 + v29);
              v147[2] = 0u;
              v147[3] = 0u;
              *unsigned int v147 = 0u;
              v147[1] = 0u;
            }
            unint64_t v159 = v143 + v146;
            uint64_t v160 = v74 + 6 * a11;
            unsigned int v161 = v73[5];
            if (v73[5])
            {
              if (v161 < 0xF0)
              {
                if (v161 == 127)
                {
                  long long v166 = *(_OWORD *)(v159 + 16);
                  long long v167 = *(_OWORD *)(v159 + 32);
                  long long v168 = *(_OWORD *)(v159 + 48);
                  long long v169 = *(_OWORD *)(v159 + 64);
                  long long v170 = *(_OWORD *)(v159 + 80);
                  long long v171 = *(_OWORD *)(v159 + 96);
                  long long v172 = *(_OWORD *)(v159 + 112);
                  *(_OWORD *)uint64_t v160 = *(_OWORD *)v159;
                  *(_OWORD *)(v160 + 16) = v166;
                  unsigned int v173 = (_OWORD *)(v160 + v29);
                  *(_OWORD *)(v160 + 32) = v169;
                  *(_OWORD *)(v160 + 48) = v170;
                  _OWORD *v173 = v167;
                  v173[1] = v168;
                  uint64_t v174 = (_OWORD *)(v160 + v29 + 32);
                  *uint64_t v174 = v171;
                  v174[1] = v172;
                  uint64_t v162 = 128;
                }
                else if (v161 == 3)
                {
                  float32x4_t v164 = vld1q_dup_f32((const float *)v159);
                  *(float32x4_t *)uint64_t v160 = v164;
                  *(float32x4_t *)(v160 + 16) = v164;
                  *(float32x4_t *)(v160 + 32) = v164;
                  *(float32x4_t *)(v160 + 48) = v164;
                  uint64_t v165 = (float32x4_t *)(v160 + v29);
                  *uint64_t v165 = v164;
                  v165[1] = v164;
                  v165[2] = v164;
                  v165[3] = v164;
                  uint64_t v162 = 4;
                }
                else
                {
                  uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)v160, v29, v159, v161);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((_OWORD *)v160, v29, v159, v161, v77);
                uint64_t v162 = 64;
              }
            }
            else
            {
              uint64_t v162 = 0;
              *(_OWORD *)(v160 + 32) = 0u;
              *(_OWORD *)(v160 + 48) = 0u;
              *(_OWORD *)uint64_t v160 = 0u;
              *(_OWORD *)(v160 + 16) = 0u;
              uint64_t v163 = (_OWORD *)(v160 + v29);
              v163[2] = 0u;
              v163[3] = 0u;
              *uint64_t v163 = 0u;
              v163[1] = 0u;
            }
            unint64_t v175 = v159 + v162;
            uint64_t v176 = (int8x16_t *)&v144[4];
            unsigned int v177 = v73[6];
            if (v73[6])
            {
              if (v177 < 0xF0)
              {
                if (v177 == 127)
                {
                  float32x4_t v182 = *(float32x4_t *)(v175 + 16);
                  long long v183 = *(_OWORD *)(v175 + 32);
                  long long v184 = *(_OWORD *)(v175 + 48);
                  float32x4_t v185 = *(float32x4_t *)(v175 + 64);
                  float32x4_t v186 = *(float32x4_t *)(v175 + 80);
                  long long v187 = *(_OWORD *)(v175 + 96);
                  long long v188 = *(_OWORD *)(v175 + 112);
                  *uint64_t v176 = *(int8x16_t *)v175;
                  v144[5] = v182;
                  int8x16_t v189 = &v176->i8[v29];
                  v144[6] = v185;
                  v144[7] = v186;
                  *(_OWORD *)int8x16_t v189 = v183;
                  *((_OWORD *)v189 + 1) = v184;
                  v189 += 32;
                  *(_OWORD *)int8x16_t v189 = v187;
                  *((_OWORD *)v189 + 1) = v188;
                  uint64_t v178 = 128;
                }
                else if (v177 == 3)
                {
                  float32x4_t v180 = vld1q_dup_f32((const float *)v175);
                  v144[4] = v180;
                  v144[5] = v180;
                  v144[6] = v180;
                  v144[7] = v180;
                  uint64_t v181 = (float32x4_t *)&v176->i8[v29];
                  *uint64_t v181 = v180;
                  v181[1] = v180;
                  v181[2] = v180;
                  v181[3] = v180;
                  uint64_t v178 = 4;
                }
                else
                {
                  uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v176, v29, v175, v177);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v176, v29, v175, v177, v77);
                uint64_t v178 = 64;
              }
            }
            else
            {
              uint64_t v178 = 0;
              v144[6] = 0u;
              v144[7] = 0u;
              *uint64_t v176 = 0u;
              v144[5] = 0u;
              uint64_t v179 = &v176->i8[v29];
              *((_OWORD *)v179 + 2) = 0u;
              *((_OWORD *)v179 + 3) = 0u;
              *(_OWORD *)uint64_t v179 = 0u;
              *((_OWORD *)v179 + 1) = 0u;
            }
            uint64_t v190 = (int8x16_t *)(v160 + 64);
            unsigned int v191 = v73[7];
            if (v73[7])
            {
              unint64_t v192 = v175 + v178;
              if (v191 < 0xF0)
              {
                if (v191 == 127)
                {
                  long long v195 = *(_OWORD *)(v192 + 16);
                  long long v196 = *(_OWORD *)(v192 + 32);
                  long long v197 = *(_OWORD *)(v192 + 48);
                  long long v198 = *(_OWORD *)(v192 + 64);
                  long long v199 = *(_OWORD *)(v192 + 80);
                  long long v200 = *(_OWORD *)(v192 + 96);
                  long long v201 = *(_OWORD *)(v192 + 112);
                  *uint64_t v190 = *(int8x16_t *)v192;
                  *(_OWORD *)(v160 + 80) = v195;
                  uint64_t v202 = &v190->i8[v29];
                  *(_OWORD *)(v160 + 96) = v198;
                  *(_OWORD *)(v160 + 112) = v199;
                  *(_OWORD *)uint64_t v202 = v196;
                  *((_OWORD *)v202 + 1) = v197;
                  v202 += 32;
                  *(_OWORD *)uint64_t v202 = v200;
                  *((_OWORD *)v202 + 1) = v201;
                }
                else if (v191 == 3)
                {
                  float32x4_t v193 = vld1q_dup_f32((const float *)v192);
                  *(float32x4_t *)(v160 + 64) = v193;
                  *(float32x4_t *)(v160 + 80) = v193;
                  *(float32x4_t *)(v160 + 96) = v193;
                  *(float32x4_t *)(v160 + 112) = v193;
                  unsigned int v194 = (float32x4_t *)&v190->i8[v29];
                  *unsigned int v194 = v193;
                  v194[1] = v193;
                  v194[2] = v193;
                  v194[3] = v193;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v190, v29, v192, v191);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v190, v29, v192, v191, v77);
              }
            }
            else
            {
              *(_OWORD *)(v160 + 96) = 0u;
              *(_OWORD *)(v160 + 112) = 0u;
              *uint64_t v190 = 0u;
              *(_OWORD *)(v160 + 80) = 0u;
              int v36 = &v190->i8[v29];
              *((_OWORD *)v36 + 2) = 0u;
              *((_OWORD *)v36 + 3) = 0u;
              *(_OWORD *)int v36 = 0u;
              *((_OWORD *)v36 + 1) = 0u;
            }
            unsigned int v28 = a7;
            uint64_t v27 = v329;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v27;
          block[5] = v72;
          char v338 = v42;
          char v339 = v330;
          unsigned int v334 = v312;
          unsigned int v335 = v40 - v38;
          block[6] = v73;
          uint64_t v332 = v322 + 16 * (v40 - v28);
          uint64_t v29 = a11;
          uint64_t v333 = a11;
          unsigned int v336 = v323;
          unsigned int v337 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v27 + 8) + 7384), block);
            uint64_t v27 = v329;
            unsigned int v28 = a7;
LABEL_28:
            unsigned int v37 = v34 + 1;
            goto LABEL_29;
          }
          uint64_t v80 = *(void *)(v27 + 208);
          int v81 = *(_DWORD *)(v80 + 52);
          unsigned int v82 = *v73;
          if (*v73)
          {
            if (v82 < 0xF0)
            {
              if (v82 == 127)
              {
                float32x4_t v203 = v72[1];
                float32x4_t v204 = v72[2];
                float32x4_t v205 = v72[3];
                float32x4_t v206 = v72[4];
                float32x4_t v207 = v72[5];
                float32x4_t v208 = v72[6];
                float32x4_t v209 = v72[7];
                int8x16_t v341 = *(int8x16_t *)v72;
                float32x4_t v342 = v203;
                float32x4_t v343 = v206;
                float32x4_t v344 = v207;
                float32x4_t v349 = v204;
                float32x4_t v350 = v205;
                float32x4_t v351 = v208;
                float32x4_t v352 = v209;
                uint64_t v83 = 128;
              }
              else if (v82 == 3)
              {
                float32x4_t v87 = vld1q_dup_f32(v72->f32);
                int8x16_t v341 = (int8x16_t)v87;
                float32x4_t v342 = v87;
                float32x4_t v343 = v87;
                float32x4_t v344 = v87;
                float32x4_t v349 = v87;
                float32x4_t v350 = v87;
                float32x4_t v351 = v87;
                float32x4_t v352 = v87;
                uint64_t v83 = 4;
              }
              else
              {
                uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v341, 128, (uint64_t)v72, v82);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v341, 128, (unint64_t)v72, v82, *(_DWORD *)(v80 + 52));
              uint64_t v83 = 64;
            }
          }
          else
          {
            uint64_t v83 = 0;
            float32x4_t v344 = 0u;
            float32x4_t v343 = 0u;
            float32x4_t v342 = 0u;
            int8x16_t v341 = 0u;
            float32x4_t v349 = 0u;
            float32x4_t v350 = 0u;
            float32x4_t v351 = 0u;
            float32x4_t v352 = 0u;
          }
          unint64_t v210 = (unint64_t)v72 + v83;
          unsigned int v211 = v73[1];
          if (v73[1])
          {
            if (v211 < 0xF0)
            {
              if (v211 == 127)
              {
                float32x4_t v214 = *(float32x4_t *)(v210 + 16);
                float32x4_t v215 = *(float32x4_t *)(v210 + 32);
                float32x4_t v216 = *(float32x4_t *)(v210 + 48);
                float32x4_t v217 = *(float32x4_t *)(v210 + 64);
                float32x4_t v218 = *(float32x4_t *)(v210 + 80);
                float32x4_t v219 = *(float32x4_t *)(v210 + 96);
                float32x4_t v220 = *(float32x4_t *)(v210 + 112);
                int8x16_t v357 = *(int8x16_t *)v210;
                float32x4_t v358 = v214;
                float32x4_t v359 = v217;
                float32x4_t v360 = v218;
                float32x4_t v365 = v215;
                float32x4_t v366 = v216;
                float32x4_t v367 = v219;
                float32x4_t v368 = v220;
                uint64_t v212 = 128;
              }
              else if (v211 == 3)
              {
                float32x4_t v213 = vld1q_dup_f32((const float *)v210);
                int8x16_t v357 = (int8x16_t)v213;
                float32x4_t v358 = v213;
                float32x4_t v359 = v213;
                float32x4_t v360 = v213;
                float32x4_t v365 = v213;
                float32x4_t v366 = v213;
                float32x4_t v367 = v213;
                float32x4_t v368 = v213;
                uint64_t v212 = 4;
              }
              else
              {
                uint64_t v212 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v357, 128, v210, v211);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v357, 128, v210, v211, v81);
              uint64_t v212 = 64;
            }
          }
          else
          {
            uint64_t v212 = 0;
            float32x4_t v359 = 0u;
            float32x4_t v360 = 0u;
            int8x16_t v357 = 0u;
            float32x4_t v358 = 0u;
            float32x4_t v365 = 0u;
            float32x4_t v366 = 0u;
            float32x4_t v367 = 0u;
            float32x4_t v368 = 0u;
          }
          unint64_t v221 = v210 + v212;
          unsigned int v222 = v73[2];
          if (v73[2])
          {
            if (v222 < 0xF0)
            {
              if (v222 == 127)
              {
                float32x4_t v225 = *(float32x4_t *)(v221 + 16);
                float32x4_t v226 = *(float32x4_t *)(v221 + 32);
                float32x4_t v227 = *(float32x4_t *)(v221 + 48);
                float32x4_t v228 = *(float32x4_t *)(v221 + 64);
                float32x4_t v229 = *(float32x4_t *)(v221 + 80);
                float32x4_t v230 = *(float32x4_t *)(v221 + 96);
                float32x4_t v231 = *(float32x4_t *)(v221 + 112);
                int8x16_t v345 = *(int8x16_t *)v221;
                float32x4_t v346 = v225;
                float32x4_t v347 = v228;
                float32x4_t v348 = v229;
                float32x4_t v353 = v226;
                float32x4_t v354 = v227;
                float32x4_t v355 = v230;
                float32x4_t v356 = v231;
                uint64_t v223 = 128;
              }
              else if (v222 == 3)
              {
                float32x4_t v224 = vld1q_dup_f32((const float *)v221);
                int8x16_t v345 = (int8x16_t)v224;
                float32x4_t v346 = v224;
                float32x4_t v347 = v224;
                float32x4_t v348 = v224;
                float32x4_t v353 = v224;
                float32x4_t v354 = v224;
                float32x4_t v355 = v224;
                float32x4_t v356 = v224;
                uint64_t v223 = 4;
              }
              else
              {
                uint64_t v223 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v345, 128, v221, v222);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v345, 128, v221, v222, v81);
              uint64_t v223 = 64;
            }
          }
          else
          {
            uint64_t v223 = 0;
            float32x4_t v347 = 0u;
            float32x4_t v348 = 0u;
            int8x16_t v345 = 0u;
            float32x4_t v346 = 0u;
            float32x4_t v353 = 0u;
            float32x4_t v354 = 0u;
            float32x4_t v355 = 0u;
            float32x4_t v356 = 0u;
          }
          unint64_t v232 = v221 + v223;
          unsigned int v233 = v73[3];
          if (v73[3])
          {
            if (v233 < 0xF0)
            {
              if (v233 == 127)
              {
                float32x4_t v236 = *(float32x4_t *)(v232 + 16);
                float32x4_t v237 = *(float32x4_t *)(v232 + 32);
                float32x4_t v238 = *(float32x4_t *)(v232 + 48);
                float32x4_t v239 = *(float32x4_t *)(v232 + 64);
                float32x4_t v240 = *(float32x4_t *)(v232 + 80);
                float32x4_t v241 = *(float32x4_t *)(v232 + 96);
                float32x4_t v242 = *(float32x4_t *)(v232 + 112);
                int8x16_t v361 = *(int8x16_t *)v232;
                float32x4_t v362 = v236;
                float32x4_t v363 = v239;
                float32x4_t v364 = v240;
                float32x4_t v369 = v237;
                float32x4_t v370 = v238;
                float32x4_t v371 = v241;
                float32x4_t v372 = v242;
                uint64_t v234 = 128;
              }
              else if (v233 == 3)
              {
                float32x4_t v235 = vld1q_dup_f32((const float *)v232);
                int8x16_t v361 = (int8x16_t)v235;
                float32x4_t v362 = v235;
                float32x4_t v363 = v235;
                float32x4_t v364 = v235;
                float32x4_t v369 = v235;
                float32x4_t v370 = v235;
                float32x4_t v371 = v235;
                float32x4_t v372 = v235;
                uint64_t v234 = 4;
              }
              else
              {
                uint64_t v234 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v361, 128, v232, v233);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v361, 128, v232, v233, v81);
              uint64_t v234 = 64;
            }
          }
          else
          {
            uint64_t v234 = 0;
            float32x4_t v363 = 0u;
            float32x4_t v364 = 0u;
            int8x16_t v361 = 0u;
            float32x4_t v362 = 0u;
            float32x4_t v369 = 0u;
            float32x4_t v370 = 0u;
            float32x4_t v371 = 0u;
            float32x4_t v372 = 0u;
          }
          unint64_t v243 = v232 + v234;
          unsigned int v244 = v73[4];
          if (v73[4])
          {
            if (v244 < 0xF0)
            {
              if (v244 == 127)
              {
                float32x4_t v247 = *(float32x4_t *)(v243 + 16);
                float32x4_t v248 = *(float32x4_t *)(v243 + 32);
                float32x4_t v249 = *(float32x4_t *)(v243 + 48);
                float32x4_t v250 = *(float32x4_t *)(v243 + 64);
                float32x4_t v251 = *(float32x4_t *)(v243 + 80);
                float32x4_t v252 = *(float32x4_t *)(v243 + 96);
                float32x4_t v253 = *(float32x4_t *)(v243 + 112);
                int8x16_t v373 = *(int8x16_t *)v243;
                float32x4_t v374 = v247;
                float32x4_t v375 = v250;
                float32x4_t v376 = v251;
                float32x4_t v381 = v248;
                float32x4_t v382 = v249;
                float32x4_t v383 = v252;
                float32x4_t v384 = v253;
                uint64_t v245 = 128;
              }
              else if (v244 == 3)
              {
                float32x4_t v246 = vld1q_dup_f32((const float *)v243);
                int8x16_t v373 = (int8x16_t)v246;
                float32x4_t v374 = v246;
                float32x4_t v375 = v246;
                float32x4_t v376 = v246;
                float32x4_t v381 = v246;
                float32x4_t v382 = v246;
                float32x4_t v383 = v246;
                float32x4_t v384 = v246;
                uint64_t v245 = 4;
              }
              else
              {
                uint64_t v245 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v373, 128, v243, v244);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v373, 128, v243, v244, v81);
              uint64_t v245 = 64;
            }
          }
          else
          {
            uint64_t v245 = 0;
            float32x4_t v375 = 0u;
            float32x4_t v376 = 0u;
            int8x16_t v373 = 0u;
            float32x4_t v374 = 0u;
            float32x4_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v383 = 0u;
            float32x4_t v384 = 0u;
          }
          unint64_t v254 = v243 + v245;
          unsigned int v255 = v73[5];
          if (v73[5])
          {
            if (v255 < 0xF0)
            {
              if (v255 == 127)
              {
                float32x4_t v258 = *(float32x4_t *)(v254 + 16);
                float32x4_t v259 = *(float32x4_t *)(v254 + 32);
                float32x4_t v260 = *(float32x4_t *)(v254 + 48);
                float32x4_t v261 = *(float32x4_t *)(v254 + 64);
                float32x4_t v262 = *(float32x4_t *)(v254 + 80);
                float32x4_t v263 = *(float32x4_t *)(v254 + 96);
                float32x4_t v264 = *(float32x4_t *)(v254 + 112);
                int8x16_t v389 = *(int8x16_t *)v254;
                float32x4_t v390 = v258;
                float32x4_t v391 = v261;
                float32x4_t v392 = v262;
                float32x4_t v397 = v259;
                float32x4_t v398 = v260;
                float32x4_t v399 = v263;
                float32x4_t v400 = v264;
                uint64_t v256 = 128;
              }
              else if (v255 == 3)
              {
                float32x4_t v257 = vld1q_dup_f32((const float *)v254);
                int8x16_t v389 = (int8x16_t)v257;
                float32x4_t v390 = v257;
                float32x4_t v391 = v257;
                float32x4_t v392 = v257;
                float32x4_t v397 = v257;
                float32x4_t v398 = v257;
                float32x4_t v399 = v257;
                float32x4_t v400 = v257;
                uint64_t v256 = 4;
              }
              else
              {
                uint64_t v256 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v389, 128, v254, v255);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v389, 128, v254, v255, v81);
              uint64_t v256 = 64;
            }
          }
          else
          {
            uint64_t v256 = 0;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            int8x16_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
          }
          unint64_t v265 = v254 + v256;
          unsigned int v266 = v73[6];
          if (v73[6])
          {
            if (v266 < 0xF0)
            {
              if (v266 == 127)
              {
                float32x4_t v270 = *(float32x4_t *)(v265 + 16);
                float32x4_t v271 = *(float32x4_t *)(v265 + 32);
                float32x4_t v272 = *(float32x4_t *)(v265 + 48);
                float32x4_t v273 = *(float32x4_t *)(v265 + 64);
                float32x4_t v274 = *(float32x4_t *)(v265 + 80);
                float32x4_t v275 = *(float32x4_t *)(v265 + 96);
                float32x4_t v276 = *(float32x4_t *)(v265 + 112);
                int8x16_t v377 = *(int8x16_t *)v265;
                float32x4_t v378 = v270;
                float32x4_t v379 = v273;
                float32x4_t v380 = v274;
                float32x4_t v385 = v271;
                float32x4_t v386 = v272;
                float32x4_t v387 = v275;
                float32x4_t v388 = v276;
                uint64_t v267 = 128;
                unsigned int v268 = v73[7];
                if (!v73[7]) {
                  goto LABEL_239;
                }
              }
              else if (v266 == 3)
              {
                float32x4_t v269 = vld1q_dup_f32((const float *)v265);
                int8x16_t v377 = (int8x16_t)v269;
                float32x4_t v378 = v269;
                float32x4_t v379 = v269;
                float32x4_t v380 = v269;
                float32x4_t v385 = v269;
                float32x4_t v386 = v269;
                float32x4_t v387 = v269;
                float32x4_t v388 = v269;
                uint64_t v267 = 4;
                unsigned int v268 = v73[7];
                if (!v73[7]) {
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v267 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v377, 128, v265, v266);
                unsigned int v268 = v73[7];
                if (!v73[7])
                {
LABEL_239:
                  float32x4_t v395 = 0u;
                  float32x4_t v396 = 0u;
                  int8x16_t v393 = 0u;
                  float32x4_t v394 = 0u;
                  float32x4_t v401 = 0u;
                  float32x4_t v402 = 0u;
                  float32x4_t v403 = 0u;
                  float32x4_t v404 = 0u;
                  goto LABEL_242;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v377, 128, v265, v266, v81);
              uint64_t v267 = 64;
              unsigned int v268 = v73[7];
              if (!v73[7]) {
                goto LABEL_239;
              }
            }
          }
          else
          {
            uint64_t v267 = 0;
            float32x4_t v379 = 0u;
            float32x4_t v380 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v378 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            unsigned int v268 = v73[7];
            if (!v73[7]) {
              goto LABEL_239;
            }
          }
          unint64_t v277 = v265 + v267;
          if (v268 < 0xF0)
          {
            if (v268 == 127)
            {
              float32x4_t v279 = *(float32x4_t *)(v277 + 16);
              float32x4_t v280 = *(float32x4_t *)(v277 + 32);
              float32x4_t v281 = *(float32x4_t *)(v277 + 48);
              float32x4_t v282 = *(float32x4_t *)(v277 + 64);
              float32x4_t v283 = *(float32x4_t *)(v277 + 80);
              float32x4_t v284 = *(float32x4_t *)(v277 + 96);
              float32x4_t v285 = *(float32x4_t *)(v277 + 112);
              int8x16_t v393 = *(int8x16_t *)v277;
              float32x4_t v394 = v279;
              float32x4_t v395 = v282;
              float32x4_t v396 = v283;
              float32x4_t v401 = v280;
              float32x4_t v402 = v281;
              float32x4_t v403 = v284;
              float32x4_t v404 = v285;
            }
            else if (v268 == 3)
            {
              float32x4_t v278 = vld1q_dup_f32((const float *)v277);
              int8x16_t v393 = (int8x16_t)v278;
              float32x4_t v394 = v278;
              float32x4_t v395 = v278;
              float32x4_t v396 = v278;
              float32x4_t v401 = v278;
              float32x4_t v402 = v278;
              float32x4_t v403 = v278;
              float32x4_t v404 = v278;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v393, 128, v277, v268);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v393, 128, v277, v268, v81);
          }
LABEL_242:
          unsigned int v37 = v34 + 1;
          unint64_t v286 = v336;
          unsigned int v28 = a7;
          uint64_t v27 = v329;
          if (v336)
          {
            unint64_t v287 = 0;
            float64x2_t v288 = &v341 + 8 * (unint64_t)v334 + v335;
            unsigned int v289 = v337;
            do
            {
              if (v289)
              {
                uint64_t v290 = 0;
                uint64_t v291 = v332 + v333 * v287;
                do
                {
                  *(unsigned char *)(v291 + v290) = v288->i8[v290];
                  ++v290;
                  unsigned int v289 = v337;
                }
                while (16 * (unint64_t)v337 > v290);
                unint64_t v286 = v336;
              }
              ++v287;
              v288 += 8;
            }
            while (v287 < v286);
          }
LABEL_29:
          BOOL v22 = v34 == v317 >> 3;
          unsigned int v34 = v37;
        }
        while (!v22);
        BOOL v22 = v17++ == v309;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v255 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v207 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v189 = a8 + a10 - 1;
  unsigned int v191 = v189 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v211 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v201 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v200 = isLevelTiled;
  unsigned int v26 = a7;
  if (v16 <= v191)
  {
    unsigned int v199 = a7 + a9 - 1;
    if (a7 >> 3 <= v199 >> 3)
    {
      uint64_t v27 = a11;
      unsigned int v186 = a5 - 1;
      unsigned int v209 = (a5 - 1) >> 3;
      int v208 = ((a5 - 1) & 7) + 1;
      int v187 = ((a6 - 1) & 7) + 1;
      unsigned int v188 = (a6 - 1) >> 3;
      uint64_t v192 = 4 * a11;
      uint64_t v193 = 2 * a11;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v29.i64[0] = 0x2000000020;
      *(int32x2_t *)v30.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL)))))));
      v31.i64[0] = 0x1000000010;
      *(int8x8_t *)v32.i8 = vbic_s8(*(int8x8_t *)v30.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v198 = v32.i32[0] | v32.i32[1];
      BOOL v196 = v32.i32[1] != 0;
      uint64_t v197 = v32.i64[0];
      BOOL v195 = v32.i32[0] != 0;
      unint64_t v185 = 8 * v18 * (unint64_t)v17;
      do
      {
        unsigned int v33 = (8 * v16) | 7;
        if (8 * v16 <= v207) {
          int v34 = v207;
        }
        else {
          int v34 = 8 * v16;
        }
        unsigned int v35 = a7 >> 3;
        if (v189 < v33) {
          unsigned int v33 = v189;
        }
        unsigned int v206 = 8 * v16;
        int v194 = v34 - 8 * v16;
        int v205 = v33 - v34 + 1;
        int v36 = v187;
        if (v16 != v188) {
          int v36 = 8;
        }
        unsigned int v212 = v36;
        uint64_t v204 = a2 + (v34 - v207) * v27;
        do
        {
          unsigned int v38 = 8 * v35;
          unsigned int v39 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= v26) {
            int v40 = v26;
          }
          else {
            int v40 = 8 * v35;
          }
          if (v199 < v39) {
            unsigned int v39 = a7 + a9 - 1;
          }
          int v41 = v39 - v40 + 1;
          if (v35 == v209) {
            unsigned int v42 = v208;
          }
          else {
            unsigned int v42 = 8;
          }
          BOOL v43 = 1;
          if (v206 >= v207 && v38 >= v26)
          {
            int v44 = v208;
            if (v35 != v209) {
              int v44 = 8;
            }
            BOOL v43 = v41 != v44 || v205 != v212;
          }
          if (v200)
          {
            unsigned int v67 = 0;
            uint64_t v68 = v185 >> (*(unsigned char *)(v25 + 57) != 0);
            char v69 = 1;
            if (v68 > 127)
            {
              if (v68 > 511)
              {
                if (v68 == 512)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 16;
                  unsigned int v71 = 16;
                }
                else
                {
                  char v70 = 1;
                  unsigned int v71 = 0;
                  if (v68 == 1024)
                  {
                    char v69 = 0;
                    unsigned int v71 = 8;
                    unsigned int v67 = 16;
                  }
                }
              }
              else if (v68 == 128)
              {
                char v69 = 0;
                char v70 = 0;
                unsigned int v67 = 32;
                unsigned int v71 = 32;
              }
              else
              {
                char v70 = 1;
                unsigned int v71 = 0;
                if (v68 == 256)
                {
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 16;
                  unsigned int v67 = 32;
                }
              }
            }
            else
            {
              char v70 = 1;
              unsigned int v71 = 0;
              switch(v68)
              {
                case 4:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 128;
                  unsigned int v67 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 128;
                  unsigned int v71 = 128;
                  break;
                case 16:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v71 = 64;
                  unsigned int v67 = 128;
                  break;
                case 32:
                  char v69 = 0;
                  char v70 = 0;
                  unsigned int v67 = 64;
                  unsigned int v71 = 64;
                  break;
                default:
                  if (v68 == 64)
                  {
                    char v69 = 0;
                    char v70 = 0;
                    unsigned int v71 = 32;
                    unsigned int v67 = 64;
                  }
                  break;
              }
            }
            unsigned int v174 = (v67 >> 3) - 1;
            if (v69) {
              unsigned int v175 = 0;
            }
            else {
              unsigned int v175 = 32 - __clz(~(-1 << -(char)__clz(v174)));
            }
            unsigned int v176 = (v71 >> 3) - 1;
            if (v70)
            {
              unsigned int v177 = 0;
              if (v175) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v177 = 32 - __clz(~(-1 << -(char)__clz(v176)));
              if (v177 | v175)
              {
LABEL_268:
                int v178 = 0;
                uint64_t v179 = 0;
                int v180 = v35 & v174;
                int v181 = v16 & v176;
                BOOL v182 = v175 != 0;
                BOOL v183 = v177 != 0;
                int v184 = 1;
                do
                {
                  --v175;
                  if (v182) {
                    v179 |= (unint64_t)(v184 & v180) << v178++;
                  }
                  else {
                    unsigned int v175 = 0;
                  }
                  --v177;
                  if (v183) {
                    v179 |= (unint64_t)(v184 & v181) << v178++;
                  }
                  else {
                    unsigned int v177 = 0;
                  }
                  v184 *= 2;
                  --v178;
                  BOOL v183 = v177 != 0;
                  BOOL v182 = v175 != 0;
                }
                while (v177 | v175);
                goto LABEL_280;
              }
            }
            uint64_t v179 = 0;
LABEL_280:
            unint64_t v53 = ((unint64_t)(v38 / v67 + v206 / v71 * ((v67 + v186) / v67)) << 14) + (v179 << 8);
            goto LABEL_61;
          }
          if (v198)
          {
            int v46 = 0;
            uint64_t v47 = 0;
            int v48 = 1;
            BOOL v49 = v195;
            BOOL v50 = v196;
            int v52 = v197;
            int v51 = HIDWORD(v197);
            do
            {
              --v51;
              if (v50) {
                v47 |= (unint64_t)(v48 & v35) << v46++;
              }
              else {
                int v51 = 0;
              }
              --v52;
              if (v49) {
                v47 |= (unint64_t)(v48 & v16) << v46++;
              }
              else {
                int v52 = 0;
              }
              v48 *= 2;
              --v46;
              BOOL v49 = v52 != 0;
              BOOL v50 = v51 != 0;
            }
            while (v52 | v51);
          }
          else
          {
            uint64_t v47 = 0;
          }
          unint64_t v53 = v47 << 8;
LABEL_61:
          unsigned int v54 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v54 <= 1) {
            unsigned int v54 = 1;
          }
          unsigned int v55 = v54 + 7;
          if (v55 < 0x10) {
            unsigned int v56 = 0;
          }
          else {
            unsigned int v56 = 32 - __clz(~(-1 << -(char)__clz((v55 >> 3) - 1)));
          }
          unsigned int v57 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10)
          {
            unsigned int v59 = 0;
            if (!v56)
            {
LABEL_87:
              unint64_t v61 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
            if (!(v59 | v56)) {
              goto LABEL_87;
            }
          }
          int v60 = 0;
          unint64_t v61 = 0;
          BOOL v62 = v56 != 0;
          BOOL v63 = v59 != 0;
          int v64 = 1;
          do
          {
            --v56;
            BOOL v65 = !v62;
            if (v62)
            {
              unint64_t v66 = ((unint64_t)(v64 & v35) << v60) | v61;
            }
            else
            {
              unsigned int v56 = 0;
              unint64_t v66 = v61;
            }
            if (!v65) {
              ++v60;
            }
            --v59;
            if (v63)
            {
              unint64_t v61 = ((unint64_t)(v64 & v16) << v60) | v66;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v61 = v66;
            }
            if (v63) {
              ++v60;
            }
            v64 *= 2;
            --v60;
            BOOL v63 = v59 != 0;
            BOOL v62 = v56 != 0;
          }
          while (v59 | v56);
LABEL_88:
          uint64_t v72 = (int16x8_t *)(a3 + v53);
          if (v201)
          {
            memcpy(__dst, v72, sizeof(__dst));
            uint64_t v25 = v211;
            unsigned int v26 = a7;
            uint64_t v72 = (int16x8_t *)__dst;
          }
          char v73 = (unsigned __int8 *)(a4 + 8 * v61);
          uint64_t v74 = (int16x8_t *)(v204 + 8 * (v40 - v26));
          char v75 = v42 < 8 || v43;
          if ((v75 & 1) == 0 && v212 > 7)
          {
            uint64_t v76 = *(void *)(v25 + 208);
            int v77 = *(_DWORD *)(v76 + 52);
            unsigned int v78 = *v73;
            if (*v73)
            {
              uint64_t v27 = a11;
              if (v78 < 0xF0)
              {
                if (v78 == 63)
                {
                  int16x8_t v79 = *v72;
                  int16x8_t v30 = v72[1];
                  int16x8_t v31 = v72[2];
                  int16x8_t v29 = v72[3];
                  *uint64_t v74 = *v72;
                  v74[1] = v31;
                  float32x4_t v88 = (int16x8_t *)((char *)v74 + a11);
                  *float32x4_t v88 = v30;
                  v88[1] = v29;
                  uint64_t v80 = 64;
                }
                else if (v78 == 1)
                {
                  int16x8_t v79 = vld1q_dup_s16(v72->i16);
                  *uint64_t v74 = v79;
                  v74[1] = v79;
                  float32x4_t v87 = (int16x8_t *)((char *)v74 + a11);
                  *float32x4_t v87 = v79;
                  v87[1] = v79;
                  uint64_t v80 = 2;
                }
                else
                {
                  uint64_t v80 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v74, a11, (uint64_t)v72, v78, *(double *)v32.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v74, a11, (uint64_t)v72, v78, *(_DWORD *)(v76 + 52));
                uint64_t v80 = 32;
              }
            }
            else
            {
              uint64_t v80 = 0;
              v79.i64[0] = 0;
              *uint64_t v74 = 0u;
              v74[1] = 0u;
              uint64_t v27 = a11;
              uint64_t v86 = &v74->i8[a11];
              *(_OWORD *)uint64_t v86 = 0u;
              *((_OWORD *)v86 + 1) = 0u;
            }
            uint64_t v89 = (uint64_t)v72->i64 + v80;
            float32x4_t v90 = (int16x8_t *)((char *)v74 + v193);
            unsigned int v91 = v73[1];
            if (v73[1])
            {
              if (v91 < 0xF0)
              {
                if (v91 == 63)
                {
                  int16x8_t v92 = *(int16x8_t *)v89;
                  int16x8_t v30 = *(int16x8_t *)(v89 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v89 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v89 + 48);
                  *float32x4_t v90 = *(int16x8_t *)v89;
                  v90[1] = v31;
                  uint64_t v96 = (int16x8_t *)((char *)v90 + v27);
                  *uint64_t v96 = v30;
                  v96[1] = v29;
                  uint64_t v93 = 64;
                }
                else if (v91 == 1)
                {
                  int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
                  *float32x4_t v90 = v92;
                  v90[1] = v92;
                  unsigned int v95 = (int16x8_t *)((char *)v90 + v27);
                  *unsigned int v95 = v92;
                  v95[1] = v92;
                  uint64_t v93 = 2;
                }
                else
                {
                  uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v74 + v193), v27, v89, v91, *(double *)v79.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v74->i16[(unint64_t)v193 / 2], v27, v89, v91, v77);
                uint64_t v93 = 32;
              }
            }
            else
            {
              uint64_t v93 = 0;
              v92.i64[0] = 0;
              *float32x4_t v90 = 0u;
              v90[1] = 0u;
              float32x4_t v94 = &v90->i8[v27];
              *(_OWORD *)float32x4_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v97 = v89 + v93;
            unsigned int v98 = v74 + 2;
            unsigned int v99 = v73[2];
            if (v73[2])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 63)
                {
                  int16x8_t v100 = *(int16x8_t *)v97;
                  int16x8_t v30 = *(int16x8_t *)(v97 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v97 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v97 + 48);
                  v74[2] = *(int16x8_t *)v97;
                  v74[3] = v31;
                  float32x4_t v104 = &v98->i8[v27];
                  *(int16x8_t *)float32x4_t v104 = v30;
                  *((int16x8_t *)v104 + 1) = v29;
                  uint64_t v101 = 64;
                }
                else if (v99 == 1)
                {
                  int16x8_t v100 = vld1q_dup_s16((const __int16 *)v97);
                  v74[2] = v100;
                  v74[3] = v100;
                  uint64_t v103 = (int16x8_t *)((char *)v98 + v27);
                  *uint64_t v103 = v100;
                  v103[1] = v100;
                  uint64_t v101 = 2;
                }
                else
                {
                  uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v98, v27, v97, v99, *(double *)v92.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v98, v27, v97, v99, v77);
                uint64_t v101 = 32;
              }
            }
            else
            {
              uint64_t v101 = 0;
              v100.i64[0] = 0;
              *unsigned int v98 = 0u;
              v74[3] = 0u;
              float32x4_t v102 = &v98->i8[v27];
              *(_OWORD *)float32x4_t v102 = 0u;
              *((_OWORD *)v102 + 1) = 0u;
            }
            uint64_t v105 = v97 + v101;
            long long v106 = v90 + 2;
            unsigned int v107 = v73[3];
            if (v73[3])
            {
              if (v107 < 0xF0)
              {
                if (v107 == 63)
                {
                  int16x8_t v108 = *(int16x8_t *)v105;
                  int16x8_t v30 = *(int16x8_t *)(v105 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v105 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v105 + 48);
                  v90[2] = *(int16x8_t *)v105;
                  v90[3] = v31;
                  unsigned int v112 = &v106->i8[v27];
                  *(int16x8_t *)unsigned int v112 = v30;
                  *((int16x8_t *)v112 + 1) = v29;
                  uint64_t v109 = 64;
                }
                else if (v107 == 1)
                {
                  int16x8_t v108 = vld1q_dup_s16((const __int16 *)v105);
                  v90[2] = v108;
                  v90[3] = v108;
                  int v111 = (int16x8_t *)((char *)v106 + v27);
                  *int v111 = v108;
                  v111[1] = v108;
                  uint64_t v109 = 2;
                }
                else
                {
                  uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v106, v27, v105, v107, *(double *)v100.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v106, v27, v105, v107, v77);
                uint64_t v109 = 32;
              }
            }
            else
            {
              uint64_t v109 = 0;
              v108.i64[0] = 0;
              int16x8_t *v106 = 0u;
              v90[3] = 0u;
              long long v110 = &v106->i8[v27];
              *(_OWORD *)long long v110 = 0u;
              *((_OWORD *)v110 + 1) = 0u;
            }
            uint64_t v113 = v105 + v109;
            unsigned int v114 = (int16x8_t *)((char *)v74 + v192);
            unsigned int v115 = v73[4];
            if (v73[4])
            {
              if (v115 < 0xF0)
              {
                if (v115 == 63)
                {
                  int16x8_t v116 = *(int16x8_t *)v113;
                  int16x8_t v30 = *(int16x8_t *)(v113 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v113 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v113 + 48);
                  *unsigned int v114 = *(int16x8_t *)v113;
                  v114[1] = v31;
                  long long v120 = (int16x8_t *)((char *)v114 + v27);
                  *long long v120 = v30;
                  v120[1] = v29;
                  uint64_t v117 = 64;
                }
                else if (v115 == 1)
                {
                  int16x8_t v116 = vld1q_dup_s16((const __int16 *)v113);
                  *unsigned int v114 = v116;
                  v114[1] = v116;
                  int v119 = (int16x8_t *)((char *)v114 + v27);
                  *int v119 = v116;
                  v119[1] = v116;
                  uint64_t v117 = 2;
                }
                else
                {
                  uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)((char *)v74 + v192), v27, v113, v115, *(double *)v108.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v74->i16[(unint64_t)v192 / 2], v27, v113, v115, v77);
                uint64_t v117 = 32;
              }
            }
            else
            {
              uint64_t v117 = 0;
              v116.i64[0] = 0;
              *unsigned int v114 = 0u;
              v114[1] = 0u;
              float32x4_t v118 = &v114->i8[v27];
              *(_OWORD *)float32x4_t v118 = 0u;
              *((_OWORD *)v118 + 1) = 0u;
            }
            uint64_t v121 = v113 + v117;
            long long v122 = (int16x8_t *)((char *)v74 + 6 * a11);
            unsigned int v123 = v73[5];
            if (v73[5])
            {
              if (v123 < 0xF0)
              {
                if (v123 == 63)
                {
                  int16x8_t v124 = *(int16x8_t *)v121;
                  int16x8_t v30 = *(int16x8_t *)(v121 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v121 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v121 + 48);
                  *long long v122 = *(int16x8_t *)v121;
                  v122[1] = v31;
                  unint64_t v128 = (int16x8_t *)((char *)v122 + v27);
                  *unint64_t v128 = v30;
                  v128[1] = v29;
                  uint64_t v125 = 64;
                }
                else if (v123 == 1)
                {
                  int16x8_t v124 = vld1q_dup_s16((const __int16 *)v121);
                  *long long v122 = v124;
                  v122[1] = v124;
                  int8x8_t v127 = (int16x8_t *)((char *)v122 + v27);
                  *int8x8_t v127 = v124;
                  v127[1] = v124;
                  uint64_t v125 = 2;
                }
                else
                {
                  uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v122, v27, v121, v123, *(double *)v116.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v122, v27, v121, v123, v77);
                uint64_t v125 = 32;
              }
            }
            else
            {
              uint64_t v125 = 0;
              v124.i64[0] = 0;
              *long long v122 = 0u;
              v122[1] = 0u;
              long long v126 = &v122->i8[v27];
              *(_OWORD *)long long v126 = 0u;
              *((_OWORD *)v126 + 1) = 0u;
            }
            uint64_t v129 = v121 + v125;
            unsigned int v130 = v114 + 2;
            unsigned int v131 = v73[6];
            if (v73[6])
            {
              if (v131 < 0xF0)
              {
                if (v131 == 63)
                {
                  int16x8_t v132 = *(int16x8_t *)v129;
                  int16x8_t v30 = *(int16x8_t *)(v129 + 16);
                  int16x8_t v31 = *(int16x8_t *)(v129 + 32);
                  int16x8_t v29 = *(int16x8_t *)(v129 + 48);
                  float32x4_t v114[2] = *(int16x8_t *)v129;
                  v114[3] = v31;
                  long long v136 = &v130->i8[v27];
                  *(int16x8_t *)long long v136 = v30;
                  *((int16x8_t *)v136 + 1) = v29;
                  uint64_t v133 = 64;
                }
                else if (v131 == 1)
                {
                  int16x8_t v132 = vld1q_dup_s16((const __int16 *)v129);
                  float32x4_t v114[2] = v132;
                  v114[3] = v132;
                  float32x4_t v135 = (int16x8_t *)((char *)v130 + v27);
                  *float32x4_t v135 = v132;
                  v135[1] = v132;
                  uint64_t v133 = 2;
                }
                else
                {
                  uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v130, v27, v129, v131, *(double *)v124.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v130, v27, v129, v131, v77);
                uint64_t v133 = 32;
              }
            }
            else
            {
              uint64_t v133 = 0;
              v132.i64[0] = 0;
              *unsigned int v130 = 0u;
              v114[3] = 0u;
              unsigned int v134 = &v130->i8[v27];
              *(_OWORD *)unsigned int v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            long long v137 = v122 + 2;
            unsigned int v138 = v73[7];
            if (v73[7])
            {
              uint64_t v139 = v129 + v133;
              if (v138 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v137, v27, v139, v138, v77);
              }
              else if (v138 == 63)
              {
                int16x8_t v32 = *(int16x8_t *)v139;
                int16x8_t v30 = *(int16x8_t *)(v139 + 16);
                int16x8_t v31 = *(int16x8_t *)(v139 + 32);
                int16x8_t v29 = *(int16x8_t *)(v139 + 48);
                v122[2] = *(int16x8_t *)v139;
                v122[3] = v31;
                long long v141 = &v137->i8[v27];
                *(int16x8_t *)long long v141 = v30;
                *((int16x8_t *)v141 + 1) = v29;
              }
              else
              {
                if (v138 == 1)
                {
                  int16x8_t v32 = vld1q_dup_s16((const __int16 *)v139);
                  v122[2] = v32;
                  v122[3] = v32;
                  goto LABEL_173;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v137, v27, v139, v138, *(double *)v132.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              int16x8_t v32 = 0uLL;
              *long long v137 = 0u;
              v122[3] = 0u;
LABEL_173:
              long long v140 = (int16x8_t *)((char *)v137 + v27);
              *long long v140 = v32;
              v140[1] = v32;
            }
            unsigned int v26 = a7;
            uint64_t v25 = v211;
LABEL_28:
            unsigned int v37 = v35 + 1;
            goto LABEL_29;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v72;
          char v220 = v42;
          char v221 = v212;
          unsigned int v216 = v194;
          unsigned int v217 = v40 - v38;
          block[6] = v73;
          uint64_t v214 = v204 + 8 * (v40 - v26);
          uint64_t v27 = a11;
          uint64_t v215 = a11;
          unsigned int v218 = v205;
          unsigned int v219 = v41;
          if (v43)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v211;
            unsigned int v26 = a7;
            goto LABEL_28;
          }
          uint64_t v81 = *(void *)(v25 + 208);
          int v82 = *(_DWORD *)(v81 + 52);
          unsigned int v83 = *v73;
          if (*v73)
          {
            if (v83 < 0xF0)
            {
              if (v83 == 63)
              {
                int16x8_t v84 = *v72;
                int16x8_t v30 = v72[1];
                int16x8_t v31 = v72[2];
                int16x8_t v29 = v72[3];
                int16x8_t v223 = *v72;
                int16x8_t v224 = v31;
                int16x8_t v227 = v30;
                int16x8_t v228 = v29;
                uint64_t v85 = 64;
              }
              else if (v83 == 1)
              {
                int16x8_t v84 = vld1q_dup_s16(v72->i16);
                int16x8_t v223 = v84;
                int16x8_t v224 = v84;
                int16x8_t v227 = v84;
                int16x8_t v228 = v84;
                uint64_t v85 = 2;
              }
              else
              {
                uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v223, 64, (uint64_t)v72, v83, *(double *)v32.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v223, 64, (uint64_t)v72, v83, *(_DWORD *)(v81 + 52));
              uint64_t v85 = 32;
            }
          }
          else
          {
            uint64_t v85 = 0;
            v84.i64[0] = 0;
            int16x8_t v223 = 0u;
            int16x8_t v224 = 0u;
            int16x8_t v227 = 0u;
            int16x8_t v228 = 0u;
          }
          uint64_t v142 = (uint64_t)v72->i64 + v85;
          unsigned int v143 = v73[1];
          if (v73[1])
          {
            if (v143 < 0xF0)
            {
              if (v143 == 63)
              {
                int16x8_t v144 = *(int16x8_t *)v142;
                int16x8_t v30 = *(int16x8_t *)(v142 + 16);
                int16x8_t v31 = *(int16x8_t *)(v142 + 32);
                int16x8_t v29 = *(int16x8_t *)(v142 + 48);
                int16x8_t v231 = *(int16x8_t *)v142;
                int16x8_t v232 = v31;
                int16x8_t v235 = v30;
                int16x8_t v236 = v29;
                uint64_t v145 = 64;
              }
              else if (v143 == 1)
              {
                int16x8_t v144 = vld1q_dup_s16((const __int16 *)v142);
                int16x8_t v231 = v144;
                int16x8_t v232 = v144;
                int16x8_t v235 = v144;
                int16x8_t v236 = v144;
                uint64_t v145 = 2;
              }
              else
              {
                uint64_t v145 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v231, 64, v142, v143, *(double *)v84.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v231, 64, v142, v143, v82);
              uint64_t v145 = 32;
            }
          }
          else
          {
            uint64_t v145 = 0;
            v144.i64[0] = 0;
            int16x8_t v231 = 0u;
            int16x8_t v232 = 0u;
            int16x8_t v235 = 0u;
            int16x8_t v236 = 0u;
          }
          uint64_t v146 = v142 + v145;
          unsigned int v147 = v73[2];
          if (v73[2])
          {
            if (v147 < 0xF0)
            {
              if (v147 == 63)
              {
                int16x8_t v148 = *(int16x8_t *)v146;
                int16x8_t v30 = *(int16x8_t *)(v146 + 16);
                int16x8_t v31 = *(int16x8_t *)(v146 + 32);
                int16x8_t v29 = *(int16x8_t *)(v146 + 48);
                int16x8_t v225 = *(int16x8_t *)v146;
                int16x8_t v226 = v31;
                int16x8_t v229 = v30;
                int16x8_t v230 = v29;
                uint64_t v149 = 64;
              }
              else if (v147 == 1)
              {
                int16x8_t v148 = vld1q_dup_s16((const __int16 *)v146);
                int16x8_t v225 = v148;
                int16x8_t v226 = v148;
                int16x8_t v229 = v148;
                int16x8_t v230 = v148;
                uint64_t v149 = 2;
              }
              else
              {
                uint64_t v149 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v225, 64, v146, v147, *(double *)v144.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v225, 64, v146, v147, v82);
              uint64_t v149 = 32;
            }
          }
          else
          {
            uint64_t v149 = 0;
            v148.i64[0] = 0;
            int16x8_t v225 = 0u;
            int16x8_t v226 = 0u;
            int16x8_t v229 = 0u;
            int16x8_t v230 = 0u;
          }
          uint64_t v150 = v146 + v149;
          unsigned int v151 = v73[3];
          if (v73[3])
          {
            if (v151 < 0xF0)
            {
              if (v151 == 63)
              {
                int16x8_t v152 = *(int16x8_t *)v150;
                int16x8_t v30 = *(int16x8_t *)(v150 + 16);
                int16x8_t v31 = *(int16x8_t *)(v150 + 32);
                int16x8_t v29 = *(int16x8_t *)(v150 + 48);
                int16x8_t v233 = *(int16x8_t *)v150;
                int16x8_t v234 = v31;
                int16x8_t v237 = v30;
                int16x8_t v238 = v29;
                uint64_t v153 = 64;
              }
              else if (v151 == 1)
              {
                int16x8_t v152 = vld1q_dup_s16((const __int16 *)v150);
                int16x8_t v233 = v152;
                int16x8_t v234 = v152;
                int16x8_t v237 = v152;
                int16x8_t v238 = v152;
                uint64_t v153 = 2;
              }
              else
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v233, 64, v150, v151, *(double *)v148.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v233, 64, v150, v151, v82);
              uint64_t v153 = 32;
            }
          }
          else
          {
            uint64_t v153 = 0;
            v152.i64[0] = 0;
            int16x8_t v233 = 0u;
            int16x8_t v234 = 0u;
            int16x8_t v237 = 0u;
            int16x8_t v238 = 0u;
          }
          uint64_t v154 = v150 + v153;
          unsigned int v155 = v73[4];
          if (v73[4])
          {
            if (v155 < 0xF0)
            {
              if (v155 == 63)
              {
                int16x8_t v156 = *(int16x8_t *)v154;
                int16x8_t v30 = *(int16x8_t *)(v154 + 16);
                int16x8_t v31 = *(int16x8_t *)(v154 + 32);
                int16x8_t v29 = *(int16x8_t *)(v154 + 48);
                int16x8_t v239 = *(int16x8_t *)v154;
                int16x8_t v240 = v31;
                int16x8_t v243 = v30;
                int16x8_t v244 = v29;
                uint64_t v157 = 64;
              }
              else if (v155 == 1)
              {
                int16x8_t v156 = vld1q_dup_s16((const __int16 *)v154);
                int16x8_t v239 = v156;
                int16x8_t v240 = v156;
                int16x8_t v243 = v156;
                int16x8_t v244 = v156;
                uint64_t v157 = 2;
              }
              else
              {
                uint64_t v157 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v239, 64, v154, v155, *(double *)v152.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v239, 64, v154, v155, v82);
              uint64_t v157 = 32;
            }
          }
          else
          {
            uint64_t v157 = 0;
            v156.i64[0] = 0;
            int16x8_t v239 = 0u;
            int16x8_t v240 = 0u;
            int16x8_t v243 = 0u;
            int16x8_t v244 = 0u;
          }
          uint64_t v158 = v154 + v157;
          unsigned int v159 = v73[5];
          if (v73[5])
          {
            if (v159 < 0xF0)
            {
              if (v159 == 63)
              {
                int16x8_t v160 = *(int16x8_t *)v158;
                int16x8_t v30 = *(int16x8_t *)(v158 + 16);
                int16x8_t v31 = *(int16x8_t *)(v158 + 32);
                int16x8_t v29 = *(int16x8_t *)(v158 + 48);
                int16x8_t v247 = *(int16x8_t *)v158;
                int16x8_t v248 = v31;
                int16x8_t v251 = v30;
                int16x8_t v252 = v29;
                uint64_t v161 = 64;
              }
              else if (v159 == 1)
              {
                int16x8_t v160 = vld1q_dup_s16((const __int16 *)v158);
                int16x8_t v247 = v160;
                int16x8_t v248 = v160;
                int16x8_t v251 = v160;
                int16x8_t v252 = v160;
                uint64_t v161 = 2;
              }
              else
              {
                uint64_t v161 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v247, 64, v158, v159, *(double *)v156.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v247, 64, v158, v159, v82);
              uint64_t v161 = 32;
            }
          }
          else
          {
            uint64_t v161 = 0;
            v160.i64[0] = 0;
            int16x8_t v247 = 0u;
            int16x8_t v248 = 0u;
            int16x8_t v251 = 0u;
            int16x8_t v252 = 0u;
          }
          uint64_t v162 = v158 + v161;
          unsigned int v163 = v73[6];
          if (v73[6])
          {
            if (v163 < 0xF0)
            {
              if (v163 == 63)
              {
                int16x8_t v164 = *(int16x8_t *)v162;
                int16x8_t v30 = *(int16x8_t *)(v162 + 16);
                int16x8_t v31 = *(int16x8_t *)(v162 + 32);
                int16x8_t v29 = *(int16x8_t *)(v162 + 48);
                int16x8_t v241 = *(int16x8_t *)v162;
                int16x8_t v242 = v31;
                int16x8_t v245 = v30;
                int16x8_t v246 = v29;
                uint64_t v165 = 64;
                unsigned int v166 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else if (v163 == 1)
              {
                int16x8_t v164 = vld1q_dup_s16((const __int16 *)v162);
                int16x8_t v241 = v164;
                int16x8_t v242 = v164;
                int16x8_t v245 = v164;
                int16x8_t v246 = v164;
                uint64_t v165 = 2;
                unsigned int v166 = v73[7];
                if (!v73[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v165 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v241, 64, v162, v163, *(double *)v160.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
                unsigned int v166 = v73[7];
                if (!v73[7])
                {
LABEL_226:
                  v32.i64[0] = 0;
                  int16x8_t v249 = 0u;
                  int16x8_t v250 = 0u;
                  int16x8_t v253 = 0u;
                  int16x8_t v254 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v241, 64, v162, v163, v82);
              uint64_t v165 = 32;
              unsigned int v166 = v73[7];
              if (!v73[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v165 = 0;
            v164.i64[0] = 0;
            int16x8_t v241 = 0u;
            int16x8_t v242 = 0u;
            int16x8_t v245 = 0u;
            int16x8_t v246 = 0u;
            unsigned int v166 = v73[7];
            if (!v73[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v167 = v162 + v165;
          if (v166 < 0xF0)
          {
            if (v166 == 63)
            {
              int16x8_t v32 = *(int16x8_t *)v167;
              int16x8_t v30 = *(int16x8_t *)(v167 + 16);
              int16x8_t v31 = *(int16x8_t *)(v167 + 32);
              int16x8_t v29 = *(int16x8_t *)(v167 + 48);
              int16x8_t v249 = *(int16x8_t *)v167;
              int16x8_t v250 = v31;
              int16x8_t v253 = v30;
              int16x8_t v254 = v29;
            }
            else if (v166 == 1)
            {
              int16x8_t v32 = vld1q_dup_s16((const __int16 *)v167);
              int16x8_t v249 = v32;
              int16x8_t v250 = v32;
              int16x8_t v253 = v32;
              int16x8_t v254 = v32;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v249, 64, v167, v166, *(double *)v164.i64, *(double *)v30.i64, *(double *)v31.i64, *(int8x8_t *)v29.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v249, 64, v167, v166, v82);
          }
LABEL_243:
          unsigned int v37 = v35 + 1;
          unint64_t v168 = v218;
          unsigned int v26 = a7;
          uint64_t v25 = v211;
          if (v218)
          {
            unint64_t v169 = 0;
            long long v170 = &v223.i8[64 * (unint64_t)v216 + 8 * v217];
            unsigned int v171 = v219;
            do
            {
              if (v171)
              {
                uint64_t v172 = 0;
                uint64_t v173 = v214 + v215 * v169;
                do
                {
                  *(unsigned char *)(v173 + v172) = v170[v172];
                  ++v172;
                  unsigned int v171 = v219;
                }
                while (8 * (unint64_t)v219 > v172);
                unint64_t v168 = v218;
              }
              ++v169;
              v170 += 64;
            }
            while (v169 < v168);
          }
LABEL_29:
          BOOL v20 = v35 == v199 >> 3;
          unsigned int v35 = v37;
        }
        while (!v20);
        BOOL v20 = v16++ == v191;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  v154[24] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v132 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v114 = a8 + a10 - 1;
  unsigned int v116 = v114 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(a1 + 112);
  uint64_t v135 = a1;
  if (*(void *)(a1 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v126 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v26 = a1;
  BOOL v125 = isLevelTiled;
  if (v17 <= v116)
  {
    unsigned int v124 = a7 + a9 - 1;
    unsigned int v113 = a7 >> 3;
    if (a7 >> 3 <= v124 >> 3)
    {
      unsigned int v110 = a5 - 1;
      unsigned int v112 = (a6 - 1) >> 3;
      int v133 = ((a5 - 1) & 7) + 1;
      unsigned int v134 = (a5 - 1) >> 3;
      int v111 = ((a6 - 1) & 7) + 1;
      uint64_t v117 = 4 * a11;
      uint64_t v118 = 2 * a11;
      uint32x2_t v27 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      int8x8_t v28 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v27, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v27));
      __int32 v123 = v28.i32[0] | v28.i32[1];
      BOOL v121 = v28.i32[1] != 0;
      int8x8_t v122 = v28;
      BOOL v120 = v28.i32[0] != 0;
      unint64_t v109 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v29 = (8 * v17) | 7;
        if (8 * v17 <= v132) {
          int v30 = v132;
        }
        else {
          int v30 = 8 * v17;
        }
        unsigned int v31 = v113;
        if (v114 < v29) {
          unsigned int v29 = v114;
        }
        int v119 = v30 - 8 * v17;
        int v130 = v29 - v30 + 1;
        unsigned int v131 = 8 * v17;
        int v32 = v111;
        if (v17 != v112) {
          int v32 = 8;
        }
        unsigned int v136 = v32;
        uint64_t v129 = a2 + (v30 - v132) * a11;
        do
        {
          unsigned int v33 = 8 * v31;
          unsigned int v34 = 8 * (v31 + 1) - 1;
          if (8 * v31 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 8 * v31;
          }
          if (v124 < v34) {
            unsigned int v34 = v124;
          }
          int v36 = v34 - v35 + 1;
          if (v31 == v134) {
            unsigned int v37 = v133;
          }
          else {
            unsigned int v37 = 8;
          }
          BOOL v38 = 1;
          if (v131 >= v132 && v33 >= a7)
          {
            int v39 = v133;
            if (v31 != v134) {
              int v39 = 8;
            }
            BOOL v38 = v36 != v39 || v130 != v136;
          }
          if (v125)
          {
            unsigned int v62 = 0;
            uint64_t v63 = v109 >> (*(unsigned char *)(v26 + 57) != 0);
            char v64 = 1;
            if (v63 > 127)
            {
              if (v63 > 511)
              {
                if (v63 == 512)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 16;
                  unsigned int v66 = 16;
                }
                else
                {
                  char v65 = 1;
                  unsigned int v66 = 0;
                  if (v63 == 1024)
                  {
                    char v64 = 0;
                    unsigned int v66 = 8;
                    unsigned int v62 = 16;
                  }
                }
              }
              else if (v63 == 128)
              {
                char v64 = 0;
                char v65 = 0;
                unsigned int v62 = 32;
                unsigned int v66 = 32;
              }
              else
              {
                char v65 = 1;
                unsigned int v66 = 0;
                if (v63 == 256)
                {
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 16;
                  unsigned int v62 = 32;
                }
              }
            }
            else
            {
              char v65 = 1;
              unsigned int v66 = 0;
              switch(v63)
              {
                case 4:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 128;
                  unsigned int v62 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 128;
                  unsigned int v66 = 128;
                  break;
                case 16:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v66 = 64;
                  unsigned int v62 = 128;
                  break;
                case 32:
                  char v64 = 0;
                  char v65 = 0;
                  unsigned int v62 = 64;
                  unsigned int v66 = 64;
                  break;
                default:
                  if (v63 == 64)
                  {
                    char v64 = 0;
                    char v65 = 0;
                    unsigned int v66 = 32;
                    unsigned int v62 = 64;
                  }
                  break;
              }
            }
            unsigned int v98 = (v62 >> 3) - 1;
            if (v64) {
              unsigned int v99 = 0;
            }
            else {
              unsigned int v99 = 32 - __clz(~(-1 << -(char)__clz(v98)));
            }
            unsigned int v100 = (v66 >> 3) - 1;
            if (v65)
            {
              unsigned int v101 = 0;
              if (v99) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v101 = 32 - __clz(~(-1 << -(char)__clz(v100)));
              if (v101 | v99)
              {
LABEL_121:
                int v102 = 0;
                uint64_t v103 = 0;
                int v104 = v31 & v98;
                int v105 = v17 & v100;
                BOOL v106 = v99 != 0;
                BOOL v107 = v101 != 0;
                int v108 = 1;
                do
                {
                  --v99;
                  if (v106) {
                    v103 |= (unint64_t)(v108 & v104) << v102++;
                  }
                  else {
                    unsigned int v99 = 0;
                  }
                  --v101;
                  if (v107) {
                    v103 |= (unint64_t)(v108 & v105) << v102++;
                  }
                  else {
                    unsigned int v101 = 0;
                  }
                  v108 *= 2;
                  --v102;
                  BOOL v107 = v101 != 0;
                  BOOL v106 = v99 != 0;
                }
                while (v101 | v99);
                goto LABEL_133;
              }
            }
            uint64_t v103 = 0;
LABEL_133:
            unint64_t v48 = ((unint64_t)(v33 / v62 + v131 / v66 * ((v62 + v110) / v62)) << 14) + (v103 << 9);
            goto LABEL_60;
          }
          if (v123)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v120;
            BOOL v45 = v121;
            __int32 v47 = v122.i32[0];
            __int32 v46 = v122.i32[1];
            do
            {
              --v46;
              if (v45) {
                v42 |= (unint64_t)(v43 & v31) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v44 = v47 != 0;
              BOOL v45 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 9;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v26 + 128) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 7;
          if (v50 < 0x10) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 3) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v26 + 132) >> (*(unsigned char *)(v26 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10)
          {
            unsigned int v54 = 0;
            if (!v51)
            {
LABEL_86:
              unint64_t v56 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
            if (!(v54 | v51)) {
              goto LABEL_86;
            }
          }
          int v55 = 0;
          unint64_t v56 = 0;
          BOOL v57 = v51 != 0;
          BOOL v58 = v54 != 0;
          int v59 = 1;
          do
          {
            --v51;
            BOOL v60 = !v57;
            if (v57)
            {
              unint64_t v61 = ((unint64_t)(v59 & v31) << v55) | v56;
            }
            else
            {
              unsigned int v51 = 0;
              unint64_t v61 = v56;
            }
            if (!v60) {
              ++v55;
            }
            --v54;
            if (v58)
            {
              unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
            }
            else
            {
              unsigned int v54 = 0;
              unint64_t v56 = v61;
            }
            if (v58) {
              ++v55;
            }
            v59 *= 2;
            --v55;
            BOOL v58 = v54 != 0;
            BOOL v57 = v51 != 0;
          }
          while (v54 | v51);
LABEL_87:
          unsigned int v67 = (unsigned char *)(a3 + v48);
          if (v126)
          {
            int v68 = v36;
            unsigned int v69 = v37;
            memcpy(__dst, (const void *)(a3 + v48), sizeof(__dst));
            unsigned int v37 = v69;
            int v36 = v68;
            uint64_t v26 = v135;
            unsigned int v67 = __dst;
          }
          char v70 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v71 = a7;
          uint64_t v72 = v129 + 16 * (v35 - a7);
          char v73 = v37 < 8 || v38;
          if ((v73 & 1) == 0 && v136 > 7)
          {
            int v74 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
            uint64_t v75 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72, a11, (uint64_t)v67, *v70, v74)];
            uint64_t v76 = v75
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v118, a11, v75, v70[1], v74);
            uint64_t v77 = v76
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + 64, a11, v76, v70[2], v74);
            uint64_t v78 = v77
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v118 + 64, a11, v77, v70[3], v74);
            uint64_t v79 = v72 + v117;
            uint64_t v80 = v78
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v72 + v117, a11, v78, v70[4], v74);
            uint64_t v81 = v72 + 6 * a11;
            uint64_t v82 = v80
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81, a11, v80, v70[5], v74);
            uint64_t v83 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v79 + 64, a11, v82, v70[6], v74);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v81 + 64, a11, v82 + v83, v70[7], v74);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE16ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v26;
          block[5] = v67;
          char v144 = v37;
          char v145 = v136;
          unsigned int v140 = v119;
          unsigned int v141 = v35 - v33;
          block[6] = v70;
          uint64_t v138 = v72;
          uint64_t v139 = a11;
          unsigned int v142 = v130;
          unsigned int v143 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v26 + 8) + 7384), block);
LABEL_27:
            a7 = v71;
            goto LABEL_28;
          }
          int v84 = *(_DWORD *)(*(void *)(v26 + 208) + 52);
          uint64_t v85 = (uint64_t)&v67[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v147, 128, (uint64_t)v67, *v70, v84)];
          uint64_t v86 = v85
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v149, 128, v85, v70[1], v84);
          uint64_t v87 = v86
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v148, 128, v86, v70[2], v84);
          uint64_t v88 = v87
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v150, 128, v87, v70[3], v84);
          uint64_t v89 = v88
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v151, 128, v88, v70[4], v84);
          uint64_t v90 = v89
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v153, 128, v89, v70[5], v84);
          uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v152, 128, v90, v70[6], v84);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)16,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v154, 128, v90 + v91, v70[7], v84);
          unint64_t v92 = v142;
          a7 = v71;
          if (v142)
          {
            unint64_t v93 = 0;
            float32x4_t v94 = &v147[128 * (unint64_t)v140 + 16 * v141];
            unsigned int v95 = v143;
            do
            {
              if (v95)
              {
                uint64_t v96 = 0;
                uint64_t v97 = v138 + v139 * v93;
                do
                {
                  *(unsigned char *)(v97 + v96) = v94[v96];
                  ++v96;
                  unsigned int v95 = v143;
                }
                while (16 * (unint64_t)v143 > v96);
                unint64_t v92 = v142;
              }
              ++v93;
              v94 += 128;
            }
            while (v93 < v92);
          }
LABEL_28:
          BOOL v21 = v31++ == v124 >> 3;
          uint64_t v26 = v135;
        }
        while (!v21);
        BOOL v21 = v17++ == v116;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v388 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  uint64_t v16 = a1;
  unsigned int v308 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v290 = a8 + a10 - 1;
  unsigned int v292 = v290 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  uint64_t v312 = v16;
  if (*(void *)(v16 + 168))
  {
    __int16 CacheMode = IOSurfaceGetCacheMode();
    uint64_t v16 = v312;
    int v21 = CacheMode & 0xF00;
  }
  else
  {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v302 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  uint64_t v28 = v312;
  BOOL v301 = isLevelTiled;
  unsigned int v29 = a7;
  if (v17 <= v292)
  {
    unsigned int v300 = a7 + a9 - 1;
    if (a7 >> 3 <= v300 >> 3)
    {
      uint64_t v30 = a11;
      unsigned int v287 = a5 - 1;
      unsigned int v310 = (a5 - 1) >> 3;
      int v309 = ((a5 - 1) & 7) + 1;
      int v288 = ((a6 - 1) & 7) + 1;
      unsigned int v289 = (a6 - 1) >> 3;
      uint64_t v293 = 4 * a11;
      uint64_t v294 = 2 * a11;
      uint32x2_t v31 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      v32.i64[1] = -1;
      *(int32x2_t *)v32.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v31, 3uLL)))))));
      *(int8x8_t *)v27.i8 = vbic_s8(*(int8x8_t *)v32.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v31));
      __int32 v299 = v27.i32[0] | v27.i32[1];
      BOOL v297 = v27.i32[1] != 0;
      uint64_t v298 = v27.i64[0];
      BOOL v296 = v27.i32[0] != 0;
      unint64_t v286 = 8 * v19 * (unint64_t)v18;
      do
      {
        unsigned int v33 = (8 * v17) | 7;
        if (8 * v17 <= v308) {
          int v34 = v308;
        }
        else {
          int v34 = 8 * v17;
        }
        unsigned int v35 = a7 >> 3;
        if (v290 < v33) {
          unsigned int v33 = v290;
        }
        unsigned int v307 = 8 * v17;
        int v295 = v34 - 8 * v17;
        int v306 = v33 - v34 + 1;
        int v36 = v288;
        if (v17 != v289) {
          int v36 = 8;
        }
        unsigned int v313 = v36;
        uint64_t v305 = a2 + (v34 - v308) * v30;
        do
        {
          unsigned int v39 = 8 * v35;
          unsigned int v40 = 8 * (v35 + 1) - 1;
          if (8 * v35 <= v29) {
            int v41 = v29;
          }
          else {
            int v41 = 8 * v35;
          }
          if (v300 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v35 == v310) {
            unsigned int v43 = v309;
          }
          else {
            unsigned int v43 = 8;
          }
          BOOL v44 = 1;
          if (v307 >= v308 && v39 >= v29)
          {
            int v45 = v309;
            if (v35 != v310) {
              int v45 = 8;
            }
            BOOL v44 = v42 != v45 || v306 != v313;
          }
          if (v301)
          {
            unsigned int v68 = 0;
            uint64_t v69 = v286 >> (*(unsigned char *)(v28 + 57) != 0);
            char v70 = 1;
            if (v69 > 127)
            {
              if (v69 > 511)
              {
                if (v69 == 512)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 16;
                  unsigned int v72 = 16;
                }
                else
                {
                  char v71 = 1;
                  unsigned int v72 = 0;
                  if (v69 == 1024)
                  {
                    char v70 = 0;
                    unsigned int v72 = 8;
                    unsigned int v68 = 16;
                  }
                }
              }
              else if (v69 == 128)
              {
                char v70 = 0;
                char v71 = 0;
                unsigned int v68 = 32;
                unsigned int v72 = 32;
              }
              else
              {
                char v71 = 1;
                unsigned int v72 = 0;
                if (v69 == 256)
                {
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 16;
                  unsigned int v68 = 32;
                }
              }
            }
            else
            {
              char v71 = 1;
              unsigned int v72 = 0;
              switch(v69)
              {
                case 4:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 128;
                  unsigned int v68 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 128;
                  unsigned int v72 = 128;
                  break;
                case 16:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v72 = 64;
                  unsigned int v68 = 128;
                  break;
                case 32:
                  char v70 = 0;
                  char v71 = 0;
                  unsigned int v68 = 64;
                  unsigned int v72 = 64;
                  break;
                default:
                  if (v69 == 64)
                  {
                    char v70 = 0;
                    char v71 = 0;
                    unsigned int v72 = 32;
                    unsigned int v68 = 64;
                  }
                  break;
              }
            }
            unsigned int v275 = (v68 >> 3) - 1;
            if (v70) {
              unsigned int v276 = 0;
            }
            else {
              unsigned int v276 = 32 - __clz(~(-1 << -(char)__clz(v275)));
            }
            unsigned int v277 = (v72 >> 3) - 1;
            if (v71)
            {
              unsigned int v278 = 0;
              if (v276) {
                goto LABEL_267;
              }
            }
            else
            {
              unsigned int v278 = 32 - __clz(~(-1 << -(char)__clz(v277)));
              if (v278 | v276)
              {
LABEL_267:
                int v279 = 0;
                uint64_t v280 = 0;
                int v281 = v35 & v275;
                int v282 = v17 & v277;
                BOOL v283 = v276 != 0;
                BOOL v284 = v278 != 0;
                int v285 = 1;
                do
                {
                  --v276;
                  if (v283) {
                    v280 |= (unint64_t)(v285 & v281) << v279++;
                  }
                  else {
                    unsigned int v276 = 0;
                  }
                  --v278;
                  if (v284) {
                    v280 |= (unint64_t)(v285 & v282) << v279++;
                  }
                  else {
                    unsigned int v278 = 0;
                  }
                  v285 *= 2;
                  --v279;
                  BOOL v284 = v278 != 0;
                  BOOL v283 = v276 != 0;
                }
                while (v278 | v276);
                goto LABEL_279;
              }
            }
            uint64_t v280 = 0;
LABEL_279:
            unint64_t v54 = ((unint64_t)(v39 / v68 + v307 / v72 * ((v68 + v287) / v68)) << 14) + (v280 << 9);
            goto LABEL_61;
          }
          if (v299)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v297;
            BOOL v51 = v296;
            int v52 = HIDWORD(v298);
            int v53 = v298;
            do
            {
              --v52;
              if (v50) {
                v48 |= (unint64_t)(v49 & v35) << v47++;
              }
              else {
                int v52 = 0;
              }
              --v53;
              if (v51) {
                v48 |= (unint64_t)(v49 & v17) << v47++;
              }
              else {
                int v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v51 = v53 != 0;
              BOOL v50 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 9;
LABEL_61:
          unsigned int v55 = *(_DWORD *)(v28 + 128) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 7;
          if (v56 < 0x10) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 3) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(v28 + 132) >> (*(unsigned char *)(v28 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_87:
              unint64_t v62 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_87;
            }
          }
          int v61 = 0;
          unint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            BOOL v66 = !v63;
            if (v63)
            {
              unint64_t v67 = ((unint64_t)(v65 & v35) << v61) | v62;
            }
            else
            {
              unsigned int v57 = 0;
              unint64_t v67 = v62;
            }
            if (!v66) {
              ++v61;
            }
            --v60;
            if (v64)
            {
              unint64_t v62 = ((unint64_t)(v65 & v17) << v61) | v67;
            }
            else
            {
              unsigned int v60 = 0;
              unint64_t v62 = v67;
            }
            if (v64) {
              ++v61;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_88:
          char v73 = (int32x4_t *)(a3 + v54);
          if (v302)
          {
            memcpy(__dst, v73, sizeof(__dst));
            uint64_t v28 = v312;
            unsigned int v29 = a7;
            char v73 = (int32x4_t *)__dst;
          }
          int v74 = (unsigned __int8 *)(a4 + 8 * v62);
          uint64_t v75 = v305 + 16 * (v41 - v29);
          char v76 = v43 < 8 || v44;
          if ((v76 & 1) == 0 && v313 > 7)
          {
            uint64_t v77 = *(void *)(v28 + 208);
            int v78 = *(_DWORD *)(v77 + 52);
            unsigned int v79 = *v74;
            if (*v74)
            {
              uint64_t v30 = a11;
              if (v79 < 0xF0)
              {
                if (v79 == 127)
                {
                  int32x4_t v80 = *v73;
                  int32x4_t v32 = v73[1];
                  int32x4_t v89 = v73[2];
                  int32x4_t v90 = v73[3];
                  int32x4_t v91 = v73[4];
                  int32x4_t v92 = v73[5];
                  int32x4_t v93 = v73[6];
                  int32x4_t v94 = v73[7];
                  *(int32x4_t *)uint64_t v75 = *v73;
                  *(int32x4_t *)(v75 + 16) = v32;
                  unsigned int v95 = (int32x4_t *)(v75 + a11);
                  *(int32x4_t *)(v75 + 32) = v91;
                  *(int32x4_t *)(v75 + 48) = v92;
                  *unsigned int v95 = v89;
                  v95[1] = v90;
                  uint64_t v96 = (int32x4_t *)(v75 + a11 + 32);
                  *uint64_t v96 = v93;
                  v96[1] = v94;
                  uint64_t v81 = 128;
                }
                else if (v79 == 3)
                {
                  int32x4_t v80 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
                  *(int32x4_t *)uint64_t v75 = v80;
                  *(int32x4_t *)(v75 + 16) = v80;
                  *(int32x4_t *)(v75 + 32) = v80;
                  *(int32x4_t *)(v75 + 48) = v80;
                  uint64_t v88 = (int32x4_t *)(v75 + a11);
                  *uint64_t v88 = v80;
                  v88[1] = v80;
                  v88[2] = v80;
                  v88[3] = v80;
                  uint64_t v81 = 4;
                }
                else
                {
                  uint64_t v81 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v75, a11, (uint64_t)v73, v79, v27, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v75, a11, (uint64_t)v73, v79, *(_DWORD *)(v77 + 52));
                uint64_t v81 = 64;
              }
            }
            else
            {
              uint64_t v81 = 0;
              int32x4_t v80 = 0uLL;
              *(_OWORD *)(v75 + 32) = 0u;
              *(_OWORD *)(v75 + 48) = 0u;
              *(_OWORD *)uint64_t v75 = 0u;
              *(_OWORD *)(v75 + 16) = 0u;
              uint64_t v30 = a11;
              uint64_t v87 = (_OWORD *)(v75 + a11);
              v87[2] = 0u;
              v87[3] = 0u;
              *uint64_t v87 = 0u;
              v87[1] = 0u;
            }
            uint64_t v97 = (uint64_t)v73->i64 + v81;
            unsigned int v98 = (int32x4_t *)(v75 + v294);
            unsigned int v99 = v74[1];
            if (v74[1])
            {
              if (v99 < 0xF0)
              {
                if (v99 == 127)
                {
                  int32x4_t v100 = *(int32x4_t *)v97;
                  int32x4_t v32 = *(int32x4_t *)(v97 + 16);
                  long long v104 = *(_OWORD *)(v97 + 32);
                  long long v105 = *(_OWORD *)(v97 + 48);
                  int32x4_t v106 = *(int32x4_t *)(v97 + 64);
                  int32x4_t v107 = *(int32x4_t *)(v97 + 80);
                  long long v108 = *(_OWORD *)(v97 + 96);
                  long long v109 = *(_OWORD *)(v97 + 112);
                  *unsigned int v98 = *(int32x4_t *)v97;
                  v98[1] = v32;
                  unsigned int v110 = &v98->i8[v30];
                  v98[2] = v106;
                  v98[3] = v107;
                  *(_OWORD *)unsigned int v110 = v104;
                  *((_OWORD *)v110 + 1) = v105;
                  int v111 = &v98[2].i8[v30];
                  *(_OWORD *)int v111 = v108;
                  *((_OWORD *)v111 + 1) = v109;
                  uint64_t v101 = 128;
                }
                else if (v99 == 3)
                {
                  int32x4_t v100 = (int32x4_t)vld1q_dup_f32((const float *)v97);
                  *unsigned int v98 = v100;
                  v98[1] = v100;
                  v98[2] = v100;
                  v98[3] = v100;
                  uint64_t v103 = (int32x4_t *)((char *)v98 + v30);
                  *uint64_t v103 = v100;
                  v103[1] = v100;
                  v103[2] = v100;
                  v103[3] = v100;
                  uint64_t v101 = 4;
                }
                else
                {
                  uint64_t v101 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)(v75 + v294), v30, v97, v99, v80, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)(v75 + v294), v30, v97, v99, v78);
                uint64_t v101 = 64;
              }
            }
            else
            {
              uint64_t v101 = 0;
              int32x4_t v100 = 0uLL;
              v98[2] = 0u;
              v98[3] = 0u;
              *unsigned int v98 = 0u;
              v98[1] = 0u;
              int v102 = &v98->i8[v30];
              *((_OWORD *)v102 + 2) = 0u;
              *((_OWORD *)v102 + 3) = 0u;
              *(_OWORD *)int v102 = 0u;
              *((_OWORD *)v102 + 1) = 0u;
            }
            uint64_t v112 = v97 + v101;
            unsigned int v113 = (int16x8_t *)(v75 + 64);
            unsigned int v114 = v74[2];
            if (v74[2])
            {
              if (v114 < 0xF0)
              {
                if (v114 == 127)
                {
                  int32x4_t v115 = *(int32x4_t *)v112;
                  int32x4_t v32 = *(int32x4_t *)(v112 + 16);
                  long long v119 = *(_OWORD *)(v112 + 32);
                  long long v120 = *(_OWORD *)(v112 + 48);
                  long long v121 = *(_OWORD *)(v112 + 64);
                  long long v122 = *(_OWORD *)(v112 + 80);
                  long long v123 = *(_OWORD *)(v112 + 96);
                  long long v124 = *(_OWORD *)(v112 + 112);
                  *unsigned int v113 = *(int16x8_t *)v112;
                  *(int32x4_t *)(v75 + 80) = v32;
                  BOOL v125 = &v113->i8[v30];
                  *(_OWORD *)(v75 + 96) = v121;
                  *(_OWORD *)(v75 + 112) = v122;
                  *(_OWORD *)BOOL v125 = v119;
                  *((_OWORD *)v125 + 1) = v120;
                  v125 += 32;
                  *(_OWORD *)BOOL v125 = v123;
                  *((_OWORD *)v125 + 1) = v124;
                  uint64_t v116 = 128;
                }
                else if (v114 == 3)
                {
                  int32x4_t v115 = (int32x4_t)vld1q_dup_f32((const float *)v112);
                  *(int32x4_t *)(v75 + 64) = v115;
                  *(int32x4_t *)(v75 + 80) = v115;
                  *(int32x4_t *)(v75 + 96) = v115;
                  *(int32x4_t *)(v75 + 112) = v115;
                  uint64_t v118 = (int32x4_t *)&v113->i8[v30];
                  *uint64_t v118 = v115;
                  v118[1] = v115;
                  v118[2] = v115;
                  v118[3] = v115;
                  uint64_t v116 = 4;
                }
                else
                {
                  uint64_t v116 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v113, v30, v112, v114, v100, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v113->i32, v30, v112, v114, v78);
                uint64_t v116 = 64;
              }
            }
            else
            {
              uint64_t v116 = 0;
              int32x4_t v115 = 0uLL;
              *(_OWORD *)(v75 + 96) = 0u;
              *(_OWORD *)(v75 + 112) = 0u;
              *unsigned int v113 = 0u;
              *(_OWORD *)(v75 + 80) = 0u;
              uint64_t v117 = &v113->i8[v30];
              *((_OWORD *)v117 + 2) = 0u;
              *((_OWORD *)v117 + 3) = 0u;
              *(_OWORD *)uint64_t v117 = 0u;
              *((_OWORD *)v117 + 1) = 0u;
            }
            uint64_t v126 = v112 + v116;
            int8x8_t v127 = (int16x8_t *)&v98[4];
            unsigned int v128 = v74[3];
            if (v74[3])
            {
              if (v128 < 0xF0)
              {
                if (v128 == 127)
                {
                  int32x4_t v129 = *(int32x4_t *)v126;
                  int32x4_t v32 = *(int32x4_t *)(v126 + 16);
                  long long v133 = *(_OWORD *)(v126 + 32);
                  long long v134 = *(_OWORD *)(v126 + 48);
                  int32x4_t v135 = *(int32x4_t *)(v126 + 64);
                  int32x4_t v136 = *(int32x4_t *)(v126 + 80);
                  long long v137 = *(_OWORD *)(v126 + 96);
                  long long v138 = *(_OWORD *)(v126 + 112);
                  *int8x8_t v127 = *(int16x8_t *)v126;
                  v98[5] = v32;
                  uint64_t v139 = &v127->i8[v30];
                  v98[6] = v135;
                  v98[7] = v136;
                  *(_OWORD *)uint64_t v139 = v133;
                  *((_OWORD *)v139 + 1) = v134;
                  v139 += 32;
                  *(_OWORD *)uint64_t v139 = v137;
                  *((_OWORD *)v139 + 1) = v138;
                  uint64_t v130 = 128;
                }
                else if (v128 == 3)
                {
                  int32x4_t v129 = (int32x4_t)vld1q_dup_f32((const float *)v126);
                  v98[4] = v129;
                  v98[5] = v129;
                  v98[6] = v129;
                  v98[7] = v129;
                  unsigned int v132 = (int32x4_t *)&v127->i8[v30];
                  *unsigned int v132 = v129;
                  v132[1] = v129;
                  v132[2] = v129;
                  v132[3] = v129;
                  uint64_t v130 = 4;
                }
                else
                {
                  uint64_t v130 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v127, v30, v126, v128, v115, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v127->i32, v30, v126, v128, v78);
                uint64_t v130 = 64;
              }
            }
            else
            {
              uint64_t v130 = 0;
              int32x4_t v129 = 0uLL;
              v98[6] = 0u;
              v98[7] = 0u;
              *int8x8_t v127 = 0u;
              v98[5] = 0u;
              unsigned int v131 = &v127->i8[v30];
              *((_OWORD *)v131 + 2) = 0u;
              *((_OWORD *)v131 + 3) = 0u;
              *(_OWORD *)unsigned int v131 = 0u;
              *((_OWORD *)v131 + 1) = 0u;
            }
            uint64_t v140 = v126 + v130;
            unsigned int v141 = (int32x4_t *)(v75 + v293);
            unsigned int v142 = v74[4];
            if (v74[4])
            {
              if (v142 < 0xF0)
              {
                if (v142 == 127)
                {
                  int32x4_t v143 = *(int32x4_t *)v140;
                  int32x4_t v32 = *(int32x4_t *)(v140 + 16);
                  long long v147 = *(_OWORD *)(v140 + 32);
                  long long v148 = *(_OWORD *)(v140 + 48);
                  int32x4_t v149 = *(int32x4_t *)(v140 + 64);
                  int32x4_t v150 = *(int32x4_t *)(v140 + 80);
                  long long v151 = *(_OWORD *)(v140 + 96);
                  long long v152 = *(_OWORD *)(v140 + 112);
                  *unsigned int v141 = *(int32x4_t *)v140;
                  v141[1] = v32;
                  uint64_t v153 = &v141->i8[v30];
                  int64x2_t v141[2] = v149;
                  v141[3] = v150;
                  *(_OWORD *)uint64_t v153 = v147;
                  *((_OWORD *)v153 + 1) = v148;
                  uint64_t v154 = &v141[2].i8[v30];
                  *(_OWORD *)uint64_t v154 = v151;
                  *((_OWORD *)v154 + 1) = v152;
                  uint64_t v144 = 128;
                }
                else if (v142 == 3)
                {
                  int32x4_t v143 = (int32x4_t)vld1q_dup_f32((const float *)v140);
                  *unsigned int v141 = v143;
                  v141[1] = v143;
                  int64x2_t v141[2] = v143;
                  v141[3] = v143;
                  uint64_t v146 = (int32x4_t *)((char *)v141 + v30);
                  *uint64_t v146 = v143;
                  v146[1] = v143;
                  v146[2] = v143;
                  v146[3] = v143;
                  uint64_t v144 = 4;
                }
                else
                {
                  uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)(v75 + v293), v30, v140, v142, v129, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)(v75 + v293), v30, v140, v142, v78);
                uint64_t v144 = 64;
              }
            }
            else
            {
              uint64_t v144 = 0;
              int32x4_t v143 = 0uLL;
              int64x2_t v141[2] = 0u;
              v141[3] = 0u;
              *unsigned int v141 = 0u;
              v141[1] = 0u;
              char v145 = &v141->i8[v30];
              *((_OWORD *)v145 + 2) = 0u;
              *((_OWORD *)v145 + 3) = 0u;
              *(_OWORD *)char v145 = 0u;
              *((_OWORD *)v145 + 1) = 0u;
            }
            uint64_t v155 = v140 + v144;
            uint64_t v156 = v75 + 6 * a11;
            unsigned int v157 = v74[5];
            if (v74[5])
            {
              if (v157 < 0xF0)
              {
                if (v157 == 127)
                {
                  int32x4_t v158 = *(int32x4_t *)v155;
                  int32x4_t v32 = *(int32x4_t *)(v155 + 16);
                  long long v162 = *(_OWORD *)(v155 + 32);
                  long long v163 = *(_OWORD *)(v155 + 48);
                  long long v164 = *(_OWORD *)(v155 + 64);
                  long long v165 = *(_OWORD *)(v155 + 80);
                  long long v166 = *(_OWORD *)(v155 + 96);
                  long long v167 = *(_OWORD *)(v155 + 112);
                  *(_OWORD *)uint64_t v156 = *(_OWORD *)v155;
                  *(int32x4_t *)(v156 + 16) = v32;
                  unint64_t v168 = (_OWORD *)(v156 + v30);
                  *(_OWORD *)(v156 + 32) = v164;
                  *(_OWORD *)(v156 + 48) = v165;
                  *unint64_t v168 = v162;
                  v168[1] = v163;
                  unint64_t v169 = (_OWORD *)(v156 + v30 + 32);
                  *unint64_t v169 = v166;
                  v169[1] = v167;
                  uint64_t v159 = 128;
                }
                else if (v157 == 3)
                {
                  int32x4_t v158 = (int32x4_t)vld1q_dup_f32((const float *)v155);
                  *(int32x4_t *)uint64_t v156 = v158;
                  *(int32x4_t *)(v156 + 16) = v158;
                  *(int32x4_t *)(v156 + 32) = v158;
                  *(int32x4_t *)(v156 + 48) = v158;
                  uint64_t v161 = (int32x4_t *)(v156 + v30);
                  *uint64_t v161 = v158;
                  v161[1] = v158;
                  v161[2] = v158;
                  v161[3] = v158;
                  uint64_t v159 = 4;
                }
                else
                {
                  uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int16x8_t *)v156, v30, v155, v157, v143, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int *)v156, v30, v155, v157, v78);
                uint64_t v159 = 64;
              }
            }
            else
            {
              uint64_t v159 = 0;
              int32x4_t v158 = 0uLL;
              *(_OWORD *)(v156 + 32) = 0u;
              *(_OWORD *)(v156 + 48) = 0u;
              *(_OWORD *)uint64_t v156 = 0u;
              *(_OWORD *)(v156 + 16) = 0u;
              int16x8_t v160 = (_OWORD *)(v156 + v30);
              v160[2] = 0u;
              v160[3] = 0u;
              *int16x8_t v160 = 0u;
              v160[1] = 0u;
            }
            uint64_t v170 = v155 + v159;
            unsigned int v171 = (int16x8_t *)&v141[4];
            unsigned int v172 = v74[6];
            if (v74[6])
            {
              if (v172 < 0xF0)
              {
                if (v172 == 127)
                {
                  int32x4_t v173 = *(int32x4_t *)v170;
                  int32x4_t v32 = *(int32x4_t *)(v170 + 16);
                  long long v177 = *(_OWORD *)(v170 + 32);
                  long long v178 = *(_OWORD *)(v170 + 48);
                  int32x4_t v179 = *(int32x4_t *)(v170 + 64);
                  int32x4_t v180 = *(int32x4_t *)(v170 + 80);
                  long long v181 = *(_OWORD *)(v170 + 96);
                  long long v182 = *(_OWORD *)(v170 + 112);
                  *unsigned int v171 = *(int16x8_t *)v170;
                  v141[5] = v32;
                  BOOL v183 = &v171->i8[v30];
                  v141[6] = v179;
                  v141[7] = v180;
                  *(_OWORD *)BOOL v183 = v177;
                  *((_OWORD *)v183 + 1) = v178;
                  v183 += 32;
                  *(_OWORD *)BOOL v183 = v181;
                  *((_OWORD *)v183 + 1) = v182;
                  uint64_t v174 = 128;
                }
                else if (v172 == 3)
                {
                  int32x4_t v173 = (int32x4_t)vld1q_dup_f32((const float *)v170);
                  v141[4] = v173;
                  v141[5] = v173;
                  v141[6] = v173;
                  v141[7] = v173;
                  unsigned int v176 = (int32x4_t *)&v171->i8[v30];
                  *unsigned int v176 = v173;
                  v176[1] = v173;
                  v176[2] = v173;
                  v176[3] = v173;
                  uint64_t v174 = 4;
                }
                else
                {
                  uint64_t v174 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v171, v30, v170, v172, v158, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v171->i32, v30, v170, v172, v78);
                uint64_t v174 = 64;
              }
            }
            else
            {
              uint64_t v174 = 0;
              int32x4_t v173 = 0uLL;
              v141[6] = 0u;
              v141[7] = 0u;
              *unsigned int v171 = 0u;
              v141[5] = 0u;
              unsigned int v175 = &v171->i8[v30];
              *((_OWORD *)v175 + 2) = 0u;
              *((_OWORD *)v175 + 3) = 0u;
              *(_OWORD *)unsigned int v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
            }
            int v184 = (int16x8_t *)(v156 + 64);
            unsigned int v185 = v74[7];
            if (v74[7])
            {
              uint64_t v186 = v170 + v174;
              if (v185 < 0xF0)
              {
                if (v185 == 127)
                {
                  int32x4_t v27 = *(int32x4_t *)v186;
                  int32x4_t v32 = *(int32x4_t *)(v186 + 16);
                  long long v188 = *(_OWORD *)(v186 + 32);
                  long long v189 = *(_OWORD *)(v186 + 48);
                  long long v190 = *(_OWORD *)(v186 + 64);
                  long long v191 = *(_OWORD *)(v186 + 80);
                  long long v192 = *(_OWORD *)(v186 + 96);
                  long long v193 = *(_OWORD *)(v186 + 112);
                  *int v184 = *(int16x8_t *)v186;
                  *(int32x4_t *)(v156 + 80) = v32;
                  int v194 = &v184->i8[v30];
                  *(_OWORD *)(v156 + 96) = v190;
                  *(_OWORD *)(v156 + 112) = v191;
                  *(_OWORD *)int v194 = v188;
                  *((_OWORD *)v194 + 1) = v189;
                  v194 += 32;
                  *(_OWORD *)int v194 = v192;
                  *((_OWORD *)v194 + 1) = v193;
                }
                else if (v185 == 3)
                {
                  int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v186);
                  *(int32x4_t *)(v156 + 64) = v27;
                  *(int32x4_t *)(v156 + 80) = v27;
                  *(int32x4_t *)(v156 + 96) = v27;
                  *(int32x4_t *)(v156 + 112) = v27;
                  int v187 = (int32x4_t *)&v184->i8[v30];
                  int32x4_t *v187 = v27;
                  v187[1] = v27;
                  v187[2] = v27;
                  v187[3] = v27;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v184, v30, v186, v185, v173, v32);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v184->i32, v30, v186, v185, v78);
              }
            }
            else
            {
              int32x4_t v27 = 0uLL;
              *(_OWORD *)(v156 + 96) = 0u;
              *(_OWORD *)(v156 + 112) = 0u;
              *int v184 = 0u;
              *(_OWORD *)(v156 + 80) = 0u;
              unsigned int v37 = &v184->i8[v30];
              *((_OWORD *)v37 + 2) = 0u;
              *((_OWORD *)v37 + 3) = 0u;
              *(_OWORD *)unsigned int v37 = 0u;
              *((_OWORD *)v37 + 1) = 0u;
            }
            unsigned int v29 = a7;
            uint64_t v28 = v312;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE11ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v28;
          block[5] = v73;
          char v321 = v43;
          char v322 = v313;
          unsigned int v317 = v295;
          unsigned int v318 = v41 - v39;
          block[6] = v74;
          uint64_t v315 = v305 + 16 * (v41 - v29);
          uint64_t v30 = a11;
          uint64_t v316 = a11;
          unsigned int v319 = v306;
          unsigned int v320 = v42;
          if (v44)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v28 + 8) + 7384), block);
            uint64_t v28 = v312;
            unsigned int v29 = a7;
LABEL_28:
            unsigned int v38 = v35 + 1;
            goto LABEL_29;
          }
          uint64_t v82 = *(void *)(v28 + 208);
          int v83 = *(_DWORD *)(v82 + 52);
          unsigned int v84 = *v74;
          if (*v74)
          {
            if (v84 < 0xF0)
            {
              if (v84 == 127)
              {
                int32x4_t v85 = *v73;
                int32x4_t v32 = v73[1];
                int32x4_t v195 = v73[2];
                int32x4_t v196 = v73[3];
                int32x4_t v197 = v73[4];
                int32x4_t v198 = v73[5];
                int32x4_t v199 = v73[6];
                int32x4_t v200 = v73[7];
                int16x8_t v324 = *(int16x8_t *)v73;
                int32x4_t v325 = v32;
                int32x4_t v326 = v197;
                int32x4_t v327 = v198;
                int32x4_t v332 = v195;
                int32x4_t v333 = v196;
                int32x4_t v334 = v199;
                int32x4_t v335 = v200;
                uint64_t v86 = 128;
              }
              else if (v84 == 3)
              {
                int32x4_t v85 = (int32x4_t)vld1q_dup_f32((const float *)v73->i32);
                int16x8_t v324 = (int16x8_t)v85;
                int32x4_t v325 = v85;
                int32x4_t v326 = v85;
                int32x4_t v327 = v85;
                int32x4_t v332 = v85;
                int32x4_t v333 = v85;
                int32x4_t v334 = v85;
                int32x4_t v335 = v85;
                uint64_t v86 = 4;
              }
              else
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v324, 128, (uint64_t)v73, v84, v27, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v324.i32, 128, (uint64_t)v73, v84, *(_DWORD *)(v82 + 52));
              uint64_t v86 = 64;
            }
          }
          else
          {
            uint64_t v86 = 0;
            int32x4_t v85 = 0uLL;
            int32x4_t v327 = 0u;
            int32x4_t v326 = 0u;
            int32x4_t v325 = 0u;
            int16x8_t v324 = 0u;
            int32x4_t v332 = 0u;
            int32x4_t v333 = 0u;
            int32x4_t v334 = 0u;
            int32x4_t v335 = 0u;
          }
          uint64_t v201 = (uint64_t)v73->i64 + v86;
          unsigned int v202 = v74[1];
          if (v74[1])
          {
            if (v202 < 0xF0)
            {
              if (v202 == 127)
              {
                int32x4_t v203 = *(int32x4_t *)v201;
                int32x4_t v32 = *(int32x4_t *)(v201 + 16);
                int32x4_t v205 = *(int32x4_t *)(v201 + 32);
                int32x4_t v206 = *(int32x4_t *)(v201 + 48);
                int32x4_t v207 = *(int32x4_t *)(v201 + 64);
                int32x4_t v208 = *(int32x4_t *)(v201 + 80);
                int32x4_t v209 = *(int32x4_t *)(v201 + 96);
                int32x4_t v210 = *(int32x4_t *)(v201 + 112);
                int16x8_t v340 = *(int16x8_t *)v201;
                int32x4_t v341 = v32;
                int32x4_t v342 = v207;
                int32x4_t v343 = v208;
                int32x4_t v348 = v205;
                int32x4_t v349 = v206;
                int32x4_t v350 = v209;
                int32x4_t v351 = v210;
                uint64_t v204 = 128;
              }
              else if (v202 == 3)
              {
                int32x4_t v203 = (int32x4_t)vld1q_dup_f32((const float *)v201);
                int16x8_t v340 = (int16x8_t)v203;
                int32x4_t v341 = v203;
                int32x4_t v342 = v203;
                int32x4_t v343 = v203;
                int32x4_t v348 = v203;
                int32x4_t v349 = v203;
                int32x4_t v350 = v203;
                int32x4_t v351 = v203;
                uint64_t v204 = 4;
              }
              else
              {
                uint64_t v204 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v340, 128, v201, v202, v85, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v340.i32, 128, v201, v202, v83);
              uint64_t v204 = 64;
            }
          }
          else
          {
            uint64_t v204 = 0;
            int32x4_t v203 = 0uLL;
            int32x4_t v342 = 0u;
            int32x4_t v343 = 0u;
            int16x8_t v340 = 0u;
            int32x4_t v341 = 0u;
            int32x4_t v348 = 0u;
            int32x4_t v349 = 0u;
            int32x4_t v350 = 0u;
            int32x4_t v351 = 0u;
          }
          uint64_t v211 = v201 + v204;
          unsigned int v212 = v74[2];
          if (v74[2])
          {
            if (v212 < 0xF0)
            {
              if (v212 == 127)
              {
                int32x4_t v213 = *(int32x4_t *)v211;
                int32x4_t v32 = *(int32x4_t *)(v211 + 16);
                int32x4_t v215 = *(int32x4_t *)(v211 + 32);
                int32x4_t v216 = *(int32x4_t *)(v211 + 48);
                int32x4_t v217 = *(int32x4_t *)(v211 + 64);
                int32x4_t v218 = *(int32x4_t *)(v211 + 80);
                int32x4_t v219 = *(int32x4_t *)(v211 + 96);
                int32x4_t v220 = *(int32x4_t *)(v211 + 112);
                int16x8_t v328 = *(int16x8_t *)v211;
                int32x4_t v329 = v32;
                int32x4_t v330 = v217;
                int32x4_t v331 = v218;
                int32x4_t v336 = v215;
                int32x4_t v337 = v216;
                int32x4_t v338 = v219;
                int32x4_t v339 = v220;
                uint64_t v214 = 128;
              }
              else if (v212 == 3)
              {
                int32x4_t v213 = (int32x4_t)vld1q_dup_f32((const float *)v211);
                int16x8_t v328 = (int16x8_t)v213;
                int32x4_t v329 = v213;
                int32x4_t v330 = v213;
                int32x4_t v331 = v213;
                int32x4_t v336 = v213;
                int32x4_t v337 = v213;
                int32x4_t v338 = v213;
                int32x4_t v339 = v213;
                uint64_t v214 = 4;
              }
              else
              {
                uint64_t v214 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v328, 128, v211, v212, v203, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v328.i32, 128, v211, v212, v83);
              uint64_t v214 = 64;
            }
          }
          else
          {
            uint64_t v214 = 0;
            int32x4_t v213 = 0uLL;
            int32x4_t v330 = 0u;
            int32x4_t v331 = 0u;
            int16x8_t v328 = 0u;
            int32x4_t v329 = 0u;
            int32x4_t v336 = 0u;
            int32x4_t v337 = 0u;
            int32x4_t v338 = 0u;
            int32x4_t v339 = 0u;
          }
          uint64_t v221 = v211 + v214;
          unsigned int v222 = v74[3];
          if (v74[3])
          {
            if (v222 < 0xF0)
            {
              if (v222 == 127)
              {
                int32x4_t v223 = *(int32x4_t *)v221;
                int32x4_t v32 = *(int32x4_t *)(v221 + 16);
                int32x4_t v225 = *(int32x4_t *)(v221 + 32);
                int32x4_t v226 = *(int32x4_t *)(v221 + 48);
                int32x4_t v227 = *(int32x4_t *)(v221 + 64);
                int32x4_t v228 = *(int32x4_t *)(v221 + 80);
                int32x4_t v229 = *(int32x4_t *)(v221 + 96);
                int32x4_t v230 = *(int32x4_t *)(v221 + 112);
                int16x8_t v344 = *(int16x8_t *)v221;
                int32x4_t v345 = v32;
                int32x4_t v346 = v227;
                int32x4_t v347 = v228;
                int32x4_t v352 = v225;
                int32x4_t v353 = v226;
                int32x4_t v354 = v229;
                int32x4_t v355 = v230;
                uint64_t v224 = 128;
              }
              else if (v222 == 3)
              {
                int32x4_t v223 = (int32x4_t)vld1q_dup_f32((const float *)v221);
                int16x8_t v344 = (int16x8_t)v223;
                int32x4_t v345 = v223;
                int32x4_t v346 = v223;
                int32x4_t v347 = v223;
                int32x4_t v352 = v223;
                int32x4_t v353 = v223;
                int32x4_t v354 = v223;
                int32x4_t v355 = v223;
                uint64_t v224 = 4;
              }
              else
              {
                uint64_t v224 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v344, 128, v221, v222, v213, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v344.i32, 128, v221, v222, v83);
              uint64_t v224 = 64;
            }
          }
          else
          {
            uint64_t v224 = 0;
            int32x4_t v223 = 0uLL;
            int32x4_t v346 = 0u;
            int32x4_t v347 = 0u;
            int16x8_t v344 = 0u;
            int32x4_t v345 = 0u;
            int32x4_t v352 = 0u;
            int32x4_t v353 = 0u;
            int32x4_t v354 = 0u;
            int32x4_t v355 = 0u;
          }
          uint64_t v231 = v221 + v224;
          unsigned int v232 = v74[4];
          if (v74[4])
          {
            if (v232 < 0xF0)
            {
              if (v232 == 127)
              {
                int32x4_t v233 = *(int32x4_t *)v231;
                int32x4_t v32 = *(int32x4_t *)(v231 + 16);
                int32x4_t v235 = *(int32x4_t *)(v231 + 32);
                int32x4_t v236 = *(int32x4_t *)(v231 + 48);
                int32x4_t v237 = *(int32x4_t *)(v231 + 64);
                int32x4_t v238 = *(int32x4_t *)(v231 + 80);
                int32x4_t v239 = *(int32x4_t *)(v231 + 96);
                int32x4_t v240 = *(int32x4_t *)(v231 + 112);
                int16x8_t v356 = *(int16x8_t *)v231;
                int32x4_t v357 = v32;
                int32x4_t v358 = v237;
                int32x4_t v359 = v238;
                int32x4_t v364 = v235;
                int32x4_t v365 = v236;
                int32x4_t v366 = v239;
                int32x4_t v367 = v240;
                uint64_t v234 = 128;
              }
              else if (v232 == 3)
              {
                int32x4_t v233 = (int32x4_t)vld1q_dup_f32((const float *)v231);
                int16x8_t v356 = (int16x8_t)v233;
                int32x4_t v357 = v233;
                int32x4_t v358 = v233;
                int32x4_t v359 = v233;
                int32x4_t v364 = v233;
                int32x4_t v365 = v233;
                int32x4_t v366 = v233;
                int32x4_t v367 = v233;
                uint64_t v234 = 4;
              }
              else
              {
                uint64_t v234 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v356, 128, v231, v232, v223, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v356.i32, 128, v231, v232, v83);
              uint64_t v234 = 64;
            }
          }
          else
          {
            uint64_t v234 = 0;
            int32x4_t v233 = 0uLL;
            int32x4_t v358 = 0u;
            int32x4_t v359 = 0u;
            int16x8_t v356 = 0u;
            int32x4_t v357 = 0u;
            int32x4_t v364 = 0u;
            int32x4_t v365 = 0u;
            int32x4_t v366 = 0u;
            int32x4_t v367 = 0u;
          }
          uint64_t v241 = v231 + v234;
          unsigned int v242 = v74[5];
          if (v74[5])
          {
            if (v242 < 0xF0)
            {
              if (v242 == 127)
              {
                int32x4_t v243 = *(int32x4_t *)v241;
                int32x4_t v32 = *(int32x4_t *)(v241 + 16);
                int32x4_t v245 = *(int32x4_t *)(v241 + 32);
                int32x4_t v246 = *(int32x4_t *)(v241 + 48);
                int32x4_t v247 = *(int32x4_t *)(v241 + 64);
                int32x4_t v248 = *(int32x4_t *)(v241 + 80);
                int32x4_t v249 = *(int32x4_t *)(v241 + 96);
                int32x4_t v250 = *(int32x4_t *)(v241 + 112);
                int16x8_t v372 = *(int16x8_t *)v241;
                int32x4_t v373 = v32;
                int32x4_t v374 = v247;
                int32x4_t v375 = v248;
                int32x4_t v380 = v245;
                int32x4_t v381 = v246;
                int32x4_t v382 = v249;
                int32x4_t v383 = v250;
                uint64_t v244 = 128;
              }
              else if (v242 == 3)
              {
                int32x4_t v243 = (int32x4_t)vld1q_dup_f32((const float *)v241);
                int16x8_t v372 = (int16x8_t)v243;
                int32x4_t v373 = v243;
                int32x4_t v374 = v243;
                int32x4_t v375 = v243;
                int32x4_t v380 = v243;
                int32x4_t v381 = v243;
                int32x4_t v382 = v243;
                int32x4_t v383 = v243;
                uint64_t v244 = 4;
              }
              else
              {
                uint64_t v244 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v372, 128, v241, v242, v233, v32);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v372.i32, 128, v241, v242, v83);
              uint64_t v244 = 64;
            }
          }
          else
          {
            uint64_t v244 = 0;
            int32x4_t v243 = 0uLL;
            int32x4_t v374 = 0u;
            int32x4_t v375 = 0u;
            int16x8_t v372 = 0u;
            int32x4_t v373 = 0u;
            int32x4_t v380 = 0u;
            int32x4_t v381 = 0u;
            int32x4_t v382 = 0u;
            int32x4_t v383 = 0u;
          }
          uint64_t v251 = v241 + v244;
          unsigned int v252 = v74[6];
          if (v74[6])
          {
            if (v252 < 0xF0)
            {
              if (v252 == 127)
              {
                int32x4_t v253 = *(int32x4_t *)v251;
                int32x4_t v32 = *(int32x4_t *)(v251 + 16);
                int32x4_t v256 = *(int32x4_t *)(v251 + 32);
                int32x4_t v257 = *(int32x4_t *)(v251 + 48);
                int32x4_t v258 = *(int32x4_t *)(v251 + 64);
                int32x4_t v259 = *(int32x4_t *)(v251 + 80);
                int32x4_t v260 = *(int32x4_t *)(v251 + 96);
                int32x4_t v261 = *(int32x4_t *)(v251 + 112);
                int16x8_t v360 = *(int16x8_t *)v251;
                int32x4_t v361 = v32;
                int32x4_t v362 = v258;
                int32x4_t v363 = v259;
                int32x4_t v368 = v256;
                int32x4_t v369 = v257;
                int32x4_t v370 = v260;
                int32x4_t v371 = v261;
                uint64_t v254 = 128;
                unsigned int v255 = v74[7];
                if (!v74[7]) {
                  goto LABEL_239;
                }
              }
              else if (v252 == 3)
              {
                int32x4_t v253 = (int32x4_t)vld1q_dup_f32((const float *)v251);
                int16x8_t v360 = (int16x8_t)v253;
                int32x4_t v361 = v253;
                int32x4_t v362 = v253;
                int32x4_t v363 = v253;
                int32x4_t v368 = v253;
                int32x4_t v369 = v253;
                int32x4_t v370 = v253;
                int32x4_t v371 = v253;
                uint64_t v254 = 4;
                unsigned int v255 = v74[7];
                if (!v74[7]) {
                  goto LABEL_239;
                }
              }
              else
              {
                uint64_t v254 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v360, 128, v251, v252, v243, v32);
                unsigned int v255 = v74[7];
                if (!v74[7])
                {
LABEL_239:
                  int32x4_t v27 = 0uLL;
                  int32x4_t v378 = 0u;
                  int32x4_t v379 = 0u;
                  int16x8_t v376 = 0u;
                  int32x4_t v377 = 0u;
                  int32x4_t v384 = 0u;
                  int32x4_t v385 = 0u;
                  int32x4_t v386 = 0u;
                  int32x4_t v387 = 0u;
                  goto LABEL_242;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v360.i32, 128, v251, v252, v83);
              uint64_t v254 = 64;
              unsigned int v255 = v74[7];
              if (!v74[7]) {
                goto LABEL_239;
              }
            }
          }
          else
          {
            uint64_t v254 = 0;
            int32x4_t v253 = 0uLL;
            int32x4_t v362 = 0u;
            int32x4_t v363 = 0u;
            int16x8_t v360 = 0u;
            int32x4_t v361 = 0u;
            int32x4_t v368 = 0u;
            int32x4_t v369 = 0u;
            int32x4_t v370 = 0u;
            int32x4_t v371 = 0u;
            unsigned int v255 = v74[7];
            if (!v74[7]) {
              goto LABEL_239;
            }
          }
          uint64_t v262 = v251 + v254;
          if (v255 < 0xF0)
          {
            if (v255 == 127)
            {
              int32x4_t v27 = *(int32x4_t *)v262;
              int32x4_t v32 = *(int32x4_t *)(v262 + 16);
              int32x4_t v263 = *(int32x4_t *)(v262 + 32);
              int32x4_t v264 = *(int32x4_t *)(v262 + 48);
              int32x4_t v265 = *(int32x4_t *)(v262 + 64);
              int32x4_t v266 = *(int32x4_t *)(v262 + 80);
              int32x4_t v267 = *(int32x4_t *)(v262 + 96);
              int32x4_t v268 = *(int32x4_t *)(v262 + 112);
              int16x8_t v376 = *(int16x8_t *)v262;
              int32x4_t v377 = v32;
              int32x4_t v378 = v265;
              int32x4_t v379 = v266;
              int32x4_t v384 = v263;
              int32x4_t v385 = v264;
              int32x4_t v386 = v267;
              int32x4_t v387 = v268;
            }
            else if (v255 == 3)
            {
              int32x4_t v27 = (int32x4_t)vld1q_dup_f32((const float *)v262);
              int16x8_t v376 = (int16x8_t)v27;
              int32x4_t v377 = v27;
              int32x4_t v378 = v27;
              int32x4_t v379 = v27;
              int32x4_t v384 = v27;
              int32x4_t v385 = v27;
              int32x4_t v386 = v27;
              int32x4_t v387 = v27;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v376, 128, v262, v255, v253, v32);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v376.i32, 128, v262, v255, v83);
          }
LABEL_242:
          unsigned int v38 = v35 + 1;
          unint64_t v269 = v319;
          unsigned int v29 = a7;
          uint64_t v28 = v312;
          if (v319)
          {
            unint64_t v270 = 0;
            float32x4_t v271 = &v324 + 8 * (unint64_t)v317 + v318;
            unsigned int v272 = v320;
            do
            {
              if (v272)
              {
                uint64_t v273 = 0;
                uint64_t v274 = v315 + v316 * v270;
                do
                {
                  *(unsigned char *)(v274 + v273) = v271->i8[v273];
                  ++v273;
                  unsigned int v272 = v320;
                }
                while (16 * (unint64_t)v320 > v273);
                unint64_t v269 = v319;
              }
              ++v270;
              v271 += 8;
            }
            while (v270 < v269);
          }
LABEL_29:
          BOOL v22 = v35 == v300 >> 3;
          unsigned int v35 = v38;
        }
        while (!v22);
        BOOL v22 = v17++ == v292;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v208 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v200 = v20;
  uint64_t v201 = v21;
  uint64_t v188 = v22;
  uint64_t v23 = v12;
  uint64_t v349 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v205 = v14;
  unsigned int v24 = v14 >> 3;
  unsigned int v187 = v14 + a10 - 1;
  unsigned int v189 = v187 >> 3;
  unsigned int v25 = *(unsigned __int8 *)(*(void *)(v23 + 208) + 88);
  unsigned int v26 = *(_DWORD *)(v23 + 112);
  uint64_t v209 = v23;
  if (*(void *)(v23 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v199 = v31;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v23, *(_DWORD *)(v23 + 144) + a12);
  uint64_t v33 = v23;
  BOOL v198 = isLevelTiled;
  unsigned int v34 = v208;
  if (v24 <= v189)
  {
    unsigned int v197 = v208 + a9 - 1;
    if (v208 >> 3 <= v197 >> 3)
    {
      uint64_t v35 = a11;
      unsigned int v184 = v19 - 1;
      unsigned int v207 = (v19 - 1) >> 3;
      int v206 = ((v19 - 1) & 7) + 1;
      int v185 = ((v17 - 1) & 7) + 1;
      unsigned int v186 = (v17 - 1) >> 3;
      uint64_t v190 = 4 * a11;
      uint64_t v191 = 2 * a11;
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      *(int8x8_t *)&v37.f64[0] = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v36, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v36));
      int v196 = LODWORD(v37.f64[0]) | HIDWORD(v37.f64[0]);
      BOOL v194 = HIDWORD(v37.f64[0]) != 0;
      float64_t v195 = v37.f64[0];
      BOOL v193 = LODWORD(v37.f64[0]) != 0;
      unint64_t v183 = 8 * v26 * (unint64_t)v25;
      do
      {
        unsigned int v38 = (8 * v24) | 7;
        if (8 * v24 <= v205) {
          int v39 = v205;
        }
        else {
          int v39 = 8 * v24;
        }
        unsigned int v40 = v208 >> 3;
        if (v187 < v38) {
          unsigned int v38 = v187;
        }
        unsigned int v204 = 8 * v24;
        int v192 = v39 - 8 * v24;
        int v203 = v38 - v39 + 1;
        int v41 = v185;
        if (v24 != v186) {
          int v41 = 8;
        }
        unsigned int v210 = v41;
        uint64_t v202 = v188 + (v39 - v205) * v35;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= v34) {
            int v45 = v34;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v197 < v44) {
            unsigned int v44 = v208 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v207) {
            unsigned int v47 = v206;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v204 >= v205 && v43 >= v34)
          {
            int v49 = v206;
            if (v40 != v207) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v203 != v210;
          }
          if (v198)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v183 >> (*(unsigned char *)(v33 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 16;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    char v74 = 0;
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v172 = (v72 >> 3) - 1;
            if (v74) {
              unsigned int v173 = 0;
            }
            else {
              unsigned int v173 = 32 - __clz(~(-1 << -(char)__clz(v172)));
            }
            unsigned int v174 = (v76 >> 3) - 1;
            if (v75)
            {
              unsigned int v175 = 0;
              if (v173) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v175 = 32 - __clz(~(-1 << -(char)__clz(v174)));
              if (v175 | v173)
              {
LABEL_234:
                int v176 = 0;
                uint64_t v177 = 0;
                int v178 = v40 & v172;
                int v179 = v24 & v174;
                BOOL v180 = v173 != 0;
                BOOL v181 = v175 != 0;
                int v182 = 1;
                do
                {
                  --v173;
                  if (v180) {
                    v177 |= (unint64_t)(v182 & v178) << v176++;
                  }
                  else {
                    unsigned int v173 = 0;
                  }
                  --v175;
                  if (v181) {
                    v177 |= (unint64_t)(v182 & v179) << v176++;
                  }
                  else {
                    unsigned int v175 = 0;
                  }
                  v182 *= 2;
                  --v176;
                  BOOL v181 = v175 != 0;
                  BOOL v180 = v173 != 0;
                }
                while (v175 | v173);
                goto LABEL_246;
              }
            }
            uint64_t v177 = 0;
LABEL_246:
            unint64_t v58 = ((unint64_t)(v43 / v72 + v204 / v76 * ((v72 + v184) / v72)) << 14) + (v177 << 10);
            goto LABEL_60;
          }
          if (v196)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v193;
            BOOL v55 = v194;
            int v57 = LODWORD(v195);
            int v56 = HIDWORD(v195);
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v40) << v51++;
              }
              else {
                int v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v24) << v51++;
              }
              else {
                int v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_60:
          unsigned int v59 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_86:
              unint64_t v66 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_86;
            }
          }
          int v65 = 0;
          unint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            BOOL v70 = !v67;
            if (v67)
            {
              unint64_t v71 = ((unint64_t)(v69 & v40) << v65) | v66;
            }
            else
            {
              unsigned int v61 = 0;
              unint64_t v71 = v66;
            }
            if (!v70) {
              ++v65;
            }
            --v64;
            if (v68)
            {
              unint64_t v66 = ((unint64_t)(v69 & v24) << v65) | v71;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v66 = v71;
            }
            if (v68) {
              ++v65;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_87:
          uint64_t v77 = (unsigned char *)(v200 + v58);
          if (v199)
          {
            memcpy(__dst, v77, sizeof(__dst));
            uint64_t v33 = v209;
            unsigned int v34 = v208;
            uint64_t v77 = __dst;
          }
          int v78 = (unsigned __int8 *)(v201 + 8 * v66);
          unsigned int v79 = (__n128 *)(v202 + 32 * (v45 - v34));
          char v80 = v47 < 8 || v48;
          if ((v80 & 1) == 0 && v210 > 7)
          {
            uint64_t v81 = *(void *)(v33 + 208);
            int v82 = *(_DWORD *)(v81 + 52);
            unsigned int v83 = *v78;
            if (*v78)
            {
              uint64_t v35 = a11;
              if (v83 < 0xF0)
              {
                if (v83 == 7)
                {
                  __n128 v84 = (__n128)vld1q_dup_f64((const double *)v77);
                  *unsigned int v79 = v84;
                  v79[1] = v84;
                  v79[2] = v84;
                  v79[3] = v84;
                  v79[4] = v84;
                  v79[5] = v84;
                  v79[6] = v84;
                  v79[7] = v84;
                  int32x4_t v92 = (__n128 *)((char *)v79 + a11);
                  *int32x4_t v92 = v84;
                  v92[1] = v84;
                  v92[2] = v84;
                  v92[3] = v84;
                  v92[4] = v84;
                  v92[5] = v84;
                  v92[6] = v84;
                  v92[7] = v84;
                  uint64_t v85 = 8;
                }
                else
                {
                  uint64_t v85 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v79, a11, (uint64_t)v77, v83, *(int8x8_t *)&v37.f64[0]);
                }
              }
              else
              {
                v84.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v79, a11, (uint64_t)v77, v83, *(_DWORD *)(v81 + 52)).n128_u64[0];
                uint64_t v85 = 128;
              }
            }
            else
            {
              uint64_t v85 = 0;
              v84.n128_u64[0] = 0;
              v79[6] = 0u;
              v79[7] = 0u;
              v79[4] = 0u;
              v79[5] = 0u;
              v79[2] = 0u;
              v79[3] = 0u;
              *unsigned int v79 = 0u;
              v79[1] = 0u;
              uint64_t v35 = a11;
              int32x4_t v91 = (_OWORD *)((char *)v79->n128_u64 + a11);
              v91[6] = 0u;
              v91[7] = 0u;
              v91[4] = 0u;
              v91[5] = 0u;
              v91[2] = 0u;
              v91[3] = 0u;
              *int32x4_t v91 = 0u;
              v91[1] = 0u;
            }
            int32x4_t v93 = (const double *)&v77[v85];
            int32x4_t v94 = (__n128 *)((char *)v79 + v191);
            unsigned int v95 = v78[1];
            if (v78[1])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 7)
                {
                  __n128 v96 = (__n128)vld1q_dup_f64(v93);
                  *int32x4_t v94 = v96;
                  v94[1] = v96;
                  v94[2] = v96;
                  v94[3] = v96;
                  v94[4] = v96;
                  v94[5] = v96;
                  v94[6] = v96;
                  v94[7] = v96;
                  unsigned int v99 = (__n128 *)((char *)v94 + v35);
                  *unsigned int v99 = v96;
                  v99[1] = v96;
                  v99[2] = v96;
                  v99[3] = v96;
                  v99[4] = v96;
                  v99[5] = v96;
                  v99[6] = v96;
                  v99[7] = v96;
                  uint64_t v97 = 8;
                }
                else
                {
                  uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v79 + v191, v35, (uint64_t)v93, v95, (int8x8_t)v84.n128_u64[0]);
                }
              }
              else
              {
                v96.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)((char *)v79 + v191), v35, (uint64_t)v93, v95, v82).n128_u64[0];
                uint64_t v97 = 128;
              }
            }
            else
            {
              uint64_t v97 = 0;
              v96.n128_u64[0] = 0;
              v94[6] = 0u;
              v94[7] = 0u;
              v94[4] = 0u;
              v94[5] = 0u;
              v94[2] = 0u;
              v94[3] = 0u;
              *int32x4_t v94 = 0u;
              v94[1] = 0u;
              unsigned int v98 = (_OWORD *)((char *)v94->n128_u64 + v35);
              v98[6] = 0u;
              v98[7] = 0u;
              v98[4] = 0u;
              v98[5] = 0u;
              v98[2] = 0u;
              v98[3] = 0u;
              *unsigned int v98 = 0u;
              v98[1] = 0u;
            }
            int32x4_t v100 = (const double *)((char *)v93 + v97);
            uint64_t v101 = v79 + 8;
            unsigned int v102 = v78[2];
            if (v78[2])
            {
              if (v102 < 0xF0)
              {
                if (v102 == 7)
                {
                  __n128 v103 = (__n128)vld1q_dup_f64(v100);
                  v79[8] = v103;
                  v79[9] = v103;
                  v79[10] = v103;
                  v79[11] = v103;
                  v79[12] = v103;
                  v79[13] = v103;
                  v79[14] = v103;
                  v79[15] = v103;
                  int32x4_t v106 = (__n128 *)((char *)v101 + v35);
                  __n128 *v106 = v103;
                  v106[1] = v103;
                  v106[2] = v103;
                  v106[3] = v103;
                  v106[4] = v103;
                  v106[5] = v103;
                  v106[6] = v103;
                  v106[7] = v103;
                  uint64_t v104 = 8;
                }
                else
                {
                  uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v101, v35, (uint64_t)v100, v102, (int8x8_t)v96.n128_u64[0]);
                }
              }
              else
              {
                v103.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v101, v35, (uint64_t)v100, v102, v82).n128_u64[0];
                uint64_t v104 = 128;
              }
            }
            else
            {
              uint64_t v104 = 0;
              v103.n128_u64[0] = 0;
              v79[14] = 0u;
              v79[15] = 0u;
              v79[12] = 0u;
              v79[13] = 0u;
              v79[10] = 0u;
              v79[11] = 0u;
              *uint64_t v101 = 0u;
              v79[9] = 0u;
              long long v105 = (_OWORD *)((char *)v101->n128_u64 + v35);
              v105[6] = 0u;
              v105[7] = 0u;
              v105[4] = 0u;
              v105[5] = 0u;
              int64x2_t v105[2] = 0u;
              v105[3] = 0u;
              *long long v105 = 0u;
              v105[1] = 0u;
            }
            int32x4_t v107 = (const double *)((char *)v100 + v104);
            long long v108 = v94 + 8;
            unsigned int v109 = v78[3];
            if (v78[3])
            {
              if (v109 < 0xF0)
              {
                if (v109 == 7)
                {
                  __n128 v110 = (__n128)vld1q_dup_f64(v107);
                  v94[8] = v110;
                  v94[9] = v110;
                  v94[10] = v110;
                  v94[11] = v110;
                  v94[12] = v110;
                  v94[13] = v110;
                  v94[14] = v110;
                  v94[15] = v110;
                  unsigned int v113 = (__n128 *)((char *)v108 + v35);
                  *unsigned int v113 = v110;
                  v113[1] = v110;
                  v113[2] = v110;
                  v113[3] = v110;
                  float64x2_t v113[4] = v110;
                  v113[5] = v110;
                  uint64_t v111 = 8;
                  v113[6] = v110;
                  v113[7] = v110;
                }
                else
                {
                  uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v108, v35, (uint64_t)v107, v109, (int8x8_t)v103.n128_u64[0]);
                }
              }
              else
              {
                v110.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v108, v35, (uint64_t)v107, v109, v82).n128_u64[0];
                uint64_t v111 = 128;
              }
            }
            else
            {
              uint64_t v111 = 0;
              v110.n128_u64[0] = 0;
              v94[14] = 0u;
              v94[15] = 0u;
              v94[12] = 0u;
              v94[13] = 0u;
              v94[10] = 0u;
              v94[11] = 0u;
              *long long v108 = 0u;
              v94[9] = 0u;
              uint64_t v112 = (_OWORD *)((char *)v108->n128_u64 + v35);
              v112[6] = 0u;
              v112[7] = 0u;
              v112[4] = 0u;
              v112[5] = 0u;
              float32x4_t v112[2] = 0u;
              v112[3] = 0u;
              *uint64_t v112 = 0u;
              v112[1] = 0u;
            }
            unsigned int v114 = (const double *)((char *)v107 + v111);
            int32x4_t v115 = (__n128 *)((char *)v79 + v190);
            unsigned int v116 = v78[4];
            if (v78[4])
            {
              if (v116 < 0xF0)
              {
                if (v116 == 7)
                {
                  __n128 v117 = (__n128)vld1q_dup_f64(v114);
                  *int32x4_t v115 = v117;
                  v115[1] = v117;
                  v115[2] = v117;
                  v115[3] = v117;
                  float64x2_t v115[4] = v117;
                  v115[5] = v117;
                  v115[6] = v117;
                  v115[7] = v117;
                  long long v120 = (__n128 *)((char *)v115 + v35);
                  *long long v120 = v117;
                  v120[1] = v117;
                  v120[2] = v117;
                  v120[3] = v117;
                  long long v120[4] = v117;
                  v120[5] = v117;
                  v120[6] = v117;
                  v120[7] = v117;
                  uint64_t v118 = 8;
                }
                else
                {
                  uint64_t v118 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v79 + v190, v35, (uint64_t)v114, v116, (int8x8_t)v110.n128_u64[0]);
                }
              }
              else
              {
                v117.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)((char *)v79 + v190), v35, (uint64_t)v114, v116, v82).n128_u64[0];
                uint64_t v118 = 128;
              }
            }
            else
            {
              uint64_t v118 = 0;
              v117.n128_u64[0] = 0;
              v115[6] = 0u;
              v115[7] = 0u;
              float64x2_t v115[4] = 0u;
              v115[5] = 0u;
              v115[2] = 0u;
              v115[3] = 0u;
              *int32x4_t v115 = 0u;
              v115[1] = 0u;
              long long v119 = (_OWORD *)((char *)v115->n128_u64 + v35);
              v119[6] = 0u;
              v119[7] = 0u;
              float64x2_t v119[4] = 0u;
              v119[5] = 0u;
              v119[2] = 0u;
              v119[3] = 0u;
              *long long v119 = 0u;
              v119[1] = 0u;
            }
            long long v121 = (const double *)((char *)v114 + v118);
            uint64_t v122 = (uint64_t)v79 + 6 * a11;
            unsigned int v123 = v78[5];
            if (v78[5])
            {
              if (v123 < 0xF0)
              {
                if (v123 == 7)
                {
                  __n128 v124 = (__n128)vld1q_dup_f64(v121);
                  *(__n128 *)uint64_t v122 = v124;
                  *(__n128 *)(v122 + 16) = v124;
                  *(__n128 *)(v122 + 32) = v124;
                  *(__n128 *)(v122 + 48) = v124;
                  *(__n128 *)(v122 + 64) = v124;
                  *(__n128 *)(v122 + 80) = v124;
                  *(__n128 *)(v122 + 96) = v124;
                  *(__n128 *)(v122 + 112) = v124;
                  int8x8_t v127 = (__n128 *)(v122 + v35);
                  *int8x8_t v127 = v124;
                  v127[1] = v124;
                  v127[2] = v124;
                  v127[3] = v124;
                  v127[4] = v124;
                  v127[5] = v124;
                  v127[6] = v124;
                  v127[7] = v124;
                  uint64_t v125 = 8;
                }
                else
                {
                  uint64_t v125 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v122, v35, (uint64_t)v121, v123, (int8x8_t)v117.n128_u64[0]);
                }
              }
              else
              {
                v124.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)v122, v35, (uint64_t)v121, v123, v82).n128_u64[0];
                uint64_t v125 = 128;
              }
            }
            else
            {
              uint64_t v125 = 0;
              v124.n128_u64[0] = 0;
              *(_OWORD *)(v122 + 96) = 0u;
              *(_OWORD *)(v122 + 112) = 0u;
              *(_OWORD *)(v122 + 64) = 0u;
              *(_OWORD *)(v122 + 80) = 0u;
              *(_OWORD *)(v122 + 32) = 0u;
              *(_OWORD *)(v122 + 48) = 0u;
              *(_OWORD *)uint64_t v122 = 0u;
              *(_OWORD *)(v122 + 16) = 0u;
              uint64_t v126 = (_OWORD *)(v122 + v35);
              v126[6] = 0u;
              v126[7] = 0u;
              v126[4] = 0u;
              v126[5] = 0u;
              v126[2] = 0u;
              v126[3] = 0u;
              *uint64_t v126 = 0u;
              v126[1] = 0u;
            }
            unsigned int v128 = (const double *)((char *)v121 + v125);
            int32x4_t v129 = v115 + 8;
            unsigned int v130 = v78[6];
            if (v78[6])
            {
              if (v130 < 0xF0)
              {
                if (v130 == 7)
                {
                  __n128 v131 = (__n128)vld1q_dup_f64(v128);
                  v115[8] = v131;
                  v115[9] = v131;
                  v115[10] = v131;
                  v115[11] = v131;
                  v115[12] = v131;
                  v115[13] = v131;
                  float32x4_t v115[14] = v131;
                  v115[15] = v131;
                  long long v134 = (__n128 *)((char *)v129 + v35);
                  *long long v134 = v131;
                  v134[1] = v131;
                  v134[2] = v131;
                  v134[3] = v131;
                  v134[4] = v131;
                  v134[5] = v131;
                  uint64_t v132 = 8;
                  v134[6] = v131;
                  v134[7] = v131;
                }
                else
                {
                  uint64_t v132 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v129, v35, (uint64_t)v128, v130, (int8x8_t)v124.n128_u64[0]);
                }
              }
              else
              {
                v131.n128_u64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v129, v35, (uint64_t)v128, v130, v82).n128_u64[0];
                uint64_t v132 = 128;
              }
            }
            else
            {
              uint64_t v132 = 0;
              v131.n128_u64[0] = 0;
              float32x4_t v115[14] = 0u;
              v115[15] = 0u;
              v115[12] = 0u;
              v115[13] = 0u;
              v115[10] = 0u;
              v115[11] = 0u;
              *int32x4_t v129 = 0u;
              v115[9] = 0u;
              long long v133 = (_OWORD *)((char *)v129->n128_u64 + v35);
              v133[6] = 0u;
              v133[7] = 0u;
              v133[4] = 0u;
              v133[5] = 0u;
              v133[2] = 0u;
              v133[3] = 0u;
              *long long v133 = 0u;
              v133[1] = 0u;
            }
            int32x4_t v135 = (__n128 *)(v122 + 128);
            unsigned int v136 = v78[7];
            if (v78[7])
            {
              long long v137 = (const double *)((char *)v128 + v132);
              if (v136 < 0xF0)
              {
                if (v136 == 7)
                {
                  float64x2_t v37 = vld1q_dup_f64(v137);
                  *(float64x2_t *)(v122 + 128) = v37;
                  *(float64x2_t *)(v122 + 144) = v37;
                  *(float64x2_t *)(v122 + 160) = v37;
                  *(float64x2_t *)(v122 + 176) = v37;
                  *(float64x2_t *)(v122 + 192) = v37;
                  *(float64x2_t *)(v122 + 208) = v37;
                  *(float64x2_t *)(v122 + 224) = v37;
                  *(float64x2_t *)(v122 + 240) = v37;
                  uint64_t v139 = (float64x2_t *)((char *)v135 + v35);
                  *uint64_t v139 = v37;
                  v139[1] = v37;
                  int64x2_t v139[2] = v37;
                  v139[3] = v37;
                  v139[4] = v37;
                  v139[5] = v37;
                  v139[6] = v37;
                  v139[7] = v37;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v135, v35, (uint64_t)v137, v136, (int8x8_t)v131.n128_u64[0]);
                }
              }
              else
              {
                *(void *)&v37.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v135, v35, (uint64_t)v137, v136, v82).n128_u64[0];
              }
              unsigned int v34 = v208;
              uint64_t v33 = v209;
            }
            else
            {
              v37.f64[0] = 0.0;
              *(_OWORD *)(v122 + 224) = 0u;
              *(_OWORD *)(v122 + 240) = 0u;
              *(_OWORD *)(v122 + 192) = 0u;
              *(_OWORD *)(v122 + 208) = 0u;
              *(_OWORD *)(v122 + 160) = 0u;
              *(_OWORD *)(v122 + 176) = 0u;
              *int32x4_t v135 = 0u;
              *(_OWORD *)(v122 + 144) = 0u;
              long long v138 = (_OWORD *)((char *)v135->n128_u64 + v35);
              v138[6] = 0u;
              v138[7] = 0u;
              v138[4] = 0u;
              v138[5] = 0u;
              float32x4_t v138[2] = 0u;
              v138[3] = 0u;
              *long long v138 = 0u;
              v138[1] = 0u;
              unsigned int v34 = v208;
              uint64_t v33 = v209;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE17ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v33;
          block[5] = v77;
          char v218 = v47;
          char v219 = v210;
          unsigned int v214 = v192;
          unsigned int v215 = v45 - v43;
          block[6] = v78;
          uint64_t v212 = v202 + 32 * (v45 - v34);
          uint64_t v35 = a11;
          uint64_t v213 = a11;
          unsigned int v216 = v203;
          unsigned int v217 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            uint64_t v33 = v209;
            unsigned int v34 = v208;
LABEL_27:
            unsigned int v42 = v40 + 1;
            goto LABEL_28;
          }
          uint64_t v86 = *(void *)(v33 + 208);
          int v87 = *(_DWORD *)(v86 + 52);
          unsigned int v88 = *v78;
          if (*v78)
          {
            if (v88 < 0xF0)
            {
              if (v88 == 7)
              {
                float64x2_t v89 = vld1q_dup_f64((const double *)v77);
                float64x2_t v221 = v89;
                __n128 v222 = (__n128)v89;
                __n128 v223 = (__n128)v89;
                __n128 v224 = (__n128)v89;
                __n128 v225 = (__n128)v89;
                __n128 v226 = (__n128)v89;
                __n128 v227 = (__n128)v89;
                __n128 v228 = (__n128)v89;
                __n128 v237 = (__n128)v89;
                __n128 v238 = (__n128)v89;
                __n128 v239 = (__n128)v89;
                __n128 v240 = (__n128)v89;
                __n128 v241 = (__n128)v89;
                __n128 v242 = (__n128)v89;
                uint64_t v90 = 8;
                __n128 v243 = (__n128)v89;
                __n128 v244 = (__n128)v89;
              }
              else
              {
                uint64_t v90 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v221, 256, (uint64_t)v77, v88, *(int8x8_t *)&v37.f64[0]);
              }
            }
            else
            {
              *(void *)&v89.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v221, 256, (uint64_t)v77, v88, *(_DWORD *)(v86 + 52)).n128_u64[0];
              uint64_t v90 = 128;
            }
          }
          else
          {
            uint64_t v90 = 0;
            v89.f64[0] = 0.0;
            __n128 v228 = 0u;
            __n128 v227 = 0u;
            __n128 v226 = 0u;
            __n128 v225 = 0u;
            __n128 v224 = 0u;
            __n128 v223 = 0u;
            __n128 v222 = 0u;
            float64x2_t v221 = 0u;
            __n128 v237 = 0u;
            __n128 v238 = 0u;
            __n128 v239 = 0u;
            __n128 v240 = 0u;
            __n128 v241 = 0u;
            __n128 v242 = 0u;
            __n128 v243 = 0u;
            __n128 v244 = 0u;
          }
          uint64_t v140 = (const double *)&v77[v90];
          unsigned int v141 = v78[1];
          if (v78[1])
          {
            if (v141 < 0xF0)
            {
              if (v141 == 7)
              {
                float64x2_t v142 = vld1q_dup_f64(v140);
                float64x2_t v253 = v142;
                __n128 v254 = (__n128)v142;
                __n128 v255 = (__n128)v142;
                __n128 v256 = (__n128)v142;
                __n128 v257 = (__n128)v142;
                __n128 v258 = (__n128)v142;
                __n128 v259 = (__n128)v142;
                __n128 v260 = (__n128)v142;
                __n128 v269 = (__n128)v142;
                __n128 v270 = (__n128)v142;
                __n128 v271 = (__n128)v142;
                __n128 v272 = (__n128)v142;
                __n128 v273 = (__n128)v142;
                __n128 v274 = (__n128)v142;
                uint64_t v143 = 8;
                __n128 v275 = (__n128)v142;
                __n128 v276 = (__n128)v142;
              }
              else
              {
                uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v253, 256, (uint64_t)v140, v141, *(int8x8_t *)&v89.f64[0]);
              }
            }
            else
            {
              *(void *)&v142.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v253, 256, (uint64_t)v140, v141, v87).n128_u64[0];
              uint64_t v143 = 128;
            }
          }
          else
          {
            uint64_t v143 = 0;
            v142.f64[0] = 0.0;
            __n128 v259 = 0u;
            __n128 v260 = 0u;
            __n128 v257 = 0u;
            __n128 v258 = 0u;
            __n128 v255 = 0u;
            __n128 v256 = 0u;
            float64x2_t v253 = 0u;
            __n128 v254 = 0u;
            __n128 v269 = 0u;
            __n128 v270 = 0u;
            __n128 v271 = 0u;
            __n128 v272 = 0u;
            __n128 v273 = 0u;
            __n128 v274 = 0u;
            __n128 v275 = 0u;
            __n128 v276 = 0u;
          }
          uint64_t v144 = (const double *)((char *)v140 + v143);
          unsigned int v145 = v78[2];
          if (v78[2])
          {
            if (v145 < 0xF0)
            {
              if (v145 == 7)
              {
                float64x2_t v146 = vld1q_dup_f64(v144);
                float64x2_t v229 = v146;
                __n128 v230 = (__n128)v146;
                __n128 v231 = (__n128)v146;
                __n128 v232 = (__n128)v146;
                __n128 v233 = (__n128)v146;
                __n128 v234 = (__n128)v146;
                __n128 v235 = (__n128)v146;
                __n128 v236 = (__n128)v146;
                __n128 v245 = (__n128)v146;
                __n128 v246 = (__n128)v146;
                __n128 v247 = (__n128)v146;
                __n128 v248 = (__n128)v146;
                __n128 v249 = (__n128)v146;
                __n128 v250 = (__n128)v146;
                uint64_t v147 = 8;
                __n128 v251 = (__n128)v146;
                __n128 v252 = (__n128)v146;
              }
              else
              {
                uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v229, 256, (uint64_t)v144, v145, *(int8x8_t *)&v142.f64[0]);
              }
            }
            else
            {
              *(void *)&v146.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v229, 256, (uint64_t)v144, v145, v87).n128_u64[0];
              uint64_t v147 = 128;
            }
          }
          else
          {
            uint64_t v147 = 0;
            v146.f64[0] = 0.0;
            __n128 v235 = 0u;
            __n128 v236 = 0u;
            __n128 v233 = 0u;
            __n128 v234 = 0u;
            __n128 v231 = 0u;
            __n128 v232 = 0u;
            float64x2_t v229 = 0u;
            __n128 v230 = 0u;
            __n128 v245 = 0u;
            __n128 v246 = 0u;
            __n128 v247 = 0u;
            __n128 v248 = 0u;
            __n128 v249 = 0u;
            __n128 v250 = 0u;
            __n128 v251 = 0u;
            __n128 v252 = 0u;
          }
          long long v148 = (const double *)((char *)v144 + v147);
          unsigned int v149 = v78[3];
          if (v78[3])
          {
            if (v149 < 0xF0)
            {
              if (v149 == 7)
              {
                float64x2_t v150 = vld1q_dup_f64(v148);
                float64x2_t v261 = v150;
                __n128 v262 = (__n128)v150;
                __n128 v263 = (__n128)v150;
                __n128 v264 = (__n128)v150;
                __n128 v265 = (__n128)v150;
                __n128 v266 = (__n128)v150;
                __n128 v267 = (__n128)v150;
                __n128 v268 = (__n128)v150;
                __n128 v277 = (__n128)v150;
                __n128 v278 = (__n128)v150;
                __n128 v279 = (__n128)v150;
                __n128 v280 = (__n128)v150;
                __n128 v281 = (__n128)v150;
                __n128 v282 = (__n128)v150;
                uint64_t v151 = 8;
                __n128 v283 = (__n128)v150;
                __n128 v284 = (__n128)v150;
              }
              else
              {
                uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v261, 256, (uint64_t)v148, v149, *(int8x8_t *)&v146.f64[0]);
              }
            }
            else
            {
              *(void *)&v150.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v261, 256, (uint64_t)v148, v149, v87).n128_u64[0];
              uint64_t v151 = 128;
            }
          }
          else
          {
            uint64_t v151 = 0;
            v150.f64[0] = 0.0;
            __n128 v267 = 0u;
            __n128 v268 = 0u;
            __n128 v265 = 0u;
            __n128 v266 = 0u;
            __n128 v263 = 0u;
            __n128 v264 = 0u;
            float64x2_t v261 = 0u;
            __n128 v262 = 0u;
            __n128 v277 = 0u;
            __n128 v278 = 0u;
            __n128 v279 = 0u;
            __n128 v280 = 0u;
            __n128 v281 = 0u;
            __n128 v282 = 0u;
            __n128 v283 = 0u;
            __n128 v284 = 0u;
          }
          long long v152 = (const double *)((char *)v148 + v151);
          unsigned int v153 = v78[4];
          if (v78[4])
          {
            if (v153 < 0xF0)
            {
              if (v153 == 7)
              {
                float64x2_t v154 = vld1q_dup_f64(v152);
                float64x2_t v285 = v154;
                __n128 v286 = (__n128)v154;
                __n128 v287 = (__n128)v154;
                __n128 v288 = (__n128)v154;
                __n128 v289 = (__n128)v154;
                __n128 v290 = (__n128)v154;
                __n128 v291 = (__n128)v154;
                __n128 v292 = (__n128)v154;
                __n128 v301 = (__n128)v154;
                __n128 v302 = (__n128)v154;
                __n128 v303 = (__n128)v154;
                __n128 v304 = (__n128)v154;
                __n128 v305 = (__n128)v154;
                __n128 v306 = (__n128)v154;
                __n128 v307 = (__n128)v154;
                uint64_t v155 = 8;
                __n128 v308 = (__n128)v154;
              }
              else
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v285, 256, (uint64_t)v152, v153, *(int8x8_t *)&v150.f64[0]);
              }
            }
            else
            {
              *(void *)&v154.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v285, 256, (uint64_t)v152, v153, v87).n128_u64[0];
              uint64_t v155 = 128;
            }
          }
          else
          {
            uint64_t v155 = 0;
            v154.f64[0] = 0.0;
            __n128 v291 = 0u;
            __n128 v292 = 0u;
            __n128 v289 = 0u;
            __n128 v290 = 0u;
            __n128 v287 = 0u;
            __n128 v288 = 0u;
            float64x2_t v285 = 0u;
            __n128 v286 = 0u;
            __n128 v301 = 0u;
            __n128 v302 = 0u;
            __n128 v303 = 0u;
            __n128 v304 = 0u;
            __n128 v305 = 0u;
            __n128 v306 = 0u;
            __n128 v307 = 0u;
            __n128 v308 = 0u;
          }
          uint64_t v156 = (const double *)((char *)v152 + v155);
          unsigned int v157 = v78[5];
          if (v78[5])
          {
            if (v157 < 0xF0)
            {
              if (v157 == 7)
              {
                float64x2_t v158 = vld1q_dup_f64(v156);
                float64x2_t v317 = v158;
                __n128 v318 = (__n128)v158;
                __n128 v319 = (__n128)v158;
                __n128 v320 = (__n128)v158;
                __n128 v321 = (__n128)v158;
                __n128 v322 = (__n128)v158;
                __n128 v323 = (__n128)v158;
                __n128 v324 = (__n128)v158;
                __n128 v333 = (__n128)v158;
                __n128 v334 = (__n128)v158;
                __n128 v335 = (__n128)v158;
                __n128 v336 = (__n128)v158;
                __n128 v337 = (__n128)v158;
                __n128 v338 = (__n128)v158;
                __n128 v339 = (__n128)v158;
                uint64_t v159 = 8;
                __n128 v340 = (__n128)v158;
              }
              else
              {
                uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v317, 256, (uint64_t)v156, v157, *(int8x8_t *)&v154.f64[0]);
              }
            }
            else
            {
              *(void *)&v158.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v317, 256, (uint64_t)v156, v157, v87).n128_u64[0];
              uint64_t v159 = 128;
            }
          }
          else
          {
            uint64_t v159 = 0;
            v158.f64[0] = 0.0;
            __n128 v323 = 0u;
            __n128 v324 = 0u;
            __n128 v321 = 0u;
            __n128 v322 = 0u;
            __n128 v319 = 0u;
            __n128 v320 = 0u;
            float64x2_t v317 = 0u;
            __n128 v318 = 0u;
            __n128 v333 = 0u;
            __n128 v334 = 0u;
            __n128 v335 = 0u;
            __n128 v336 = 0u;
            __n128 v337 = 0u;
            __n128 v338 = 0u;
            __n128 v339 = 0u;
            __n128 v340 = 0u;
          }
          int16x8_t v160 = (const double *)((char *)v156 + v159);
          unsigned int v161 = v78[6];
          if (v78[6])
          {
            if (v161 < 0xF0)
            {
              if (v161 == 7)
              {
                float64x2_t v162 = vld1q_dup_f64(v160);
                float64x2_t v293 = v162;
                __n128 v294 = (__n128)v162;
                __n128 v295 = (__n128)v162;
                __n128 v296 = (__n128)v162;
                __n128 v297 = (__n128)v162;
                __n128 v298 = (__n128)v162;
                __n128 v299 = (__n128)v162;
                __n128 v300 = (__n128)v162;
                __n128 v309 = (__n128)v162;
                __n128 v310 = (__n128)v162;
                __n128 v311 = (__n128)v162;
                __n128 v312 = (__n128)v162;
                __n128 v313 = (__n128)v162;
                __n128 v314 = (__n128)v162;
                __n128 v315 = (__n128)v162;
                uint64_t v163 = 8;
                __n128 v316 = (__n128)v162;
                unsigned int v164 = v78[7];
                if (!v78[7]) {
                  goto LABEL_207;
                }
              }
              else
              {
                uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v293, 256, (uint64_t)v160, v161, *(int8x8_t *)&v158.f64[0]);
                unsigned int v164 = v78[7];
                if (!v78[7])
                {
LABEL_207:
                  v37.f64[0] = 0.0;
                  float64x2_t v331 = 0u;
                  float64x2_t v332 = 0u;
                  float64x2_t v329 = 0u;
                  float64x2_t v330 = 0u;
                  float64x2_t v327 = 0u;
                  float64x2_t v328 = 0u;
                  __n128 v325 = 0u;
                  float64x2_t v326 = 0u;
                  float64x2_t v341 = 0u;
                  float64x2_t v342 = 0u;
                  float64x2_t v343 = 0u;
                  float64x2_t v344 = 0u;
                  float64x2_t v345 = 0u;
                  float64x2_t v346 = 0u;
                  float64x2_t v347 = 0u;
                  float64x2_t v348 = 0u;
                  goto LABEL_209;
                }
              }
            }
            else
            {
              *(void *)&v162.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((__n128 *)&v293, 256, (uint64_t)v160, v161, v87).n128_u64[0];
              uint64_t v163 = 128;
              unsigned int v164 = v78[7];
              if (!v78[7]) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            uint64_t v163 = 0;
            v162.f64[0] = 0.0;
            __n128 v299 = 0u;
            __n128 v300 = 0u;
            __n128 v297 = 0u;
            __n128 v298 = 0u;
            __n128 v295 = 0u;
            __n128 v296 = 0u;
            float64x2_t v293 = 0u;
            __n128 v294 = 0u;
            __n128 v309 = 0u;
            __n128 v310 = 0u;
            __n128 v311 = 0u;
            __n128 v312 = 0u;
            __n128 v313 = 0u;
            __n128 v314 = 0u;
            __n128 v315 = 0u;
            __n128 v316 = 0u;
            unsigned int v164 = v78[7];
            if (!v78[7]) {
              goto LABEL_207;
            }
          }
          long long v165 = (const double *)((char *)v160 + v163);
          if (v164 < 0xF0)
          {
            if (v164 == 7)
            {
              float64x2_t v37 = vld1q_dup_f64(v165);
              __n128 v325 = (__n128)v37;
              float64x2_t v326 = v37;
              float64x2_t v327 = v37;
              float64x2_t v328 = v37;
              float64x2_t v329 = v37;
              float64x2_t v330 = v37;
              float64x2_t v331 = v37;
              float64x2_t v332 = v37;
              float64x2_t v341 = v37;
              float64x2_t v342 = v37;
              float64x2_t v343 = v37;
              float64x2_t v344 = v37;
              float64x2_t v345 = v37;
              float64x2_t v346 = v37;
              float64x2_t v347 = v37;
              float64x2_t v348 = v37;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v325, 256, (uint64_t)v165, v164, *(int8x8_t *)&v162.f64[0]);
            }
          }
          else
          {
            *(void *)&v37.f64[0] = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)17,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v325, 256, (uint64_t)v165, v164, v87).n128_u64[0];
          }
LABEL_209:
          unsigned int v42 = v40 + 1;
          unint64_t v166 = v216;
          unsigned int v34 = v208;
          uint64_t v33 = v209;
          if (v216)
          {
            unint64_t v167 = 0;
            unint64_t v168 = (__n128 *)(&v221 + 16 * (unint64_t)v214 + 2 * v215);
            unsigned int v169 = v217;
            do
            {
              if (v169)
              {
                uint64_t v170 = 0;
                uint64_t v171 = v212 + v213 * v167;
                do
                {
                  *(unsigned char *)(v171 + v170) = v168->n128_u8[v170];
                  ++v170;
                  unsigned int v169 = v217;
                }
                while (32 * (unint64_t)v217 > v170);
                unint64_t v166 = v216;
              }
              ++v167;
              v168 += 16;
            }
            while (v167 < v166);
          }
LABEL_28:
          BOOL v28 = v40 == v197 >> 3;
          unsigned int v40 = v42;
        }
        while (!v28);
        BOOL v28 = v24++ == v189;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v270 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v222 = a8;
  unsigned int v16 = a8 >> 3;
  unsigned int v204 = a8 + a10 - 1;
  unsigned int v206 = v204 >> 3;
  unsigned int v17 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v18 = *(_DWORD *)(a1 + 112);
  uint64_t v226 = a1;
  if (*(void *)(a1 + 168)) {
    int v19 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v19 = 0;
  }
  BOOL v20 = (v19 & 0xD00) == 0 || v19 == 768;
  int v21 = v19 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v216 = v23;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  uint64_t v25 = a1;
  BOOL v215 = isLevelTiled;
  unsigned int v26 = a7;
  if (v16 <= v206)
  {
    unsigned int v214 = a7 + a9 - 1;
    if (a7 >> 3 <= v214 >> 3)
    {
      uint64_t v27 = a11;
      unsigned int v201 = a5 - 1;
      unsigned int v224 = (a5 - 1) >> 3;
      int v223 = ((a5 - 1) & 7) + 1;
      int v202 = ((a6 - 1) & 7) + 1;
      unsigned int v203 = (a6 - 1) >> 3;
      uint64_t v207 = 4 * a11;
      uint64_t v208 = 2 * a11;
      uint32x2_t v28 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0x700000007);
      *(int32x2_t *)v29.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v28, 3uLL)))))));
      v30.i64[0] = 0x1000000010;
      *(int8x8_t *)v31.i8 = vbic_s8(*(int8x8_t *)v29.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v28));
      __int32 v213 = v31.i32[0] | v31.i32[1];
      BOOL v211 = v31.i32[1] != 0;
      uint64_t v212 = v31.i64[0];
      BOOL v210 = v31.i32[0] != 0;
      unint64_t v200 = 8 * v18 * (unint64_t)v17;
      do
      {
        unsigned int v32 = (8 * v16) | 7;
        if (8 * v16 <= v222) {
          int v33 = v222;
        }
        else {
          int v33 = 8 * v16;
        }
        unsigned int v34 = a7 >> 3;
        if (v204 < v32) {
          unsigned int v32 = v204;
        }
        unsigned int v221 = 8 * v16;
        int v209 = v33 - 8 * v16;
        int v220 = v32 - v33 + 1;
        int v35 = v202;
        if (v16 != v203) {
          int v35 = 8;
        }
        unsigned int v227 = v35;
        uint64_t v219 = a2 + (v33 - v222) * v27;
        do
        {
          unsigned int v37 = 8 * v34;
          unsigned int v38 = 8 * (v34 + 1) - 1;
          if (8 * v34 <= v26) {
            int v39 = v26;
          }
          else {
            int v39 = 8 * v34;
          }
          if (v214 < v38) {
            unsigned int v38 = a7 + a9 - 1;
          }
          int v40 = v38 - v39 + 1;
          if (v34 == v224) {
            unsigned int v41 = v223;
          }
          else {
            unsigned int v41 = 8;
          }
          BOOL v42 = 1;
          if (v221 >= v222 && v37 >= v26)
          {
            int v43 = v223;
            if (v34 != v224) {
              int v43 = 8;
            }
            BOOL v42 = v40 != v43 || v220 != v227;
          }
          if (v215)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v200 >> (*(unsigned char *)(v25 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    char v68 = 0;
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v189 = (v66 >> 3) - 1;
            if (v68) {
              unsigned int v190 = 0;
            }
            else {
              unsigned int v190 = 32 - __clz(~(-1 << -(char)__clz(v189)));
            }
            unsigned int v191 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v192 = 0;
              if (v190) {
                goto LABEL_268;
              }
            }
            else
            {
              unsigned int v192 = 32 - __clz(~(-1 << -(char)__clz(v191)));
              if (v192 | v190)
              {
LABEL_268:
                int v193 = 0;
                uint64_t v194 = 0;
                int v195 = v34 & v189;
                int v196 = v16 & v191;
                BOOL v197 = v190 != 0;
                BOOL v198 = v192 != 0;
                int v199 = 1;
                do
                {
                  --v190;
                  if (v197) {
                    v194 |= (unint64_t)(v199 & v195) << v193++;
                  }
                  else {
                    unsigned int v190 = 0;
                  }
                  --v192;
                  if (v198) {
                    v194 |= (unint64_t)(v199 & v196) << v193++;
                  }
                  else {
                    unsigned int v192 = 0;
                  }
                  v199 *= 2;
                  --v193;
                  BOOL v198 = v192 != 0;
                  BOOL v197 = v190 != 0;
                }
                while (v192 | v190);
                goto LABEL_280;
              }
            }
            uint64_t v194 = 0;
LABEL_280:
            unint64_t v52 = ((unint64_t)(v37 / v66 + v221 / v70 * ((v66 + v201) / v66)) << 14) + (v194 << 8);
            goto LABEL_61;
          }
          if (v213)
          {
            int v45 = 0;
            uint64_t v46 = 0;
            int v47 = 1;
            BOOL v48 = v210;
            BOOL v49 = v211;
            int v51 = v212;
            int v50 = HIDWORD(v212);
            do
            {
              --v50;
              if (v49) {
                v46 |= (unint64_t)(v47 & v34) << v45++;
              }
              else {
                int v50 = 0;
              }
              --v51;
              if (v48) {
                v46 |= (unint64_t)(v47 & v16) << v45++;
              }
              else {
                int v51 = 0;
              }
              v47 *= 2;
              --v45;
              BOOL v48 = v51 != 0;
              BOOL v49 = v50 != 0;
            }
            while (v51 | v50);
          }
          else
          {
            uint64_t v46 = 0;
          }
          unint64_t v52 = v46 << 8;
LABEL_61:
          unsigned int v53 = *(_DWORD *)(v25 + 128) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v53 <= 1) {
            unsigned int v53 = 1;
          }
          unsigned int v54 = v53 + 7;
          if (v54 < 0x10) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = 32 - __clz(~(-1 << -(char)__clz((v54 >> 3) - 1)));
          }
          unsigned int v56 = *(_DWORD *)(v25 + 132) >> (*(unsigned char *)(v25 + 144) + a12);
          if (v56 <= 1) {
            unsigned int v56 = 1;
          }
          unsigned int v57 = v56 + 7;
          if (v57 < 0x10)
          {
            unsigned int v58 = 0;
            if (!v55)
            {
LABEL_87:
              unint64_t v60 = 0;
              goto LABEL_88;
            }
          }
          else
          {
            unsigned int v58 = 32 - __clz(~(-1 << -(char)__clz((v57 >> 3) - 1)));
            if (!(v58 | v55)) {
              goto LABEL_87;
            }
          }
          int v59 = 0;
          unint64_t v60 = 0;
          BOOL v61 = v55 != 0;
          BOOL v62 = v58 != 0;
          int v63 = 1;
          do
          {
            --v55;
            BOOL v64 = !v61;
            if (v61)
            {
              unint64_t v65 = ((unint64_t)(v63 & v34) << v59) | v60;
            }
            else
            {
              unsigned int v55 = 0;
              unint64_t v65 = v60;
            }
            if (!v64) {
              ++v59;
            }
            --v58;
            if (v62)
            {
              unint64_t v60 = ((unint64_t)(v63 & v16) << v59) | v65;
            }
            else
            {
              unsigned int v58 = 0;
              unint64_t v60 = v65;
            }
            if (v62) {
              ++v59;
            }
            v63 *= 2;
            --v59;
            BOOL v62 = v58 != 0;
            BOOL v61 = v55 != 0;
          }
          while (v58 | v55);
LABEL_88:
          unint64_t v71 = (int8x16_t *)(a3 + v52);
          if (v216)
          {
            memcpy(__dst, v71, sizeof(__dst));
            uint64_t v25 = v226;
            unsigned int v26 = a7;
            unint64_t v71 = (int8x16_t *)__dst;
          }
          unsigned int v72 = (unsigned __int8 *)(a4 + 8 * v60);
          uint64_t v73 = (int8x16_t *)(v219 + 8 * (v39 - v26));
          char v74 = v41 < 8 || v42;
          if ((v74 & 1) == 0 && v227 > 7)
          {
            uint64_t v75 = *(void *)(v25 + 208);
            int v76 = *(_DWORD *)(v75 + 52);
            unsigned int v77 = *v72;
            if (*v72)
            {
              uint64_t v27 = a11;
              if (v77 < 0xF0)
              {
                if (v77 == 63)
                {
                  int8x16_t v78 = *v71;
                  int8x16_t v29 = v71[1];
                  int8x16_t v30 = v71[2];
                  int8x16_t v87 = v71[3];
                  *uint64_t v73 = *v71;
                  v73[1] = v30;
                  unsigned int v88 = (int8x16_t *)((char *)v73 + a11);
                  *unsigned int v88 = v29;
                  v88[1] = v87;
                  uint64_t v79 = 64;
                }
                else if (v77 == 1)
                {
                  int8x16_t v78 = (int8x16_t)vld1q_dup_s16(v71->i16);
                  *uint64_t v73 = v78;
                  v73[1] = v78;
                  uint64_t v86 = (int8x16_t *)((char *)v73 + a11);
                  *uint64_t v86 = v78;
                  v86[1] = v78;
                  uint64_t v79 = 2;
                }
                else
                {
                  uint64_t v79 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v73, a11, (uint64_t)v71, v77, *(int8x8_t *)v31.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v73, a11, (uint64_t)v71, v77, *(_DWORD *)(v75 + 52));
                uint64_t v79 = 32;
              }
            }
            else
            {
              uint64_t v79 = 0;
              v78.i64[0] = 0;
              *uint64_t v73 = 0u;
              v73[1] = 0u;
              uint64_t v27 = a11;
              uint64_t v85 = &v73->i8[a11];
              *(_OWORD *)uint64_t v85 = 0u;
              *((_OWORD *)v85 + 1) = 0u;
            }
            uint64_t v89 = (uint64_t)v71->i64 + v79;
            uint64_t v90 = (int16x8_t *)&v73->i8[v208];
            unsigned int v91 = v72[1];
            if (v72[1])
            {
              if (v91 < 0xF0)
              {
                if (v91 == 63)
                {
                  int16x8_t v92 = *(int16x8_t *)v89;
                  int8x16_t v29 = *(int8x16_t *)(v89 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v89 + 32);
                  int8x16_t v96 = *(int8x16_t *)(v89 + 48);
                  *uint64_t v90 = *(int16x8_t *)v89;
                  v90[1] = (int16x8_t)v30;
                  uint64_t v97 = (int8x16_t *)&v90->i8[v27];
                  *uint64_t v97 = v29;
                  v97[1] = v96;
                  uint64_t v93 = 64;
                }
                else if (v91 == 1)
                {
                  int16x8_t v92 = vld1q_dup_s16((const __int16 *)v89);
                  *uint64_t v90 = v92;
                  v90[1] = v92;
                  unsigned int v95 = (int16x8_t *)((char *)v90 + v27);
                  *unsigned int v95 = v92;
                  v95[1] = v92;
                  uint64_t v93 = 2;
                }
                else
                {
                  uint64_t v93 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v73 + v208), v27, v89, v91, *(int8x8_t *)v78.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v73->i16[(unint64_t)v208 / 2], v27, v89, v91, v76);
                uint64_t v93 = 32;
              }
            }
            else
            {
              uint64_t v93 = 0;
              v92.i64[0] = 0;
              *uint64_t v90 = 0u;
              v90[1] = 0u;
              int32x4_t v94 = &v90->i8[v27];
              *(_OWORD *)int32x4_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v98 = v89 + v93;
            unsigned int v99 = v73 + 2;
            unsigned int v100 = v72[2];
            if (v72[2])
            {
              if (v100 < 0xF0)
              {
                if (v100 == 63)
                {
                  int16x8_t v101 = *(int16x8_t *)v98;
                  int8x16_t v29 = *(int8x16_t *)(v98 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v98 + 32);
                  long long v105 = *(_OWORD *)(v98 + 48);
                  v73[2] = *(int8x16_t *)v98;
                  v73[3] = v30;
                  int32x4_t v106 = &v99->i8[v27];
                  *(int8x16_t *)int32x4_t v106 = v29;
                  *((_OWORD *)v106 + 1) = v105;
                  uint64_t v102 = 64;
                }
                else if (v100 == 1)
                {
                  int16x8_t v101 = vld1q_dup_s16((const __int16 *)v98);
                  v73[2] = (int8x16_t)v101;
                  v73[3] = (int8x16_t)v101;
                  uint64_t v104 = (int16x8_t *)&v99->i8[v27];
                  *uint64_t v104 = v101;
                  v104[1] = v101;
                  uint64_t v102 = 2;
                }
                else
                {
                  uint64_t v102 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v99, v27, v98, v100, *(int8x8_t *)v92.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v99, v27, v98, v100, v76);
                uint64_t v102 = 32;
              }
            }
            else
            {
              uint64_t v102 = 0;
              v101.i64[0] = 0;
              *unsigned int v99 = 0u;
              v73[3] = 0u;
              __n128 v103 = &v99->i8[v27];
              *(_OWORD *)__n128 v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
            }
            uint64_t v107 = v98 + v102;
            long long v108 = (int8x16_t *)&v90[2];
            unsigned int v109 = v72[3];
            if (v72[3])
            {
              if (v109 < 0xF0)
              {
                if (v109 == 63)
                {
                  int16x8_t v110 = *(int16x8_t *)v107;
                  int8x16_t v29 = *(int8x16_t *)(v107 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v107 + 32);
                  long long v114 = *(_OWORD *)(v107 + 48);
                  v90[2] = *(int16x8_t *)v107;
                  v90[3] = (int16x8_t)v30;
                  int32x4_t v115 = &v108->i8[v27];
                  *(int8x16_t *)int32x4_t v115 = v29;
                  *((_OWORD *)v115 + 1) = v114;
                  uint64_t v111 = 64;
                }
                else if (v109 == 1)
                {
                  int16x8_t v110 = vld1q_dup_s16((const __int16 *)v107);
                  v90[2] = v110;
                  v90[3] = v110;
                  unsigned int v113 = (int16x8_t *)&v108->i8[v27];
                  *unsigned int v113 = v110;
                  v113[1] = v110;
                  uint64_t v111 = 2;
                }
                else
                {
                  uint64_t v111 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v108, v27, v107, v109, *(int8x8_t *)v101.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v108, v27, v107, v109, v76);
                uint64_t v111 = 32;
              }
            }
            else
            {
              uint64_t v111 = 0;
              v110.i64[0] = 0;
              *long long v108 = 0u;
              v90[3] = 0u;
              uint64_t v112 = &v108->i8[v27];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
            }
            uint64_t v116 = v107 + v111;
            __n128 v117 = (int16x8_t *)&v73->i8[v207];
            unsigned int v118 = v72[4];
            if (v72[4])
            {
              if (v118 < 0xF0)
              {
                if (v118 == 63)
                {
                  int16x8_t v119 = *(int16x8_t *)v116;
                  int8x16_t v29 = *(int8x16_t *)(v116 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v116 + 32);
                  int8x16_t v123 = *(int8x16_t *)(v116 + 48);
                  *__n128 v117 = *(int16x8_t *)v116;
                  v117[1] = (int16x8_t)v30;
                  __n128 v124 = (int8x16_t *)&v117->i8[v27];
                  *__n128 v124 = v29;
                  v124[1] = v123;
                  uint64_t v120 = 64;
                }
                else if (v118 == 1)
                {
                  int16x8_t v119 = vld1q_dup_s16((const __int16 *)v116);
                  *__n128 v117 = v119;
                  v117[1] = v119;
                  uint64_t v122 = (int16x8_t *)((char *)v117 + v27);
                  *uint64_t v122 = v119;
                  v122[1] = v119;
                  uint64_t v120 = 2;
                }
                else
                {
                  uint64_t v120 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((int8x16_t *)((char *)v73 + v207), v27, v116, v118, *(int8x8_t *)v110.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v73->i16[(unint64_t)v207 / 2], v27, v116, v118, v76);
                uint64_t v120 = 32;
              }
            }
            else
            {
              uint64_t v120 = 0;
              v119.i64[0] = 0;
              *__n128 v117 = 0u;
              v117[1] = 0u;
              long long v121 = &v117->i8[v27];
              *(_OWORD *)long long v121 = 0u;
              *((_OWORD *)v121 + 1) = 0u;
            }
            uint64_t v125 = v116 + v120;
            uint64_t v126 = (int8x16_t *)((char *)v73 + 6 * a11);
            unsigned int v127 = v72[5];
            if (v72[5])
            {
              if (v127 < 0xF0)
              {
                if (v127 == 63)
                {
                  int16x8_t v128 = *(int16x8_t *)v125;
                  int8x16_t v29 = *(int8x16_t *)(v125 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v125 + 32);
                  int8x16_t v132 = *(int8x16_t *)(v125 + 48);
                  *uint64_t v126 = *(int8x16_t *)v125;
                  v126[1] = v30;
                  long long v133 = (int8x16_t *)((char *)v126 + v27);
                  *long long v133 = v29;
                  v133[1] = v132;
                  uint64_t v129 = 64;
                }
                else if (v127 == 1)
                {
                  int16x8_t v128 = vld1q_dup_s16((const __int16 *)v125);
                  *uint64_t v126 = (int8x16_t)v128;
                  v126[1] = (int8x16_t)v128;
                  __n128 v131 = (int16x8_t *)&v126->i8[v27];
                  *__n128 v131 = v128;
                  v131[1] = v128;
                  uint64_t v129 = 2;
                }
                else
                {
                  uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v126, v27, v125, v127, *(int8x8_t *)v119.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v126, v27, v125, v127, v76);
                uint64_t v129 = 32;
              }
            }
            else
            {
              uint64_t v129 = 0;
              v128.i64[0] = 0;
              *uint64_t v126 = 0u;
              v126[1] = 0u;
              unsigned int v130 = &v126->i8[v27];
              *(_OWORD *)unsigned int v130 = 0u;
              *((_OWORD *)v130 + 1) = 0u;
            }
            uint64_t v134 = v125 + v129;
            int32x4_t v135 = (int8x16_t *)&v117[2];
            unsigned int v136 = v72[6];
            if (v72[6])
            {
              if (v136 < 0xF0)
              {
                if (v136 == 63)
                {
                  int16x8_t v137 = *(int16x8_t *)v134;
                  int8x16_t v29 = *(int8x16_t *)(v134 + 16);
                  int8x16_t v30 = *(int8x16_t *)(v134 + 32);
                  long long v141 = *(_OWORD *)(v134 + 48);
                  v117[2] = *(int16x8_t *)v134;
                  v117[3] = (int16x8_t)v30;
                  float64x2_t v142 = &v135->i8[v27];
                  *(int8x16_t *)float64x2_t v142 = v29;
                  *((_OWORD *)v142 + 1) = v141;
                  uint64_t v138 = 64;
                }
                else if (v136 == 1)
                {
                  int16x8_t v137 = vld1q_dup_s16((const __int16 *)v134);
                  v117[2] = v137;
                  v117[3] = v137;
                  uint64_t v140 = (int16x8_t *)&v135->i8[v27];
                  *uint64_t v140 = v137;
                  v140[1] = v137;
                  uint64_t v138 = 2;
                }
                else
                {
                  uint64_t v138 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v135, v27, v134, v136, *(int8x8_t *)v128.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v135, v27, v134, v136, v76);
                uint64_t v138 = 32;
              }
            }
            else
            {
              uint64_t v138 = 0;
              v137.i64[0] = 0;
              *int32x4_t v135 = 0u;
              v117[3] = 0u;
              uint64_t v139 = &v135->i8[v27];
              *(_OWORD *)uint64_t v139 = 0u;
              *((_OWORD *)v139 + 1) = 0u;
            }
            uint64_t v143 = v126 + 2;
            unsigned int v144 = v72[7];
            if (v72[7])
            {
              uint64_t v145 = v134 + v138;
              if (v144 >= 0xF0)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v143, v27, v145, v144, v76);
              }
              else if (v144 == 63)
              {
                int8x16_t v31 = *(int8x16_t *)v145;
                int8x16_t v29 = *(int8x16_t *)(v145 + 16);
                int8x16_t v30 = *(int8x16_t *)(v145 + 32);
                long long v147 = *(_OWORD *)(v145 + 48);
                v126[2] = *(int8x16_t *)v145;
                v126[3] = v30;
                long long v148 = &v143->i8[v27];
                *(int8x16_t *)long long v148 = v29;
                *((_OWORD *)v148 + 1) = v147;
              }
              else
              {
                if (v144 == 1)
                {
                  int8x16_t v31 = (int8x16_t)vld1q_dup_s16((const __int16 *)v145);
                  v126[2] = v31;
                  v126[3] = v31;
                  goto LABEL_173;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v143, v27, v145, v144, *(int8x8_t *)v137.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              int8x16_t v31 = 0uLL;
              *uint64_t v143 = 0u;
              v126[3] = 0u;
LABEL_173:
              float64x2_t v146 = (int8x16_t *)((char *)v143 + v27);
              *float64x2_t v146 = v31;
              v146[1] = v31;
            }
            unsigned int v26 = a7;
            uint64_t v25 = v226;
LABEL_28:
            unsigned int v36 = v34 + 1;
            goto LABEL_29;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE4ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v25;
          block[5] = v71;
          char v235 = v41;
          char v236 = v227;
          unsigned int v231 = v209;
          unsigned int v232 = v39 - v37;
          block[6] = v72;
          uint64_t v229 = v219 + 8 * (v39 - v26);
          uint64_t v27 = a11;
          uint64_t v230 = a11;
          unsigned int v233 = v220;
          unsigned int v234 = v40;
          if (v42)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v25 + 8) + 7384), block);
            uint64_t v25 = v226;
            unsigned int v26 = a7;
            goto LABEL_28;
          }
          uint64_t v80 = *(void *)(v25 + 208);
          int v81 = *(_DWORD *)(v80 + 52);
          unsigned int v82 = *v72;
          if (*v72)
          {
            if (v82 < 0xF0)
            {
              if (v82 == 63)
              {
                int16x8_t v83 = *(int16x8_t *)v71;
                int8x16_t v29 = v71[1];
                int8x16_t v30 = v71[2];
                int8x16_t v149 = v71[3];
                int8x16_t v238 = *v71;
                int16x8_t v239 = (int16x8_t)v30;
                int16x8_t v242 = (int16x8_t)v29;
                int16x8_t v243 = (int16x8_t)v149;
                uint64_t v84 = 64;
              }
              else if (v82 == 1)
              {
                int16x8_t v83 = vld1q_dup_s16(v71->i16);
                int8x16_t v238 = (int8x16_t)v83;
                int16x8_t v239 = v83;
                int16x8_t v242 = v83;
                int16x8_t v243 = v83;
                uint64_t v84 = 2;
              }
              else
              {
                uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v238, 64, (uint64_t)v71, v82, *(int8x8_t *)v31.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v238, 64, (uint64_t)v71, v82, *(_DWORD *)(v80 + 52));
              uint64_t v84 = 32;
            }
          }
          else
          {
            uint64_t v84 = 0;
            v83.i64[0] = 0;
            int8x16_t v238 = 0u;
            int16x8_t v239 = 0u;
            int16x8_t v242 = 0u;
            int16x8_t v243 = 0u;
          }
          uint64_t v150 = (uint64_t)v71->i64 + v84;
          unsigned int v151 = v72[1];
          if (v72[1])
          {
            if (v151 < 0xF0)
            {
              if (v151 == 63)
              {
                int8x16_t v152 = *(int8x16_t *)v150;
                int8x16_t v29 = *(int8x16_t *)(v150 + 16);
                int8x16_t v30 = *(int8x16_t *)(v150 + 32);
                int8x16_t v154 = *(int8x16_t *)(v150 + 48);
                int8x16_t v246 = *(int8x16_t *)v150;
                int8x16_t v247 = v30;
                int8x16_t v250 = v29;
                int8x16_t v251 = v154;
                uint64_t v153 = 64;
              }
              else if (v151 == 1)
              {
                int8x16_t v152 = (int8x16_t)vld1q_dup_s16((const __int16 *)v150);
                int8x16_t v246 = v152;
                int8x16_t v247 = v152;
                int8x16_t v250 = v152;
                int8x16_t v251 = v152;
                uint64_t v153 = 2;
              }
              else
              {
                uint64_t v153 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v246, 64, v150, v151, *(int8x8_t *)v83.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v246, 64, v150, v151, v81);
              uint64_t v153 = 32;
            }
          }
          else
          {
            uint64_t v153 = 0;
            v152.i64[0] = 0;
            int8x16_t v246 = 0u;
            int8x16_t v247 = 0u;
            int8x16_t v250 = 0u;
            int8x16_t v251 = 0u;
          }
          uint64_t v155 = v150 + v153;
          unsigned int v156 = v72[2];
          if (v72[2])
          {
            if (v156 < 0xF0)
            {
              if (v156 == 63)
              {
                int8x16_t v157 = *(int8x16_t *)v155;
                int8x16_t v29 = *(int8x16_t *)(v155 + 16);
                int8x16_t v30 = *(int8x16_t *)(v155 + 32);
                int8x16_t v159 = *(int8x16_t *)(v155 + 48);
                int8x16_t v240 = *(int8x16_t *)v155;
                int8x16_t v241 = v30;
                int8x16_t v244 = v29;
                int8x16_t v245 = v159;
                uint64_t v158 = 64;
              }
              else if (v156 == 1)
              {
                int8x16_t v157 = (int8x16_t)vld1q_dup_s16((const __int16 *)v155);
                int8x16_t v240 = v157;
                int8x16_t v241 = v157;
                int8x16_t v244 = v157;
                int8x16_t v245 = v157;
                uint64_t v158 = 2;
              }
              else
              {
                uint64_t v158 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v240, 64, v155, v156, *(int8x8_t *)v152.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v240, 64, v155, v156, v81);
              uint64_t v158 = 32;
            }
          }
          else
          {
            uint64_t v158 = 0;
            v157.i64[0] = 0;
            int8x16_t v240 = 0u;
            int8x16_t v241 = 0u;
            int8x16_t v244 = 0u;
            int8x16_t v245 = 0u;
          }
          uint64_t v160 = v155 + v158;
          unsigned int v161 = v72[3];
          if (v72[3])
          {
            if (v161 < 0xF0)
            {
              if (v161 == 63)
              {
                int8x16_t v162 = *(int8x16_t *)v160;
                int8x16_t v29 = *(int8x16_t *)(v160 + 16);
                int8x16_t v30 = *(int8x16_t *)(v160 + 32);
                int8x16_t v164 = *(int8x16_t *)(v160 + 48);
                int8x16_t v248 = *(int8x16_t *)v160;
                int8x16_t v249 = v30;
                int8x16_t v252 = v29;
                int8x16_t v253 = v164;
                uint64_t v163 = 64;
              }
              else if (v161 == 1)
              {
                int8x16_t v162 = (int8x16_t)vld1q_dup_s16((const __int16 *)v160);
                int8x16_t v248 = v162;
                int8x16_t v249 = v162;
                int8x16_t v252 = v162;
                int8x16_t v253 = v162;
                uint64_t v163 = 2;
              }
              else
              {
                uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v248, 64, v160, v161, *(int8x8_t *)v157.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v248, 64, v160, v161, v81);
              uint64_t v163 = 32;
            }
          }
          else
          {
            uint64_t v163 = 0;
            v162.i64[0] = 0;
            int8x16_t v248 = 0u;
            int8x16_t v249 = 0u;
            int8x16_t v252 = 0u;
            int8x16_t v253 = 0u;
          }
          uint64_t v165 = v160 + v163;
          unsigned int v166 = v72[4];
          if (v72[4])
          {
            if (v166 < 0xF0)
            {
              if (v166 == 63)
              {
                int8x16_t v167 = *(int8x16_t *)v165;
                int8x16_t v29 = *(int8x16_t *)(v165 + 16);
                int8x16_t v30 = *(int8x16_t *)(v165 + 32);
                int8x16_t v169 = *(int8x16_t *)(v165 + 48);
                int8x16_t v254 = *(int8x16_t *)v165;
                int8x16_t v255 = v30;
                int8x16_t v258 = v29;
                int8x16_t v259 = v169;
                uint64_t v168 = 64;
              }
              else if (v166 == 1)
              {
                int8x16_t v167 = (int8x16_t)vld1q_dup_s16((const __int16 *)v165);
                int8x16_t v254 = v167;
                int8x16_t v255 = v167;
                int8x16_t v258 = v167;
                int8x16_t v259 = v167;
                uint64_t v168 = 2;
              }
              else
              {
                uint64_t v168 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v254, 64, v165, v166, *(int8x8_t *)v162.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v254, 64, v165, v166, v81);
              uint64_t v168 = 32;
            }
          }
          else
          {
            uint64_t v168 = 0;
            v167.i64[0] = 0;
            int8x16_t v254 = 0u;
            int8x16_t v255 = 0u;
            int8x16_t v258 = 0u;
            int8x16_t v259 = 0u;
          }
          uint64_t v170 = v165 + v168;
          unsigned int v171 = v72[5];
          if (v72[5])
          {
            if (v171 < 0xF0)
            {
              if (v171 == 63)
              {
                int8x16_t v172 = *(int8x16_t *)v170;
                int8x16_t v29 = *(int8x16_t *)(v170 + 16);
                int8x16_t v30 = *(int8x16_t *)(v170 + 32);
                int8x16_t v174 = *(int8x16_t *)(v170 + 48);
                int8x16_t v262 = *(int8x16_t *)v170;
                int8x16_t v263 = v30;
                int8x16_t v266 = v29;
                int8x16_t v267 = v174;
                uint64_t v173 = 64;
              }
              else if (v171 == 1)
              {
                int8x16_t v172 = (int8x16_t)vld1q_dup_s16((const __int16 *)v170);
                int8x16_t v262 = v172;
                int8x16_t v263 = v172;
                int8x16_t v266 = v172;
                int8x16_t v267 = v172;
                uint64_t v173 = 2;
              }
              else
              {
                uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v262, 64, v170, v171, *(int8x8_t *)v167.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v262, 64, v170, v171, v81);
              uint64_t v173 = 32;
            }
          }
          else
          {
            uint64_t v173 = 0;
            v172.i64[0] = 0;
            int8x16_t v262 = 0u;
            int8x16_t v263 = 0u;
            int8x16_t v266 = 0u;
            int8x16_t v267 = 0u;
          }
          uint64_t v175 = v170 + v173;
          unsigned int v176 = v72[6];
          if (v72[6])
          {
            if (v176 < 0xF0)
            {
              if (v176 == 63)
              {
                int8x16_t v177 = *(int8x16_t *)v175;
                int8x16_t v29 = *(int8x16_t *)(v175 + 16);
                int8x16_t v30 = *(int8x16_t *)(v175 + 32);
                int8x16_t v181 = *(int8x16_t *)(v175 + 48);
                int8x16_t v256 = *(int8x16_t *)v175;
                int8x16_t v257 = v30;
                int8x16_t v260 = v29;
                int8x16_t v261 = v181;
                uint64_t v178 = 64;
                unsigned int v179 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else if (v176 == 1)
              {
                int8x16_t v177 = (int8x16_t)vld1q_dup_s16((const __int16 *)v175);
                int8x16_t v256 = v177;
                int8x16_t v257 = v177;
                int8x16_t v260 = v177;
                int8x16_t v261 = v177;
                uint64_t v178 = 2;
                unsigned int v179 = v72[7];
                if (!v72[7]) {
                  goto LABEL_226;
                }
              }
              else
              {
                uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v256, 64, v175, v176, *(int8x8_t *)v172.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
                unsigned int v179 = v72[7];
                if (!v72[7])
                {
LABEL_226:
                  v31.i64[0] = 0;
                  int8x16_t v264 = 0u;
                  int8x16_t v265 = 0u;
                  int8x16_t v268 = 0u;
                  int8x16_t v269 = 0u;
                  goto LABEL_243;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v256, 64, v175, v176, v81);
              uint64_t v178 = 32;
              unsigned int v179 = v72[7];
              if (!v72[7]) {
                goto LABEL_226;
              }
            }
          }
          else
          {
            uint64_t v178 = 0;
            v177.i64[0] = 0;
            int8x16_t v256 = 0u;
            int8x16_t v257 = 0u;
            int8x16_t v260 = 0u;
            int8x16_t v261 = 0u;
            unsigned int v179 = v72[7];
            if (!v72[7]) {
              goto LABEL_226;
            }
          }
          uint64_t v180 = v175 + v178;
          if (v179 < 0xF0)
          {
            if (v179 == 63)
            {
              int8x16_t v31 = *(int8x16_t *)v180;
              int8x16_t v29 = *(int8x16_t *)(v180 + 16);
              int8x16_t v30 = *(int8x16_t *)(v180 + 32);
              int8x16_t v182 = *(int8x16_t *)(v180 + 48);
              int8x16_t v264 = *(int8x16_t *)v180;
              int8x16_t v265 = v30;
              int8x16_t v268 = v29;
              int8x16_t v269 = v182;
            }
            else if (v179 == 1)
            {
              int8x16_t v31 = (int8x16_t)vld1q_dup_s16((const __int16 *)v180);
              int8x16_t v264 = v31;
              int8x16_t v265 = v31;
              int8x16_t v268 = v31;
              int8x16_t v269 = v31;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(&v264, 64, v180, v179, *(int8x8_t *)v177.i8, *(double *)v29.i64, *(int8x8_t *)v30.i8);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)4,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(&v264, 64, v180, v179, v81);
          }
LABEL_243:
          unsigned int v36 = v34 + 1;
          unint64_t v183 = v233;
          unsigned int v26 = a7;
          uint64_t v25 = v226;
          if (v233)
          {
            unint64_t v184 = 0;
            int v185 = &v238.i8[64 * (unint64_t)v231 + 8 * v232];
            unsigned int v186 = v234;
            do
            {
              if (v186)
              {
                uint64_t v187 = 0;
                uint64_t v188 = v229 + v230 * v184;
                do
                {
                  *(unsigned char *)(v188 + v187) = v185[v187];
                  ++v187;
                  unsigned int v186 = v234;
                }
                while (8 * (unint64_t)v234 > v187);
                unint64_t v183 = v233;
              }
              ++v184;
              v185 += 64;
            }
            while (v184 < v183);
          }
LABEL_29:
          BOOL v20 = v34 == v214 >> 3;
          unsigned int v34 = v36;
        }
        while (!v20);
        BOOL v20 = v16++ == v206;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  unsigned int v210 = v15;
  unsigned int v17 = v16;
  unsigned int v19 = v18;
  uint64_t v202 = v20;
  uint64_t v203 = v21;
  uint64_t v190 = v22;
  uint64_t v23 = v12;
  uint64_t v351 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v207 = v14;
  unsigned int v24 = v14 >> 3;
  unsigned int v189 = v14 + a10 - 1;
  unsigned int v191 = v189 >> 3;
  unsigned int v25 = *(unsigned __int8 *)(*(void *)(v23 + 208) + 88);
  unsigned int v26 = *(_DWORD *)(v23 + 112);
  uint64_t v211 = v23;
  if (*(void *)(v23 + 168)) {
    int v27 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v27 = 0;
  }
  BOOL v28 = (v27 & 0xD00) == 0 || v27 == 768;
  int v29 = v27 & 0xE00;
  int v31 = !v28 && v29 != 1024;
  int v201 = v31;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v23, *(_DWORD *)(v23 + 144) + a12);
  uint64_t v33 = v23;
  BOOL v200 = isLevelTiled;
  unsigned int v34 = v210;
  if (v24 <= v191)
  {
    unsigned int v199 = v210 + a9 - 1;
    if (v210 >> 3 <= v199 >> 3)
    {
      uint64_t v35 = a11;
      unsigned int v186 = v19 - 1;
      unsigned int v209 = (v19 - 1) >> 3;
      int v208 = ((v19 - 1) & 7) + 1;
      int v187 = ((v17 - 1) & 7) + 1;
      unsigned int v188 = (v17 - 1) >> 3;
      uint64_t v192 = 4 * a11;
      uint64_t v193 = 2 * a11;
      uint32x2_t v36 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v19, v17), (int32x2_t)0x700000007);
      int8x8_t v37 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v36, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v36));
      __int32 v198 = v37.i32[0] | v37.i32[1];
      BOOL v196 = v37.i32[1] != 0;
      int8x8_t v197 = v37;
      BOOL v195 = v37.i32[0] != 0;
      unint64_t v185 = 8 * v26 * (unint64_t)v25;
      do
      {
        unsigned int v38 = (8 * v24) | 7;
        if (8 * v24 <= v207) {
          int v39 = v207;
        }
        else {
          int v39 = 8 * v24;
        }
        unsigned int v40 = v210 >> 3;
        if (v189 < v38) {
          unsigned int v38 = v189;
        }
        unsigned int v206 = 8 * v24;
        int v194 = v39 - 8 * v24;
        int v205 = v38 - v39 + 1;
        int v41 = v187;
        if (v24 != v188) {
          int v41 = 8;
        }
        unsigned int v212 = v41;
        uint64_t v204 = v190 + (v39 - v207) * v35;
        do
        {
          unsigned int v43 = 8 * v40;
          unsigned int v44 = 8 * (v40 + 1) - 1;
          if (8 * v40 <= v34) {
            int v45 = v34;
          }
          else {
            int v45 = 8 * v40;
          }
          if (v199 < v44) {
            unsigned int v44 = v210 + a9 - 1;
          }
          int v46 = v44 - v45 + 1;
          if (v40 == v209) {
            unsigned int v47 = v208;
          }
          else {
            unsigned int v47 = 8;
          }
          BOOL v48 = 1;
          if (v206 >= v207 && v43 >= v34)
          {
            int v49 = v208;
            if (v40 != v209) {
              int v49 = 8;
            }
            BOOL v48 = v46 != v49 || v205 != v212;
          }
          if (v200)
          {
            unsigned int v72 = 0;
            uint64_t v73 = v185 >> (*(unsigned char *)(v33 + 57) != 0);
            char v74 = 1;
            if (v73 > 127)
            {
              if (v73 > 511)
              {
                if (v73 == 512)
                {
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 16;
                  unsigned int v76 = 16;
                }
                else
                {
                  char v75 = 1;
                  unsigned int v76 = 0;
                  if (v73 == 1024)
                  {
                    char v74 = 0;
                    unsigned int v76 = 8;
                    unsigned int v72 = 16;
                  }
                }
              }
              else if (v73 == 128)
              {
                char v74 = 0;
                char v75 = 0;
                unsigned int v72 = 32;
                unsigned int v76 = 32;
              }
              else
              {
                char v75 = 1;
                unsigned int v76 = 0;
                if (v73 == 256)
                {
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 16;
                  unsigned int v72 = 32;
                }
              }
            }
            else
            {
              char v75 = 1;
              unsigned int v76 = 0;
              switch(v73)
              {
                case 4:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 128;
                  unsigned int v72 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 128;
                  unsigned int v76 = 128;
                  break;
                case 16:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v76 = 64;
                  unsigned int v72 = 128;
                  break;
                case 32:
                  char v74 = 0;
                  char v75 = 0;
                  unsigned int v72 = 64;
                  unsigned int v76 = 64;
                  break;
                default:
                  if (v73 == 64)
                  {
                    char v74 = 0;
                    char v75 = 0;
                    unsigned int v76 = 32;
                    unsigned int v72 = 64;
                  }
                  break;
              }
            }
            unsigned int v174 = (v72 >> 3) - 1;
            if (v74) {
              unsigned int v175 = 0;
            }
            else {
              unsigned int v175 = 32 - __clz(~(-1 << -(char)__clz(v174)));
            }
            unsigned int v176 = (v76 >> 3) - 1;
            if (v75)
            {
              unsigned int v177 = 0;
              if (v175) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v177 = 32 - __clz(~(-1 << -(char)__clz(v176)));
              if (v177 | v175)
              {
LABEL_234:
                int v178 = 0;
                uint64_t v179 = 0;
                int v180 = v40 & v174;
                int v181 = v24 & v176;
                BOOL v182 = v175 != 0;
                BOOL v183 = v177 != 0;
                int v184 = 1;
                do
                {
                  --v175;
                  if (v182) {
                    v179 |= (unint64_t)(v184 & v180) << v178++;
                  }
                  else {
                    unsigned int v175 = 0;
                  }
                  --v177;
                  if (v183) {
                    v179 |= (unint64_t)(v184 & v181) << v178++;
                  }
                  else {
                    unsigned int v177 = 0;
                  }
                  v184 *= 2;
                  --v178;
                  BOOL v183 = v177 != 0;
                  BOOL v182 = v175 != 0;
                }
                while (v177 | v175);
                goto LABEL_246;
              }
            }
            uint64_t v179 = 0;
LABEL_246:
            unint64_t v58 = ((unint64_t)(v43 / v72 + v206 / v76 * ((v72 + v186) / v72)) << 14) + (v179 << 10);
            goto LABEL_60;
          }
          if (v198)
          {
            int v51 = 0;
            uint64_t v52 = 0;
            int v53 = 1;
            BOOL v54 = v195;
            BOOL v55 = v196;
            __int32 v57 = v197.i32[0];
            __int32 v56 = v197.i32[1];
            do
            {
              --v56;
              if (v55) {
                v52 |= (unint64_t)(v53 & v40) << v51++;
              }
              else {
                __int32 v56 = 0;
              }
              --v57;
              if (v54) {
                v52 |= (unint64_t)(v53 & v24) << v51++;
              }
              else {
                __int32 v57 = 0;
              }
              v53 *= 2;
              --v51;
              BOOL v54 = v57 != 0;
              BOOL v55 = v56 != 0;
            }
            while (v57 | v56);
          }
          else
          {
            uint64_t v52 = 0;
          }
          unint64_t v58 = v52 << 10;
LABEL_60:
          unsigned int v59 = *(_DWORD *)(v33 + 128) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v59 <= 1) {
            unsigned int v59 = 1;
          }
          unsigned int v60 = v59 + 7;
          if (v60 < 0x10) {
            unsigned int v61 = 0;
          }
          else {
            unsigned int v61 = 32 - __clz(~(-1 << -(char)__clz((v60 >> 3) - 1)));
          }
          unsigned int v62 = *(_DWORD *)(v33 + 132) >> (*(unsigned char *)(v33 + 144) + a12);
          if (v62 <= 1) {
            unsigned int v62 = 1;
          }
          unsigned int v63 = v62 + 7;
          if (v63 < 0x10)
          {
            unsigned int v64 = 0;
            if (!v61)
            {
LABEL_86:
              unint64_t v66 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v64 = 32 - __clz(~(-1 << -(char)__clz((v63 >> 3) - 1)));
            if (!(v64 | v61)) {
              goto LABEL_86;
            }
          }
          int v65 = 0;
          unint64_t v66 = 0;
          BOOL v67 = v61 != 0;
          BOOL v68 = v64 != 0;
          int v69 = 1;
          do
          {
            --v61;
            BOOL v70 = !v67;
            if (v67)
            {
              unint64_t v71 = ((unint64_t)(v69 & v40) << v65) | v66;
            }
            else
            {
              unsigned int v61 = 0;
              unint64_t v71 = v66;
            }
            if (!v70) {
              ++v65;
            }
            --v64;
            if (v68)
            {
              unint64_t v66 = ((unint64_t)(v69 & v24) << v65) | v71;
            }
            else
            {
              unsigned int v64 = 0;
              unint64_t v66 = v71;
            }
            if (v68) {
              ++v65;
            }
            v69 *= 2;
            --v65;
            BOOL v68 = v64 != 0;
            BOOL v67 = v61 != 0;
          }
          while (v64 | v61);
LABEL_87:
          unsigned int v77 = (unsigned char *)(v202 + v58);
          if (v201)
          {
            memcpy(__dst, v77, sizeof(__dst));
            uint64_t v33 = v211;
            unsigned int v34 = v210;
            unsigned int v77 = __dst;
          }
          int8x16_t v78 = (unsigned __int8 *)(v203 + 8 * v66);
          uint64_t v79 = v204 + 32 * (v45 - v34);
          char v80 = v47 < 8 || v48;
          if ((v80 & 1) == 0 && v212 > 7)
          {
            uint64_t v81 = *(void *)(v33 + 208);
            int v82 = *(_DWORD *)(v81 + 52);
            unsigned int v83 = *v78;
            if (*v78)
            {
              uint64_t v35 = a11;
              if (v83 < 0xF0)
              {
                if (v83 == 7)
                {
                  float64x2_t v90 = vld1q_dup_f64((const double *)v77);
                  *(float64x2_t *)uint64_t v79 = v90;
                  *(float64x2_t *)(v79 + 16) = v90;
                  *(float64x2_t *)(v79 + 32) = v90;
                  *(float64x2_t *)(v79 + 48) = v90;
                  *(float64x2_t *)(v79 + 64) = v90;
                  *(float64x2_t *)(v79 + 80) = v90;
                  *(float64x2_t *)(v79 + 96) = v90;
                  *(float64x2_t *)(v79 + 112) = v90;
                  unsigned int v91 = (float64x2_t *)(v79 + a11);
                  *unsigned int v91 = v90;
                  v91[1] = v90;
                  v91[2] = v90;
                  v91[3] = v90;
                  v91[4] = v90;
                  v91[5] = v90;
                  v91[6] = v90;
                  v91[7] = v90;
                  uint64_t v84 = 8;
                }
                else
                {
                  uint64_t v84 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v79, a11, (uint64_t)v77, v83);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v79, a11, (unint64_t)v77, v83, *(_DWORD *)(v81 + 52));
                uint64_t v84 = 128;
              }
            }
            else
            {
              uint64_t v84 = 0;
              *(_OWORD *)(v79 + 96) = 0u;
              *(_OWORD *)(v79 + 112) = 0u;
              *(_OWORD *)(v79 + 64) = 0u;
              *(_OWORD *)(v79 + 80) = 0u;
              *(_OWORD *)(v79 + 32) = 0u;
              *(_OWORD *)(v79 + 48) = 0u;
              *(_OWORD *)uint64_t v79 = 0u;
              *(_OWORD *)(v79 + 16) = 0u;
              uint64_t v35 = a11;
              uint64_t v89 = (_OWORD *)(v79 + a11);
              v89[6] = 0u;
              v89[7] = 0u;
              v89[4] = 0u;
              v89[5] = 0u;
              v89[2] = 0u;
              v89[3] = 0u;
              *uint64_t v89 = 0u;
              v89[1] = 0u;
            }
            uint64_t v93 = (const double *)&v77[v84];
            int32x4_t v94 = (float64x2_t *)(v79 + v193);
            unsigned int v95 = v78[1];
            if (v78[1])
            {
              if (v95 < 0xF0)
              {
                if (v95 == 7)
                {
                  float64x2_t v98 = vld1q_dup_f64(v93);
                  *int32x4_t v94 = v98;
                  v94[1] = v98;
                  v94[2] = v98;
                  v94[3] = v98;
                  v94[4] = v98;
                  v94[5] = v98;
                  v94[6] = v98;
                  v94[7] = v98;
                  unsigned int v99 = (float64x2_t *)((char *)v94 + v35);
                  *unsigned int v99 = v98;
                  v99[1] = v98;
                  v99[2] = v98;
                  v99[3] = v98;
                  v99[4] = v98;
                  v99[5] = v98;
                  v99[6] = v98;
                  v99[7] = v98;
                  uint64_t v96 = 8;
                }
                else
                {
                  uint64_t v96 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v79 + v193, v35, (uint64_t)v93, v95);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)(v79 + v193), v35, (unint64_t)v93, v95, v82);
                uint64_t v96 = 128;
              }
            }
            else
            {
              uint64_t v96 = 0;
              v94[6] = 0u;
              v94[7] = 0u;
              v94[4] = 0u;
              v94[5] = 0u;
              v94[2] = 0u;
              v94[3] = 0u;
              *int32x4_t v94 = 0u;
              v94[1] = 0u;
              uint64_t v97 = (_OWORD *)((char *)v94->f64 + v35);
              v97[6] = 0u;
              v97[7] = 0u;
              v97[4] = 0u;
              v97[5] = 0u;
              v97[2] = 0u;
              v97[3] = 0u;
              *uint64_t v97 = 0u;
              v97[1] = 0u;
            }
            unsigned int v100 = (const double *)((char *)v93 + v96);
            int16x8_t v101 = (int16x4_t *)(v79 + 128);
            unsigned int v102 = v78[2];
            if (v78[2])
            {
              if (v102 < 0xF0)
              {
                if (v102 == 7)
                {
                  float64x2_t v105 = vld1q_dup_f64(v100);
                  *(float64x2_t *)(v79 + 128) = v105;
                  *(float64x2_t *)(v79 + 144) = v105;
                  *(float64x2_t *)(v79 + 160) = v105;
                  *(float64x2_t *)(v79 + 176) = v105;
                  *(float64x2_t *)(v79 + 192) = v105;
                  *(float64x2_t *)(v79 + 208) = v105;
                  *(float64x2_t *)(v79 + 224) = v105;
                  *(float64x2_t *)(v79 + 240) = v105;
                  int32x4_t v106 = (float64x2_t *)((char *)v101 + v35);
                  float64x2_t *v106 = v105;
                  v106[1] = v105;
                  v106[2] = v105;
                  v106[3] = v105;
                  v106[4] = v105;
                  v106[5] = v105;
                  v106[6] = v105;
                  v106[7] = v105;
                  uint64_t v103 = 8;
                }
                else
                {
                  uint64_t v103 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v101, v35, (uint64_t)v100, v102);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v101, v35, (unint64_t)v100, v102, v82);
                uint64_t v103 = 128;
              }
            }
            else
            {
              uint64_t v103 = 0;
              *(_OWORD *)(v79 + 224) = 0u;
              *(_OWORD *)(v79 + 240) = 0u;
              *(_OWORD *)(v79 + 192) = 0u;
              *(_OWORD *)(v79 + 208) = 0u;
              *(_OWORD *)(v79 + 160) = 0u;
              *(_OWORD *)(v79 + 176) = 0u;
              *(_OWORD *)v101->i8 = 0u;
              *(_OWORD *)(v79 + 144) = 0u;
              uint64_t v104 = (_OWORD *)((char *)v101 + v35);
              v104[6] = 0u;
              v104[7] = 0u;
              v104[4] = 0u;
              v104[5] = 0u;
              v104[2] = 0u;
              v104[3] = 0u;
              *uint64_t v104 = 0u;
              v104[1] = 0u;
            }
            uint64_t v107 = (const double *)((char *)v100 + v103);
            long long v108 = (int16x4_t *)&v94[8];
            unsigned int v109 = v78[3];
            if (v78[3])
            {
              if (v109 < 0xF0)
              {
                if (v109 == 7)
                {
                  float64x2_t v112 = vld1q_dup_f64(v107);
                  v94[8] = v112;
                  v94[9] = v112;
                  v94[10] = v112;
                  v94[11] = v112;
                  v94[12] = v112;
                  v94[13] = v112;
                  v94[14] = v112;
                  v94[15] = v112;
                  unsigned int v113 = (float64x2_t *)((char *)v108 + v35);
                  *unsigned int v113 = v112;
                  v113[1] = v112;
                  v113[2] = v112;
                  v113[3] = v112;
                  float64x2_t v113[4] = v112;
                  v113[5] = v112;
                  uint64_t v110 = 8;
                  v113[6] = v112;
                  v113[7] = v112;
                }
                else
                {
                  uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v108, v35, (uint64_t)v107, v109);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v108, v35, (unint64_t)v107, v109, v82);
                uint64_t v110 = 128;
              }
            }
            else
            {
              uint64_t v110 = 0;
              v94[14] = 0u;
              v94[15] = 0u;
              v94[12] = 0u;
              v94[13] = 0u;
              v94[10] = 0u;
              v94[11] = 0u;
              *(_OWORD *)v108->i8 = 0u;
              v94[9] = 0u;
              uint64_t v111 = (_OWORD *)((char *)v108 + v35);
              v111[6] = 0u;
              v111[7] = 0u;
              v111[4] = 0u;
              v111[5] = 0u;
              int64x2_t v111[2] = 0u;
              v111[3] = 0u;
              *uint64_t v111 = 0u;
              v111[1] = 0u;
            }
            long long v114 = (const double *)((char *)v107 + v110);
            int32x4_t v115 = (float64x2_t *)(v79 + v192);
            unsigned int v116 = v78[4];
            if (v78[4])
            {
              if (v116 < 0xF0)
              {
                if (v116 == 7)
                {
                  float64x2_t v119 = vld1q_dup_f64(v114);
                  *int32x4_t v115 = v119;
                  v115[1] = v119;
                  v115[2] = v119;
                  v115[3] = v119;
                  float64x2_t v115[4] = v119;
                  v115[5] = v119;
                  v115[6] = v119;
                  v115[7] = v119;
                  uint64_t v120 = (float64x2_t *)((char *)v115 + v35);
                  *uint64_t v120 = v119;
                  v120[1] = v119;
                  v120[2] = v119;
                  v120[3] = v119;
                  long long v120[4] = v119;
                  v120[5] = v119;
                  v120[6] = v119;
                  v120[7] = v119;
                  uint64_t v117 = 8;
                }
                else
                {
                  uint64_t v117 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v79 + v192, v35, (uint64_t)v114, v116);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)(v79 + v192), v35, (unint64_t)v114, v116, v82);
                uint64_t v117 = 128;
              }
            }
            else
            {
              uint64_t v117 = 0;
              v115[6] = 0u;
              v115[7] = 0u;
              float64x2_t v115[4] = 0u;
              v115[5] = 0u;
              v115[2] = 0u;
              v115[3] = 0u;
              *int32x4_t v115 = 0u;
              v115[1] = 0u;
              unsigned int v118 = (_OWORD *)((char *)v115->f64 + v35);
              v118[6] = 0u;
              v118[7] = 0u;
              long long v118[4] = 0u;
              v118[5] = 0u;
              v118[2] = 0u;
              v118[3] = 0u;
              *unsigned int v118 = 0u;
              v118[1] = 0u;
            }
            long long v121 = (const double *)((char *)v114 + v117);
            uint64_t v122 = v79 + 6 * a11;
            unsigned int v123 = v78[5];
            if (v78[5])
            {
              if (v123 < 0xF0)
              {
                if (v123 == 7)
                {
                  float64x2_t v126 = vld1q_dup_f64(v121);
                  *(float64x2_t *)uint64_t v122 = v126;
                  *(float64x2_t *)(v122 + 16) = v126;
                  *(float64x2_t *)(v122 + 32) = v126;
                  *(float64x2_t *)(v122 + 48) = v126;
                  *(float64x2_t *)(v122 + 64) = v126;
                  *(float64x2_t *)(v122 + 80) = v126;
                  *(float64x2_t *)(v122 + 96) = v126;
                  *(float64x2_t *)(v122 + 112) = v126;
                  unsigned int v127 = (float64x2_t *)(v122 + v35);
                  *unsigned int v127 = v126;
                  v127[1] = v126;
                  v127[2] = v126;
                  v127[3] = v126;
                  v127[4] = v126;
                  v127[5] = v126;
                  v127[6] = v126;
                  v127[7] = v126;
                  uint64_t v124 = 8;
                }
                else
                {
                  uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock(v122, v35, (uint64_t)v121, v123);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)v122, v35, (unint64_t)v121, v123, v82);
                uint64_t v124 = 128;
              }
            }
            else
            {
              uint64_t v124 = 0;
              *(_OWORD *)(v122 + 96) = 0u;
              *(_OWORD *)(v122 + 112) = 0u;
              *(_OWORD *)(v122 + 64) = 0u;
              *(_OWORD *)(v122 + 80) = 0u;
              *(_OWORD *)(v122 + 32) = 0u;
              *(_OWORD *)(v122 + 48) = 0u;
              *(_OWORD *)uint64_t v122 = 0u;
              *(_OWORD *)(v122 + 16) = 0u;
              uint64_t v125 = (_OWORD *)(v122 + v35);
              v125[6] = 0u;
              v125[7] = 0u;
              v125[4] = 0u;
              v125[5] = 0u;
              v125[2] = 0u;
              v125[3] = 0u;
              *uint64_t v125 = 0u;
              v125[1] = 0u;
            }
            int16x8_t v128 = (const double *)((char *)v121 + v124);
            uint64_t v129 = (int16x4_t *)&v115[8];
            unsigned int v130 = v78[6];
            if (v78[6])
            {
              if (v130 < 0xF0)
              {
                if (v130 == 7)
                {
                  float64x2_t v133 = vld1q_dup_f64(v128);
                  v115[8] = v133;
                  v115[9] = v133;
                  v115[10] = v133;
                  v115[11] = v133;
                  v115[12] = v133;
                  v115[13] = v133;
                  float32x4_t v115[14] = v133;
                  v115[15] = v133;
                  uint64_t v134 = (float64x2_t *)((char *)v129 + v35);
                  *uint64_t v134 = v133;
                  v134[1] = v133;
                  v134[2] = v133;
                  v134[3] = v133;
                  v134[4] = v133;
                  v134[5] = v133;
                  uint64_t v131 = 8;
                  v134[6] = v133;
                  v134[7] = v133;
                }
                else
                {
                  uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v129, v35, (uint64_t)v128, v130);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v129, v35, (unint64_t)v128, v130, v82);
                uint64_t v131 = 128;
              }
            }
            else
            {
              uint64_t v131 = 0;
              float32x4_t v115[14] = 0u;
              v115[15] = 0u;
              v115[12] = 0u;
              v115[13] = 0u;
              v115[10] = 0u;
              v115[11] = 0u;
              *(_OWORD *)v129->i8 = 0u;
              v115[9] = 0u;
              int8x16_t v132 = (_OWORD *)((char *)v129 + v35);
              v132[6] = 0u;
              v132[7] = 0u;
              v132[4] = 0u;
              v132[5] = 0u;
              v132[2] = 0u;
              v132[3] = 0u;
              *int8x16_t v132 = 0u;
              v132[1] = 0u;
            }
            int32x4_t v135 = (int16x4_t *)(v122 + 128);
            unsigned int v136 = v78[7];
            if (v78[7])
            {
              int16x8_t v137 = (const double *)((char *)v128 + v131);
              if (v136 < 0xF0)
              {
                if (v136 == 7)
                {
                  float64x2_t v139 = vld1q_dup_f64(v137);
                  *(float64x2_t *)(v122 + 128) = v139;
                  *(float64x2_t *)(v122 + 144) = v139;
                  *(float64x2_t *)(v122 + 160) = v139;
                  *(float64x2_t *)(v122 + 176) = v139;
                  *(float64x2_t *)(v122 + 192) = v139;
                  *(float64x2_t *)(v122 + 208) = v139;
                  *(float64x2_t *)(v122 + 224) = v139;
                  *(float64x2_t *)(v122 + 240) = v139;
                  uint64_t v140 = (float64x2_t *)((char *)v135 + v35);
                  *uint64_t v140 = v139;
                  v140[1] = v139;
                  float32x4_t v140[2] = v139;
                  v140[3] = v139;
                  v140[4] = v139;
                  v140[5] = v139;
                  v140[6] = v139;
                  v140[7] = v139;
                }
                else
                {
                  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)v135, v35, (uint64_t)v137, v136);
                }
              }
              else
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock(v135, v35, (unint64_t)v137, v136, v82);
              }
              unsigned int v34 = v210;
              uint64_t v33 = v211;
            }
            else
            {
              *(_OWORD *)(v122 + 224) = 0u;
              *(_OWORD *)(v122 + 240) = 0u;
              *(_OWORD *)(v122 + 192) = 0u;
              *(_OWORD *)(v122 + 208) = 0u;
              *(_OWORD *)(v122 + 160) = 0u;
              *(_OWORD *)(v122 + 176) = 0u;
              *(_OWORD *)v135->i8 = 0u;
              *(_OWORD *)(v122 + 144) = 0u;
              uint64_t v138 = (_OWORD *)((char *)v135 + v35);
              v138[6] = 0u;
              v138[7] = 0u;
              v138[4] = 0u;
              v138[5] = 0u;
              float32x4_t v138[2] = 0u;
              v138[3] = 0u;
              *uint64_t v138 = 0u;
              v138[1] = 0u;
              unsigned int v34 = v210;
              uint64_t v33 = v211;
            }
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE18ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v33;
          block[5] = v77;
          char v220 = v47;
          char v221 = v212;
          unsigned int v216 = v194;
          unsigned int v217 = v45 - v43;
          block[6] = v78;
          uint64_t v214 = v204 + 32 * (v45 - v34);
          uint64_t v35 = a11;
          uint64_t v215 = a11;
          unsigned int v218 = v205;
          unsigned int v219 = v46;
          if (v48)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v33 + 8) + 7384), block);
            uint64_t v33 = v211;
            unsigned int v34 = v210;
LABEL_27:
            unsigned int v42 = v40 + 1;
            goto LABEL_28;
          }
          uint64_t v85 = *(void *)(v33 + 208);
          int v86 = *(_DWORD *)(v85 + 52);
          unsigned int v87 = *v78;
          if (*v78)
          {
            if (v87 < 0xF0)
            {
              if (v87 == 7)
              {
                float64x2_t v92 = vld1q_dup_f64((const double *)v77);
                float64x2_t v223 = v92;
                float64x2_t v224 = v92;
                float64x2_t v225 = v92;
                float64x2_t v226 = v92;
                float64x2_t v227 = v92;
                float64x2_t v228 = v92;
                float64x2_t v229 = v92;
                float64x2_t v230 = v92;
                float64x2_t v239 = v92;
                float64x2_t v240 = v92;
                float64x2_t v241 = v92;
                float64x2_t v242 = v92;
                float64x2_t v243 = v92;
                float64x2_t v244 = v92;
                uint64_t v88 = 8;
                float64x2_t v245 = v92;
                float64x2_t v246 = v92;
              }
              else
              {
                uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v223, 256, (uint64_t)v77, v87);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v223, 256, (unint64_t)v77, v87, *(_DWORD *)(v85 + 52));
              uint64_t v88 = 128;
            }
          }
          else
          {
            uint64_t v88 = 0;
            float64x2_t v230 = 0u;
            float64x2_t v229 = 0u;
            float64x2_t v228 = 0u;
            float64x2_t v227 = 0u;
            float64x2_t v226 = 0u;
            float64x2_t v225 = 0u;
            float64x2_t v224 = 0u;
            float64x2_t v223 = 0u;
            float64x2_t v239 = 0u;
            float64x2_t v240 = 0u;
            float64x2_t v241 = 0u;
            float64x2_t v242 = 0u;
            float64x2_t v243 = 0u;
            float64x2_t v244 = 0u;
            float64x2_t v245 = 0u;
            float64x2_t v246 = 0u;
          }
          long long v141 = (const double *)&v77[v88];
          unsigned int v142 = v78[1];
          if (v78[1])
          {
            if (v142 < 0xF0)
            {
              if (v142 == 7)
              {
                float64x2_t v144 = vld1q_dup_f64(v141);
                float64x2_t v255 = v144;
                float64x2_t v256 = v144;
                float64x2_t v257 = v144;
                float64x2_t v258 = v144;
                float64x2_t v259 = v144;
                float64x2_t v260 = v144;
                float64x2_t v261 = v144;
                float64x2_t v262 = v144;
                float64x2_t v271 = v144;
                float64x2_t v272 = v144;
                float64x2_t v273 = v144;
                float64x2_t v274 = v144;
                float64x2_t v275 = v144;
                float64x2_t v276 = v144;
                uint64_t v143 = 8;
                float64x2_t v277 = v144;
                float64x2_t v278 = v144;
              }
              else
              {
                uint64_t v143 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v255, 256, (uint64_t)v141, v142);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v255, 256, (unint64_t)v141, v142, v86);
              uint64_t v143 = 128;
            }
          }
          else
          {
            uint64_t v143 = 0;
            float64x2_t v261 = 0u;
            float64x2_t v262 = 0u;
            float64x2_t v259 = 0u;
            float64x2_t v260 = 0u;
            float64x2_t v257 = 0u;
            float64x2_t v258 = 0u;
            float64x2_t v255 = 0u;
            float64x2_t v256 = 0u;
            float64x2_t v271 = 0u;
            float64x2_t v272 = 0u;
            float64x2_t v273 = 0u;
            float64x2_t v274 = 0u;
            float64x2_t v275 = 0u;
            float64x2_t v276 = 0u;
            float64x2_t v277 = 0u;
            float64x2_t v278 = 0u;
          }
          uint64_t v145 = (const double *)((char *)v141 + v143);
          unsigned int v146 = v78[2];
          if (v78[2])
          {
            if (v146 < 0xF0)
            {
              if (v146 == 7)
              {
                float64x2_t v148 = vld1q_dup_f64(v145);
                float64x2_t v231 = v148;
                float64x2_t v232 = v148;
                float64x2_t v233 = v148;
                float64x2_t v234 = v148;
                float64x2_t v235 = v148;
                float64x2_t v236 = v148;
                float64x2_t v237 = v148;
                float64x2_t v238 = v148;
                float64x2_t v247 = v148;
                float64x2_t v248 = v148;
                float64x2_t v249 = v148;
                float64x2_t v250 = v148;
                float64x2_t v251 = v148;
                float64x2_t v252 = v148;
                uint64_t v147 = 8;
                float64x2_t v253 = v148;
                float64x2_t v254 = v148;
              }
              else
              {
                uint64_t v147 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v231, 256, (uint64_t)v145, v146);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v231, 256, (unint64_t)v145, v146, v86);
              uint64_t v147 = 128;
            }
          }
          else
          {
            uint64_t v147 = 0;
            float64x2_t v237 = 0u;
            float64x2_t v238 = 0u;
            float64x2_t v235 = 0u;
            float64x2_t v236 = 0u;
            float64x2_t v233 = 0u;
            float64x2_t v234 = 0u;
            float64x2_t v231 = 0u;
            float64x2_t v232 = 0u;
            float64x2_t v247 = 0u;
            float64x2_t v248 = 0u;
            float64x2_t v249 = 0u;
            float64x2_t v250 = 0u;
            float64x2_t v251 = 0u;
            float64x2_t v252 = 0u;
            float64x2_t v253 = 0u;
            float64x2_t v254 = 0u;
          }
          int8x16_t v149 = (const double *)((char *)v145 + v147);
          unsigned int v150 = v78[3];
          if (v78[3])
          {
            if (v150 < 0xF0)
            {
              if (v150 == 7)
              {
                float64x2_t v152 = vld1q_dup_f64(v149);
                float64x2_t v263 = v152;
                float64x2_t v264 = v152;
                float64x2_t v265 = v152;
                float64x2_t v266 = v152;
                float64x2_t v267 = v152;
                float64x2_t v268 = v152;
                float64x2_t v269 = v152;
                float64x2_t v270 = v152;
                float64x2_t v279 = v152;
                float64x2_t v280 = v152;
                float64x2_t v281 = v152;
                float64x2_t v282 = v152;
                float64x2_t v283 = v152;
                float64x2_t v284 = v152;
                uint64_t v151 = 8;
                float64x2_t v285 = v152;
                float64x2_t v286 = v152;
              }
              else
              {
                uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v263, 256, (uint64_t)v149, v150);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v263, 256, (unint64_t)v149, v150, v86);
              uint64_t v151 = 128;
            }
          }
          else
          {
            uint64_t v151 = 0;
            float64x2_t v269 = 0u;
            float64x2_t v270 = 0u;
            float64x2_t v267 = 0u;
            float64x2_t v268 = 0u;
            float64x2_t v265 = 0u;
            float64x2_t v266 = 0u;
            float64x2_t v263 = 0u;
            float64x2_t v264 = 0u;
            float64x2_t v279 = 0u;
            float64x2_t v280 = 0u;
            float64x2_t v281 = 0u;
            float64x2_t v282 = 0u;
            float64x2_t v283 = 0u;
            float64x2_t v284 = 0u;
            float64x2_t v285 = 0u;
            float64x2_t v286 = 0u;
          }
          uint64_t v153 = (const double *)((char *)v149 + v151);
          unsigned int v154 = v78[4];
          if (v78[4])
          {
            if (v154 < 0xF0)
            {
              if (v154 == 7)
              {
                float64x2_t v156 = vld1q_dup_f64(v153);
                float64x2_t v287 = v156;
                float64x2_t v288 = v156;
                float64x2_t v289 = v156;
                float64x2_t v290 = v156;
                float64x2_t v291 = v156;
                float64x2_t v292 = v156;
                float64x2_t v293 = v156;
                float64x2_t v294 = v156;
                float64x2_t v303 = v156;
                float64x2_t v304 = v156;
                float64x2_t v305 = v156;
                float64x2_t v306 = v156;
                float64x2_t v307 = v156;
                float64x2_t v308 = v156;
                float64x2_t v309 = v156;
                uint64_t v155 = 8;
                float64x2_t v310 = v156;
              }
              else
              {
                uint64_t v155 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v287, 256, (uint64_t)v153, v154);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v287, 256, (unint64_t)v153, v154, v86);
              uint64_t v155 = 128;
            }
          }
          else
          {
            uint64_t v155 = 0;
            float64x2_t v293 = 0u;
            float64x2_t v294 = 0u;
            float64x2_t v291 = 0u;
            float64x2_t v292 = 0u;
            float64x2_t v289 = 0u;
            float64x2_t v290 = 0u;
            float64x2_t v287 = 0u;
            float64x2_t v288 = 0u;
            float64x2_t v303 = 0u;
            float64x2_t v304 = 0u;
            float64x2_t v305 = 0u;
            float64x2_t v306 = 0u;
            float64x2_t v307 = 0u;
            float64x2_t v308 = 0u;
            float64x2_t v309 = 0u;
            float64x2_t v310 = 0u;
          }
          int8x16_t v157 = (const double *)((char *)v153 + v155);
          unsigned int v158 = v78[5];
          if (v78[5])
          {
            if (v158 < 0xF0)
            {
              if (v158 == 7)
              {
                float64x2_t v160 = vld1q_dup_f64(v157);
                float64x2_t v319 = v160;
                float64x2_t v320 = v160;
                float64x2_t v321 = v160;
                float64x2_t v322 = v160;
                float64x2_t v323 = v160;
                float64x2_t v324 = v160;
                float64x2_t v325 = v160;
                float64x2_t v326 = v160;
                float64x2_t v335 = v160;
                float64x2_t v336 = v160;
                float64x2_t v337 = v160;
                float64x2_t v338 = v160;
                float64x2_t v339 = v160;
                float64x2_t v340 = v160;
                float64x2_t v341 = v160;
                uint64_t v159 = 8;
                float64x2_t v342 = v160;
              }
              else
              {
                uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v319, 256, (uint64_t)v157, v158);
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v319, 256, (unint64_t)v157, v158, v86);
              uint64_t v159 = 128;
            }
          }
          else
          {
            uint64_t v159 = 0;
            float64x2_t v325 = 0u;
            float64x2_t v326 = 0u;
            float64x2_t v323 = 0u;
            float64x2_t v324 = 0u;
            float64x2_t v321 = 0u;
            float64x2_t v322 = 0u;
            float64x2_t v319 = 0u;
            float64x2_t v320 = 0u;
            float64x2_t v335 = 0u;
            float64x2_t v336 = 0u;
            float64x2_t v337 = 0u;
            float64x2_t v338 = 0u;
            float64x2_t v339 = 0u;
            float64x2_t v340 = 0u;
            float64x2_t v341 = 0u;
            float64x2_t v342 = 0u;
          }
          unsigned int v161 = (const double *)((char *)v157 + v159);
          unsigned int v162 = v78[6];
          if (v78[6])
          {
            if (v162 < 0xF0)
            {
              if (v162 == 7)
              {
                float64x2_t v165 = vld1q_dup_f64(v161);
                float64x2_t v295 = v165;
                float64x2_t v296 = v165;
                float64x2_t v297 = v165;
                float64x2_t v298 = v165;
                float64x2_t v299 = v165;
                float64x2_t v300 = v165;
                float64x2_t v301 = v165;
                float64x2_t v302 = v165;
                float64x2_t v311 = v165;
                float64x2_t v312 = v165;
                float64x2_t v313 = v165;
                float64x2_t v314 = v165;
                float64x2_t v315 = v165;
                float64x2_t v316 = v165;
                float64x2_t v317 = v165;
                uint64_t v163 = 8;
                float64x2_t v318 = v165;
                unsigned int v164 = v78[7];
                if (!v78[7]) {
                  goto LABEL_207;
                }
              }
              else
              {
                uint64_t v163 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v295, 256, (uint64_t)v161, v162);
                unsigned int v164 = v78[7];
                if (!v78[7])
                {
LABEL_207:
                  float64x2_t v333 = 0u;
                  float64x2_t v334 = 0u;
                  float64x2_t v331 = 0u;
                  float64x2_t v332 = 0u;
                  float64x2_t v329 = 0u;
                  float64x2_t v330 = 0u;
                  float64x2_t v327 = 0u;
                  float64x2_t v328 = 0u;
                  float64x2_t v343 = 0u;
                  float64x2_t v344 = 0u;
                  float64x2_t v345 = 0u;
                  float64x2_t v346 = 0u;
                  float64x2_t v347 = 0u;
                  float64x2_t v348 = 0u;
                  float64x2_t v349 = 0u;
                  float64x2_t v350 = 0u;
                  goto LABEL_209;
                }
              }
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v295, 256, (unint64_t)v161, v162, v86);
              uint64_t v163 = 128;
              unsigned int v164 = v78[7];
              if (!v78[7]) {
                goto LABEL_207;
              }
            }
          }
          else
          {
            uint64_t v163 = 0;
            float64x2_t v301 = 0u;
            float64x2_t v302 = 0u;
            float64x2_t v299 = 0u;
            float64x2_t v300 = 0u;
            float64x2_t v297 = 0u;
            float64x2_t v298 = 0u;
            float64x2_t v295 = 0u;
            float64x2_t v296 = 0u;
            float64x2_t v311 = 0u;
            float64x2_t v312 = 0u;
            float64x2_t v313 = 0u;
            float64x2_t v314 = 0u;
            float64x2_t v315 = 0u;
            float64x2_t v316 = 0u;
            float64x2_t v317 = 0u;
            float64x2_t v318 = 0u;
            unsigned int v164 = v78[7];
            if (!v78[7]) {
              goto LABEL_207;
            }
          }
          unsigned int v166 = (const double *)((char *)v161 + v163);
          if (v164 < 0xF0)
          {
            if (v164 == 7)
            {
              float64x2_t v167 = vld1q_dup_f64(v166);
              float64x2_t v327 = v167;
              float64x2_t v328 = v167;
              float64x2_t v329 = v167;
              float64x2_t v330 = v167;
              float64x2_t v331 = v167;
              float64x2_t v332 = v167;
              float64x2_t v333 = v167;
              float64x2_t v334 = v167;
              float64x2_t v343 = v167;
              float64x2_t v344 = v167;
              float64x2_t v345 = v167;
              float64x2_t v346 = v167;
              float64x2_t v347 = v167;
              float64x2_t v348 = v167;
              float64x2_t v349 = v167;
              float64x2_t v350 = v167;
            }
            else
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLosslessCompressedSubblock((uint64_t)&v327, 256, (uint64_t)v166, v164);
            }
          }
          else
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblock((int16x4_t *)&v327, 256, (unint64_t)v166, v164, v86);
          }
LABEL_209:
          unsigned int v42 = v40 + 1;
          unint64_t v168 = v218;
          unsigned int v34 = v210;
          uint64_t v33 = v211;
          if (v218)
          {
            unint64_t v169 = 0;
            uint64_t v170 = (_OWORD *)&v223.f64[32 * (unint64_t)v216 + 4 * v217];
            unsigned int v171 = v219;
            do
            {
              if (v171)
              {
                uint64_t v172 = 0;
                uint64_t v173 = v214 + v215 * v169;
                do
                {
                  *(unsigned char *)(v173 + v172) = *((unsigned char *)v170 + v172);
                  ++v172;
                  unsigned int v171 = v219;
                }
                while (32 * (unint64_t)v219 > v172);
                unint64_t v168 = v218;
              }
              ++v169;
              v170 += 16;
            }
            while (v169 < v168);
          }
LABEL_28:
          BOOL v28 = v40 == v199 >> 3;
          unsigned int v40 = v42;
        }
        while (!v28);
        BOOL v28 = v24++ == v191;
      }
      while (!v28);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v12 = MEMORY[0x270FA5388](a1);
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v18 = v17;
  unsigned int v20 = v19;
  uint64_t v135 = v21;
  uint64_t v136 = v22;
  uint64_t v123 = v23;
  uint64_t v24 = v12;
  v162[96] = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v12, 0);
  unsigned int v140 = v14;
  unsigned int v25 = v14 >> 3;
  unsigned int v122 = v14 + a10 - 1;
  unsigned int v124 = v122 >> 3;
  unsigned int v26 = *(unsigned __int8 *)(*(void *)(v24 + 208) + 88);
  unsigned int v27 = *(_DWORD *)(v24 + 112);
  uint64_t v143 = v24;
  if (*(void *)(v24 + 168)) {
    int v28 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v28 = 0;
  }
  BOOL v29 = (v28 & 0xD00) == 0 || v28 == 768;
  int v30 = v28 & 0xE00;
  int v32 = !v29 && v30 != 1024;
  int v134 = v32;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v24, *(_DWORD *)(v24 + 144) + a12);
  uint64_t v34 = v24;
  BOOL v133 = isLevelTiled;
  if (v25 <= v124)
  {
    unsigned int v132 = v16 + a9 - 1;
    unsigned int v121 = v16 >> 3;
    if (v16 >> 3 <= v132 >> 3)
    {
      unsigned int v118 = v20 - 1;
      unsigned int v120 = (v18 - 1) >> 3;
      int v141 = ((v20 - 1) & 7) + 1;
      unsigned int v142 = (v20 - 1) >> 3;
      int v119 = ((v18 - 1) & 7) + 1;
      uint64_t v125 = 4 * a11;
      uint64_t v126 = 2 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(v20, v18), (int32x2_t)0x700000007);
      int8x8_t v36 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vsra_n_u32((uint32x2_t)-1, v35, 3uLL))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x1000000010, v35));
      __int32 v131 = v36.i32[0] | v36.i32[1];
      BOOL v129 = v36.i32[1] != 0;
      int8x8_t v130 = v36;
      BOOL v128 = v36.i32[0] != 0;
      unint64_t v117 = 8 * v27 * (unint64_t)v26;
      do
      {
        unsigned int v37 = (8 * v25) | 7;
        if (8 * v25 <= v140) {
          int v38 = v140;
        }
        else {
          int v38 = 8 * v25;
        }
        unsigned int v39 = v121;
        if (v122 < v37) {
          unsigned int v37 = v122;
        }
        int v127 = v38 - 8 * v25;
        int v138 = v37 - v38 + 1;
        unsigned int v139 = 8 * v25;
        int v40 = v119;
        if (v25 != v120) {
          int v40 = 8;
        }
        unsigned int v144 = v40;
        uint64_t v137 = v123 + (v38 - v140) * a11;
        do
        {
          unsigned int v41 = 8 * v39;
          unsigned int v42 = 8 * (v39 + 1) - 1;
          if (8 * v39 <= v16) {
            int v43 = v16;
          }
          else {
            int v43 = 8 * v39;
          }
          if (v132 < v42) {
            unsigned int v42 = v132;
          }
          int v44 = v42 - v43 + 1;
          if (v39 == v142) {
            unsigned int v45 = v141;
          }
          else {
            unsigned int v45 = 8;
          }
          BOOL v46 = 1;
          if (v139 >= v140 && v41 >= v16)
          {
            int v47 = v141;
            if (v39 != v142) {
              int v47 = 8;
            }
            BOOL v46 = v44 != v47 || v138 != v144;
          }
          if (v133)
          {
            unsigned int v70 = 0;
            uint64_t v71 = v117 >> (*(unsigned char *)(v34 + 57) != 0);
            char v72 = 1;
            if (v71 > 127)
            {
              if (v71 > 511)
              {
                if (v71 == 512)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 16;
                  unsigned int v74 = 16;
                }
                else
                {
                  char v73 = 1;
                  unsigned int v74 = 0;
                  if (v71 == 1024)
                  {
                    char v72 = 0;
                    unsigned int v74 = 8;
                    unsigned int v70 = 16;
                  }
                }
              }
              else if (v71 == 128)
              {
                char v72 = 0;
                char v73 = 0;
                unsigned int v70 = 32;
                unsigned int v74 = 32;
              }
              else
              {
                char v73 = 1;
                unsigned int v74 = 0;
                if (v71 == 256)
                {
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 16;
                  unsigned int v70 = 32;
                }
              }
            }
            else
            {
              char v73 = 1;
              unsigned int v74 = 0;
              switch(v71)
              {
                case 4:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 128;
                  unsigned int v70 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 128;
                  unsigned int v74 = 128;
                  break;
                case 16:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v74 = 64;
                  unsigned int v70 = 128;
                  break;
                case 32:
                  char v72 = 0;
                  char v73 = 0;
                  unsigned int v70 = 64;
                  unsigned int v74 = 64;
                  break;
                default:
                  if (v71 == 64)
                  {
                    char v72 = 0;
                    char v73 = 0;
                    unsigned int v74 = 32;
                    unsigned int v70 = 64;
                  }
                  break;
              }
            }
            unsigned int v106 = (v70 >> 3) - 1;
            if (v72) {
              unsigned int v107 = 0;
            }
            else {
              unsigned int v107 = 32 - __clz(~(-1 << -(char)__clz(v106)));
            }
            unsigned int v108 = (v74 >> 3) - 1;
            if (v73)
            {
              unsigned int v109 = 0;
              if (v107) {
                goto LABEL_121;
              }
            }
            else
            {
              unsigned int v109 = 32 - __clz(~(-1 << -(char)__clz(v108)));
              if (v109 | v107)
              {
LABEL_121:
                int v110 = 0;
                uint64_t v111 = 0;
                int v112 = v39 & v106;
                int v113 = v25 & v108;
                BOOL v114 = v107 != 0;
                BOOL v115 = v109 != 0;
                int v116 = 1;
                do
                {
                  --v107;
                  if (v114) {
                    v111 |= (unint64_t)(v116 & v112) << v110++;
                  }
                  else {
                    unsigned int v107 = 0;
                  }
                  --v109;
                  if (v115) {
                    v111 |= (unint64_t)(v116 & v113) << v110++;
                  }
                  else {
                    unsigned int v109 = 0;
                  }
                  v116 *= 2;
                  --v110;
                  BOOL v115 = v109 != 0;
                  BOOL v114 = v107 != 0;
                }
                while (v109 | v107);
                goto LABEL_133;
              }
            }
            uint64_t v111 = 0;
LABEL_133:
            unint64_t v56 = ((unint64_t)(v41 / v70 + v139 / v74 * ((v70 + v118) / v70)) << 14) + (v111 << 11);
            goto LABEL_60;
          }
          if (v131)
          {
            int v49 = 0;
            uint64_t v50 = 0;
            int v51 = 1;
            BOOL v52 = v128;
            BOOL v53 = v129;
            __int32 v55 = v130.i32[0];
            __int32 v54 = v130.i32[1];
            do
            {
              --v54;
              if (v53) {
                v50 |= (unint64_t)(v51 & v39) << v49++;
              }
              else {
                __int32 v54 = 0;
              }
              --v55;
              if (v52) {
                v50 |= (unint64_t)(v51 & v25) << v49++;
              }
              else {
                __int32 v55 = 0;
              }
              v51 *= 2;
              --v49;
              BOOL v52 = v55 != 0;
              BOOL v53 = v54 != 0;
            }
            while (v55 | v54);
          }
          else
          {
            uint64_t v50 = 0;
          }
          unint64_t v56 = v50 << 11;
LABEL_60:
          unsigned int v57 = *(_DWORD *)(v34 + 128) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v57 <= 1) {
            unsigned int v57 = 1;
          }
          unsigned int v58 = v57 + 7;
          if (v58 < 0x10) {
            unsigned int v59 = 0;
          }
          else {
            unsigned int v59 = 32 - __clz(~(-1 << -(char)__clz((v58 >> 3) - 1)));
          }
          unsigned int v60 = *(_DWORD *)(v34 + 132) >> (*(unsigned char *)(v34 + 144) + a12);
          if (v60 <= 1) {
            unsigned int v60 = 1;
          }
          unsigned int v61 = v60 + 7;
          if (v61 < 0x10)
          {
            unsigned int v62 = 0;
            if (!v59)
            {
LABEL_86:
              unint64_t v64 = 0;
              goto LABEL_87;
            }
          }
          else
          {
            unsigned int v62 = 32 - __clz(~(-1 << -(char)__clz((v61 >> 3) - 1)));
            if (!(v62 | v59)) {
              goto LABEL_86;
            }
          }
          int v63 = 0;
          unint64_t v64 = 0;
          BOOL v65 = v59 != 0;
          BOOL v66 = v62 != 0;
          int v67 = 1;
          do
          {
            --v59;
            BOOL v68 = !v65;
            if (v65)
            {
              unint64_t v69 = ((unint64_t)(v67 & v39) << v63) | v64;
            }
            else
            {
              unsigned int v59 = 0;
              unint64_t v69 = v64;
            }
            if (!v68) {
              ++v63;
            }
            --v62;
            if (v66)
            {
              unint64_t v64 = ((unint64_t)(v67 & v25) << v63) | v69;
            }
            else
            {
              unsigned int v62 = 0;
              unint64_t v64 = v69;
            }
            if (v66) {
              ++v63;
            }
            v67 *= 2;
            --v63;
            BOOL v66 = v62 != 0;
            BOOL v65 = v59 != 0;
          }
          while (v62 | v59);
LABEL_87:
          char v75 = (unsigned char *)(v135 + v56);
          if (v134)
          {
            int v76 = v44;
            unsigned int v77 = v45;
            memcpy(__dst, (const void *)(v135 + v56), sizeof(__dst));
            unsigned int v45 = v77;
            int v44 = v76;
            uint64_t v34 = v143;
            char v75 = __dst;
          }
          int8x16_t v78 = (unsigned __int8 *)(v136 + 8 * v64);
          uint64_t v79 = v16;
          uint64_t v80 = v137 + ((unint64_t)(v43 - v16) << 6);
          char v81 = v45 < 8 || v46;
          if ((v81 & 1) == 0 && v144 > 7)
          {
            int v82 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
            unint64_t v83 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80, a11, (unint64_t)v75, *v78, v82)];
            unint64_t v84 = v83
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v126, a11, v83, v78[1], v82);
            unint64_t v85 = v84
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + 256, a11, v84, v78[2], v82);
            unint64_t v86 = v85
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v126 + 256, a11, v85, v78[3], v82);
            uint64_t v87 = v80 + v125;
            unint64_t v88 = v86
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v80 + v125, a11, v86, v78[4], v82);
            uint64_t v89 = v80 + 6 * a11;
            unint64_t v90 = v88
                + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v89, a11, v88, v78[5], v82);
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v87 + 256, a11, v90, v78[6], v82);
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock(v89 + 256, a11, v90 + v91, v78[7], v82);
            goto LABEL_27;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE20ELj4ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint3EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v34;
          block[5] = v75;
          char v152 = v45;
          char v153 = v144;
          unsigned int v148 = v127;
          unsigned int v149 = v43 - v41;
          block[6] = v78;
          uint64_t v146 = v80;
          uint64_t v147 = a11;
          unsigned int v150 = v138;
          unsigned int v151 = v44;
          if (v46)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v34 + 8) + 7384), block);
LABEL_27:
            uint64_t v16 = v79;
            goto LABEL_28;
          }
          int v92 = *(_DWORD *)(*(void *)(v34 + 208) + 52);
          unint64_t v93 = (unint64_t)&v75[AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v155, 512, (unint64_t)v75, *v78, v92)];
          unint64_t v94 = v93
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v157, 512, v93, v78[1], v92);
          unint64_t v95 = v94
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v156, 512, v94, v78[2], v92);
          unint64_t v96 = v95
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v158, 512, v95, v78[3], v92);
          unint64_t v97 = v96
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v159, 512, v96, v78[4], v92);
          unint64_t v98 = v97
              + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v161, 512, v97, v78[5], v92);
          uint64_t v99 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)&v160, 512, v98, v78[6], v92);
          AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)20,4u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressSubblock((uint64_t)v162, 512, v98 + v99, v78[7], v92);
          unint64_t v100 = v150;
          uint64_t v16 = v79;
          if (v150)
          {
            unint64_t v101 = 0;
            unsigned int v102 = &v155[512 * (unint64_t)v148 + 64 * (unint64_t)v149];
            unsigned int v103 = v151;
            do
            {
              if (v103)
              {
                uint64_t v104 = 0;
                uint64_t v105 = v146 + v147 * v101;
                do
                {
                  *(unsigned char *)(v105 + v104) = v102[v104];
                  ++v104;
                  unsigned int v103 = v151;
                }
                while ((unint64_t)v151 << 6 > v104);
                unint64_t v100 = v150;
              }
              ++v101;
              v102 += 512;
            }
            while (v101 < v100);
          }
LABEL_28:
          BOOL v29 = v39++ == v132 >> 3;
          uint64_t v34 = v143;
        }
        while (!v29);
        BOOL v29 = v25++ == v124;
      }
      while (!v29);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v297 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v235 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v234 = v235 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v247 = v24;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v246 = 0;
LABEL_32:
      unsigned int v244 = v26 - 4;
      unsigned int v239 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v232 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v246 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v246 = 0;
  unsigned int v232 = 0;
  unsigned int v239 = 0;
  unsigned int v244 = 0;
LABEL_33:
  if (v20 <= v234)
  {
    unsigned int v245 = a7 + a9 - 1;
    if (a7 >> 4 <= v245 >> 4)
    {
      unsigned int v253 = v18 >> 4;
      unsigned int v231 = v19 >> 3;
      int v252 = (v18 & 0xF) + 1;
      int v230 = (v19 & 7) + 1;
      uint64_t v241 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v240 = v34.i32[0] | v34.i32[1];
      int8x8_t v238 = v34;
      BOOL v236 = v34.i32[1] != 0;
      BOOL v237 = v34.i32[0] != 0;
      unsigned int v242 = a8;
      do
      {
        unsigned int v35 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v36 = a8;
        }
        else {
          int v36 = 8 * v20;
        }
        if (v235 < v35) {
          unsigned int v35 = v235;
        }
        int v243 = v36 - 8 * v20;
        int v251 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v230;
        if (v20 != v231) {
          int v38 = 8;
        }
        unsigned int v254 = v38;
        uint64_t v250 = a2 + (v36 - a8) * a11;
        do
        {
          unsigned int v40 = 16 * v37;
          unsigned int v41 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v37;
          }
          if (v245 < v41) {
            unsigned int v41 = a7 + a9 - 1;
          }
          int v43 = v41 - v42 + 1;
          if (v37 == v253) {
            unsigned int v44 = v252;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (8 * v20 >= a8 && v40 >= a7)
          {
            int v46 = v252;
            if (v37 != v253) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v251 != v254;
          }
          if (v246)
          {
            if (v244 | v239)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v244 != 0;
              int v51 = 1;
              BOOL v52 = v239 != 0;
              unsigned int v53 = v239;
              unsigned int v54 = v244;
              do
              {
                --v53;
                if (v52) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v239) & v51) << v48++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v54;
                if (v50) {
                  v49 |= (unint64_t)(v37 & ~(-1 << v244) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v54 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v54 | v53);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(a1 + 320) * ((v37 >> v244) + (v20 >> v239) * v232) + (v49 << 8);
          }
          else
          {
            if (v240)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v236;
              BOOL v59 = v237;
              __int32 v60 = v238.i32[0];
              __int32 v61 = v238.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v37) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 8;
          }
          unsigned int v63 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10)
          {
            unsigned int v68 = 0;
            if (!v65)
            {
LABEL_111:
              uint64_t v70 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
            if (!(v68 | v65)) {
              goto LABEL_111;
            }
          }
          int v69 = 0;
          uint64_t v70 = 0;
          BOOL v71 = v65 != 0;
          BOOL v72 = v68 != 0;
          int v73 = 1;
          do
          {
            --v65;
            if (v71) {
              v70 |= (unint64_t)(v73 & v37) << v69++;
            }
            else {
              unsigned int v65 = 0;
            }
            --v68;
            if (v72) {
              v70 |= (unint64_t)(v73 & v20) << v69++;
            }
            else {
              unsigned int v68 = 0;
            }
            v73 *= 2;
            --v69;
            BOOL v72 = v68 != 0;
            BOOL v71 = v65 != 0;
          }
          while (v68 | v65);
LABEL_112:
          unsigned int v74 = (_OWORD *)(a3 + v62);
          if (v247)
          {
            long long v75 = v74[13];
            v264[12] = v74[12];
            v264[13] = v75;
            long long v76 = v74[15];
            v264[14] = v74[14];
            v264[15] = v76;
            long long v77 = v74[9];
            v264[8] = v74[8];
            v264[9] = v77;
            long long v78 = v74[11];
            v264[10] = v74[10];
            v264[11] = v78;
            long long v79 = v74[5];
            v264[4] = v74[4];
            v264[5] = v79;
            long long v80 = v74[7];
            v264[6] = v74[6];
            v264[7] = v80;
            long long v81 = v74[1];
            v264[0] = *v74;
            v264[1] = v81;
            long long v82 = v74[2];
            long long v83 = v74[3];
            unsigned int v74 = v264;
            v264[2] = v82;
            v264[3] = v83;
          }
          unint64_t v84 = (unsigned __int8 *)(a4 + 8 * v70);
          unint64_t v85 = (int32x2_t *)(v250 + 2 * (v42 - a7));
          char v86 = v44 < 0x10 || v45;
          if ((v86 & 1) == 0 && v254 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 96)
            {
              int8x8_t v97 = vdup_lane_s8(*(int8x8_t *)v74, 0);
              int32x2_t *v85 = (int32x2_t)v97;
              *(int8x8_t *)((char *)v85 + a11) = v97;
              uint64_t v88 = 2 * a11;
              *(int8x8_t *)((char *)v85 + 2 * a11) = v97;
              *(int8x8_t *)((char *)v85 + 3 * a11) = v97;
              uint64_t v89 = 1;
            }
            else
            {
              uint64_t v88 = 2 * a11;
              if (v87 == 31)
              {
                int32x2_t v92 = *(int32x2_t *)v74;
                int32x2_t v93 = *(int32x2_t *)((char *)v74 + 8);
                int32x2_t v94 = (int32x2_t)v74[1];
                int32x2_t v95 = *(int32x2_t *)((char *)v74 + 24);
                int32x2_t *v85 = vzip1_s32(*(int32x2_t *)v74, v93);
                *(int32x2_t *)((char *)v85 + a11) = vzip2_s32(v92, v93);
                unint64_t v96 = (int32x2_t *)((char *)v85 + 2 * a11);
                *unint64_t v96 = vzip1_s32(v94, v95);
                *(int32x2_t *)((char *)v96 + a11) = vzip2_s32(v94, v95);
                uint64_t v89 = 32;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v74, v87);
                uint64_t v88 = 2 * a11;
              }
              else
              {
                uint64_t v89 = 0;
                int32x2_t *v85 = 0;
                *(int32x2_t *)((char *)v85 + a11) = 0;
                *(int32x2_t *)((char *)v85 + 2 * a11) = 0;
                *(int32x2_t *)((char *)v85 + 3 * a11) = 0;
              }
            }
            unint64_t v98 = (int8x8_t *)((char *)v74 + v89);
            uint64_t v99 = v85 + 1;
            unsigned int v100 = v84[1];
            if (v100 == 96)
            {
              int8x8_t v107 = vdup_lane_s8(*v98, 0);
              *uint64_t v99 = (int32x2_t)v107;
              *(int8x8_t *)((char *)v99 + a11) = v107;
              *(int8x8_t *)((char *)v99 + v88) = v107;
              *(int8x8_t *)((char *)v99 + 3 * a11) = v107;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              int32x2_t v102 = (int32x2_t)*v98;
              int32x2_t v103 = (int32x2_t)v98[1];
              int32x2_t v104 = (int32x2_t)v98[2];
              int32x2_t v105 = (int32x2_t)v98[3];
              *uint64_t v99 = vzip1_s32((int32x2_t)*v98, v103);
              *(int32x2_t *)((char *)v99 + a11) = vzip2_s32(v102, v103);
              unsigned int v106 = (int32x2_t *)((char *)v99 + v88);
              int32x2_t *v106 = vzip1_s32(v104, v105);
              *(int32x2_t *)((char *)v106 + a11) = vzip2_s32(v104, v105);
              uint64_t v101 = 32;
            }
            else if (v84[1])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, a11, (uint64_t)v98, v100);
              uint64_t v88 = 2 * a11;
              uint64_t v101 = v108;
            }
            else
            {
              uint64_t v101 = 0;
              *uint64_t v99 = 0;
              *(int32x2_t *)((char *)v99 + a11) = 0;
              *(int32x2_t *)((char *)v99 + v88) = 0;
              *(int32x2_t *)((char *)v99 + 3 * a11) = 0;
            }
            unsigned int v109 = (int8x8_t *)((char *)v98 + v101);
            int v110 = (int32x2_t *)((char *)v85 + v241);
            unsigned int v111 = v84[2];
            if (v111 == 96)
            {
              int8x8_t v118 = vdup_lane_s8(*v109, 0);
              *int v110 = (int32x2_t)v118;
              *(int8x8_t *)((char *)v110 + a11) = v118;
              *(int8x8_t *)((char *)v110 + v88) = v118;
              *(int8x8_t *)((char *)v110 + 3 * a11) = v118;
              uint64_t v112 = 1;
            }
            else if (v111 == 31)
            {
              int32x2_t v113 = (int32x2_t)*v109;
              int32x2_t v114 = (int32x2_t)v109[1];
              int32x2_t v115 = (int32x2_t)v109[2];
              int32x2_t v116 = (int32x2_t)v109[3];
              *int v110 = vzip1_s32((int32x2_t)*v109, v114);
              *(int32x2_t *)((char *)v110 + a11) = vzip2_s32(v113, v114);
              unint64_t v117 = (int32x2_t *)((char *)v110 + v88);
              *unint64_t v117 = vzip1_s32(v115, v116);
              *(int32x2_t *)((char *)v117 + a11) = vzip2_s32(v115, v116);
              uint64_t v112 = 32;
            }
            else if (v84[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x2_t *)((char *)v85 + v241), a11, (uint64_t)v109, v111);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v112 = 0;
              *int v110 = 0;
              *(int32x2_t *)((char *)v110 + a11) = 0;
              *(int32x2_t *)((char *)v110 + v88) = 0;
              *(int32x2_t *)((char *)v110 + 3 * a11) = 0;
            }
            int v119 = (int8x8_t *)((char *)v109 + v112);
            unsigned int v120 = v110 + 1;
            unsigned int v121 = v84[3];
            if (v121 == 96)
            {
              int8x8_t v128 = vdup_lane_s8(*v119, 0);
              *unsigned int v120 = (int32x2_t)v128;
              *(int8x8_t *)((char *)v120 + a11) = v128;
              *(int8x8_t *)((char *)v120 + v88) = v128;
              *(int8x8_t *)((char *)v120 + 3 * a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              int32x2_t v123 = (int32x2_t)*v119;
              int32x2_t v124 = (int32x2_t)v119[1];
              int32x2_t v125 = (int32x2_t)v119[2];
              int32x2_t v126 = (int32x2_t)v119[3];
              *unsigned int v120 = vzip1_s32((int32x2_t)*v119, v124);
              *(int32x2_t *)((char *)v120 + a11) = vzip2_s32(v123, v124);
              int v127 = (int32x2_t *)((char *)v120 + v88);
              *int v127 = vzip1_s32(v125, v126);
              *(int32x2_t *)((char *)v127 + a11) = vzip2_s32(v125, v126);
              uint64_t v122 = 32;
            }
            else if (v84[3])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, a11, (uint64_t)v119, v121);
              uint64_t v88 = 2 * a11;
              uint64_t v122 = v129;
            }
            else
            {
              uint64_t v122 = 0;
              *unsigned int v120 = 0;
              *(int32x2_t *)((char *)v120 + a11) = 0;
              *(int32x2_t *)((char *)v120 + v88) = 0;
              *(int32x2_t *)((char *)v120 + 3 * a11) = 0;
            }
            int8x8_t v130 = (int8x8_t *)((char *)v119 + v122);
            __int32 v131 = v85 + 2;
            unsigned int v132 = v84[4];
            if (v132 == 96)
            {
              int8x8_t v139 = vdup_lane_s8(*v130, 0);
              *__int32 v131 = (int32x2_t)v139;
              *(int8x8_t *)((char *)v131 + a11) = v139;
              *(int8x8_t *)((char *)v131 + v88) = v139;
              *(int8x8_t *)((char *)v131 + 3 * a11) = v139;
              uint64_t v133 = 1;
            }
            else if (v132 == 31)
            {
              int32x2_t v134 = (int32x2_t)*v130;
              int32x2_t v135 = (int32x2_t)v130[1];
              int32x2_t v136 = (int32x2_t)v130[2];
              int32x2_t v137 = (int32x2_t)v130[3];
              *__int32 v131 = vzip1_s32((int32x2_t)*v130, v135);
              *(int32x2_t *)((char *)v131 + a11) = vzip2_s32(v134, v135);
              int v138 = (int32x2_t *)((char *)v131 + v88);
              *int v138 = vzip1_s32(v136, v137);
              *(int32x2_t *)((char *)v138 + a11) = vzip2_s32(v136, v137);
              uint64_t v133 = 32;
            }
            else if (v84[4])
            {
              uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, a11, (uint64_t)v130, v132);
              uint64_t v88 = 2 * a11;
              uint64_t v133 = v140;
            }
            else
            {
              uint64_t v133 = 0;
              *__int32 v131 = 0;
              *(int32x2_t *)((char *)v131 + a11) = 0;
              *(int32x2_t *)((char *)v131 + v88) = 0;
              *(int32x2_t *)((char *)v131 + 3 * a11) = 0;
            }
            int v141 = (int8x8_t *)((char *)v130 + v133);
            unsigned int v142 = v85 + 3;
            unsigned int v143 = v84[5];
            if (v143 == 96)
            {
              int8x8_t v150 = vdup_lane_s8(*v141, 0);
              *unsigned int v142 = (int32x2_t)v150;
              *(int8x8_t *)((char *)v142 + a11) = v150;
              *(int8x8_t *)((char *)v142 + v88) = v150;
              *(int8x8_t *)((char *)v142 + 3 * a11) = v150;
              uint64_t v144 = 1;
            }
            else if (v143 == 31)
            {
              int32x2_t v145 = (int32x2_t)*v141;
              int32x2_t v146 = (int32x2_t)v141[1];
              int32x2_t v147 = (int32x2_t)v141[2];
              int32x2_t v148 = (int32x2_t)v141[3];
              *unsigned int v142 = vzip1_s32((int32x2_t)*v141, v146);
              *(int32x2_t *)((char *)v142 + a11) = vzip2_s32(v145, v146);
              unsigned int v149 = (int32x2_t *)((char *)v142 + v88);
              *unsigned int v149 = vzip1_s32(v147, v148);
              *(int32x2_t *)((char *)v149 + a11) = vzip2_s32(v147, v148);
              uint64_t v144 = 32;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, a11, (uint64_t)v141, v143);
              uint64_t v88 = 2 * a11;
              uint64_t v144 = v151;
            }
            else
            {
              uint64_t v144 = 0;
              *unsigned int v142 = 0;
              *(int32x2_t *)((char *)v142 + a11) = 0;
              *(int32x2_t *)((char *)v142 + v88) = 0;
              *(int32x2_t *)((char *)v142 + 3 * a11) = 0;
            }
            char v152 = (int8x8_t *)((char *)v141 + v144);
            char v153 = v110 + 2;
            unsigned int v154 = v84[6];
            if (v154 == 96)
            {
              int8x8_t v161 = vdup_lane_s8(*v152, 0);
              *char v153 = (int32x2_t)v161;
              *(int8x8_t *)((char *)v153 + a11) = v161;
              *(int8x8_t *)((char *)v153 + v88) = v161;
              *(int8x8_t *)((char *)v153 + 3 * a11) = v161;
              uint64_t v155 = 1;
              a8 = v242;
            }
            else
            {
              a8 = v242;
              if (v154 == 31)
              {
                int32x2_t v156 = (int32x2_t)*v152;
                int32x2_t v157 = (int32x2_t)v152[1];
                int32x2_t v158 = (int32x2_t)v152[2];
                int32x2_t v159 = (int32x2_t)v152[3];
                *char v153 = vzip1_s32((int32x2_t)*v152, v157);
                *(int32x2_t *)((char *)v153 + a11) = vzip2_s32(v156, v157);
                uint64_t v160 = (int32x2_t *)((char *)v153 + v88);
                *uint64_t v160 = vzip1_s32(v158, v159);
                *(int32x2_t *)((char *)v160 + a11) = vzip2_s32(v158, v159);
                uint64_t v155 = 32;
              }
              else if (v84[6])
              {
                uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v153, a11, (uint64_t)v152, v154);
                uint64_t v88 = 2 * a11;
                uint64_t v155 = v162;
              }
              else
              {
                uint64_t v155 = 0;
                *char v153 = 0;
                *(int32x2_t *)((char *)v153 + a11) = 0;
                *(int32x2_t *)((char *)v153 + v88) = 0;
                *(int32x2_t *)((char *)v153 + 3 * a11) = 0;
              }
            }
            uint64_t v163 = (int8x8_t *)((char *)v152 + v155);
            unsigned int v164 = v110 + 3;
            unsigned int v165 = v84[7];
            if (v165 == 96)
            {
              int8x8_t v171 = vdup_lane_s8(*v163, 0);
              *unsigned int v164 = (int32x2_t)v171;
              *(int8x8_t *)((char *)v164 + a11) = v171;
              *(int8x8_t *)((char *)v164 + v88) = v171;
              *(int8x8_t *)((char *)v164 + 3 * a11) = v171;
            }
            else if (v165 == 31)
            {
              int32x2_t v166 = (int32x2_t)*v163;
              int32x2_t v167 = (int32x2_t)v163[1];
              int32x2_t v168 = (int32x2_t)v163[2];
              int32x2_t v169 = (int32x2_t)v163[3];
              *unsigned int v164 = vzip1_s32((int32x2_t)*v163, v167);
              *(int32x2_t *)((char *)v164 + a11) = vzip2_s32(v166, v167);
              uint64_t v170 = (int32x2_t *)((char *)v164 + v88);
              *uint64_t v170 = vzip1_s32(v168, v169);
              *(int32x2_t *)((char *)v170 + a11) = vzip2_s32(v168, v169);
            }
            else if (v84[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v164, a11, (uint64_t)v163, v165);
            }
            else
            {
              *unsigned int v164 = 0;
              *(int32x2_t *)((char *)v164 + a11) = 0;
              *(int32x2_t *)((char *)v164 + v88) = 0;
              *(int32x2_t *)((char *)v164 + 3 * a11) = 0;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v74;
          char v262 = v44;
          char v263 = v254;
          int v258 = v243;
          unsigned int v259 = v42 - v40;
          block[6] = a4 + 8 * v70;
          uint64_t v256 = v250 + 2 * (v42 - a7);
          uint64_t v257 = a11;
          unsigned int v260 = v251;
          unsigned int v261 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v39 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v84;
          if (v90 == 96)
          {
            int32x2_t v265 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v74, 0);
            int32x2_t v269 = v265;
            int32x2_t v273 = v265;
            int32x2_t v277 = v265;
            uint64_t v91 = 1;
          }
          else if (v90 == 31)
          {
            int32x2_t v172 = *(int32x2_t *)((char *)v74 + 8);
            int32x2_t v173 = (int32x2_t)v74[1];
            int32x2_t v174 = *(int32x2_t *)((char *)v74 + 24);
            int32x2_t v175 = vzip2_s32(*(int32x2_t *)v74, v172);
            int32x2_t v265 = vzip1_s32(*(int32x2_t *)v74, v172);
            int32x2_t v269 = v175;
            int32x2_t v273 = vzip1_s32(v173, v174);
            int32x2_t v277 = vzip2_s32(v173, v174);
            uint64_t v91 = 32;
          }
          else if (*v84)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, (uint64_t)v74, v90);
          }
          else
          {
            uint64_t v91 = 0;
            int32x2_t v265 = 0;
            int32x2_t v269 = 0;
            int32x2_t v273 = 0;
            int32x2_t v277 = 0;
          }
          unsigned int v176 = (int8x8_t *)((char *)v74 + v91);
          unsigned int v177 = v84[1];
          if (v177 == 96)
          {
            int32x2_t v266 = (int32x2_t)vdup_lane_s8(*v176, 0);
            int32x2_t v270 = v266;
            int32x2_t v274 = v266;
            int32x2_t v278 = v266;
            uint64_t v178 = 1;
          }
          else if (v177 == 31)
          {
            int32x2_t v179 = (int32x2_t)v176[1];
            int32x2_t v180 = (int32x2_t)v176[2];
            int32x2_t v181 = (int32x2_t)v176[3];
            int32x2_t v182 = vzip2_s32((int32x2_t)*v176, v179);
            int32x2_t v266 = vzip1_s32((int32x2_t)*v176, v179);
            int32x2_t v270 = v182;
            int32x2_t v274 = vzip1_s32(v180, v181);
            int32x2_t v278 = vzip2_s32(v180, v181);
            uint64_t v178 = 32;
          }
          else if (v84[1])
          {
            uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, (uint64_t)v176, v177);
          }
          else
          {
            uint64_t v178 = 0;
            int32x2_t v266 = 0;
            int32x2_t v270 = 0;
            int32x2_t v274 = 0;
            int32x2_t v278 = 0;
          }
          BOOL v183 = (int8x8_t *)((char *)v176 + v178);
          unsigned int v184 = v84[2];
          if (v184 == 96)
          {
            int32x2_t v281 = (int32x2_t)vdup_lane_s8(*v183, 0);
            int32x2_t v285 = v281;
            int32x2_t v289 = v281;
            int32x2_t v293 = v281;
            uint64_t v185 = 1;
          }
          else if (v184 == 31)
          {
            int32x2_t v186 = (int32x2_t)v183[1];
            int32x2_t v187 = (int32x2_t)v183[2];
            int32x2_t v188 = (int32x2_t)v183[3];
            int32x2_t v189 = vzip2_s32((int32x2_t)*v183, v186);
            int32x2_t v281 = vzip1_s32((int32x2_t)*v183, v186);
            int32x2_t v285 = v189;
            int32x2_t v289 = vzip1_s32(v187, v188);
            int32x2_t v293 = vzip2_s32(v187, v188);
            uint64_t v185 = 32;
          }
          else if (v84[2])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, (uint64_t)v183, v184);
          }
          else
          {
            uint64_t v185 = 0;
            int32x2_t v281 = 0;
            int32x2_t v285 = 0;
            int32x2_t v289 = 0;
            int32x2_t v293 = 0;
          }
          uint64_t v190 = (int8x8_t *)((char *)v183 + v185);
          unsigned int v191 = v84[3];
          if (v191 == 96)
          {
            int32x2_t v282 = (int32x2_t)vdup_lane_s8(*v190, 0);
            int32x2_t v286 = v282;
            int32x2_t v290 = v282;
            int32x2_t v294 = v282;
            uint64_t v192 = 1;
          }
          else if (v191 == 31)
          {
            int32x2_t v193 = (int32x2_t)v190[1];
            int32x2_t v194 = (int32x2_t)v190[2];
            int32x2_t v195 = (int32x2_t)v190[3];
            int32x2_t v196 = vzip2_s32((int32x2_t)*v190, v193);
            int32x2_t v282 = vzip1_s32((int32x2_t)*v190, v193);
            int32x2_t v286 = v196;
            int32x2_t v290 = vzip1_s32(v194, v195);
            int32x2_t v294 = vzip2_s32(v194, v195);
            uint64_t v192 = 32;
          }
          else if (v84[3])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, (uint64_t)v190, v191);
          }
          else
          {
            uint64_t v192 = 0;
            int32x2_t v282 = 0;
            int32x2_t v286 = 0;
            int32x2_t v290 = 0;
            int32x2_t v294 = 0;
          }
          int8x8_t v197 = (int8x8_t *)((char *)v190 + v192);
          unsigned int v198 = v84[4];
          if (v198 == 96)
          {
            int32x2_t v267 = (int32x2_t)vdup_lane_s8(*v197, 0);
            int32x2_t v271 = v267;
            int32x2_t v275 = v267;
            int32x2_t v279 = v267;
            uint64_t v199 = 1;
          }
          else if (v198 == 31)
          {
            int32x2_t v200 = (int32x2_t)v197[1];
            int32x2_t v201 = (int32x2_t)v197[2];
            int32x2_t v202 = (int32x2_t)v197[3];
            int32x2_t v203 = vzip2_s32((int32x2_t)*v197, v200);
            int32x2_t v267 = vzip1_s32((int32x2_t)*v197, v200);
            int32x2_t v271 = v203;
            int32x2_t v275 = vzip1_s32(v201, v202);
            int32x2_t v279 = vzip2_s32(v201, v202);
            uint64_t v199 = 32;
          }
          else if (v84[4])
          {
            uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, (uint64_t)v197, v198);
          }
          else
          {
            uint64_t v199 = 0;
            int32x2_t v267 = 0;
            int32x2_t v271 = 0;
            int32x2_t v275 = 0;
            int32x2_t v279 = 0;
          }
          uint64_t v204 = (int8x8_t *)((char *)v197 + v199);
          unsigned int v205 = v84[5];
          if (v205 == 96)
          {
            int32x2_t v268 = (int32x2_t)vdup_lane_s8(*v204, 0);
            int32x2_t v272 = v268;
            int32x2_t v276 = v268;
            int32x2_t v280 = v268;
            uint64_t v206 = 1;
          }
          else if (v205 == 31)
          {
            int32x2_t v207 = (int32x2_t)v204[1];
            int32x2_t v208 = (int32x2_t)v204[2];
            int32x2_t v209 = (int32x2_t)v204[3];
            int32x2_t v210 = vzip2_s32((int32x2_t)*v204, v207);
            int32x2_t v268 = vzip1_s32((int32x2_t)*v204, v207);
            int32x2_t v272 = v210;
            int32x2_t v276 = vzip1_s32(v208, v209);
            int32x2_t v280 = vzip2_s32(v208, v209);
            uint64_t v206 = 32;
          }
          else if (v84[5])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, (uint64_t)v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x2_t v268 = 0;
            int32x2_t v272 = 0;
            int32x2_t v276 = 0;
            int32x2_t v280 = 0;
          }
          uint64_t v211 = (int8x8_t *)((char *)v204 + v206);
          unsigned int v212 = v84[6];
          if (v212 == 96)
          {
            int32x2_t v283 = (int32x2_t)vdup_lane_s8(*v211, 0);
            int32x2_t v287 = v283;
            int32x2_t v291 = v283;
            int32x2_t v295 = v283;
            uint64_t v213 = 1;
          }
          else if (v212 == 31)
          {
            int32x2_t v214 = (int32x2_t)v211[1];
            int32x2_t v215 = (int32x2_t)v211[2];
            int32x2_t v216 = (int32x2_t)v211[3];
            int32x2_t v217 = vzip2_s32((int32x2_t)*v211, v214);
            int32x2_t v283 = vzip1_s32((int32x2_t)*v211, v214);
            int32x2_t v287 = v217;
            int32x2_t v291 = vzip1_s32(v215, v216);
            int32x2_t v295 = vzip2_s32(v215, v216);
            uint64_t v213 = 32;
          }
          else if (v84[6])
          {
            uint64_t v213 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, (uint64_t)v211, v212);
          }
          else
          {
            uint64_t v213 = 0;
            int32x2_t v283 = 0;
            int32x2_t v287 = 0;
            int32x2_t v291 = 0;
            int32x2_t v295 = 0;
          }
          unsigned int v218 = (int8x8_t *)((char *)v211 + v213);
          unsigned int v219 = v84[7];
          if (v219 == 96)
          {
            int32x2_t v284 = (int32x2_t)vdup_lane_s8(*v218, 0);
            int32x2_t v288 = v284;
            int32x2_t v292 = v284;
            int32x2_t v296 = v284;
          }
          else if (v219 == 31)
          {
            int32x2_t v220 = (int32x2_t)v218[1];
            int32x2_t v221 = (int32x2_t)v218[2];
            int32x2_t v222 = (int32x2_t)v218[3];
            int32x2_t v223 = vzip2_s32((int32x2_t)*v218, v220);
            int32x2_t v284 = vzip1_s32((int32x2_t)*v218, v220);
            int32x2_t v288 = v223;
            int32x2_t v292 = vzip1_s32(v221, v222);
            int32x2_t v296 = vzip2_s32(v221, v222);
          }
          else if (v84[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, (uint64_t)v218, v219);
          }
          else
          {
            int32x2_t v284 = 0;
            int32x2_t v288 = 0;
            int32x2_t v292 = 0;
            int32x2_t v296 = 0;
          }
          unint64_t v224 = v260;
          unsigned int v39 = v37 + 1;
          if (v260)
          {
            unint64_t v225 = 0;
            float64x2_t v226 = (char *)&v265 + 32 * v258 + 2 * v259;
            unsigned int v227 = v261;
            do
            {
              if (v227)
              {
                uint64_t v228 = 0;
                uint64_t v229 = v256 + v257 * v225;
                do
                {
                  *(unsigned char *)(v229 + v228) = v226[v228];
                  ++v228;
                  unsigned int v227 = v261;
                }
                while (2 * (unint64_t)v261 > v228);
                unint64_t v224 = v260;
              }
              ++v225;
              v226 += 32;
            }
            while (v225 < v224);
          }
LABEL_48:
          BOOL v21 = v37 == v245 >> 4;
          unsigned int v37 = v39;
        }
        while (!v21);
        BOOL v21 = v20++ == v234;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v297 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v235 = a8 + a10 - 1;
  if (*(void *)(a1 + 168)) {
    int v17 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v17 = 0;
  }
  unsigned int v18 = a5 - 1;
  unsigned int v19 = a6 - 1;
  unsigned int v20 = a8 >> 3;
  unsigned int v234 = v235 >> 3;
  BOOL v21 = (v17 & 0xD00) == 0 || v17 == 768;
  int v22 = v17 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v247 = v24;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v25 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v26 = *(unsigned __int8 *)(a1 + 254);
    char v27 = __clz(v18);
    if (1 << v25 >= a6 || a5 >> v26)
    {
      if (!(a6 >> v25) && 1 << v26 < a5)
      {
        if (a6 < 2) {
          unsigned int v30 = 0;
        }
        else {
          unsigned int v30 = __clz(~(-1 << -(char)__clz(v19))) - 32;
        }
        v26 += v25 + v30;
        unsigned int v25 = -v30;
      }
    }
    else
    {
      unsigned int v28 = 32 - __clz(~(-1 << -v27));
      unsigned int v29 = v26 + v25;
      if (a5 < 2) {
        unsigned int v28 = 0;
      }
      unsigned int v25 = v29 - v28;
      unsigned int v26 = v28;
    }
    if (a5 < 2)
    {
      if (v26) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v27)) < v26)
    {
LABEL_27:
      BOOL v246 = 0;
LABEL_32:
      unsigned int v244 = v26 - 4;
      unsigned int v239 = v25 - 3;
      int v32 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v232 = (((~v32 + a5) & v32) + ~(-1 << v26)) >> v26;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v31 = 0;
    }
    else {
      unsigned int v31 = 32 - __clz(~(-1 << -(char)__clz(v19)));
    }
    BOOL v246 = v31 >= v25;
    goto LABEL_32;
  }
  BOOL v246 = 0;
  unsigned int v232 = 0;
  unsigned int v239 = 0;
  unsigned int v244 = 0;
LABEL_33:
  if (v20 <= v234)
  {
    unsigned int v245 = a7 + a9 - 1;
    if (a7 >> 4 <= v245 >> 4)
    {
      unsigned int v253 = v18 >> 4;
      unsigned int v231 = v19 >> 3;
      int v252 = (v18 & 0xF) + 1;
      int v230 = (v19 & 7) + 1;
      uint64_t v241 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v240 = v34.i32[0] | v34.i32[1];
      int8x8_t v238 = v34;
      BOOL v236 = v34.i32[1] != 0;
      BOOL v237 = v34.i32[0] != 0;
      unsigned int v242 = a8;
      do
      {
        unsigned int v35 = (8 * v20) | 7;
        if (8 * v20 <= a8) {
          int v36 = a8;
        }
        else {
          int v36 = 8 * v20;
        }
        if (v235 < v35) {
          unsigned int v35 = v235;
        }
        int v243 = v36 - 8 * v20;
        int v251 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v230;
        if (v20 != v231) {
          int v38 = 8;
        }
        unsigned int v254 = v38;
        uint64_t v250 = a2 + (v36 - a8) * a11;
        do
        {
          unsigned int v40 = 16 * v37;
          unsigned int v41 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= a7) {
            int v42 = a7;
          }
          else {
            int v42 = 16 * v37;
          }
          if (v245 < v41) {
            unsigned int v41 = a7 + a9 - 1;
          }
          int v43 = v41 - v42 + 1;
          if (v37 == v253) {
            unsigned int v44 = v252;
          }
          else {
            unsigned int v44 = 16;
          }
          BOOL v45 = 1;
          if (8 * v20 >= a8 && v40 >= a7)
          {
            int v46 = v252;
            if (v37 != v253) {
              int v46 = 16;
            }
            BOOL v45 = v43 != v46 || v251 != v254;
          }
          if (v246)
          {
            if (v244 | v239)
            {
              int v48 = 0;
              uint64_t v49 = 0;
              BOOL v50 = v244 != 0;
              int v51 = 1;
              BOOL v52 = v239 != 0;
              unsigned int v53 = v239;
              unsigned int v54 = v244;
              do
              {
                --v53;
                if (v52) {
                  v49 |= (unint64_t)(v20 & ~(-1 << v239) & v51) << v48++;
                }
                else {
                  unsigned int v53 = 0;
                }
                --v54;
                if (v50) {
                  v49 |= (unint64_t)(v37 & ~(-1 << v244) & v51) << v48++;
                }
                else {
                  unsigned int v54 = 0;
                }
                v51 *= 2;
                --v48;
                BOOL v50 = v54 != 0;
                BOOL v52 = v53 != 0;
              }
              while (v54 | v53);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v62 = *(void *)(a1 + 320) * ((v37 >> v244) + (v20 >> v239) * v232) + (v49 << 8);
          }
          else
          {
            if (v240)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v236;
              BOOL v59 = v237;
              __int32 v60 = v238.i32[0];
              __int32 v61 = v238.i32[1];
              do
              {
                --v60;
                if (v59) {
                  v56 |= (unint64_t)(v57 & v20) << v55++;
                }
                else {
                  __int32 v60 = 0;
                }
                --v61;
                if (v58) {
                  v56 |= (unint64_t)(v57 & v37) << v55++;
                }
                else {
                  __int32 v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v58 = v61 != 0;
                BOOL v59 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v62 = v56 << 8;
          }
          unsigned int v63 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v63 <= 1) {
            unsigned int v63 = 1;
          }
          unsigned int v64 = v63 + 15;
          if (v64 < 0x20) {
            unsigned int v65 = 0;
          }
          else {
            unsigned int v65 = 32 - __clz(~(-1 << -(char)__clz((v64 >> 4) - 1)));
          }
          unsigned int v66 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v66 <= 1) {
            unsigned int v66 = 1;
          }
          unsigned int v67 = v66 + 7;
          if (v67 < 0x10)
          {
            unsigned int v68 = 0;
            if (!v65)
            {
LABEL_111:
              uint64_t v70 = 0;
              goto LABEL_112;
            }
          }
          else
          {
            unsigned int v68 = 32 - __clz(~(-1 << -(char)__clz((v67 >> 3) - 1)));
            if (!(v68 | v65)) {
              goto LABEL_111;
            }
          }
          int v69 = 0;
          uint64_t v70 = 0;
          BOOL v71 = v65 != 0;
          BOOL v72 = v68 != 0;
          int v73 = 1;
          do
          {
            --v65;
            if (v71) {
              v70 |= (unint64_t)(v73 & v37) << v69++;
            }
            else {
              unsigned int v65 = 0;
            }
            --v68;
            if (v72) {
              v70 |= (unint64_t)(v73 & v20) << v69++;
            }
            else {
              unsigned int v68 = 0;
            }
            v73 *= 2;
            --v69;
            BOOL v72 = v68 != 0;
            BOOL v71 = v65 != 0;
          }
          while (v68 | v65);
LABEL_112:
          unsigned int v74 = (_OWORD *)(a3 + v62);
          if (v247)
          {
            long long v75 = v74[13];
            v264[12] = v74[12];
            v264[13] = v75;
            long long v76 = v74[15];
            v264[14] = v74[14];
            v264[15] = v76;
            long long v77 = v74[9];
            v264[8] = v74[8];
            v264[9] = v77;
            long long v78 = v74[11];
            v264[10] = v74[10];
            v264[11] = v78;
            long long v79 = v74[5];
            v264[4] = v74[4];
            v264[5] = v79;
            long long v80 = v74[7];
            v264[6] = v74[6];
            v264[7] = v80;
            long long v81 = v74[1];
            v264[0] = *v74;
            v264[1] = v81;
            long long v82 = v74[2];
            long long v83 = v74[3];
            unsigned int v74 = v264;
            v264[2] = v82;
            v264[3] = v83;
          }
          unint64_t v84 = (unsigned __int8 *)(a4 + 8 * v70);
          unint64_t v85 = (int32x2_t *)(v250 + 2 * (v42 - a7));
          char v86 = v44 < 0x10 || v45;
          if ((v86 & 1) == 0 && v254 > 7)
          {
            unsigned int v87 = *v84;
            if (v87 == 96)
            {
              int8x8_t v97 = vdup_lane_s8(*(int8x8_t *)v74, 0);
              int32x2_t *v85 = (int32x2_t)v97;
              *(int8x8_t *)((char *)v85 + a11) = v97;
              uint64_t v88 = 2 * a11;
              *(int8x8_t *)((char *)v85 + 2 * a11) = v97;
              *(int8x8_t *)((char *)v85 + 3 * a11) = v97;
              uint64_t v89 = 1;
            }
            else
            {
              uint64_t v88 = 2 * a11;
              if (v87 == 31)
              {
                int32x2_t v92 = *(int32x2_t *)v74;
                int32x2_t v93 = *(int32x2_t *)((char *)v74 + 8);
                int32x2_t v94 = (int32x2_t)v74[1];
                int32x2_t v95 = *(int32x2_t *)((char *)v74 + 24);
                int32x2_t *v85 = vzip1_s32(*(int32x2_t *)v74, v93);
                *(int32x2_t *)((char *)v85 + a11) = vzip2_s32(v92, v93);
                unint64_t v96 = (int32x2_t *)((char *)v85 + 2 * a11);
                *unint64_t v96 = vzip1_s32(v94, v95);
                *(int32x2_t *)((char *)v96 + a11) = vzip2_s32(v94, v95);
                uint64_t v89 = 32;
              }
              else if (*v84)
              {
                uint64_t v89 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v85, a11, (uint64_t)v74, v87);
                uint64_t v88 = 2 * a11;
              }
              else
              {
                uint64_t v89 = 0;
                int32x2_t *v85 = 0;
                *(int32x2_t *)((char *)v85 + a11) = 0;
                *(int32x2_t *)((char *)v85 + 2 * a11) = 0;
                *(int32x2_t *)((char *)v85 + 3 * a11) = 0;
              }
            }
            unint64_t v98 = (int8x8_t *)((char *)v74 + v89);
            uint64_t v99 = v85 + 1;
            unsigned int v100 = v84[1];
            if (v100 == 96)
            {
              int8x8_t v107 = vdup_lane_s8(*v98, 0);
              *uint64_t v99 = (int32x2_t)v107;
              *(int8x8_t *)((char *)v99 + a11) = v107;
              *(int8x8_t *)((char *)v99 + v88) = v107;
              *(int8x8_t *)((char *)v99 + 3 * a11) = v107;
              uint64_t v101 = 1;
            }
            else if (v100 == 31)
            {
              int32x2_t v102 = (int32x2_t)*v98;
              int32x2_t v103 = (int32x2_t)v98[1];
              int32x2_t v104 = (int32x2_t)v98[2];
              int32x2_t v105 = (int32x2_t)v98[3];
              *uint64_t v99 = vzip1_s32((int32x2_t)*v98, v103);
              *(int32x2_t *)((char *)v99 + a11) = vzip2_s32(v102, v103);
              unsigned int v106 = (int32x2_t *)((char *)v99 + v88);
              int32x2_t *v106 = vzip1_s32(v104, v105);
              *(int32x2_t *)((char *)v106 + a11) = vzip2_s32(v104, v105);
              uint64_t v101 = 32;
            }
            else if (v84[1])
            {
              uint64_t v108 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v99, a11, (uint64_t)v98, v100);
              uint64_t v88 = 2 * a11;
              uint64_t v101 = v108;
            }
            else
            {
              uint64_t v101 = 0;
              *uint64_t v99 = 0;
              *(int32x2_t *)((char *)v99 + a11) = 0;
              *(int32x2_t *)((char *)v99 + v88) = 0;
              *(int32x2_t *)((char *)v99 + 3 * a11) = 0;
            }
            unsigned int v109 = (int8x8_t *)((char *)v98 + v101);
            int v110 = (int32x2_t *)((char *)v85 + v241);
            unsigned int v111 = v84[2];
            if (v111 == 96)
            {
              int8x8_t v118 = vdup_lane_s8(*v109, 0);
              *int v110 = (int32x2_t)v118;
              *(int8x8_t *)((char *)v110 + a11) = v118;
              *(int8x8_t *)((char *)v110 + v88) = v118;
              *(int8x8_t *)((char *)v110 + 3 * a11) = v118;
              uint64_t v112 = 1;
            }
            else if (v111 == 31)
            {
              int32x2_t v113 = (int32x2_t)*v109;
              int32x2_t v114 = (int32x2_t)v109[1];
              int32x2_t v115 = (int32x2_t)v109[2];
              int32x2_t v116 = (int32x2_t)v109[3];
              *int v110 = vzip1_s32((int32x2_t)*v109, v114);
              *(int32x2_t *)((char *)v110 + a11) = vzip2_s32(v113, v114);
              unint64_t v117 = (int32x2_t *)((char *)v110 + v88);
              *unint64_t v117 = vzip1_s32(v115, v116);
              *(int32x2_t *)((char *)v117 + a11) = vzip2_s32(v115, v116);
              uint64_t v112 = 32;
            }
            else if (v84[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x2_t *)((char *)v85 + v241), a11, (uint64_t)v109, v111);
              uint64_t v88 = 2 * a11;
            }
            else
            {
              uint64_t v112 = 0;
              *int v110 = 0;
              *(int32x2_t *)((char *)v110 + a11) = 0;
              *(int32x2_t *)((char *)v110 + v88) = 0;
              *(int32x2_t *)((char *)v110 + 3 * a11) = 0;
            }
            int v119 = (int8x8_t *)((char *)v109 + v112);
            unsigned int v120 = v110 + 1;
            unsigned int v121 = v84[3];
            if (v121 == 96)
            {
              int8x8_t v128 = vdup_lane_s8(*v119, 0);
              *unsigned int v120 = (int32x2_t)v128;
              *(int8x8_t *)((char *)v120 + a11) = v128;
              *(int8x8_t *)((char *)v120 + v88) = v128;
              *(int8x8_t *)((char *)v120 + 3 * a11) = v128;
              uint64_t v122 = 1;
            }
            else if (v121 == 31)
            {
              int32x2_t v123 = (int32x2_t)*v119;
              int32x2_t v124 = (int32x2_t)v119[1];
              int32x2_t v125 = (int32x2_t)v119[2];
              int32x2_t v126 = (int32x2_t)v119[3];
              *unsigned int v120 = vzip1_s32((int32x2_t)*v119, v124);
              *(int32x2_t *)((char *)v120 + a11) = vzip2_s32(v123, v124);
              int v127 = (int32x2_t *)((char *)v120 + v88);
              *int v127 = vzip1_s32(v125, v126);
              *(int32x2_t *)((char *)v127 + a11) = vzip2_s32(v125, v126);
              uint64_t v122 = 32;
            }
            else if (v84[3])
            {
              uint64_t v129 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v120, a11, (uint64_t)v119, v121);
              uint64_t v88 = 2 * a11;
              uint64_t v122 = v129;
            }
            else
            {
              uint64_t v122 = 0;
              *unsigned int v120 = 0;
              *(int32x2_t *)((char *)v120 + a11) = 0;
              *(int32x2_t *)((char *)v120 + v88) = 0;
              *(int32x2_t *)((char *)v120 + 3 * a11) = 0;
            }
            int8x8_t v130 = (int8x8_t *)((char *)v119 + v122);
            __int32 v131 = v85 + 2;
            unsigned int v132 = v84[4];
            if (v132 == 96)
            {
              int8x8_t v139 = vdup_lane_s8(*v130, 0);
              *__int32 v131 = (int32x2_t)v139;
              *(int8x8_t *)((char *)v131 + a11) = v139;
              *(int8x8_t *)((char *)v131 + v88) = v139;
              *(int8x8_t *)((char *)v131 + 3 * a11) = v139;
              uint64_t v133 = 1;
            }
            else if (v132 == 31)
            {
              int32x2_t v134 = (int32x2_t)*v130;
              int32x2_t v135 = (int32x2_t)v130[1];
              int32x2_t v136 = (int32x2_t)v130[2];
              int32x2_t v137 = (int32x2_t)v130[3];
              *__int32 v131 = vzip1_s32((int32x2_t)*v130, v135);
              *(int32x2_t *)((char *)v131 + a11) = vzip2_s32(v134, v135);
              int v138 = (int32x2_t *)((char *)v131 + v88);
              *int v138 = vzip1_s32(v136, v137);
              *(int32x2_t *)((char *)v138 + a11) = vzip2_s32(v136, v137);
              uint64_t v133 = 32;
            }
            else if (v84[4])
            {
              uint64_t v140 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, a11, (uint64_t)v130, v132);
              uint64_t v88 = 2 * a11;
              uint64_t v133 = v140;
            }
            else
            {
              uint64_t v133 = 0;
              *__int32 v131 = 0;
              *(int32x2_t *)((char *)v131 + a11) = 0;
              *(int32x2_t *)((char *)v131 + v88) = 0;
              *(int32x2_t *)((char *)v131 + 3 * a11) = 0;
            }
            int v141 = (int8x8_t *)((char *)v130 + v133);
            unsigned int v142 = v85 + 3;
            unsigned int v143 = v84[5];
            if (v143 == 96)
            {
              int8x8_t v150 = vdup_lane_s8(*v141, 0);
              *unsigned int v142 = (int32x2_t)v150;
              *(int8x8_t *)((char *)v142 + a11) = v150;
              *(int8x8_t *)((char *)v142 + v88) = v150;
              *(int8x8_t *)((char *)v142 + 3 * a11) = v150;
              uint64_t v144 = 1;
            }
            else if (v143 == 31)
            {
              int32x2_t v145 = (int32x2_t)*v141;
              int32x2_t v146 = (int32x2_t)v141[1];
              int32x2_t v147 = (int32x2_t)v141[2];
              int32x2_t v148 = (int32x2_t)v141[3];
              *unsigned int v142 = vzip1_s32((int32x2_t)*v141, v146);
              *(int32x2_t *)((char *)v142 + a11) = vzip2_s32(v145, v146);
              unsigned int v149 = (int32x2_t *)((char *)v142 + v88);
              *unsigned int v149 = vzip1_s32(v147, v148);
              *(int32x2_t *)((char *)v149 + a11) = vzip2_s32(v147, v148);
              uint64_t v144 = 32;
            }
            else if (v84[5])
            {
              uint64_t v151 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, a11, (uint64_t)v141, v143);
              uint64_t v88 = 2 * a11;
              uint64_t v144 = v151;
            }
            else
            {
              uint64_t v144 = 0;
              *unsigned int v142 = 0;
              *(int32x2_t *)((char *)v142 + a11) = 0;
              *(int32x2_t *)((char *)v142 + v88) = 0;
              *(int32x2_t *)((char *)v142 + 3 * a11) = 0;
            }
            char v152 = (int8x8_t *)((char *)v141 + v144);
            char v153 = v110 + 2;
            unsigned int v154 = v84[6];
            if (v154 == 96)
            {
              int8x8_t v161 = vdup_lane_s8(*v152, 0);
              *char v153 = (int32x2_t)v161;
              *(int8x8_t *)((char *)v153 + a11) = v161;
              *(int8x8_t *)((char *)v153 + v88) = v161;
              *(int8x8_t *)((char *)v153 + 3 * a11) = v161;
              uint64_t v155 = 1;
              a8 = v242;
            }
            else
            {
              a8 = v242;
              if (v154 == 31)
              {
                int32x2_t v156 = (int32x2_t)*v152;
                int32x2_t v157 = (int32x2_t)v152[1];
                int32x2_t v158 = (int32x2_t)v152[2];
                int32x2_t v159 = (int32x2_t)v152[3];
                *char v153 = vzip1_s32((int32x2_t)*v152, v157);
                *(int32x2_t *)((char *)v153 + a11) = vzip2_s32(v156, v157);
                uint64_t v160 = (int32x2_t *)((char *)v153 + v88);
                *uint64_t v160 = vzip1_s32(v158, v159);
                *(int32x2_t *)((char *)v160 + a11) = vzip2_s32(v158, v159);
                uint64_t v155 = 32;
              }
              else if (v84[6])
              {
                uint64_t v162 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v153, a11, (uint64_t)v152, v154);
                uint64_t v88 = 2 * a11;
                uint64_t v155 = v162;
              }
              else
              {
                uint64_t v155 = 0;
                *char v153 = 0;
                *(int32x2_t *)((char *)v153 + a11) = 0;
                *(int32x2_t *)((char *)v153 + v88) = 0;
                *(int32x2_t *)((char *)v153 + 3 * a11) = 0;
              }
            }
            uint64_t v163 = (int8x8_t *)((char *)v152 + v155);
            unsigned int v164 = v110 + 3;
            unsigned int v165 = v84[7];
            if (v165 == 96)
            {
              int8x8_t v171 = vdup_lane_s8(*v163, 0);
              *unsigned int v164 = (int32x2_t)v171;
              *(int8x8_t *)((char *)v164 + a11) = v171;
              *(int8x8_t *)((char *)v164 + v88) = v171;
              *(int8x8_t *)((char *)v164 + 3 * a11) = v171;
            }
            else if (v165 == 31)
            {
              int32x2_t v166 = (int32x2_t)*v163;
              int32x2_t v167 = (int32x2_t)v163[1];
              int32x2_t v168 = (int32x2_t)v163[2];
              int32x2_t v169 = (int32x2_t)v163[3];
              *unsigned int v164 = vzip1_s32((int32x2_t)*v163, v167);
              *(int32x2_t *)((char *)v164 + a11) = vzip2_s32(v166, v167);
              uint64_t v170 = (int32x2_t *)((char *)v164 + v88);
              *uint64_t v170 = vzip1_s32(v168, v169);
              *(int32x2_t *)((char *)v170 + a11) = vzip2_s32(v168, v169);
            }
            else if (v84[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v164, a11, (uint64_t)v163, v165);
            }
            else
            {
              *unsigned int v164 = 0;
              *(int32x2_t *)((char *)v164 + a11) = 0;
              *(int32x2_t *)((char *)v164 + v88) = 0;
              *(int32x2_t *)((char *)v164 + 3 * a11) = 0;
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = a1;
          block[5] = v74;
          char v262 = v44;
          char v263 = v254;
          int v258 = v243;
          unsigned int v259 = v42 - v40;
          block[6] = a4 + 8 * v70;
          uint64_t v256 = v250 + 2 * (v42 - a7);
          uint64_t v257 = a11;
          unsigned int v260 = v251;
          unsigned int v261 = v43;
          if (v45)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
LABEL_47:
            unsigned int v39 = v37 + 1;
            goto LABEL_48;
          }
          unsigned int v90 = *v84;
          if (v90 == 96)
          {
            int32x2_t v265 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v74, 0);
            int32x2_t v269 = v265;
            int32x2_t v273 = v265;
            int32x2_t v277 = v265;
            uint64_t v91 = 1;
          }
          else if (v90 == 31)
          {
            int32x2_t v172 = *(int32x2_t *)((char *)v74 + 8);
            int32x2_t v173 = (int32x2_t)v74[1];
            int32x2_t v174 = *(int32x2_t *)((char *)v74 + 24);
            int32x2_t v175 = vzip2_s32(*(int32x2_t *)v74, v172);
            int32x2_t v265 = vzip1_s32(*(int32x2_t *)v74, v172);
            int32x2_t v269 = v175;
            int32x2_t v273 = vzip1_s32(v173, v174);
            int32x2_t v277 = vzip2_s32(v173, v174);
            uint64_t v91 = 32;
          }
          else if (*v84)
          {
            uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v265, 32, (uint64_t)v74, v90);
          }
          else
          {
            uint64_t v91 = 0;
            int32x2_t v265 = 0;
            int32x2_t v269 = 0;
            int32x2_t v273 = 0;
            int32x2_t v277 = 0;
          }
          unsigned int v176 = (int8x8_t *)((char *)v74 + v91);
          unsigned int v177 = v84[1];
          if (v177 == 96)
          {
            int32x2_t v266 = (int32x2_t)vdup_lane_s8(*v176, 0);
            int32x2_t v270 = v266;
            int32x2_t v274 = v266;
            int32x2_t v278 = v266;
            uint64_t v178 = 1;
          }
          else if (v177 == 31)
          {
            int32x2_t v179 = (int32x2_t)v176[1];
            int32x2_t v180 = (int32x2_t)v176[2];
            int32x2_t v181 = (int32x2_t)v176[3];
            int32x2_t v182 = vzip2_s32((int32x2_t)*v176, v179);
            int32x2_t v266 = vzip1_s32((int32x2_t)*v176, v179);
            int32x2_t v270 = v182;
            int32x2_t v274 = vzip1_s32(v180, v181);
            int32x2_t v278 = vzip2_s32(v180, v181);
            uint64_t v178 = 32;
          }
          else if (v84[1])
          {
            uint64_t v178 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v266, 32, (uint64_t)v176, v177);
          }
          else
          {
            uint64_t v178 = 0;
            int32x2_t v266 = 0;
            int32x2_t v270 = 0;
            int32x2_t v274 = 0;
            int32x2_t v278 = 0;
          }
          BOOL v183 = (int8x8_t *)((char *)v176 + v178);
          unsigned int v184 = v84[2];
          if (v184 == 96)
          {
            int32x2_t v281 = (int32x2_t)vdup_lane_s8(*v183, 0);
            int32x2_t v285 = v281;
            int32x2_t v289 = v281;
            int32x2_t v293 = v281;
            uint64_t v185 = 1;
          }
          else if (v184 == 31)
          {
            int32x2_t v186 = (int32x2_t)v183[1];
            int32x2_t v187 = (int32x2_t)v183[2];
            int32x2_t v188 = (int32x2_t)v183[3];
            int32x2_t v189 = vzip2_s32((int32x2_t)*v183, v186);
            int32x2_t v281 = vzip1_s32((int32x2_t)*v183, v186);
            int32x2_t v285 = v189;
            int32x2_t v289 = vzip1_s32(v187, v188);
            int32x2_t v293 = vzip2_s32(v187, v188);
            uint64_t v185 = 32;
          }
          else if (v84[2])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v281, 32, (uint64_t)v183, v184);
          }
          else
          {
            uint64_t v185 = 0;
            int32x2_t v281 = 0;
            int32x2_t v285 = 0;
            int32x2_t v289 = 0;
            int32x2_t v293 = 0;
          }
          uint64_t v190 = (int8x8_t *)((char *)v183 + v185);
          unsigned int v191 = v84[3];
          if (v191 == 96)
          {
            int32x2_t v282 = (int32x2_t)vdup_lane_s8(*v190, 0);
            int32x2_t v286 = v282;
            int32x2_t v290 = v282;
            int32x2_t v294 = v282;
            uint64_t v192 = 1;
          }
          else if (v191 == 31)
          {
            int32x2_t v193 = (int32x2_t)v190[1];
            int32x2_t v194 = (int32x2_t)v190[2];
            int32x2_t v195 = (int32x2_t)v190[3];
            int32x2_t v196 = vzip2_s32((int32x2_t)*v190, v193);
            int32x2_t v282 = vzip1_s32((int32x2_t)*v190, v193);
            int32x2_t v286 = v196;
            int32x2_t v290 = vzip1_s32(v194, v195);
            int32x2_t v294 = vzip2_s32(v194, v195);
            uint64_t v192 = 32;
          }
          else if (v84[3])
          {
            uint64_t v192 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v282, 32, (uint64_t)v190, v191);
          }
          else
          {
            uint64_t v192 = 0;
            int32x2_t v282 = 0;
            int32x2_t v286 = 0;
            int32x2_t v290 = 0;
            int32x2_t v294 = 0;
          }
          int8x8_t v197 = (int8x8_t *)((char *)v190 + v192);
          unsigned int v198 = v84[4];
          if (v198 == 96)
          {
            int32x2_t v267 = (int32x2_t)vdup_lane_s8(*v197, 0);
            int32x2_t v271 = v267;
            int32x2_t v275 = v267;
            int32x2_t v279 = v267;
            uint64_t v199 = 1;
          }
          else if (v198 == 31)
          {
            int32x2_t v200 = (int32x2_t)v197[1];
            int32x2_t v201 = (int32x2_t)v197[2];
            int32x2_t v202 = (int32x2_t)v197[3];
            int32x2_t v203 = vzip2_s32((int32x2_t)*v197, v200);
            int32x2_t v267 = vzip1_s32((int32x2_t)*v197, v200);
            int32x2_t v271 = v203;
            int32x2_t v275 = vzip1_s32(v201, v202);
            int32x2_t v279 = vzip2_s32(v201, v202);
            uint64_t v199 = 32;
          }
          else if (v84[4])
          {
            uint64_t v199 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v267, 32, (uint64_t)v197, v198);
          }
          else
          {
            uint64_t v199 = 0;
            int32x2_t v267 = 0;
            int32x2_t v271 = 0;
            int32x2_t v275 = 0;
            int32x2_t v279 = 0;
          }
          uint64_t v204 = (int8x8_t *)((char *)v197 + v199);
          unsigned int v205 = v84[5];
          if (v205 == 96)
          {
            int32x2_t v268 = (int32x2_t)vdup_lane_s8(*v204, 0);
            int32x2_t v272 = v268;
            int32x2_t v276 = v268;
            int32x2_t v280 = v268;
            uint64_t v206 = 1;
          }
          else if (v205 == 31)
          {
            int32x2_t v207 = (int32x2_t)v204[1];
            int32x2_t v208 = (int32x2_t)v204[2];
            int32x2_t v209 = (int32x2_t)v204[3];
            int32x2_t v210 = vzip2_s32((int32x2_t)*v204, v207);
            int32x2_t v268 = vzip1_s32((int32x2_t)*v204, v207);
            int32x2_t v272 = v210;
            int32x2_t v276 = vzip1_s32(v208, v209);
            int32x2_t v280 = vzip2_s32(v208, v209);
            uint64_t v206 = 32;
          }
          else if (v84[5])
          {
            uint64_t v206 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, (uint64_t)v204, v205);
          }
          else
          {
            uint64_t v206 = 0;
            int32x2_t v268 = 0;
            int32x2_t v272 = 0;
            int32x2_t v276 = 0;
            int32x2_t v280 = 0;
          }
          uint64_t v211 = (int8x8_t *)((char *)v204 + v206);
          unsigned int v212 = v84[6];
          if (v212 == 96)
          {
            int32x2_t v283 = (int32x2_t)vdup_lane_s8(*v211, 0);
            int32x2_t v287 = v283;
            int32x2_t v291 = v283;
            int32x2_t v295 = v283;
            uint64_t v213 = 1;
          }
          else if (v212 == 31)
          {
            int32x2_t v214 = (int32x2_t)v211[1];
            int32x2_t v215 = (int32x2_t)v211[2];
            int32x2_t v216 = (int32x2_t)v211[3];
            int32x2_t v217 = vzip2_s32((int32x2_t)*v211, v214);
            int32x2_t v283 = vzip1_s32((int32x2_t)*v211, v214);
            int32x2_t v287 = v217;
            int32x2_t v291 = vzip1_s32(v215, v216);
            int32x2_t v295 = vzip2_s32(v215, v216);
            uint64_t v213 = 32;
          }
          else if (v84[6])
          {
            uint64_t v213 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v283, 32, (uint64_t)v211, v212);
          }
          else
          {
            uint64_t v213 = 0;
            int32x2_t v283 = 0;
            int32x2_t v287 = 0;
            int32x2_t v291 = 0;
            int32x2_t v295 = 0;
          }
          unsigned int v218 = (int8x8_t *)((char *)v211 + v213);
          unsigned int v219 = v84[7];
          if (v219 == 96)
          {
            int32x2_t v284 = (int32x2_t)vdup_lane_s8(*v218, 0);
            int32x2_t v288 = v284;
            int32x2_t v292 = v284;
            int32x2_t v296 = v284;
          }
          else if (v219 == 31)
          {
            int32x2_t v220 = (int32x2_t)v218[1];
            int32x2_t v221 = (int32x2_t)v218[2];
            int32x2_t v222 = (int32x2_t)v218[3];
            int32x2_t v223 = vzip2_s32((int32x2_t)*v218, v220);
            int32x2_t v284 = vzip1_s32((int32x2_t)*v218, v220);
            int32x2_t v288 = v223;
            int32x2_t v292 = vzip1_s32(v221, v222);
            int32x2_t v296 = vzip2_s32(v221, v222);
          }
          else if (v84[7])
          {
            AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, (uint64_t)v218, v219);
          }
          else
          {
            int32x2_t v284 = 0;
            int32x2_t v288 = 0;
            int32x2_t v292 = 0;
            int32x2_t v296 = 0;
          }
          unint64_t v224 = v260;
          unsigned int v39 = v37 + 1;
          if (v260)
          {
            unint64_t v225 = 0;
            float64x2_t v226 = (char *)&v265 + 32 * v258 + 2 * v259;
            unsigned int v227 = v261;
            do
            {
              if (v227)
              {
                uint64_t v228 = 0;
                uint64_t v229 = v256 + v257 * v225;
                do
                {
                  *(unsigned char *)(v229 + v228) = v226[v228];
                  ++v228;
                  unsigned int v227 = v261;
                }
                while (2 * (unint64_t)v261 > v228);
                unint64_t v224 = v260;
              }
              ++v225;
              v226 += 32;
            }
            while (v225 < v224);
          }
LABEL_48:
          BOOL v21 = v37 == v245 >> 4;
          unsigned int v37 = v39;
        }
        while (!v21);
        BOOL v21 = v20++ == v234;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v300 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v255 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v237 = v17;
  unsigned int v239 = v17 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v249 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v239)
  {
    unsigned int v247 = a7 + a9 - 1;
    if (a7 >> 4 <= v247 >> 4)
    {
      unsigned int v234 = a5 - 1;
      unsigned int v236 = (a6 - 1) >> 3;
      int v256 = ((a5 - 1) & 0xF) + 1;
      int v235 = ((a6 - 1) & 7) + 1;
      uint64_t v240 = 4 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 4;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0xF00000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v28, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v28));
      __int32 v246 = v29.i32[0] | v29.i32[1];
      int8x8_t v245 = v29;
      BOOL v243 = v29.i32[1] != 0;
      BOOL v244 = v29.i32[0] != 0;
      unint64_t v233 = 8 * v20 * (unint64_t)v19;
      unsigned int v241 = v27;
      do
      {
        unsigned int v30 = (8 * v18) | 7;
        if (8 * v18 <= v255) {
          int v31 = v255;
        }
        else {
          int v31 = 8 * v18;
        }
        unsigned int v32 = a7 >> 4;
        if (v237 < v30) {
          unsigned int v30 = v237;
        }
        int v242 = v31 - 8 * v18;
        int v253 = v30 - v31 + 1;
        unsigned int v254 = 8 * v18;
        int v33 = v235;
        if (v18 != v236) {
          int v33 = 8;
        }
        unsigned int v257 = v33;
        uint64_t v252 = a2 + (v31 - v255) * a11;
        do
        {
          unsigned int v39 = 16 * v32;
          unsigned int v40 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v32;
          }
          if (v247 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v32 == v27) {
            unsigned int v43 = v256;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v254 >= v255 && v39 >= a7)
          {
            int v45 = v256;
            if (v32 != v27) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v253 != v257;
          }
          if (isLevelTiled)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v233 >> (*(unsigned char *)(a1 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v222 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v223 = 0;
            }
            else {
              unsigned int v223 = 32 - __clz(~(-1 << -(char)__clz(v222)));
            }
            unsigned int v224 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v225 = 0;
              if (v223) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v225 = 32 - __clz(~(-1 << -(char)__clz(v224)));
              if (v225 | v223)
              {
LABEL_229:
                int v226 = 0;
                uint64_t v227 = 0;
                int v228 = v32 & v222;
                int v229 = v18 & v224;
                BOOL v230 = v225 != 0;
                BOOL v231 = v223 != 0;
                int v232 = 1;
                do
                {
                  --v225;
                  if (v230) {
                    v227 |= (unint64_t)(v232 & v229) << v226++;
                  }
                  else {
                    unsigned int v225 = 0;
                  }
                  --v223;
                  if (v231) {
                    v227 |= (unint64_t)(v232 & v228) << v226++;
                  }
                  else {
                    unsigned int v223 = 0;
                  }
                  v232 *= 2;
                  --v226;
                  BOOL v231 = v223 != 0;
                  BOOL v230 = v225 != 0;
                }
                while (v223 | v225);
                goto LABEL_241;
              }
            }
            uint64_t v227 = 0;
LABEL_241:
            unint64_t v54 = ((unint64_t)(v39 / v66 + v254 / v70 * ((v66 + v234) / v66)) << 14) + (v227 << 8);
            goto LABEL_59;
          }
          if (v246)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v243;
            BOOL v51 = v244;
            __int32 v52 = v245.i32[0];
            __int32 v53 = v245.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v32) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_59:
          unsigned int v55 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_81:
              uint64_t v62 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_81;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v32) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_82:
          BOOL v71 = (_OWORD *)(a3 + v54);
          if (v249)
          {
            long long v72 = v71[13];
            v267[12] = v71[12];
            v267[13] = v72;
            long long v73 = v71[15];
            v267[14] = v71[14];
            v267[15] = v73;
            long long v74 = v71[9];
            v267[8] = v71[8];
            v267[9] = v74;
            long long v75 = v71[11];
            v267[10] = v71[10];
            v267[11] = v75;
            long long v76 = v71[5];
            v267[4] = v71[4];
            v267[5] = v76;
            long long v77 = v71[7];
            v267[6] = v71[6];
            v267[7] = v77;
            long long v78 = v71[1];
            v267[0] = *v71;
            v267[1] = v78;
            long long v79 = v71[2];
            long long v80 = v71[3];
            BOOL v71 = v267;
            v267[2] = v79;
            v267[3] = v80;
          }
          long long v81 = (unsigned __int8 *)(a4 + 8 * v62);
          long long v82 = (int32x2_t *)(v252 + 2 * (v41 - a7));
          char v83 = v43 < 0x10 || v44;
          if ((v83 & 1) != 0 || v257 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v71;
            char v265 = v43;
            char v266 = v257;
            int v261 = v242;
            unsigned int v262 = v41 - v39;
            block[6] = a4 + 8 * v62;
            uint64_t v259 = v252 + 2 * (v41 - a7);
            uint64_t v260 = a11;
            unsigned int v263 = v253;
            unsigned int v264 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v87 = *v81;
            if (v87 == 96)
            {
              int32x2_t v268 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v71, 0);
              int32x2_t v272 = v268;
              int32x2_t v276 = v268;
              int32x2_t v280 = v268;
              uint64_t v88 = 1;
            }
            else if (v87 == 31)
            {
              int32x2_t v164 = *(int32x2_t *)((char *)v71 + 8);
              int32x2_t v165 = (int32x2_t)v71[1];
              int32x2_t v166 = *(int32x2_t *)((char *)v71 + 24);
              int32x2_t v167 = vzip2_s32(*(int32x2_t *)v71, v164);
              int32x2_t v268 = vzip1_s32(*(int32x2_t *)v71, v164);
              int32x2_t v272 = v167;
              int32x2_t v276 = vzip1_s32(v165, v166);
              int32x2_t v280 = vzip2_s32(v165, v166);
              uint64_t v88 = 32;
            }
            else if (*v81)
            {
              uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, (uint64_t)v71, v87);
            }
            else
            {
              uint64_t v88 = 0;
              int32x2_t v268 = 0;
              int32x2_t v272 = 0;
              int32x2_t v276 = 0;
              int32x2_t v280 = 0;
            }
            int32x2_t v168 = (int8x8_t *)((char *)v71 + v88);
            unsigned int v169 = v81[1];
            if (v169 == 96)
            {
              int32x2_t v269 = (int32x2_t)vdup_lane_s8(*v168, 0);
              int32x2_t v273 = v269;
              int32x2_t v277 = v269;
              int32x2_t v281 = v269;
              uint64_t v170 = 1;
            }
            else if (v169 == 31)
            {
              int32x2_t v171 = (int32x2_t)v168[1];
              int32x2_t v172 = (int32x2_t)v168[2];
              int32x2_t v173 = (int32x2_t)v168[3];
              int32x2_t v174 = vzip2_s32((int32x2_t)*v168, v171);
              int32x2_t v269 = vzip1_s32((int32x2_t)*v168, v171);
              int32x2_t v273 = v174;
              int32x2_t v277 = vzip1_s32(v172, v173);
              int32x2_t v281 = vzip2_s32(v172, v173);
              uint64_t v170 = 32;
            }
            else if (v81[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, (uint64_t)v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int32x2_t v269 = 0;
              int32x2_t v273 = 0;
              int32x2_t v277 = 0;
              int32x2_t v281 = 0;
            }
            int32x2_t v175 = (int8x8_t *)((char *)v168 + v170);
            unsigned int v176 = v81[2];
            if (v176 == 96)
            {
              int32x2_t v284 = (int32x2_t)vdup_lane_s8(*v175, 0);
              int32x2_t v288 = v284;
              int32x2_t v292 = v284;
              int32x2_t v296 = v284;
              uint64_t v177 = 1;
            }
            else if (v176 == 31)
            {
              int32x2_t v178 = (int32x2_t)v175[1];
              int32x2_t v179 = (int32x2_t)v175[2];
              int32x2_t v180 = (int32x2_t)v175[3];
              int32x2_t v181 = vzip2_s32((int32x2_t)*v175, v178);
              int32x2_t v284 = vzip1_s32((int32x2_t)*v175, v178);
              int32x2_t v288 = v181;
              int32x2_t v292 = vzip1_s32(v179, v180);
              int32x2_t v296 = vzip2_s32(v179, v180);
              uint64_t v177 = 32;
            }
            else if (v81[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, (uint64_t)v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int32x2_t v284 = 0;
              int32x2_t v288 = 0;
              int32x2_t v292 = 0;
              int32x2_t v296 = 0;
            }
            int32x2_t v182 = (int8x8_t *)((char *)v175 + v177);
            unsigned int v183 = v81[3];
            if (v183 == 96)
            {
              int32x2_t v285 = (int32x2_t)vdup_lane_s8(*v182, 0);
              int32x2_t v289 = v285;
              int32x2_t v293 = v285;
              int32x2_t v297 = v285;
              uint64_t v184 = 1;
            }
            else if (v183 == 31)
            {
              int32x2_t v185 = (int32x2_t)v182[1];
              int32x2_t v186 = (int32x2_t)v182[2];
              int32x2_t v187 = (int32x2_t)v182[3];
              int32x2_t v188 = vzip2_s32((int32x2_t)*v182, v185);
              int32x2_t v285 = vzip1_s32((int32x2_t)*v182, v185);
              int32x2_t v289 = v188;
              int32x2_t v293 = vzip1_s32(v186, v187);
              int32x2_t v297 = vzip2_s32(v186, v187);
              uint64_t v184 = 32;
            }
            else if (v81[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 32, (uint64_t)v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int32x2_t v285 = 0;
              int32x2_t v289 = 0;
              int32x2_t v293 = 0;
              int32x2_t v297 = 0;
            }
            int32x2_t v189 = (int8x8_t *)((char *)v182 + v184);
            unsigned int v190 = v81[4];
            if (v190 == 96)
            {
              int32x2_t v270 = (int32x2_t)vdup_lane_s8(*v189, 0);
              int32x2_t v274 = v270;
              int32x2_t v278 = v270;
              int32x2_t v282 = v270;
              uint64_t v191 = 1;
            }
            else if (v190 == 31)
            {
              int32x2_t v192 = (int32x2_t)v189[1];
              int32x2_t v193 = (int32x2_t)v189[2];
              int32x2_t v194 = (int32x2_t)v189[3];
              int32x2_t v195 = vzip2_s32((int32x2_t)*v189, v192);
              int32x2_t v270 = vzip1_s32((int32x2_t)*v189, v192);
              int32x2_t v274 = v195;
              int32x2_t v278 = vzip1_s32(v193, v194);
              int32x2_t v282 = vzip2_s32(v193, v194);
              uint64_t v191 = 32;
            }
            else if (v81[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, (uint64_t)v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int32x2_t v270 = 0;
              int32x2_t v274 = 0;
              int32x2_t v278 = 0;
              int32x2_t v282 = 0;
            }
            int32x2_t v196 = (int8x8_t *)((char *)v189 + v191);
            unsigned int v197 = v81[5];
            if (v197 == 96)
            {
              int32x2_t v271 = (int32x2_t)vdup_lane_s8(*v196, 0);
              int32x2_t v275 = v271;
              int32x2_t v279 = v271;
              int32x2_t v283 = v271;
              uint64_t v198 = 1;
            }
            else if (v197 == 31)
            {
              int32x2_t v199 = (int32x2_t)v196[1];
              int32x2_t v200 = (int32x2_t)v196[2];
              int32x2_t v201 = (int32x2_t)v196[3];
              int32x2_t v202 = vzip2_s32((int32x2_t)*v196, v199);
              int32x2_t v271 = vzip1_s32((int32x2_t)*v196, v199);
              int32x2_t v275 = v202;
              int32x2_t v279 = vzip1_s32(v200, v201);
              int32x2_t v283 = vzip2_s32(v200, v201);
              uint64_t v198 = 32;
            }
            else if (v81[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, (uint64_t)v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int32x2_t v271 = 0;
              int32x2_t v275 = 0;
              int32x2_t v279 = 0;
              int32x2_t v283 = 0;
            }
            int32x2_t v203 = (int8x8_t *)((char *)v196 + v198);
            unsigned int v204 = v81[6];
            if (v204 == 96)
            {
              int32x2_t v286 = (int32x2_t)vdup_lane_s8(*v203, 0);
              int32x2_t v290 = v286;
              int32x2_t v294 = v286;
              int32x2_t v298 = v286;
              uint64_t v205 = 1;
            }
            else if (v204 == 31)
            {
              int32x2_t v206 = (int32x2_t)v203[1];
              int32x2_t v207 = (int32x2_t)v203[2];
              int32x2_t v208 = (int32x2_t)v203[3];
              int32x2_t v209 = vzip2_s32((int32x2_t)*v203, v206);
              int32x2_t v286 = vzip1_s32((int32x2_t)*v203, v206);
              int32x2_t v290 = v209;
              int32x2_t v294 = vzip1_s32(v207, v208);
              int32x2_t v298 = vzip2_s32(v207, v208);
              uint64_t v205 = 32;
            }
            else if (v81[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 32, (uint64_t)v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int32x2_t v286 = 0;
              int32x2_t v290 = 0;
              int32x2_t v294 = 0;
              int32x2_t v298 = 0;
            }
            int32x2_t v210 = (int8x8_t *)((char *)v203 + v205);
            unsigned int v211 = v81[7];
            if (v211 == 96)
            {
              int32x2_t v287 = (int32x2_t)vdup_lane_s8(*v210, 0);
              int32x2_t v291 = v287;
              int32x2_t v295 = v287;
              int32x2_t v299 = v287;
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else if (v211 == 31)
            {
              int32x2_t v213 = (int32x2_t)v210[1];
              int32x2_t v214 = (int32x2_t)v210[2];
              int32x2_t v215 = (int32x2_t)v210[3];
              int32x2_t v216 = vzip2_s32((int32x2_t)*v210, v213);
              int32x2_t v287 = vzip1_s32((int32x2_t)*v210, v213);
              int32x2_t v291 = v216;
              int32x2_t v295 = vzip1_s32(v214, v215);
              int32x2_t v299 = vzip2_s32(v214, v215);
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else if (v81[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v287, 32, (uint64_t)v210, v211);
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else
            {
              int32x2_t v287 = 0;
              int32x2_t v291 = 0;
              int32x2_t v295 = 0;
              int32x2_t v299 = 0;
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            unint64_t v217 = 0;
            unsigned int v218 = (char *)&v268 + 32 * v261 + 2 * v262;
            unsigned int v219 = v264;
            do
            {
              if (v219)
              {
                uint64_t v220 = 0;
                uint64_t v221 = v259 + v260 * v217;
                do
                {
                  *(unsigned char *)(v221 + v220) = v218[v220];
                  ++v220;
                  unsigned int v219 = v264;
                }
                while (2 * (unint64_t)v264 > v220);
                unint64_t v212 = v263;
              }
              ++v217;
              v218 += 32;
            }
            while (v217 < v212);
          }
          else
          {
            unsigned int v84 = *v81;
            if (v84 == 96)
            {
              int8x8_t v94 = vdup_lane_s8(*(int8x8_t *)v71, 0);
              *long long v82 = (int32x2_t)v94;
              *(int8x8_t *)((char *)v82 + a11) = v94;
              uint64_t v85 = 2 * a11;
              *(int8x8_t *)((char *)v82 + 2 * a11) = v94;
              *(int8x8_t *)((char *)v82 + 3 * a11) = v94;
              uint64_t v86 = 1;
            }
            else
            {
              uint64_t v85 = 2 * a11;
              if (v84 == 31)
              {
                int32x2_t v89 = *(int32x2_t *)v71;
                int32x2_t v90 = *(int32x2_t *)((char *)v71 + 8);
                int32x2_t v91 = (int32x2_t)v71[1];
                int32x2_t v92 = *(int32x2_t *)((char *)v71 + 24);
                *long long v82 = vzip1_s32(*(int32x2_t *)v71, v90);
                *(int32x2_t *)((char *)v82 + a11) = vzip2_s32(v89, v90);
                int32x2_t v93 = (int32x2_t *)((char *)v82 + 2 * a11);
                *int32x2_t v93 = vzip1_s32(v91, v92);
                *(int32x2_t *)((char *)v93 + a11) = vzip2_s32(v91, v92);
                uint64_t v86 = 32;
              }
              else if (*v81)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, a11, (uint64_t)v71, v84);
                uint64_t v85 = 2 * a11;
              }
              else
              {
                uint64_t v86 = 0;
                *long long v82 = 0;
                *(int32x2_t *)((char *)v82 + a11) = 0;
                *(int32x2_t *)((char *)v82 + 2 * a11) = 0;
                *(int32x2_t *)((char *)v82 + 3 * a11) = 0;
              }
            }
            int32x2_t v95 = (int8x8_t *)((char *)v71 + v86);
            unint64_t v96 = v82 + 1;
            unsigned int v97 = v81[1];
            if (v97 == 96)
            {
              int8x8_t v104 = vdup_lane_s8(*v95, 0);
              *unint64_t v96 = (int32x2_t)v104;
              *(int8x8_t *)((char *)v96 + a11) = v104;
              *(int8x8_t *)((char *)v96 + v85) = v104;
              *(int8x8_t *)((char *)v96 + 3 * a11) = v104;
              uint64_t v98 = 1;
            }
            else if (v97 == 31)
            {
              int32x2_t v99 = (int32x2_t)*v95;
              int32x2_t v100 = (int32x2_t)v95[1];
              int32x2_t v101 = (int32x2_t)v95[2];
              int32x2_t v102 = (int32x2_t)v95[3];
              *unint64_t v96 = vzip1_s32((int32x2_t)*v95, v100);
              *(int32x2_t *)((char *)v96 + a11) = vzip2_s32(v99, v100);
              int32x2_t v103 = (int32x2_t *)((char *)v96 + v85);
              *int32x2_t v103 = vzip1_s32(v101, v102);
              *(int32x2_t *)((char *)v103 + a11) = vzip2_s32(v101, v102);
              uint64_t v98 = 32;
            }
            else if (v81[1])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v96, a11, (uint64_t)v95, v97);
              uint64_t v85 = 2 * a11;
              uint64_t v98 = v105;
            }
            else
            {
              uint64_t v98 = 0;
              *unint64_t v96 = 0;
              *(int32x2_t *)((char *)v96 + a11) = 0;
              *(int32x2_t *)((char *)v96 + v85) = 0;
              *(int32x2_t *)((char *)v96 + 3 * a11) = 0;
            }
            unsigned int v106 = (int8x8_t *)((char *)v95 + v98);
            int8x8_t v107 = (int32x2_t *)((char *)v82 + v240);
            unsigned int v108 = v81[2];
            if (v108 == 96)
            {
              int8x8_t v115 = vdup_lane_s8(*v106, 0);
              *int8x8_t v107 = (int32x2_t)v115;
              *(int8x8_t *)((char *)v107 + a11) = v115;
              *(int8x8_t *)((char *)v107 + v85) = v115;
              *(int8x8_t *)((char *)v107 + 3 * a11) = v115;
              uint64_t v109 = 1;
            }
            else if (v108 == 31)
            {
              int32x2_t v110 = (int32x2_t)*v106;
              int32x2_t v111 = (int32x2_t)v106[1];
              int32x2_t v112 = (int32x2_t)v106[2];
              int32x2_t v113 = (int32x2_t)v106[3];
              *int8x8_t v107 = vzip1_s32((int32x2_t)*v106, v111);
              *(int32x2_t *)((char *)v107 + a11) = vzip2_s32(v110, v111);
              int32x2_t v114 = (int32x2_t *)((char *)v107 + v85);
              *int32x2_t v114 = vzip1_s32(v112, v113);
              *(int32x2_t *)((char *)v114 + a11) = vzip2_s32(v112, v113);
              uint64_t v109 = 32;
            }
            else if (v81[2])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x2_t *)((char *)v82 + v240), a11, (uint64_t)v106, v108);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v109 = 0;
              *int8x8_t v107 = 0;
              *(int32x2_t *)((char *)v107 + a11) = 0;
              *(int32x2_t *)((char *)v107 + v85) = 0;
              *(int32x2_t *)((char *)v107 + 3 * a11) = 0;
            }
            int32x2_t v116 = (int8x8_t *)((char *)v106 + v109);
            unint64_t v117 = v107 + 1;
            unsigned int v118 = v81[3];
            if (v118 == 96)
            {
              int8x8_t v125 = vdup_lane_s8(*v116, 0);
              *unint64_t v117 = (int32x2_t)v125;
              *(int8x8_t *)((char *)v117 + a11) = v125;
              *(int8x8_t *)((char *)v117 + v85) = v125;
              *(int8x8_t *)((char *)v117 + 3 * a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              int32x2_t v120 = (int32x2_t)*v116;
              int32x2_t v121 = (int32x2_t)v116[1];
              int32x2_t v122 = (int32x2_t)v116[2];
              int32x2_t v123 = (int32x2_t)v116[3];
              *unint64_t v117 = vzip1_s32((int32x2_t)*v116, v121);
              *(int32x2_t *)((char *)v117 + a11) = vzip2_s32(v120, v121);
              int32x2_t v124 = (int32x2_t *)((char *)v117 + v85);
              *int32x2_t v124 = vzip1_s32(v122, v123);
              *(int32x2_t *)((char *)v124 + a11) = vzip2_s32(v122, v123);
              uint64_t v119 = 32;
            }
            else if (v81[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, (uint64_t)v116, v118);
              uint64_t v85 = 2 * a11;
              uint64_t v119 = v126;
            }
            else
            {
              uint64_t v119 = 0;
              *unint64_t v117 = 0;
              *(int32x2_t *)((char *)v117 + a11) = 0;
              *(int32x2_t *)((char *)v117 + v85) = 0;
              *(int32x2_t *)((char *)v117 + 3 * a11) = 0;
            }
            int v127 = (int8x8_t *)((char *)v116 + v119);
            int8x8_t v128 = v82 + 2;
            unsigned int v129 = v81[4];
            if (v129 == 96)
            {
              int8x8_t v136 = vdup_lane_s8(*v127, 0);
              *int8x8_t v128 = (int32x2_t)v136;
              *(int8x8_t *)((char *)v128 + a11) = v136;
              *(int8x8_t *)((char *)v128 + v85) = v136;
              *(int8x8_t *)((char *)v128 + 3 * a11) = v136;
              uint64_t v130 = 1;
            }
            else if (v129 == 31)
            {
              int32x2_t v131 = (int32x2_t)*v127;
              int32x2_t v132 = (int32x2_t)v127[1];
              int32x2_t v133 = (int32x2_t)v127[2];
              int32x2_t v134 = (int32x2_t)v127[3];
              *int8x8_t v128 = vzip1_s32((int32x2_t)*v127, v132);
              *(int32x2_t *)((char *)v128 + a11) = vzip2_s32(v131, v132);
              int32x2_t v135 = (int32x2_t *)((char *)v128 + v85);
              *int32x2_t v135 = vzip1_s32(v133, v134);
              *(int32x2_t *)((char *)v135 + a11) = vzip2_s32(v133, v134);
              uint64_t v130 = 32;
            }
            else if (v81[4])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, a11, (uint64_t)v127, v129);
              uint64_t v85 = 2 * a11;
              uint64_t v130 = v137;
            }
            else
            {
              uint64_t v130 = 0;
              *int8x8_t v128 = 0;
              *(int32x2_t *)((char *)v128 + a11) = 0;
              *(int32x2_t *)((char *)v128 + v85) = 0;
              *(int32x2_t *)((char *)v128 + 3 * a11) = 0;
            }
            int v138 = (int8x8_t *)((char *)v127 + v130);
            int8x8_t v139 = v82 + 3;
            unsigned int v140 = v81[5];
            if (v140 == 96)
            {
              int8x8_t v147 = vdup_lane_s8(*v138, 0);
              *int8x8_t v139 = (int32x2_t)v147;
              *(int8x8_t *)((char *)v139 + a11) = v147;
              *(int8x8_t *)((char *)v139 + v85) = v147;
              *(int8x8_t *)((char *)v139 + 3 * a11) = v147;
              uint64_t v141 = 1;
            }
            else if (v140 == 31)
            {
              int32x2_t v142 = (int32x2_t)*v138;
              int32x2_t v143 = (int32x2_t)v138[1];
              int32x2_t v144 = (int32x2_t)v138[2];
              int32x2_t v145 = (int32x2_t)v138[3];
              *int8x8_t v139 = vzip1_s32((int32x2_t)*v138, v143);
              *(int32x2_t *)((char *)v139 + a11) = vzip2_s32(v142, v143);
              int32x2_t v146 = (int32x2_t *)((char *)v139 + v85);
              *int32x2_t v146 = vzip1_s32(v144, v145);
              *(int32x2_t *)((char *)v146 + a11) = vzip2_s32(v144, v145);
              uint64_t v141 = 32;
            }
            else if (v81[5])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v139, a11, (uint64_t)v138, v140);
              uint64_t v85 = 2 * a11;
              uint64_t v141 = v148;
            }
            else
            {
              uint64_t v141 = 0;
              *int8x8_t v139 = 0;
              *(int32x2_t *)((char *)v139 + a11) = 0;
              *(int32x2_t *)((char *)v139 + v85) = 0;
              *(int32x2_t *)((char *)v139 + 3 * a11) = 0;
            }
            unsigned int v149 = (int8x8_t *)((char *)v138 + v141);
            int8x8_t v150 = v107 + 2;
            unsigned int v151 = v81[6];
            if (v151 == 96)
            {
              int8x8_t v158 = vdup_lane_s8(*v149, 0);
              *int8x8_t v150 = (int32x2_t)v158;
              *(int8x8_t *)((char *)v150 + a11) = v158;
              *(int8x8_t *)((char *)v150 + v85) = v158;
              *(int8x8_t *)((char *)v150 + 3 * a11) = v158;
              uint64_t v152 = 1;
            }
            else if (v151 == 31)
            {
              int32x2_t v153 = (int32x2_t)*v149;
              int32x2_t v154 = (int32x2_t)v149[1];
              int32x2_t v155 = (int32x2_t)v149[2];
              int32x2_t v156 = (int32x2_t)v149[3];
              *int8x8_t v150 = vzip1_s32((int32x2_t)*v149, v154);
              *(int32x2_t *)((char *)v150 + a11) = vzip2_s32(v153, v154);
              int32x2_t v157 = (int32x2_t *)((char *)v150 + v85);
              *int32x2_t v157 = vzip1_s32(v155, v156);
              *(int32x2_t *)((char *)v157 + a11) = vzip2_s32(v155, v156);
              uint64_t v152 = 32;
            }
            else if (v81[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, a11, (uint64_t)v149, v151);
              uint64_t v85 = 2 * a11;
              uint64_t v152 = v159;
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0;
              *(int32x2_t *)((char *)v150 + a11) = 0;
              *(int32x2_t *)((char *)v150 + v85) = 0;
              *(int32x2_t *)((char *)v150 + 3 * a11) = 0;
            }
            uint64_t v160 = (int8x8_t *)((char *)v149 + v152);
            int8x8_t v161 = v107 + 3;
            unsigned int v162 = v81[7];
            if (v162 == 96)
            {
              int8x8_t v163 = vdup_lane_s8(*v160, 0);
              *int8x8_t v161 = (int32x2_t)v163;
              *(int8x8_t *)((char *)v161 + a11) = v163;
              *(int8x8_t *)((char *)v161 + v85) = v163;
              *(int8x8_t *)((char *)v161 + 3 * a11) = v163;
              unsigned int v27 = v241;
            }
            else
            {
              unsigned int v27 = v241;
              if (v162 == 31)
              {
                int32x2_t v34 = (int32x2_t)*v160;
                int32x2_t v35 = (int32x2_t)v160[1];
                int32x2_t v36 = (int32x2_t)v160[2];
                int32x2_t v37 = (int32x2_t)v160[3];
                *int8x8_t v161 = vzip1_s32((int32x2_t)*v160, v35);
                *(int32x2_t *)((char *)v161 + a11) = vzip2_s32(v34, v35);
                int v38 = (int32x2_t *)((char *)v161 + v85);
                *int v38 = vzip1_s32(v36, v37);
                *(int32x2_t *)((char *)v38 + a11) = vzip2_s32(v36, v37);
              }
              else if (v81[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, a11, (uint64_t)v160, v162);
              }
              else
              {
                *int8x8_t v161 = 0;
                *(int32x2_t *)((char *)v161 + a11) = 0;
                *(int32x2_t *)((char *)v161 + v85) = 0;
                *(int32x2_t *)((char *)v161 + 3 * a11) = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v247 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v239;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v300 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v17 = a8 + a10 - 1;
  unsigned int v255 = a8;
  unsigned int v18 = a8 >> 3;
  unsigned int v237 = v17;
  unsigned int v239 = v17 >> 3;
  unsigned int v19 = *(unsigned __int8 *)(*(void *)(a1 + 208) + 88);
  unsigned int v20 = *(_DWORD *)(a1 + 112);
  if (*(void *)(a1 + 168)) {
    int v21 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v21 = 0;
  }
  BOOL v22 = (v21 & 0xD00) == 0 || v21 == 768;
  int v23 = v21 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v249 = v25;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(a1, *(_DWORD *)(a1 + 144) + a12);
  if (v18 <= v239)
  {
    unsigned int v247 = a7 + a9 - 1;
    if (a7 >> 4 <= v247 >> 4)
    {
      unsigned int v234 = a5 - 1;
      unsigned int v236 = (a6 - 1) >> 3;
      int v256 = ((a5 - 1) & 0xF) + 1;
      int v235 = ((a6 - 1) & 7) + 1;
      uint64_t v240 = 4 * a11;
      int32x2_t v26 = (int32x2_t)__PAIR64__(a5, a6);
      unsigned int v27 = (a5 - 1) >> 4;
      uint32x2_t v28 = (uint32x2_t)vadd_s32(v26, (int32x2_t)0xF00000007);
      int8x8_t v29 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v28, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v28));
      __int32 v246 = v29.i32[0] | v29.i32[1];
      int8x8_t v245 = v29;
      BOOL v243 = v29.i32[1] != 0;
      BOOL v244 = v29.i32[0] != 0;
      unint64_t v233 = 8 * v20 * (unint64_t)v19;
      unsigned int v241 = v27;
      do
      {
        unsigned int v30 = (8 * v18) | 7;
        if (8 * v18 <= v255) {
          int v31 = v255;
        }
        else {
          int v31 = 8 * v18;
        }
        unsigned int v32 = a7 >> 4;
        if (v237 < v30) {
          unsigned int v30 = v237;
        }
        int v242 = v31 - 8 * v18;
        int v253 = v30 - v31 + 1;
        unsigned int v254 = 8 * v18;
        int v33 = v235;
        if (v18 != v236) {
          int v33 = 8;
        }
        unsigned int v257 = v33;
        uint64_t v252 = a2 + (v31 - v255) * a11;
        do
        {
          unsigned int v39 = 16 * v32;
          unsigned int v40 = 16 * (v32 + 1) - 1;
          if (16 * v32 <= a7) {
            int v41 = a7;
          }
          else {
            int v41 = 16 * v32;
          }
          if (v247 < v40) {
            unsigned int v40 = a7 + a9 - 1;
          }
          int v42 = v40 - v41 + 1;
          if (v32 == v27) {
            unsigned int v43 = v256;
          }
          else {
            unsigned int v43 = 16;
          }
          BOOL v44 = 1;
          if (v254 >= v255 && v39 >= a7)
          {
            int v45 = v256;
            if (v32 != v27) {
              int v45 = 16;
            }
            BOOL v44 = v42 != v45 || v253 != v257;
          }
          if (isLevelTiled)
          {
            unsigned int v66 = 0;
            uint64_t v67 = v233 >> (*(unsigned char *)(a1 + 57) != 0);
            char v68 = 1;
            if (v67 > 127)
            {
              if (v67 > 511)
              {
                if (v67 == 512)
                {
                  char v69 = 0;
                  unsigned int v66 = 16;
                  unsigned int v70 = 16;
                }
                else
                {
                  char v69 = 1;
                  unsigned int v70 = 0;
                  if (v67 == 1024)
                  {
                    unsigned int v70 = 8;
                    unsigned int v66 = 16;
                  }
                }
              }
              else if (v67 == 128)
              {
                char v68 = 0;
                char v69 = 0;
                unsigned int v66 = 32;
                unsigned int v70 = 32;
              }
              else
              {
                char v69 = 1;
                unsigned int v70 = 0;
                if (v67 == 256)
                {
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 16;
                  unsigned int v66 = 32;
                }
              }
            }
            else
            {
              char v69 = 1;
              unsigned int v70 = 0;
              switch(v67)
              {
                case 4:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 128;
                  unsigned int v66 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 128;
                  unsigned int v70 = 128;
                  break;
                case 16:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v70 = 64;
                  unsigned int v66 = 128;
                  break;
                case 32:
                  char v68 = 0;
                  char v69 = 0;
                  unsigned int v66 = 64;
                  unsigned int v70 = 64;
                  break;
                default:
                  if (v67 == 64)
                  {
                    char v68 = 0;
                    char v69 = 0;
                    unsigned int v70 = 32;
                    unsigned int v66 = 64;
                  }
                  break;
              }
            }
            unsigned int v222 = (v66 >> 4) - 1;
            if (v68) {
              unsigned int v223 = 0;
            }
            else {
              unsigned int v223 = 32 - __clz(~(-1 << -(char)__clz(v222)));
            }
            unsigned int v224 = (v70 >> 3) - 1;
            if (v69)
            {
              unsigned int v225 = 0;
              if (v223) {
                goto LABEL_229;
              }
            }
            else
            {
              unsigned int v225 = 32 - __clz(~(-1 << -(char)__clz(v224)));
              if (v225 | v223)
              {
LABEL_229:
                int v226 = 0;
                uint64_t v227 = 0;
                int v228 = v32 & v222;
                int v229 = v18 & v224;
                BOOL v230 = v225 != 0;
                BOOL v231 = v223 != 0;
                int v232 = 1;
                do
                {
                  --v225;
                  if (v230) {
                    v227 |= (unint64_t)(v232 & v229) << v226++;
                  }
                  else {
                    unsigned int v225 = 0;
                  }
                  --v223;
                  if (v231) {
                    v227 |= (unint64_t)(v232 & v228) << v226++;
                  }
                  else {
                    unsigned int v223 = 0;
                  }
                  v232 *= 2;
                  --v226;
                  BOOL v231 = v223 != 0;
                  BOOL v230 = v225 != 0;
                }
                while (v223 | v225);
                goto LABEL_241;
              }
            }
            uint64_t v227 = 0;
LABEL_241:
            unint64_t v54 = ((unint64_t)(v39 / v66 + v254 / v70 * ((v66 + v234) / v66)) << 14) + (v227 << 8);
            goto LABEL_59;
          }
          if (v246)
          {
            int v47 = 0;
            uint64_t v48 = 0;
            int v49 = 1;
            BOOL v50 = v243;
            BOOL v51 = v244;
            __int32 v52 = v245.i32[0];
            __int32 v53 = v245.i32[1];
            do
            {
              --v52;
              if (v51) {
                v48 |= (unint64_t)(v49 & v18) << v47++;
              }
              else {
                __int32 v52 = 0;
              }
              --v53;
              if (v50) {
                v48 |= (unint64_t)(v49 & v32) << v47++;
              }
              else {
                __int32 v53 = 0;
              }
              v49 *= 2;
              --v47;
              BOOL v50 = v53 != 0;
              BOOL v51 = v52 != 0;
            }
            while (v53 | v52);
          }
          else
          {
            uint64_t v48 = 0;
          }
          unint64_t v54 = v48 << 8;
LABEL_59:
          unsigned int v55 = *(_DWORD *)(a1 + 128) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v55 <= 1) {
            unsigned int v55 = 1;
          }
          unsigned int v56 = v55 + 15;
          if (v56 < 0x20) {
            unsigned int v57 = 0;
          }
          else {
            unsigned int v57 = 32 - __clz(~(-1 << -(char)__clz((v56 >> 4) - 1)));
          }
          unsigned int v58 = *(_DWORD *)(a1 + 132) >> (*(unsigned char *)(a1 + 144) + a12);
          if (v58 <= 1) {
            unsigned int v58 = 1;
          }
          unsigned int v59 = v58 + 7;
          if (v59 < 0x10)
          {
            unsigned int v60 = 0;
            if (!v57)
            {
LABEL_81:
              uint64_t v62 = 0;
              goto LABEL_82;
            }
          }
          else
          {
            unsigned int v60 = 32 - __clz(~(-1 << -(char)__clz((v59 >> 3) - 1)));
            if (!(v60 | v57)) {
              goto LABEL_81;
            }
          }
          int v61 = 0;
          uint64_t v62 = 0;
          BOOL v63 = v57 != 0;
          BOOL v64 = v60 != 0;
          int v65 = 1;
          do
          {
            --v57;
            if (v63) {
              v62 |= (unint64_t)(v65 & v32) << v61++;
            }
            else {
              unsigned int v57 = 0;
            }
            --v60;
            if (v64) {
              v62 |= (unint64_t)(v65 & v18) << v61++;
            }
            else {
              unsigned int v60 = 0;
            }
            v65 *= 2;
            --v61;
            BOOL v64 = v60 != 0;
            BOOL v63 = v57 != 0;
          }
          while (v60 | v57);
LABEL_82:
          BOOL v71 = (_OWORD *)(a3 + v54);
          if (v249)
          {
            long long v72 = v71[13];
            v267[12] = v71[12];
            v267[13] = v72;
            long long v73 = v71[15];
            v267[14] = v71[14];
            v267[15] = v73;
            long long v74 = v71[9];
            v267[8] = v71[8];
            v267[9] = v74;
            long long v75 = v71[11];
            v267[10] = v71[10];
            v267[11] = v75;
            long long v76 = v71[5];
            v267[4] = v71[4];
            v267[5] = v76;
            long long v77 = v71[7];
            v267[6] = v71[6];
            v267[7] = v77;
            long long v78 = v71[1];
            v267[0] = *v71;
            v267[1] = v78;
            long long v79 = v71[2];
            long long v80 = v71[3];
            BOOL v71 = v267;
            v267[2] = v79;
            v267[3] = v80;
          }
          long long v81 = (unsigned __int8 *)(a4 + 8 * v62);
          long long v82 = (int32x2_t *)(v252 + 2 * (v41 - a7));
          char v83 = v43 < 0x10 || v44;
          if ((v83 & 1) != 0 || v257 <= 7)
          {
            block[0] = MEMORY[0x263EF8330];
            block[1] = 3221225472;
            block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE0ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
            block[3] = &__block_descriptor_90_e5_v8__0l;
            block[4] = a1;
            block[5] = v71;
            char v265 = v43;
            char v266 = v257;
            int v261 = v242;
            unsigned int v262 = v41 - v39;
            block[6] = a4 + 8 * v62;
            uint64_t v259 = v252 + 2 * (v41 - a7);
            uint64_t v260 = a11;
            unsigned int v263 = v253;
            unsigned int v264 = v42;
            if (v44)
            {
              dispatch_sync(*(dispatch_queue_t *)(*(void *)(a1 + 8) + 7384), block);
              goto LABEL_27;
            }
            unsigned int v87 = *v81;
            if (v87 == 96)
            {
              int32x2_t v268 = (int32x2_t)vdup_lane_s8(*(int8x8_t *)v71, 0);
              int32x2_t v272 = v268;
              int32x2_t v276 = v268;
              int32x2_t v280 = v268;
              uint64_t v88 = 1;
            }
            else if (v87 == 31)
            {
              int32x2_t v164 = *(int32x2_t *)((char *)v71 + 8);
              int32x2_t v165 = (int32x2_t)v71[1];
              int32x2_t v166 = *(int32x2_t *)((char *)v71 + 24);
              int32x2_t v167 = vzip2_s32(*(int32x2_t *)v71, v164);
              int32x2_t v268 = vzip1_s32(*(int32x2_t *)v71, v164);
              int32x2_t v272 = v167;
              int32x2_t v276 = vzip1_s32(v165, v166);
              int32x2_t v280 = vzip2_s32(v165, v166);
              uint64_t v88 = 32;
            }
            else if (*v81)
            {
              uint64_t v88 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v268, 32, (uint64_t)v71, v87);
            }
            else
            {
              uint64_t v88 = 0;
              int32x2_t v268 = 0;
              int32x2_t v272 = 0;
              int32x2_t v276 = 0;
              int32x2_t v280 = 0;
            }
            int32x2_t v168 = (int8x8_t *)((char *)v71 + v88);
            unsigned int v169 = v81[1];
            if (v169 == 96)
            {
              int32x2_t v269 = (int32x2_t)vdup_lane_s8(*v168, 0);
              int32x2_t v273 = v269;
              int32x2_t v277 = v269;
              int32x2_t v281 = v269;
              uint64_t v170 = 1;
            }
            else if (v169 == 31)
            {
              int32x2_t v171 = (int32x2_t)v168[1];
              int32x2_t v172 = (int32x2_t)v168[2];
              int32x2_t v173 = (int32x2_t)v168[3];
              int32x2_t v174 = vzip2_s32((int32x2_t)*v168, v171);
              int32x2_t v269 = vzip1_s32((int32x2_t)*v168, v171);
              int32x2_t v273 = v174;
              int32x2_t v277 = vzip1_s32(v172, v173);
              int32x2_t v281 = vzip2_s32(v172, v173);
              uint64_t v170 = 32;
            }
            else if (v81[1])
            {
              uint64_t v170 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v269, 32, (uint64_t)v168, v169);
            }
            else
            {
              uint64_t v170 = 0;
              int32x2_t v269 = 0;
              int32x2_t v273 = 0;
              int32x2_t v277 = 0;
              int32x2_t v281 = 0;
            }
            int32x2_t v175 = (int8x8_t *)((char *)v168 + v170);
            unsigned int v176 = v81[2];
            if (v176 == 96)
            {
              int32x2_t v284 = (int32x2_t)vdup_lane_s8(*v175, 0);
              int32x2_t v288 = v284;
              int32x2_t v292 = v284;
              int32x2_t v296 = v284;
              uint64_t v177 = 1;
            }
            else if (v176 == 31)
            {
              int32x2_t v178 = (int32x2_t)v175[1];
              int32x2_t v179 = (int32x2_t)v175[2];
              int32x2_t v180 = (int32x2_t)v175[3];
              int32x2_t v181 = vzip2_s32((int32x2_t)*v175, v178);
              int32x2_t v284 = vzip1_s32((int32x2_t)*v175, v178);
              int32x2_t v288 = v181;
              int32x2_t v292 = vzip1_s32(v179, v180);
              int32x2_t v296 = vzip2_s32(v179, v180);
              uint64_t v177 = 32;
            }
            else if (v81[2])
            {
              uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v284, 32, (uint64_t)v175, v176);
            }
            else
            {
              uint64_t v177 = 0;
              int32x2_t v284 = 0;
              int32x2_t v288 = 0;
              int32x2_t v292 = 0;
              int32x2_t v296 = 0;
            }
            int32x2_t v182 = (int8x8_t *)((char *)v175 + v177);
            unsigned int v183 = v81[3];
            if (v183 == 96)
            {
              int32x2_t v285 = (int32x2_t)vdup_lane_s8(*v182, 0);
              int32x2_t v289 = v285;
              int32x2_t v293 = v285;
              int32x2_t v297 = v285;
              uint64_t v184 = 1;
            }
            else if (v183 == 31)
            {
              int32x2_t v185 = (int32x2_t)v182[1];
              int32x2_t v186 = (int32x2_t)v182[2];
              int32x2_t v187 = (int32x2_t)v182[3];
              int32x2_t v188 = vzip2_s32((int32x2_t)*v182, v185);
              int32x2_t v285 = vzip1_s32((int32x2_t)*v182, v185);
              int32x2_t v289 = v188;
              int32x2_t v293 = vzip1_s32(v186, v187);
              int32x2_t v297 = vzip2_s32(v186, v187);
              uint64_t v184 = 32;
            }
            else if (v81[3])
            {
              uint64_t v184 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v285, 32, (uint64_t)v182, v183);
            }
            else
            {
              uint64_t v184 = 0;
              int32x2_t v285 = 0;
              int32x2_t v289 = 0;
              int32x2_t v293 = 0;
              int32x2_t v297 = 0;
            }
            int32x2_t v189 = (int8x8_t *)((char *)v182 + v184);
            unsigned int v190 = v81[4];
            if (v190 == 96)
            {
              int32x2_t v270 = (int32x2_t)vdup_lane_s8(*v189, 0);
              int32x2_t v274 = v270;
              int32x2_t v278 = v270;
              int32x2_t v282 = v270;
              uint64_t v191 = 1;
            }
            else if (v190 == 31)
            {
              int32x2_t v192 = (int32x2_t)v189[1];
              int32x2_t v193 = (int32x2_t)v189[2];
              int32x2_t v194 = (int32x2_t)v189[3];
              int32x2_t v195 = vzip2_s32((int32x2_t)*v189, v192);
              int32x2_t v270 = vzip1_s32((int32x2_t)*v189, v192);
              int32x2_t v274 = v195;
              int32x2_t v278 = vzip1_s32(v193, v194);
              int32x2_t v282 = vzip2_s32(v193, v194);
              uint64_t v191 = 32;
            }
            else if (v81[4])
            {
              uint64_t v191 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v270, 32, (uint64_t)v189, v190);
            }
            else
            {
              uint64_t v191 = 0;
              int32x2_t v270 = 0;
              int32x2_t v274 = 0;
              int32x2_t v278 = 0;
              int32x2_t v282 = 0;
            }
            int32x2_t v196 = (int8x8_t *)((char *)v189 + v191);
            unsigned int v197 = v81[5];
            if (v197 == 96)
            {
              int32x2_t v271 = (int32x2_t)vdup_lane_s8(*v196, 0);
              int32x2_t v275 = v271;
              int32x2_t v279 = v271;
              int32x2_t v283 = v271;
              uint64_t v198 = 1;
            }
            else if (v197 == 31)
            {
              int32x2_t v199 = (int32x2_t)v196[1];
              int32x2_t v200 = (int32x2_t)v196[2];
              int32x2_t v201 = (int32x2_t)v196[3];
              int32x2_t v202 = vzip2_s32((int32x2_t)*v196, v199);
              int32x2_t v271 = vzip1_s32((int32x2_t)*v196, v199);
              int32x2_t v275 = v202;
              int32x2_t v279 = vzip1_s32(v200, v201);
              int32x2_t v283 = vzip2_s32(v200, v201);
              uint64_t v198 = 32;
            }
            else if (v81[5])
            {
              uint64_t v198 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v271, 32, (uint64_t)v196, v197);
            }
            else
            {
              uint64_t v198 = 0;
              int32x2_t v271 = 0;
              int32x2_t v275 = 0;
              int32x2_t v279 = 0;
              int32x2_t v283 = 0;
            }
            int32x2_t v203 = (int8x8_t *)((char *)v196 + v198);
            unsigned int v204 = v81[6];
            if (v204 == 96)
            {
              int32x2_t v286 = (int32x2_t)vdup_lane_s8(*v203, 0);
              int32x2_t v290 = v286;
              int32x2_t v294 = v286;
              int32x2_t v298 = v286;
              uint64_t v205 = 1;
            }
            else if (v204 == 31)
            {
              int32x2_t v206 = (int32x2_t)v203[1];
              int32x2_t v207 = (int32x2_t)v203[2];
              int32x2_t v208 = (int32x2_t)v203[3];
              int32x2_t v209 = vzip2_s32((int32x2_t)*v203, v206);
              int32x2_t v286 = vzip1_s32((int32x2_t)*v203, v206);
              int32x2_t v290 = v209;
              int32x2_t v294 = vzip1_s32(v207, v208);
              int32x2_t v298 = vzip2_s32(v207, v208);
              uint64_t v205 = 32;
            }
            else if (v81[6])
            {
              uint64_t v205 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v286, 32, (uint64_t)v203, v204);
            }
            else
            {
              uint64_t v205 = 0;
              int32x2_t v286 = 0;
              int32x2_t v290 = 0;
              int32x2_t v294 = 0;
              int32x2_t v298 = 0;
            }
            int32x2_t v210 = (int8x8_t *)((char *)v203 + v205);
            unsigned int v211 = v81[7];
            if (v211 == 96)
            {
              int32x2_t v287 = (int32x2_t)vdup_lane_s8(*v210, 0);
              int32x2_t v291 = v287;
              int32x2_t v295 = v287;
              int32x2_t v299 = v287;
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else if (v211 == 31)
            {
              int32x2_t v213 = (int32x2_t)v210[1];
              int32x2_t v214 = (int32x2_t)v210[2];
              int32x2_t v215 = (int32x2_t)v210[3];
              int32x2_t v216 = vzip2_s32((int32x2_t)*v210, v213);
              int32x2_t v287 = vzip1_s32((int32x2_t)*v210, v213);
              int32x2_t v291 = v216;
              int32x2_t v295 = vzip1_s32(v214, v215);
              int32x2_t v299 = vzip2_s32(v214, v215);
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else if (v81[7])
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v287, 32, (uint64_t)v210, v211);
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            else
            {
              int32x2_t v287 = 0;
              int32x2_t v291 = 0;
              int32x2_t v295 = 0;
              int32x2_t v299 = 0;
              unint64_t v212 = v263;
              if (!v263) {
                goto LABEL_27;
              }
            }
            unint64_t v217 = 0;
            unsigned int v218 = (char *)&v268 + 32 * v261 + 2 * v262;
            unsigned int v219 = v264;
            do
            {
              if (v219)
              {
                uint64_t v220 = 0;
                uint64_t v221 = v259 + v260 * v217;
                do
                {
                  *(unsigned char *)(v221 + v220) = v218[v220];
                  ++v220;
                  unsigned int v219 = v264;
                }
                while (2 * (unint64_t)v264 > v220);
                unint64_t v212 = v263;
              }
              ++v217;
              v218 += 32;
            }
            while (v217 < v212);
          }
          else
          {
            unsigned int v84 = *v81;
            if (v84 == 96)
            {
              int8x8_t v94 = vdup_lane_s8(*(int8x8_t *)v71, 0);
              *long long v82 = (int32x2_t)v94;
              *(int8x8_t *)((char *)v82 + a11) = v94;
              uint64_t v85 = 2 * a11;
              *(int8x8_t *)((char *)v82 + 2 * a11) = v94;
              *(int8x8_t *)((char *)v82 + 3 * a11) = v94;
              uint64_t v86 = 1;
            }
            else
            {
              uint64_t v85 = 2 * a11;
              if (v84 == 31)
              {
                int32x2_t v89 = *(int32x2_t *)v71;
                int32x2_t v90 = *(int32x2_t *)((char *)v71 + 8);
                int32x2_t v91 = (int32x2_t)v71[1];
                int32x2_t v92 = *(int32x2_t *)((char *)v71 + 24);
                *long long v82 = vzip1_s32(*(int32x2_t *)v71, v90);
                *(int32x2_t *)((char *)v82 + a11) = vzip2_s32(v89, v90);
                int32x2_t v93 = (int32x2_t *)((char *)v82 + 2 * a11);
                *int32x2_t v93 = vzip1_s32(v91, v92);
                *(int32x2_t *)((char *)v93 + a11) = vzip2_s32(v91, v92);
                uint64_t v86 = 32;
              }
              else if (*v81)
              {
                uint64_t v86 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v82, a11, (uint64_t)v71, v84);
                uint64_t v85 = 2 * a11;
              }
              else
              {
                uint64_t v86 = 0;
                *long long v82 = 0;
                *(int32x2_t *)((char *)v82 + a11) = 0;
                *(int32x2_t *)((char *)v82 + 2 * a11) = 0;
                *(int32x2_t *)((char *)v82 + 3 * a11) = 0;
              }
            }
            int32x2_t v95 = (int8x8_t *)((char *)v71 + v86);
            unint64_t v96 = v82 + 1;
            unsigned int v97 = v81[1];
            if (v97 == 96)
            {
              int8x8_t v104 = vdup_lane_s8(*v95, 0);
              *unint64_t v96 = (int32x2_t)v104;
              *(int8x8_t *)((char *)v96 + a11) = v104;
              *(int8x8_t *)((char *)v96 + v85) = v104;
              *(int8x8_t *)((char *)v96 + 3 * a11) = v104;
              uint64_t v98 = 1;
            }
            else if (v97 == 31)
            {
              int32x2_t v99 = (int32x2_t)*v95;
              int32x2_t v100 = (int32x2_t)v95[1];
              int32x2_t v101 = (int32x2_t)v95[2];
              int32x2_t v102 = (int32x2_t)v95[3];
              *unint64_t v96 = vzip1_s32((int32x2_t)*v95, v100);
              *(int32x2_t *)((char *)v96 + a11) = vzip2_s32(v99, v100);
              int32x2_t v103 = (int32x2_t *)((char *)v96 + v85);
              *int32x2_t v103 = vzip1_s32(v101, v102);
              *(int32x2_t *)((char *)v103 + a11) = vzip2_s32(v101, v102);
              uint64_t v98 = 32;
            }
            else if (v81[1])
            {
              uint64_t v105 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v96, a11, (uint64_t)v95, v97);
              uint64_t v85 = 2 * a11;
              uint64_t v98 = v105;
            }
            else
            {
              uint64_t v98 = 0;
              *unint64_t v96 = 0;
              *(int32x2_t *)((char *)v96 + a11) = 0;
              *(int32x2_t *)((char *)v96 + v85) = 0;
              *(int32x2_t *)((char *)v96 + 3 * a11) = 0;
            }
            unsigned int v106 = (int8x8_t *)((char *)v95 + v98);
            int8x8_t v107 = (int32x2_t *)((char *)v82 + v240);
            unsigned int v108 = v81[2];
            if (v108 == 96)
            {
              int8x8_t v115 = vdup_lane_s8(*v106, 0);
              *int8x8_t v107 = (int32x2_t)v115;
              *(int8x8_t *)((char *)v107 + a11) = v115;
              *(int8x8_t *)((char *)v107 + v85) = v115;
              *(int8x8_t *)((char *)v107 + 3 * a11) = v115;
              uint64_t v109 = 1;
            }
            else if (v108 == 31)
            {
              int32x2_t v110 = (int32x2_t)*v106;
              int32x2_t v111 = (int32x2_t)v106[1];
              int32x2_t v112 = (int32x2_t)v106[2];
              int32x2_t v113 = (int32x2_t)v106[3];
              *int8x8_t v107 = vzip1_s32((int32x2_t)*v106, v111);
              *(int32x2_t *)((char *)v107 + a11) = vzip2_s32(v110, v111);
              int32x2_t v114 = (int32x2_t *)((char *)v107 + v85);
              *int32x2_t v114 = vzip1_s32(v112, v113);
              *(int32x2_t *)((char *)v114 + a11) = vzip2_s32(v112, v113);
              uint64_t v109 = 32;
            }
            else if (v81[2])
            {
              uint64_t v109 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int32x2_t *)((char *)v82 + v240), a11, (uint64_t)v106, v108);
              uint64_t v85 = 2 * a11;
            }
            else
            {
              uint64_t v109 = 0;
              *int8x8_t v107 = 0;
              *(int32x2_t *)((char *)v107 + a11) = 0;
              *(int32x2_t *)((char *)v107 + v85) = 0;
              *(int32x2_t *)((char *)v107 + 3 * a11) = 0;
            }
            int32x2_t v116 = (int8x8_t *)((char *)v106 + v109);
            unint64_t v117 = v107 + 1;
            unsigned int v118 = v81[3];
            if (v118 == 96)
            {
              int8x8_t v125 = vdup_lane_s8(*v116, 0);
              *unint64_t v117 = (int32x2_t)v125;
              *(int8x8_t *)((char *)v117 + a11) = v125;
              *(int8x8_t *)((char *)v117 + v85) = v125;
              *(int8x8_t *)((char *)v117 + 3 * a11) = v125;
              uint64_t v119 = 1;
            }
            else if (v118 == 31)
            {
              int32x2_t v120 = (int32x2_t)*v116;
              int32x2_t v121 = (int32x2_t)v116[1];
              int32x2_t v122 = (int32x2_t)v116[2];
              int32x2_t v123 = (int32x2_t)v116[3];
              *unint64_t v117 = vzip1_s32((int32x2_t)*v116, v121);
              *(int32x2_t *)((char *)v117 + a11) = vzip2_s32(v120, v121);
              int32x2_t v124 = (int32x2_t *)((char *)v117 + v85);
              *int32x2_t v124 = vzip1_s32(v122, v123);
              *(int32x2_t *)((char *)v124 + a11) = vzip2_s32(v122, v123);
              uint64_t v119 = 32;
            }
            else if (v81[3])
            {
              uint64_t v126 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v117, a11, (uint64_t)v116, v118);
              uint64_t v85 = 2 * a11;
              uint64_t v119 = v126;
            }
            else
            {
              uint64_t v119 = 0;
              *unint64_t v117 = 0;
              *(int32x2_t *)((char *)v117 + a11) = 0;
              *(int32x2_t *)((char *)v117 + v85) = 0;
              *(int32x2_t *)((char *)v117 + 3 * a11) = 0;
            }
            int v127 = (int8x8_t *)((char *)v116 + v119);
            int8x8_t v128 = v82 + 2;
            unsigned int v129 = v81[4];
            if (v129 == 96)
            {
              int8x8_t v136 = vdup_lane_s8(*v127, 0);
              *int8x8_t v128 = (int32x2_t)v136;
              *(int8x8_t *)((char *)v128 + a11) = v136;
              *(int8x8_t *)((char *)v128 + v85) = v136;
              *(int8x8_t *)((char *)v128 + 3 * a11) = v136;
              uint64_t v130 = 1;
            }
            else if (v129 == 31)
            {
              int32x2_t v131 = (int32x2_t)*v127;
              int32x2_t v132 = (int32x2_t)v127[1];
              int32x2_t v133 = (int32x2_t)v127[2];
              int32x2_t v134 = (int32x2_t)v127[3];
              *int8x8_t v128 = vzip1_s32((int32x2_t)*v127, v132);
              *(int32x2_t *)((char *)v128 + a11) = vzip2_s32(v131, v132);
              int32x2_t v135 = (int32x2_t *)((char *)v128 + v85);
              *int32x2_t v135 = vzip1_s32(v133, v134);
              *(int32x2_t *)((char *)v135 + a11) = vzip2_s32(v133, v134);
              uint64_t v130 = 32;
            }
            else if (v81[4])
            {
              uint64_t v137 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v128, a11, (uint64_t)v127, v129);
              uint64_t v85 = 2 * a11;
              uint64_t v130 = v137;
            }
            else
            {
              uint64_t v130 = 0;
              *int8x8_t v128 = 0;
              *(int32x2_t *)((char *)v128 + a11) = 0;
              *(int32x2_t *)((char *)v128 + v85) = 0;
              *(int32x2_t *)((char *)v128 + 3 * a11) = 0;
            }
            int v138 = (int8x8_t *)((char *)v127 + v130);
            int8x8_t v139 = v82 + 3;
            unsigned int v140 = v81[5];
            if (v140 == 96)
            {
              int8x8_t v147 = vdup_lane_s8(*v138, 0);
              *int8x8_t v139 = (int32x2_t)v147;
              *(int8x8_t *)((char *)v139 + a11) = v147;
              *(int8x8_t *)((char *)v139 + v85) = v147;
              *(int8x8_t *)((char *)v139 + 3 * a11) = v147;
              uint64_t v141 = 1;
            }
            else if (v140 == 31)
            {
              int32x2_t v142 = (int32x2_t)*v138;
              int32x2_t v143 = (int32x2_t)v138[1];
              int32x2_t v144 = (int32x2_t)v138[2];
              int32x2_t v145 = (int32x2_t)v138[3];
              *int8x8_t v139 = vzip1_s32((int32x2_t)*v138, v143);
              *(int32x2_t *)((char *)v139 + a11) = vzip2_s32(v142, v143);
              int32x2_t v146 = (int32x2_t *)((char *)v139 + v85);
              *int32x2_t v146 = vzip1_s32(v144, v145);
              *(int32x2_t *)((char *)v146 + a11) = vzip2_s32(v144, v145);
              uint64_t v141 = 32;
            }
            else if (v81[5])
            {
              uint64_t v148 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v139, a11, (uint64_t)v138, v140);
              uint64_t v85 = 2 * a11;
              uint64_t v141 = v148;
            }
            else
            {
              uint64_t v141 = 0;
              *int8x8_t v139 = 0;
              *(int32x2_t *)((char *)v139 + a11) = 0;
              *(int32x2_t *)((char *)v139 + v85) = 0;
              *(int32x2_t *)((char *)v139 + 3 * a11) = 0;
            }
            unsigned int v149 = (int8x8_t *)((char *)v138 + v141);
            int8x8_t v150 = v107 + 2;
            unsigned int v151 = v81[6];
            if (v151 == 96)
            {
              int8x8_t v158 = vdup_lane_s8(*v149, 0);
              *int8x8_t v150 = (int32x2_t)v158;
              *(int8x8_t *)((char *)v150 + a11) = v158;
              *(int8x8_t *)((char *)v150 + v85) = v158;
              *(int8x8_t *)((char *)v150 + 3 * a11) = v158;
              uint64_t v152 = 1;
            }
            else if (v151 == 31)
            {
              int32x2_t v153 = (int32x2_t)*v149;
              int32x2_t v154 = (int32x2_t)v149[1];
              int32x2_t v155 = (int32x2_t)v149[2];
              int32x2_t v156 = (int32x2_t)v149[3];
              *int8x8_t v150 = vzip1_s32((int32x2_t)*v149, v154);
              *(int32x2_t *)((char *)v150 + a11) = vzip2_s32(v153, v154);
              int32x2_t v157 = (int32x2_t *)((char *)v150 + v85);
              *int32x2_t v157 = vzip1_s32(v155, v156);
              *(int32x2_t *)((char *)v157 + a11) = vzip2_s32(v155, v156);
              uint64_t v152 = 32;
            }
            else if (v81[6])
            {
              uint64_t v159 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, a11, (uint64_t)v149, v151);
              uint64_t v85 = 2 * a11;
              uint64_t v152 = v159;
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0;
              *(int32x2_t *)((char *)v150 + a11) = 0;
              *(int32x2_t *)((char *)v150 + v85) = 0;
              *(int32x2_t *)((char *)v150 + 3 * a11) = 0;
            }
            uint64_t v160 = (int8x8_t *)((char *)v149 + v152);
            int8x8_t v161 = v107 + 3;
            unsigned int v162 = v81[7];
            if (v162 == 96)
            {
              int8x8_t v163 = vdup_lane_s8(*v160, 0);
              *int8x8_t v161 = (int32x2_t)v163;
              *(int8x8_t *)((char *)v161 + a11) = v163;
              *(int8x8_t *)((char *)v161 + v85) = v163;
              *(int8x8_t *)((char *)v161 + 3 * a11) = v163;
              unsigned int v27 = v241;
            }
            else
            {
              unsigned int v27 = v241;
              if (v162 == 31)
              {
                int32x2_t v34 = (int32x2_t)*v160;
                int32x2_t v35 = (int32x2_t)v160[1];
                int32x2_t v36 = (int32x2_t)v160[2];
                int32x2_t v37 = (int32x2_t)v160[3];
                *int8x8_t v161 = vzip1_s32((int32x2_t)*v160, v35);
                *(int32x2_t *)((char *)v161 + a11) = vzip2_s32(v34, v35);
                int v38 = (int32x2_t *)((char *)v161 + v85);
                *int v38 = vzip1_s32(v36, v37);
                *(int32x2_t *)((char *)v38 + a11) = vzip2_s32(v36, v37);
              }
              else if (v81[7])
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)0,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v161, a11, (uint64_t)v160, v162);
              }
              else
              {
                *int8x8_t v161 = 0;
                *(int32x2_t *)((char *)v161 + a11) = 0;
                *(int32x2_t *)((char *)v161 + v85) = 0;
                *(int32x2_t *)((char *)v161 + 3 * a11) = 0;
              }
            }
          }
LABEL_27:
          BOOL v22 = v32++ == v247 >> 4;
        }
        while (!v22);
        BOOL v22 = v18++ == v239;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          long long v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            long long v78 = __dst;
          }
          long long v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              int8x8_t v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              uint64_t v105 = (_OWORD *)(v83 + a11);
              *uint64_t v105 = v97;
              v105[1] = v99;
              *int8x8_t v104 = v103;
              v104[1] = v101;
              unsigned int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                int8x8_t v94 = (float32x4_t *)(v83 + a11);
                *int8x8_t v94 = v93;
                v94[1] = v93;
                int32x2_t v95 = (float32x4_t *)(v83 + v351);
                *int32x2_t v95 = v93;
                v95[1] = v93;
                unint64_t v96 = (float32x4_t *)(v83 + v350);
                *unint64_t v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                *uint64_t v88 = 0u;
                v88[1] = 0u;
                int32x2_t v89 = (_OWORD *)(v83 + v351);
                *int32x2_t v89 = 0u;
                v89[1] = 0u;
                int32x2_t v90 = (_OWORD *)(v83 + v350);
                *int32x2_t v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            unsigned int v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              *unsigned int v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              int8x8_t v125 = &v108->i8[v86];
              uint64_t v126 = &v108->i8[v32];
              *(_OWORD *)uint64_t v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)int8x8_t v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int8x8_t v115 = (float32x4_t *)&v108->i8[v32];
              *int8x8_t v115 = v114;
              v115[1] = v114;
              int32x2_t v116 = (float32x4_t *)&v108->i8[v86];
              *int32x2_t v116 = v114;
              v116[1] = v114;
              unint64_t v117 = (float32x4_t *)&v108->i8[v350];
              *unint64_t v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              *unsigned int v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              int32x2_t v111 = &v108->i8[v32];
              *(_OWORD *)int32x2_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              int32x2_t v112 = &v108->i8[v86];
              *(_OWORD *)int32x2_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int32x2_t v113 = &v108->i8[v350];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            unsigned int v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *unsigned int v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              int32x2_t v146 = &v129->i8[v86];
              int8x8_t v147 = &v129->i8[v32];
              *(_OWORD *)int8x8_t v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)int32x2_t v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *unsigned int v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int8x8_t v136 = (float32x4_t *)&v129->i8[v32];
              *int8x8_t v136 = v135;
              v136[1] = v135;
              uint64_t v137 = (float32x4_t *)&v129->i8[v86];
              *uint64_t v137 = v135;
              v137[1] = v135;
              int v138 = (float32x4_t *)&v129->i8[v350];
              *int v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *unsigned int v129 = 0u;
              v129[1] = 0u;
              int32x2_t v132 = &v129->i8[v32];
              *(_OWORD *)int32x2_t v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              int32x2_t v133 = &v129->i8[v86];
              *(_OWORD *)int32x2_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int32x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int8x8_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              *int8x8_t v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              int32x2_t v167 = &v150->i8[v86];
              int32x2_t v168 = &v150->i8[v32];
              *(_OWORD *)int32x2_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)int32x2_t v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int32x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int32x2_t v157 = v156;
              v157[1] = v156;
              int8x8_t v158 = (float32x4_t *)&v150->i8[v86];
              *int8x8_t v158 = v156;
              v158[1] = v156;
              uint64_t v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0u;
              v129[3] = 0u;
              int32x2_t v153 = &v150->i8[v32];
              *(_OWORD *)int32x2_t v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              int32x2_t v154 = &v150->i8[v86];
              *(_OWORD *)int32x2_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              int32x2_t v155 = &v150->i8[v350];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int32x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              *int32x2_t v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              int32x2_t v188 = &v171->i8[v86];
              int32x2_t v189 = &v171->i8[v32];
              *(_OWORD *)int32x2_t v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)int32x2_t v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int32x2_t v178 = (float32x4_t *)&v171->i8[v32];
              *int32x2_t v178 = v177;
              v178[1] = v177;
              int32x2_t v179 = (float32x4_t *)&v171->i8[v86];
              *int32x2_t v179 = v177;
              v179[1] = v177;
              int32x2_t v180 = (float32x4_t *)&v171->i8[v350];
              float32x4_t *v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              *int32x2_t v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              int32x2_t v174 = &v171->i8[v32];
              *(_OWORD *)int32x2_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              int32x2_t v175 = &v171->i8[v86];
              *(_OWORD *)int32x2_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int32x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int32x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              int32x2_t v209 = &v192->i8[v86];
              int32x2_t v210 = &v192->i8[v32];
              *(_OWORD *)int32x2_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)int32x2_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int32x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int32x2_t v199 = v198;
              v199[1] = v198;
              int32x2_t v200 = (float32x4_t *)&v192->i8[v86];
              *int32x2_t v200 = v198;
              v200[1] = v198;
              int32x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int32x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int32x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int32x2_t v195 = &v192->i8[v32];
              *(_OWORD *)int32x2_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              int32x2_t v196 = &v192->i8[v86];
              *(_OWORD *)int32x2_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int32x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int32x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              BOOL v230 = &v213->i8[v86];
              BOOL v231 = &v213->i8[v32];
              *(_OWORD *)BOOL v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)BOOL v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              int v232 = &v213->i8[v86 + v32];
              *(_OWORD *)int v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              *uint64_t v220 = v219;
              v220[1] = v219;
              uint64_t v221 = (float32x4_t *)&v213->i8[v86];
              *uint64_t v221 = v219;
              v221[1] = v219;
              unsigned int v222 = (float32x4_t *)&v213->i8[v350];
              *unsigned int v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int32x2_t v213 = 0u;
              v129[5] = 0u;
              int32x2_t v216 = &v213->i8[v32];
              *(_OWORD *)int32x2_t v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unint64_t v217 = &v213->i8[v86];
              *(_OWORD *)unint64_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              unsigned int v218 = &v213->i8[v350];
              *(_OWORD *)unsigned int v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            unsigned int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *unsigned int v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              unsigned int v247 = &v234->i8[v86];
              float64x2_t v248 = &v234->i8[v32];
              *(_OWORD *)float64x2_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)unsigned int v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                unsigned int v237 = (float32x4_t *)&v234->i8[v32];
                *unsigned int v237 = v236;
                v237[1] = v236;
                int8x8_t v238 = (float32x4_t *)&v234->i8[v86];
                *int8x8_t v238 = v236;
                v238[1] = v236;
                unsigned int v239 = (float32x4_t *)&v234->i8[v350];
                *unsigned int v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *unsigned int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            float64x2_t v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          long long v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            long long v78 = __dst;
          }
          long long v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              int8x8_t v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              uint64_t v105 = (_OWORD *)(v83 + a11);
              *uint64_t v105 = v97;
              v105[1] = v99;
              *int8x8_t v104 = v103;
              v104[1] = v101;
              unsigned int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                int8x8_t v94 = (float32x4_t *)(v83 + a11);
                *int8x8_t v94 = v93;
                v94[1] = v93;
                int32x2_t v95 = (float32x4_t *)(v83 + v351);
                *int32x2_t v95 = v93;
                v95[1] = v93;
                unint64_t v96 = (float32x4_t *)(v83 + v350);
                *unint64_t v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                *uint64_t v88 = 0u;
                v88[1] = 0u;
                int32x2_t v89 = (_OWORD *)(v83 + v351);
                *int32x2_t v89 = 0u;
                v89[1] = 0u;
                int32x2_t v90 = (_OWORD *)(v83 + v350);
                *int32x2_t v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            unsigned int v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              *unsigned int v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              int8x8_t v125 = &v108->i8[v86];
              uint64_t v126 = &v108->i8[v32];
              *(_OWORD *)uint64_t v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)int8x8_t v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int8x8_t v115 = (float32x4_t *)&v108->i8[v32];
              *int8x8_t v115 = v114;
              v115[1] = v114;
              int32x2_t v116 = (float32x4_t *)&v108->i8[v86];
              *int32x2_t v116 = v114;
              v116[1] = v114;
              unint64_t v117 = (float32x4_t *)&v108->i8[v350];
              *unint64_t v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              *unsigned int v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              int32x2_t v111 = &v108->i8[v32];
              *(_OWORD *)int32x2_t v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              int32x2_t v112 = &v108->i8[v86];
              *(_OWORD *)int32x2_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int32x2_t v113 = &v108->i8[v350];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            unsigned int v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *unsigned int v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              int32x2_t v146 = &v129->i8[v86];
              int8x8_t v147 = &v129->i8[v32];
              *(_OWORD *)int8x8_t v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)int32x2_t v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *unsigned int v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int8x8_t v136 = (float32x4_t *)&v129->i8[v32];
              *int8x8_t v136 = v135;
              v136[1] = v135;
              uint64_t v137 = (float32x4_t *)&v129->i8[v86];
              *uint64_t v137 = v135;
              v137[1] = v135;
              int v138 = (float32x4_t *)&v129->i8[v350];
              *int v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *unsigned int v129 = 0u;
              v129[1] = 0u;
              int32x2_t v132 = &v129->i8[v32];
              *(_OWORD *)int32x2_t v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              int32x2_t v133 = &v129->i8[v86];
              *(_OWORD *)int32x2_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int32x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int8x8_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              *int8x8_t v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              int32x2_t v167 = &v150->i8[v86];
              int32x2_t v168 = &v150->i8[v32];
              *(_OWORD *)int32x2_t v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)int32x2_t v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int32x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int32x2_t v157 = v156;
              v157[1] = v156;
              int8x8_t v158 = (float32x4_t *)&v150->i8[v86];
              *int8x8_t v158 = v156;
              v158[1] = v156;
              uint64_t v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0u;
              v129[3] = 0u;
              int32x2_t v153 = &v150->i8[v32];
              *(_OWORD *)int32x2_t v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              int32x2_t v154 = &v150->i8[v86];
              *(_OWORD *)int32x2_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              int32x2_t v155 = &v150->i8[v350];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int32x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              *int32x2_t v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              int32x2_t v188 = &v171->i8[v86];
              int32x2_t v189 = &v171->i8[v32];
              *(_OWORD *)int32x2_t v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)int32x2_t v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int32x2_t v178 = (float32x4_t *)&v171->i8[v32];
              *int32x2_t v178 = v177;
              v178[1] = v177;
              int32x2_t v179 = (float32x4_t *)&v171->i8[v86];
              *int32x2_t v179 = v177;
              v179[1] = v177;
              int32x2_t v180 = (float32x4_t *)&v171->i8[v350];
              float32x4_t *v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              *int32x2_t v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              int32x2_t v174 = &v171->i8[v32];
              *(_OWORD *)int32x2_t v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              int32x2_t v175 = &v171->i8[v86];
              *(_OWORD *)int32x2_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int32x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int32x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              int32x2_t v209 = &v192->i8[v86];
              int32x2_t v210 = &v192->i8[v32];
              *(_OWORD *)int32x2_t v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)int32x2_t v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int32x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int32x2_t v199 = v198;
              v199[1] = v198;
              int32x2_t v200 = (float32x4_t *)&v192->i8[v86];
              *int32x2_t v200 = v198;
              v200[1] = v198;
              int32x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int32x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int32x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              int32x2_t v195 = &v192->i8[v32];
              *(_OWORD *)int32x2_t v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              int32x2_t v196 = &v192->i8[v86];
              *(_OWORD *)int32x2_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int32x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int32x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              BOOL v230 = &v213->i8[v86];
              BOOL v231 = &v213->i8[v32];
              *(_OWORD *)BOOL v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)BOOL v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              int v232 = &v213->i8[v86 + v32];
              *(_OWORD *)int v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              *uint64_t v220 = v219;
              v220[1] = v219;
              uint64_t v221 = (float32x4_t *)&v213->i8[v86];
              *uint64_t v221 = v219;
              v221[1] = v219;
              unsigned int v222 = (float32x4_t *)&v213->i8[v350];
              *unsigned int v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int32x2_t v213 = 0u;
              v129[5] = 0u;
              int32x2_t v216 = &v213->i8[v32];
              *(_OWORD *)int32x2_t v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              unint64_t v217 = &v213->i8[v86];
              *(_OWORD *)unint64_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              unsigned int v218 = &v213->i8[v350];
              *(_OWORD *)unsigned int v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            unsigned int v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *unsigned int v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              unsigned int v247 = &v234->i8[v86];
              float64x2_t v248 = &v234->i8[v32];
              *(_OWORD *)float64x2_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)unsigned int v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              int v249 = &v234->i8[v86 + v32];
              *(_OWORD *)int v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                unsigned int v237 = (float32x4_t *)&v234->i8[v32];
                *unsigned int v237 = v236;
                v237[1] = v236;
                int8x8_t v238 = (float32x4_t *)&v234->i8[v86];
                *int8x8_t v238 = v236;
                v238[1] = v236;
                unsigned int v239 = (float32x4_t *)&v234->i8[v350];
                *unsigned int v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *unsigned int v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            float64x2_t v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              *uint64_t v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              *uint64_t v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int32x2_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int32x2_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              unsigned int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)unsigned int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              unsigned int v108 = &v89->i8[v67 + v25];
              *(_OWORD *)unsigned int v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              unint64_t v96 = (float32x4_t *)&v89->i8[v25];
              *unint64_t v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              *long long v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              *long long v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int32x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              int8x8_t v94 = &v89->i8[v345];
              *(_OWORD *)int8x8_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              *uint64_t v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              unsigned int v129 = &v110->i8[v67 + v25];
              *(_OWORD *)unsigned int v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              *uint64_t v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              unint64_t v117 = (float32x4_t *)&v110->i8[v25];
              *unint64_t v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              *long long v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              *uint64_t v110 = 0u;
              v110[1] = 0u;
              int32x2_t v113 = &v110->i8[v25];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int8x8_t v115 = &v110->i8[v345];
              *(_OWORD *)int8x8_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              uint64_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)uint64_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int8x8_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int8x8_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              float32x4_t v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int v138 = (float32x4_t *)&v131->i8[v25];
              *int v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              *int8x16_t v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int32x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int8x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int8x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int32x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int32x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              uint64_t v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              int32x2_t v155 = &v152->i8[v25];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int32x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int32x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              int8x16_t *v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int32x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int32x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int32x2_t v180 = (float32x4_t *)&v173->i8[v25];
              float32x4_t *v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              *long long v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int8x16_t *v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int32x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int32x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int32x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int32x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int32x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int32x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int32x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int32x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              BOOL v230 = &v215->i8[v67 + v25];
              *(_OWORD *)BOOL v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                unsigned int v218 = (float32x4_t *)&v215->i8[v25];
                *unsigned int v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                *uint64_t v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              *uint64_t v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              *uint64_t v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int32x2_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int32x2_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              unsigned int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)unsigned int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              unsigned int v108 = &v89->i8[v67 + v25];
              *(_OWORD *)unsigned int v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              unint64_t v96 = (float32x4_t *)&v89->i8[v25];
              *unint64_t v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              *long long v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              *long long v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int32x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              int8x8_t v94 = &v89->i8[v345];
              *(_OWORD *)int8x8_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              *uint64_t v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              unsigned int v129 = &v110->i8[v67 + v25];
              *(_OWORD *)unsigned int v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              *uint64_t v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              unint64_t v117 = (float32x4_t *)&v110->i8[v25];
              *unint64_t v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              *long long v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              *uint64_t v110 = 0u;
              v110[1] = 0u;
              int32x2_t v113 = &v110->i8[v25];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int8x8_t v115 = &v110->i8[v345];
              *(_OWORD *)int8x8_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              uint64_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)uint64_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int8x8_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int8x8_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              float32x4_t v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int v138 = (float32x4_t *)&v131->i8[v25];
              *int v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              *int8x16_t v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int32x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int8x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int8x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int32x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int32x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              uint64_t v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              int32x2_t v155 = &v152->i8[v25];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int32x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int32x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              int8x16_t *v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int32x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int32x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int32x2_t v180 = (float32x4_t *)&v173->i8[v25];
              float32x4_t *v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              *long long v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int8x16_t *v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int32x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int32x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int32x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int32x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int32x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int32x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int32x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int32x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              BOOL v230 = &v215->i8[v67 + v25];
              *(_OWORD *)BOOL v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                unsigned int v218 = (float32x4_t *)&v215->i8[v25];
                *unsigned int v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                *uint64_t v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE13ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)13,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          float32x4_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            float32x4_t v78 = __dst;
          }
          float32x4_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              long long v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              long long v105 = (_OWORD *)(v83 + a11);
              *long long v105 = v97;
              v105[1] = v99;
              *long long v104 = v103;
              v104[1] = v101;
              unsigned int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                int8x8_t v94 = (float32x4_t *)(v83 + a11);
                *int8x8_t v94 = v93;
                v94[1] = v93;
                float32x4_t v95 = (float32x4_t *)(v83 + v351);
                *float32x4_t v95 = v93;
                v95[1] = v93;
                unint64_t v96 = (float32x4_t *)(v83 + v350);
                *unint64_t v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                *uint64_t v88 = 0u;
                v88[1] = 0u;
                int32x2_t v89 = (_OWORD *)(v83 + v351);
                *int32x2_t v89 = 0u;
                v89[1] = 0u;
                unsigned int v90 = (_OWORD *)(v83 + v350);
                *unsigned int v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            unsigned int v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              *unsigned int v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              long long v125 = &v108->i8[v86];
              long long v126 = &v108->i8[v32];
              *(_OWORD *)long long v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int8x8_t v115 = (float32x4_t *)&v108->i8[v32];
              *int8x8_t v115 = v114;
              v115[1] = v114;
              float32x4_t v116 = (float32x4_t *)&v108->i8[v86];
              *float32x4_t v116 = v114;
              v116[1] = v114;
              unint64_t v117 = (float32x4_t *)&v108->i8[v350];
              *unint64_t v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              *unsigned int v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unsigned int v111 = &v108->i8[v32];
              *(_OWORD *)unsigned int v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              uint64_t v112 = &v108->i8[v86];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int32x2_t v113 = &v108->i8[v350];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            unsigned int v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *unsigned int v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              long long v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *unsigned int v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int8x8_t v136 = (float32x4_t *)&v129->i8[v32];
              *int8x8_t v136 = v135;
              v136[1] = v135;
              float32x4_t v137 = (float32x4_t *)&v129->i8[v86];
              *float32x4_t v137 = v135;
              v137[1] = v135;
              int v138 = (float32x4_t *)&v129->i8[v350];
              *int v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *unsigned int v129 = 0u;
              v129[1] = 0u;
              unsigned int v132 = &v129->i8[v32];
              *(_OWORD *)unsigned int v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              uint64_t v133 = &v129->i8[v86];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int32x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int8x8_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              *int8x8_t v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              long long v167 = &v150->i8[v86];
              long long v168 = &v150->i8[v32];
              *(_OWORD *)long long v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)long long v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int32x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int32x2_t v157 = v156;
              v157[1] = v156;
              float32x4_t v158 = (float32x4_t *)&v150->i8[v86];
              *float32x4_t v158 = v156;
              v158[1] = v156;
              uint64_t v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              int32x2_t v155 = &v150->i8[v350];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int32x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              *int32x2_t v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              long long v188 = &v171->i8[v86];
              long long v189 = &v171->i8[v32];
              *(_OWORD *)long long v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)long long v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int32x2_t v178 = (float32x4_t *)&v171->i8[v32];
              *int32x2_t v178 = v177;
              v178[1] = v177;
              float32x4_t v179 = (float32x4_t *)&v171->i8[v86];
              *float32x4_t v179 = v177;
              v179[1] = v177;
              int32x2_t v180 = (float32x4_t *)&v171->i8[v350];
              float32x4_t *v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              *int32x2_t v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v174 = &v171->i8[v32];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int32x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int32x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              long long v209 = &v192->i8[v86];
              long long v210 = &v192->i8[v32];
              *(_OWORD *)long long v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)long long v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int32x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int32x2_t v199 = v198;
              v199[1] = v198;
              float32x4_t v200 = (float32x4_t *)&v192->i8[v86];
              *float32x4_t v200 = v198;
              v200[1] = v198;
              int32x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int32x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int32x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              unsigned int v195 = &v192->i8[v32];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int32x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int32x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              BOOL v230 = &v213->i8[v86];
              float32x4_t v231 = &v213->i8[v32];
              *(_OWORD *)float32x4_t v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)BOOL v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              float32x4_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)float32x4_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              *uint64_t v220 = v219;
              v220[1] = v219;
              long long v221 = (float32x4_t *)&v213->i8[v86];
              *long long v221 = v219;
              v221[1] = v219;
              int8x16_t v222 = (float32x4_t *)&v213->i8[v350];
              *int8x16_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int32x2_t v213 = 0u;
              v129[5] = 0u;
              unsigned int v216 = &v213->i8[v32];
              *(_OWORD *)unsigned int v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              float32x4_t v217 = &v213->i8[v86];
              *(_OWORD *)float32x4_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              unsigned int v218 = &v213->i8[v350];
              *(_OWORD *)unsigned int v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            float32x4_t v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *float32x4_t v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              float32x4_t v247 = &v234->i8[v86];
              float32x4_t v248 = &v234->i8[v32];
              *(_OWORD *)float32x4_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)float32x4_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              float32x4_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)float32x4_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                float32x4_t v237 = (float32x4_t *)&v234->i8[v32];
                *float32x4_t v237 = v236;
                v237[1] = v236;
                float32x4_t v238 = (float32x4_t *)&v234->i8[v86];
                *float32x4_t v238 = v236;
                v238[1] = v236;
                uint64_t v239 = (float32x4_t *)&v234->i8[v350];
                *uint64_t v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *float32x4_t v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            int v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v15 = a1;
  uint64_t v443 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v364 = a8;
  unsigned int v345 = a8 + a10 - 1;
  if (*(void *)(v15 + 168)) {
    int v16 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v16 = 0;
  }
  unsigned int v17 = a5 - 1;
  unsigned int v18 = a6 - 1;
  unsigned int v19 = a8 >> 3;
  unsigned int v344 = v345 >> 3;
  BOOL v20 = (v16 & 0xD00) == 0 || v16 == 768;
  int v21 = v16 & 0xE00;
  int v23 = !v20 && v21 != 1024;
  int v358 = v23;
  if (*(unsigned char *)(v15 + 232))
  {
    unsigned int v24 = *(unsigned __int8 *)(v15 + 255);
    unsigned int v25 = *(unsigned __int8 *)(v15 + 254);
    char v26 = __clz(v17);
    if (1 << v24 >= a6 || a5 >> v25)
    {
      if (!(a6 >> v24) && 1 << v25 < a5)
      {
        if (a6 < 2) {
          unsigned int v29 = 0;
        }
        else {
          unsigned int v29 = __clz(~(-1 << -(char)__clz(v18))) - 32;
        }
        v25 += v24 + v29;
        unsigned int v24 = -v29;
      }
    }
    else
    {
      unsigned int v27 = 32 - __clz(~(-1 << -v26));
      unsigned int v28 = v25 + v24;
      if (a5 < 2) {
        unsigned int v27 = 0;
      }
      unsigned int v24 = v28 - v27;
      unsigned int v25 = v27;
    }
    if (a5 < 2)
    {
      if (v25) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v26)) < v25)
    {
LABEL_27:
      BOOL v357 = 0;
LABEL_32:
      unsigned int v355 = v25 - 4;
      unsigned int v349 = v24 - 3;
      int v31 = -1 << *(unsigned char *)(*(void *)(v15 + 208) + 48);
      unsigned int v342 = (((~v31 + a5) & v31) + ~(-1 << v25)) >> v25;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v30 = 0;
    }
    else {
      unsigned int v30 = 32 - __clz(~(-1 << -(char)__clz(v18)));
    }
    BOOL v357 = v30 >= v24;
    goto LABEL_32;
  }
  BOOL v357 = 0;
  unsigned int v342 = 0;
  unsigned int v349 = 0;
  unsigned int v355 = 0;
LABEL_33:
  if (v19 <= v344)
  {
    unsigned int v356 = a7 + a9 - 1;
    if (a7 >> 4 <= v356 >> 4)
    {
      uint64_t v32 = a11;
      unsigned int v367 = v17 >> 4;
      unsigned int v341 = v18 >> 3;
      int v366 = (v17 & 0xF) + 1;
      int v340 = (v18 & 7) + 1;
      uint64_t v353 = 4 * a11;
      uint32x2_t v33 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v34 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v33, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v33));
      __int32 v352 = v34.i32[0] | v34.i32[1];
      int8x8_t v348 = v34;
      BOOL v347 = v34.i32[0] != 0;
      BOOL v346 = v34.i32[1] != 0;
      uint64_t v365 = v15;
      uint64_t v350 = 3 * a11;
      uint64_t v351 = 2 * a11;
      do
      {
        unsigned int v35 = (8 * v19) | 7;
        if (8 * v19 <= v364) {
          int v36 = v364;
        }
        else {
          int v36 = 8 * v19;
        }
        if (v345 < v35) {
          unsigned int v35 = v345;
        }
        int v354 = v36 - 8 * v19;
        int v362 = v35 - v36 + 1;
        unsigned int v37 = a7 >> 4;
        int v38 = v340;
        if (v19 != v341) {
          int v38 = 8;
        }
        unsigned int v368 = v38;
        uint64_t v39 = v19 & ~(-1 << v349);
        uint64_t v361 = a2 + (v36 - v364) * v32;
        unsigned int v40 = a7;
        do
        {
          unsigned int v42 = 16 * v37;
          unsigned int v43 = 16 * (v37 + 1) - 1;
          if (16 * v37 <= v40) {
            int v44 = v40;
          }
          else {
            int v44 = 16 * v37;
          }
          if (v356 < v43) {
            unsigned int v43 = a7 + a9 - 1;
          }
          int v45 = v43 - v44 + 1;
          if (v37 == v367) {
            unsigned int v46 = v366;
          }
          else {
            unsigned int v46 = 16;
          }
          BOOL v47 = 1;
          if (8 * v19 >= v364 && v42 >= v40)
          {
            int v48 = v366;
            if (v37 != v367) {
              int v48 = 16;
            }
            BOOL v47 = v45 != v48 || v362 != v368;
          }
          if (v357)
          {
            if (v355 | v349)
            {
              int v50 = 0;
              uint64_t v51 = 0;
              int v52 = 1;
              BOOL v53 = v349 != 0;
              BOOL v54 = v355 != 0;
              unsigned int v55 = v349;
              unsigned int v56 = v355;
              do
              {
                --v55;
                if (v53) {
                  v51 |= (unint64_t)(v39 & v52) << v50++;
                }
                else {
                  unsigned int v55 = 0;
                }
                --v56;
                if (v54) {
                  v51 |= (unint64_t)(v37 & ~(-1 << v355) & v52) << v50++;
                }
                else {
                  unsigned int v56 = 0;
                }
                v52 *= 2;
                --v50;
                BOOL v54 = v56 != 0;
                BOOL v53 = v55 != 0;
              }
              while (v56 | v55);
            }
            else
            {
              uint64_t v51 = 0;
            }
            uint64_t v64 = *(void *)(v15 + 320) * ((v37 >> v355) + (v19 >> v349) * v342) + (v51 << 10);
          }
          else
          {
            if (v352)
            {
              int v57 = 0;
              uint64_t v58 = 0;
              int v59 = 1;
              BOOL v60 = v347;
              BOOL v61 = v346;
              __int32 v62 = v348.i32[0];
              __int32 v63 = v348.i32[1];
              do
              {
                --v62;
                if (v60) {
                  v58 |= (unint64_t)(v59 & v19) << v57++;
                }
                else {
                  __int32 v62 = 0;
                }
                --v63;
                if (v61) {
                  v58 |= (unint64_t)(v59 & v37) << v57++;
                }
                else {
                  __int32 v63 = 0;
                }
                v59 *= 2;
                --v57;
                BOOL v61 = v63 != 0;
                BOOL v60 = v62 != 0;
              }
              while (v63 | v62);
            }
            else
            {
              uint64_t v58 = 0;
            }
            uint64_t v64 = v58 << 10;
          }
          unsigned int v65 = *(_DWORD *)(v15 + 128) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v65 <= 1) {
            unsigned int v65 = 1;
          }
          unsigned int v66 = v65 + 15;
          if (v66 < 0x20) {
            unsigned int v67 = 0;
          }
          else {
            unsigned int v67 = 32 - __clz(~(-1 << -(char)__clz((v66 >> 4) - 1)));
          }
          unsigned int v68 = *(_DWORD *)(v15 + 132) >> (*(unsigned char *)(v15 + 144) + a12);
          if (v68 <= 1) {
            unsigned int v68 = 1;
          }
          unsigned int v69 = v68 + 7;
          if (v69 < 0x10)
          {
            unsigned int v70 = 0;
            if (!v67)
            {
LABEL_115:
              unint64_t v72 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v70 = 32 - __clz(~(-1 << -(char)__clz((v69 >> 3) - 1)));
            if (!(v70 | v67)) {
              goto LABEL_115;
            }
          }
          int v71 = 0;
          unint64_t v72 = 0;
          BOOL v73 = v67 != 0;
          BOOL v74 = v70 != 0;
          int v75 = 1;
          do
          {
            --v67;
            BOOL v76 = !v73;
            if (v73)
            {
              unint64_t v77 = ((unint64_t)(v75 & v37) << v71) | v72;
            }
            else
            {
              unsigned int v67 = 0;
              unint64_t v77 = v72;
            }
            if (!v76) {
              ++v71;
            }
            --v70;
            if (v74)
            {
              unint64_t v72 = ((unint64_t)(v75 & v19) << v71) | v77;
            }
            else
            {
              unsigned int v70 = 0;
              unint64_t v72 = v77;
            }
            if (v74) {
              ++v71;
            }
            v75 *= 2;
            --v71;
            BOOL v74 = v70 != 0;
            BOOL v73 = v67 != 0;
          }
          while (v70 | v67);
LABEL_116:
          float32x4_t v78 = (unsigned char *)(a3 + v64);
          if (v358)
          {
            uint64_t v79 = v39;
            int v80 = v45;
            BOOL v81 = v47;
            memcpy(__dst, (const void *)(a3 + v64), sizeof(__dst));
            BOOL v47 = v81;
            int v45 = v80;
            uint64_t v39 = v79;
            float32x4_t v78 = __dst;
          }
          float32x4_t v82 = (unsigned __int8 *)(a4 + 8 * v72);
          uint64_t v83 = v361 + 8 * (v44 - v40);
          char v84 = v46 < 0x10 || v47;
          if ((v84 & 1) == 0 && v368 > 7)
          {
            unsigned int v85 = *v82;
            if (v85 == 127)
            {
              long long v97 = *((_OWORD *)v78 + 1);
              long long v98 = *((_OWORD *)v78 + 2);
              long long v99 = *((_OWORD *)v78 + 3);
              long long v100 = *((_OWORD *)v78 + 5);
              long long v101 = *((_OWORD *)v78 + 6);
              long long v102 = *((_OWORD *)v78 + 7);
              long long v103 = *((_OWORD *)v78 + 4);
              uint64_t v86 = 2 * a11;
              *(_OWORD *)uint64_t v83 = *(_OWORD *)v78;
              *(_OWORD *)(v83 + 16) = v98;
              long long v104 = (_OWORD *)(v83 + v351);
              uint64_t v32 = a11;
              long long v105 = (_OWORD *)(v83 + a11);
              *long long v105 = v97;
              v105[1] = v99;
              *long long v104 = v103;
              v104[1] = v101;
              unsigned int v106 = (_OWORD *)(v83 + v351 + a11);
              _OWORD *v106 = v100;
              v106[1] = v102;
              uint64_t v87 = 128;
            }
            else
            {
              uint64_t v32 = a11;
              uint64_t v86 = 2 * a11;
              if (v85 == 3)
              {
                float32x4_t v93 = vld1q_dup_f32((const float *)v78);
                *(float32x4_t *)uint64_t v83 = v93;
                *(float32x4_t *)(v83 + 16) = v93;
                int8x8_t v94 = (float32x4_t *)(v83 + a11);
                *int8x8_t v94 = v93;
                v94[1] = v93;
                float32x4_t v95 = (float32x4_t *)(v83 + v351);
                *float32x4_t v95 = v93;
                v95[1] = v93;
                unint64_t v96 = (float32x4_t *)(v83 + v350);
                *unint64_t v96 = v93;
                v96[1] = v93;
                uint64_t v87 = 4;
              }
              else if (*v82)
              {
                uint64_t v87 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v83, a11, (uint64_t)v78, v85);
              }
              else
              {
                uint64_t v87 = 0;
                *(_OWORD *)uint64_t v83 = 0u;
                *(_OWORD *)(v83 + 16) = 0u;
                uint64_t v88 = (_OWORD *)(v83 + a11);
                *uint64_t v88 = 0u;
                v88[1] = 0u;
                int32x2_t v89 = (_OWORD *)(v83 + v351);
                *int32x2_t v89 = 0u;
                v89[1] = 0u;
                unsigned int v90 = (_OWORD *)(v83 + v350);
                *unsigned int v90 = 0u;
                v90[1] = 0u;
              }
            }
            uint64_t v107 = (uint64_t)&v78[v87];
            unsigned int v108 = (int8x16_t *)(v83 + 32);
            unsigned int v109 = v82[1];
            if (v109 == 127)
            {
              long long v118 = *(_OWORD *)(v107 + 16);
              long long v119 = *(_OWORD *)(v107 + 32);
              long long v120 = *(_OWORD *)(v107 + 48);
              long long v121 = *(_OWORD *)(v107 + 80);
              long long v122 = *(_OWORD *)(v107 + 96);
              long long v123 = *(_OWORD *)(v107 + 112);
              long long v124 = *(_OWORD *)(v107 + 64);
              *unsigned int v108 = *(int8x16_t *)v107;
              *(_OWORD *)(v83 + 48) = v119;
              long long v125 = &v108->i8[v86];
              long long v126 = &v108->i8[v32];
              *(_OWORD *)long long v126 = v118;
              *((_OWORD *)v126 + 1) = v120;
              *(_OWORD *)long long v125 = v124;
              *((_OWORD *)v125 + 1) = v122;
              int v127 = &v108->i8[v86 + v32];
              *(_OWORD *)int v127 = v121;
              *((_OWORD *)v127 + 1) = v123;
              uint64_t v110 = 128;
            }
            else if (v109 == 3)
            {
              float32x4_t v114 = vld1q_dup_f32((const float *)v107);
              *(float32x4_t *)(v83 + 32) = v114;
              *(float32x4_t *)(v83 + 48) = v114;
              int8x8_t v115 = (float32x4_t *)&v108->i8[v32];
              *int8x8_t v115 = v114;
              v115[1] = v114;
              float32x4_t v116 = (float32x4_t *)&v108->i8[v86];
              *float32x4_t v116 = v114;
              v116[1] = v114;
              unint64_t v117 = (float32x4_t *)&v108->i8[v350];
              *unint64_t v117 = v114;
              v117[1] = v114;
              uint64_t v110 = 4;
            }
            else if (v82[1])
            {
              uint64_t v110 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v108, v32, v107, v109);
            }
            else
            {
              uint64_t v110 = 0;
              *unsigned int v108 = 0u;
              *(_OWORD *)(v83 + 48) = 0u;
              unsigned int v111 = &v108->i8[v32];
              *(_OWORD *)unsigned int v111 = 0u;
              *((_OWORD *)v111 + 1) = 0u;
              uint64_t v112 = &v108->i8[v86];
              *(_OWORD *)uint64_t v112 = 0u;
              *((_OWORD *)v112 + 1) = 0u;
              int32x2_t v113 = &v108->i8[v350];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
            }
            uint64_t v128 = v107 + v110;
            unsigned int v129 = (int8x16_t *)(v83 + v353);
            unsigned int v130 = v82[2];
            if (v130 == 127)
            {
              long long v139 = *(_OWORD *)(v128 + 16);
              int8x16_t v140 = *(int8x16_t *)(v128 + 32);
              long long v141 = *(_OWORD *)(v128 + 48);
              long long v142 = *(_OWORD *)(v128 + 80);
              long long v143 = *(_OWORD *)(v128 + 96);
              long long v144 = *(_OWORD *)(v128 + 112);
              long long v145 = *(_OWORD *)(v128 + 64);
              *unsigned int v129 = *(int8x16_t *)v128;
              v129[1] = v140;
              long long v146 = &v129->i8[v86];
              long long v147 = &v129->i8[v32];
              *(_OWORD *)long long v147 = v139;
              *((_OWORD *)v147 + 1) = v141;
              *(_OWORD *)long long v146 = v145;
              *((_OWORD *)v146 + 1) = v143;
              uint64_t v148 = &v129->i8[v86 + v32];
              *(_OWORD *)uint64_t v148 = v142;
              *((_OWORD *)v148 + 1) = v144;
              uint64_t v131 = 128;
            }
            else if (v130 == 3)
            {
              float32x4_t v135 = vld1q_dup_f32((const float *)v128);
              *unsigned int v129 = (int8x16_t)v135;
              v129[1] = (int8x16_t)v135;
              int8x8_t v136 = (float32x4_t *)&v129->i8[v32];
              *int8x8_t v136 = v135;
              v136[1] = v135;
              float32x4_t v137 = (float32x4_t *)&v129->i8[v86];
              *float32x4_t v137 = v135;
              v137[1] = v135;
              int v138 = (float32x4_t *)&v129->i8[v350];
              *int v138 = v135;
              v138[1] = v135;
              uint64_t v131 = 4;
            }
            else if (v82[2])
            {
              uint64_t v131 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v83 + v353), v32, v128, v130);
            }
            else
            {
              uint64_t v131 = 0;
              *unsigned int v129 = 0u;
              v129[1] = 0u;
              unsigned int v132 = &v129->i8[v32];
              *(_OWORD *)unsigned int v132 = 0u;
              *((_OWORD *)v132 + 1) = 0u;
              uint64_t v133 = &v129->i8[v86];
              *(_OWORD *)uint64_t v133 = 0u;
              *((_OWORD *)v133 + 1) = 0u;
              int32x2_t v134 = &v129->i8[v350];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
            }
            uint64_t v149 = v128 + v131;
            int8x8_t v150 = v129 + 2;
            unsigned int v151 = v82[3];
            if (v151 == 127)
            {
              long long v160 = *(_OWORD *)(v149 + 16);
              int8x16_t v161 = *(int8x16_t *)(v149 + 32);
              long long v162 = *(_OWORD *)(v149 + 48);
              long long v163 = *(_OWORD *)(v149 + 80);
              long long v164 = *(_OWORD *)(v149 + 96);
              long long v165 = *(_OWORD *)(v149 + 112);
              long long v166 = *(_OWORD *)(v149 + 64);
              *int8x8_t v150 = *(int8x16_t *)v149;
              v129[3] = v161;
              long long v167 = &v150->i8[v86];
              long long v168 = &v150->i8[v32];
              *(_OWORD *)long long v168 = v160;
              *((_OWORD *)v168 + 1) = v162;
              *(_OWORD *)long long v167 = v166;
              *((_OWORD *)v167 + 1) = v164;
              unsigned int v169 = &v150->i8[v86 + v32];
              *(_OWORD *)unsigned int v169 = v163;
              *((_OWORD *)v169 + 1) = v165;
              uint64_t v152 = 128;
            }
            else if (v151 == 3)
            {
              float32x4_t v156 = vld1q_dup_f32((const float *)v149);
              v129[2] = (int8x16_t)v156;
              v129[3] = (int8x16_t)v156;
              int32x2_t v157 = (float32x4_t *)&v150->i8[v32];
              *int32x2_t v157 = v156;
              v157[1] = v156;
              float32x4_t v158 = (float32x4_t *)&v150->i8[v86];
              *float32x4_t v158 = v156;
              v158[1] = v156;
              uint64_t v159 = (float32x4_t *)&v150->i8[v350];
              float32x4_t *v159 = v156;
              v159[1] = v156;
              uint64_t v152 = 4;
            }
            else if (v82[3])
            {
              uint64_t v152 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v150, v32, v149, v151);
            }
            else
            {
              uint64_t v152 = 0;
              *int8x8_t v150 = 0u;
              v129[3] = 0u;
              unsigned int v153 = &v150->i8[v32];
              *(_OWORD *)unsigned int v153 = 0u;
              *((_OWORD *)v153 + 1) = 0u;
              uint64_t v154 = &v150->i8[v86];
              *(_OWORD *)uint64_t v154 = 0u;
              *((_OWORD *)v154 + 1) = 0u;
              int32x2_t v155 = &v150->i8[v350];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
            }
            uint64_t v170 = v149 + v152;
            int32x2_t v171 = (int8x16_t *)(v83 + 64);
            unsigned int v172 = v82[4];
            if (v172 == 127)
            {
              long long v181 = *(_OWORD *)(v170 + 16);
              long long v182 = *(_OWORD *)(v170 + 32);
              long long v183 = *(_OWORD *)(v170 + 48);
              long long v184 = *(_OWORD *)(v170 + 80);
              long long v185 = *(_OWORD *)(v170 + 96);
              long long v186 = *(_OWORD *)(v170 + 112);
              long long v187 = *(_OWORD *)(v170 + 64);
              *int32x2_t v171 = *(int8x16_t *)v170;
              *(_OWORD *)(v83 + 80) = v182;
              long long v188 = &v171->i8[v86];
              long long v189 = &v171->i8[v32];
              *(_OWORD *)long long v189 = v181;
              *((_OWORD *)v189 + 1) = v183;
              *(_OWORD *)long long v188 = v187;
              *((_OWORD *)v188 + 1) = v185;
              unsigned int v190 = &v171->i8[v86 + v32];
              *(_OWORD *)unsigned int v190 = v184;
              *((_OWORD *)v190 + 1) = v186;
              uint64_t v173 = 128;
            }
            else if (v172 == 3)
            {
              float32x4_t v177 = vld1q_dup_f32((const float *)v170);
              *(float32x4_t *)(v83 + 64) = v177;
              *(float32x4_t *)(v83 + 80) = v177;
              int32x2_t v178 = (float32x4_t *)&v171->i8[v32];
              *int32x2_t v178 = v177;
              v178[1] = v177;
              float32x4_t v179 = (float32x4_t *)&v171->i8[v86];
              *float32x4_t v179 = v177;
              v179[1] = v177;
              int32x2_t v180 = (float32x4_t *)&v171->i8[v350];
              float32x4_t *v180 = v177;
              v180[1] = v177;
              uint64_t v173 = 4;
            }
            else if (v82[4])
            {
              uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v171, v32, v170, v172);
            }
            else
            {
              uint64_t v173 = 0;
              *int32x2_t v171 = 0u;
              *(_OWORD *)(v83 + 80) = 0u;
              unsigned int v174 = &v171->i8[v32];
              *(_OWORD *)unsigned int v174 = 0u;
              *((_OWORD *)v174 + 1) = 0u;
              uint64_t v175 = &v171->i8[v86];
              *(_OWORD *)uint64_t v175 = 0u;
              *((_OWORD *)v175 + 1) = 0u;
              unsigned int v176 = &v171->i8[v350];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
            }
            uint64_t v191 = v170 + v173;
            int32x2_t v192 = (int8x16_t *)(v83 + 96);
            unsigned int v193 = v82[5];
            if (v193 == 127)
            {
              long long v202 = *(_OWORD *)(v191 + 16);
              long long v203 = *(_OWORD *)(v191 + 32);
              long long v204 = *(_OWORD *)(v191 + 48);
              long long v205 = *(_OWORD *)(v191 + 80);
              long long v206 = *(_OWORD *)(v191 + 96);
              long long v207 = *(_OWORD *)(v191 + 112);
              long long v208 = *(_OWORD *)(v191 + 64);
              *int32x2_t v192 = *(int8x16_t *)v191;
              *(_OWORD *)(v83 + 112) = v203;
              long long v209 = &v192->i8[v86];
              long long v210 = &v192->i8[v32];
              *(_OWORD *)long long v210 = v202;
              *((_OWORD *)v210 + 1) = v204;
              *(_OWORD *)long long v209 = v208;
              *((_OWORD *)v209 + 1) = v206;
              unsigned int v211 = &v192->i8[v86 + v32];
              *(_OWORD *)unsigned int v211 = v205;
              *((_OWORD *)v211 + 1) = v207;
              uint64_t v194 = 128;
            }
            else if (v193 == 3)
            {
              float32x4_t v198 = vld1q_dup_f32((const float *)v191);
              *(float32x4_t *)(v83 + 96) = v198;
              *(float32x4_t *)(v83 + 112) = v198;
              int32x2_t v199 = (float32x4_t *)&v192->i8[v32];
              *int32x2_t v199 = v198;
              v199[1] = v198;
              float32x4_t v200 = (float32x4_t *)&v192->i8[v86];
              *float32x4_t v200 = v198;
              v200[1] = v198;
              int32x2_t v201 = (float32x4_t *)&v192->i8[v350];
              *int32x2_t v201 = v198;
              v201[1] = v198;
              uint64_t v194 = 4;
            }
            else if (v82[5])
            {
              uint64_t v194 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v192, v32, v191, v193);
            }
            else
            {
              uint64_t v194 = 0;
              *int32x2_t v192 = 0u;
              *(_OWORD *)(v83 + 112) = 0u;
              unsigned int v195 = &v192->i8[v32];
              *(_OWORD *)unsigned int v195 = 0u;
              *((_OWORD *)v195 + 1) = 0u;
              uint64_t v196 = &v192->i8[v86];
              *(_OWORD *)uint64_t v196 = 0u;
              *((_OWORD *)v196 + 1) = 0u;
              unsigned int v197 = &v192->i8[v350];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
            }
            uint64_t v212 = v191 + v194;
            int32x2_t v213 = v129 + 4;
            unsigned int v214 = v82[6];
            if (v214 == 127)
            {
              long long v223 = *(_OWORD *)(v212 + 16);
              int8x16_t v224 = *(int8x16_t *)(v212 + 32);
              long long v225 = *(_OWORD *)(v212 + 48);
              long long v226 = *(_OWORD *)(v212 + 80);
              long long v227 = *(_OWORD *)(v212 + 96);
              long long v228 = *(_OWORD *)(v212 + 112);
              long long v229 = *(_OWORD *)(v212 + 64);
              *int32x2_t v213 = *(int8x16_t *)v212;
              v129[5] = v224;
              BOOL v230 = &v213->i8[v86];
              float32x4_t v231 = &v213->i8[v32];
              *(_OWORD *)float32x4_t v231 = v223;
              *((_OWORD *)v231 + 1) = v225;
              *(_OWORD *)BOOL v230 = v229;
              *((_OWORD *)v230 + 1) = v227;
              float32x4_t v232 = &v213->i8[v86 + v32];
              *(_OWORD *)float32x4_t v232 = v226;
              *((_OWORD *)v232 + 1) = v228;
              uint64_t v215 = 128;
            }
            else if (v214 == 3)
            {
              float32x4_t v219 = vld1q_dup_f32((const float *)v212);
              v129[4] = (int8x16_t)v219;
              v129[5] = (int8x16_t)v219;
              uint64_t v220 = (float32x4_t *)&v213->i8[v32];
              *uint64_t v220 = v219;
              v220[1] = v219;
              long long v221 = (float32x4_t *)&v213->i8[v86];
              *long long v221 = v219;
              v221[1] = v219;
              int8x16_t v222 = (float32x4_t *)&v213->i8[v350];
              *int8x16_t v222 = v219;
              v222[1] = v219;
              uint64_t v215 = 4;
            }
            else if (v82[6])
            {
              uint64_t v215 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v213, v32, v191 + v194, v214);
            }
            else
            {
              uint64_t v215 = 0;
              *int32x2_t v213 = 0u;
              v129[5] = 0u;
              unsigned int v216 = &v213->i8[v32];
              *(_OWORD *)unsigned int v216 = 0u;
              *((_OWORD *)v216 + 1) = 0u;
              float32x4_t v217 = &v213->i8[v86];
              *(_OWORD *)float32x4_t v217 = 0u;
              *((_OWORD *)v217 + 1) = 0u;
              unsigned int v218 = &v213->i8[v350];
              *(_OWORD *)unsigned int v218 = 0u;
              *((_OWORD *)v218 + 1) = 0u;
            }
            uint64_t v233 = v212 + v215;
            float32x4_t v234 = v129 + 6;
            unsigned int v235 = v82[7];
            if (v235 == 127)
            {
              long long v240 = *(_OWORD *)(v233 + 16);
              int8x16_t v241 = *(int8x16_t *)(v233 + 32);
              long long v242 = *(_OWORD *)(v233 + 48);
              long long v243 = *(_OWORD *)(v233 + 64);
              long long v244 = *(_OWORD *)(v233 + 80);
              long long v245 = *(_OWORD *)(v233 + 96);
              long long v246 = *(_OWORD *)(v233 + 112);
              *float32x4_t v234 = *(int8x16_t *)v233;
              v129[7] = v241;
              float32x4_t v247 = &v234->i8[v86];
              float32x4_t v248 = &v234->i8[v32];
              *(_OWORD *)float32x4_t v248 = v240;
              *((_OWORD *)v248 + 1) = v242;
              *(_OWORD *)float32x4_t v247 = v243;
              *((_OWORD *)v247 + 1) = v245;
              float32x4_t v249 = &v234->i8[v86 + v32];
              *(_OWORD *)float32x4_t v249 = v244;
              *((_OWORD *)v249 + 1) = v246;
              unsigned int v40 = a7;
              uint64_t v15 = v365;
            }
            else
            {
              unsigned int v40 = a7;
              uint64_t v15 = v365;
              if (v235 == 3)
              {
                float32x4_t v236 = vld1q_dup_f32((const float *)v233);
                v129[6] = (int8x16_t)v236;
                v129[7] = (int8x16_t)v236;
LABEL_182:
                float32x4_t v237 = (float32x4_t *)&v234->i8[v32];
                *float32x4_t v237 = v236;
                v237[1] = v236;
                float32x4_t v238 = (float32x4_t *)&v234->i8[v86];
                *float32x4_t v238 = v236;
                v238[1] = v236;
                uint64_t v239 = (float32x4_t *)&v234->i8[v350];
                *uint64_t v239 = v236;
                v239[1] = v236;
              }
              else
              {
                if (!v235)
                {
                  float32x4_t v236 = 0uLL;
                  *float32x4_t v234 = 0u;
                  v129[7] = 0u;
                  goto LABEL_182;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v234, v32, v233, v235);
              }
            }
LABEL_47:
            unsigned int v41 = v37 + 1;
            goto LABEL_48;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v365;
          block[5] = v78;
          char v376 = v46;
          char v377 = v368;
          unsigned int v372 = v354;
          unsigned int v373 = v44 - v42;
          block[6] = v82;
          uint64_t v370 = v83;
          uint64_t v32 = a11;
          uint64_t v371 = a11;
          unsigned int v374 = v362;
          unsigned int v375 = v45;
          if (v47)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v365 + 8) + 7384), block);
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            goto LABEL_47;
          }
          unsigned int v91 = *v82;
          if (v91 == 127)
          {
            float32x4_t v250 = *((float32x4_t *)v78 + 1);
            float32x4_t v251 = *((float32x4_t *)v78 + 2);
            float32x4_t v252 = *((float32x4_t *)v78 + 3);
            float32x4_t v253 = *((float32x4_t *)v78 + 4);
            float32x4_t v254 = *((float32x4_t *)v78 + 5);
            float32x4_t v255 = *((float32x4_t *)v78 + 6);
            float32x4_t v256 = *((float32x4_t *)v78 + 7);
            int8x16_t v379 = *(int8x16_t *)v78;
            float32x4_t v380 = v251;
            float32x4_t v387 = v250;
            float32x4_t v388 = v252;
            float32x4_t v395 = v253;
            float32x4_t v396 = v255;
            float32x4_t v403 = v254;
            float32x4_t v404 = v256;
            uint64_t v92 = 128;
          }
          else if (v91 == 3)
          {
            float32x4_t v257 = vld1q_dup_f32((const float *)v78);
            int8x16_t v379 = (int8x16_t)v257;
            float32x4_t v380 = v257;
            float32x4_t v387 = v257;
            float32x4_t v388 = v257;
            float32x4_t v395 = v257;
            float32x4_t v396 = v257;
            float32x4_t v403 = v257;
            float32x4_t v404 = v257;
            uint64_t v92 = 4;
          }
          else if (*v82)
          {
            uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, (uint64_t)v78, v91);
          }
          else
          {
            uint64_t v92 = 0;
            float32x4_t v380 = 0u;
            int8x16_t v379 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v258 = (uint64_t)&v78[v92];
          unsigned int v259 = v82[1];
          if (v259 == 127)
          {
            float32x4_t v261 = *(float32x4_t *)(v258 + 16);
            float32x4_t v262 = *(float32x4_t *)(v258 + 32);
            float32x4_t v263 = *(float32x4_t *)(v258 + 48);
            float32x4_t v264 = *(float32x4_t *)(v258 + 64);
            float32x4_t v265 = *(float32x4_t *)(v258 + 80);
            float32x4_t v266 = *(float32x4_t *)(v258 + 96);
            float32x4_t v267 = *(float32x4_t *)(v258 + 112);
            int8x16_t v381 = *(int8x16_t *)v258;
            float32x4_t v382 = v262;
            float32x4_t v389 = v261;
            float32x4_t v390 = v263;
            float32x4_t v397 = v264;
            float32x4_t v398 = v266;
            float32x4_t v405 = v265;
            float32x4_t v406 = v267;
            uint64_t v260 = 128;
          }
          else if (v259 == 3)
          {
            float32x4_t v268 = vld1q_dup_f32((const float *)v258);
            int8x16_t v381 = (int8x16_t)v268;
            float32x4_t v382 = v268;
            float32x4_t v389 = v268;
            float32x4_t v390 = v268;
            float32x4_t v397 = v268;
            float32x4_t v398 = v268;
            float32x4_t v405 = v268;
            float32x4_t v406 = v268;
            uint64_t v260 = 4;
          }
          else if (v82[1])
          {
            uint64_t v260 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v258, v259);
          }
          else
          {
            uint64_t v260 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v269 = v258 + v260;
          unsigned int v270 = v82[2];
          if (v270 == 127)
          {
            float32x4_t v272 = *(float32x4_t *)(v269 + 16);
            float32x4_t v273 = *(float32x4_t *)(v269 + 32);
            float32x4_t v274 = *(float32x4_t *)(v269 + 48);
            float32x4_t v275 = *(float32x4_t *)(v269 + 64);
            float32x4_t v276 = *(float32x4_t *)(v269 + 80);
            float32x4_t v277 = *(float32x4_t *)(v269 + 96);
            float32x4_t v278 = *(float32x4_t *)(v269 + 112);
            int8x16_t v411 = *(int8x16_t *)v269;
            float32x4_t v412 = v273;
            float32x4_t v419 = v272;
            float32x4_t v420 = v274;
            float32x4_t v427 = v275;
            float32x4_t v428 = v277;
            float32x4_t v435 = v276;
            float32x4_t v436 = v278;
            uint64_t v271 = 128;
          }
          else if (v270 == 3)
          {
            float32x4_t v279 = vld1q_dup_f32((const float *)v269);
            int8x16_t v411 = (int8x16_t)v279;
            float32x4_t v412 = v279;
            float32x4_t v419 = v279;
            float32x4_t v420 = v279;
            float32x4_t v427 = v279;
            float32x4_t v428 = v279;
            float32x4_t v435 = v279;
            float32x4_t v436 = v279;
            uint64_t v271 = 4;
          }
          else if (v82[2])
          {
            uint64_t v271 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v269, v270);
          }
          else
          {
            uint64_t v271 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v280 = v269 + v271;
          unsigned int v281 = v82[3];
          if (v281 == 127)
          {
            float32x4_t v283 = *(float32x4_t *)(v280 + 16);
            float32x4_t v284 = *(float32x4_t *)(v280 + 32);
            float32x4_t v285 = *(float32x4_t *)(v280 + 48);
            float32x4_t v286 = *(float32x4_t *)(v280 + 64);
            float32x4_t v287 = *(float32x4_t *)(v280 + 80);
            float32x4_t v288 = *(float32x4_t *)(v280 + 96);
            float32x4_t v289 = *(float32x4_t *)(v280 + 112);
            int8x16_t v413 = *(int8x16_t *)v280;
            float32x4_t v414 = v284;
            float32x4_t v421 = v283;
            float32x4_t v422 = v285;
            float32x4_t v429 = v286;
            float32x4_t v430 = v288;
            float32x4_t v437 = v287;
            float32x4_t v438 = v289;
            uint64_t v282 = 128;
          }
          else if (v281 == 3)
          {
            float32x4_t v290 = vld1q_dup_f32((const float *)v280);
            int8x16_t v413 = (int8x16_t)v290;
            float32x4_t v414 = v290;
            float32x4_t v421 = v290;
            float32x4_t v422 = v290;
            float32x4_t v429 = v290;
            float32x4_t v430 = v290;
            float32x4_t v437 = v290;
            float32x4_t v438 = v290;
            uint64_t v282 = 4;
          }
          else if (v82[3])
          {
            uint64_t v282 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v280, v281);
          }
          else
          {
            uint64_t v282 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v291 = v280 + v282;
          unsigned int v292 = v82[4];
          if (v292 == 127)
          {
            float32x4_t v294 = *(float32x4_t *)(v291 + 16);
            float32x4_t v295 = *(float32x4_t *)(v291 + 32);
            float32x4_t v296 = *(float32x4_t *)(v291 + 48);
            float32x4_t v297 = *(float32x4_t *)(v291 + 64);
            float32x4_t v298 = *(float32x4_t *)(v291 + 80);
            float32x4_t v299 = *(float32x4_t *)(v291 + 96);
            float32x4_t v300 = *(float32x4_t *)(v291 + 112);
            int8x16_t v383 = *(int8x16_t *)v291;
            float32x4_t v384 = v295;
            float32x4_t v391 = v294;
            float32x4_t v392 = v296;
            float32x4_t v399 = v297;
            float32x4_t v400 = v299;
            float32x4_t v407 = v298;
            float32x4_t v408 = v300;
            uint64_t v293 = 128;
          }
          else if (v292 == 3)
          {
            float32x4_t v301 = vld1q_dup_f32((const float *)v291);
            int8x16_t v383 = (int8x16_t)v301;
            float32x4_t v384 = v301;
            float32x4_t v391 = v301;
            float32x4_t v392 = v301;
            float32x4_t v399 = v301;
            float32x4_t v400 = v301;
            float32x4_t v407 = v301;
            float32x4_t v408 = v301;
            uint64_t v293 = 4;
          }
          else if (v82[4])
          {
            uint64_t v293 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v291, v292);
          }
          else
          {
            uint64_t v293 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v302 = v291 + v293;
          unsigned int v303 = v82[5];
          if (v303 == 127)
          {
            float32x4_t v305 = *(float32x4_t *)(v302 + 16);
            float32x4_t v306 = *(float32x4_t *)(v302 + 32);
            float32x4_t v307 = *(float32x4_t *)(v302 + 48);
            float32x4_t v308 = *(float32x4_t *)(v302 + 64);
            float32x4_t v309 = *(float32x4_t *)(v302 + 80);
            float32x4_t v310 = *(float32x4_t *)(v302 + 96);
            float32x4_t v311 = *(float32x4_t *)(v302 + 112);
            int8x16_t v385 = *(int8x16_t *)v302;
            float32x4_t v386 = v306;
            float32x4_t v393 = v305;
            float32x4_t v394 = v307;
            float32x4_t v401 = v308;
            float32x4_t v402 = v310;
            float32x4_t v409 = v309;
            float32x4_t v410 = v311;
            uint64_t v304 = 128;
          }
          else if (v303 == 3)
          {
            float32x4_t v312 = vld1q_dup_f32((const float *)v302);
            int8x16_t v385 = (int8x16_t)v312;
            float32x4_t v386 = v312;
            float32x4_t v393 = v312;
            float32x4_t v394 = v312;
            float32x4_t v401 = v312;
            float32x4_t v402 = v312;
            float32x4_t v409 = v312;
            float32x4_t v410 = v312;
            uint64_t v304 = 4;
          }
          else if (v82[5])
          {
            uint64_t v304 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v385, 128, v302, v303);
          }
          else
          {
            uint64_t v304 = 0;
            int8x16_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
            float32x4_t v409 = 0u;
            float32x4_t v410 = 0u;
          }
          uint64_t v313 = v302 + v304;
          unsigned int v314 = v82[6];
          if (v314 == 127)
          {
            float32x4_t v316 = *(float32x4_t *)(v313 + 16);
            float32x4_t v317 = *(float32x4_t *)(v313 + 32);
            float32x4_t v318 = *(float32x4_t *)(v313 + 48);
            float32x4_t v319 = *(float32x4_t *)(v313 + 64);
            float32x4_t v320 = *(float32x4_t *)(v313 + 80);
            float32x4_t v321 = *(float32x4_t *)(v313 + 96);
            float32x4_t v322 = *(float32x4_t *)(v313 + 112);
            int8x16_t v415 = *(int8x16_t *)v313;
            float32x4_t v416 = v317;
            float32x4_t v423 = v316;
            float32x4_t v424 = v318;
            float32x4_t v431 = v319;
            float32x4_t v432 = v321;
            float32x4_t v439 = v320;
            float32x4_t v440 = v322;
            uint64_t v315 = 128;
          }
          else if (v314 == 3)
          {
            float32x4_t v323 = vld1q_dup_f32((const float *)v313);
            int8x16_t v415 = (int8x16_t)v323;
            float32x4_t v416 = v323;
            float32x4_t v423 = v323;
            float32x4_t v424 = v323;
            float32x4_t v431 = v323;
            float32x4_t v432 = v323;
            float32x4_t v439 = v323;
            float32x4_t v440 = v323;
            uint64_t v315 = 4;
          }
          else if (v82[6])
          {
            uint64_t v315 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v313, v314);
          }
          else
          {
            uint64_t v315 = 0;
            int8x16_t v415 = 0u;
            float32x4_t v416 = 0u;
            float32x4_t v423 = 0u;
            float32x4_t v424 = 0u;
            float32x4_t v431 = 0u;
            float32x4_t v432 = 0u;
            float32x4_t v439 = 0u;
            float32x4_t v440 = 0u;
          }
          uint64_t v324 = v313 + v315;
          unsigned int v325 = v82[7];
          if (v325 == 127)
          {
            float32x4_t v326 = *(float32x4_t *)(v324 + 16);
            float32x4_t v327 = *(float32x4_t *)(v324 + 32);
            float32x4_t v328 = *(float32x4_t *)(v324 + 48);
            float32x4_t v329 = *(float32x4_t *)(v324 + 80);
            float32x4_t v330 = *(float32x4_t *)(v324 + 96);
            float32x4_t v331 = *(float32x4_t *)(v324 + 112);
            float32x4_t v332 = *(float32x4_t *)(v324 + 64);
            int8x16_t v417 = *(int8x16_t *)v324;
            float32x4_t v418 = v327;
            float32x4_t v425 = v326;
            float32x4_t v426 = v328;
            float32x4_t v433 = v332;
            float32x4_t v434 = v330;
            float32x4_t v441 = v329;
            float32x4_t v442 = v331;
            unsigned int v40 = a7;
            uint64_t v15 = v365;
          }
          else
          {
            unsigned int v40 = a7;
            uint64_t v15 = v365;
            if (v325 == 3)
            {
              float32x4_t v333 = vld1q_dup_f32((const float *)v324);
              int8x16_t v417 = (int8x16_t)v333;
              float32x4_t v418 = v333;
              float32x4_t v425 = v333;
              float32x4_t v426 = v333;
              float32x4_t v433 = v333;
              float32x4_t v434 = v333;
              float32x4_t v441 = v333;
              float32x4_t v442 = v333;
            }
            else if (v325)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v417, 128, v324, v325);
            }
            else
            {
              int8x16_t v417 = 0u;
              float32x4_t v418 = 0u;
              float32x4_t v425 = 0u;
              float32x4_t v426 = 0u;
              float32x4_t v433 = 0u;
              float32x4_t v434 = 0u;
              float32x4_t v441 = 0u;
              float32x4_t v442 = 0u;
            }
          }
          unint64_t v334 = v374;
          unsigned int v41 = v37 + 1;
          if (v374)
          {
            unint64_t v335 = 0;
            int v336 = &v379.i8[128 * (unint64_t)v372 + 8 * v373];
            unsigned int v337 = v375;
            do
            {
              if (v337)
              {
                uint64_t v338 = 0;
                uint64_t v339 = v370 + v371 * v335;
                do
                {
                  *(unsigned char *)(v339 + v338) = v336[v338];
                  ++v338;
                  unsigned int v337 = v375;
                }
                while (8 * (unint64_t)v375 > v338);
                unint64_t v334 = v374;
              }
              ++v335;
              v336 += 128;
            }
            while (v335 < v334);
          }
LABEL_48:
          BOOL v20 = v37 == v356 >> 4;
          unsigned int v37 = v41;
        }
        while (!v20);
        BOOL v20 = v19++ == v344;
      }
      while (!v20);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              *uint64_t v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              *uint64_t v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int32x2_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int32x2_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              unsigned int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)unsigned int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              unsigned int v108 = &v89->i8[v67 + v25];
              *(_OWORD *)unsigned int v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              unint64_t v96 = (float32x4_t *)&v89->i8[v25];
              *unint64_t v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              *long long v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              *long long v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int32x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              int8x8_t v94 = &v89->i8[v345];
              *(_OWORD *)int8x8_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              *uint64_t v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              unsigned int v129 = &v110->i8[v67 + v25];
              *(_OWORD *)unsigned int v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              *uint64_t v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              unint64_t v117 = (float32x4_t *)&v110->i8[v25];
              *unint64_t v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              *long long v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              *uint64_t v110 = 0u;
              v110[1] = 0u;
              int32x2_t v113 = &v110->i8[v25];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int8x8_t v115 = &v110->i8[v345];
              *(_OWORD *)int8x8_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              uint64_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)uint64_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int8x8_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int8x8_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              float32x4_t v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int v138 = (float32x4_t *)&v131->i8[v25];
              *int v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              *int8x16_t v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int32x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int8x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int8x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int32x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int32x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              uint64_t v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              int32x2_t v155 = &v152->i8[v25];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int32x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int32x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              int8x16_t *v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int32x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int32x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int32x2_t v180 = (float32x4_t *)&v173->i8[v25];
              float32x4_t *v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              *long long v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int8x16_t *v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int32x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int32x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int32x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int32x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int32x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int32x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int32x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int32x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              BOOL v230 = &v215->i8[v67 + v25];
              *(_OWORD *)BOOL v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                unsigned int v218 = (float32x4_t *)&v215->i8[v25];
                *unsigned int v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                *uint64_t v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, int a12)
{
  uint64_t v16 = a1;
  uint64_t v441 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v362 = a8;
  unsigned int v17 = a8 >> 3;
  unsigned int v342 = a8 + a10 - 1;
  unsigned int v344 = v342 >> 3;
  unsigned int v18 = *(unsigned __int8 *)(*(void *)(v16 + 208) + 88);
  unsigned int v19 = *(_DWORD *)(v16 + 112);
  if (*(void *)(v16 + 168)) {
    int v20 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v20 = 0;
  }
  BOOL v21 = (v20 & 0xD00) == 0 || v20 == 768;
  int v22 = v20 & 0xE00;
  int v24 = !v21 && v22 != 1024;
  int v356 = v24;
  BOOL isLevelTiled = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLevelTiled(v16, *(_DWORD *)(v16 + 144) + a12);
  if (v17 <= v344)
  {
    unsigned int v354 = a7 + a9 - 1;
    unsigned int v341 = a7 >> 4;
    if (a7 >> 4 <= v354 >> 4)
    {
      uint64_t v25 = a11;
      unsigned int v338 = a5 - 1;
      unsigned int v365 = (a5 - 1) >> 4;
      int v364 = ((a5 - 1) & 0xF) + 1;
      int v339 = ((a6 - 1) & 7) + 1;
      unsigned int v340 = (a6 - 1) >> 3;
      uint64_t v347 = 4 * a11;
      uint32x2_t v26 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      int8x8_t v27 = vbic_s8((int8x8_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v26, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1))))))), (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v26));
      __int32 v352 = v27.i32[0] | v27.i32[1];
      int8x8_t v351 = v27;
      BOOL v350 = v27.i32[0] != 0;
      BOOL v349 = v27.i32[1] != 0;
      unint64_t v337 = 8 * v19 * (unint64_t)v18;
      unsigned int v353 = a7;
      uint64_t v363 = v16;
      uint64_t v345 = 3 * a11;
      uint64_t v346 = 2 * a11;
      do
      {
        unsigned int v28 = (8 * v17) | 7;
        if (8 * v17 <= v362) {
          int v29 = v362;
        }
        else {
          int v29 = 8 * v17;
        }
        unsigned int v30 = v341;
        if (v342 < v28) {
          unsigned int v28 = v342;
        }
        unsigned int v361 = 8 * v17;
        int v348 = v29 - 8 * v17;
        int v360 = v28 - v29 + 1;
        int v31 = v339;
        if (v17 != v340) {
          int v31 = 8;
        }
        unsigned int v366 = v31;
        uint64_t v359 = a2 + (v29 - v362) * v25;
        do
        {
          unsigned int v33 = 16 * v30;
          unsigned int v34 = 16 * (v30 + 1) - 1;
          if (16 * v30 <= a7) {
            int v35 = a7;
          }
          else {
            int v35 = 16 * v30;
          }
          if (v354 < v34) {
            unsigned int v34 = v354;
          }
          int v36 = v34 - v35 + 1;
          if (v30 == v365) {
            unsigned int v37 = v364;
          }
          else {
            unsigned int v37 = 16;
          }
          BOOL v38 = 1;
          if (v361 >= v362 && v33 >= a7)
          {
            int v39 = v364;
            if (v30 != v365) {
              int v39 = 16;
            }
            BOOL v38 = v36 != v39 || v360 != v366;
          }
          if (isLevelTiled)
          {
            unsigned int v321 = 0;
            uint64_t v322 = v337 >> (*(unsigned char *)(v16 + 57) != 0);
            char v323 = 1;
            if (v322 > 127)
            {
              if (v322 > 511)
              {
                if (v322 == 512)
                {
                  char v324 = 0;
                  unsigned int v321 = 16;
                  unsigned int v325 = 16;
                }
                else
                {
                  char v324 = 1;
                  unsigned int v325 = 0;
                  if (v322 == 1024)
                  {
                    unsigned int v325 = 8;
                    unsigned int v321 = 16;
                  }
                }
              }
              else if (v322 == 128)
              {
                char v323 = 0;
                char v324 = 0;
                unsigned int v321 = 32;
                unsigned int v325 = 32;
              }
              else
              {
                char v324 = 1;
                unsigned int v325 = 0;
                if (v322 == 256)
                {
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 16;
                  unsigned int v321 = 32;
                }
              }
            }
            else
            {
              char v324 = 1;
              unsigned int v325 = 0;
              switch(v322)
              {
                case 4:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 128;
                  unsigned int v321 = 256;
                  break;
                case 5:
                case 6:
                case 7:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 23:
                case 24:
                case 25:
                case 26:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                  break;
                case 8:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 128;
                  unsigned int v325 = 128;
                  break;
                case 16:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v325 = 64;
                  unsigned int v321 = 128;
                  break;
                case 32:
                  char v323 = 0;
                  char v324 = 0;
                  unsigned int v321 = 64;
                  unsigned int v325 = 64;
                  break;
                default:
                  if (v322 == 64)
                  {
                    char v323 = 0;
                    char v324 = 0;
                    unsigned int v325 = 32;
                    unsigned int v321 = 64;
                  }
                  break;
              }
            }
            unsigned int v326 = (v321 >> 4) - 1;
            if (v323) {
              unsigned int v327 = 0;
            }
            else {
              unsigned int v327 = 32 - __clz(~(-1 << -(char)__clz(v326)));
            }
            unsigned int v328 = (v325 >> 3) - 1;
            if (v324)
            {
              unsigned int v329 = 0;
              if (v327) {
                goto LABEL_234;
              }
            }
            else
            {
              unsigned int v329 = 32 - __clz(~(-1 << -(char)__clz(v328)));
              if (v329 | v327)
              {
LABEL_234:
                int v330 = 0;
                uint64_t v331 = 0;
                int v332 = v30 & v326;
                int v333 = v17 & v328;
                BOOL v334 = v329 != 0;
                BOOL v335 = v327 != 0;
                int v336 = 1;
                do
                {
                  --v329;
                  if (v334) {
                    v331 |= (unint64_t)(v336 & v333) << v330++;
                  }
                  else {
                    unsigned int v329 = 0;
                  }
                  --v327;
                  if (v335) {
                    v331 |= (unint64_t)(v336 & v332) << v330++;
                  }
                  else {
                    unsigned int v327 = 0;
                  }
                  v336 *= 2;
                  --v330;
                  BOOL v335 = v327 != 0;
                  BOOL v334 = v329 != 0;
                }
                while (v327 | v329);
                goto LABEL_246;
              }
            }
            uint64_t v331 = 0;
LABEL_246:
            unint64_t v48 = ((unint64_t)(v33 / v321 + v361 / v325 * ((v321 + v338) / v321)) << 14) + (v331 << 10);
            goto LABEL_60;
          }
          if (v352)
          {
            int v41 = 0;
            uint64_t v42 = 0;
            int v43 = 1;
            BOOL v44 = v350;
            BOOL v45 = v349;
            __int32 v46 = v351.i32[0];
            __int32 v47 = v351.i32[1];
            do
            {
              --v46;
              if (v44) {
                v42 |= (unint64_t)(v43 & v17) << v41++;
              }
              else {
                __int32 v46 = 0;
              }
              --v47;
              if (v45) {
                v42 |= (unint64_t)(v43 & v30) << v41++;
              }
              else {
                __int32 v47 = 0;
              }
              v43 *= 2;
              --v41;
              BOOL v45 = v47 != 0;
              BOOL v44 = v46 != 0;
            }
            while (v47 | v46);
          }
          else
          {
            uint64_t v42 = 0;
          }
          unint64_t v48 = v42 << 10;
LABEL_60:
          unsigned int v49 = *(_DWORD *)(v16 + 128) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v49 <= 1) {
            unsigned int v49 = 1;
          }
          unsigned int v50 = v49 + 15;
          if (v50 < 0x20) {
            unsigned int v51 = 0;
          }
          else {
            unsigned int v51 = 32 - __clz(~(-1 << -(char)__clz((v50 >> 4) - 1)));
          }
          unsigned int v52 = *(_DWORD *)(v16 + 132) >> (*(unsigned char *)(v16 + 144) + a12);
          if (v52 <= 1) {
            unsigned int v52 = 1;
          }
          unsigned int v53 = v52 + 7;
          if (v53 < 0x10) {
            unsigned int v54 = 0;
          }
          else {
            unsigned int v54 = 32 - __clz(~(-1 << -(char)__clz((v53 >> 3) - 1)));
          }
          if (v54 | v51)
          {
            int v55 = 0;
            unint64_t v56 = 0;
            BOOL v57 = v51 != 0;
            BOOL v58 = v54 != 0;
            int v59 = 1;
            do
            {
              --v51;
              BOOL v60 = !v57;
              if (v57)
              {
                unint64_t v61 = ((unint64_t)(v59 & v30) << v55) | v56;
              }
              else
              {
                unsigned int v51 = 0;
                unint64_t v61 = v56;
              }
              if (!v60) {
                ++v55;
              }
              --v54;
              if (v58)
              {
                unint64_t v56 = ((unint64_t)(v59 & v17) << v55) | v61;
              }
              else
              {
                unsigned int v54 = 0;
                unint64_t v56 = v61;
              }
              if (v58) {
                ++v55;
              }
              v59 *= 2;
              --v55;
              BOOL v58 = v54 != 0;
              BOOL v57 = v51 != 0;
            }
            while (v54 | v51);
          }
          else
          {
            unint64_t v56 = 0;
          }
          __int32 v62 = (float32x4_t *)(a3 + v48);
          if (v356)
          {
            memcpy(__dst, v62, sizeof(__dst));
            __int32 v62 = (float32x4_t *)__dst;
          }
          __int32 v63 = (unsigned __int8 *)(a4 + 8 * v56);
          uint64_t v64 = v359 + 8 * (v35 - a7);
          char v65 = v37 < 0x10 || v38;
          if ((v65 & 1) == 0 && v366 > 7)
          {
            unsigned int v66 = *v63;
            if (v66 == 127)
            {
              float32x4_t v78 = v62[1];
              float32x4_t v79 = v62[2];
              float32x4_t v80 = v62[3];
              float32x4_t v81 = v62[5];
              float32x4_t v82 = v62[6];
              float32x4_t v83 = v62[7];
              float32x4_t v84 = v62[4];
              uint64_t v67 = 2 * a11;
              *(float32x4_t *)uint64_t v64 = *v62;
              *(float32x4_t *)(v64 + 16) = v79;
              unsigned int v85 = (float32x4_t *)(v64 + v346);
              uint64_t v25 = a11;
              uint64_t v86 = (float32x4_t *)(v64 + a11);
              *uint64_t v86 = v78;
              v86[1] = v80;
              float32x4_t *v85 = v84;
              v85[1] = v82;
              uint64_t v87 = (float32x4_t *)(v64 + v346 + a11);
              *uint64_t v87 = v81;
              v87[1] = v83;
              uint64_t v68 = 128;
            }
            else
            {
              uint64_t v25 = a11;
              uint64_t v67 = 2 * a11;
              if (v66 == 3)
              {
                float32x4_t v74 = vld1q_dup_f32(v62->f32);
                *(float32x4_t *)uint64_t v64 = v74;
                *(float32x4_t *)(v64 + 16) = v74;
                int v75 = (float32x4_t *)(v64 + a11);
                *int v75 = v74;
                v75[1] = v74;
                BOOL v76 = (float32x4_t *)(v64 + v346);
                *BOOL v76 = v74;
                v76[1] = v74;
                unint64_t v77 = (float32x4_t *)(v64 + v345);
                *unint64_t v77 = v74;
                v77[1] = v74;
                uint64_t v68 = 4;
              }
              else if (*v63)
              {
                uint64_t v68 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)v64, a11, (uint64_t)v62, v66);
              }
              else
              {
                uint64_t v68 = 0;
                *(_OWORD *)uint64_t v64 = 0u;
                *(_OWORD *)(v64 + 16) = 0u;
                unsigned int v69 = (_OWORD *)(v64 + a11);
                *unsigned int v69 = 0u;
                v69[1] = 0u;
                unsigned int v70 = (_OWORD *)(v64 + v346);
                *unsigned int v70 = 0u;
                v70[1] = 0u;
                int v71 = (_OWORD *)(v64 + v345);
                *int v71 = 0u;
                v71[1] = 0u;
              }
            }
            uint64_t v88 = (uint64_t)v62 + v68;
            int32x2_t v89 = (int8x16_t *)(v64 + 32);
            unsigned int v90 = v63[1];
            if (v90 == 127)
            {
              long long v99 = *(_OWORD *)(v88 + 16);
              long long v100 = *(_OWORD *)(v88 + 32);
              long long v101 = *(_OWORD *)(v88 + 48);
              long long v102 = *(_OWORD *)(v88 + 80);
              long long v103 = *(_OWORD *)(v88 + 96);
              long long v104 = *(_OWORD *)(v88 + 112);
              long long v105 = *(_OWORD *)(v88 + 64);
              *int32x2_t v89 = *(int8x16_t *)v88;
              *(_OWORD *)(v64 + 48) = v100;
              unsigned int v106 = &v89->i8[v67];
              uint64_t v107 = &v89->i8[v25];
              *(_OWORD *)uint64_t v107 = v99;
              *((_OWORD *)v107 + 1) = v101;
              *(_OWORD *)unsigned int v106 = v105;
              *((_OWORD *)v106 + 1) = v103;
              unsigned int v108 = &v89->i8[v67 + v25];
              *(_OWORD *)unsigned int v108 = v102;
              *((_OWORD *)v108 + 1) = v104;
              uint64_t v91 = 128;
            }
            else if (v90 == 3)
            {
              float32x4_t v95 = vld1q_dup_f32((const float *)v88);
              *(float32x4_t *)(v64 + 32) = v95;
              *(float32x4_t *)(v64 + 48) = v95;
              unint64_t v96 = (float32x4_t *)&v89->i8[v25];
              *unint64_t v96 = v95;
              v96[1] = v95;
              long long v97 = (float32x4_t *)&v89->i8[v67];
              *long long v97 = v95;
              v97[1] = v95;
              long long v98 = (float32x4_t *)&v89->i8[v345];
              *long long v98 = v95;
              v98[1] = v95;
              uint64_t v91 = 4;
            }
            else if (v63[1])
            {
              uint64_t v91 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v89, v25, v88, v90);
            }
            else
            {
              uint64_t v91 = 0;
              *int32x2_t v89 = 0u;
              *(_OWORD *)(v64 + 48) = 0u;
              uint64_t v92 = &v89->i8[v25];
              *(_OWORD *)uint64_t v92 = 0u;
              *((_OWORD *)v92 + 1) = 0u;
              float32x4_t v93 = &v89->i8[v67];
              *(_OWORD *)float32x4_t v93 = 0u;
              *((_OWORD *)v93 + 1) = 0u;
              int8x8_t v94 = &v89->i8[v345];
              *(_OWORD *)int8x8_t v94 = 0u;
              *((_OWORD *)v94 + 1) = 0u;
            }
            uint64_t v109 = v88 + v91;
            uint64_t v110 = (int8x16_t *)(v64 + v347);
            unsigned int v111 = v63[2];
            if (v111 == 127)
            {
              long long v120 = *(_OWORD *)(v109 + 16);
              int8x16_t v121 = *(int8x16_t *)(v109 + 32);
              long long v122 = *(_OWORD *)(v109 + 48);
              long long v123 = *(_OWORD *)(v109 + 80);
              long long v124 = *(_OWORD *)(v109 + 96);
              long long v125 = *(_OWORD *)(v109 + 112);
              long long v126 = *(_OWORD *)(v109 + 64);
              *uint64_t v110 = *(int8x16_t *)v109;
              v110[1] = v121;
              int v127 = &v110->i8[v67];
              uint64_t v128 = &v110->i8[v25];
              *(_OWORD *)uint64_t v128 = v120;
              *((_OWORD *)v128 + 1) = v122;
              *(_OWORD *)int v127 = v126;
              *((_OWORD *)v127 + 1) = v124;
              unsigned int v129 = &v110->i8[v67 + v25];
              *(_OWORD *)unsigned int v129 = v123;
              *((_OWORD *)v129 + 1) = v125;
              uint64_t v112 = 128;
            }
            else if (v111 == 3)
            {
              float32x4_t v116 = vld1q_dup_f32((const float *)v109);
              *uint64_t v110 = (int8x16_t)v116;
              v110[1] = (int8x16_t)v116;
              unint64_t v117 = (float32x4_t *)&v110->i8[v25];
              *unint64_t v117 = v116;
              v117[1] = v116;
              long long v118 = (float32x4_t *)&v110->i8[v67];
              *long long v118 = v116;
              v118[1] = v116;
              long long v119 = (float32x4_t *)&v110->i8[v345];
              *long long v119 = v116;
              v119[1] = v116;
              uint64_t v112 = 4;
            }
            else if (v63[2])
            {
              uint64_t v112 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int8x16_t *)(v64 + v347), v25, v109, v111);
            }
            else
            {
              uint64_t v112 = 0;
              *uint64_t v110 = 0u;
              v110[1] = 0u;
              int32x2_t v113 = &v110->i8[v25];
              *(_OWORD *)int32x2_t v113 = 0u;
              *((_OWORD *)v113 + 1) = 0u;
              float32x4_t v114 = &v110->i8[v67];
              *(_OWORD *)float32x4_t v114 = 0u;
              *((_OWORD *)v114 + 1) = 0u;
              int8x8_t v115 = &v110->i8[v345];
              *(_OWORD *)int8x8_t v115 = 0u;
              *((_OWORD *)v115 + 1) = 0u;
            }
            uint64_t v130 = v109 + v112;
            uint64_t v131 = v110 + 2;
            unsigned int v132 = v63[3];
            if (v132 == 127)
            {
              long long v141 = *(_OWORD *)(v130 + 16);
              int8x16_t v142 = *(int8x16_t *)(v130 + 32);
              long long v143 = *(_OWORD *)(v130 + 48);
              long long v144 = *(_OWORD *)(v130 + 80);
              long long v145 = *(_OWORD *)(v130 + 96);
              long long v146 = *(_OWORD *)(v130 + 112);
              long long v147 = *(_OWORD *)(v130 + 64);
              *uint64_t v131 = *(int8x16_t *)v130;
              v110[3] = v142;
              uint64_t v148 = &v131->i8[v67];
              uint64_t v149 = &v131->i8[v25];
              *(_OWORD *)uint64_t v149 = v141;
              *((_OWORD *)v149 + 1) = v143;
              *(_OWORD *)uint64_t v148 = v147;
              *((_OWORD *)v148 + 1) = v145;
              int8x8_t v150 = &v131->i8[v67 + v25];
              *(_OWORD *)int8x8_t v150 = v144;
              *((_OWORD *)v150 + 1) = v146;
              uint64_t v133 = 128;
            }
            else if (v132 == 3)
            {
              float32x4_t v137 = vld1q_dup_f32((const float *)v130);
              float32x4_t v110[2] = (int8x16_t)v137;
              v110[3] = (int8x16_t)v137;
              int v138 = (float32x4_t *)&v131->i8[v25];
              *int v138 = v137;
              v138[1] = v137;
              long long v139 = (float32x4_t *)&v131->i8[v67];
              *long long v139 = v137;
              v139[1] = v137;
              int8x16_t v140 = (float32x4_t *)&v131->i8[v345];
              *int8x16_t v140 = v137;
              v140[1] = v137;
              uint64_t v133 = 4;
            }
            else if (v63[3])
            {
              uint64_t v133 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v131, v25, v130, v132);
            }
            else
            {
              uint64_t v133 = 0;
              *uint64_t v131 = 0u;
              v110[3] = 0u;
              int32x2_t v134 = &v131->i8[v25];
              *(_OWORD *)int32x2_t v134 = 0u;
              *((_OWORD *)v134 + 1) = 0u;
              float32x4_t v135 = &v131->i8[v67];
              *(_OWORD *)float32x4_t v135 = 0u;
              *((_OWORD *)v135 + 1) = 0u;
              int8x8_t v136 = &v131->i8[v345];
              *(_OWORD *)int8x8_t v136 = 0u;
              *((_OWORD *)v136 + 1) = 0u;
            }
            uint64_t v151 = v130 + v133;
            uint64_t v152 = (int8x16_t *)(v64 + 64);
            unsigned int v153 = v63[4];
            if (v153 == 127)
            {
              long long v162 = *(_OWORD *)(v151 + 16);
              long long v163 = *(_OWORD *)(v151 + 32);
              long long v164 = *(_OWORD *)(v151 + 48);
              long long v165 = *(_OWORD *)(v151 + 80);
              long long v166 = *(_OWORD *)(v151 + 96);
              long long v167 = *(_OWORD *)(v151 + 112);
              long long v168 = *(_OWORD *)(v151 + 64);
              *uint64_t v152 = *(int8x16_t *)v151;
              *(_OWORD *)(v64 + 80) = v163;
              unsigned int v169 = &v152->i8[v67];
              uint64_t v170 = &v152->i8[v25];
              *(_OWORD *)uint64_t v170 = v162;
              *((_OWORD *)v170 + 1) = v164;
              *(_OWORD *)unsigned int v169 = v168;
              *((_OWORD *)v169 + 1) = v166;
              int32x2_t v171 = &v152->i8[v67 + v25];
              *(_OWORD *)int32x2_t v171 = v165;
              *((_OWORD *)v171 + 1) = v167;
              uint64_t v154 = 128;
            }
            else if (v153 == 3)
            {
              float32x4_t v158 = vld1q_dup_f32((const float *)v151);
              *(float32x4_t *)(v64 + 64) = v158;
              *(float32x4_t *)(v64 + 80) = v158;
              uint64_t v159 = (float32x4_t *)&v152->i8[v25];
              float32x4_t *v159 = v158;
              v159[1] = v158;
              long long v160 = (float32x4_t *)&v152->i8[v67];
              *long long v160 = v158;
              v160[1] = v158;
              int8x16_t v161 = (float32x4_t *)&v152->i8[v345];
              *int8x16_t v161 = v158;
              v161[1] = v158;
              uint64_t v154 = 4;
            }
            else if (v63[4])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v25, v151, v153);
            }
            else
            {
              uint64_t v154 = 0;
              *uint64_t v152 = 0u;
              *(_OWORD *)(v64 + 80) = 0u;
              int32x2_t v155 = &v152->i8[v25];
              *(_OWORD *)int32x2_t v155 = 0u;
              *((_OWORD *)v155 + 1) = 0u;
              float32x4_t v156 = &v152->i8[v67];
              *(_OWORD *)float32x4_t v156 = 0u;
              *((_OWORD *)v156 + 1) = 0u;
              int32x2_t v157 = &v152->i8[v345];
              *(_OWORD *)int32x2_t v157 = 0u;
              *((_OWORD *)v157 + 1) = 0u;
            }
            uint64_t v172 = v151 + v154;
            uint64_t v173 = (int8x16_t *)(v64 + 96);
            unsigned int v174 = v63[5];
            if (v174 == 127)
            {
              long long v183 = *(_OWORD *)(v172 + 16);
              long long v184 = *(_OWORD *)(v172 + 32);
              long long v185 = *(_OWORD *)(v172 + 48);
              long long v186 = *(_OWORD *)(v172 + 80);
              long long v187 = *(_OWORD *)(v172 + 96);
              long long v188 = *(_OWORD *)(v172 + 112);
              long long v189 = *(_OWORD *)(v172 + 64);
              int8x16_t *v173 = *(int8x16_t *)v172;
              *(_OWORD *)(v64 + 112) = v184;
              unsigned int v190 = &v173->i8[v67];
              uint64_t v191 = &v173->i8[v25];
              *(_OWORD *)uint64_t v191 = v183;
              *((_OWORD *)v191 + 1) = v185;
              *(_OWORD *)unsigned int v190 = v189;
              *((_OWORD *)v190 + 1) = v187;
              int32x2_t v192 = &v173->i8[v67 + v25];
              *(_OWORD *)int32x2_t v192 = v186;
              *((_OWORD *)v192 + 1) = v188;
              uint64_t v175 = 128;
            }
            else if (v174 == 3)
            {
              float32x4_t v179 = vld1q_dup_f32((const float *)v172);
              *(float32x4_t *)(v64 + 96) = v179;
              *(float32x4_t *)(v64 + 112) = v179;
              int32x2_t v180 = (float32x4_t *)&v173->i8[v25];
              float32x4_t *v180 = v179;
              v180[1] = v179;
              long long v181 = (float32x4_t *)&v173->i8[v67];
              *long long v181 = v179;
              v181[1] = v179;
              long long v182 = (float32x4_t *)&v173->i8[v345];
              *long long v182 = v179;
              v182[1] = v179;
              uint64_t v175 = 4;
            }
            else if (v63[5])
            {
              uint64_t v175 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v173, v25, v172, v174);
            }
            else
            {
              uint64_t v175 = 0;
              int8x16_t *v173 = 0u;
              *(_OWORD *)(v64 + 112) = 0u;
              unsigned int v176 = &v173->i8[v25];
              *(_OWORD *)unsigned int v176 = 0u;
              *((_OWORD *)v176 + 1) = 0u;
              float32x4_t v177 = &v173->i8[v67];
              *(_OWORD *)float32x4_t v177 = 0u;
              *((_OWORD *)v177 + 1) = 0u;
              int32x2_t v178 = &v173->i8[v345];
              *(_OWORD *)int32x2_t v178 = 0u;
              *((_OWORD *)v178 + 1) = 0u;
            }
            a7 = v353;
            uint64_t v193 = v172 + v175;
            uint64_t v194 = v110 + 4;
            unsigned int v195 = v63[6];
            if (v195 == 127)
            {
              long long v204 = *(_OWORD *)(v193 + 16);
              int8x16_t v205 = *(int8x16_t *)(v193 + 32);
              long long v206 = *(_OWORD *)(v193 + 48);
              long long v207 = *(_OWORD *)(v193 + 80);
              long long v208 = *(_OWORD *)(v193 + 96);
              long long v209 = *(_OWORD *)(v193 + 112);
              long long v210 = *(_OWORD *)(v193 + 64);
              *uint64_t v194 = *(int8x16_t *)v193;
              v110[5] = v205;
              unsigned int v211 = &v194->i8[v67];
              uint64_t v212 = &v194->i8[v25];
              *(_OWORD *)uint64_t v212 = v204;
              *((_OWORD *)v212 + 1) = v206;
              *(_OWORD *)unsigned int v211 = v210;
              *((_OWORD *)v211 + 1) = v208;
              int32x2_t v213 = &v194->i8[v67 + v25];
              *(_OWORD *)int32x2_t v213 = v207;
              *((_OWORD *)v213 + 1) = v209;
              uint64_t v196 = 128;
            }
            else if (v195 == 3)
            {
              float32x4_t v200 = vld1q_dup_f32((const float *)v193);
              v110[4] = (int8x16_t)v200;
              v110[5] = (int8x16_t)v200;
              int32x2_t v201 = (float32x4_t *)&v194->i8[v25];
              *int32x2_t v201 = v200;
              v201[1] = v200;
              long long v202 = (float32x4_t *)&v194->i8[v67];
              *long long v202 = v200;
              v202[1] = v200;
              long long v203 = (float32x4_t *)&v194->i8[v345];
              *long long v203 = v200;
              v203[1] = v200;
              uint64_t v196 = 4;
            }
            else if (v63[6])
            {
              uint64_t v196 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v194, v25, v193, v195);
            }
            else
            {
              uint64_t v196 = 0;
              *uint64_t v194 = 0u;
              v110[5] = 0u;
              unsigned int v197 = &v194->i8[v25];
              *(_OWORD *)unsigned int v197 = 0u;
              *((_OWORD *)v197 + 1) = 0u;
              float32x4_t v198 = &v194->i8[v67];
              *(_OWORD *)float32x4_t v198 = 0u;
              *((_OWORD *)v198 + 1) = 0u;
              int32x2_t v199 = &v194->i8[v345];
              *(_OWORD *)int32x2_t v199 = 0u;
              *((_OWORD *)v199 + 1) = 0u;
            }
            uint64_t v214 = v193 + v196;
            uint64_t v215 = v110 + 6;
            unsigned int v216 = v63[7];
            if (v216 == 127)
            {
              long long v221 = *(_OWORD *)(v214 + 16);
              int8x16_t v222 = *(int8x16_t *)(v214 + 32);
              long long v223 = *(_OWORD *)(v214 + 48);
              long long v224 = *(_OWORD *)(v214 + 64);
              long long v225 = *(_OWORD *)(v214 + 80);
              long long v226 = *(_OWORD *)(v214 + 96);
              long long v227 = *(_OWORD *)(v214 + 112);
              *uint64_t v215 = *(int8x16_t *)v214;
              v110[7] = v222;
              long long v228 = &v215->i8[v67];
              long long v229 = &v215->i8[v25];
              *(_OWORD *)long long v229 = v221;
              *((_OWORD *)v229 + 1) = v223;
              *(_OWORD *)long long v228 = v224;
              *((_OWORD *)v228 + 1) = v226;
              BOOL v230 = &v215->i8[v67 + v25];
              *(_OWORD *)BOOL v230 = v225;
              *((_OWORD *)v230 + 1) = v227;
              uint64_t v16 = v363;
            }
            else
            {
              uint64_t v16 = v363;
              if (v216 == 3)
              {
                float32x4_t v217 = vld1q_dup_f32((const float *)v214);
                v110[6] = (int8x16_t)v217;
                v110[7] = (int8x16_t)v217;
LABEL_149:
                unsigned int v218 = (float32x4_t *)&v215->i8[v25];
                *unsigned int v218 = v217;
                v218[1] = v217;
                float32x4_t v219 = (float32x4_t *)&v215->i8[v67];
                *float32x4_t v219 = v217;
                v219[1] = v217;
                uint64_t v220 = (float32x4_t *)&v215->i8[v345];
                *uint64_t v220 = v217;
                v220[1] = v217;
              }
              else
              {
                if (!v216)
                {
                  float32x4_t v217 = 0uLL;
                  *uint64_t v215 = 0u;
                  v110[7] = 0u;
                  goto LABEL_149;
                }
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v215, v25, v214, v216);
              }
            }
LABEL_27:
            unsigned int v32 = v30 + 1;
            goto LABEL_28;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE15ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder2EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v363;
          block[5] = v62;
          char v374 = v37;
          char v375 = v366;
          unsigned int v370 = v348;
          unsigned int v371 = v35 - v33;
          block[6] = v63;
          uint64_t v368 = v64;
          uint64_t v25 = a11;
          uint64_t v369 = a11;
          unsigned int v372 = v360;
          unsigned int v373 = v36;
          if (v38)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v363 + 8) + 7384), block);
            a7 = v353;
            uint64_t v16 = v363;
            goto LABEL_27;
          }
          unsigned int v72 = *v63;
          a7 = v353;
          if (v72 == 127)
          {
            float32x4_t v231 = v62[1];
            float32x4_t v232 = v62[2];
            float32x4_t v233 = v62[3];
            float32x4_t v234 = v62[4];
            float32x4_t v235 = v62[5];
            float32x4_t v236 = v62[6];
            float32x4_t v237 = v62[7];
            int8x16_t v377 = *(int8x16_t *)v62;
            float32x4_t v378 = v232;
            float32x4_t v385 = v231;
            float32x4_t v386 = v233;
            float32x4_t v393 = v234;
            float32x4_t v394 = v236;
            float32x4_t v401 = v235;
            float32x4_t v402 = v237;
            uint64_t v73 = 128;
          }
          else if (v72 == 3)
          {
            float32x4_t v238 = vld1q_dup_f32(v62->f32);
            int8x16_t v377 = (int8x16_t)v238;
            float32x4_t v378 = v238;
            float32x4_t v385 = v238;
            float32x4_t v386 = v238;
            float32x4_t v393 = v238;
            float32x4_t v394 = v238;
            float32x4_t v401 = v238;
            float32x4_t v402 = v238;
            uint64_t v73 = 4;
          }
          else if (*v63)
          {
            uint64_t v73 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v377, 128, (uint64_t)v62, v72);
          }
          else
          {
            uint64_t v73 = 0;
            float32x4_t v378 = 0u;
            int8x16_t v377 = 0u;
            float32x4_t v385 = 0u;
            float32x4_t v386 = 0u;
            float32x4_t v393 = 0u;
            float32x4_t v394 = 0u;
            float32x4_t v401 = 0u;
            float32x4_t v402 = 0u;
          }
          uint64_t v239 = (uint64_t)v62 + v73;
          unsigned int v240 = v63[1];
          if (v240 == 127)
          {
            float32x4_t v242 = *(float32x4_t *)(v239 + 16);
            float32x4_t v243 = *(float32x4_t *)(v239 + 32);
            float32x4_t v244 = *(float32x4_t *)(v239 + 48);
            float32x4_t v245 = *(float32x4_t *)(v239 + 64);
            float32x4_t v246 = *(float32x4_t *)(v239 + 80);
            float32x4_t v247 = *(float32x4_t *)(v239 + 96);
            float32x4_t v248 = *(float32x4_t *)(v239 + 112);
            int8x16_t v379 = *(int8x16_t *)v239;
            float32x4_t v380 = v243;
            float32x4_t v387 = v242;
            float32x4_t v388 = v244;
            float32x4_t v395 = v245;
            float32x4_t v396 = v247;
            float32x4_t v403 = v246;
            float32x4_t v404 = v248;
            uint64_t v241 = 128;
          }
          else if (v240 == 3)
          {
            float32x4_t v249 = vld1q_dup_f32((const float *)v239);
            int8x16_t v379 = (int8x16_t)v249;
            float32x4_t v380 = v249;
            float32x4_t v387 = v249;
            float32x4_t v388 = v249;
            float32x4_t v395 = v249;
            float32x4_t v396 = v249;
            float32x4_t v403 = v249;
            float32x4_t v404 = v249;
            uint64_t v241 = 4;
          }
          else if (v63[1])
          {
            uint64_t v241 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v379, 128, v239, v240);
          }
          else
          {
            uint64_t v241 = 0;
            int8x16_t v379 = 0u;
            float32x4_t v380 = 0u;
            float32x4_t v387 = 0u;
            float32x4_t v388 = 0u;
            float32x4_t v395 = 0u;
            float32x4_t v396 = 0u;
            float32x4_t v403 = 0u;
            float32x4_t v404 = 0u;
          }
          uint64_t v250 = v239 + v241;
          unsigned int v251 = v63[2];
          if (v251 == 127)
          {
            float32x4_t v253 = *(float32x4_t *)(v250 + 16);
            float32x4_t v254 = *(float32x4_t *)(v250 + 32);
            float32x4_t v255 = *(float32x4_t *)(v250 + 48);
            float32x4_t v256 = *(float32x4_t *)(v250 + 64);
            float32x4_t v257 = *(float32x4_t *)(v250 + 80);
            float32x4_t v258 = *(float32x4_t *)(v250 + 96);
            float32x4_t v259 = *(float32x4_t *)(v250 + 112);
            int8x16_t v409 = *(int8x16_t *)v250;
            float32x4_t v410 = v254;
            float32x4_t v417 = v253;
            float32x4_t v418 = v255;
            float32x4_t v425 = v256;
            float32x4_t v426 = v258;
            float32x4_t v433 = v257;
            float32x4_t v434 = v259;
            uint64_t v252 = 128;
          }
          else if (v251 == 3)
          {
            float32x4_t v260 = vld1q_dup_f32((const float *)v250);
            int8x16_t v409 = (int8x16_t)v260;
            float32x4_t v410 = v260;
            float32x4_t v417 = v260;
            float32x4_t v418 = v260;
            float32x4_t v425 = v260;
            float32x4_t v426 = v260;
            float32x4_t v433 = v260;
            float32x4_t v434 = v260;
            uint64_t v252 = 4;
          }
          else if (v63[2])
          {
            uint64_t v252 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v409, 128, v250, v251);
          }
          else
          {
            uint64_t v252 = 0;
            int8x16_t v409 = 0u;
            float32x4_t v410 = 0u;
            float32x4_t v417 = 0u;
            float32x4_t v418 = 0u;
            float32x4_t v425 = 0u;
            float32x4_t v426 = 0u;
            float32x4_t v433 = 0u;
            float32x4_t v434 = 0u;
          }
          uint64_t v261 = v250 + v252;
          unsigned int v262 = v63[3];
          if (v262 == 127)
          {
            float32x4_t v264 = *(float32x4_t *)(v261 + 16);
            float32x4_t v265 = *(float32x4_t *)(v261 + 32);
            float32x4_t v266 = *(float32x4_t *)(v261 + 48);
            float32x4_t v267 = *(float32x4_t *)(v261 + 64);
            float32x4_t v268 = *(float32x4_t *)(v261 + 80);
            float32x4_t v269 = *(float32x4_t *)(v261 + 96);
            float32x4_t v270 = *(float32x4_t *)(v261 + 112);
            int8x16_t v411 = *(int8x16_t *)v261;
            float32x4_t v412 = v265;
            float32x4_t v419 = v264;
            float32x4_t v420 = v266;
            float32x4_t v427 = v267;
            float32x4_t v428 = v269;
            float32x4_t v435 = v268;
            float32x4_t v436 = v270;
            uint64_t v263 = 128;
          }
          else if (v262 == 3)
          {
            float32x4_t v271 = vld1q_dup_f32((const float *)v261);
            int8x16_t v411 = (int8x16_t)v271;
            float32x4_t v412 = v271;
            float32x4_t v419 = v271;
            float32x4_t v420 = v271;
            float32x4_t v427 = v271;
            float32x4_t v428 = v271;
            float32x4_t v435 = v271;
            float32x4_t v436 = v271;
            uint64_t v263 = 4;
          }
          else if (v63[3])
          {
            uint64_t v263 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v411, 128, v261, v262);
          }
          else
          {
            uint64_t v263 = 0;
            int8x16_t v411 = 0u;
            float32x4_t v412 = 0u;
            float32x4_t v419 = 0u;
            float32x4_t v420 = 0u;
            float32x4_t v427 = 0u;
            float32x4_t v428 = 0u;
            float32x4_t v435 = 0u;
            float32x4_t v436 = 0u;
          }
          uint64_t v272 = v261 + v263;
          unsigned int v273 = v63[4];
          if (v273 == 127)
          {
            float32x4_t v275 = *(float32x4_t *)(v272 + 16);
            float32x4_t v276 = *(float32x4_t *)(v272 + 32);
            float32x4_t v277 = *(float32x4_t *)(v272 + 48);
            float32x4_t v278 = *(float32x4_t *)(v272 + 64);
            float32x4_t v279 = *(float32x4_t *)(v272 + 80);
            float32x4_t v280 = *(float32x4_t *)(v272 + 96);
            float32x4_t v281 = *(float32x4_t *)(v272 + 112);
            int8x16_t v381 = *(int8x16_t *)v272;
            float32x4_t v382 = v276;
            float32x4_t v389 = v275;
            float32x4_t v390 = v277;
            float32x4_t v397 = v278;
            float32x4_t v398 = v280;
            float32x4_t v405 = v279;
            float32x4_t v406 = v281;
            uint64_t v274 = 128;
          }
          else if (v273 == 3)
          {
            float32x4_t v282 = vld1q_dup_f32((const float *)v272);
            int8x16_t v381 = (int8x16_t)v282;
            float32x4_t v382 = v282;
            float32x4_t v389 = v282;
            float32x4_t v390 = v282;
            float32x4_t v397 = v282;
            float32x4_t v398 = v282;
            float32x4_t v405 = v282;
            float32x4_t v406 = v282;
            uint64_t v274 = 4;
          }
          else if (v63[4])
          {
            uint64_t v274 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v381, 128, v272, v273);
          }
          else
          {
            uint64_t v274 = 0;
            int8x16_t v381 = 0u;
            float32x4_t v382 = 0u;
            float32x4_t v389 = 0u;
            float32x4_t v390 = 0u;
            float32x4_t v397 = 0u;
            float32x4_t v398 = 0u;
            float32x4_t v405 = 0u;
            float32x4_t v406 = 0u;
          }
          uint64_t v283 = v272 + v274;
          unsigned int v284 = v63[5];
          if (v284 == 127)
          {
            float32x4_t v286 = *(float32x4_t *)(v283 + 16);
            float32x4_t v287 = *(float32x4_t *)(v283 + 32);
            float32x4_t v288 = *(float32x4_t *)(v283 + 48);
            float32x4_t v289 = *(float32x4_t *)(v283 + 64);
            float32x4_t v290 = *(float32x4_t *)(v283 + 80);
            float32x4_t v291 = *(float32x4_t *)(v283 + 96);
            float32x4_t v292 = *(float32x4_t *)(v283 + 112);
            int8x16_t v383 = *(int8x16_t *)v283;
            float32x4_t v384 = v287;
            float32x4_t v391 = v286;
            float32x4_t v392 = v288;
            float32x4_t v399 = v289;
            float32x4_t v400 = v291;
            float32x4_t v407 = v290;
            float32x4_t v408 = v292;
            uint64_t v285 = 128;
          }
          else if (v284 == 3)
          {
            float32x4_t v293 = vld1q_dup_f32((const float *)v283);
            int8x16_t v383 = (int8x16_t)v293;
            float32x4_t v384 = v293;
            float32x4_t v391 = v293;
            float32x4_t v392 = v293;
            float32x4_t v399 = v293;
            float32x4_t v400 = v293;
            float32x4_t v407 = v293;
            float32x4_t v408 = v293;
            uint64_t v285 = 4;
          }
          else if (v63[5])
          {
            uint64_t v285 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v383, 128, v283, v284);
          }
          else
          {
            uint64_t v285 = 0;
            int8x16_t v383 = 0u;
            float32x4_t v384 = 0u;
            float32x4_t v391 = 0u;
            float32x4_t v392 = 0u;
            float32x4_t v399 = 0u;
            float32x4_t v400 = 0u;
            float32x4_t v407 = 0u;
            float32x4_t v408 = 0u;
          }
          uint64_t v294 = v283 + v285;
          unsigned int v295 = v63[6];
          if (v295 == 127)
          {
            float32x4_t v297 = *(float32x4_t *)(v294 + 16);
            float32x4_t v298 = *(float32x4_t *)(v294 + 32);
            float32x4_t v299 = *(float32x4_t *)(v294 + 48);
            float32x4_t v300 = *(float32x4_t *)(v294 + 64);
            float32x4_t v301 = *(float32x4_t *)(v294 + 80);
            float32x4_t v302 = *(float32x4_t *)(v294 + 96);
            float32x4_t v303 = *(float32x4_t *)(v294 + 112);
            int8x16_t v413 = *(int8x16_t *)v294;
            float32x4_t v414 = v298;
            float32x4_t v421 = v297;
            float32x4_t v422 = v299;
            float32x4_t v429 = v300;
            float32x4_t v430 = v302;
            float32x4_t v437 = v301;
            float32x4_t v438 = v303;
            uint64_t v296 = 128;
          }
          else if (v295 == 3)
          {
            float32x4_t v304 = vld1q_dup_f32((const float *)v294);
            int8x16_t v413 = (int8x16_t)v304;
            float32x4_t v414 = v304;
            float32x4_t v421 = v304;
            float32x4_t v422 = v304;
            float32x4_t v429 = v304;
            float32x4_t v430 = v304;
            float32x4_t v437 = v304;
            float32x4_t v438 = v304;
            uint64_t v296 = 4;
          }
          else if (v63[6])
          {
            uint64_t v296 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v413, 128, v294, v295);
          }
          else
          {
            uint64_t v296 = 0;
            int8x16_t v413 = 0u;
            float32x4_t v414 = 0u;
            float32x4_t v421 = 0u;
            float32x4_t v422 = 0u;
            float32x4_t v429 = 0u;
            float32x4_t v430 = 0u;
            float32x4_t v437 = 0u;
            float32x4_t v438 = 0u;
          }
          uint64_t v305 = v294 + v296;
          unsigned int v306 = v63[7];
          if (v306 == 127)
          {
            float32x4_t v307 = *(float32x4_t *)(v305 + 16);
            float32x4_t v308 = *(float32x4_t *)(v305 + 32);
            float32x4_t v309 = *(float32x4_t *)(v305 + 48);
            float32x4_t v310 = *(float32x4_t *)(v305 + 80);
            float32x4_t v311 = *(float32x4_t *)(v305 + 96);
            float32x4_t v312 = *(float32x4_t *)(v305 + 112);
            float32x4_t v313 = *(float32x4_t *)(v305 + 64);
            int8x16_t v415 = *(int8x16_t *)v305;
            float32x4_t v416 = v308;
            float32x4_t v423 = v307;
            float32x4_t v424 = v309;
            float32x4_t v431 = v313;
            float32x4_t v432 = v311;
            float32x4_t v439 = v310;
            float32x4_t v440 = v312;
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
          }
          else
          {
            uint64_t v16 = v363;
            unsigned int v32 = v30 + 1;
            if (v306 == 3)
            {
              float32x4_t v314 = vld1q_dup_f32((const float *)v305);
              int8x16_t v415 = (int8x16_t)v314;
              float32x4_t v416 = v314;
              float32x4_t v423 = v314;
              float32x4_t v424 = v314;
              float32x4_t v431 = v314;
              float32x4_t v432 = v314;
              float32x4_t v439 = v314;
              float32x4_t v440 = v314;
            }
            else if (v306)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v415, 128, v305, v306);
            }
            else
            {
              int8x16_t v415 = 0u;
              float32x4_t v416 = 0u;
              float32x4_t v423 = 0u;
              float32x4_t v424 = 0u;
              float32x4_t v431 = 0u;
              float32x4_t v432 = 0u;
              float32x4_t v439 = 0u;
              float32x4_t v440 = 0u;
            }
          }
          unint64_t v315 = v372;
          if (v372)
          {
            unint64_t v316 = 0;
            float32x4_t v317 = &v377.i8[128 * (unint64_t)v370 + 8 * v371];
            unsigned int v318 = v373;
            do
            {
              if (v318)
              {
                uint64_t v319 = 0;
                uint64_t v320 = v368 + v369 * v316;
                do
                {
                  *(unsigned char *)(v320 + v319) = v317[v319];
                  ++v319;
                  unsigned int v318 = v373;
                }
                while (8 * (unint64_t)v373 > v319);
                unint64_t v315 = v372;
              }
              ++v316;
              v317 += 128;
            }
            while (v316 < v315);
          }
LABEL_28:
          BOOL v21 = v30 == v354 >> 4;
          unsigned int v30 = v32;
        }
        while (!v21);
        BOOL v21 = v17++ == v344;
      }
      while (!v21);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v275 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v209 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v228 >> 3;
  unsigned int v208 = v209 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v222 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v221 = 0;
LABEL_32:
      unsigned int v219 = v27 - 4;
      unsigned int v213 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v206 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v221 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v221 = 0;
  unsigned int v206 = 0;
  unsigned int v213 = 0;
  unsigned int v219 = 0;
LABEL_33:
  if (v21 <= v208)
  {
    unsigned int v220 = a7 + a9 - 1;
    if (a7 >> 4 <= v220 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v231 = v19 >> 4;
      unsigned int v205 = v20 >> 3;
      int v230 = (v19 & 0xF) + 1;
      int v204 = (v20 & 7) + 1;
      uint64_t v217 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v38.i64[0] = 0x2000000010;
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v216 = v39.i32[0] | v39.i32[1];
      uint64_t v212 = v39.i64[0];
      BOOL v211 = v39.i32[0] != 0;
      BOOL v210 = v39.i32[1] != 0;
      uint64_t v229 = a1;
      uint64_t v214 = 3 * a11;
      uint64_t v215 = 2 * a11;
      do
      {
        unsigned int v40 = (8 * v21) | 7;
        if (8 * v21 <= v228) {
          int v41 = v228;
        }
        else {
          int v41 = 8 * v21;
        }
        if (v209 < v40) {
          unsigned int v40 = v209;
        }
        int v218 = v41 - 8 * v21;
        int v226 = v40 - v41 + 1;
        unsigned int v42 = a7 >> 4;
        int v43 = v204;
        if (v21 != v205) {
          int v43 = 8;
        }
        unsigned int v232 = v43;
        uint64_t v44 = v21 & ~(-1 << v213);
        uint64_t v225 = a2 + (v41 - v228) * v34;
        unsigned int v45 = a7;
        do
        {
          unsigned int v47 = 16 * v42;
          unsigned int v48 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v45) {
            int v49 = v45;
          }
          else {
            int v49 = 16 * v42;
          }
          if (v220 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v42 == v231) {
            unsigned int v51 = v230;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v21 >= v228 && v47 >= v45)
          {
            int v53 = v230;
            if (v42 != v231) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v226 != v232;
          }
          if (v221)
          {
            if (v219 | v213)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v213 != 0;
              BOOL v59 = v219 != 0;
              unsigned int v60 = v213;
              unsigned int v61 = v219;
              do
              {
                --v60;
                if (v58) {
                  v56 |= (unint64_t)(v44 & v57) << v55++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v61;
                if (v59) {
                  v56 |= (unint64_t)(v42 & ~(-1 << v219) & v57) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v59 = v61 != 0;
                BOOL v58 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v17 + 320) * ((v42 >> v219) + (v21 >> v213) * v206) + (v56 << 9);
          }
          else
          {
            if (v216)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v211;
              BOOL v66 = v210;
              int v67 = v212;
              int v68 = HIDWORD(v212);
              do
              {
                --v67;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v21) << v62++;
                }
                else {
                  int v67 = 0;
                }
                --v68;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v42) << v62++;
                }
                else {
                  int v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v66 = v68 != 0;
                BOOL v65 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 9;
          }
          unsigned int v70 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_115:
              unint64_t v77 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_115;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v42) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v21) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_116:
          float32x4_t v83 = (unsigned char *)(a3 + v69);
          if (v222)
          {
            uint64_t v84 = v44;
            int v85 = v50;
            BOOL v86 = v52;
            memcpy(__dst, (const void *)(a3 + v69), sizeof(__dst));
            BOOL v52 = v86;
            int v50 = v85;
            uint64_t v44 = v84;
            float32x4_t v83 = __dst;
          }
          uint64_t v87 = (unsigned __int8 *)(a4 + 8 * v77);
          uint64_t v88 = (int64x2_t *)(v225 + 4 * (v49 - v45));
          char v89 = v51 < 0x10 || v52;
          if ((v89 & 1) == 0 && v232 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 63)
            {
              long long v98 = (const double *)(v83 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v98);
              int64x2_t v99 = *(int64x2_t *)v83;
              int64x2_t v36 = *((int64x2_t *)v83 + 1);
              *uint64_t v88 = vzip1q_s64(*(int64x2_t *)v83, v36);
              int64x2_t v38 = vzip2q_s64(v99, v36);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v88 + a11) = v38;
              uint64_t v91 = 2 * a11;
              long long v100 = (int64x2_t *)((char *)v88 + v215);
              *long long v100 = v39;
              *(int64x2_t *)((char *)v100 + a11) = v37;
              uint64_t v92 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 1)
              {
                int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
                *uint64_t v88 = v39;
                *(int64x2_t *)((char *)v88 + a11) = v39;
                *(int64x2_t *)((char *)v88 + 2 * a11) = v39;
                *(int64x2_t *)((char *)v88 + 3 * a11) = v39;
                uint64_t v92 = 2;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v83, v90, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v92 = 0;
                v88->i64[0] = 0;
                v88->i64[1] = 0;
                float32x4_t v93 = (uint64_t *)((char *)v88->i64 + a11);
                *float32x4_t v93 = 0;
                v93[1] = 0;
                int8x8_t v94 = (uint64_t *)((char *)v88->i64 + v215);
                *int8x8_t v94 = 0;
                v94[1] = 0;
                float32x4_t v95 = (uint64_t *)((char *)v88->i64 + v214);
                *float32x4_t v95 = 0;
                v95[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)&v83[v92];
            long long v102 = v88 + 1;
            unsigned int v103 = v87[1];
            if (v103 == 63)
            {
              unsigned int v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v101;
              int64x2_t v36 = *(int64x2_t *)(v101 + 16);
              *long long v102 = vzip1q_s64(*(int64x2_t *)v101, v36);
              int64x2_t v38 = vzip2q_s64(v109, v36);
              *(int64x2_t *)((char *)v102 + v34) = v38;
              uint64_t v110 = (int64x2_t *)((char *)v102 + v91);
              *uint64_t v110 = v39;
              *(int64x2_t *)((char *)v110 + v34) = v37;
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              *long long v102 = v39;
              *(int64x2_t *)((char *)v102 + v34) = v39;
              *(int64x2_t *)((char *)v102 + v91) = v39;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v39;
              uint64_t v104 = 2;
            }
            else if (v87[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v34, v101, v103, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v88[1].i64[1] = 0;
              long long v105 = (uint64_t *)((char *)v102->i64 + v34);
              *long long v105 = 0;
              v105[1] = 0;
              unsigned int v106 = (uint64_t *)((char *)v102->i64 + v91);
              void *v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v214);
              *uint64_t v107 = 0;
              v107[1] = 0;
            }
            uint64_t v111 = v101 + v104;
            uint64_t v112 = (int64x2_t *)((char *)v88 + v217);
            unsigned int v113 = v87[2];
            if (v113 == 63)
            {
              long long v118 = (const double *)(v111 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v118);
              int64x2_t v119 = *(int64x2_t *)v111;
              int64x2_t v36 = *(int64x2_t *)(v111 + 16);
              *uint64_t v112 = vzip1q_s64(*(int64x2_t *)v111, v36);
              int64x2_t v38 = vzip2q_s64(v119, v36);
              *(int64x2_t *)((char *)v112 + v34) = v38;
              long long v120 = (int64x2_t *)((char *)v112 + v91);
              *long long v120 = v39;
              *(int64x2_t *)((char *)v120 + v34) = v37;
              uint64_t v114 = 64;
            }
            else if (v113 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v111);
              *uint64_t v112 = v39;
              *(int64x2_t *)((char *)v112 + v34) = v39;
              *(int64x2_t *)((char *)v112 + v91) = v39;
              *(int64x2_t *)((char *)v112 + 3 * a11) = v39;
              uint64_t v114 = 2;
            }
            else if (v87[2])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v88 + v217), v34, v111, v113, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v114 = 0;
              v112->i64[0] = 0;
              v112->i64[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v112->i64 + v34);
              *int8x8_t v115 = 0;
              v115[1] = 0;
              float32x4_t v116 = (uint64_t *)((char *)v112->i64 + v91);
              *float32x4_t v116 = 0;
              v116[1] = 0;
              unint64_t v117 = (uint64_t *)((char *)v112->i64 + v214);
              *unint64_t v117 = 0;
              v117[1] = 0;
            }
            uint64_t v121 = v111 + v114;
            long long v122 = v112 + 1;
            unsigned int v123 = v87[3];
            if (v123 == 63)
            {
              uint64_t v128 = (const double *)(v121 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v128);
              int64x2_t v129 = *(int64x2_t *)v121;
              int64x2_t v36 = *(int64x2_t *)(v121 + 16);
              *long long v122 = vzip1q_s64(*(int64x2_t *)v121, v36);
              int64x2_t v38 = vzip2q_s64(v129, v36);
              *(int64x2_t *)((char *)v122 + v34) = v38;
              uint64_t v130 = (int64x2_t *)((char *)v122 + v91);
              *uint64_t v130 = v39;
              *(int64x2_t *)((char *)v130 + v34) = v37;
              uint64_t v124 = 64;
            }
            else if (v123 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v121);
              *long long v122 = v39;
              *(int64x2_t *)((char *)v122 + v34) = v39;
              *(int64x2_t *)((char *)v122 + v91) = v39;
              *(int64x2_t *)((char *)v122 + 3 * a11) = v39;
              uint64_t v124 = 2;
            }
            else if (v87[3])
            {
              uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v122, v34, v121, v123, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v124 = 0;
              v122->i64[0] = 0;
              v112[1].i64[1] = 0;
              long long v125 = (uint64_t *)((char *)v122->i64 + v34);
              *long long v125 = 0;
              v125[1] = 0;
              long long v126 = (uint64_t *)((char *)v122->i64 + v91);
              *long long v126 = 0;
              v126[1] = 0;
              int v127 = (uint64_t *)((char *)v122->i64 + v214);
              *int v127 = 0;
              v127[1] = 0;
            }
            uint64_t v131 = v121 + v124;
            unsigned int v132 = v88 + 2;
            unsigned int v133 = v87[4];
            if (v133 == 63)
            {
              int v138 = (const double *)(v131 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v138);
              int64x2_t v139 = *(int64x2_t *)v131;
              int64x2_t v36 = *(int64x2_t *)(v131 + 16);
              *unsigned int v132 = vzip1q_s64(*(int64x2_t *)v131, v36);
              int64x2_t v38 = vzip2q_s64(v139, v36);
              *(int64x2_t *)((char *)v132 + v34) = v38;
              int8x16_t v140 = (int64x2_t *)((char *)v132 + v91);
              *int8x16_t v140 = v39;
              *(int64x2_t *)((char *)v140 + v34) = v37;
              uint64_t v134 = 64;
            }
            else if (v133 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v131);
              *unsigned int v132 = v39;
              *(int64x2_t *)((char *)v132 + v34) = v39;
              *(int64x2_t *)((char *)v132 + v91) = v39;
              *(int64x2_t *)((char *)v132 + 3 * a11) = v39;
              uint64_t v134 = 2;
            }
            else if (v87[4])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v34, v131, v133, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v134 = 0;
              v132->i64[0] = 0;
              v88[2].i64[1] = 0;
              float32x4_t v135 = (uint64_t *)((char *)v132->i64 + v34);
              *float32x4_t v135 = 0;
              v135[1] = 0;
              int8x8_t v136 = (uint64_t *)((char *)v132->i64 + v91);
              *int8x8_t v136 = 0;
              v136[1] = 0;
              float32x4_t v137 = (uint64_t *)((char *)v132->i64 + v214);
              *float32x4_t v137 = 0;
              v137[1] = 0;
            }
            uint64_t v141 = v131 + v134;
            int8x16_t v142 = v88 + 3;
            unsigned int v143 = v87[5];
            if (v143 == 63)
            {
              uint64_t v148 = (const double *)(v141 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v148);
              int64x2_t v149 = *(int64x2_t *)v141;
              int64x2_t v36 = *(int64x2_t *)(v141 + 16);
              *int8x16_t v142 = vzip1q_s64(*(int64x2_t *)v141, v36);
              int64x2_t v38 = vzip2q_s64(v149, v36);
              *(int64x2_t *)((char *)v142 + v34) = v38;
              int8x8_t v150 = (int64x2_t *)((char *)v142 + v91);
              *int8x8_t v150 = v39;
              *(int64x2_t *)((char *)v150 + v34) = v37;
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v141);
              *int8x16_t v142 = v39;
              *(int64x2_t *)((char *)v142 + v34) = v39;
              *(int64x2_t *)((char *)v142 + v91) = v39;
              *(int64x2_t *)((char *)v142 + 3 * a11) = v39;
              uint64_t v144 = 2;
            }
            else if (v87[5])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v34, v141, v143, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v88[3].i64[1] = 0;
              long long v145 = (uint64_t *)((char *)v142->i64 + v34);
              *long long v145 = 0;
              v145[1] = 0;
              long long v146 = (uint64_t *)((char *)v142->i64 + v91);
              *long long v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v214);
              *long long v147 = 0;
              v147[1] = 0;
            }
            uint64_t v151 = v141 + v144;
            uint64_t v152 = v112 + 2;
            unsigned int v153 = v87[6];
            if (v153 == 63)
            {
              float32x4_t v158 = (const double *)(v151 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v158);
              int64x2_t v159 = *(int64x2_t *)v151;
              int64x2_t v36 = *(int64x2_t *)(v151 + 16);
              *uint64_t v152 = vzip1q_s64(*(int64x2_t *)v151, v36);
              int64x2_t v38 = vzip2q_s64(v159, v36);
              *(int64x2_t *)((char *)v152 + v34) = v38;
              long long v160 = (int64x2_t *)((char *)v152 + v91);
              *long long v160 = v39;
              *(int64x2_t *)((char *)v160 + v34) = v37;
              uint64_t v154 = 64;
            }
            else if (v153 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v151);
              *uint64_t v152 = v39;
              *(int64x2_t *)((char *)v152 + v34) = v39;
              *(int64x2_t *)((char *)v152 + v91) = v39;
              *(int64x2_t *)((char *)v152 + 3 * a11) = v39;
              uint64_t v154 = 2;
            }
            else if (v87[6])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v34, v141 + v144, v153, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v154 = 0;
              v152->i64[0] = 0;
              v112[2].i64[1] = 0;
              int32x2_t v155 = (uint64_t *)((char *)v152->i64 + v34);
              *int32x2_t v155 = 0;
              v155[1] = 0;
              float32x4_t v156 = (uint64_t *)((char *)v152->i64 + v91);
              *float32x4_t v156 = 0;
              v156[1] = 0;
              int32x2_t v157 = (uint64_t *)((char *)v152->i64 + v214);
              *int32x2_t v157 = 0;
              v157[1] = 0;
            }
            uint64_t v161 = v151 + v154;
            long long v162 = v112 + 3;
            unsigned int v163 = v87[7];
            if (v163 == 63)
            {
              long long v167 = (const double *)(v161 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v167);
              int64x2_t v168 = *(int64x2_t *)v161;
              int64x2_t v36 = *(int64x2_t *)(v161 + 16);
              *long long v162 = vzip1q_s64(*(int64x2_t *)v161, v36);
              int64x2_t v38 = vzip2q_s64(v168, v36);
              *(int64x2_t *)((char *)v162 + v34) = v38;
              unsigned int v169 = (int64x2_t *)((char *)v162 + v91);
              *unsigned int v169 = v39;
              *(int64x2_t *)((char *)v169 + v34) = v37;
              unsigned int v45 = a7;
              uint64_t v17 = v229;
            }
            else
            {
              unsigned int v45 = a7;
              uint64_t v17 = v229;
              if (v163 == 1)
              {
                int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v161);
                *long long v162 = v39;
                *(int64x2_t *)((char *)v162 + v34) = v39;
                *(int64x2_t *)((char *)v162 + v91) = v39;
                *(int64x2_t *)((char *)v162 + 3 * a11) = v39;
              }
              else if (v163)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v162, v34, v161, v163, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v162->i64[0] = 0;
                v112[3].i64[1] = 0;
                long long v164 = (uint64_t *)((char *)v162->i64 + v34);
                *long long v164 = 0;
                v164[1] = 0;
                long long v165 = (uint64_t *)((char *)v162->i64 + v91);
                *long long v165 = 0;
                v165[1] = 0;
                long long v166 = (uint64_t *)((char *)v162->i64 + v214);
                void *v166 = 0;
                v166[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh0ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v229;
          block[5] = v83;
          char v240 = v51;
          char v241 = v232;
          unsigned int v236 = v218;
          unsigned int v237 = v49 - v47;
          block[6] = v87;
          float32x4_t v234 = v88;
          uint64_t v34 = a11;
          uint64_t v235 = a11;
          unsigned int v238 = v226;
          unsigned int v239 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v229 + 8) + 7384), block);
            unsigned int v45 = a7;
            uint64_t v17 = v229;
LABEL_47:
            unsigned int v46 = v42 + 1;
            goto LABEL_48;
          }
          unsigned int v96 = *v87;
          if (v96 == 63)
          {
            int64x2_t v37 = *((int64x2_t *)v83 + 1);
            uint64_t v170 = (const double *)(v83 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v170);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v83, v37);
            int64x2_t v243 = vzip1q_s64(*(int64x2_t *)v83, v37);
            int64x2_t v247 = v39;
            int64x2_t v251 = v38;
            int64x2_t v255 = v36;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
            int64x2_t v243 = v39;
            int64x2_t v247 = v39;
            int64x2_t v251 = v39;
            int64x2_t v255 = v39;
            uint64_t v97 = 2;
          }
          else if (*v87)
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, (uint64_t)v83, v96, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v97 = 0;
            int64x2_t v243 = 0uLL;
            int64x2_t v247 = 0uLL;
            int64x2_t v251 = 0uLL;
            int64x2_t v255 = 0uLL;
          }
          uint64_t v171 = (uint64_t)&v83[v97];
          unsigned int v172 = v87[1];
          if (v172 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v171 + 16);
            unsigned int v174 = (const double *)(v171 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v174);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v171, v37);
            int64x2_t v244 = vzip1q_s64(*(int64x2_t *)v171, v37);
            int64x2_t v248 = v39;
            int64x2_t v252 = v38;
            int64x2_t v256 = v36;
            uint64_t v173 = 64;
          }
          else if (v172 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v171);
            int64x2_t v244 = v39;
            int64x2_t v248 = v39;
            int64x2_t v252 = v39;
            int64x2_t v256 = v39;
            uint64_t v173 = 2;
          }
          else if (v87[1])
          {
            uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v171, v172, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v173 = 0;
            int64x2_t v244 = 0uLL;
            int64x2_t v248 = 0uLL;
            int64x2_t v252 = 0uLL;
            int64x2_t v256 = 0uLL;
          }
          uint64_t v175 = v171 + v173;
          unsigned int v176 = v87[2];
          if (v176 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v175 + 16);
            int32x2_t v178 = (const double *)(v175 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v178);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v175, v37);
            int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v175, v37);
            int64x2_t v263 = v39;
            int64x2_t v267 = v38;
            int64x2_t v271 = v36;
            uint64_t v177 = 64;
          }
          else if (v176 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v175);
            int64x2_t v259 = v39;
            int64x2_t v263 = v39;
            int64x2_t v267 = v39;
            int64x2_t v271 = v39;
            uint64_t v177 = 2;
          }
          else if (v87[2])
          {
            uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v175, v176, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v177 = 0;
            int64x2_t v259 = 0uLL;
            int64x2_t v263 = 0uLL;
            int64x2_t v267 = 0uLL;
            int64x2_t v271 = 0uLL;
          }
          uint64_t v179 = v175 + v177;
          unsigned int v180 = v87[3];
          if (v180 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v179 + 16);
            long long v182 = (const double *)(v179 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v182);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v179, v37);
            int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v179, v37);
            int64x2_t v264 = v39;
            int64x2_t v268 = v38;
            int64x2_t v272 = v36;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v179);
            int64x2_t v260 = v39;
            int64x2_t v264 = v39;
            int64x2_t v268 = v39;
            int64x2_t v272 = v39;
            uint64_t v181 = 2;
          }
          else if (v87[3])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v179, v180, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v183 = v179 + v181;
          unsigned int v184 = v87[4];
          if (v184 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v183 + 16);
            long long v186 = (const double *)(v183 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v186);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v183, v37);
            int64x2_t v245 = vzip1q_s64(*(int64x2_t *)v183, v37);
            int64x2_t v249 = v39;
            int64x2_t v253 = v38;
            int64x2_t v257 = v36;
            uint64_t v185 = 64;
          }
          else if (v184 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v183);
            int64x2_t v245 = v39;
            int64x2_t v249 = v39;
            int64x2_t v253 = v39;
            int64x2_t v257 = v39;
            uint64_t v185 = 2;
          }
          else if (v87[4])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 64, v183, v184, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v185 = 0;
            int64x2_t v245 = 0uLL;
            int64x2_t v249 = 0uLL;
            int64x2_t v253 = 0uLL;
            int64x2_t v257 = 0uLL;
          }
          uint64_t v187 = v183 + v185;
          unsigned int v188 = v87[5];
          if (v188 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v187 + 16);
            unsigned int v190 = (const double *)(v187 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v190);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v187, v37);
            int64x2_t v246 = vzip1q_s64(*(int64x2_t *)v187, v37);
            int64x2_t v250 = v39;
            int64x2_t v254 = v38;
            int64x2_t v258 = v36;
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v246 = v39;
            int64x2_t v250 = v39;
            int64x2_t v254 = v39;
            int64x2_t v258 = v39;
            uint64_t v189 = 2;
          }
          else if (v87[5])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 64, v187, v188, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v246 = 0uLL;
            int64x2_t v250 = 0uLL;
            int64x2_t v254 = 0uLL;
            int64x2_t v258 = 0uLL;
          }
          uint64_t v191 = v187 + v189;
          unsigned int v192 = v87[6];
          if (v192 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v191 + 16);
            uint64_t v194 = (const double *)(v191 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v194);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v191, v37);
            int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v191, v37);
            int64x2_t v265 = v39;
            int64x2_t v269 = v38;
            int64x2_t v273 = v36;
            uint64_t v193 = 64;
          }
          else if (v192 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v191);
            int64x2_t v261 = v39;
            int64x2_t v265 = v39;
            int64x2_t v269 = v39;
            int64x2_t v273 = v39;
            uint64_t v193 = 2;
          }
          else if (v87[6])
          {
            uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 64, v191, v192, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v193 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v195 = v191 + v193;
          unsigned int v196 = v87[7];
          if (v196 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v195 + 16);
            unsigned int v197 = (const double *)(v195 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v197);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v195, v37);
            int64x2_t v262 = vzip1q_s64(*(int64x2_t *)v195, v37);
            int64x2_t v266 = v39;
            int64x2_t v270 = v38;
            int64x2_t v274 = v36;
            unsigned int v45 = a7;
            uint64_t v17 = v229;
          }
          else
          {
            unsigned int v45 = a7;
            uint64_t v17 = v229;
            if (v196 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v195);
              int64x2_t v262 = v39;
              int64x2_t v266 = v39;
              int64x2_t v270 = v39;
              int64x2_t v274 = v39;
            }
            else if (v196)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 64, v195, v196, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int64x2_t v262 = 0uLL;
              int64x2_t v266 = 0uLL;
              int64x2_t v270 = 0uLL;
              int64x2_t v274 = 0uLL;
            }
          }
          unint64_t v198 = v238;
          unsigned int v46 = v42 + 1;
          if (v238)
          {
            unint64_t v199 = 0;
            float32x4_t v200 = &v243.i8[64 * (unint64_t)v236 + 4 * v237];
            unsigned int v201 = v239;
            do
            {
              if (v201)
              {
                uint64_t v202 = 0;
                long long v203 = &v234->i8[v235 * v199];
                do
                {
                  v203[v202] = v200[v202];
                  ++v202;
                  unsigned int v201 = v239;
                }
                while (4 * (unint64_t)v239 > v202);
                unint64_t v198 = v238;
              }
              ++v199;
              v200 += 64;
            }
            while (v199 < v198);
          }
LABEL_48:
          BOOL v22 = v42 == v220 >> 4;
          unsigned int v42 = v46;
        }
        while (!v22);
        BOOL v22 = v21++ == v208;
      }
      while (!v22);
    }
  }
}

void AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::processCompressedRegion2D<AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>,true,(AGXHardwareTextureMemoryOrder)1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9, int a10, uint64_t a11, char a12)
{
  uint64_t v275 = *MEMORY[0x263EF8340];
  AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(a1, 0);
  unsigned int v228 = a8;
  int v16 = a8 + a10;
  uint64_t v17 = a1;
  unsigned int v209 = v16 - 1;
  if (*(void *)(a1 + 168)) {
    int v18 = IOSurfaceGetCacheMode() & 0xF00;
  }
  else {
    int v18 = 0;
  }
  unsigned int v19 = a5 - 1;
  unsigned int v20 = a6 - 1;
  unsigned int v21 = v228 >> 3;
  unsigned int v208 = v209 >> 3;
  BOOL v22 = (v18 & 0xD00) == 0 || v18 == 768;
  int v23 = v18 & 0xE00;
  int v25 = !v22 && v23 != 1024;
  int v222 = v25;
  if (*(unsigned char *)(a1 + 232))
  {
    unsigned int v26 = *(unsigned __int8 *)(a1 + 255);
    unsigned int v27 = *(unsigned __int8 *)(a1 + 254);
    char v28 = __clz(v19);
    if (1 << v26 >= a6 || a5 >> v27)
    {
      if (!(a6 >> v26) && 1 << v27 < a5)
      {
        if (a6 < 2) {
          unsigned int v31 = 0;
        }
        else {
          unsigned int v31 = __clz(~(-1 << -(char)__clz(v20))) - 32;
        }
        v27 += v26 + v31;
        unsigned int v26 = -v31;
      }
    }
    else
    {
      unsigned int v29 = 32 - __clz(~(-1 << -v28));
      unsigned int v30 = v27 + v26;
      if (a5 < 2) {
        unsigned int v29 = 0;
      }
      unsigned int v26 = v30 - v29;
      unsigned int v27 = v29;
    }
    if (a5 < 2)
    {
      if (v27) {
        goto LABEL_27;
      }
    }
    else if (32 - __clz(~(-1 << -v28)) < v27)
    {
LABEL_27:
      BOOL v221 = 0;
LABEL_32:
      unsigned int v219 = v27 - 4;
      unsigned int v213 = v26 - 3;
      int v33 = -1 << *(unsigned char *)(*(void *)(a1 + 208) + 48);
      unsigned int v206 = (((~v33 + a5) & v33) + ~(-1 << v27)) >> v27;
      goto LABEL_33;
    }
    if (a6 < 2) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = 32 - __clz(~(-1 << -(char)__clz(v20)));
    }
    BOOL v221 = v32 >= v26;
    goto LABEL_32;
  }
  BOOL v221 = 0;
  unsigned int v206 = 0;
  unsigned int v213 = 0;
  unsigned int v219 = 0;
LABEL_33:
  if (v21 <= v208)
  {
    unsigned int v220 = a7 + a9 - 1;
    if (a7 >> 4 <= v220 >> 4)
    {
      uint64_t v34 = a11;
      unsigned int v231 = v19 >> 4;
      unsigned int v205 = v20 >> 3;
      int v230 = (v19 & 0xF) + 1;
      int v204 = (v20 & 7) + 1;
      uint64_t v217 = 4 * a11;
      uint32x2_t v35 = (uint32x2_t)vadd_s32((int32x2_t)__PAIR64__(a5, a6), (int32x2_t)0xF00000007);
      v36.i64[0] = 0x2000000020;
      *(int32x2_t *)v37.i8 = vsub_s32((int32x2_t)0x2000000020, vclz_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)vsub_s32((int32x2_t)0x2000000020, vclz_s32(vadd_s32((int32x2_t)vshl_u32(v35, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL), (int32x2_t)-1)))))));
      v38.i64[0] = 0x2000000010;
      *(int8x8_t *)v39.i8 = vbic_s8(*(int8x8_t *)v37.i8, (int8x8_t)vcgt_u32((uint32x2_t)0x2000000010, v35));
      __int32 v216 = v39.i32[0] | v39.i32[1];
      uint64_t v212 = v39.i64[0];
      BOOL v211 = v39.i32[0] != 0;
      BOOL v210 = v39.i32[1] != 0;
      uint64_t v229 = a1;
      uint64_t v214 = 3 * a11;
      uint64_t v215 = 2 * a11;
      do
      {
        unsigned int v40 = (8 * v21) | 7;
        if (8 * v21 <= v228) {
          int v41 = v228;
        }
        else {
          int v41 = 8 * v21;
        }
        if (v209 < v40) {
          unsigned int v40 = v209;
        }
        int v218 = v41 - 8 * v21;
        int v226 = v40 - v41 + 1;
        unsigned int v42 = a7 >> 4;
        int v43 = v204;
        if (v21 != v205) {
          int v43 = 8;
        }
        unsigned int v232 = v43;
        uint64_t v44 = v21 & ~(-1 << v213);
        uint64_t v225 = a2 + (v41 - v228) * v34;
        unsigned int v45 = a7;
        do
        {
          unsigned int v47 = 16 * v42;
          unsigned int v48 = 16 * (v42 + 1) - 1;
          if (16 * v42 <= v45) {
            int v49 = v45;
          }
          else {
            int v49 = 16 * v42;
          }
          if (v220 < v48) {
            unsigned int v48 = a7 + a9 - 1;
          }
          int v50 = v48 - v49 + 1;
          if (v42 == v231) {
            unsigned int v51 = v230;
          }
          else {
            unsigned int v51 = 16;
          }
          BOOL v52 = 1;
          if (8 * v21 >= v228 && v47 >= v45)
          {
            int v53 = v230;
            if (v42 != v231) {
              int v53 = 16;
            }
            BOOL v52 = v50 != v53 || v226 != v232;
          }
          if (v221)
          {
            if (v219 | v213)
            {
              int v55 = 0;
              uint64_t v56 = 0;
              int v57 = 1;
              BOOL v58 = v213 != 0;
              BOOL v59 = v219 != 0;
              unsigned int v60 = v213;
              unsigned int v61 = v219;
              do
              {
                --v60;
                if (v58) {
                  v56 |= (unint64_t)(v44 & v57) << v55++;
                }
                else {
                  unsigned int v60 = 0;
                }
                --v61;
                if (v59) {
                  v56 |= (unint64_t)(v42 & ~(-1 << v219) & v57) << v55++;
                }
                else {
                  unsigned int v61 = 0;
                }
                v57 *= 2;
                --v55;
                BOOL v59 = v61 != 0;
                BOOL v58 = v60 != 0;
              }
              while (v61 | v60);
            }
            else
            {
              uint64_t v56 = 0;
            }
            uint64_t v69 = *(void *)(v17 + 320) * ((v42 >> v219) + (v21 >> v213) * v206) + (v56 << 9);
          }
          else
          {
            if (v216)
            {
              int v62 = 0;
              uint64_t v63 = 0;
              int v64 = 1;
              BOOL v65 = v211;
              BOOL v66 = v210;
              int v67 = v212;
              int v68 = HIDWORD(v212);
              do
              {
                --v67;
                if (v65) {
                  v63 |= (unint64_t)(v64 & v21) << v62++;
                }
                else {
                  int v67 = 0;
                }
                --v68;
                if (v66) {
                  v63 |= (unint64_t)(v64 & v42) << v62++;
                }
                else {
                  int v68 = 0;
                }
                v64 *= 2;
                --v62;
                BOOL v66 = v68 != 0;
                BOOL v65 = v67 != 0;
              }
              while (v68 | v67);
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v69 = v63 << 9;
          }
          unsigned int v70 = *(_DWORD *)(v17 + 128) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v70 <= 1) {
            unsigned int v70 = 1;
          }
          unsigned int v71 = v70 + 15;
          if (v71 < 0x20) {
            unsigned int v72 = 0;
          }
          else {
            unsigned int v72 = 32 - __clz(~(-1 << -(char)__clz((v71 >> 4) - 1)));
          }
          unsigned int v73 = *(_DWORD *)(v17 + 132) >> (*(unsigned char *)(v17 + 144) + a12);
          if (v73 <= 1) {
            unsigned int v73 = 1;
          }
          unsigned int v74 = v73 + 7;
          if (v74 < 0x10)
          {
            unsigned int v75 = 0;
            if (!v72)
            {
LABEL_115:
              unint64_t v77 = 0;
              goto LABEL_116;
            }
          }
          else
          {
            unsigned int v75 = 32 - __clz(~(-1 << -(char)__clz((v74 >> 3) - 1)));
            if (!(v75 | v72)) {
              goto LABEL_115;
            }
          }
          int v76 = 0;
          unint64_t v77 = 0;
          BOOL v78 = v72 != 0;
          BOOL v79 = v75 != 0;
          int v80 = 1;
          do
          {
            --v72;
            BOOL v81 = !v78;
            if (v78)
            {
              unint64_t v82 = ((unint64_t)(v80 & v42) << v76) | v77;
            }
            else
            {
              unsigned int v72 = 0;
              unint64_t v82 = v77;
            }
            if (!v81) {
              ++v76;
            }
            --v75;
            if (v79)
            {
              unint64_t v77 = ((unint64_t)(v80 & v21) << v76) | v82;
            }
            else
            {
              unsigned int v75 = 0;
              unint64_t v77 = v82;
            }
            if (v79) {
              ++v76;
            }
            v80 *= 2;
            --v76;
            BOOL v79 = v75 != 0;
            BOOL v78 = v72 != 0;
          }
          while (v75 | v72);
LABEL_116:
          float32x4_t v83 = (unsigned char *)(a3 + v69);
          if (v222)
          {
            uint64_t v84 = v44;
            int v85 = v50;
            BOOL v86 = v52;
            memcpy(__dst, (const void *)(a3 + v69), sizeof(__dst));
            BOOL v52 = v86;
            int v50 = v85;
            uint64_t v44 = v84;
            float32x4_t v83 = __dst;
          }
          uint64_t v87 = (unsigned __int8 *)(a4 + 8 * v77);
          uint64_t v88 = (int64x2_t *)(v225 + 4 * (v49 - v45));
          char v89 = v51 < 0x10 || v52;
          if ((v89 & 1) == 0 && v232 > 7)
          {
            unsigned int v90 = *v87;
            if (v90 == 63)
            {
              long long v98 = (const double *)(v83 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v98);
              int64x2_t v99 = *(int64x2_t *)v83;
              int64x2_t v36 = *((int64x2_t *)v83 + 1);
              *uint64_t v88 = vzip1q_s64(*(int64x2_t *)v83, v36);
              int64x2_t v38 = vzip2q_s64(v99, v36);
              uint64_t v34 = a11;
              *(int64x2_t *)((char *)v88 + a11) = v38;
              uint64_t v91 = 2 * a11;
              long long v100 = (int64x2_t *)((char *)v88 + v215);
              *long long v100 = v39;
              *(int64x2_t *)((char *)v100 + a11) = v37;
              uint64_t v92 = 64;
            }
            else
            {
              uint64_t v34 = a11;
              uint64_t v91 = 2 * a11;
              if (v90 == 1)
              {
                int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
                *uint64_t v88 = v39;
                *(int64x2_t *)((char *)v88 + a11) = v39;
                *(int64x2_t *)((char *)v88 + 2 * a11) = v39;
                *(int64x2_t *)((char *)v88 + 3 * a11) = v39;
                uint64_t v92 = 2;
              }
              else if (*v87)
              {
                uint64_t v92 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v88, a11, (uint64_t)v83, v90, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                uint64_t v92 = 0;
                v88->i64[0] = 0;
                v88->i64[1] = 0;
                float32x4_t v93 = (uint64_t *)((char *)v88->i64 + a11);
                *float32x4_t v93 = 0;
                v93[1] = 0;
                int8x8_t v94 = (uint64_t *)((char *)v88->i64 + v215);
                *int8x8_t v94 = 0;
                v94[1] = 0;
                float32x4_t v95 = (uint64_t *)((char *)v88->i64 + v214);
                *float32x4_t v95 = 0;
                v95[1] = 0;
              }
            }
            uint64_t v101 = (uint64_t)&v83[v92];
            long long v102 = v88 + 1;
            unsigned int v103 = v87[1];
            if (v103 == 63)
            {
              unsigned int v108 = (const double *)(v101 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v108);
              int64x2_t v109 = *(int64x2_t *)v101;
              int64x2_t v36 = *(int64x2_t *)(v101 + 16);
              *long long v102 = vzip1q_s64(*(int64x2_t *)v101, v36);
              int64x2_t v38 = vzip2q_s64(v109, v36);
              *(int64x2_t *)((char *)v102 + v34) = v38;
              uint64_t v110 = (int64x2_t *)((char *)v102 + v91);
              *uint64_t v110 = v39;
              *(int64x2_t *)((char *)v110 + v34) = v37;
              uint64_t v104 = 64;
            }
            else if (v103 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v101);
              *long long v102 = v39;
              *(int64x2_t *)((char *)v102 + v34) = v39;
              *(int64x2_t *)((char *)v102 + v91) = v39;
              *(int64x2_t *)((char *)v102 + 3 * a11) = v39;
              uint64_t v104 = 2;
            }
            else if (v87[1])
            {
              uint64_t v104 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v102, v34, v101, v103, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v104 = 0;
              v102->i64[0] = 0;
              v88[1].i64[1] = 0;
              long long v105 = (uint64_t *)((char *)v102->i64 + v34);
              *long long v105 = 0;
              v105[1] = 0;
              unsigned int v106 = (uint64_t *)((char *)v102->i64 + v91);
              void *v106 = 0;
              v106[1] = 0;
              uint64_t v107 = (uint64_t *)((char *)v102->i64 + v214);
              *uint64_t v107 = 0;
              v107[1] = 0;
            }
            uint64_t v111 = v101 + v104;
            uint64_t v112 = (int64x2_t *)((char *)v88 + v217);
            unsigned int v113 = v87[2];
            if (v113 == 63)
            {
              long long v118 = (const double *)(v111 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v118);
              int64x2_t v119 = *(int64x2_t *)v111;
              int64x2_t v36 = *(int64x2_t *)(v111 + 16);
              *uint64_t v112 = vzip1q_s64(*(int64x2_t *)v111, v36);
              int64x2_t v38 = vzip2q_s64(v119, v36);
              *(int64x2_t *)((char *)v112 + v34) = v38;
              long long v120 = (int64x2_t *)((char *)v112 + v91);
              *long long v120 = v39;
              *(int64x2_t *)((char *)v120 + v34) = v37;
              uint64_t v114 = 64;
            }
            else if (v113 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v111);
              *uint64_t v112 = v39;
              *(int64x2_t *)((char *)v112 + v34) = v39;
              *(int64x2_t *)((char *)v112 + v91) = v39;
              *(int64x2_t *)((char *)v112 + 3 * a11) = v39;
              uint64_t v114 = 2;
            }
            else if (v87[2])
            {
              uint64_t v114 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock((int64x2_t *)((char *)v88 + v217), v34, v111, v113, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v114 = 0;
              v112->i64[0] = 0;
              v112->i64[1] = 0;
              int8x8_t v115 = (uint64_t *)((char *)v112->i64 + v34);
              *int8x8_t v115 = 0;
              v115[1] = 0;
              float32x4_t v116 = (uint64_t *)((char *)v112->i64 + v91);
              *float32x4_t v116 = 0;
              v116[1] = 0;
              unint64_t v117 = (uint64_t *)((char *)v112->i64 + v214);
              *unint64_t v117 = 0;
              v117[1] = 0;
            }
            uint64_t v121 = v111 + v114;
            long long v122 = v112 + 1;
            unsigned int v123 = v87[3];
            if (v123 == 63)
            {
              uint64_t v128 = (const double *)(v121 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v128);
              int64x2_t v129 = *(int64x2_t *)v121;
              int64x2_t v36 = *(int64x2_t *)(v121 + 16);
              *long long v122 = vzip1q_s64(*(int64x2_t *)v121, v36);
              int64x2_t v38 = vzip2q_s64(v129, v36);
              *(int64x2_t *)((char *)v122 + v34) = v38;
              uint64_t v130 = (int64x2_t *)((char *)v122 + v91);
              *uint64_t v130 = v39;
              *(int64x2_t *)((char *)v130 + v34) = v37;
              uint64_t v124 = 64;
            }
            else if (v123 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v121);
              *long long v122 = v39;
              *(int64x2_t *)((char *)v122 + v34) = v39;
              *(int64x2_t *)((char *)v122 + v91) = v39;
              *(int64x2_t *)((char *)v122 + 3 * a11) = v39;
              uint64_t v124 = 2;
            }
            else if (v87[3])
            {
              uint64_t v124 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v122, v34, v121, v123, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v124 = 0;
              v122->i64[0] = 0;
              v112[1].i64[1] = 0;
              long long v125 = (uint64_t *)((char *)v122->i64 + v34);
              *long long v125 = 0;
              v125[1] = 0;
              long long v126 = (uint64_t *)((char *)v122->i64 + v91);
              *long long v126 = 0;
              v126[1] = 0;
              int v127 = (uint64_t *)((char *)v122->i64 + v214);
              *int v127 = 0;
              v127[1] = 0;
            }
            uint64_t v131 = v121 + v124;
            unsigned int v132 = v88 + 2;
            unsigned int v133 = v87[4];
            if (v133 == 63)
            {
              int v138 = (const double *)(v131 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v138);
              int64x2_t v139 = *(int64x2_t *)v131;
              int64x2_t v36 = *(int64x2_t *)(v131 + 16);
              *unsigned int v132 = vzip1q_s64(*(int64x2_t *)v131, v36);
              int64x2_t v38 = vzip2q_s64(v139, v36);
              *(int64x2_t *)((char *)v132 + v34) = v38;
              int8x16_t v140 = (int64x2_t *)((char *)v132 + v91);
              *int8x16_t v140 = v39;
              *(int64x2_t *)((char *)v140 + v34) = v37;
              uint64_t v134 = 64;
            }
            else if (v133 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v131);
              *unsigned int v132 = v39;
              *(int64x2_t *)((char *)v132 + v34) = v39;
              *(int64x2_t *)((char *)v132 + v91) = v39;
              *(int64x2_t *)((char *)v132 + 3 * a11) = v39;
              uint64_t v134 = 2;
            }
            else if (v87[4])
            {
              uint64_t v134 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v132, v34, v131, v133, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v134 = 0;
              v132->i64[0] = 0;
              v88[2].i64[1] = 0;
              float32x4_t v135 = (uint64_t *)((char *)v132->i64 + v34);
              *float32x4_t v135 = 0;
              v135[1] = 0;
              int8x8_t v136 = (uint64_t *)((char *)v132->i64 + v91);
              *int8x8_t v136 = 0;
              v136[1] = 0;
              float32x4_t v137 = (uint64_t *)((char *)v132->i64 + v214);
              *float32x4_t v137 = 0;
              v137[1] = 0;
            }
            uint64_t v141 = v131 + v134;
            int8x16_t v142 = v88 + 3;
            unsigned int v143 = v87[5];
            if (v143 == 63)
            {
              uint64_t v148 = (const double *)(v141 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v148);
              int64x2_t v149 = *(int64x2_t *)v141;
              int64x2_t v36 = *(int64x2_t *)(v141 + 16);
              *int8x16_t v142 = vzip1q_s64(*(int64x2_t *)v141, v36);
              int64x2_t v38 = vzip2q_s64(v149, v36);
              *(int64x2_t *)((char *)v142 + v34) = v38;
              int8x8_t v150 = (int64x2_t *)((char *)v142 + v91);
              *int8x8_t v150 = v39;
              *(int64x2_t *)((char *)v150 + v34) = v37;
              uint64_t v144 = 64;
            }
            else if (v143 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v141);
              *int8x16_t v142 = v39;
              *(int64x2_t *)((char *)v142 + v34) = v39;
              *(int64x2_t *)((char *)v142 + v91) = v39;
              *(int64x2_t *)((char *)v142 + 3 * a11) = v39;
              uint64_t v144 = 2;
            }
            else if (v87[5])
            {
              uint64_t v144 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v142, v34, v141, v143, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v144 = 0;
              v142->i64[0] = 0;
              v88[3].i64[1] = 0;
              long long v145 = (uint64_t *)((char *)v142->i64 + v34);
              *long long v145 = 0;
              v145[1] = 0;
              long long v146 = (uint64_t *)((char *)v142->i64 + v91);
              *long long v146 = 0;
              v146[1] = 0;
              long long v147 = (uint64_t *)((char *)v142->i64 + v214);
              *long long v147 = 0;
              v147[1] = 0;
            }
            uint64_t v151 = v141 + v144;
            uint64_t v152 = v112 + 2;
            unsigned int v153 = v87[6];
            if (v153 == 63)
            {
              float32x4_t v158 = (const double *)(v151 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v158);
              int64x2_t v159 = *(int64x2_t *)v151;
              int64x2_t v36 = *(int64x2_t *)(v151 + 16);
              *uint64_t v152 = vzip1q_s64(*(int64x2_t *)v151, v36);
              int64x2_t v38 = vzip2q_s64(v159, v36);
              *(int64x2_t *)((char *)v152 + v34) = v38;
              long long v160 = (int64x2_t *)((char *)v152 + v91);
              *long long v160 = v39;
              *(int64x2_t *)((char *)v160 + v34) = v37;
              uint64_t v154 = 64;
            }
            else if (v153 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v151);
              *uint64_t v152 = v39;
              *(int64x2_t *)((char *)v152 + v34) = v39;
              *(int64x2_t *)((char *)v152 + v91) = v39;
              *(int64x2_t *)((char *)v152 + 3 * a11) = v39;
              uint64_t v154 = 2;
            }
            else if (v87[6])
            {
              uint64_t v154 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v152, v34, v141 + v144, v153, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              uint64_t v154 = 0;
              v152->i64[0] = 0;
              v112[2].i64[1] = 0;
              int32x2_t v155 = (uint64_t *)((char *)v152->i64 + v34);
              *int32x2_t v155 = 0;
              v155[1] = 0;
              float32x4_t v156 = (uint64_t *)((char *)v152->i64 + v91);
              *float32x4_t v156 = 0;
              v156[1] = 0;
              int32x2_t v157 = (uint64_t *)((char *)v152->i64 + v214);
              *int32x2_t v157 = 0;
              v157[1] = 0;
            }
            uint64_t v161 = v151 + v154;
            long long v162 = v112 + 3;
            unsigned int v163 = v87[7];
            if (v163 == 63)
            {
              long long v167 = (const double *)(v161 + 32);
              *(float64x2x2_t *)v39.i8 = vld2q_f64(v167);
              int64x2_t v168 = *(int64x2_t *)v161;
              int64x2_t v36 = *(int64x2_t *)(v161 + 16);
              *long long v162 = vzip1q_s64(*(int64x2_t *)v161, v36);
              int64x2_t v38 = vzip2q_s64(v168, v36);
              *(int64x2_t *)((char *)v162 + v34) = v38;
              unsigned int v169 = (int64x2_t *)((char *)v162 + v91);
              *unsigned int v169 = v39;
              *(int64x2_t *)((char *)v169 + v34) = v37;
              unsigned int v45 = a7;
              uint64_t v17 = v229;
            }
            else
            {
              unsigned int v45 = a7;
              uint64_t v17 = v229;
              if (v163 == 1)
              {
                int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v161);
                *long long v162 = v39;
                *(int64x2_t *)((char *)v162 + v34) = v39;
                *(int64x2_t *)((char *)v162 + v91) = v39;
                *(int64x2_t *)((char *)v162 + 3 * a11) = v39;
              }
              else if (v163)
              {
                AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(v162, v34, v161, v163, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
              }
              else
              {
                v162->i64[0] = 0;
                v112[3].i64[1] = 0;
                long long v164 = (uint64_t *)((char *)v162->i64 + v34);
                *long long v164 = 0;
                v164[1] = 0;
                long long v165 = (uint64_t *)((char *)v162->i64 + v91);
                *long long v165 = 0;
                v165[1] = 0;
                long long v166 = (uint64_t *)((char *)v162->i64 + v214);
                void *v166 = 0;
                v166[1] = 0;
              }
            }
            goto LABEL_47;
          }
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          block[2] = ___ZNK3AGX7TextureIL22AGXTextureMemoryLayout3ENS_6HAL2008EncodersENS2_7ClassesEE25processCompressedRegion2DINS_20AppleCompressionGen210CompressorILNS7_11PixelFormatE3ELj2ELh1ELNS7_13SubblockOrderE0EL19AGXTextureFootprint0EEELb1EL29AGXHardwareTextureMemoryOrder1EEEvPvPKvSE_14MTLPixelFormatjjjjjjmjj_block_invoke;
          block[3] = &__block_descriptor_90_e5_v8__0l;
          block[4] = v229;
          block[5] = v83;
          char v240 = v51;
          char v241 = v232;
          unsigned int v236 = v218;
          unsigned int v237 = v49 - v47;
          block[6] = v87;
          float32x4_t v234 = v88;
          uint64_t v34 = a11;
          uint64_t v235 = a11;
          unsigned int v238 = v226;
          unsigned int v239 = v50;
          if (v52)
          {
            dispatch_sync(*(dispatch_queue_t *)(*(void *)(v229 + 8) + 7384), block);
            unsigned int v45 = a7;
            uint64_t v17 = v229;
LABEL_47:
            unsigned int v46 = v42 + 1;
            goto LABEL_48;
          }
          unsigned int v96 = *v87;
          if (v96 == 63)
          {
            int64x2_t v37 = *((int64x2_t *)v83 + 1);
            uint64_t v170 = (const double *)(v83 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v170);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v83, v37);
            int64x2_t v243 = vzip1q_s64(*(int64x2_t *)v83, v37);
            int64x2_t v247 = v39;
            int64x2_t v251 = v38;
            int64x2_t v255 = v36;
            uint64_t v97 = 64;
          }
          else if (v96 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v83);
            int64x2_t v243 = v39;
            int64x2_t v247 = v39;
            int64x2_t v251 = v39;
            int64x2_t v255 = v39;
            uint64_t v97 = 2;
          }
          else if (*v87)
          {
            uint64_t v97 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v243, 64, (uint64_t)v83, v96, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v97 = 0;
            int64x2_t v243 = 0uLL;
            int64x2_t v247 = 0uLL;
            int64x2_t v251 = 0uLL;
            int64x2_t v255 = 0uLL;
          }
          uint64_t v171 = (uint64_t)&v83[v97];
          unsigned int v172 = v87[1];
          if (v172 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v171 + 16);
            unsigned int v174 = (const double *)(v171 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v174);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v171, v37);
            int64x2_t v244 = vzip1q_s64(*(int64x2_t *)v171, v37);
            int64x2_t v248 = v39;
            int64x2_t v252 = v38;
            int64x2_t v256 = v36;
            uint64_t v173 = 64;
          }
          else if (v172 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v171);
            int64x2_t v244 = v39;
            int64x2_t v248 = v39;
            int64x2_t v252 = v39;
            int64x2_t v256 = v39;
            uint64_t v173 = 2;
          }
          else if (v87[1])
          {
            uint64_t v173 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v244, 64, v171, v172, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v173 = 0;
            int64x2_t v244 = 0uLL;
            int64x2_t v248 = 0uLL;
            int64x2_t v252 = 0uLL;
            int64x2_t v256 = 0uLL;
          }
          uint64_t v175 = v171 + v173;
          unsigned int v176 = v87[2];
          if (v176 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v175 + 16);
            int32x2_t v178 = (const double *)(v175 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v178);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v175, v37);
            int64x2_t v259 = vzip1q_s64(*(int64x2_t *)v175, v37);
            int64x2_t v263 = v39;
            int64x2_t v267 = v38;
            int64x2_t v271 = v36;
            uint64_t v177 = 64;
          }
          else if (v176 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v175);
            int64x2_t v259 = v39;
            int64x2_t v263 = v39;
            int64x2_t v267 = v39;
            int64x2_t v271 = v39;
            uint64_t v177 = 2;
          }
          else if (v87[2])
          {
            uint64_t v177 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v259, 64, v175, v176, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v177 = 0;
            int64x2_t v259 = 0uLL;
            int64x2_t v263 = 0uLL;
            int64x2_t v267 = 0uLL;
            int64x2_t v271 = 0uLL;
          }
          uint64_t v179 = v175 + v177;
          unsigned int v180 = v87[3];
          if (v180 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v179 + 16);
            long long v182 = (const double *)(v179 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v182);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v179, v37);
            int64x2_t v260 = vzip1q_s64(*(int64x2_t *)v179, v37);
            int64x2_t v264 = v39;
            int64x2_t v268 = v38;
            int64x2_t v272 = v36;
            uint64_t v181 = 64;
          }
          else if (v180 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v179);
            int64x2_t v260 = v39;
            int64x2_t v264 = v39;
            int64x2_t v268 = v39;
            int64x2_t v272 = v39;
            uint64_t v181 = 2;
          }
          else if (v87[3])
          {
            uint64_t v181 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v260, 64, v179, v180, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v181 = 0;
            int64x2_t v260 = 0uLL;
            int64x2_t v264 = 0uLL;
            int64x2_t v268 = 0uLL;
            int64x2_t v272 = 0uLL;
          }
          uint64_t v183 = v179 + v181;
          unsigned int v184 = v87[4];
          if (v184 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v183 + 16);
            long long v186 = (const double *)(v183 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v186);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v183, v37);
            int64x2_t v245 = vzip1q_s64(*(int64x2_t *)v183, v37);
            int64x2_t v249 = v39;
            int64x2_t v253 = v38;
            int64x2_t v257 = v36;
            uint64_t v185 = 64;
          }
          else if (v184 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v183);
            int64x2_t v245 = v39;
            int64x2_t v249 = v39;
            int64x2_t v253 = v39;
            int64x2_t v257 = v39;
            uint64_t v185 = 2;
          }
          else if (v87[4])
          {
            uint64_t v185 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v245, 64, v183, v184, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v185 = 0;
            int64x2_t v245 = 0uLL;
            int64x2_t v249 = 0uLL;
            int64x2_t v253 = 0uLL;
            int64x2_t v257 = 0uLL;
          }
          uint64_t v187 = v183 + v185;
          unsigned int v188 = v87[5];
          if (v188 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v187 + 16);
            unsigned int v190 = (const double *)(v187 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v190);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v187, v37);
            int64x2_t v246 = vzip1q_s64(*(int64x2_t *)v187, v37);
            int64x2_t v250 = v39;
            int64x2_t v254 = v38;
            int64x2_t v258 = v36;
            uint64_t v189 = 64;
          }
          else if (v188 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v187);
            int64x2_t v246 = v39;
            int64x2_t v250 = v39;
            int64x2_t v254 = v39;
            int64x2_t v258 = v39;
            uint64_t v189 = 2;
          }
          else if (v87[5])
          {
            uint64_t v189 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v246, 64, v187, v188, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v189 = 0;
            int64x2_t v246 = 0uLL;
            int64x2_t v250 = 0uLL;
            int64x2_t v254 = 0uLL;
            int64x2_t v258 = 0uLL;
          }
          uint64_t v191 = v187 + v189;
          unsigned int v192 = v87[6];
          if (v192 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v191 + 16);
            uint64_t v194 = (const double *)(v191 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v194);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v191, v37);
            int64x2_t v261 = vzip1q_s64(*(int64x2_t *)v191, v37);
            int64x2_t v265 = v39;
            int64x2_t v269 = v38;
            int64x2_t v273 = v36;
            uint64_t v193 = 64;
          }
          else if (v192 == 1)
          {
            int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v191);
            int64x2_t v261 = v39;
            int64x2_t v265 = v39;
            int64x2_t v269 = v39;
            int64x2_t v273 = v39;
            uint64_t v193 = 2;
          }
          else if (v87[6])
          {
            uint64_t v193 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v261, 64, v191, v192, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
          }
          else
          {
            uint64_t v193 = 0;
            int64x2_t v261 = 0uLL;
            int64x2_t v265 = 0uLL;
            int64x2_t v269 = 0uLL;
            int64x2_t v273 = 0uLL;
          }
          uint64_t v195 = v191 + v193;
          unsigned int v196 = v87[7];
          if (v196 == 63)
          {
            int64x2_t v37 = *(int64x2_t *)(v195 + 16);
            unsigned int v197 = (const double *)(v195 + 32);
            *(float64x2x2_t *)v38.i8 = vld2q_f64(v197);
            int64x2_t v39 = vzip2q_s64(*(int64x2_t *)v195, v37);
            int64x2_t v262 = vzip1q_s64(*(int64x2_t *)v195, v37);
            int64x2_t v266 = v39;
            int64x2_t v270 = v38;
            int64x2_t v274 = v36;
            unsigned int v45 = a7;
            uint64_t v17 = v229;
          }
          else
          {
            unsigned int v45 = a7;
            uint64_t v17 = v229;
            if (v196 == 1)
            {
              int64x2_t v39 = (int64x2_t)vld1q_dup_s16((const __int16 *)v195);
              int64x2_t v262 = v39;
              int64x2_t v266 = v39;
              int64x2_t v270 = v39;
              int64x2_t v274 = v39;
            }
            else if (v196)
            {
              AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,2u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(&v262, 64, v195, v196, *(double *)v39.i64, *(double *)v37.i64, *(double *)v38.i64, *(int8x8_t *)v36.i8);
            }
            else
            {
              int64x2_t v262 = 0uLL;
              int64x2_t v266 = 0uLL;
              int64x2_t v270 = 0uLL;
              int64x2_t v274 = 0uLL;
            }
          }
          unint64_t v198 = v238;
          unsigned int v46 = v42 + 1;
          if (v238)
          {
            unint64_t v199 = 0;
            float32x4_t v200 = &v243.i8[64 * (unint64_t)v236 + 4 * v237];
            unsigned int v201 = v239;
            do
            {
              if (v201)
              {
                uint64_t v202 = 0;
                long long v203 = &v234->i8[v235 * v199];
                do
                {
                  v203[v202] = v200[v202];
                  ++v202;
                  unsigned int v201 = v239;
                }
                while (4 * (unint64_t)v239 > v202);
                unint64_t v198 = v238;
              }
              ++v199;
              v200 += 64;
            }
            while (v199 < v198);
          }
LABEL_48:
          BOOL v22 = v42 == v220 >> 4;
          unsigned int v42 = v46;
        }
        while (!v22);
        BOOL v22 = v21++ == v208;
      }
      while (!v22);
    }
  }
}