unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  _DWORD *v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  _DWORD *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  unsigned int v86;
  unint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned int v131;
  unsigned int v132;
  unint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v161;
  int v162;
  int v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  int v174;
  unint64_t v175;
  BOOL v176;
  BOOL v177;
  unint64_t result;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  BOOL v188;
  unint64_t v189;
  BOOL v191;
  BOOL v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  BOOL v198;
  BOOL v199;
  int v201;
  int v202;
  unint64_t v203;
  BOOL v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  BOOL v208;
  int v210;
  int v211;
  unint64_t v212;
  BOOL v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v218;
  int v219;
  unint64_t v220;
  BOOL v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v226;
  int v227;
  unint64_t v228;
  BOOL v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int v234;
  int v235;
  unint64_t v236;
  BOOL v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int v242;
  int v243;
  unint64_t v244;
  BOOL v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  int v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v260;
  int v261;
  int v262;
  unsigned int v263;
  _OWORD v264[7];
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _DWORD v269[4];
  _DWORD v270[4];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  unsigned int __b;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279[4];
  unsigned int v280[4];
  uint64_t v281;

  v281 = *MEMORY[0x263EF8340];
  v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  v5 = 8 * (a1 & 7);
  v6 = *(void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  v7 = (v6 >> v5) & 7;
  v8 = v5 | 3;
  v9 = (v6 >> (v5 | 3u)) & 7;
  if ((v5 | 3uLL) - v5 <= 0xBD) {
    v10 = ((8 * (a1 & 7)) | 6) - v5;
  }
  else {
    v10 = v8 - v5;
  }
  if ((unint64_t)(v8 - v5) <= 0xBD) {
    v11 = (8 * (a1 & 7)) | 6;
  }
  else {
    v11 = (8 * (a1 & 7)) | 3;
  }
  if ((unint64_t)(v8 - v5) <= 0xBD) {
    v12 = v9;
  }
  else {
    v12 = 0;
  }
  v262 = v12;
  if ((unint64_t)(v10 - 190) >= 0xFFFFFFFFFFFFFF3FLL)
  {
    v15 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 3;
    do
    {
      v19 = 64 - v11;
      if (64 - v11 >= v18) {
        v19 = v18;
      }
      v13 |= ((unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v19)) << v17);
      v17 += v19;
      v15 += (v19 + v11) >> 6;
      v11 = (v19 + v11) & 0x3F;
      v18 -= v19;
    }
    while (v18);
    v14 = v15 << 6;
    v10 = v11 - v5;
    if ((unint64_t)(v11 - v5 + (v15 << 6) + 3) <= 0xC0)
    {
      v16 = 0;
      v20 = 0;
      v21 = 3;
      do
      {
        v22 = 64 - v11;
        if (64 - v11 >= v21) {
          v22 = v21;
        }
        v16 |= ((unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v22)) << v20);
        v20 += v22;
        v15 += (v22 + v11) >> 6;
        v11 = (v22 + v11) & 0x3F;
        v21 -= v22;
      }
      while (v21);
      v14 = v15 << 6;
      v10 = v11 - v5;
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  memset_pattern16(&__b, &unk_242EA8890, 0x10uLL);
  v23 = 0;
  v24 = 2 * (v7 == 0);
  v261 = 2 * (v7 == 0);
  if (v7)
  {
    v26 = v262;
    v258 = 0;
    v28 = v7 + 2;
  }
  else
  {
    if (v10 + v14 + v24 > 0xC0)
    {
      v26 = v262;
    }
    else
    {
      v23 = 0;
      v25 = 0;
      v26 = v262;
      do
      {
        v27 = 64 - v11;
        if (64 - v11 >= v24) {
          v27 = v24;
        }
        v23 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v27)) << v25;
        v25 += v27;
        v15 += (v27 + v11) >> 6;
        v11 = (v27 + v11) & 0x3F;
        v24 -= v27;
      }
      while (v24);
    }
    v29 = v23 & 3;
    if (v29 == 3)
    {
      v258 = 0;
      v28 = 2;
    }
    else
    {
      v30 = 4 * v29;
      v258 = *(_DWORD *)((char *)&unk_242EAA170 + v30);
      v28 = *(_DWORD *)((char *)&unk_242EAA17C + v30);
    }
  }
  v31 = 0;
  v280[0] = v28;
  v279[0] = 1;
  v32 = 2 * (v26 == 0);
  v260 = 2 * (v26 == 0);
  if (!v26 && v11 - v5 + (v15 << 6) + v32 <= 0xC0)
  {
    v31 = 0;
    v33 = 0;
    do
    {
      v34 = 64 - v11;
      if (64 - v11 >= v32) {
        v34 = v32;
      }
      v31 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v34)) << v33;
      v33 += v34;
      v15 += (v34 + v11) >> 6;
      v11 = (v34 + v11) & 0x3F;
      v32 -= v34;
    }
    while (v32);
  }
  if (v26)
  {
    v257 = 0;
    v35 = v26 + 2;
  }
  else
  {
    v36 = v31 & 3;
    if (v36 == 3)
    {
      v257 = 0;
      v35 = 2;
    }
    else
    {
      v37 = 4 * v36;
      v257 = *(_DWORD *)((char *)&unk_242EAA170 + v37);
      v35 = *(_DWORD *)((char *)&unk_242EAA17C + v37);
    }
  }
  v38 = 0;
  v280[1] = v35;
  v279[1] = 1;
  v39 = 2 * (v13 == 0);
  if (!v13 && (unint64_t)(v11 - v5 + (v15 << 6) + v39) <= 0xC0)
  {
    v38 = 0;
    v40 = 0;
    v41 = 2 * (v13 == 0);
    do
    {
      v42 = 64 - v11;
      if (64 - v11 >= v41) {
        v42 = v41;
      }
      v38 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v42)) << v40;
      v40 += v42;
      v15 += (v42 + v11) >> 6;
      v11 = (v42 + v11) & 0x3F;
      v41 -= v42;
    }
    while (v41);
  }
  if ((v13 & 7) != 0)
  {
    v256 = 0;
    v43 = (v13 & 7) + 2;
  }
  else
  {
    v44 = v38 & 3;
    if (v44 == 3)
    {
      v256 = 0;
      v43 = 2;
    }
    else
    {
      v45 = 4 * v44;
      v256 = *(_DWORD *)((char *)&unk_242EAA170 + v45);
      v43 = *(_DWORD *)((char *)&unk_242EAA17C + v45);
    }
  }
  v46 = 0;
  v280[2] = v43;
  v279[2] = 1;
  v47 = 2 * (v16 == 0);
  if (!v16 && (unint64_t)(v11 - v5 + (v15 << 6) + v47) <= 0xC0)
  {
    v46 = 0;
    v48 = 0;
    v49 = 2 * (v16 == 0);
    do
    {
      v50 = 64 - v11;
      if (64 - v11 >= v49) {
        v50 = v49;
      }
      v46 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v50)) << v48;
      v48 += v50;
      v15 += (v50 + v11) >> 6;
      v11 = (v50 + v11) & 0x3F;
      v49 -= v50;
    }
    while (v49);
  }
  v51 = v16 & 7;
  if ((v16 & 7) != 0)
  {
    v52 = v43;
    v53 = v28;
    v255 = 0;
    v54 = v51 + 2;
  }
  else
  {
    v55 = v46 & 3;
    v52 = v43;
    v53 = v28;
    if (v55 == 3)
    {
      v255 = 0;
      v54 = 2;
    }
    else
    {
      v56 = 4 * v55;
      v255 = *(_DWORD *)((char *)&unk_242EAA170 + v56);
      v54 = *(_DWORD *)((char *)&unk_242EAA17C + v56);
    }
  }
  v263 = v54;
  v280[3] = v54;
  v279[3] = 1;
  v273 = 0;
  v274 = 0;
  v271 = 0;
  v272 = 0;
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::deriveLossyDQuadBitSharing(v279, v280, &v273, &v271);
  v57 = v53;
  v58 = &kDQuadParamTable[10 * v53];
  v59 = v58[164];
  v60 = v58[165];
  v61 = v271 - v273;
  if ((int)v271 - (int)v273 >= 0)
  {
    v62 = v60;
    v63 = v35;
    v64 = v263;
    v65 = v261;
    if (!v61) {
      goto LABEL_77;
    }
    v62 = v61 + v60;
    goto LABEL_71;
  }
  v66 = v53;
  v67 = kDQuadParamTable[10 * v53 + 167];
  v63 = v35;
  if (v67 >= (int)v273 - (int)v271)
  {
    v62 = v60;
    v64 = v263;
  }
  else
  {
    v62 = v60 - 1;
    v64 = v263;
    if (!kDQuadParamTable[10 * v66 + 168])
    {
      v61 = -1;
      v65 = v261;
LABEL_71:
      v59 += v61;
      goto LABEL_77;
    }
  }
  v65 = v261;
LABEL_77:
  v68 = v65 | 0xC;
  if (__b >= v59) {
    v69 = v59;
  }
  else {
    v69 = __b;
  }
  v270[0] = v69;
  if (v60) {
    LODWORD(v70) = __b;
  }
  else {
    LODWORD(v70) = 0;
  }
  if (v70 >= v62) {
    v70 = v62;
  }
  else {
    v70 = v70;
  }
  v269[0] = v70;
  v71 = &kDQuadParamTable[10 * v63];
  v72 = v71[164];
  v73 = v71[165];
  v74 = HIDWORD(v271) - HIDWORD(v273);
  if (HIDWORD(v271) - HIDWORD(v273) >= 0)
  {
    v75 = v73;
    if (!v74) {
      goto LABEL_94;
    }
    v75 = v74 + v73;
    goto LABEL_89;
  }
  if (kDQuadParamTable[10 * v63 + 167] >= HIDWORD(v273) - HIDWORD(v271))
  {
    v75 = v73;
  }
  else
  {
    v75 = v73 - 1;
    if (!kDQuadParamTable[10 * v63 + 168])
    {
      v74 = -1;
LABEL_89:
      v72 += v74;
    }
  }
LABEL_94:
  v76 = v68 + v260;
  if (v276 >= v72) {
    v77 = v72;
  }
  else {
    v77 = v276;
  }
  v270[1] = v77;
  if (v73) {
    LODWORD(v78) = v276;
  }
  else {
    LODWORD(v78) = 0;
  }
  if (v78 >= v75) {
    v78 = v75;
  }
  else {
    v78 = v78;
  }
  v269[1] = v78;
  v79 = &kDQuadParamTable[10 * v52];
  v80 = v79[164];
  v81 = v79[165];
  v82 = v272 - v274;
  if ((int)v272 - (int)v274 >= 0)
  {
    v83 = v81;
    if (!v82) {
      goto LABEL_111;
    }
    v83 = v82 + v81;
    goto LABEL_106;
  }
  if (kDQuadParamTable[10 * v52 + 167] >= (int)v274 - (int)v272)
  {
    v83 = v81;
  }
  else
  {
    v83 = v81 - 1;
    if (!kDQuadParamTable[10 * v52 + 168])
    {
      v82 = -1;
LABEL_106:
      v80 += v82;
    }
  }
LABEL_111:
  v84 = v76 + v39;
  if (v277 >= v80) {
    v85 = v80;
  }
  else {
    v85 = v277;
  }
  v270[2] = v85;
  if (v81) {
    v86 = v277;
  }
  else {
    v86 = 0;
  }
  if (v86 >= v83) {
    v87 = v83;
  }
  else {
    v87 = v86;
  }
  v269[2] = v87;
  v88 = &kDQuadParamTable[10 * v64];
  LODWORD(v89) = v88[164];
  v90 = v88[165];
  v91 = HIDWORD(v272) - HIDWORD(v274);
  if (HIDWORD(v272) - HIDWORD(v274) >= 0)
  {
    v92 = v90;
    if (!v91) {
      goto LABEL_128;
    }
    v92 = v91 + v90;
    goto LABEL_123;
  }
  if (kDQuadParamTable[10 * v64 + 167] >= HIDWORD(v274) - HIDWORD(v272))
  {
    v92 = v90;
  }
  else
  {
    v92 = v90 - 1;
    if (!kDQuadParamTable[10 * v64 + 168])
    {
      v91 = -1;
LABEL_123:
      LODWORD(v89) = v91 + v89;
    }
  }
LABEL_128:
  if (v278 >= v89) {
    v89 = v89;
  }
  else {
    v89 = v278;
  }
  v270[3] = v89;
  if (v90) {
    LODWORD(v93) = v278;
  }
  else {
    LODWORD(v93) = 0;
  }
  if (v93 >= v92) {
    v93 = v92;
  }
  else {
    v93 = v93;
  }
  v269[3] = v93;
  v94 = v84 + v47;
  v267 = 0;
  v268 = 0;
  if (v57 || __b - 8 > 4)
  {
    if (v69 <= 0x20)
    {
      v95 = 0;
      if (v69 && v11 - v5 + (v15 << 6) + v69 <= 0xC0)
      {
        v95 = 0;
        v96 = 0;
        v97 = v69;
        do
        {
          v98 = 64 - v11;
          if (64 - v11 >= v97) {
            v98 = v97;
          }
          v95 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v98)) << v96;
          v96 += v98;
          v99 = v98 + v11;
          v15 += v99 >> 6;
          v11 = v99 & 0x3F;
          v97 -= v98;
        }
        while (v97);
      }
    }
    else
    {
      v95 = 0;
    }
    LODWORD(v267) = v95 << (__b - v69);
    v94 += v69;
    v64 = v263;
    if (v63)
    {
LABEL_153:
      if (v77 <= 0x20)
      {
        v100 = 0;
        if (v77 && v11 - v5 + (v15 << 6) + v77 <= 0xC0)
        {
          v100 = 0;
          v101 = 0;
          v102 = v77;
          do
          {
            v103 = 64 - v11;
            if (64 - v11 >= v102) {
              v103 = v102;
            }
            v100 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v103)) << v101;
            v101 += v103;
            v15 += (v103 + v11) >> 6;
            v11 = (v103 + v11) & 0x3F;
            v102 -= v103;
          }
          while (v102);
        }
      }
      else
      {
        v100 = 0;
      }
      HIDWORD(v267) = v100 << (v276 - v77);
      v94 += v77;
      v64 = v263;
      if (v52) {
        goto LABEL_165;
      }
      goto LABEL_162;
    }
  }
  else
  {
    LODWORD(v267) = v258;
    if (v63) {
      goto LABEL_153;
    }
  }
  if (v276 - 8 >= 5) {
    goto LABEL_153;
  }
  HIDWORD(v267) = v257;
  if (v52) {
    goto LABEL_165;
  }
LABEL_162:
  if (v277 - 8 < 5)
  {
    LODWORD(v268) = v256;
    if (v64) {
      goto LABEL_177;
    }
    goto LABEL_174;
  }
LABEL_165:
  if (v85 <= 0x20)
  {
    v104 = 0;
    if (v85 && v11 - v5 + (v15 << 6) + v85 <= 0xC0)
    {
      v104 = 0;
      v105 = 0;
      v106 = v85;
      do
      {
        v107 = 64 - v11;
        if (64 - v11 >= v106) {
          v107 = v106;
        }
        v104 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v107)) << v105;
        v105 += v107;
        v15 += (v107 + v11) >> 6;
        v11 = (v107 + v11) & 0x3F;
        v106 -= v107;
      }
      while (v106);
    }
  }
  else
  {
    v104 = 0;
  }
  LODWORD(v268) = v104 << (v277 - v85);
  v94 += v85;
  if (v64)
  {
LABEL_177:
    if (v89 <= 0x20)
    {
      v109 = 0;
      if (v89)
      {
        v108 = a2;
        if (v11 - v5 + (v15 << 6) + v89 <= 0xC0)
        {
          v109 = 0;
          v110 = 0;
          v111 = v89;
          do
          {
            v112 = 64 - v11;
            if (64 - v11 >= v111) {
              v112 = v111;
            }
            v109 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v112)) << v110;
            v110 += v112;
            v15 += (v112 + v11) >> 6;
            v11 = (v112 + v11) & 0x3F;
            v111 -= v112;
          }
          while (v111);
        }
LABEL_187:
        HIDWORD(v268) = v109 << (v278 - v89);
        v94 += v89;
        v265 = 0;
        v266 = 0;
        if (v70) {
          goto LABEL_188;
        }
        goto LABEL_195;
      }
    }
    else
    {
      v109 = 0;
    }
    v108 = a2;
    goto LABEL_187;
  }
LABEL_174:
  if (v278 - 8 >= 5) {
    goto LABEL_177;
  }
  HIDWORD(v268) = v255;
  v108 = a2;
  v265 = 0;
  v266 = 0;
  if (v70)
  {
LABEL_188:
    if ((unint64_t)(v11 - v5 + (v15 << 6) + 3) <= 0xC0)
    {
      v113 = 0;
      v114 = 0;
      v115 = 3;
      do
      {
        v116 = 64 - v11;
        if (64 - v11 >= v115) {
          v116 = v115;
        }
        v113 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v116)) << v114;
        v114 += v116;
        v15 += (v116 + v11) >> 6;
        v11 = (v116 + v11) & 0x3F;
        v115 -= v116;
      }
      while (v115);
    }
    else
    {
      v113 = 0;
    }
    LODWORD(v265) = v113;
    v94 += 3;
  }
LABEL_195:
  if (v78)
  {
    if ((unint64_t)(v11 - v5 + (v15 << 6) + 3) <= 0xC0)
    {
      v117 = 0;
      v118 = 0;
      v119 = 3;
      do
      {
        v120 = 64 - v11;
        if (64 - v11 >= v119) {
          v120 = v119;
        }
        v117 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v120)) << v118;
        v118 += v120;
        v15 += (v120 + v11) >> 6;
        v11 = (v120 + v11) & 0x3F;
        v119 -= v120;
      }
      while (v119);
    }
    else
    {
      v117 = 0;
    }
    HIDWORD(v265) = v117;
    v94 += 3;
  }
  if (v87)
  {
    if ((unint64_t)(v11 - v5 + (v15 << 6) + 3) <= 0xC0)
    {
      v121 = 0;
      v122 = 0;
      v123 = 3;
      do
      {
        v124 = 64 - v11;
        if (64 - v11 >= v123) {
          v124 = v123;
        }
        v121 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v124)) << v122;
        v122 += v124;
        v15 += (v124 + v11) >> 6;
        v11 = (v124 + v11) & 0x3F;
        v123 -= v124;
      }
      while (v123);
    }
    else
    {
      v121 = 0;
    }
    LODWORD(v266) = v121;
    v94 += 3;
  }
  if (v93)
  {
    if ((unint64_t)(v11 - v5 + (v15 << 6) + 3) <= 0xC0)
    {
      v125 = 0;
      v126 = 0;
      v127 = 3;
      do
      {
        v128 = 64 - v11;
        if (64 - v11 >= v127) {
          v128 = v127;
        }
        v125 |= (unint64_t)((*(void *)(v4 + 8 * v15) >> v11) & ~(-1 << v128)) << v126;
        v126 += v128;
        v15 += (v128 + v11) >> 6;
        v11 = (v128 + v11) & 0x3F;
        v127 -= v128;
      }
      while (v127);
    }
    else
    {
      v125 = 0;
    }
    HIDWORD(v266) = v125;
    v94 += 3;
  }
  v129 = 0;
  v130 = a3 & 0xFFFFFFFD;
  v131 = 192 - v94;
  v132 = (192 - v94) / 7u;
  v133 = (v11 | (v15 << 6)) + v131 % 7;
  memset(v264, 0, sizeof(v264));
  do
  {
    v136 = v133 >> 6;
    v137 = v133 & 0x3F;
    if (v70)
    {
      if (v70 <= 0x20 && v137 - v5 + (v133 & 0xFFFFFFFFFFFFFFC0) + v70 <= 0xC0)
      {
        v138 = 0;
        v139 = 0;
        v140 = v70;
        do
        {
          v141 = 64 - v137;
          if (64 - v137 >= v140) {
            v141 = v140;
          }
          v138 |= (unint64_t)((*(void *)(v4 + 8 * v136) >> v137) & ~(-1 << v141)) << v139;
          v139 += v141;
          v142 = v141 + v137;
          v136 += v142 >> 6;
          v137 = v142 & 0x3F;
          v140 -= v141;
        }
        while (v140);
      }
      else
      {
        v138 = 0;
      }
      *((_DWORD *)v264 + v129) = v138;
    }
    if (!v78)
    {
      v135 = v70;
      if (!v87) {
        goto LABEL_251;
      }
LABEL_243:
      if (v87 <= 0x20 && v137 - v5 + (v136 << 6) + v87 <= 0xC0)
      {
        v148 = 0;
        v149 = 0;
        v150 = v87;
        do
        {
          v151 = 64 - v137;
          if (64 - v137 >= v150) {
            v151 = v150;
          }
          v148 |= (unint64_t)((*(void *)(v4 + 8 * v136) >> v137) & ~(-1 << v151)) << v149;
          v149 += v151;
          v152 = v151 + v137;
          v136 += v152 >> 6;
          v137 = v152 & 0x3F;
          v150 -= v151;
        }
        while (v150);
      }
      else
      {
        v148 = 0;
      }
      *((_DWORD *)&v264[3] + v129 + 2) = v148;
      v135 += v87;
      goto LABEL_251;
    }
    if (v78 <= 0x20 && v137 - v5 + (v136 << 6) + v78 <= 0xC0)
    {
      v143 = 0;
      v144 = 0;
      v145 = v78;
      do
      {
        v146 = 64 - v137;
        if (64 - v137 >= v145) {
          v146 = v145;
        }
        v143 |= (unint64_t)((*(void *)(v4 + 8 * v136) >> v137) & ~(-1 << v146)) << v144;
        v144 += v146;
        v147 = v146 + v137;
        v136 += v147 >> 6;
        v137 = v147 & 0x3F;
        v145 -= v146;
      }
      while (v145);
    }
    else
    {
      v143 = 0;
    }
    *((_DWORD *)&v264[1] + v129 + 3) = v143;
    v135 = v78 + v70;
    if (v87) {
      goto LABEL_243;
    }
LABEL_251:
    if (v93)
    {
      if (v93 > 0x20 || v137 - v5 + (v136 << 6) + v93 > 0xC0)
      {
        v134 = 0;
      }
      else
      {
        v134 = 0;
        v153 = 0;
        v154 = v93;
        do
        {
          v155 = 64 - v137;
          if (64 - v137 >= v154) {
            v155 = v154;
          }
          v134 |= (unint64_t)((*(void *)(v4 + 8 * v136) >> v137) & ~(-1 << v155)) << v153;
          v153 += v155;
          v156 = v155 + v137;
          v136 += v156 >> 6;
          v137 = v156 & 0x3F;
          v154 -= v155;
        }
        while (v154);
      }
      *((_DWORD *)&v264[5] + v129 + 1) = v134;
      v135 += v93;
    }
    v133 = (v137 | (v136 << 6)) + v132 - v135;
    ++v129;
  }
  while (v129 != 7);
  v157 = 0;
  v158 = 0;
  v159 = v108 + 112;
  do
  {
    v164 = *(void *)&kDQuadParamTable[160 * v279[v157 / 4] + 2 + 10 * v280[v157 / 4]];
    v165 = v269[v157 / 4];
    v166 = v164 >> v165;
    if (v164 >> v165 <= 1) {
      v166 = 1;
    }
    v167 = *(unsigned int *)((char *)&__b + v157);
    v168 = v166 >> 1;
    v169 = (unint64_t)(1 << (v167 - v270[v157 / 4])) >> 1;
    if (v166 >> 1 < v169) {
      v169 = v166 >> 1;
    }
    v170 = (1 << (v167 - 1));
    v171 = *(unsigned int *)((char *)&v267 + v157);
    v172 = v170 - v171;
    v173 = 1 << v167;
    v174 = (1 << v167) - 1;
    if (v171) {
      v175 = v169;
    }
    else {
      v175 = 0;
    }
    v176 = v171 == v170;
    v177 = v167 == 16;
    if (v167 == 16) {
      result = 31744;
    }
    else {
      result = 2139095040;
    }
    if (v167 == 16) {
      v179 = 64512;
    }
    else {
      v179 = 4286578688;
    }
    v180 = 2143289344;
    if (v177) {
      v180 = 32256;
    }
    v181 = 4290772992;
    if (v177) {
      v181 = 65024;
    }
    v182 = (v179 - 1);
    if (v165)
    {
      v183 = v164 + v171;
      v184 = ~(-1 << v165);
      v185 = *(_DWORD *)((char *)&v265 + v157);
      v186 = v172 / v166;
      if (!v185)
      {
        v195 = 0;
        v189 = v175;
        v188 = v171 == v170;
        goto LABEL_322;
      }
      v187 = *(unsigned int *)((char *)v264 + v158);
      v188 = v186 == v187;
      if (v171 | v187)
      {
        if (v183 >= v173 && v187 == v184)
        {
          v195 = 1;
          v189 = v173 - 1;
          goto LABEL_322;
        }
        v189 = v168 + v166 * v187;
      }
      else
      {
        v189 = 0;
      }
      v195 = 1;
LABEL_322:
      v196 = v189 + v171;
      v197 = v196;
      if (a3 == 4)
      {
        v198 = v196 < result || v196 >= v180;
        v197 = (result - 1);
        if (v198)
        {
          v199 = v196 < v180 || v196 >= v170;
          v197 = v170;
          if (v199)
          {
            if (v196 < v181 && v196 >= v179) {
              v197 = (v179 - 1);
            }
            else {
              v197 = v196;
            }
          }
        }
      }
      if (v197 >= v173) {
        v201 = v174;
      }
      else {
        v201 = v197;
      }
      if (v188) {
        v202 = 0;
      }
      else {
        v202 = v201 ^ v170;
      }
      if (v130 != 1) {
        v202 = v201;
      }
      *(_DWORD *)(v159 + v157 - 112) = v202;
      if (v185 == 1)
      {
        v203 = v175;
        v204 = v171 == v170;
      }
      else
      {
        v205 = *(unsigned int *)(((unint64_t)v264 | (4 * v195)) + v158);
        v204 = v186 == v205;
        if (v171 | v205)
        {
          if (v183 < v173 || (v203 = v173 - 1, v205 != v184)) {
            v203 = v168 + v166 * v205;
          }
        }
        else
        {
          v203 = 0;
        }
        ++v195;
      }
      v206 = v203 + v171;
      v207 = v206;
      if (a3 == 4)
      {
        v208 = v206 < result || v206 >= v180;
        v207 = (result - 1);
        if (v208)
        {
          if (v206 < v180 || (v207 = v170, v206 >= v170))
          {
            if (v206 < v181 && v206 >= v179) {
              v207 = (v179 - 1);
            }
            else {
              v207 = v206;
            }
          }
        }
      }
      if (v207 >= v173) {
        v210 = v174;
      }
      else {
        v210 = v207;
      }
      if (v204) {
        v211 = 0;
      }
      else {
        v211 = v210 ^ v170;
      }
      if (v130 != 1) {
        v211 = v210;
      }
      *(_DWORD *)(v159 + v157 - 96) = v211;
      if (v185 == 2)
      {
        v212 = v175;
        v213 = v171 == v170;
      }
      else
      {
        v214 = *(unsigned int *)(((unint64_t)v264 | (4 * v195)) + v158);
        v213 = v186 == v214;
        if (v171 | v214)
        {
          if (v183 < v173 || (v212 = v173 - 1, v214 != v184)) {
            v212 = v168 + v166 * v214;
          }
        }
        else
        {
          v212 = 0;
        }
        ++v195;
      }
      v215 = v212 + v171;
      v216 = v215;
      if (a3 == 4)
      {
        if (v215 < result || (v216 = (result - 1), v215 >= v180))
        {
          if (v215 < v180 || (v216 = v170, v215 >= v170))
          {
            if (v215 < v181 && v215 >= v179) {
              v216 = (v179 - 1);
            }
            else {
              v216 = v215;
            }
          }
        }
      }
      if (v216 >= v173) {
        v218 = v174;
      }
      else {
        v218 = v216;
      }
      if (v213) {
        v219 = 0;
      }
      else {
        v219 = v218 ^ v170;
      }
      if (v130 != 1) {
        v219 = v218;
      }
      *(_DWORD *)(v159 + v157 - 80) = v219;
      if (v185 == 3)
      {
        v220 = v175;
        v221 = v171 == v170;
      }
      else
      {
        v222 = *(unsigned int *)((char *)v264 + 4 * v195 + v158);
        v221 = v186 == v222;
        if (v171 | v222)
        {
          if (v183 < v173 || (v220 = v173 - 1, v222 != v184)) {
            v220 = v168 + v166 * v222;
          }
        }
        else
        {
          v220 = 0;
        }
        ++v195;
      }
      v223 = v220 + v171;
      v224 = v223;
      if (a3 == 4)
      {
        if (v223 < result || (v224 = (result - 1), v223 >= v180))
        {
          if (v223 < v180 || (v224 = v170, v223 >= v170))
          {
            if (v223 < v181 && v223 >= v179) {
              v224 = (v179 - 1);
            }
            else {
              v224 = v223;
            }
          }
        }
      }
      if (v224 >= v173) {
        v226 = v174;
      }
      else {
        v226 = v224;
      }
      if (v221) {
        v227 = 0;
      }
      else {
        v227 = v226 ^ v170;
      }
      if (v130 != 1) {
        v227 = v226;
      }
      *(_DWORD *)(v159 + v157 - 64) = v227;
      if (v185 == 4)
      {
        v228 = v175;
        v229 = v171 == v170;
      }
      else
      {
        v230 = *(unsigned int *)((char *)v264 + 4 * v195 + v158);
        v229 = v186 == v230;
        if (v171 | v230)
        {
          if (v183 < v173 || (v228 = v173 - 1, v230 != v184)) {
            v228 = v168 + v166 * v230;
          }
        }
        else
        {
          v228 = 0;
        }
        ++v195;
      }
      v231 = v228 + v171;
      v232 = v231;
      if (a3 == 4)
      {
        if (v231 < result || (v232 = (result - 1), v231 >= v180))
        {
          if (v231 < v180 || (v232 = v170, v231 >= v170))
          {
            if (v231 < v181 && v231 >= v179) {
              v232 = (v179 - 1);
            }
            else {
              v232 = v231;
            }
          }
        }
      }
      if (v232 >= v173) {
        v234 = v174;
      }
      else {
        v234 = v232;
      }
      if (v229) {
        v235 = 0;
      }
      else {
        v235 = v234 ^ v170;
      }
      if (v130 != 1) {
        v235 = v234;
      }
      *(_DWORD *)(v159 + v157 - 48) = v235;
      if (v185 == 5)
      {
        v236 = v175;
        v237 = v171 == v170;
      }
      else
      {
        v238 = *(unsigned int *)((char *)v264 + 4 * v195 + v158);
        v237 = v186 == v238;
        if (v171 | v238)
        {
          if (v183 < v173 || (v236 = v173 - 1, v238 != v184)) {
            v236 = v168 + v166 * v238;
          }
        }
        else
        {
          v236 = 0;
        }
        ++v195;
      }
      v239 = v236 + v171;
      v240 = v239;
      if (a3 == 4)
      {
        if (v239 < result || (v240 = (result - 1), v239 >= v180))
        {
          if (v239 < v180 || (v240 = v170, v239 >= v170))
          {
            if (v239 < v181 && v239 >= v179) {
              v240 = (v179 - 1);
            }
            else {
              v240 = v239;
            }
          }
        }
      }
      if (v240 >= v173) {
        v242 = v174;
      }
      else {
        v242 = v240;
      }
      if (v237) {
        v243 = 0;
      }
      else {
        v243 = v242 ^ v170;
      }
      if (v130 != 1) {
        v243 = v242;
      }
      *(_DWORD *)(v159 + v157 - 32) = v243;
      if (v185 == 6)
      {
        v244 = v175;
        v245 = v171 == v170;
      }
      else
      {
        v246 = *(unsigned int *)((char *)v264 + 4 * v195 + v158);
        v245 = v186 == v246;
        if (v171 | v246)
        {
          if (v183 < v173 || (v244 = v173 - 1, v246 != v184)) {
            v244 = v168 + v166 * v246;
          }
        }
        else
        {
          v244 = 0;
        }
        ++v195;
      }
      v247 = v244 + v171;
      v248 = v247;
      if (a3 == 4)
      {
        if (v247 < result || (v248 = (result - 1), v247 >= v180))
        {
          if (v247 < v180 || (v248 = v170, v247 >= v170))
          {
            if (v247 < v181 && v247 >= v179) {
              v248 = (v179 - 1);
            }
            else {
              v248 = v247;
            }
          }
        }
      }
      if (v248 >= v173) {
        v250 = v174;
      }
      else {
        v250 = v248;
      }
      if (v245) {
        v251 = 0;
      }
      else {
        v251 = v250 ^ v170;
      }
      if (v130 != 1) {
        v251 = v250;
      }
      *(_DWORD *)(v159 + v157 - 16) = v251;
      if (v185 != 7)
      {
        v252 = *(unsigned int *)((char *)v264 + 4 * v195 + v158);
        v176 = v186 == v252;
        if (v171 | v252)
        {
          if (v183 >= v173 && v252 == v184) {
            v175 = v173 - 1;
          }
          else {
            v175 = v168 + v166 * v252;
          }
        }
        else
        {
          v175 = 0;
        }
      }
      v253 = v175 + v171;
      v161 = v175 + v171;
      if (a3 == 4)
      {
        if (v253 < result || (v161 = (result - 1), v253 >= v180))
        {
          if (v253 < v180 || (v161 = v170, v253 >= v170))
          {
            if (v253 < v181 && v253 >= v179) {
              v161 = (v179 - 1);
            }
            else {
              v161 = v175 + v171;
            }
          }
        }
      }
      if (v161 >= v173) {
        v162 = v174;
      }
      else {
        v162 = v161;
      }
      v163 = v162 ^ v170;
      if (v176) {
        v163 = 0;
      }
      if (v130 == 1) {
        v162 = v163;
      }
      goto LABEL_273;
    }
    v191 = v180 <= v171 && v171 < v170;
    v193 = v171 >= v179 && v181 > v171;
    if (a3 == 4)
    {
      if (v171 < result || v180 <= v171)
      {
        if (v191)
        {
          if (v173 <= v170) {
            LODWORD(v194) = v174;
          }
          else {
            LODWORD(v194) = v170;
          }
        }
        else
        {
          if (v193) {
            v194 = v182;
          }
          else {
            v194 = *(unsigned int *)((char *)&v267 + v157);
          }
          if (v194 >= v173) {
            LODWORD(v194) = v174;
          }
        }
      }
      else if (v173 <= (result - 1))
      {
        LODWORD(v194) = v174;
      }
      else
      {
        LODWORD(v194) = result - 1;
      }
    }
    else if (v173 <= v171)
    {
      LODWORD(v194) = v174;
    }
    else
    {
      LODWORD(v194) = *(_DWORD *)((char *)&v267 + v157);
    }
    if (v166 <= v172) {
      v162 = v194 ^ v170;
    }
    else {
      v162 = 0;
    }
    if (v130 != 1) {
      v162 = v194;
    }
    v254 = v159 + v157;
    *(_DWORD *)(v254 - 112) = v162;
    *(_DWORD *)(v254 - 96) = v162;
    *(_DWORD *)(v254 - 80) = v162;
    *(_DWORD *)(v254 - 64) = v162;
    *(_DWORD *)(v254 - 48) = v162;
    *(_DWORD *)(v254 - 32) = v162;
    *(_DWORD *)(v254 - 16) = v162;
LABEL_273:
    *(_DWORD *)(v159 + v157) = v162;
    v158 += 28;
    v157 += 4;
  }
  while (v158 != 112);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(_OWORD *a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v618 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
    v12 = (_OWORD *)((char *)a1 + a2);
    v12[2] = 0u;
    v12[3] = 0u;
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    v13 = (_OWORD *)((char *)a1 + 2 * a2);
    v13[2] = 0u;
    v13[3] = 0u;
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    v14 = (_OWORD *)((char *)a1 + 2 * a2 + a2);
    v14[2] = 0u;
    v14[3] = 0u;
    _OWORD *v14 = 0u;
    v14[1] = 0u;
    return result;
  }
  char v8 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v591, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v591, a5);
    }
    *(int16x4_t *)v599.i8 = vmovn_s32(v591);
    v599.u64[1] = (unint64_t)vmovn_s32(v593);
    *(int16x4_t *)v601.i8 = vmovn_s32(v592);
    v601.u64[1] = (unint64_t)vmovn_s32(v594);
    v603[0] = vmovn_s32(v595);
    v603[1] = vmovn_s32(v597);
    unint64_t v21 = a3 + 24;
    v604[0] = vmovn_s32(v596);
    v604[1] = vmovn_s32(v598);
    if ((v8 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v21, (uint64_t)&v591, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v21, (uint64_t)&v591, a5);
    }
    *(int16x4_t *)v600.i8 = vmovn_s32(v591);
    v600.u64[1] = (unint64_t)vmovn_s32(v593);
    *(int16x4_t *)v602.i8 = vmovn_s32(v592);
    v602.u64[1] = (unint64_t)vmovn_s32(v594);
    v603[2] = vmovn_s32(v595);
    v603[3] = vmovn_s32(v597);
    unint64_t v22 = a3 + 48;
    v604[2] = vmovn_s32(v596);
    v604[3] = vmovn_s32(v598);
    if ((v8 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v22, (uint64_t)&v591, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v22, (uint64_t)&v591, a5);
    }
    v605[0] = vmovn_s32(v591);
    v605[1] = vmovn_s32(v593);
    v606[0] = vmovn_s32(v592);
    v606[1] = vmovn_s32(v594);
    *(int16x4_t *)v607.i8 = vmovn_s32(v595);
    v607.u64[1] = (unint64_t)vmovn_s32(v597);
    unint64_t v23 = a3 + 72;
    *(int16x4_t *)v609.i8 = vmovn_s32(v596);
    v609.u64[1] = (unint64_t)vmovn_s32(v598);
    if ((v8 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v23, (uint64_t)&v591, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v23, (uint64_t)&v591, a5);
    }
    v605[2] = vmovn_s32(v591);
    v605[3] = vmovn_s32(v593);
    v606[2] = vmovn_s32(v592);
    v606[3] = vmovn_s32(v594);
    *(int16x4_t *)v608.i8 = vmovn_s32(v595);
    v608.u64[1] = (unint64_t)vmovn_s32(v597);
    v24 = (unint64_t *)(a1 + 2);
    unint64_t v25 = -32;
    *(int16x4_t *)v610.i8 = vmovn_s32(v596);
    v610.u64[1] = (unint64_t)vmovn_s32(v598);
    do
    {
      unint64_t v26 = (((unint64_t)(v603[v25 / 8] & 0x3FF) << 6) | ((unint64_t)WORD1(v603[v25 / 8]) << 22) | ((unint64_t)WORD2(v603[v25 / 8]) << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)HIWORD(v603[v25 / 8]) << 54);
      *(v24 - 4) = (((unint64_t)(v601.i16[v25 / 2] & 0x3FF) << 6) | ((unint64_t)v601.u16[v25 / 2 + 1] << 22) | ((unint64_t)v601.u16[v25 / 2 + 2] << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)v601.u16[v25 / 2 + 3] << 54);
      *(v24 - 3) = v26;
      unint64_t v27 = (((unint64_t)(v605[v25 / 8] & 0x3FF) << 6) | ((unint64_t)WORD1(v605[v25 / 8]) << 22) | ((unint64_t)WORD2(v605[v25 / 8]) << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)HIWORD(v605[v25 / 8]) << 54);
      *(v24 - 2) = (((unint64_t)(v604[v25 / 8] & 0x3FF) << 6) | ((unint64_t)WORD1(v604[v25 / 8]) << 22) | ((unint64_t)WORD2(v604[v25 / 8]) << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)HIWORD(v604[v25 / 8]) << 54);
      *(v24 - 1) = v27;
      unint64_t v28 = (((unint64_t)(v607.i16[v25 / 2] & 0x3FF) << 6) | ((unint64_t)v607.u16[v25 / 2 + 1] << 22) | ((unint64_t)v607.u16[v25 / 2 + 2] << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)v607.u16[v25 / 2 + 3] << 54);
      unint64_t *v24 = (((unint64_t)(v606[v25 / 8] & 0x3FF) << 6) | ((unint64_t)WORD1(v606[v25 / 8]) << 22) | ((unint64_t)WORD2(v606[v25 / 8]) << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)HIWORD(v606[v25 / 8]) << 54);
      v24[1] = v28;
      unint64_t v29 = (((unint64_t)(v611.i16[v25 / 2] & 0x3FF) << 6) | ((unint64_t)v611.u16[v25 / 2 + 1] << 22) | ((unint64_t)v611.u16[v25 / 2 + 2] << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)v611.u16[v25 / 2 + 3] << 54);
      v24[2] = (((unint64_t)(v609.i16[v25 / 2] & 0x3FF) << 6) | ((unint64_t)v609.u16[v25 / 2 + 1] << 22) | ((unint64_t)v609.u16[v25 / 2 + 2] << 38)) & 0xFFC0FFC0FFC0 | ((unint64_t)v609.u16[v25 / 2 + 3] << 54);
      v24[3] = v29;
      v24 = (unint64_t *)((char *)v24 + a2);
      v25 += 8;
    }
    while (v25);
    return 96;
  }
  if (a4 != 159)
  {
    if (a4 == 4)
    {
      uint64x2_t v15 = (uint64x2_t)vld1q_dup_f64((const double *)a3);
      int8x16_t v16 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v15, (uint64x2_t)xmmword_242EA7AE0), (int8x16_t)xmmword_242EA7B10), vandq_s8((int8x16_t)vshlq_u64(v15, (uint64x2_t)xmmword_242EA7AF0), (int8x16_t)xmmword_242EA7B00));
      int64x2_t v17 = vdupq_n_s64(*(void *)&vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
      *a1 = v17;
      a1[1] = v17;
      a1[2] = v17;
      a1[3] = v17;
      v18 = (int64x2_t *)((char *)a1 + a2);
      int64x2_t *v18 = v17;
      v18[1] = v17;
      v18[2] = v17;
      v18[3] = v17;
      v19 = (int64x2_t *)((char *)a1 + 2 * a2);
      int64x2_t *v19 = v17;
      v19[1] = v17;
      v19[2] = v17;
      v19[3] = v17;
      v20 = (int64x2_t *)((char *)a1 + 2 * a2 + a2);
      int64x2_t *v20 = v17;
      v20[1] = v17;
      v20[2] = v17;
      v20[3] = v17;
      return 5;
    }
    v592.i8[8] = 0;
    v591.i64[0] = 8 * (a3 & 7);
    v591.i64[1] = a3 & 0xFFFFFFFFFFFFFFF8;
    v592.i64[0] = v591.i64[0] | 0x300;
    uint64_t result = AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)19,AGX::AppleCompressionGen2::Vec<short>>((uint64_t)&v612, (uint64_t)v617, (uint64_t)&v611, (unint64_t *)&v591, a4);
    v53.i64[0] = 0x3000300030003;
    v53.i64[1] = 0x3000300030003;
    int8x16_t v54 = v612;
    int16x8_t v55 = (int16x8_t)vandq_s8(v612, v53);
    int8x16_t v56 = vbicq_s8(v617[0], (int8x16_t)vceqq_s16(v55, (int16x8_t)v53));
    v617[0] = v56;
    int16x8_t v613 = (int16x8_t)v56;
    int16x8_t v614 = (int16x8_t)v56;
    int16x8_t v615 = (int16x8_t)v56;
    int16x8_t v616 = (int16x8_t)v56;
    v57.i64[0] = 0x202020202020202;
    v57.i64[1] = 0x202020202020202;
    int8x16_t v58 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v612.i8, (int16x4_t)0x4000400040004)), v57);
    unint64_t v59 = v591.i64[0];
    int16x8_t v589 = v55;
    if (vmaxvq_s8(v58) < 1)
    {
      v231.i64[0] = -1;
      v231.i64[1] = -1;
      int8x16_t v587 = v231;
      int8x16_t v588 = v231;
      int8x16_t v585 = v231;
      int8x16_t v586 = v231;
    }
    else
    {
      int8x16_t v60 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v58, v58));
      int8x16_t v61 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v60, (int16x8_t)v60));
      unint64_t v62 = vpaddq_s32((int32x4_t)v61, (int32x4_t)v61).u64[0];
      v63.i64[0] = v62;
      v63.i64[1] = HIDWORD(v62);
      int64x2_t v64 = v63;
      unint64_t v65 = vaddvq_s64(v63);
      unint64_t v66 = v65;
      unint64_t v67 = v591.i64[0] + v65;
      if (v592.i64[0]) {
        BOOL v68 = v592.i64[0] >= v67;
      }
      else {
        BOOL v68 = 1;
      }
      int v69 = !v68;
      if (v65 <= 0x80 && v69 == 0)
      {
        v52.i64[0] = 63;
        v232 = (int64x2_t *)(v591.i64[1] + 8 * ((unint64_t)v591.i64[0] >> 6));
        int64x2_t v233 = vaddq_s64(vdupq_lane_s64(vandq_s8((int8x16_t)v591.u64[0], v52).i64[0], 0), vzip1q_s64((int64x2_t)0, v64));
        int8x16_t v71 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v232, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v233)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232->i64[0], 0), (uint64x2_t)vnegq_s64(v233)));
        if ((v591.i8[0] & 0x3F) + v66 >= 0x81) {
          int8x16_t v71 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v233)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v232[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v233))), v71);
        }
        v591.i64[0] = v67;
        unint64_t v59 = v67;
      }
      else
      {
        v592.i8[8] = 1;
        int8x16_t v71 = 0uLL;
      }
      int32x2_t v234 = vzip1_s32(*(int32x2_t *)v61.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
      v235.i64[0] = v234.u32[0];
      v235.i64[1] = v234.u32[1];
      int64x2_t v236 = (int64x2_t)vshlq_u64((uint64x2_t)v71, (uint64x2_t)vnegq_s64(v235));
      *(int32x2_t *)v71.i8 = vmovn_s64((int64x2_t)v71);
      *(int32x2_t *)v236.i8 = vmovn_s64(v236);
      int16x8_t v237 = (int16x8_t)vzip1q_s32((int32x4_t)v71, (int32x4_t)v236);
      int16x8_t v238 = (int16x8_t)vshlq_u32((uint32x4_t)v237, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v60.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)))));
      *(int16x4_t *)v237.i8 = vmovn_s32((int32x4_t)v237);
      *(int16x4_t *)v238.i8 = vmovn_s32((int32x4_t)v238);
      int8x16_t v239 = (int8x16_t)vzip1q_s16(v237, v238);
      int8x16_t v240 = (int8x16_t)vshlq_u16((uint16x8_t)v239, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)))));
      *(int8x8_t *)v239.i8 = vmovn_s16((int16x8_t)v239);
      *(int8x8_t *)v240.i8 = vmovn_s16((int16x8_t)v240);
      int8x16_t v241 = vzip1q_s8(v239, v240);
      v240.i64[0] = 0x101010101010101;
      v240.i64[1] = 0x101010101010101;
      int8x16_t v242 = vshlq_s8(v240, v58);
      v240.i64[0] = -1;
      v240.i64[1] = -1;
      int32x4_t v243 = (int32x4_t)vqtbl1q_s8(vandq_s8(v241, vaddq_s8(v242, v240)), (int8x16_t)xmmword_242EA7560);
      *(int32x2_t *)v241.i8 = vdup_lane_s32(*(int32x2_t *)v243.i8, 0);
      *(int32x2_t *)v240.i8 = vdup_lane_s32(*(int32x2_t *)v243.i8, 1);
      int8x8_t v244 = (int8x8_t)vdupq_laneq_s32(v243, 2).u64[0];
      v243.i64[0] = vdupq_laneq_s32(v243, 3).u64[0];
      int16x8_t v613 = vsubw_s8(v613, *(int8x8_t *)v241.i8);
      int16x8_t v614 = vsubw_s8(v614, *(int8x8_t *)v240.i8);
      int16x8_t v615 = vsubw_s8(v615, v244);
      int16x8_t v616 = vsubw_s8(v616, *(int8x8_t *)v243.i8);
      int8x16_t v587 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v241.i8));
      int8x16_t v585 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v240.i8));
      int8x16_t v586 = (int8x16_t)vmovl_s8(vceqz_s8(v244));
      int8x16_t v588 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v243.i8));
    }
    v245.i64[0] = 0x8000800080008;
    v245.i64[1] = 0x8000800080008;
    int8x16_t v246 = 0uLL;
    int8x16_t v247 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v612, v245), (int8x16_t)0, 8uLL), v56);
    int8x16_t v248 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v247, (int16x8_t)v247));
    unint64_t v249 = vpaddq_s32((int32x4_t)v248, (int32x4_t)v248).u64[0];
    v250.i64[0] = v249;
    v250.i64[1] = HIDWORD(v249);
    int64x2_t v251 = v250;
    unint64_t v252 = vaddvq_s64(v250);
    if (v592.i64[0]) {
      BOOL v253 = v592.i64[0] >= v59 + v252;
    }
    else {
      BOOL v253 = 1;
    }
    int v254 = !v253;
    if (v252 <= 0x80 && v254 == 0)
    {
      int64x2_t v256 = vaddq_s64(vdupq_n_s64(v59 & 0x3F), vzip1q_s64((int64x2_t)0, v251));
      v257 = (int64x2_t *)(v591.i64[1] + 8 * (v59 >> 6));
      int8x16_t v246 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v257, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v256)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v257->i64[0], 0), (uint64x2_t)vnegq_s64(v256)));
      if ((v59 & 0x3F) + v252 >= 0x81) {
        int8x16_t v246 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v257[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v256)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v257[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v256))), v246);
      }
      v59 += v252;
    }
    else
    {
      v592.i8[8] = 1;
    }
    int v258 = v612.i8[0] & 3;
    if (v258 != 2) {
      goto LABEL_98;
    }
    unint64_t v259 = v59 + 8;
    if (v592.i64[0])
    {
      if (v592.i64[0] >= v259)
      {
        unint64_t v260 = v59 + 16;
        v59 += 8;
      }
      else
      {
        v592.i8[8] = 1;
        unint64_t v260 = v59 + 8;
      }
      if (v592.i64[0] < v260)
      {
        v592.i8[8] = 1;
LABEL_98:
        int8x16_t v261 = 0uLL;
        int8x16_t v262 = vextq_s8((int8x16_t)0, (int8x16_t)v613, 8uLL);
        int8x16_t v263 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v262, (int16x8_t)v262));
        unint64_t v264 = vpaddq_s32((int32x4_t)v263, (int32x4_t)v263).u64[0];
        v265.i64[0] = v264;
        v265.i64[1] = HIDWORD(v264);
        int64x2_t v266 = v265;
        unint64_t v267 = vaddvq_s64(v265);
        unint64_t v268 = v59 + v267;
        if (v592.i64[0]) {
          BOOL v269 = v592.i64[0] >= v268;
        }
        else {
          BOOL v269 = 1;
        }
        int v270 = !v269;
        if (v267 > 0x80 || v270)
        {
          int v275 = 1;
          uint64_t v273 = v591.i64[1];
        }
        else
        {
          unint64_t v271 = v59 & 0x3F;
          int64x2_t v272 = vaddq_s64(vdupq_n_s64(v271), vzip1q_s64((int64x2_t)0, v266));
          uint64_t v273 = v591.i64[1];
          v274 = (int64x2_t *)(v591.i64[1] + 8 * (v59 >> 6));
          int8x16_t v261 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v274, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v272)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v274->i64[0], 0), (uint64x2_t)vnegq_s64(v272)));
          if (v271 + v267 >= 0x81) {
            int8x16_t v261 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v274[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v272)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v274[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v272))), v261);
          }
          int v275 = v592.u8[8];
          unint64_t v59 = v268;
        }
        v276.i64[0] = 0xF000F000F000FLL;
        v276.i64[1] = 0xF000F000F000FLL;
        v277.i64[0] = 0x10001000100010;
        v277.i64[1] = 0x10001000100010;
        int8x16_t v278 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v613, v613));
        unint64_t v279 = vpaddq_s32((int32x4_t)v278, (int32x4_t)v278).u64[0];
        v280.i64[0] = v279;
        v280.i64[1] = HIDWORD(v279);
        int64x2_t v281 = v280;
        unint64_t v282 = vaddvq_s64(v280);
        unint64_t v283 = v282;
        unint64_t v284 = v59 + v282;
        if (v592.i64[0]) {
          BOOL v285 = v592.i64[0] >= v284;
        }
        else {
          BOOL v285 = 1;
        }
        char v286 = !v285;
        int8x16_t v287 = 0uLL;
        if (v282 > 0x80 || (v286 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v284 = v59;
          int8x16_t v291 = 0uLL;
        }
        else
        {
          unint64_t v288 = v59 & 0x3F;
          int64x2_t v289 = vaddq_s64(vdupq_n_s64(v288), vzip1q_s64((int64x2_t)0, v281));
          v290 = (int64x2_t *)(v273 + 8 * (v59 >> 6));
          int8x16_t v291 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v290, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v289)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v290->i64[0], 0), (uint64x2_t)vnegq_s64(v289)));
          if (v288 + v283 >= 0x81) {
            int8x16_t v291 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v290[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v289)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v290[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v289))), v291);
          }
        }
        int32x2_t v292 = vzip1_s32(*(int32x2_t *)v278.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v278, v278, 8uLL));
        v293.i64[0] = v292.u32[0];
        v293.i64[1] = v292.u32[1];
        uint64x2_t v294 = (uint64x2_t)vnegq_s64(v293);
        int64x2_t v295 = (int64x2_t)vshlq_u64((uint64x2_t)v291, v294);
        *(int32x2_t *)v291.i8 = vmovn_s64((int64x2_t)v291);
        *(int32x2_t *)v295.i8 = vmovn_s64(v295);
        int16x8_t v296 = (int16x8_t)vzip1q_s32((int32x4_t)v291, (int32x4_t)v295);
        uint32x4_t v297 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v613.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v613, (int8x16_t)v613, 8uLL))));
        int16x8_t v298 = (int16x8_t)vshlq_u32((uint32x4_t)v296, v297);
        *(int16x4_t *)v296.i8 = vmovn_s32((int32x4_t)v296);
        *(int16x4_t *)v298.i8 = vmovn_s32((int32x4_t)v298);
        int16x8_t v299 = vzip1q_s16(v296, v298);
        int16x8_t v300 = vaddq_s16(v613, v276);
        int16x8_t v301 = vsubq_s16((int16x8_t)v277, v613);
        int16x8_t v302 = vshlq_s16(vshlq_s16(v299, v301), v300);
        int16x8_t v600 = v302;
        unint64_t v303 = v284 + v283;
        if (v592.i64[0]) {
          BOOL v304 = v592.i64[0] >= v303;
        }
        else {
          BOOL v304 = 1;
        }
        char v305 = !v304;
        if (v283 > 0x80 || (v305 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v303 = v284;
        }
        else
        {
          unint64_t v306 = v284 & 0x3F;
          int64x2_t v307 = vaddq_s64(vdupq_n_s64(v306), vzip1q_s64((int64x2_t)0, v281));
          v308 = (int64x2_t *)(v273 + 8 * (v284 >> 6));
          int8x16_t v287 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v308, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v307)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v308->i64[0], 0), (uint64x2_t)vnegq_s64(v307)));
          if (v306 + v283 >= 0x81) {
            int8x16_t v287 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v308[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v307)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v308[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v307))), v287);
          }
        }
        int64x2_t v309 = (int64x2_t)vshlq_u64((uint64x2_t)v287, v294);
        *(int32x2_t *)v287.i8 = vmovn_s64((int64x2_t)v287);
        *(int32x2_t *)v309.i8 = vmovn_s64(v309);
        int16x8_t v310 = (int16x8_t)vzip1q_s32((int32x4_t)v287, (int32x4_t)v309);
        int16x8_t v311 = (int16x8_t)vshlq_u32((uint32x4_t)v310, v297);
        *(int16x4_t *)v310.i8 = vmovn_s32((int32x4_t)v310);
        *(int16x4_t *)v311.i8 = vmovn_s32((int32x4_t)v311);
        int16x8_t v312 = vshlq_s16(vshlq_s16(vzip1q_s16(v310, v311), v301), v300);
        int16x8_t v601 = v312;
        unint64_t v313 = v303 + v283;
        if (v592.i64[0]) {
          BOOL v314 = v592.i64[0] >= v313;
        }
        else {
          BOOL v314 = 1;
        }
        char v315 = !v314;
        int8x16_t v316 = 0uLL;
        if (v283 > 0x80 || (v315 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v313 = v303;
          int8x16_t v320 = 0uLL;
        }
        else
        {
          unint64_t v317 = v303 & 0x3F;
          int64x2_t v318 = vaddq_s64(vdupq_n_s64(v317), vzip1q_s64((int64x2_t)0, v281));
          v319 = (int64x2_t *)(v273 + 8 * (v303 >> 6));
          int8x16_t v320 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v319, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v318)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v319->i64[0], 0), (uint64x2_t)vnegq_s64(v318)));
          if (v317 + v283 >= 0x81) {
            int8x16_t v320 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v319[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v318)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v319[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v318))), v320);
          }
        }
        int64x2_t v321 = (int64x2_t)vshlq_u64((uint64x2_t)v320, v294);
        *(int32x2_t *)v320.i8 = vmovn_s64((int64x2_t)v320);
        *(int32x2_t *)v321.i8 = vmovn_s64(v321);
        int16x8_t v322 = (int16x8_t)vzip1q_s32((int32x4_t)v320, (int32x4_t)v321);
        int16x8_t v323 = (int16x8_t)vshlq_u32((uint32x4_t)v322, v297);
        *(int16x4_t *)v322.i8 = vmovn_s32((int32x4_t)v322);
        *(int16x4_t *)v323.i8 = vmovn_s32((int32x4_t)v323);
        int16x8_t v324 = vshlq_s16(vshlq_s16(vzip1q_s16(v322, v323), v301), v300);
        int16x8_t v602 = v324;
        int8x16_t v325 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v614, v614));
        v322.i64[0] = vpaddq_s32((int32x4_t)v325, (int32x4_t)v325).u64[0];
        v326.i64[0] = v322.u32[0];
        v326.i64[1] = v322.u32[1];
        int64x2_t v327 = v326;
        unint64_t v328 = vaddvq_s64(v326);
        unint64_t v329 = v328;
        unint64_t v330 = v313 + v328;
        if (v592.i64[0]) {
          BOOL v331 = v592.i64[0] >= v330;
        }
        else {
          BOOL v331 = 1;
        }
        char v332 = !v331;
        if (v328 > 0x80 || (v332 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v330 = v313;
        }
        else
        {
          unint64_t v333 = v313 & 0x3F;
          int64x2_t v334 = vaddq_s64(vdupq_n_s64(v333), vzip1q_s64((int64x2_t)0, v327));
          v335 = (int64x2_t *)(v273 + 8 * (v313 >> 6));
          int8x16_t v316 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v335, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v334)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v335->i64[0], 0), (uint64x2_t)vnegq_s64(v334)));
          if (v333 + v329 >= 0x81) {
            int8x16_t v316 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v335[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v334)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v335[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v334))), v316);
          }
        }
        unint64_t v336 = v330 + v329;
        if (v592.i64[0]) {
          BOOL v337 = v592.i64[0] >= v336;
        }
        else {
          BOOL v337 = 1;
        }
        char v338 = !v337;
        int8x16_t v339 = 0uLL;
        if (v329 > 0x80 || (v338 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v336 = v330;
          int8x16_t v343 = 0uLL;
        }
        else
        {
          unint64_t v340 = v330 & 0x3F;
          int64x2_t v341 = vaddq_s64(vdupq_n_s64(v340), vzip1q_s64((int64x2_t)0, v327));
          v342 = (int64x2_t *)(v273 + 8 * (v330 >> 6));
          int8x16_t v343 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v342, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v341)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v342->i64[0], 0), (uint64x2_t)vnegq_s64(v341)));
          if (v340 + v329 >= 0x81) {
            int8x16_t v343 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v342[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v341)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v342[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v341))), v343);
          }
        }
        unint64_t v344 = v336 + v329;
        if (v592.i64[0]) {
          BOOL v345 = v592.i64[0] >= v344;
        }
        else {
          BOOL v345 = 1;
        }
        char v346 = !v345;
        if (v329 > 0x80 || (v346 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v344 = v336;
        }
        else
        {
          int64x2_t v347 = vaddq_s64(vdupq_n_s64(v336 & 0x3F), vzip1q_s64((int64x2_t)0, v327));
          v348 = (int64x2_t *)(v273 + 8 * (v336 >> 6));
          int8x16_t v339 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v348, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v347)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v348->i64[0], 0), (uint64x2_t)vnegq_s64(v347)));
          if ((v336 & 0x3F) + v329 >= 0x81) {
            int8x16_t v339 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v348[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v347)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v348[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v347))), v339);
          }
        }
        unint64_t v349 = v344 + v329;
        if (v592.i64[0]) {
          BOOL v350 = v592.i64[0] >= v349;
        }
        else {
          BOOL v350 = 1;
        }
        char v351 = !v350;
        int8x16_t v352 = 0uLL;
        if (v329 > 0x80 || (v351 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v349 = v344;
          int8x16_t v355 = 0uLL;
        }
        else
        {
          int64x2_t v353 = vaddq_s64(vdupq_n_s64(v344 & 0x3F), vzip1q_s64((int64x2_t)0, v327));
          v354 = (int64x2_t *)(v273 + 8 * (v344 >> 6));
          int8x16_t v355 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v354, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v353)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v354->i64[0], 0), (uint64x2_t)vnegq_s64(v353)));
          if ((v344 & 0x3F) + v329 >= 0x81) {
            int8x16_t v355 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v354[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v353)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v354[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v353))), v355);
          }
        }
        int8x16_t v356 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v615, v615));
        unint64_t v357 = vpaddq_s32((int32x4_t)v356, (int32x4_t)v356).u64[0];
        v358.i64[0] = v357;
        v358.i64[1] = HIDWORD(v357);
        int64x2_t v359 = v358;
        unint64_t v360 = vaddvq_s64(v358);
        unint64_t v361 = v360;
        unint64_t v362 = v349 + v360;
        if (v592.i64[0]) {
          BOOL v363 = v592.i64[0] >= v362;
        }
        else {
          BOOL v363 = 1;
        }
        char v364 = !v363;
        if (v360 > 0x80 || (v364 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v362 = v349;
        }
        else
        {
          unint64_t v365 = v349 & 0x3F;
          int64x2_t v366 = vaddq_s64(vdupq_n_s64(v365), vzip1q_s64((int64x2_t)0, v359));
          v367 = (int64x2_t *)(v273 + 8 * (v349 >> 6));
          int8x16_t v352 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v367, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v366)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v367->i64[0], 0), (uint64x2_t)vnegq_s64(v366)));
          if (v365 + v361 >= 0x81) {
            int8x16_t v352 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v367[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v366)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v367[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v366))), v352);
          }
        }
        unint64_t v368 = v362 + v361;
        if (v592.i64[0]) {
          BOOL v369 = v592.i64[0] >= v368;
        }
        else {
          BOOL v369 = 1;
        }
        char v370 = !v369;
        int8x16_t v371 = 0uLL;
        if (v361 > 0x80 || (v370 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v368 = v362;
          int8x16_t v375 = 0uLL;
        }
        else
        {
          unint64_t v372 = v362 & 0x3F;
          int64x2_t v373 = vaddq_s64(vdupq_n_s64(v372), vzip1q_s64((int64x2_t)0, v359));
          v374 = (int64x2_t *)(v273 + 8 * (v362 >> 6));
          int8x16_t v375 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v374, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v373)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v374->i64[0], 0), (uint64x2_t)vnegq_s64(v373)));
          if (v372 + v361 >= 0x81) {
            int8x16_t v375 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v374[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v373)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v374[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v373))), v375);
          }
        }
        unint64_t v376 = v368 + v361;
        if (v592.i64[0]) {
          BOOL v377 = v592.i64[0] >= v376;
        }
        else {
          BOOL v377 = 1;
        }
        char v378 = !v377;
        if (v361 > 0x80 || (v378 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v376 = v368;
        }
        else
        {
          unint64_t v379 = v368 & 0x3F;
          int64x2_t v380 = vaddq_s64(vdupq_n_s64(v379), vzip1q_s64((int64x2_t)0, v359));
          v381 = (int64x2_t *)(v273 + 8 * (v368 >> 6));
          int8x16_t v371 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v381, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v380)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v381->i64[0], 0), (uint64x2_t)vnegq_s64(v380)));
          if (v379 + v361 >= 0x81) {
            int8x16_t v371 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v381[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v380)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v381[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v380))), v371);
          }
        }
        unint64_t v382 = v376 + v361;
        if (v592.i64[0]) {
          BOOL v383 = v592.i64[0] >= v382;
        }
        else {
          BOOL v383 = 1;
        }
        char v384 = !v383;
        int8x16_t v385 = 0uLL;
        if (v361 > 0x80 || (v384 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v382 = v376;
          int8x16_t v389 = 0uLL;
        }
        else
        {
          unint64_t v386 = v376 & 0x3F;
          int64x2_t v387 = vaddq_s64(vdupq_n_s64(v386), vzip1q_s64((int64x2_t)0, v359));
          v388 = (int64x2_t *)(v273 + 8 * (v376 >> 6));
          int8x16_t v389 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v388, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v387)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v388->i64[0], 0), (uint64x2_t)vnegq_s64(v387)));
          if (v386 + v361 >= 0x81) {
            int8x16_t v389 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v388[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v387)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v388[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v387))), v389);
          }
        }
        int8x16_t v390 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v616, v616));
        unint64_t v391 = vpaddq_s32((int32x4_t)v390, (int32x4_t)v390).u64[0];
        v392.i64[0] = v391;
        v392.i64[1] = HIDWORD(v391);
        int64x2_t v393 = v392;
        unint64_t v394 = vaddvq_s64(v392);
        unint64_t v395 = v394;
        unint64_t v396 = v382 + v394;
        if (v592.i64[0]) {
          BOOL v397 = v592.i64[0] >= v396;
        }
        else {
          BOOL v397 = 1;
        }
        char v398 = !v397;
        if (v394 > 0x80 || (v398 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v396 = v382;
        }
        else
        {
          unint64_t v399 = v382 & 0x3F;
          int64x2_t v400 = vaddq_s64(vdupq_n_s64(v399), vzip1q_s64((int64x2_t)0, v393));
          v401 = (int64x2_t *)(v273 + 8 * (v382 >> 6));
          int8x16_t v385 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v401, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v400)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v401->i64[0], 0), (uint64x2_t)vnegq_s64(v400)));
          if (v399 + v395 >= 0x81) {
            int8x16_t v385 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v401[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v400)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v401[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v400))), v385);
          }
        }
        unint64_t v402 = v396 + v395;
        if (v592.i64[0]) {
          BOOL v403 = v592.i64[0] >= v402;
        }
        else {
          BOOL v403 = 1;
        }
        char v404 = !v403;
        int8x16_t v405 = 0uLL;
        if (v395 > 0x80 || (v404 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v402 = v396;
          int8x16_t v409 = 0uLL;
        }
        else
        {
          unint64_t v406 = v396 & 0x3F;
          int64x2_t v407 = vaddq_s64(vdupq_n_s64(v406), vzip1q_s64((int64x2_t)0, v393));
          v408 = (int64x2_t *)(v273 + 8 * (v396 >> 6));
          int64x2_t v277 = vnegq_s64(v407);
          int8x16_t v409 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v408, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v407)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v408->i64[0], 0), (uint64x2_t)v277));
          if (v406 + v395 >= 0x81)
          {
            int64x2_t v277 = vdupq_n_s64(0xC0uLL);
            int8x16_t v409 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v408[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v407)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v408[1], 1), (uint64x2_t)vsubq_s64(v277, v407))), v409);
          }
        }
        unint64_t v410 = v402 + v395;
        if (v592.i64[0]) {
          BOOL v411 = v592.i64[0] >= v410;
        }
        else {
          BOOL v411 = 1;
        }
        char v412 = !v411;
        if (v395 > 0x80 || (v412 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v410 = v402;
        }
        else
        {
          unint64_t v413 = v402 & 0x3F;
          int64x2_t v414 = vaddq_s64(vdupq_n_s64(v413), vzip1q_s64((int64x2_t)0, v393));
          v415 = (int64x2_t *)(v273 + 8 * (v402 >> 6));
          int64x2_t v277 = vsubq_s64(vdupq_n_s64(0x40uLL), v414);
          int8x16_t v405 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v415, 1), (uint64x2_t)v277), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v415->i64[0], 0), (uint64x2_t)vnegq_s64(v414)));
          if (v413 + v395 >= 0x81)
          {
            int64x2_t v277 = vdupq_n_s64(0xC0uLL);
            int8x16_t v405 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v415[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v414)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v415[1], 1), (uint64x2_t)vsubq_s64(v277, v414))), v405);
          }
        }
        unint64_t v416 = v410 + v395;
        if (v592.i64[0]) {
          BOOL v417 = v592.i64[0] >= v416;
        }
        else {
          BOOL v417 = 1;
        }
        char v418 = !v417;
        int8x16_t v419 = 0uLL;
        if (v395 > 0x80 || (v418 & 1) != 0)
        {
          int v275 = 1;
          unint64_t v416 = v410;
        }
        else
        {
          int64x2_t v420 = vaddq_s64(vdupq_n_s64(v410 & 0x3F), vzip1q_s64((int64x2_t)0, v393));
          v421 = (int64x2_t *)(v273 + 8 * (v410 >> 6));
          int64x2_t v277 = vdupq_n_s64(0x40uLL);
          int8x16_t v419 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v421, 1), (uint64x2_t)vsubq_s64(v277, v420)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v421->i64[0], 0), (uint64x2_t)vnegq_s64(v420)));
          if ((v410 & 0x3F) + v395 >= 0x81)
          {
            int64x2_t v277 = vdupq_n_s64(0xC0uLL);
            int8x16_t v419 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v421[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v420)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v421[1], 1), (uint64x2_t)vsubq_s64(v277, v420))), v419);
          }
        }
        if (v275 || v592.i64[0] + 8 * result - v416 - 768 >= 9 || v258 == 2)
        {
          uint64_t result = 0;
          int64x2_t v422 = vdupq_n_s64(0xFFFFF003FFuLL);
          *a1 = v422;
          a1[1] = v422;
          a1[2] = v422;
          a1[3] = v422;
          v423 = (int64x2_t *)((char *)a1 + a2);
          int64x2_t *v423 = v422;
          v423[1] = v422;
          v423[2] = v422;
          v423[3] = v422;
          v424 = (int64x2_t *)((char *)a1 + 2 * a2);
          int64x2_t *v424 = v422;
          v424[1] = v422;
          v424[2] = v422;
          v424[3] = v422;
          v425 = (int64x2_t *)((char *)a1 + 2 * a2 + a2);
          int64x2_t *v425 = v422;
          v425[1] = v422;
          v425[2] = v422;
          v425[3] = v422;
        }
        else
        {
          int32x2_t v426 = vzip1_s32(*(int32x2_t *)v248.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v248, v248, 8uLL));
          int32x2_t v427 = vzip1_s32(*(int32x2_t *)v263.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v263, v263, 8uLL));
          *(int32x2_t *)v248.i8 = vzip1_s32(*(int32x2_t *)v325.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v325, v325, 8uLL));
          int32x2_t v428 = vzip1_s32(*(int32x2_t *)v356.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v356, v356, 8uLL));
          int32x4_t v429 = (int32x4_t)vextq_s8(v390, v390, 8uLL);
          int32x2_t v430 = vzip1_s32(*(int32x2_t *)v390.i8, *(int32x2_t *)v429.i8);
          v431.i64[0] = v426.u32[0];
          v431.i64[1] = v426.u32[1];
          int64x2_t v432 = (int64x2_t)vshlq_u64((uint64x2_t)v246, (uint64x2_t)vnegq_s64(v431));
          *(int32x2_t *)v246.i8 = vmovn_s64((int64x2_t)v246);
          *(int32x2_t *)v432.i8 = vmovn_s64(v432);
          int16x8_t v433 = (int16x8_t)vzip1q_s32((int32x4_t)v246, (int32x4_t)v432);
          v431.i64[0] = v427.u32[0];
          v431.i64[1] = v427.u32[1];
          int64x2_t v434 = (int64x2_t)vshlq_u64((uint64x2_t)v261, (uint64x2_t)vnegq_s64(v431));
          *(int32x2_t *)v429.i8 = vmovn_s64((int64x2_t)v261);
          *(int32x2_t *)v434.i8 = vmovn_s64(v434);
          int32x4_t v435 = vzip1q_s32(v429, (int32x4_t)v434);
          v431.i64[0] = v248.u32[0];
          v431.i64[1] = v248.u32[1];
          int32x4_t v436 = (int32x4_t)vnegq_s64(v431);
          int64x2_t v437 = (int64x2_t)vshlq_u64((uint64x2_t)v316, (uint64x2_t)v436);
          *(int32x2_t *)v277.i8 = vmovn_s64((int64x2_t)v316);
          *(int32x2_t *)v437.i8 = vmovn_s64(v437);
          int16x8_t v438 = (int16x8_t)vzip1q_s32((int32x4_t)v277, (int32x4_t)v437);
          int64x2_t v439 = (int64x2_t)vshlq_u64((uint64x2_t)v343, (uint64x2_t)v436);
          *(int32x2_t *)v248.i8 = vmovn_s64((int64x2_t)v343);
          *(int32x2_t *)v439.i8 = vmovn_s64(v439);
          int16x8_t v440 = (int16x8_t)vzip1q_s32((int32x4_t)v248, (int32x4_t)v439);
          int64x2_t v441 = (int64x2_t)vshlq_u64((uint64x2_t)v339, (uint64x2_t)v436);
          *(int32x2_t *)v248.i8 = vmovn_s64((int64x2_t)v339);
          *(int32x2_t *)v441.i8 = vmovn_s64(v441);
          int16x8_t v442 = (int16x8_t)vzip1q_s32((int32x4_t)v248, (int32x4_t)v441);
          v431.i64[0] = v428.u32[0];
          v431.i64[1] = v428.u32[1];
          int64x2_t v443 = v431;
          v431.i64[0] = v430.u32[0];
          v431.i64[1] = v430.u32[1];
          int32x4_t v444 = (int32x4_t)vnegq_s64(v443);
          int64x2_t v445 = (int64x2_t)vshlq_u64((uint64x2_t)v355, (uint64x2_t)v436);
          *(int32x2_t *)v436.i8 = vmovn_s64((int64x2_t)v355);
          *(int32x2_t *)v445.i8 = vmovn_s64(v445);
          int16x8_t v446 = (int16x8_t)vzip1q_s32(v436, (int32x4_t)v445);
          int64x2_t v447 = (int64x2_t)vshlq_u64((uint64x2_t)v352, (uint64x2_t)v444);
          *(int32x2_t *)v436.i8 = vmovn_s64((int64x2_t)v352);
          *(int32x2_t *)v447.i8 = vmovn_s64(v447);
          int16x8_t v448 = (int16x8_t)vzip1q_s32(v436, (int32x4_t)v447);
          int64x2_t v449 = (int64x2_t)vshlq_u64((uint64x2_t)v375, (uint64x2_t)v444);
          *(int32x2_t *)v436.i8 = vmovn_s64((int64x2_t)v375);
          *(int32x2_t *)v449.i8 = vmovn_s64(v449);
          int16x8_t v450 = (int16x8_t)vzip1q_s32(v436, (int32x4_t)v449);
          int64x2_t v451 = (int64x2_t)vshlq_u64((uint64x2_t)v371, (uint64x2_t)v444);
          *(int32x2_t *)v436.i8 = vmovn_s64((int64x2_t)v371);
          *(int32x2_t *)v451.i8 = vmovn_s64(v451);
          int16x8_t v452 = (int16x8_t)vzip1q_s32(v436, (int32x4_t)v451);
          uint64x2_t v453 = (uint64x2_t)vnegq_s64(v431);
          int64x2_t v454 = (int64x2_t)vshlq_u64((uint64x2_t)v389, (uint64x2_t)v444);
          *(int32x2_t *)v436.i8 = vmovn_s64((int64x2_t)v389);
          *(int32x2_t *)v454.i8 = vmovn_s64(v454);
          int16x8_t v455 = (int16x8_t)vzip1q_s32(v436, (int32x4_t)v454);
          int64x2_t v456 = (int64x2_t)vshlq_u64((uint64x2_t)v385, v453);
          *(int32x2_t *)v444.i8 = vmovn_s64((int64x2_t)v385);
          *(int32x2_t *)v456.i8 = vmovn_s64(v456);
          int16x8_t v457 = (int16x8_t)vzip1q_s32(v444, (int32x4_t)v456);
          int64x2_t v458 = (int64x2_t)vshlq_u64((uint64x2_t)v409, v453);
          *(int32x2_t *)v409.i8 = vmovn_s64((int64x2_t)v409);
          *(int32x2_t *)v458.i8 = vmovn_s64(v458);
          int16x8_t v459 = (int16x8_t)vzip1q_s32((int32x4_t)v409, (int32x4_t)v458);
          int64x2_t v460 = (int64x2_t)vshlq_u64((uint64x2_t)v405, v453);
          *(int32x2_t *)v458.i8 = vmovn_s64((int64x2_t)v405);
          *(int32x2_t *)v460.i8 = vmovn_s64(v460);
          int16x8_t v461 = (int16x8_t)vzip1q_s32((int32x4_t)v458, (int32x4_t)v460);
          int16x8_t v462 = (int16x8_t)vshlq_u32((uint32x4_t)v433, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v247.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v247, v247, 8uLL)))));
          *(int16x4_t *)v433.i8 = vmovn_s32((int32x4_t)v433);
          *(int16x4_t *)v462.i8 = vmovn_s32((int32x4_t)v462);
          int16x8_t v463 = vzip1q_s16(v433, v462);
          uint32x4_t v464 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v614.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v614, (int8x16_t)v614, 8uLL))));
          int16x8_t v465 = (int16x8_t)vshlq_u32((uint32x4_t)v435, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v262.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v262, v262, 8uLL)))));
          *(int16x4_t *)v355.i8 = vmovn_s32(v435);
          *(int16x4_t *)v465.i8 = vmovn_s32((int32x4_t)v465);
          int16x8_t v466 = vzip1q_s16((int16x8_t)v355, v465);
          int16x8_t v467 = (int16x8_t)vshlq_u32((uint32x4_t)v438, v464);
          *(int16x4_t *)v438.i8 = vmovn_s32((int32x4_t)v438);
          *(int16x4_t *)v467.i8 = vmovn_s32((int32x4_t)v467);
          int16x8_t v468 = vzip1q_s16(v438, v467);
          int16x8_t v469 = (int16x8_t)vshlq_u32((uint32x4_t)v440, v464);
          *(int16x4_t *)v440.i8 = vmovn_s32((int32x4_t)v440);
          *(int16x4_t *)v469.i8 = vmovn_s32((int32x4_t)v469);
          int16x8_t v470 = vzip1q_s16(v440, v469);
          int16x8_t v471 = (int16x8_t)vshlq_u32((uint32x4_t)v442, v464);
          *(int16x4_t *)v442.i8 = vmovn_s32((int32x4_t)v442);
          *(int16x4_t *)v471.i8 = vmovn_s32((int32x4_t)v471);
          int16x8_t v472 = vzip1q_s16(v442, v471);
          uint32x4_t v473 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v615.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v615, (int8x16_t)v615, 8uLL))));
          int16x8_t v474 = (int16x8_t)vshlq_u32((uint32x4_t)v446, v464);
          *(int16x4_t *)v446.i8 = vmovn_s32((int32x4_t)v446);
          *(int16x4_t *)v474.i8 = vmovn_s32((int32x4_t)v474);
          int16x8_t v475 = vzip1q_s16(v446, v474);
          int16x8_t v476 = (int16x8_t)vshlq_u32((uint32x4_t)v448, v473);
          *(int16x4_t *)v448.i8 = vmovn_s32((int32x4_t)v448);
          *(int16x4_t *)v476.i8 = vmovn_s32((int32x4_t)v476);
          int16x8_t v477 = vzip1q_s16(v448, v476);
          int16x8_t v478 = (int16x8_t)vshlq_u32((uint32x4_t)v450, v473);
          *(int16x4_t *)v450.i8 = vmovn_s32((int32x4_t)v450);
          *(int16x4_t *)v478.i8 = vmovn_s32((int32x4_t)v478);
          int16x8_t v479 = vzip1q_s16(v450, v478);
          int16x8_t v480 = (int16x8_t)vshlq_u32((uint32x4_t)v452, v473);
          *(int16x4_t *)v452.i8 = vmovn_s32((int32x4_t)v452);
          *(int16x4_t *)v480.i8 = vmovn_s32((int32x4_t)v480);
          int16x8_t v481 = vzip1q_s16(v452, v480);
          uint32x4_t v482 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v616.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v616, (int8x16_t)v616, 8uLL))));
          int16x8_t v483 = (int16x8_t)vshlq_u32((uint32x4_t)v455, v473);
          *(int16x4_t *)v455.i8 = vmovn_s32((int32x4_t)v455);
          *(int16x4_t *)v483.i8 = vmovn_s32((int32x4_t)v483);
          int16x8_t v484 = vzip1q_s16(v455, v483);
          int16x8_t v485 = (int16x8_t)vshlq_u32((uint32x4_t)v457, v482);
          *(int16x4_t *)v457.i8 = vmovn_s32((int32x4_t)v457);
          *(int16x4_t *)v485.i8 = vmovn_s32((int32x4_t)v485);
          int16x8_t v486 = vzip1q_s16(v457, v485);
          int16x8_t v487 = (int16x8_t)vshlq_u32((uint32x4_t)v459, v482);
          *(int16x4_t *)v459.i8 = vmovn_s32((int32x4_t)v459);
          *(int16x4_t *)v487.i8 = vmovn_s32((int32x4_t)v487);
          int16x8_t v488 = vzip1q_s16(v459, v487);
          int16x8_t v489 = (int16x8_t)vshlq_u32((uint32x4_t)v461, v482);
          *(int16x4_t *)v461.i8 = vmovn_s32((int32x4_t)v461);
          *(int16x4_t *)v489.i8 = vmovn_s32((int32x4_t)v489);
          int16x8_t v490 = vzip1q_s16(v461, v489);
          v489.i64[0] = 0x10001000100010;
          v489.i64[1] = 0x10001000100010;
          int16x8_t v491 = vsubq_s16(v489, (int16x8_t)v247);
          v492.i64[0] = 0xF000F000F000FLL;
          v492.i64[1] = 0xF000F000F000FLL;
          int16x8_t v493 = vaddq_s16((int16x8_t)v247, v492);
          int16x8_t v494 = vshlq_s16(v463, v491);
          v491.i64[0] = 0x10001000100010;
          v491.i64[1] = 0x10001000100010;
          int16x8_t v495 = vsubq_s16(v491, (int16x8_t)v262);
          int16x8_t v496 = vaddq_s16((int16x8_t)v262, v492);
          v492.i64[0] = 0x10001000100010;
          v492.i64[1] = 0x10001000100010;
          int16x8_t v497 = vshlq_s16(v466, v495);
          v495.i64[0] = 0xF000F000F000FLL;
          v495.i64[1] = 0xF000F000F000FLL;
          int16x8_t v498 = vsubq_s16(v492, v614);
          int16x8_t v499 = vaddq_s16(v614, v495);
          v495.i64[0] = 0x10001000100010;
          v495.i64[1] = 0x10001000100010;
          int16x8_t v500 = vshlq_s16(v468, v498);
          int16x8_t v501 = vshlq_s16(v470, v498);
          int16x8_t v502 = vshlq_s16(v472, v498);
          int16x8_t v503 = vshlq_s16(v475, v498);
          v498.i64[0] = 0xF000F000F000FLL;
          v498.i64[1] = 0xF000F000F000FLL;
          int16x8_t v504 = vsubq_s16(v495, v615);
          int16x8_t v505 = vaddq_s16(v615, v498);
          v498.i64[0] = 0x10001000100010;
          v498.i64[1] = 0x10001000100010;
          int16x8_t v506 = vshlq_s16(v477, v504);
          int16x8_t v507 = vshlq_s16(v479, v504);
          int16x8_t v508 = vshlq_s16(v481, v504);
          int16x8_t v509 = vshlq_s16(v484, v504);
          v504.i64[0] = 0xF000F000F000FLL;
          v504.i64[1] = 0xF000F000F000FLL;
          int16x8_t v510 = vsubq_s16(v498, v616);
          int16x8_t v511 = vaddq_s16(v616, v504);
          int8x16_t v512 = (int8x16_t)vshlq_s16(v494, v493);
          int16x8_t v513 = vshlq_s16(v497, v496);
          int16x8_t v514 = vshlq_s16(v500, v499);
          int16x8_t v515 = vshlq_s16(v501, v499);
          int16x8_t v516 = vshlq_s16(v502, v499);
          int16x8_t v517 = vshlq_s16(v503, v499);
          int16x8_t v518 = vshlq_s16(v506, v505);
          int16x8_t v519 = vshlq_s16(v507, v505);
          int16x8_t v520 = vshlq_s16(v508, v505);
          int16x8_t v521 = vshlq_s16(v509, v505);
          int64x2_t v522 = (int64x2_t)vshlq_u64((uint64x2_t)v419, v453);
          *(int32x2_t *)v419.i8 = vmovn_s64((int64x2_t)v419);
          *(int32x2_t *)v522.i8 = vmovn_s64(v522);
          int16x8_t v523 = (int16x8_t)vzip1q_s32((int32x4_t)v419, (int32x4_t)v522);
          int16x8_t v524 = vshlq_s16(vshlq_s16(v486, v510), v511);
          int16x8_t v525 = vshlq_s16(vshlq_s16(v488, v510), v511);
          int16x8_t v526 = vshlq_s16(vshlq_s16(v490, v510), v511);
          int16x8_t v527 = (int16x8_t)vshlq_u32((uint32x4_t)v523, v482);
          *(int16x4_t *)v523.i8 = vmovn_s32((int32x4_t)v523);
          *(int16x4_t *)v527.i8 = vmovn_s32((int32x4_t)v527);
          int16x8_t v528 = vshlq_s16(vshlq_s16(vzip1q_s16(v523, v527), v510), v511);
          int16x8_t v529 = vaddq_s16((int16x8_t)vandq_s8(v512, v587), v513);
          int8x16_t v530 = (int8x16_t)vdupq_lane_s64(v512.i64[0], 0);
          int16x8_t v531 = (int16x8_t)vandq_s8(v585, v530);
          int16x8_t v532 = vsubq_s16(v514, v531);
          int16x8_t v533 = vsubq_s16(v515, v531);
          int16x8_t v534 = vsubq_s16(v516, v531);
          int16x8_t v535 = vsubq_s16(v517, v531);
          int16x8_t v536 = (int16x8_t)vandq_s8(v586, v530);
          int16x8_t v537 = vsubq_s16(v518, v536);
          int16x8_t v538 = vsubq_s16(v519, v536);
          int16x8_t v539 = (int16x8_t)vandq_s8(v587, v530);
          int16x8_t v540 = vsubq_s16(v520, v536);
          int16x8_t v541 = vsubq_s16(v521, v536);
          v542.i64[0] = 0x1000100010001;
          v542.i64[1] = 0x1000100010001;
          int16x8_t v543 = vsubq_s16(v302, v539);
          int16x8_t v544 = vsubq_s16(v312, v539);
          int16x8_t v545 = (int16x8_t)vandq_s8(v588, v530);
          int16x8_t v546 = vsubq_s16(v524, v545);
          int16x8_t v547 = vsubq_s16(v525, v545);
          int16x8_t v548 = vsubq_s16(v526, v545);
          int16x8_t v549 = vsubq_s16(v528, v545);
          int8x16_t v550 = (int8x16_t)vsubq_s16(v324, v539);
          int8x16_t v551 = (int8x16_t)vsubq_s16(v529, v539);
          int16x8_t v599 = v529;
          int8x16_t v607 = (int8x16_t)v546;
          int8x16_t v608 = (int8x16_t)v547;
          int8x16_t v609 = (int8x16_t)v548;
          int8x16_t v610 = (int8x16_t)v549;
          if (vaddvq_s16(vceqq_s16(v589, (int16x8_t)v542)))
          {
            int8x16_t v552 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v612, v542));
            v553.i64[1] = v551.i64[1];
            v553.i64[0] = v550.i64[1];
            v554.i64[0] = v550.i64[0];
            v554.i64[1] = v551.i64[0];
            int16x8_t v555 = (int16x8_t)vbslq_s8(v552, v553, v551);
            int16x8_t v556 = (int16x8_t)vbslq_s8(v552, v554, v550);
            v557.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
            v557.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
            int16x8_t v558 = (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v543 - 1), v557), v552);
            v621.val[0] = (int8x16_t)vaddq_s16(v555, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v543 - 1), (int8x16_t)xmmword_242EA7710), v552));
            v621.val[1] = (int8x16_t)vaddq_s16(v543, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v543 - 1), (int8x16_t)xmmword_242EA7720), v552));
            v621.val[2] = (int8x16_t)vaddq_s16(v544, v558);
            v621.val[3] = (int8x16_t)vaddq_s16(v556, v558);
            int16x8_t v559 = (int16x8_t)vandq_s8(vqtbl4q_s8(v621, v557), v552);
            int8x16_t v551 = (int8x16_t)vaddq_s16((int16x8_t)v621.val[0], (int16x8_t)vandq_s8(vqtbl4q_s8(v621, (int8x16_t)xmmword_242EA7730), v552));
            int16x8_t v543 = vaddq_s16((int16x8_t)v621.val[1], (int16x8_t)vandq_s8(vqtbl4q_s8(v621, (int8x16_t)xmmword_242EA7740), v552));
            int16x8_t v599 = (int16x8_t)v551;
            int16x8_t v600 = v543;
            int16x8_t v544 = vaddq_s16((int16x8_t)v621.val[2], v559);
            int8x16_t v550 = (int8x16_t)vaddq_s16((int16x8_t)v621.val[3], v559);
            v619.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v532.i8, (int8x16_t)xmmword_242EA7710), v552), v532);
            v619.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v532.i8, (int8x16_t)xmmword_242EA7750), v552), v533);
            v619.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v532.i8, v557), v552), v534);
            v619.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v532.i8, (int8x16_t)xmmword_242EA7760), v552), v535);
            v621.val[3] = vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA7730), v552);
            int16x8_t v560 = (int16x8_t)vandq_s8(vqtbl4q_s8(v619, v557), v552);
            int16x8_t v532 = vaddq_s16((int16x8_t)v621.val[3], (int16x8_t)v619.val[0]);
            int16x8_t v533 = vaddq_s16((int16x8_t)v619.val[1], (int16x8_t)v621.val[3]);
            int16x8_t v534 = vaddq_s16((int16x8_t)v619.val[2], v560);
            int16x8_t v535 = vaddq_s16((int16x8_t)v619.val[3], v560);
            v619.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v537.i8, (int8x16_t)xmmword_242EA74D0), v552), v537);
            v619.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v537.i8, (int8x16_t)xmmword_242EA75A0), v552), v538);
            v619.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v537.i8, (int8x16_t)xmmword_242EA7710), v552), v540);
            v619.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v537.i8, (int8x16_t)xmmword_242EA7720), v552), v541);
            v621.val[3] = vandq_s8(vqtbl4q_s8(v619, v557), v552);
            int16x8_t v537 = vaddq_s16((int16x8_t)v619.val[0], (int16x8_t)v621.val[3]);
            int16x8_t v538 = vaddq_s16((int16x8_t)v619.val[1], (int16x8_t)v621.val[3]);
            int16x8_t v540 = vaddq_s16((int16x8_t)v619.val[2], (int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA75D0), v552));
            int16x8_t v541 = vaddq_s16((int16x8_t)v619.val[3], (int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA7770), v552));
            v619.val[0] = v607;
            v619.val[1] = v608;
            int8x16_t v54 = v612;
            v619.val[2] = v609;
            v619.val[3] = v610;
            v620.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA74D0), v552), (int16x8_t)v607);
            v620.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA7780), v552), (int16x8_t)v608);
            int16x8_t v601 = v544;
            int16x8_t v602 = (int16x8_t)v550;
            v620.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA7710), v552), (int16x8_t)v609);
            v620.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v619, (int8x16_t)xmmword_242EA7720), v552), (int16x8_t)v610);
            int16x8_t v561 = (int16x8_t)vandq_s8(vqtbl4q_s8(v620, v557), v552);
            int16x8_t v562 = (int16x8_t)vandq_s8(vqtbl4q_s8(v620, (int8x16_t)xmmword_242EA75D0), v552);
            int16x8_t v563 = (int16x8_t)vandq_s8(vqtbl4q_s8(v620, (int8x16_t)xmmword_242EA7790), v552);
            int16x8_t v546 = vaddq_s16((int16x8_t)v620.val[0], v561);
            int16x8_t v547 = vaddq_s16((int16x8_t)v620.val[1], v561);
            int16x8_t v548 = vaddq_s16((int16x8_t)v620.val[2], v562);
            int16x8_t v549 = vaddq_s16((int16x8_t)v620.val[3], v563);
          }
          int8x16_t v564 = (int8x16_t)vaddq_s16(v611, (int16x8_t)v551);
          int8x16_t v565 = (int8x16_t)vaddq_s16(v543, v611);
          int8x16_t v566 = (int8x16_t)vaddq_s16(v544, v611);
          int8x16_t v567 = (int8x16_t)vaddq_s16((int16x8_t)v550, v611);
          int8x16_t v568 = (int8x16_t)vaddq_s16(v532, v611);
          int8x16_t v569 = (int8x16_t)vaddq_s16(v533, v611);
          int8x16_t v570 = (int8x16_t)vaddq_s16(v534, v611);
          int8x16_t v571 = (int8x16_t)vaddq_s16(v535, v611);
          int8x16_t v572 = (int8x16_t)vaddq_s16(v537, v611);
          int8x16_t v573 = (int8x16_t)vaddq_s16(v538, v611);
          int8x16_t v574 = (int8x16_t)vaddq_s16(v540, v611);
          int8x16_t v575 = (int8x16_t)vaddq_s16(v541, v611);
          int8x16_t v576 = (int8x16_t)vaddq_s16(v546, v611);
          int8x16_t v577 = (int8x16_t)vaddq_s16(v547, v611);
          int8x16_t v578 = (int8x16_t)vaddq_s16(v548, v611);
          int8x16_t v579 = (int8x16_t)vaddq_s16(v549, v611);
          v580.i64[0] = 0x10001000100010;
          v580.i64[1] = 0x10001000100010;
          int8x16_t v581 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v54, v580));
          v582 = (int16x8_t *)((char *)a1 + a2);
          *a1 = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v564, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v564), 6uLL);
          a1[1] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v566, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v566), 6uLL);
          a1[2] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v572, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v572), 6uLL);
          a1[3] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v574, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v574), 6uLL);
          v583 = (int16x8_t *)((char *)a1 + 2 * a2);
          int16x8_t *v582 = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v565, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v565), 6uLL);
          v582[1] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v567, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v567), 6uLL);
          v582[2] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v573, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v573), 6uLL);
          v582[3] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v575, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v575), 6uLL);
          int16x8_t *v583 = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v568, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v568), 6uLL);
          v583[1] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v570, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v570), 6uLL);
          v583[2] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v576, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v576), 6uLL);
          v583[3] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v578, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v578), 6uLL);
          v584 = (int16x8_t *)((char *)v583 + a2);
          int16x8_t *v584 = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v569, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v569), 6uLL);
          v584[1] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v571, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v571), 6uLL);
          v584[2] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v577, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v577), 6uLL);
          v584[3] = vshlq_n_s16(vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v579, (int8x16_t)xmmword_242EA77A0), v581), (int16x8_t)v579), 6uLL);
        }
        return result;
      }
      unint64_t v259 = v59;
    }
    unint64_t v59 = v259 + 8;
    goto LABEL_98;
  }
  v30.i64[0] = 0xA000A000A000ALL;
  v30.i64[1] = 0xA000A000A000ALL;
  int8x16_t v31 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v30, v30));
  v30.i64[0] = vpaddq_s32((int32x4_t)v31, (int32x4_t)v31).u64[0];
  v32.i64[0] = v30.u32[0];
  v32.i64[1] = v30.u32[1];
  int64x2_t v33 = v32;
  unint64_t v34 = vaddvq_s64(v32);
  unint64_t v35 = v34;
  int16x8_t v36 = 0uLL;
  if (v34 <= 0x80)
  {
    v72 = (int64x2_t *)(a3 & 0xFFFFFFFFFFFFFFF8);
    int64x2_t v73 = vzip1q_s64((int64x2_t)0, v33);
    unint64_t v74 = 8 * (a3 & 7);
    unint64_t v75 = v34 + v74;
    int64x2_t v76 = vaddq_s64(v73, vdupq_n_s64(v74));
    int8x16_t v77 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*(int64x2_t *)(a3 & 0xFFFFFFFFFFFFFFF8), 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v76)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(*(void *)(a3 & 0xFFFFFFFFFFFFFFF8), 0), (uint64x2_t)vnegq_s64(v76)));
    if (v75 > 0x80) {
      int8x16_t v77 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v72[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v76)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v72[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v76))), v77);
    }
    unint64_t v78 = v75 & 0x3F;
    v79 = (int64x2_t *)((char *)v72 + 8 * (v75 >> 6));
    int64x2_t v80 = vaddq_s64(v73, vdupq_n_s64(v78));
    unint64_t v81 = v35 + v75;
    int8x16_t v82 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v79, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v79->i64[0], 0), (uint64x2_t)vnegq_s64(v80)));
    if (v35 + v78 >= 0x81) {
      int8x16_t v82 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v79[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v79[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v80))), v82);
    }
    unint64_t v83 = v81 & 0x3F;
    v84 = (int64x2_t *)((char *)v72 + 8 * (v81 >> 6));
    int64x2_t v85 = vaddq_s64(v73, vdupq_n_s64(v83));
    unint64_t v86 = v35 + v81;
    int8x16_t v87 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v84, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v85)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v84->i64[0], 0), (uint64x2_t)vnegq_s64(v85)));
    if (v35 + v83 >= 0x81) {
      int8x16_t v87 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v84[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v85)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v84[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v85))), v87);
    }
    int32x2_t v88 = (int32x2_t)vextq_s8(v31, v31, 8uLL).u64[0];
    unint64_t v89 = v86 & 0x3F;
    v90 = (int64x2_t *)((char *)v72 + 8 * (v86 >> 6));
    int64x2_t v91 = vaddq_s64(v73, vdupq_n_s64(v89));
    unint64_t v92 = v35 + v86;
    int8x16_t v93 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v90, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v91)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v90->i64[0], 0), (uint64x2_t)vnegq_s64(v91)));
    if (v35 + v89 >= 0x81) {
      int8x16_t v93 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v90[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v91)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v90[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v91))), v93);
    }
    unint64_t v94 = v92 & 0x3F;
    v95 = (int64x2_t *)((char *)v72 + 8 * (v92 >> 6));
    int64x2_t v96 = vaddq_s64(v73, vdupq_n_s64(v94));
    unint64_t v97 = v35 + v92;
    int8x16_t v98 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v95, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v95->i64[0], 0), (uint64x2_t)vnegq_s64(v96)));
    if (v35 + v94 > 0x80) {
      int8x16_t v98 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v95[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v95[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v96))), v98);
    }
    int32x2_t v99 = vzip1_s32(*(int32x2_t *)v31.i8, v88);
    unint64_t v100 = v97 & 0x3F;
    v101 = (int64x2_t *)((char *)v72 + 8 * (v97 >> 6));
    int64x2_t v102 = vaddq_s64(v73, vdupq_n_s64(v100));
    unint64_t v103 = v35 + v97;
    int8x16_t v104 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v101, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v102)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v101->i64[0], 0), (uint64x2_t)vnegq_s64(v102)));
    if (v35 + v100 >= 0x81) {
      int8x16_t v104 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v101[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v102)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v101[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v102))), v104);
    }
    v105.i64[0] = v99.u32[0];
    v105.i64[1] = v99.u32[1];
    int64x2_t v106 = v105;
    unint64_t v107 = v103 & 0x3F;
    v108 = (int64x2_t *)((char *)v72 + 8 * (v103 >> 6));
    int64x2_t v109 = vaddq_s64(v73, vdupq_n_s64(v107));
    unint64_t v110 = v35 + v103;
    int8x16_t v111 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v108, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v109)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v108->i64[0], 0), (uint64x2_t)vnegq_s64(v109)));
    if (v35 + v107 >= 0x81) {
      int8x16_t v111 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v108[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v109)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v108[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v109))), v111);
    }
    uint64x2_t v112 = (uint64x2_t)vnegq_s64(v106);
    unint64_t v113 = v110 & 0x3F;
    v114 = (int64x2_t *)((char *)v72 + 8 * (v110 >> 6));
    int64x2_t v115 = vaddq_s64(v73, vdupq_n_s64(v113));
    unint64_t v116 = v35 + v110;
    int8x16_t v117 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v114, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v115)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114->i64[0], 0), (uint64x2_t)vnegq_s64(v115)));
    if (v35 + v113 >= 0x81) {
      int8x16_t v117 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v115)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v114[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v115))), v117);
    }
    int64x2_t v118 = (int64x2_t)vshlq_u64((uint64x2_t)v77, v112);
    int64x2_t v119 = (int64x2_t)vshlq_u64((uint64x2_t)v82, v112);
    int64x2_t v120 = (int64x2_t)vshlq_u64((uint64x2_t)v87, v112);
    int64x2_t v121 = (int64x2_t)vshlq_u64((uint64x2_t)v93, v112);
    int64x2_t v122 = (int64x2_t)vshlq_u64((uint64x2_t)v98, v112);
    int64x2_t v123 = (int64x2_t)vshlq_u64((uint64x2_t)v104, v112);
    int64x2_t v124 = (int64x2_t)vshlq_u64((uint64x2_t)v111, v112);
    int64x2_t v125 = (int64x2_t)vshlq_u64((uint64x2_t)v117, v112);
    unint64_t v126 = v116 & 0x3F;
    v127 = (int64x2_t *)((char *)v72 + 8 * (v116 >> 6));
    int64x2_t v128 = vaddq_s64(v73, vdupq_n_s64(v126));
    unint64_t v129 = v35 + v116;
    int8x16_t v130 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v127, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v128)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v127->i64[0], 0), (uint64x2_t)vnegq_s64(v128)));
    if (v35 + v126 > 0x80) {
      int8x16_t v130 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v127[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v128)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v127[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v128))), v130);
    }
    *(int32x2_t *)v77.i8 = vmovn_s64((int64x2_t)v77);
    *(int32x2_t *)v118.i8 = vmovn_s64(v118);
    *(int32x2_t *)v82.i8 = vmovn_s64((int64x2_t)v82);
    *(int32x2_t *)v119.i8 = vmovn_s64(v119);
    *(int32x2_t *)v87.i8 = vmovn_s64((int64x2_t)v87);
    *(int32x2_t *)v120.i8 = vmovn_s64(v120);
    *(int32x2_t *)v93.i8 = vmovn_s64((int64x2_t)v93);
    *(int32x2_t *)v121.i8 = vmovn_s64(v121);
    *(int32x2_t *)v98.i8 = vmovn_s64((int64x2_t)v98);
    *(int32x2_t *)v122.i8 = vmovn_s64(v122);
    *(int32x2_t *)v104.i8 = vmovn_s64((int64x2_t)v104);
    *(int32x2_t *)v123.i8 = vmovn_s64(v123);
    *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v111);
    *(int32x2_t *)v124.i8 = vmovn_s64(v124);
    *(int32x2_t *)v117.i8 = vmovn_s64((int64x2_t)v117);
    *(int32x2_t *)v125.i8 = vmovn_s64(v125);
    int64x2_t v131 = (int64x2_t)vshlq_u64((uint64x2_t)v130, v112);
    *(int32x2_t *)v130.i8 = vmovn_s64((int64x2_t)v130);
    *(int32x2_t *)v131.i8 = vmovn_s64(v131);
    unint64_t v132 = v129 & 0x3F;
    v133 = (int64x2_t *)((char *)v72 + 8 * (v129 >> 6));
    int64x2_t v134 = vaddq_s64(v73, vdupq_n_s64(v132));
    unint64_t v135 = v35 + v129;
    int8x16_t v136 = (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v133, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v134));
    int8x16_t v137 = vorrq_s8(v136, (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v133->i64[0], 0), (uint64x2_t)vnegq_s64(v134)));
    if (v35 + v132 >= 0x81)
    {
      int64x2_t v138 = v133[1];
      uint64x2_t v139 = (uint64x2_t)vdupq_lane_s64(v138.i64[0], 0);
      int8x16_t v136 = (int8x16_t)vdupq_laneq_s64(v138, 1);
      int64x2_t v5 = vdupq_n_s64(0xC0uLL);
      int8x16_t v137 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64(v139, (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v134)), (int8x16_t)vshlq_u64((uint64x2_t)v136, (uint64x2_t)vsubq_s64(v5, v134))), v137);
    }
    *(int32x2_t *)v136.i8 = vmovn_s64((int64x2_t)v137);
    *(int32x2_t *)v5.i8 = vmovn_s64((int64x2_t)vshlq_u64((uint64x2_t)v137, v112));
    v140 = (int64x2_t *)((char *)v72 + 8 * (v135 >> 6));
    int64x2_t v141 = vaddq_s64(v73, vdupq_n_s64(v135 & 0x3F));
    unint64_t v142 = v35 + v135;
    int8x16_t v143 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v140, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v141)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v140->i64[0], 0), (uint64x2_t)vnegq_s64(v141)));
    if (v35 + (v135 & 0x3F) >= 0x81) {
      int8x16_t v143 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v140[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v141)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v140[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v141))), v143);
    }
    int32x4_t v144 = vzip1q_s32((int32x4_t)v77, (int32x4_t)v118);
    int32x4_t v145 = vzip1q_s32((int32x4_t)v82, (int32x4_t)v119);
    int16x8_t v146 = (int16x8_t)vzip1q_s32((int32x4_t)v87, (int32x4_t)v120);
    int16x8_t v147 = (int16x8_t)vzip1q_s32((int32x4_t)v93, (int32x4_t)v121);
    int16x8_t v148 = (int16x8_t)vzip1q_s32((int32x4_t)v98, (int32x4_t)v122);
    int16x8_t v149 = (int16x8_t)vzip1q_s32((int32x4_t)v104, (int32x4_t)v123);
    int16x8_t v150 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v124);
    int16x8_t v151 = (int16x8_t)vzip1q_s32((int32x4_t)v117, (int32x4_t)v125);
    int16x8_t v152 = (int16x8_t)vzip1q_s32((int32x4_t)v130, (int32x4_t)v131);
    int16x8_t v153 = (int16x8_t)vzip1q_s32((int32x4_t)v136, (int32x4_t)v5);
    int64x2_t v154 = (int64x2_t)vshlq_u64((uint64x2_t)v143, v112);
    *(int32x2_t *)v82.i8 = vmovn_s64((int64x2_t)v143);
    *(int32x2_t *)v154.i8 = vmovn_s64(v154);
    int16x8_t v155 = (int16x8_t)vzip1q_s32((int32x4_t)v82, (int32x4_t)v154);
    unint64_t v156 = v35 + v142;
    unint64_t v157 = v142 & 0x3F;
    int64x2_t v158 = vaddq_s64(v73, vdupq_n_s64(v157));
    v159 = (int64x2_t *)((char *)v72 + 8 * (v142 >> 6));
    int64x2_t v160 = vdupq_n_s64(0x40uLL);
    int8x16_t v161 = (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159->i64[0], 0), (uint64x2_t)vnegq_s64(v158));
    int64x2_t v162 = vsubq_s64(v160, v158);
    int8x16_t v163 = (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v159, 1), (uint64x2_t)v162);
    int8x16_t v164 = vorrq_s8(v163, v161);
    if (v35 + v157 >= 0x81)
    {
      int64x2_t v165 = v159[1];
      uint64x2_t v166 = (uint64x2_t)vdupq_lane_s64(v165.i64[0], 0);
      int8x16_t v163 = (int8x16_t)vdupq_laneq_s64(v165, 1);
      int8x16_t v161 = (int8x16_t)vshlq_u64(v166, (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v158));
      int64x2_t v162 = vdupq_n_s64(0xC0uLL);
      int8x16_t v164 = vorrq_s8(vorrq_s8(v161, (int8x16_t)vshlq_u64((uint64x2_t)v163, (uint64x2_t)vsubq_s64(v162, v158))), v164);
    }
    v167.i64[0] = 0x1000100010001;
    v167.i64[1] = 0x1000100010001;
    *(int16x4_t *)v161.i8 = vmovn_s32(v144);
    *(int16x4_t *)v162.i8 = vshrn_n_s32(v144, 0xAuLL);
    *(int16x4_t *)v160.i8 = vmovn_s32(v145);
    *(int16x4_t *)v104.i8 = vshrn_n_s32(v145, 0xAuLL);
    *(int16x4_t *)v111.i8 = vmovn_s32((int32x4_t)v146);
    *(int16x4_t *)v146.i8 = vshrn_n_s32((int32x4_t)v146, 0xAuLL);
    *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v147);
    int16x8_t v590 = (int16x8_t)v163;
    *(int16x4_t *)v147.i8 = vshrn_n_s32((int32x4_t)v147, 0xAuLL);
    *(int16x4_t *)v120.i8 = vmovn_s32((int32x4_t)v148);
    *(int16x4_t *)v148.i8 = vshrn_n_s32((int32x4_t)v148, 0xAuLL);
    *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v149);
    *(int16x4_t *)v149.i8 = vshrn_n_s32((int32x4_t)v149, 0xAuLL);
    *(int16x4_t *)v124.i8 = vmovn_s32((int32x4_t)v150);
    *(int16x4_t *)v117.i8 = vshrn_n_s32((int32x4_t)v150, 0xAuLL);
    *(int16x4_t *)v125.i8 = vmovn_s32((int32x4_t)v151);
    *(int16x4_t *)v130.i8 = vshrn_n_s32((int32x4_t)v151, 0xAuLL);
    *(int16x4_t *)v131.i8 = vmovn_s32((int32x4_t)v152);
    *(int16x4_t *)v152.i8 = vshrn_n_s32((int32x4_t)v152, 0xAuLL);
    *(int16x4_t *)v151.i8 = vmovn_s32((int32x4_t)v153);
    *(int16x4_t *)v153.i8 = vshrn_n_s32((int32x4_t)v153, 0xAuLL);
    *(int16x4_t *)v150.i8 = vmovn_s32((int32x4_t)v155);
    *(int16x4_t *)v155.i8 = vshrn_n_s32((int32x4_t)v155, 0xAuLL);
    int64x2_t v168 = (int64x2_t)vshlq_u64((uint64x2_t)v164, v112);
    *(int32x2_t *)v144.i8 = vmovn_s64((int64x2_t)v164);
    *(int32x2_t *)v168.i8 = vmovn_s64(v168);
    int16x8_t v169 = (int16x8_t)vzip1q_s32(v144, (int32x4_t)v168);
    *(int16x4_t *)v168.i8 = vmovn_s32((int32x4_t)v169);
    *(int16x4_t *)v169.i8 = vshrn_n_s32((int32x4_t)v169, 0xAuLL);
    unint64_t v170 = v156 & 0x3F;
    v171 = (int64x2_t *)((char *)v72 + 8 * (v156 >> 6));
    int64x2_t v172 = vaddq_s64(v73, vdupq_n_s64(v170));
    unint64_t v173 = v35 + v156;
    int8x16_t v174 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v171, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v172)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171->i64[0], 0), (uint64x2_t)vnegq_s64(v172)));
    if (v35 + v170 > 0x80) {
      int8x16_t v174 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v172)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v171[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v172))), v174);
    }
    int16x8_t v175 = vshlq_n_s16(v167, 0xAuLL);
    int64x2_t v176 = (int64x2_t)vshlq_u64((uint64x2_t)v174, v112);
    *(int32x2_t *)v174.i8 = vmovn_s64((int64x2_t)v174);
    *(int32x2_t *)v176.i8 = vmovn_s64(v176);
    int16x8_t v177 = (int16x8_t)vzip1q_s32((int32x4_t)v174, (int32x4_t)v176);
    *(int16x4_t *)v174.i8 = vmovn_s32((int32x4_t)v177);
    *(int16x4_t *)v177.i8 = vshrn_n_s32((int32x4_t)v177, 0xAuLL);
    v178 = (int64x2_t *)((char *)v72 + 8 * (v173 >> 6));
    int64x2_t v179 = vaddq_s64(v73, vdupq_n_s64(v173 & 0x3F));
    unint64_t v180 = v35 + v173;
    int8x16_t v181 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v178, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v179)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178->i64[0], 0), (uint64x2_t)vnegq_s64(v179)));
    if (v35 + (v173 & 0x3F) >= 0x81) {
      int8x16_t v181 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v179)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v178[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v179))), v181);
    }
    v182.i64[0] = -1;
    v182.i64[1] = -1;
    int8x16_t v183 = (int8x16_t)vaddq_s16(v175, v182);
    int8x16_t v184 = (int8x16_t)vzip1q_s16((int16x8_t)v161, (int16x8_t)v162);
    int8x16_t v185 = (int8x16_t)vzip1q_s16((int16x8_t)v160, (int16x8_t)v104);
    int8x16_t v186 = (int8x16_t)vzip1q_s16((int16x8_t)v111, v146);
    int8x16_t v187 = (int8x16_t)vzip1q_s16(v590, v147);
    int8x16_t v188 = (int8x16_t)vzip1q_s16((int16x8_t)v120, v148);
    int8x16_t v189 = (int8x16_t)vzip1q_s16((int16x8_t)v122, v149);
    int8x16_t v190 = (int8x16_t)vzip1q_s16((int16x8_t)v124, (int16x8_t)v117);
    int8x16_t v191 = (int8x16_t)vzip1q_s16((int16x8_t)v125, (int16x8_t)v130);
    int8x16_t v192 = (int8x16_t)vzip1q_s16((int16x8_t)v131, v152);
    int8x16_t v193 = (int8x16_t)vzip1q_s16(v151, v153);
    int8x16_t v194 = (int8x16_t)vzip1q_s16(v150, v155);
    int8x16_t v195 = (int8x16_t)vzip1q_s16((int16x8_t)v168, v169);
    int8x16_t v196 = (int8x16_t)vzip1q_s16((int16x8_t)v174, v177);
    int64x2_t v197 = (int64x2_t)vshlq_u64((uint64x2_t)v181, v112);
    *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v181);
    *(int32x2_t *)v197.i8 = vmovn_s64(v197);
    int16x8_t v198 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v197);
    *(int16x4_t *)v111.i8 = vmovn_s32((int32x4_t)v198);
    *(int16x4_t *)v198.i8 = vshrn_n_s32((int32x4_t)v198, 0xAuLL);
    int8x16_t v199 = (int8x16_t)vzip1q_s16((int16x8_t)v111, v198);
    unint64_t v200 = v35 + v180;
    unint64_t v201 = v180 & 0x3F;
    int64x2_t v202 = vaddq_s64(v73, vdupq_n_s64(v201));
    v203 = (int64x2_t *)((char *)v72 + 8 * (v180 >> 6));
    int8x16_t v204 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v203, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v202)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v203->i64[0], 0), (uint64x2_t)vnegq_s64(v202)));
    if (v35 + v201 >= 0x81) {
      int8x16_t v204 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v203[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v202)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v203[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v202))), v204);
    }
    int16x8_t v205 = (int16x8_t)vandq_s8(v184, v183);
    int16x8_t v206 = (int16x8_t)vandq_s8(v185, v183);
    int16x8_t v207 = (int16x8_t)vandq_s8(v186, v183);
    int16x8_t v208 = (int16x8_t)vandq_s8(v187, v183);
    int16x8_t v209 = (int16x8_t)vandq_s8(v188, v183);
    int16x8_t v210 = (int16x8_t)vandq_s8(v189, v183);
    int16x8_t v211 = (int16x8_t)vandq_s8(v190, v183);
    int16x8_t v212 = (int16x8_t)vandq_s8(v191, v183);
    int16x8_t v213 = (int16x8_t)vandq_s8(v192, v183);
    int16x8_t v214 = (int16x8_t)vandq_s8(v193, v183);
    int16x8_t v215 = (int16x8_t)vandq_s8(v194, v183);
    int16x8_t v216 = (int16x8_t)vandq_s8(v195, v183);
    int16x8_t v217 = (int16x8_t)vandq_s8(v196, v183);
    int16x8_t v218 = (int16x8_t)vandq_s8(v199, v183);
    int64x2_t v219 = (int64x2_t)vshlq_u64((uint64x2_t)v204, v112);
    *(int32x2_t *)v187.i8 = vmovn_s64((int64x2_t)v204);
    *(int32x2_t *)v219.i8 = vmovn_s64(v219);
    int16x8_t v220 = (int16x8_t)vzip1q_s32((int32x4_t)v187, (int32x4_t)v219);
    *(int16x4_t *)v187.i8 = vmovn_s32((int32x4_t)v220);
    *(int16x4_t *)v220.i8 = vshrn_n_s32((int32x4_t)v220, 0xAuLL);
    int8x16_t v221 = (int8x16_t)vzip1q_s16((int16x8_t)v187, v220);
    v222 = (int64x2_t *)((char *)v72 + 8 * (v200 >> 6));
    int64x2_t v223 = vaddq_s64(v73, vdupq_n_s64(v200 & 0x3F));
    int16x8_t v224 = (int16x8_t)vandq_s8(v221, v183);
    int8x16_t v225 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v222, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v223)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v222->i64[0], 0), (uint64x2_t)vnegq_s64(v223)));
    if (v35 + (v200 & 0x3F) >= 0x81) {
      int8x16_t v225 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v222[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v223)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v222[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v223))), v225);
    }
    int16x8_t v47 = vshlq_n_s16(v209, 6uLL);
    int16x8_t v46 = vshlq_n_s16(v210, 6uLL);
    int16x8_t v45 = vshlq_n_s16(v211, 6uLL);
    int16x8_t v44 = vshlq_n_s16(v212, 6uLL);
    int16x8_t v36 = vshlq_n_s16(v213, 6uLL);
    int16x8_t v37 = vshlq_n_s16(v214, 6uLL);
    int16x8_t v38 = vshlq_n_s16(v215, 6uLL);
    int16x8_t v39 = vshlq_n_s16(v216, 6uLL);
    int64x2_t v226 = (int64x2_t)vshlq_u64((uint64x2_t)v225, v112);
    *(int32x2_t *)v215.i8 = vmovn_s64((int64x2_t)v225);
    *(int32x2_t *)v226.i8 = vmovn_s64(v226);
    int16x8_t v227 = (int16x8_t)vzip1q_s32((int32x4_t)v215, (int32x4_t)v226);
    *(int16x4_t *)v215.i8 = vmovn_s32((int32x4_t)v227);
    *(int16x4_t *)v227.i8 = vshrn_n_s32((int32x4_t)v227, 0xAuLL);
    int16x8_t v51 = vshlq_n_s16(v217, 6uLL);
    int16x8_t v50 = vshlq_n_s16(v218, 6uLL);
    int16x8_t v49 = vshlq_n_s16(v224, 6uLL);
    int16x8_t v48 = vshlq_n_s16((int16x8_t)vandq_s8((int8x16_t)vzip1q_s16(v215, v227), v183), 6uLL);
    int16x8_t v40 = vshlq_n_s16(v205, 6uLL);
    int16x8_t v41 = vshlq_n_s16(v206, 6uLL);
    int16x8_t v42 = vshlq_n_s16(v207, 6uLL);
    int16x8_t v43 = vshlq_n_s16(v208, 6uLL);
  }
  else
  {
    int16x8_t v37 = 0uLL;
    int16x8_t v38 = 0uLL;
    int16x8_t v39 = 0uLL;
    int16x8_t v40 = 0uLL;
    int16x8_t v41 = 0uLL;
    int16x8_t v42 = 0uLL;
    int16x8_t v43 = 0uLL;
    int16x8_t v44 = 0uLL;
    int16x8_t v45 = 0uLL;
    int16x8_t v46 = 0uLL;
    int16x8_t v47 = 0uLL;
    int16x8_t v48 = 0uLL;
    int16x8_t v49 = 0uLL;
    int16x8_t v50 = 0uLL;
    int16x8_t v51 = 0uLL;
  }
  v228 = (int16x8_t *)((char *)a1 + a2);
  *a1 = v40;
  a1[1] = v42;
  a1[2] = v36;
  a1[3] = v38;
  v229 = (int16x8_t *)((char *)a1 + 2 * a2);
  int16x8_t *v228 = v41;
  v228[1] = v43;
  v228[2] = v37;
  v228[3] = v39;
  int16x8_t *v229 = v47;
  v229[1] = v45;
  v229[2] = v51;
  v229[3] = v49;
  v230 = (int16x8_t *)((char *)v229 + a2);
  uint64_t result = 160;
  int16x8_t *v230 = v46;
  v230[1] = v44;
  v230[2] = v50;
  v230[3] = v48;
  return result;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(unint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  unint64_t v11 = a3;
  v13 = (int16x8_t *)result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(a3, a4, (int16x8_t *)result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  int8x16_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v16, v13 + 4, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *int8x16_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  unint64_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v21, (int16x8_t *)((char *)v13 + v20), a2, v14, v24, a7);
    v11 += result;
    unint64_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *unint64_t v21 = 0;
    unint64_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v25, (int16x8_t *)((char *)v13 + v20 + 64), a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *unint64_t v25 = 0;
LABEL_35:
  unint64_t v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v26, (int16x8_t *)((char *)v13 + 8 * a2), a2, v14, v29, a7);
    v11 += result;
    int16x8_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *unint64_t v26 = 0;
    int16x8_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v30, (int16x8_t *)((char *)v13 + 8 * a2 + 64), a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int16x8_t v30 = 0;
LABEL_49:
  int8x16_t v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v31, (int16x8_t *)((char *)v13 + 12 * a2), a2, v14, v34, a7);
    v11 += result;
    unint64_t v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int8x16_t v31 = 0;
    unint64_t v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *unint64_t v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v35, (int16x8_t *)((char *)v13 + 12 * a2 + 64), a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(_OWORD *a1, unint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1, 128, a2, *a3, a4);
  unint64_t v8 = v7
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 4, 128, v7, a3[1], a4);
  unint64_t v9 = v8
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 32, 128, v8, a3[2], a4);
  unint64_t v10 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 36, 128, v9, a3[3], a4);
  unint64_t v11 = v10
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 64, 128, v10, a3[4], a4);
  unint64_t v12 = v11
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 68, 128, v11, a3[5], a4);
  unint64_t v13 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 96, 128, v12, a3[6], a4);
  unsigned int v14 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)19,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 100, 128, v13, v14, a4);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressLosslessCompressedSubblock(int32x4_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, double a5, double a6, double a7, int8x8_t a8)
{
  unint64_t v8 = 8 * (a3 & 7);
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 + 22;
  unint64_t v11 = *(void *)(a3 & 0xFFFFFFFFFFFFFFF8) >> v8;
  if (v8 >= 0x2B) {
    v11 |= *(void *)(v9 + 8) << (-8 * (a3 & 7u));
  }
  unint64_t v12 = (8 * (a3 & 7)) | 0x200;
  int v13 = (a4 >> 6) | (4 * v11);
  uint16x8_t v14 = (uint16x8_t)vdupq_n_s16(v13 & 0xF);
  a8.i32[0] = v13 & 0xF;
  v15.i64[0] = 0x3000300030003;
  v15.i64[1] = 0x3000300030003;
  int8x16_t v16 = vbicq_s8((int8x16_t)vdupq_n_s16(((v11 >> 2) & 0xF) + 1), (int8x16_t)vceqq_s16((int16x8_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v15));
  int8x16_t v17 = vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16(vdup_lane_s16((int16x4_t)vand_s8(a8, (int8x8_t)0x4000400040004), 0))));
  v18.i64[0] = 0x202020202020202;
  v18.i64[1] = 0x202020202020202;
  int8x16_t v19 = vandq_s8(v17, v18);
  if (vmaxvq_s8(v19) < 1)
  {
    int v29 = 0;
    v30.i64[0] = -1;
    v30.i64[1] = -1;
    int8x16_t v31 = v16;
    int8x16_t v32 = v16;
    int8x16_t v33 = v16;
    v34.i64[0] = -1;
    v34.i64[1] = -1;
    int8x16_t v35 = v16;
    v36.i64[0] = -1;
    v36.i64[1] = -1;
    v37.i64[0] = -1;
    v37.i64[1] = -1;
  }
  else
  {
    int8x16_t v20 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v19, v19));
    int8x16_t v21 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v20, (int16x8_t)v20));
    unint64_t v22 = vpaddq_s32((int32x4_t)v21, (int32x4_t)v21).u64[0];
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    int64x2_t v24 = v23;
    unint64_t v25 = vaddvq_s64(v23);
    unint64_t v26 = v25 + v10;
    if (v25 <= 0x80 && v12 >= v26)
    {
      int64x2_t v38 = vaddq_s64(vzip1q_s64((int64x2_t)0, v24), vdupq_n_s64(v10 & 0x3E));
      int16x8_t v39 = (int64x2_t *)(v9 + ((v10 >> 3) & 8));
      int8x16_t v28 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v39, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v38)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v39->i64[0], 0), (uint64x2_t)vnegq_s64(v38)));
      if (v25 + (v10 & 0x3E) < 0x81)
      {
        int v29 = 0;
      }
      else
      {
        int v29 = 0;
        int8x16_t v28 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v39[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v38)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v39[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v38))), v28);
      }
      unint64_t v10 = v26;
    }
    else
    {
      int8x16_t v28 = 0uLL;
      int v29 = 1;
    }
    int32x2_t v40 = vzip1_s32(*(int32x2_t *)v21.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    v41.i64[0] = v40.u32[0];
    v41.i64[1] = v40.u32[1];
    int64x2_t v42 = (int64x2_t)vshlq_u64((uint64x2_t)v28, (uint64x2_t)vnegq_s64(v41));
    *(int32x2_t *)v28.i8 = vmovn_s64((int64x2_t)v28);
    *(int32x2_t *)v42.i8 = vmovn_s64(v42);
    int8x16_t v43 = (int8x16_t)vzip1q_s32((int32x4_t)v28, (int32x4_t)v42);
    int16x8_t v44 = (int16x8_t)vshlq_u32((uint32x4_t)v43, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v20.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)))));
    *(int16x4_t *)v43.i8 = vmovn_s32((int32x4_t)v43);
    *(int16x4_t *)v44.i8 = vmovn_s32((int32x4_t)v44);
    int8x16_t v45 = (int8x16_t)vzip1q_s16((int16x8_t)v43, v44);
    *(int8x8_t *)v45.i8 = vzip1_s8(vmovn_s16((int16x8_t)v45), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v45, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v19.i8, *(int8x8_t *)v14.i8))))));
    v43.i64[0] = 0x101010101010101;
    v43.i64[1] = 0x101010101010101;
    int8x16_t v46 = vshlq_s8(v43, v19);
    v43.i64[0] = -1;
    v43.i64[1] = -1;
    v46.i32[0] = vandq_s8(v45, vaddq_s8(v46, v43)).u32[0];
    int16x8_t v47 = vdupq_n_s16(v46.i8[0]);
    int16x8_t v48 = vdupq_n_s16(v46.i8[1]);
    int16x8_t v49 = vdupq_n_s16(v46.i8[2]);
    int16x8_t v50 = vdupq_n_s16(v46.i8[3]);
    int8x16_t v35 = (int8x16_t)vsubq_s16((int16x8_t)v16, v47);
    int8x16_t v33 = (int8x16_t)vsubq_s16((int16x8_t)v16, v48);
    int8x16_t v31 = (int8x16_t)vsubq_s16((int16x8_t)v16, v49);
    int8x16_t v32 = (int8x16_t)vsubq_s16((int16x8_t)v16, v50);
    int8x16_t v37 = (int8x16_t)vceqzq_s16(v47);
    int8x16_t v36 = (int8x16_t)vceqzq_s16(v48);
    int8x16_t v34 = (int8x16_t)vceqzq_s16(v49);
    int8x16_t v30 = (int8x16_t)vceqzq_s16(v50);
  }
  v51.i64[0] = 0x7000700070007;
  v51.i64[1] = 0x7000700070007;
  int8x16_t v52 = 0uLL;
  int8x16_t v53 = vandq_s8(vextq_s8((int8x16_t)vcgtq_u16(v14, v51), (int8x16_t)0, 0xEuLL), v16);
  int8x16_t v54 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v53, (int16x8_t)v53));
  unint64_t v55 = vpaddq_s32((int32x4_t)v54, (int32x4_t)v54).u64[0];
  v56.i64[0] = v55;
  v56.i64[1] = HIDWORD(v55);
  int64x2_t v57 = v56;
  unint64_t v58 = vaddvq_s64(v56);
  if (v58 <= 0x80 && v12 >= v58 + v10)
  {
    int64x2_t v60 = vaddq_s64(vzip1q_s64((int64x2_t)0, v57), vdupq_n_s64(v10 & 0x3F));
    int8x16_t v61 = (int64x2_t *)(v9 + 8 * (v10 >> 6));
    int8x16_t v52 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v61, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v60)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v61->i64[0], 0), (uint64x2_t)vnegq_s64(v60)));
    if (v58 + (v10 & 0x3F) >= 0x81) {
      int8x16_t v52 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v61[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v60)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v61[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v60))), v52);
    }
    v10 += v58;
  }
  else
  {
    int v29 = 1;
  }
  int v62 = a4 >> 6;
  if (v62 != 2)
  {
    LODWORD(v65) = 0;
    LODWORD(v64) = 0;
    unint64_t v66 = v10;
    goto LABEL_34;
  }
  unint64_t v63 = v10 + 8;
  if (v12 < v10 + 8)
  {
    LODWORD(v64) = 0;
    unint64_t v63 = v10;
LABEL_33:
    LODWORD(v65) = 0;
    int v29 = 1;
    unint64_t v66 = v63;
    goto LABEL_34;
  }
  uint64_t v64 = *(void *)(v9 + 8 * (v10 >> 6)) >> v10;
  if ((v10 & 0x3F) >= 0x39) {
    v64 |= *(void *)(v9 + 8 * (v10 >> 6) + 8) << -(v10 & 0x3F);
  }
  unint64_t v66 = v10 + 16;
  LODWORD(v64) = (char)v64;
  if (v12 < v10 + 16) {
    goto LABEL_33;
  }
  uint64_t v65 = *(void *)(v9 + 8 * (v63 >> 6)) >> v63;
  if ((v63 & 0x3F) >= 0x39) {
    v65 |= *(void *)(v9 + 8 * (v63 >> 6) + 8) << -(v63 & 0x3F);
  }
  LODWORD(v65) = (char)v65;
LABEL_34:
  int8x16_t v67 = 0uLL;
  int8x16_t v68 = vextq_s8((int8x16_t)0, v35, 0xEuLL);
  int8x16_t v69 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v68, (int16x8_t)v68));
  unint64_t v70 = vpaddq_s32((int32x4_t)v69, (int32x4_t)v69).u64[0];
  v71.i64[0] = v70;
  v71.i64[1] = HIDWORD(v70);
  int64x2_t v72 = v71;
  unint64_t v73 = vaddvq_s64(v71);
  unint64_t v74 = v73 + v66;
  if (v73 <= 0x80 && v12 >= v74)
  {
    unint64_t v77 = v66 & 0x3F;
    int64x2_t v78 = vaddq_s64(vzip1q_s64((int64x2_t)0, v72), vdupq_n_s64(v77));
    v79 = (int64x2_t *)(v9 + 8 * (v66 >> 6));
    int8x16_t v76 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v79, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v78)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v79->i64[0], 0), (uint64x2_t)vnegq_s64(v78)));
    if (v73 + v77 >= 0x81) {
      int8x16_t v76 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v79[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v78)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v79[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v78))), v76);
    }
    unint64_t v66 = v74;
  }
  else
  {
    int v29 = 1;
    int8x16_t v76 = 0uLL;
  }
  int8x16_t v80 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v33, (int16x8_t)v33));
  unint64_t v81 = vpaddq_s32((int32x4_t)v80, (int32x4_t)v80).u64[0];
  v82.i64[0] = v81;
  v82.i64[1] = HIDWORD(v81);
  int64x2_t v83 = v82;
  unint64_t v84 = vaddvq_s64(v82);
  if (v84 < 0x81)
  {
    int32x2_t v85 = vzip1_s32(*(int32x2_t *)v80.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL));
    v86.i64[0] = v85.u32[0];
    v86.i64[1] = v85.u32[1];
    int64x2_t v87 = v86;
    int32x4_t v88 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v33.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
    unint64_t v89 = v84 + v66;
    if (v12 >= v84 + v66)
    {
      unint64_t v90 = v66 & 0x3F;
      int64x2_t v91 = vaddq_s64(vzip1q_s64((int64x2_t)0, v83), vdupq_n_s64(v90));
      unint64_t v92 = (int64x2_t *)(v9 + 8 * (v66 >> 6));
      int8x16_t v67 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v92, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v91)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v92->i64[0], 0), (uint64x2_t)vnegq_s64(v91)));
      if (v84 + v90 >= 0x81) {
        int8x16_t v67 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v92[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v91)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v92[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v91))), v67);
      }
      unint64_t v66 = v89;
    }
    else
    {
      int v29 = 1;
    }
    int64x2_t v93 = (int64x2_t)vshlq_u64((uint64x2_t)v67, (uint64x2_t)vnegq_s64(v87));
    *(int32x2_t *)v67.i8 = vmovn_s64((int64x2_t)v67);
    *(int32x2_t *)v93.i8 = vmovn_s64(v93);
    int16x8_t v94 = (int16x8_t)vzip1q_s32((int32x4_t)v67, (int32x4_t)v93);
    int16x8_t v95 = (int16x8_t)vshlq_u32((uint32x4_t)v94, (uint32x4_t)vnegq_s32(v88));
    *(int16x4_t *)v94.i8 = vmovn_s32((int32x4_t)v94);
    *(int16x4_t *)v95.i8 = vmovn_s32((int32x4_t)v95);
    int8x16_t v67 = (int8x16_t)vzip1q_s16(v94, v95);
  }
  else
  {
    int v29 = 1;
  }
  int8x16_t v96 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v31, (int16x8_t)v31));
  unint64_t v97 = vpaddq_s32((int32x4_t)v96, (int32x4_t)v96).u64[0];
  v98.i64[0] = v97;
  v98.i64[1] = HIDWORD(v97);
  int64x2_t v99 = v98;
  unint64_t v100 = vaddvq_s64(v98);
  if (v100 <= 0x80)
  {
    int32x2_t v102 = vzip1_s32(*(int32x2_t *)v96.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL));
    v103.i64[0] = v102.u32[0];
    v103.i64[1] = v102.u32[1];
    int64x2_t v104 = v103;
    int32x4_t v105 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v31.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)));
    unint64_t v106 = v100 + v66;
    if (v12 >= v100 + v66)
    {
      unint64_t v108 = v66 & 0x3F;
      int64x2_t v109 = vaddq_s64(vzip1q_s64((int64x2_t)0, v99), vdupq_n_s64(v108));
      unint64_t v110 = (int64x2_t *)(v9 + 8 * (v66 >> 6));
      int8x16_t v107 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v110, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v109)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v110->i64[0], 0), (uint64x2_t)vnegq_s64(v109)));
      if (v100 + v108 >= 0x81) {
        int8x16_t v107 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v110[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v109)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v110[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v109))), v107);
      }
      unint64_t v66 = v106;
    }
    else
    {
      int8x16_t v107 = 0uLL;
      int v29 = 1;
    }
    int64x2_t v111 = (int64x2_t)vshlq_u64((uint64x2_t)v107, (uint64x2_t)vnegq_s64(v104));
    *(int32x2_t *)v107.i8 = vmovn_s64((int64x2_t)v107);
    *(int32x2_t *)v111.i8 = vmovn_s64(v111);
    int16x8_t v112 = (int16x8_t)vzip1q_s32((int32x4_t)v107, (int32x4_t)v111);
    int16x8_t v113 = (int16x8_t)vshlq_u32((uint32x4_t)v112, (uint32x4_t)vnegq_s32(v105));
    *(int16x4_t *)v112.i8 = vmovn_s32((int32x4_t)v112);
    *(int16x4_t *)v113.i8 = vmovn_s32((int32x4_t)v113);
    int16x8_t v101 = vzip1q_s16(v112, v113);
  }
  else
  {
    int v29 = 1;
    int16x8_t v101 = 0uLL;
  }
  int8x16_t v114 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v32, (int16x8_t)v32));
  unint64_t v115 = vpaddq_s32((int32x4_t)v114, (int32x4_t)v114).u64[0];
  v116.i64[0] = v115;
  v116.i64[1] = HIDWORD(v115);
  int64x2_t v117 = v116;
  unint64_t v118 = vaddvq_s64(v116);
  if (v118 > 0x80 || v12 < v118 + v66) {
    goto LABEL_64;
  }
  int64x2_t v119 = vaddq_s64(vzip1q_s64((int64x2_t)0, v117), vdupq_n_s64(v66 & 0x3F));
  int64x2_t v120 = (int64x2_t *)(v9 + 8 * (v66 >> 6));
  int8x16_t v121 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v120, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v119)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v120->i64[0], 0), (uint64x2_t)vnegq_s64(v119)));
  if (v118 + (v66 & 0x3F) >= 0x81) {
    int8x16_t v121 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v120[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v119)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v120[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v119))), v121);
  }
  if (v29 || (uint64_t v122 = (a4 & 0x3F) + 1, 8 * ((a3 & 7) + v122) - (v118 + v66) >= 9))
  {
LABEL_64:
    uint64_t v122 = 0;
    v179 |= 0xFFFFLL << ((8 * (&v179 + 6)) & 0x30);
    a1->i64[0] = 0;
    a1->i64[1] = 0;
    int64x2_t v123 = (uint64_t *)((char *)a1->i64 + a2);
    int64x2_t v124 = (uint64_t *)((char *)a1->i64 + 2 * a2);
    *int64x2_t v123 = 0;
    v123[1] = 0;
    int64x2_t v125 = (uint64_t *)((char *)a1->i64 + 2 * a2 + a2);
    *int64x2_t v124 = 0;
    v124[1] = 0;
    *int64x2_t v125 = 0;
    v125[1] = 0;
  }
  else
  {
    int32x2_t v127 = vzip1_s32(*(int32x2_t *)v54.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
    int32x2_t v128 = vzip1_s32(*(int32x2_t *)v69.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
    v129.i64[0] = v127.u32[0];
    v129.i64[1] = v127.u32[1];
    int64x2_t v130 = v129;
    v129.i64[0] = v128.u32[0];
    v129.i64[1] = v128.u32[1];
    int64x2_t v131 = (int64x2_t)vshlq_u64((uint64x2_t)v52, (uint64x2_t)vnegq_s64(v130));
    int64x2_t v132 = (int64x2_t)vshlq_u64((uint64x2_t)v76, (uint64x2_t)vnegq_s64(v129));
    *(int32x2_t *)v52.i8 = vmovn_s64((int64x2_t)v52);
    *(int32x2_t *)v131.i8 = vmovn_s64(v131);
    *(int32x2_t *)v76.i8 = vmovn_s64((int64x2_t)v76);
    *(int32x2_t *)v132.i8 = vmovn_s64(v132);
    int16x8_t v133 = (int16x8_t)vzip1q_s32((int32x4_t)v52, (int32x4_t)v131);
    int16x8_t v134 = (int16x8_t)vzip1q_s32((int32x4_t)v76, (int32x4_t)v132);
    int16x8_t v135 = (int16x8_t)vshlq_u32((uint32x4_t)v133, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v53.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)))));
    int16x8_t v136 = (int16x8_t)vshlq_u32((uint32x4_t)v134, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v68.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)))));
    *(int16x4_t *)v133.i8 = vmovn_s32((int32x4_t)v133);
    *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
    *(int16x4_t *)v134.i8 = vmovn_s32((int32x4_t)v134);
    *(int16x4_t *)v136.i8 = vmovn_s32((int32x4_t)v136);
    v137.i64[0] = 0x10001000100010;
    v137.i64[1] = 0x10001000100010;
    v138.i64[0] = 0x10001000100010;
    v138.i64[1] = 0x10001000100010;
    unint64_t v139 = v11 >> 6;
    int16x8_t v140 = vzip1q_s16(v133, v135);
    v135.i64[0] = 0xF000F000F000FLL;
    v135.i64[1] = 0xF000F000F000FLL;
    int16x8_t v141 = vsubq_s16(v137, (int16x8_t)v53);
    int16x8_t v142 = vzip1q_s16(v134, v136);
    v136.i64[0] = 0xF000F000F000FLL;
    v136.i64[1] = 0xF000F000F000FLL;
    int32x2_t v143 = vzip1_s32(*(int32x2_t *)v114.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v114, v114, 8uLL));
    v144.i64[0] = 0xF000F000F000FLL;
    v144.i64[1] = 0xF000F000F000FLL;
    v145.i64[0] = 0x10001000100010;
    v145.i64[1] = 0x10001000100010;
    int16x8_t v146 = vaddq_s16((int16x8_t)v53, v135);
    int16x8_t v147 = vaddq_s16((int16x8_t)v68, v136);
    int16x8_t v148 = vshlq_s16(v142, vsubq_s16(v138, (int16x8_t)v68));
    v129.i64[0] = v143.u32[0];
    v129.i64[1] = v143.u32[1];
    int8x16_t v149 = (int8x16_t)vshlq_s16(vshlq_s16(v140, v141), v146);
    int16x8_t v150 = vshlq_s16(v148, v147);
    int16x8_t v151 = vshlq_s16(vshlq_s16((int16x8_t)v67, vsubq_s16(v138, (int16x8_t)v33)), vaddq_s16((int16x8_t)v33, v136));
    int16x8_t v152 = vshlq_s16(vshlq_s16(v101, vsubq_s16(v138, (int16x8_t)v31)), vaddq_s16((int16x8_t)v31, v136));
    int64x2_t v153 = (int64x2_t)vshlq_u64((uint64x2_t)v121, (uint64x2_t)vnegq_s64(v129));
    *(int32x2_t *)v148.i8 = vmovn_s64((int64x2_t)v121);
    *(int32x2_t *)v153.i8 = vmovn_s64(v153);
    int16x8_t v154 = (int16x8_t)vzip1q_s32((int32x4_t)v148, (int32x4_t)v153);
    int16x8_t v155 = (int16x8_t)vshlq_u32((uint32x4_t)v154, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v32.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))));
    *(int16x4_t *)v154.i8 = vmovn_s32((int32x4_t)v154);
    *(int16x4_t *)v155.i8 = vmovn_s32((int32x4_t)v155);
    int16x8_t v156 = vshlq_s16(vshlq_s16(vzip1q_s16(v154, v155), vsubq_s16(v145, (int16x8_t)v32)), vaddq_s16((int16x8_t)v32, v144));
    if (v62 == 2)
    {
      v157.i64[0] = 0xFFFFFFFF00000000;
      v157.i64[1] = 0xFFFFFFFF00000000;
      int16x8_t v158 = vmlal_s8((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v65), v157), vdup_n_s8(v64), (int8x8_t)0x302030201000100);
      int16x8_t v150 = vaddq_s16(v150, v158);
      int16x8_t v151 = vaddq_s16(vaddq_s16(vdupq_n_s16(2 * (int)v65), v158), v151);
      int16x8_t v152 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v64), v158), v152);
      int16x8_t v156 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v64 + 2 * (int)v65), v158), v156);
    }
    int16x8_t v159 = vdupq_n_s16(v139);
    int16x8_t v160 = vaddq_s16((int16x8_t)vandq_s8(v149, v37), v150);
    int8x16_t v161 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v149.i8, 0);
    int8x16_t v162 = (int8x16_t)vsubq_s16(v160, (int16x8_t)vandq_s8(v161, v37));
    int8x16_t v163 = (int8x16_t)vsubq_s16(v151, (int16x8_t)vandq_s8(v161, v36));
    int8x16_t v164 = (int8x16_t)vsubq_s16(v152, (int16x8_t)vandq_s8(v161, v34));
    int8x16_t v165 = (int8x16_t)vsubq_s16(v156, (int16x8_t)vandq_s8(v161, v30));
    v166.i64[0] = 0x1000100010001;
    v166.i64[1] = 0x1000100010001;
    if (vaddvq_s16(vceqq_s16((int16x8_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v166)))
    {
      int8x16_t v167 = v162;
      v167.i16[0] = v162.i16[7];
      v167.i16[7] = v162.i16[0];
      int8x16_t v168 = (int8x16_t)vnegq_s16((int16x8_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
      int8x16_t v169 = vbslq_s8(v168, v167, v162);
      int8x16_t v170 = (int8x16_t)vaddq_s16((int16x8_t)v169, (int16x8_t)vandq_s8(vqtbl1q_s8(v169, (int8x16_t)xmmword_242EA7480), v168));
      int8x16_t v162 = (int8x16_t)vaddq_s16((int16x8_t)v170, (int16x8_t)vandq_s8(vqtbl1q_s8(v170, (int8x16_t)xmmword_242EA7490), v168));
      int8x16_t v171 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v163, (int8x16_t)xmmword_242EA74A0), v168), (int16x8_t)v163);
      int8x16_t v163 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v171, (int8x16_t)xmmword_242EA74B0), v168), (int16x8_t)v171);
      int8x16_t v172 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v164, (int8x16_t)xmmword_242EA74C0), v168), (int16x8_t)v164);
      int8x16_t v164 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v172, (int8x16_t)xmmword_242EA74D0), v168), (int16x8_t)v172);
      int8x16_t v173 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v165, (int8x16_t)xmmword_242EA74E0), v168), (int16x8_t)v165);
      int8x16_t v165 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v173, (int8x16_t)xmmword_242EA74F0), v168), (int16x8_t)v173);
    }
    int32x4_t v174 = (int32x4_t)vaddq_s16(v159, (int16x8_t)v162);
    int32x4_t v175 = (int32x4_t)vaddq_s16((int16x8_t)v163, v159);
    int32x4_t v176 = (int32x4_t)vaddq_s16((int16x8_t)v164, v159);
    int32x4_t v177 = (int32x4_t)vaddq_s16((int16x8_t)v165, v159);
    *a1 = vuzp1q_s32(v174, v176);
    *(int32x4_t *)((char *)a1 + a2) = vuzp2q_s32(v174, v176);
    v178 = (int32x4_t *)((char *)a1 + 2 * a2);
    int32x4_t *v178 = vuzp1q_s32(v175, v177);
    *(int32x4_t *)((char *)v178 + a2) = vuzp2q_s32(v175, v177);
  }
  return v122;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(int8x16_t *a1, char *a2, int32x4_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, int16x4_t a14)
{
  int32x4_t v14 = *(int32x4_t *)((char *)a3 + a4);
  int8x16_t v15 = (int8x16_t)vzip1q_s32(*a3, v14);
  int16x8_t v16 = (int16x8_t)vzip2q_s32(*a3, v14);
  int8x16_t v17 = (int32x4_t *)((char *)a3 + 2 * a4);
  int32x4_t v18 = *v17;
  int32x4_t v19 = *(int32x4_t *)((char *)v17 + a4);
  int16x8_t v20 = (int16x8_t)vzip1q_s32(*v17, v19);
  int16x8_t v21 = (int16x8_t)vzip2q_s32(*v17, v19);
  int8x16_t v22 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v15.i8, 0);
  int8x16_t v23 = (int8x16_t)vsubq_s16((int16x8_t)v15, (int16x8_t)v22);
  int8x16_t v24 = (int8x16_t)vsubq_s16(v20, (int16x8_t)v22);
  int8x16_t v25 = (int8x16_t)vsubq_s16(v16, (int16x8_t)v22);
  int16x8_t v26 = vsubq_s16(v21, (int16x8_t)v22);
  v18.i16[0] = vmaxvq_s16((int16x8_t)v23);
  v19.i16[0] = vminvq_s16((int16x8_t)v23);
  int16x8_t v27 = vdupq_lane_s16(*(int16x4_t *)v18.i8, 0);
  int16x8_t v28 = vdupq_lane_s16(*(int16x4_t *)v19.i8, 0);
  v29.i64[0] = 0x8000800080008000;
  v29.i64[1] = 0x8000800080008000;
  int16x8_t v30 = vmaxq_s16(v27, v29);
  v31.i64[0] = 0x8000800080008000;
  v31.i64[1] = 0x8000800080008000;
  int16x8_t v32 = vminq_s16(v28, v31);
  int16x8_t v33 = vzip1q_s16(v27, v28);
  int8x16_t v34 = (int8x16_t)vceqzq_s16(v33);
  v35.i64[0] = 0x10001000100010;
  v35.i64[1] = 0x10001000100010;
  int16x8_t v36 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v35, vclsq_s16(v33)), v34);
  v34.i16[0] = vmaxvq_s16((int16x8_t)v24);
  a14.i16[0] = vminvq_s16((int16x8_t)v24);
  int16x8_t v37 = vdupq_lane_s16(*(int16x4_t *)v34.i8, 0);
  int16x8_t v38 = vdupq_lane_s16(a14, 0);
  int16x8_t v39 = vpmaxq_s16(v36, v36);
  int16x8_t v40 = vmaxq_s16(v30, v37);
  int16x8_t v41 = vminq_s16(v32, v38);
  int16x8_t v42 = vzip1q_s16(v37, v38);
  int8x16_t v43 = (int8x16_t)vceqzq_s16(v42);
  int16x8_t v44 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v35, vclsq_s16(v42)), v43);
  int16x8_t v45 = vpmaxq_s16(v44, v44);
  v43.i16[0] = vmaxvq_s16((int16x8_t)v25);
  int16x8_t v46 = vdupq_lane_s16(*(int16x4_t *)v43.i8, 0);
  v37.i16[0] = vminvq_s16((int16x8_t)v25);
  int16x8_t v47 = vdupq_lane_s16(*(int16x4_t *)v37.i8, 0);
  int16x8_t v48 = vmaxq_s16(v40, v46);
  int16x8_t v49 = vminq_s16(v41, v47);
  int16x8_t v50 = vzip1q_s16(v46, v47);
  int8x16_t v51 = (int8x16_t)vceqzq_s16(v50);
  int16x8_t v52 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v35, vclsq_s16(v50)), v51);
  int16x8_t v53 = vpmaxq_s16(v52, v52);
  v51.i16[0] = vmaxvq_s16(v26);
  v47.i16[0] = vminvq_s16(v26);
  int16x8_t v54 = vdupq_lane_s16(*(int16x4_t *)v51.i8, 0);
  int16x8_t v55 = vdupq_lane_s16(*(int16x4_t *)v47.i8, 0);
  int16x8_t v56 = vmaxq_s16(v48, v54);
  int16x8_t v57 = vminq_s16(v49, v55);
  int16x8_t v58 = vzip1q_s16(v54, v55);
  int16x8_t v59 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v35, vclsq_s16(v58)), (int8x16_t)vceqzq_s16(v58));
  int16x8_t v60 = vpmaxq_s16(v59, v59);
  int8x16_t v61 = (int8x16_t)vmaxq_s16(vmaxq_s16(v39, v45), vmaxq_s16(v53, v60));
  int16x8_t v62 = vclzq_s16(vsubq_s16(v56, v57));
  int8x16_t v63 = (int8x16_t)vsubq_s16(v35, v62);
  int8x16_t v64 = (int8x16_t)vcgtq_s16((int16x8_t)v61, (int16x8_t)v63);
  int8x16_t v65 = vbslq_s8(v64, v63, v61);
  if (vmaxvq_s16((int16x8_t)v65))
  {
    char v66 = 0;
    unint64_t v67 = 0;
    v68.i64[0] = -1;
    v68.i64[1] = -1;
    v69.i64[0] = 0xF000F000F000FLL;
    v69.i64[1] = 0xF000F000F000FLL;
    int8x16_t v70 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v68, vsubq_s16(v69, v62)), v57), v64);
    v71.i64[0] = 0x8000800080008;
    v71.i64[1] = 0x8000800080008;
    v68.i64[0] = 0x3000300030003;
    v68.i64[1] = 0x3000300030003;
    int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v65, v39), v68), (int16x8_t)0);
    int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v65, v45), v68), (int16x8_t)0);
    int16x8_t v74 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v65, v53), v68), (int16x8_t)0);
    int16x8_t v75 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v65, v60), v68), (int16x8_t)0);
    int8x16_t v76 = (int8x16_t)vsubq_s16((int16x8_t)v65, v72);
    int8x16_t v77 = (int8x16_t)vsubq_s16((int16x8_t)v65, (int16x8_t)v73);
    int8x16_t v78 = (int8x16_t)vsubq_s16((int16x8_t)v65, v74);
    int8x16_t v79 = (int8x16_t)vsubq_s16((int16x8_t)v65, v75);
    int8x16_t v80 = (int8x16_t)vceqq_s16(vaddq_s16(v75, v74), vnegq_s16(vaddq_s16(v72, (int16x8_t)v73)));
    v73.i64[0] = 0x4000400040004;
    v73.i64[1] = 0x4000400040004;
    int8x16_t v81 = vbicq_s8(v73, v80);
    int8x16_t v82 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v65), (int8x16_t)v68), vandq_s8(v64, v71)), v81);
    if (a5 >= 4 && a6 >= 2)
    {
      int16x8_t v377 = v20;
      int16x8_t v378 = v21;
      int16x8_t v379 = v16;
      int8x16_t v380 = v70;
      v83.i32[0] = v15.u16[2];
      v83.i32[1] = v15.u16[1];
      int32x2_t v84 = vshl_n_s32(vsub_s32(v83, vdup_n_s32(v15.u16[0])), 0x18uLL);
      int v85 = v84.i32[1] >> 24;
      int16x4_t v86 = (int16x4_t)vshl_s32(v84, (int32x2_t)0xFFFFFFEAFFFFFFE9);
      unsigned __int32 v87 = v84.i32[0];
      v88.i64[0] = 0xFFFFFFFF00000000;
      v88.i64[1] = 0xFFFFFFFF00000000;
      int16x8_t v89 = vmlaq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v84.i32[0] >> 24), v88), vdupq_n_s16(v84.i32[1] >> 24), (int16x8_t)xmmword_242EA76B0);
      int16x8_t v90 = vsubq_s16((int16x8_t)v23, v89);
      int8x16_t v91 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v86.i32[0]), (int16x8_t)v24), v89);
      int8x16_t v92 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v86.i32[1]), (int16x8_t)v25), v89);
      int16x8_t v93 = vaddq_s16(vdupq_n_s16(-v86.i32[0] - v86.i32[1]), v26);
      int8x16_t v94 = (int8x16_t)vsubq_s16(v93, v89);
      v93.i16[0] = vmaxvq_s16(v90);
      int8x16_t v375 = (int8x16_t)v90;
      v86.i16[0] = vminvq_s16(v90);
      int16x8_t v95 = vdupq_lane_s16(*(int16x4_t *)v93.i8, 0);
      int16x8_t v96 = vdupq_lane_s16(v86, 0);
      v90.i64[0] = 0x8000800080008000;
      v90.i64[1] = 0x8000800080008000;
      int16x8_t v97 = vmaxq_s16(v95, v90);
      v90.i64[0] = 0x8000800080008000;
      v90.i64[1] = 0x8000800080008000;
      int16x8_t v98 = vminq_s16(v96, v90);
      int16x8_t v99 = vzip1q_s16(v95, v96);
      int8x16_t v100 = (int8x16_t)vceqzq_s16(v99);
      v90.i64[0] = 0x10001000100010;
      v90.i64[1] = 0x10001000100010;
      int16x8_t v101 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v90, vclsq_s16(v99)), v100);
      int16x8_t v102 = vpmaxq_s16(v101, v101);
      v100.i16[0] = vmaxvq_s16((int16x8_t)v91);
      int8x16_t v103 = (int8x16_t)v26;
      v26.i16[0] = vminvq_s16((int16x8_t)v91);
      int16x8_t v104 = vdupq_lane_s16(*(int16x4_t *)v100.i8, 0);
      int16x8_t v105 = vdupq_lane_s16(*(int16x4_t *)v26.i8, 0);
      int16x8_t v106 = vmaxq_s16(v97, v104);
      int16x8_t v107 = vminq_s16(v98, v105);
      int16x8_t v108 = vzip1q_s16(v104, v105);
      int8x16_t v109 = (int8x16_t)vceqzq_s16(v108);
      int16x8_t v110 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v90, vclsq_s16(v108)), v109);
      v109.i16[0] = vmaxvq_s16((int16x8_t)v92);
      v16.i16[0] = vminvq_s16((int16x8_t)v92);
      int16x8_t v111 = vdupq_lane_s16(*(int16x4_t *)v109.i8, 0);
      int16x8_t v112 = vdupq_lane_s16(*(int16x4_t *)v16.i8, 0);
      int16x8_t v113 = vpmaxq_s16(v110, v110);
      int16x8_t v114 = vmaxq_s16(v106, v111);
      int16x8_t v115 = vminq_s16(v107, v112);
      int16x8_t v116 = vzip1q_s16(v111, v112);
      int8x16_t v117 = (int8x16_t)vceqzq_s16(v116);
      int16x8_t v118 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v90, vclsq_s16(v116)), v117);
      int16x8_t v119 = vpmaxq_s16(v118, v118);
      v118.i16[0] = vmaxvq_s16((int16x8_t)v94);
      int16x8_t v120 = vdupq_lane_s16(*(int16x4_t *)v118.i8, 0);
      v117.i16[0] = vminvq_s16((int16x8_t)v94);
      int16x8_t v121 = vdupq_lane_s16(*(int16x4_t *)v117.i8, 0);
      int16x8_t v122 = vmaxq_s16(v114, v120);
      int16x8_t v123 = vminq_s16(v115, v121);
      int16x8_t v124 = vzip1q_s16(v120, v121);
      int16x8_t v125 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v90, vclsq_s16(v124)), (int8x16_t)vceqzq_s16(v124));
      int16x8_t v126 = vpmaxq_s16(v125, v125);
      int8x16_t v127 = (int8x16_t)vmaxq_s16(vmaxq_s16(v102, v113), vmaxq_s16(v119, v126));
      int8x16_t v128 = v25;
      int16x8_t v129 = vclzq_s16(vsubq_s16(v122, v123));
      int8x16_t v130 = (int8x16_t)vsubq_s16(v90, v129);
      int8x16_t v131 = (int8x16_t)vcgtq_s16((int16x8_t)v127, (int16x8_t)v130);
      int16x8_t v132 = (int16x8_t)vbslq_s8(v131, v130, v127);
      v127.i64[0] = 0x1000100010001;
      v127.i64[1] = 0x1000100010001;
      int8x16_t v133 = (int8x16_t)vmaxq_s16(v132, (int16x8_t)v127);
      v132.i64[0] = 0x3000300030003;
      v132.i64[1] = 0x3000300030003;
      int16x8_t v134 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v133, v102), v132), (int16x8_t)0);
      int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v133, v113), v132), (int16x8_t)0);
      int8x16_t v136 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v133, v119), v132), (int16x8_t)0);
      int16x8_t v137 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v133, v126), v132), (int16x8_t)0);
      v138.i64[0] = 0x10001000100010;
      v138.i64[1] = 0x10001000100010;
      int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v133, v134);
      int8x16_t v140 = (int8x16_t)vsubq_s16((int16x8_t)v133, v135);
      int8x16_t v141 = (int8x16_t)vsubq_s16((int16x8_t)v133, (int16x8_t)v136);
      int8x16_t v142 = (int8x16_t)vsubq_s16((int16x8_t)v133, v137);
      int8x16_t v143 = (int8x16_t)vceqq_s16(vaddq_s16(v137, (int16x8_t)v136), vnegq_s16(vaddq_s16(v134, v135)));
      v136.i64[0] = 0x4000400040004;
      v136.i64[1] = 0x4000400040004;
      int8x16_t v144 = vbicq_s8(v136, v143);
      v145.i64[0] = 0x7000700070007;
      v145.i64[1] = 0x7000700070007;
      int16x8_t v146 = (int16x8_t)vandq_s8(v63, v64);
      int16x8_t v147 = vaddq_s16((int16x8_t)v81, (int16x8_t)v81);
      int16x8_t v148 = vmulq_s16((int16x8_t)v76, v145);
      int16x8_t v149 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v78, (int16x8_t)v77), (int16x8_t)v79), 3uLL);
      int16x8_t v150 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v146, v148), v149), v147), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v133, v131), vaddq_s16((int16x8_t)v144, (int16x8_t)v144)), (int16x8_t)v139, v145), vaddq_s16(vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v141, (int16x8_t)v140), (int16x8_t)v142), 3uLL), v138))), 0);
      v136.i16[0] = vaddvq_s16(v150);
      int v151 = v136.u16[0];
      unint64_t v67 = v85 | HIWORD(v87);
      if (v136.i16[0])
      {
        v152.i64[0] = 0x2000200020002;
        v152.i64[1] = 0x2000200020002;
        v153.i64[0] = 0xA000A000A000ALL;
        v153.i64[1] = 0xA000A000A000ALL;
        int8x16_t v154 = vbslq_s8(v131, v153, v152);
        v153.i64[0] = -1;
        v153.i64[1] = -1;
        int8x16_t v155 = vorrq_s8(v144, v154);
        v154.i64[0] = 0xF000F000F000FLL;
        v154.i64[1] = 0xF000F000F000FLL;
        int8x16_t v156 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v153, vsubq_s16((int16x8_t)v154, v129)), v123), v131);
        int8x16_t v157 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v150, 0xFuLL));
        int8x16_t v371 = vbslq_s8(v157, v375, v23);
        int8x16_t v372 = vbslq_s8(v157, v91, v24);
        int8x16_t v25 = vbslq_s8(v157, v92, v128);
        int8x16_t v76 = vbslq_s8(v157, v139, v76);
        int8x16_t v77 = vbslq_s8(v157, v140, v77);
        int16x8_t v158 = (int16x8_t)vbslq_s8(v157, v142, v79);
        int8x16_t v380 = vbslq_s8(v157, v156, v380);
        int8x16_t v65 = vbslq_s8(v157, v133, v65);
        int8x16_t v82 = vbslq_s8(v157, v155, v82);
        v159.i64[0] = 0x8000800080008;
        v159.i64[1] = 0x8000800080008;
        int16x8_t v147 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v82, (int16x8_t)v82), v159);
        int16x8_t v148 = vmulq_s16((int16x8_t)v76, v145);
        int8x16_t v373 = vbslq_s8(v157, v141, v78);
        int8x16_t v374 = (int8x16_t)v158;
        int8x16_t v376 = vbslq_s8(v157, v94, v103);
        int16x8_t v149 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v373, (int16x8_t)v77), v158), 3uLL);
      }
      else
      {
        int8x16_t v371 = v23;
        int8x16_t v372 = v24;
        int8x16_t v373 = v78;
        int8x16_t v374 = v79;
        int8x16_t v376 = v103;
        int8x16_t v25 = v128;
      }
      int16x4_t v162 = *(int16x4_t *)v378.i8;
      v163.i64[0] = 0x3000300030003;
      v163.i64[1] = 0x3000300030003;
      v164.i64[0] = 0x8000800080008000;
      v164.i64[1] = 0x8000800080008000;
      v165.i64[0] = 0x8000800080008000;
      v165.i64[1] = 0x8000800080008000;
      v166.i64[0] = 0x7000700070007;
      v166.i64[1] = 0x7000700070007;
      v167.i64[0] = 0x4000400040004;
      v167.i64[1] = 0x4000400040004;
      int16x8_t v168 = vsubq_s16((int16x8_t)v15, (int16x8_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_242EA7520));
      int8x16_t v169 = (int8x16_t)v377;
      v169.i16[7] = v15.i16[7];
      int8x16_t v170 = (int8x16_t)vsubq_s16(v377, (int16x8_t)vqtbl1q_s8(v169, (int8x16_t)xmmword_242EA7530));
      int8x16_t v171 = (int8x16_t)v379;
      v171.i16[7] = v15.i16[7];
      int8x16_t v172 = (int8x16_t)vsubq_s16(v379, (int16x8_t)vqtbl1q_s8(v171, (int8x16_t)xmmword_242EA7540));
      int8x16_t v173 = (int8x16_t)v378;
      v173.i16[7] = v15.i16[7];
      int16x8_t v174 = (int16x8_t)vqtbl1q_s8(v173, (int8x16_t)xmmword_242EA7550);
      int8x16_t v176 = (int8x16_t)v168;
      v176.i16[0] = v168.i16[7];
      int8x16_t v175 = (int8x16_t)vsubq_s16(v378, v174);
      v176.i16[7] = v168.i16[0];
      v168.i16[0] = vmaxvq_s16((int16x8_t)v176);
      int16x8_t v177 = vdupq_lane_s16(*(int16x4_t *)v168.i8, 0);
      v174.i16[0] = vminvq_s16((int16x8_t)v176);
      int16x8_t v178 = vdupq_lane_s16(*(int16x4_t *)v174.i8, 0);
      int16x8_t v179 = vmaxq_s16(v177, v164);
      int16x8_t v180 = vminq_s16(v178, v165);
      int16x8_t v181 = vzip1q_s16(v177, v178);
      int8x16_t v182 = (int8x16_t)vceqzq_s16(v181);
      v183.i64[0] = 0x10001000100010;
      v183.i64[1] = 0x10001000100010;
      int16x8_t v184 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v183, vclsq_s16(v181)), v182);
      int16x8_t v185 = vpmaxq_s16(v184, v184);
      v182.i16[0] = vmaxvq_s16((int16x8_t)v170);
      v162.i16[0] = vminvq_s16((int16x8_t)v170);
      int16x8_t v186 = vdupq_lane_s16(*(int16x4_t *)v182.i8, 0);
      int16x8_t v187 = vdupq_lane_s16(v162, 0);
      int16x8_t v188 = vmaxq_s16(v179, v186);
      int16x8_t v189 = vminq_s16(v180, v187);
      int16x8_t v190 = vzip1q_s16(v186, v187);
      int8x16_t v191 = (int8x16_t)vceqzq_s16(v190);
      int16x8_t v192 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v183, vclsq_s16(v190)), v191);
      v191.i16[0] = vmaxvq_s16((int16x8_t)v172);
      v164.i16[0] = vminvq_s16((int16x8_t)v172);
      int16x8_t v193 = vdupq_lane_s16(*(int16x4_t *)v191.i8, 0);
      int16x8_t v194 = vdupq_lane_s16(*(int16x4_t *)v164.i8, 0);
      int16x8_t v195 = vpmaxq_s16(v192, v192);
      int16x8_t v196 = vmaxq_s16(v188, v193);
      int16x8_t v197 = vminq_s16(v189, v194);
      int16x8_t v198 = vzip1q_s16(v193, v194);
      int8x16_t v199 = (int8x16_t)vceqzq_s16(v198);
      int16x8_t v200 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v183, vclsq_s16(v198)), v199);
      int16x8_t v201 = vpmaxq_s16(v200, v200);
      v199.i16[0] = vmaxvq_s16((int16x8_t)v175);
      int16x8_t v202 = vdupq_lane_s16(*(int16x4_t *)v199.i8, 0);
      v131.i16[0] = vminvq_s16((int16x8_t)v175);
      int16x8_t v203 = vdupq_lane_s16(*(int16x4_t *)v131.i8, 0);
      int16x8_t v204 = vmaxq_s16(v196, v202);
      int16x8_t v205 = vminq_s16(v197, v203);
      int16x8_t v206 = vzip1q_s16(v202, v203);
      int16x8_t v207 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v183, vclsq_s16(v206)), (int8x16_t)vceqzq_s16(v206));
      int16x8_t v208 = vpmaxq_s16(v207, v207);
      int8x16_t v209 = (int8x16_t)vmaxq_s16(vmaxq_s16(v185, v195), vmaxq_s16(v201, v208));
      int16x8_t v210 = vclzq_s16(vsubq_s16(v204, v205));
      int8x16_t v211 = (int8x16_t)vsubq_s16(v183, v210);
      int8x16_t v212 = (int8x16_t)vcgtq_s16((int16x8_t)v209, (int16x8_t)v211);
      int8x16_t v213 = vbslq_s8(v212, v211, v209);
      int16x8_t v214 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v213, v185), v163), (int16x8_t)0);
      int16x8_t v215 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v213, v195), v163), (int16x8_t)0);
      int16x8_t v216 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v213, v201), v163), (int16x8_t)0);
      int16x8_t v217 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v213, v208), v163), (int16x8_t)0);
      int8x16_t v218 = (int8x16_t)vsubq_s16((int16x8_t)v213, v214);
      int8x16_t v219 = (int8x16_t)vsubq_s16((int16x8_t)v213, v215);
      int8x16_t v220 = (int8x16_t)vsubq_s16((int16x8_t)v213, v216);
      int8x16_t v221 = (int8x16_t)vsubq_s16((int16x8_t)v213, v217);
      int8x16_t v222 = vbicq_s8(v167, (int8x16_t)vceqq_s16(vaddq_s16(v217, v216), vnegq_s16(vaddq_s16(v214, v215))));
      int16x8_t v223 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v211, v212), vaddq_s16((int16x8_t)v222, (int16x8_t)v222)), (int16x8_t)v218, v166), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v220, (int16x8_t)v219), (int16x8_t)v221), 3uLL));
      v211.i64[0] = 0x8000800080008;
      v211.i64[1] = 0x8000800080008;
      v224.i64[0] = 0x2000200020002;
      v224.i64[1] = 0x2000200020002;
      int16x8_t v225 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v65, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v82, v211))), v147), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v82, (int8x16_t)v163), (int16x8_t)v224), (int8x16_t)v183), v148)), v149), v223), 0);
      v211.i16[0] = vaddvq_s16(v225);
      int v226 = v211.u16[0];
      if (v211.i16[0])
      {
        int8x16_t v227 = vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v213), v224);
        v228.i64[0] = 0x9000900090009;
        v228.i64[1] = 0x9000900090009;
        v229.i64[0] = -1;
        v229.i64[1] = -1;
        int8x16_t v230 = vorrq_s8(vorrq_s8(v227, (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v212, v228), (int16x8_t)vmvnq_s8(v212))), v222);
        v227.i64[0] = 0xF000F000F000FLL;
        v227.i64[1] = 0xF000F000F000FLL;
        int8x16_t v231 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v229, vsubq_s16((int16x8_t)v227, v210)), v205), v212);
        int8x16_t v232 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v225, 0xFuLL));
        v22.i16[0] = vbslq_s8(v232, vextq_s8(v15, v15, 0xEuLL), v22).u16[0];
        int8x16_t v23 = vbslq_s8(v232, v176, v371);
        int8x16_t v24 = vbslq_s8(v232, v170, v372);
        int8x16_t v25 = vbslq_s8(v232, v172, v25);
        int16x8_t v26 = (int16x8_t)vbslq_s8(v232, v175, v376);
        int8x16_t v76 = vbslq_s8(v232, v218, v76);
        int8x16_t v77 = vbslq_s8(v232, v219, v77);
        int8x16_t v78 = vbslq_s8(v232, v220, v373);
        int8x16_t v79 = vbslq_s8(v232, v221, v374);
        int8x16_t v70 = vbslq_s8(v232, v231, v380);
        int8x16_t v65 = vbslq_s8(v232, v213, v65);
        int8x16_t v82 = vbslq_s8(v232, v230, v82);
      }
      else
      {
        int8x16_t v79 = v374;
        int16x8_t v26 = (int16x8_t)v376;
        int8x16_t v70 = v380;
        int8x16_t v24 = v372;
        int8x16_t v78 = v373;
        int8x16_t v23 = v371;
      }
      int16x8_t v21 = v378;
      int16x8_t v16 = v379;
      int16x8_t v20 = v377;
      if (v151) {
        BOOL v233 = v226 == 0;
      }
      else {
        BOOL v233 = 0;
      }
      char v66 = v233;
    }
    v234.i64[0] = 0x8000800080008;
    v234.i64[1] = 0x8000800080008;
    int16x8_t v235 = (int16x8_t)vandq_s8(v82, v234);
    v236.i64[0] = 0x3000300030003;
    v236.i64[1] = 0x3000300030003;
    v237.i64[0] = 0x2000200020002;
    v237.i64[1] = 0x2000200020002;
    int8x16_t v238 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v82, v236), v237);
    v237.i64[0] = 0x10001000100010;
    v237.i64[1] = 0x10001000100010;
    if ((unint64_t)((__int16)(vbicq_s8(v65, (int8x16_t)vceqzq_s16(v235)).u16[0]
                                    + ((2 * v82.i16[0]) & 8)
                                    + vandq_s8(v238, (int8x16_t)v237).u16[0]
                                    - v76.i16[0]
                                    + 8 * v76.i16[0]
                                    + 8 * vaddq_s16((int16x8_t)v78, vaddq_s16((int16x8_t)v77, (int16x8_t)v79)).u16[0])
                          + 29) >= 0x200)
    {
      *a1 = v15;
      a1[1] = (int8x16_t)v20;
      char v160 = 63;
      unint64_t v161 = 64;
      a1[2] = (int8x16_t)v16;
      a1[3] = (int8x16_t)v21;
    }
    else
    {
      int8x16_t v239 = (void *)((unint64_t)a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v240 = 8 * (a1 & 7);
      if (v240) {
        uint64_t v241 = *v239 & ~(-1 << v240);
      }
      else {
        uint64_t v241 = 0;
      }
      if (v65.i16[0]) {
        uint64_t v242 = (16 * v65.i8[0] - 16) & 0xF0;
      }
      else {
        uint64_t v242 = 0;
      }
      *a2 = v82.i8[0] << 6;
      unint64_t v243 = (v242 & 0xFFFFFFFFFF0000F0 | ((unint64_t)v22.u16[0] << 8) | v82.i8[0] & 0xF) >> 2;
      unint64_t v244 = (v243 << v240) | v241;
      if (v240 >= 0x2A)
      {
        *int8x16_t v239 = v244;
        unint64_t v244 = v243 >> (-8 * (a1 & 7u));
      }
      unint64_t v245 = v240 + 22;
      int8x16_t v246 = (int8x16_t)vsubq_s16((int16x8_t)v65, (int16x8_t)v76);
      int8x16_t v247 = (int8x16_t)vsubq_s16((int16x8_t)v65, (int16x8_t)v77);
      int8x16_t v248 = (int8x16_t)vsubq_s16((int16x8_t)v65, (int16x8_t)v78);
      int8x16_t v249 = (int8x16_t)vsubq_s16((int16x8_t)v65, (int16x8_t)v79);
      *(uint8x8_t *)v246.i8 = vqmovn_u16((uint16x8_t)v246);
      *(uint8x8_t *)v247.i8 = vqmovn_u16((uint16x8_t)v247);
      *(uint8x8_t *)v248.i8 = vqmovn_u16((uint16x8_t)v248);
      *(uint8x8_t *)v249.i8 = vqmovn_u16((uint16x8_t)v249);
      v246.i32[0] = vzip1q_s16((int16x8_t)vzip1q_s8(v246, v247), (int16x8_t)vzip1q_s8(v248, v249)).u32[0];
      v248.i64[0] = 0x202020202020202;
      v248.i64[1] = 0x202020202020202;
      int8x16_t v250 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v82.i8, (int8x8_t)0x4000400040004)))), v248);
      v248.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v248.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v249.i64[0] = -1;
      v249.i64[1] = -1;
      uint8x16_t v251 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v249, (uint8x16_t)vorrq_s8(v250, v248)), (int8x16_t)v246.u32[0]);
      int16x8_t v252 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v250.i8);
      uint16x8_t v253 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v251.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v252)), (int16x8_t)vmovl_high_u8(v251));
      uint16x8_t v254 = (uint16x8_t)vpaddq_s16(v252, (int16x8_t)vmovl_high_u8((uint8x16_t)v250));
      int32x4_t v255 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v254.i8);
      int32x4_t v256 = (int32x4_t)vmovl_high_u16(v254);
      int32x4_t v257 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v253.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v255)), (int32x4_t)vshlq_u32(vmovl_high_u16(v253), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v256)));
      int32x4_t v258 = vpaddq_s32(v255, v256);
      v259.i64[0] = v257.u32[0];
      v259.i64[1] = v257.u32[1];
      uint64x2_t v260 = (uint64x2_t)v259;
      v259.i64[0] = v257.u32[2];
      v259.i64[1] = v257.u32[3];
      uint64x2_t v261 = (uint64x2_t)v259;
      v259.i64[0] = v258.u32[0];
      v259.i64[1] = v258.u32[1];
      int64x2_t v262 = v259;
      v259.i64[0] = v258.u32[2];
      v259.i64[1] = v258.u32[3];
      int64x2_t v263 = vpaddq_s64((int64x2_t)vshlq_u64(v260, (uint64x2_t)vzip1q_s64((int64x2_t)0, v262)), (int64x2_t)vshlq_u64(v261, (uint64x2_t)vzip1q_s64((int64x2_t)0, v259)));
      int64x2_t v264 = vpaddq_s64(v262, v259);
      uint64_t v265 = (v240 + 22) & 0x3E;
      unint64_t v266 = (v263.i64[0] << v265) | v244;
      if ((unint64_t)(v264.i64[0] + v265) >= 0x40)
      {
        *(void *)((char *)v239 + ((v245 >> 3) & 8)) = v266;
        unint64_t v266 = (unint64_t)v263.i64[0] >> -(char)v265;
      }
      unint64_t v267 = v264.i64[0] + v245;
      unint64_t v268 = v266 | (v263.i64[1] << v267);
      if ((v267 & 0x3F) + v264.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v267 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v268;
        unint64_t v268 = (unint64_t)v263.i64[1] >> -(v267 & 0x3F);
        if ((v267 & 0x3F) == 0) {
          unint64_t v268 = 0;
        }
      }
      int8x16_t v269 = (int8x16_t)vceqq_s16((int16x8_t)v65, (int16x8_t)v76);
      unint64_t v270 = v267 + v264.i64[1];
      v271.i64[0] = -1;
      v271.i64[1] = -1;
      int16x8_t v272 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16(v235, v235), (int8x16_t)0, 0xEuLL), v65);
      v273.i64[0] = 0xF000F000F000FLL;
      v273.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v274 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v271, (uint16x8_t)vaddq_s16(v272, v273)), v70);
      int32x4_t v275 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v272.i8);
      int32x4_t v276 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v274.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v275)), (int32x4_t)vmovl_high_u16(v274));
      int32x4_t v277 = vpaddq_s32(v275, (int32x4_t)vmovl_high_u16((uint16x8_t)v272));
      v278.i64[0] = v276.u32[0];
      v278.i64[1] = v276.u32[1];
      uint64x2_t v279 = (uint64x2_t)v278;
      v278.i64[0] = v276.u32[2];
      v278.i64[1] = v276.u32[3];
      uint64x2_t v280 = (uint64x2_t)v278;
      v278.i64[0] = v277.u32[0];
      v278.i64[1] = v277.u32[1];
      int64x2_t v281 = v278;
      v278.i64[0] = v277.u32[2];
      v278.i64[1] = v277.u32[3];
      int64x2_t v282 = vpaddq_s64((int64x2_t)vshlq_u64(v279, (uint64x2_t)vzip1q_s64((int64x2_t)0, v281)), (int64x2_t)vshlq_u64(v280, (uint64x2_t)vzip1q_s64((int64x2_t)0, v278)));
      int64x2_t v283 = vpaddq_s64(v281, v278);
      unint64_t v284 = (v282.i64[0] << v270) | v268;
      if (v283.i64[0] + (v270 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v239 + ((v270 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v284;
        unint64_t v284 = (unint64_t)v282.i64[0] >> -(v270 & 0x3F);
        if ((v270 & 0x3F) == 0) {
          unint64_t v284 = 0;
        }
      }
      int16x8_t v285 = (int16x8_t)vandq_s8(v70, v269);
      uint64_t v286 = v283.i64[1];
      unint64_t v287 = v283.i64[0] + v270;
      unint64_t v288 = v284 | (v282.i64[1] << v287);
      if ((v287 & 0x3F) + v283.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v287 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v288;
        unint64_t v288 = (unint64_t)v282.i64[1] >> -(v287 & 0x3F);
        if ((v287 & 0x3F) == 0) {
          unint64_t v288 = 0;
        }
      }
      int8x16_t v289 = (int8x16_t)vceqq_s16((int16x8_t)v65, (int16x8_t)v77);
      int8x16_t v290 = (int8x16_t)vaddq_s16(v285, (int16x8_t)v23);
      unint64_t v291 = v287 + v286;
      if (v66)
      {
        v288 |= v67 << v291;
        if ((v291 & 0x3F) >= 0x30)
        {
          *(void *)((char *)v239 + ((v291 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v288;
          unint64_t v288 = v67 >> -(v291 & 0x3F);
        }
        v291 += 16;
      }
      int16x8_t v292 = (int16x8_t)vandq_s8(v70, v289);
      int16x8_t v293 = (int16x8_t)vextq_s8((int8x16_t)0, v76, 0xEuLL);
      v294.i64[0] = 0xF000F000F000FLL;
      v294.i64[1] = 0xF000F000F000FLL;
      v295.i64[0] = -1;
      v295.i64[1] = -1;
      uint16x8_t v296 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v295, (uint16x8_t)vaddq_s16(v293, v294)), v290);
      int32x4_t v297 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v293.i8);
      int32x4_t v298 = (int32x4_t)vmovl_high_u16((uint16x8_t)v293);
      int32x4_t v299 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v296.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v297)), (int32x4_t)vshlq_u32(vmovl_high_u16(v296), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v298)));
      int32x4_t v300 = vpaddq_s32(v297, v298);
      v301.i64[0] = v299.u32[0];
      v301.i64[1] = v299.u32[1];
      uint64x2_t v302 = (uint64x2_t)v301;
      v301.i64[0] = v299.u32[2];
      v301.i64[1] = v299.u32[3];
      uint64x2_t v303 = (uint64x2_t)v301;
      v301.i64[0] = v300.u32[0];
      v301.i64[1] = v300.u32[1];
      int64x2_t v304 = v301;
      v301.i64[0] = v300.u32[2];
      v301.i64[1] = v300.u32[3];
      int64x2_t v305 = vpaddq_s64((int64x2_t)vshlq_u64(v302, (uint64x2_t)vzip1q_s64((int64x2_t)0, v304)), (int64x2_t)vshlq_u64(v303, (uint64x2_t)vzip1q_s64((int64x2_t)0, v301)));
      int64x2_t v306 = vpaddq_s64(v304, v301);
      unint64_t v307 = (v305.i64[0] << v291) | v288;
      if (v306.i64[0] + (v291 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v239 + ((v291 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v307;
        unint64_t v307 = (unint64_t)v305.i64[0] >> -(v291 & 0x3F);
        if ((v291 & 0x3F) == 0) {
          unint64_t v307 = 0;
        }
      }
      int8x16_t v308 = (int8x16_t)vceqq_s16((int16x8_t)v65, (int16x8_t)v78);
      int8x16_t v309 = (int8x16_t)vaddq_s16((int16x8_t)v24, v292);
      unint64_t v310 = v306.i64[0] + v291;
      uint64_t v311 = (v306.i64[0] + v291) & 0x3F;
      unint64_t v312 = v307 | (v305.i64[1] << v310);
      if ((v310 & 0x3F) + v306.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v310 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v312;
        unint64_t v312 = (unint64_t)v305.i64[1] >> -(char)v311;
        if (!v311) {
          unint64_t v312 = 0;
        }
      }
      int16x8_t v313 = (int16x8_t)vandq_s8(v70, v308);
      unint64_t v314 = v310 + v306.i64[1];
      v315.i64[0] = 0xF000F000F000FLL;
      v315.i64[1] = 0xF000F000F000FLL;
      v316.i64[0] = -1;
      v316.i64[1] = -1;
      uint16x8_t v317 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v316, (uint16x8_t)vaddq_s16((int16x8_t)v77, v315)), v309);
      int32x4_t v318 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8);
      int32x4_t v319 = (int32x4_t)vmovl_high_u16((uint16x8_t)v77);
      int32x4_t v320 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v317.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v318)), (int32x4_t)vshlq_u32(vmovl_high_u16(v317), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v319)));
      int32x4_t v321 = vpaddq_s32(v318, v319);
      v322.i64[0] = v320.u32[0];
      v322.i64[1] = v320.u32[1];
      uint64x2_t v323 = (uint64x2_t)v322;
      v322.i64[0] = v320.u32[2];
      v322.i64[1] = v320.u32[3];
      uint64x2_t v324 = (uint64x2_t)v322;
      v322.i64[0] = v321.u32[0];
      v322.i64[1] = v321.u32[1];
      int64x2_t v325 = v322;
      v322.i64[0] = v321.u32[2];
      v322.i64[1] = v321.u32[3];
      int64x2_t v326 = vpaddq_s64((int64x2_t)vshlq_u64(v323, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)), (int64x2_t)vshlq_u64(v324, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)));
      int64x2_t v327 = vpaddq_s64(v325, v322);
      unint64_t v328 = (v326.i64[0] << v314) | v312;
      if (v327.i64[0] + (v314 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v239 + ((v314 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v328;
        unint64_t v328 = (unint64_t)v326.i64[0] >> -(v314 & 0x3F);
        if ((v314 & 0x3F) == 0) {
          unint64_t v328 = 0;
        }
      }
      int8x16_t v329 = (int8x16_t)vceqq_s16((int16x8_t)v65, (int16x8_t)v79);
      int8x16_t v330 = (int8x16_t)vaddq_s16((int16x8_t)v25, v313);
      unint64_t v331 = v327.i64[0] + v314;
      unint64_t v332 = v328 | (v326.i64[1] << v331);
      if ((v331 & 0x3F) + v327.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v332;
        unint64_t v332 = (unint64_t)v326.i64[1] >> -(v331 & 0x3F);
        if ((v331 & 0x3F) == 0) {
          unint64_t v332 = 0;
        }
      }
      int16x8_t v333 = (int16x8_t)vandq_s8(v70, v329);
      unint64_t v334 = v331 + v327.i64[1];
      v335.i64[0] = 0xF000F000F000FLL;
      v335.i64[1] = 0xF000F000F000FLL;
      v336.i64[0] = -1;
      v336.i64[1] = -1;
      uint16x8_t v337 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v336, (uint16x8_t)vaddq_s16((int16x8_t)v78, v335)), v330);
      int32x4_t v338 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v78.i8);
      int32x4_t v339 = (int32x4_t)vmovl_high_u16((uint16x8_t)v78);
      int32x4_t v340 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v337.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v338)), (int32x4_t)vshlq_u32(vmovl_high_u16(v337), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v339)));
      int32x4_t v341 = vpaddq_s32(v338, v339);
      v342.i64[0] = v340.u32[0];
      v342.i64[1] = v340.u32[1];
      uint64x2_t v343 = (uint64x2_t)v342;
      v342.i64[0] = v340.u32[2];
      v342.i64[1] = v340.u32[3];
      uint64x2_t v344 = (uint64x2_t)v342;
      v342.i64[0] = v341.u32[0];
      v342.i64[1] = v341.u32[1];
      int64x2_t v345 = v342;
      v342.i64[0] = v341.u32[2];
      v342.i64[1] = v341.u32[3];
      int64x2_t v346 = vpaddq_s64((int64x2_t)vshlq_u64(v343, (uint64x2_t)vzip1q_s64((int64x2_t)0, v345)), (int64x2_t)vshlq_u64(v344, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)));
      int64x2_t v347 = vpaddq_s64(v345, v342);
      unint64_t v348 = (v346.i64[0] << v334) | v332;
      if (v347.i64[0] + (v334 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v239 + ((v334 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        unint64_t v348 = (unint64_t)v346.i64[0] >> -(v334 & 0x3F);
        if ((v334 & 0x3F) == 0) {
          unint64_t v348 = 0;
        }
      }
      int8x16_t v349 = (int8x16_t)vaddq_s16(v26, v333);
      unint64_t v350 = v347.i64[0] + v334;
      unint64_t v351 = v348 | (v346.i64[1] << v350);
      if ((v350 & 0x3F) + v347.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v351;
        unint64_t v351 = (unint64_t)v346.i64[1] >> -(v350 & 0x3F);
        if ((v350 & 0x3F) == 0) {
          unint64_t v351 = 0;
        }
      }
      unint64_t v352 = v350 + v347.i64[1];
      v353.i64[0] = 0xF000F000F000FLL;
      v353.i64[1] = 0xF000F000F000FLL;
      v354.i64[0] = -1;
      v354.i64[1] = -1;
      uint16x8_t v355 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v354, (uint16x8_t)vaddq_s16((int16x8_t)v79, v353)), v349);
      int32x4_t v356 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v79.i8);
      int32x4_t v357 = (int32x4_t)vmovl_high_u16((uint16x8_t)v79);
      int32x4_t v358 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v355.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v356)), (int32x4_t)vshlq_u32(vmovl_high_u16(v355), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v357)));
      int32x4_t v359 = vpaddq_s32(v356, v357);
      v360.i64[0] = v358.u32[0];
      v360.i64[1] = v358.u32[1];
      uint64x2_t v361 = (uint64x2_t)v360;
      v360.i64[0] = v358.u32[2];
      v360.i64[1] = v358.u32[3];
      uint64x2_t v362 = (uint64x2_t)v360;
      v360.i64[0] = v359.u32[0];
      v360.i64[1] = v359.u32[1];
      int64x2_t v363 = v360;
      v360.i64[0] = v359.u32[2];
      v360.i64[1] = v359.u32[3];
      int64x2_t v364 = vpaddq_s64((int64x2_t)vshlq_u64(v361, (uint64x2_t)vzip1q_s64((int64x2_t)0, v363)), (int64x2_t)vshlq_u64(v362, (uint64x2_t)vzip1q_s64((int64x2_t)0, v360)));
      int64x2_t v365 = vpaddq_s64(v363, v360);
      unint64_t v366 = (v364.i64[0] << v352) | v351;
      if (v365.i64[0] + (v352 & 0x3F) > 0x3F)
      {
        *(void *)((char *)v239 + ((v352 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v366;
        if ((v352 & 0x3F) != 0) {
          unint64_t v366 = (unint64_t)v364.i64[0] >> -(v352 & 0x3F);
        }
        else {
          unint64_t v366 = 0;
        }
      }
      unint64_t v367 = v365.i64[0] + v352;
      unint64_t v368 = v366 | (v364.i64[1] << v367);
      if ((v367 & 0x3F) + v365.i64[1] >= 0x40)
      {
        *(void *)((char *)v239 + ((v367 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v368;
        unint64_t v368 = (unint64_t)v364.i64[1] >> -(v367 & 0x3F);
        if ((v367 & 0x3F) == 0) {
          unint64_t v368 = 0;
        }
      }
      unint64_t v369 = v367 + v365.i64[1];
      if ((v369 & 0x3F) != 0) {
        *(void *)((char *)v239 + ((v369 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v368;
      }
      unint64_t v161 = (v369 - v240 + 7) >> 3;
      char v160 = *a2 | (v161 - 1);
    }
  }
  else
  {
    a1->i16[0] = a3->i16[0];
    char v160 = 1;
    unint64_t v161 = 2;
  }
  *a2 = v160;
  return v161;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(unint64_t result, uint64_t a2, int8x16_t *a3, char *a4, int a5, int a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, int16x4_t a14)
{
  int8x16_t v17 = a3;
  int32x4_t v19 = (int32x4_t *)result;
  if (a5 >= 8) {
    unsigned int v20 = 8;
  }
  else {
    unsigned int v20 = a5;
  }
  if (a6 >= 4) {
    unsigned int v21 = 4;
  }
  else {
    unsigned int v21 = a6;
  }
  if (v20 && v21)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(a3, a4, (int32x4_t *)result, a2, v20, v21, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
  }
  else
  {
    *a4 = 0;
  }
  int8x16_t v22 = a4 + 1;
  if (a5 <= 8) {
    int v23 = 8;
  }
  else {
    int v23 = a5;
  }
  unsigned int v24 = v23 - 8;
  if (v24 >= 8) {
    int v25 = 8;
  }
  else {
    int v25 = v24;
  }
  if (v25 && v21)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v22, v19 + 1, a2, v25, v21, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
  }
  else
  {
    *int8x16_t v22 = 0;
  }
  uint64_t v26 = 4 * a2;
  int16x8_t v27 = a4 + 2;
  if (a6 <= 4) {
    int v28 = 4;
  }
  else {
    int v28 = a6;
  }
  unsigned int v29 = v28 - 4;
  if (v29 >= 4) {
    int v30 = 4;
  }
  else {
    int v30 = v29;
  }
  if (v20 && v30)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v27, (int32x4_t *)((char *)v19 + v26), a2, v20, v30, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
    int16x8_t v31 = a4 + 3;
    if (!v25) {
      goto LABEL_34;
    }
  }
  else
  {
    *int16x8_t v27 = 0;
    int16x8_t v31 = a4 + 3;
    if (!v25) {
      goto LABEL_34;
    }
  }
  if (v30)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v31, (int32x4_t *)((char *)v19 + v26 + 16), a2, v25, v30, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
    goto LABEL_35;
  }
LABEL_34:
  *int16x8_t v31 = 0;
LABEL_35:
  int16x8_t v32 = a4 + 4;
  if (a6 <= 8) {
    int v33 = 8;
  }
  else {
    int v33 = a6;
  }
  unsigned int v34 = v33 - 8;
  if (v34 >= 4) {
    int v35 = 4;
  }
  else {
    int v35 = v34;
  }
  if (v20 && v35)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v32, (int32x4_t *)((char *)v19 + 8 * a2), a2, v20, v35, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
    int16x8_t v36 = a4 + 5;
    if (!v25) {
      goto LABEL_48;
    }
  }
  else
  {
    *int16x8_t v32 = 0;
    int16x8_t v36 = a4 + 5;
    if (!v25) {
      goto LABEL_48;
    }
  }
  if (v35)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v36, (int32x4_t *)((char *)v19 + 8 * a2 + 16), a2, v25, v35, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
    goto LABEL_49;
  }
LABEL_48:
  *int16x8_t v36 = 0;
LABEL_49:
  int16x8_t v37 = a4 + 6;
  if (a6 <= 12) {
    int v38 = 12;
  }
  else {
    int v38 = a6;
  }
  unsigned int v39 = v38 - 12;
  if (v39 >= 4) {
    int v40 = 4;
  }
  else {
    int v40 = v39;
  }
  if (v20 && v40)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v37, (int32x4_t *)((char *)v19 + 12 * a2), a2, v20, v40, a7, a8, a9, a10, a11, a12, a13, a14);
    int8x16_t v17 = (int8x16_t *)((char *)v17 + result);
    int16x8_t v41 = a4 + 7;
    if (!v25) {
      goto LABEL_64;
    }
  }
  else
  {
    *int16x8_t v37 = 0;
    int16x8_t v41 = a4 + 7;
    if (!v25)
    {
LABEL_64:
      *int16x8_t v41 = 0;
      return result;
    }
  }
  if (!v40) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v17, v41, (int32x4_t *)((char *)v19 + 12 * a2 + 16), a2, v25, v40, a7, a8, a9, a10, a11, a12, a13, a14);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(uint64_t a1, unsigned char *a2, int32x4_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  int32x4_t v13 = *(int32x4_t *)((char *)a3 + a4);
  int8x16_t v14 = (int8x16_t)vzip1q_s32(*a3, v13);
  int16x8_t v15 = (int16x8_t)vzip2q_s32(*a3, v13);
  int16x8_t v16 = (int32x4_t *)((char *)a3 + 2 * a4);
  int32x4_t v17 = *v16;
  int32x4_t v18 = *(int32x4_t *)((char *)v16 + a4);
  int16x8_t v19 = (int16x8_t)vzip1q_s32(*v16, v18);
  int16x8_t v20 = (int16x8_t)vzip2q_s32(*v16, v18);
  int8x16_t v21 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v14.i8, 0);
  int16x8_t v22 = vsubq_s16((int16x8_t)v14, (int16x8_t)v21);
  int16x8_t v23 = vsubq_s16(v19, (int16x8_t)v21);
  int8x16_t v24 = (int8x16_t)vsubq_s16(v15, (int16x8_t)v21);
  int8x16_t v25 = (int8x16_t)vsubq_s16(v20, (int16x8_t)v21);
  v17.i16[0] = vmaxvq_s16(v22);
  v18.i16[0] = vminvq_s16(v22);
  int16x8_t v26 = vdupq_lane_s16(*(int16x4_t *)v17.i8, 0);
  int16x8_t v27 = vdupq_lane_s16(*(int16x4_t *)v18.i8, 0);
  v28.i64[0] = 0x8000800080008000;
  v28.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v26, v28);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  int16x8_t v31 = vminq_s16(v27, v30);
  int16x8_t v32 = vzip1q_s16(v26, v27);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v32);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v32)), v33);
  v33.i16[0] = vmaxvq_s16(v23);
  a12.i16[0] = vminvq_s16(v23);
  int16x8_t v36 = vdupq_lane_s16(*(int16x4_t *)v33.i8, 0);
  int16x8_t v37 = vdupq_lane_s16(a12, 0);
  int16x8_t v38 = vpmaxq_s16(v35, v35);
  int16x8_t v39 = vmaxq_s16(v29, v36);
  int16x8_t v40 = vminq_s16(v31, v37);
  int16x8_t v41 = vzip1q_s16(v36, v37);
  int16x8_t v42 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v41)), (int8x16_t)vceqzq_s16(v41));
  int16x8_t v43 = vpmaxq_s16(v42, v42);
  v42.i16[0] = vmaxvq_s16((int16x8_t)v24);
  int16x8_t v44 = vdupq_lane_s16(*(int16x4_t *)v42.i8, 0);
  v36.i16[0] = vminvq_s16((int16x8_t)v24);
  int16x8_t v45 = vdupq_lane_s16(*(int16x4_t *)v36.i8, 0);
  int16x8_t v46 = vmaxq_s16(v39, v44);
  int16x8_t v47 = vminq_s16(v40, v45);
  int16x8_t v48 = vzip1q_s16(v44, v45);
  int8x16_t v49 = (int8x16_t)vceqzq_s16(v48);
  int16x8_t v50 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v48)), v49);
  int16x8_t v51 = vpmaxq_s16(v50, v50);
  v49.i16[0] = vmaxvq_s16((int16x8_t)v25);
  v45.i16[0] = vminvq_s16((int16x8_t)v25);
  int16x8_t v52 = vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
  int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)v45.i8, 0);
  int16x8_t v54 = vmaxq_s16(v46, v52);
  int16x8_t v55 = vminq_s16(v47, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int8x16_t v59 = (int8x16_t)vmaxq_s16(vmaxq_s16(v38, v43), vmaxq_s16(v51, v58));
  int16x8_t v60 = vclzq_s16(vsubq_s16(v54, v55));
  int8x16_t v61 = (int8x16_t)vsubq_s16(v34, v60);
  int8x16_t v62 = (int8x16_t)vcgtq_s16((int16x8_t)v59, (int16x8_t)v61);
  int8x16_t v63 = vbslq_s8(v62, v61, v59);
  if (vmaxvq_s16((int16x8_t)v63))
  {
    char v64 = 0;
    unint64_t v65 = 0;
    v66.i64[0] = -1;
    v66.i64[1] = -1;
    v67.i64[0] = 0xF000F000F000FLL;
    v67.i64[1] = 0xF000F000F000FLL;
    int8x16_t v68 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v66, vsubq_s16(v67, v60)), v55), v62);
    v69.i64[0] = 0x8000800080008;
    v69.i64[1] = 0x8000800080008;
    v66.i64[0] = 0x3000300030003;
    v66.i64[1] = 0x3000300030003;
    int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v38), v66), (int16x8_t)0);
    int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v43), v66), (int16x8_t)0);
    int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v51), v66), (int16x8_t)0);
    int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v58), v66), (int16x8_t)0);
    int8x16_t v74 = (int8x16_t)vsubq_s16((int16x8_t)v63, v70);
    int8x16_t v75 = (int8x16_t)vsubq_s16((int16x8_t)v63, v71);
    int8x16_t v76 = (int8x16_t)vsubq_s16((int16x8_t)v63, v72);
    int16x8_t v77 = vsubq_s16((int16x8_t)v63, (int16x8_t)v73);
    int8x16_t v78 = (int8x16_t)vceqq_s16(vaddq_s16((int16x8_t)v73, v72), vnegq_s16(vaddq_s16(v70, v71)));
    v73.i64[0] = 0x4000400040004;
    v73.i64[1] = 0x4000400040004;
    int8x16_t v79 = vbicq_s8(v73, v78);
    int8x16_t v80 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v63), (int8x16_t)v66), vandq_s8(v62, v69)), v79);
    if (a5 >= 4 && a6 >= 2)
    {
      int16x8_t v369 = v15;
      int16x8_t v370 = v20;
      int8x16_t v373 = v68;
      v81.i32[0] = v14.u16[2];
      v81.i32[1] = v14.u16[1];
      int32x2_t v82 = vshl_n_s32(vsub_s32(v81, vdup_n_s32(v14.u16[0])), 0x18uLL);
      int v83 = v82.i32[1] >> 24;
      int16x4_t v84 = (int16x4_t)vshl_s32(v82, (int32x2_t)0xFFFFFFEAFFFFFFE9);
      unsigned __int32 v85 = v82.i32[0];
      v86.i64[0] = 0xFFFFFFFF00000000;
      v86.i64[1] = 0xFFFFFFFF00000000;
      int16x8_t v87 = vmlaq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v82.i32[0] >> 24), v86), vdupq_n_s16(v82.i32[1] >> 24), (int16x8_t)xmmword_242EA76B0);
      int8x16_t v88 = (int8x16_t)vsubq_s16(v22, v87);
      int8x16_t v371 = (int8x16_t)v22;
      int8x16_t v372 = (int8x16_t)v23;
      int8x16_t v89 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[0]), v23), v87);
      int8x16_t v90 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[1]), (int16x8_t)v24), v87);
      int16x8_t v91 = vaddq_s16(vdupq_n_s16(-v84.i32[0] - v84.i32[1]), (int16x8_t)v25);
      int8x16_t v92 = (int8x16_t)vsubq_s16(v91, v87);
      v91.i16[0] = vmaxvq_s16((int16x8_t)v88);
      v84.i16[0] = vminvq_s16((int16x8_t)v88);
      int16x8_t v93 = vdupq_lane_s16(*(int16x4_t *)v91.i8, 0);
      int16x8_t v94 = vdupq_lane_s16(v84, 0);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v96 = vmaxq_s16(v93, v95);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v97 = vminq_s16(v94, v95);
      int16x8_t v98 = vzip1q_s16(v93, v94);
      int8x16_t v99 = (int8x16_t)vceqzq_s16(v98);
      v100.i64[0] = 0x10001000100010;
      v100.i64[1] = 0x10001000100010;
      int16x8_t v101 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v98)), v99);
      int16x8_t v102 = vpmaxq_s16(v101, v101);
      v99.i16[0] = vmaxvq_s16((int16x8_t)v89);
      v71.i16[0] = vminvq_s16((int16x8_t)v89);
      int16x8_t v103 = vdupq_lane_s16(*(int16x4_t *)v99.i8, 0);
      int16x8_t v104 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
      int16x8_t v105 = vmaxq_s16(v96, v103);
      int16x8_t v106 = vminq_s16(v97, v104);
      int16x8_t v107 = vzip1q_s16(v103, v104);
      int8x16_t v108 = (int8x16_t)vceqzq_s16(v107);
      int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v107)), v108);
      v108.i16[0] = vmaxvq_s16((int16x8_t)v90);
      v12.i16[0] = vminvq_s16((int16x8_t)v90);
      int16x8_t v110 = vdupq_lane_s16(*(int16x4_t *)v108.i8, 0);
      int16x8_t v111 = vdupq_lane_s16(v12, 0);
      int16x8_t v112 = vpmaxq_s16(v109, v109);
      int16x8_t v113 = vmaxq_s16(v105, v110);
      int16x8_t v114 = vminq_s16(v106, v111);
      int16x8_t v115 = vzip1q_s16(v110, v111);
      int8x16_t v116 = (int8x16_t)vceqzq_s16(v115);
      int16x8_t v117 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v115)), v116);
      int8x16_t v118 = (int8x16_t)v77;
      int16x8_t v119 = vpmaxq_s16(v117, v117);
      v117.i16[0] = vmaxvq_s16((int16x8_t)v92);
      int16x8_t v120 = vdupq_lane_s16(*(int16x4_t *)v117.i8, 0);
      v116.i16[0] = vminvq_s16((int16x8_t)v92);
      int16x8_t v121 = vdupq_lane_s16(*(int16x4_t *)v116.i8, 0);
      int16x8_t v122 = vmaxq_s16(v113, v120);
      int16x8_t v123 = vminq_s16(v114, v121);
      int16x8_t v124 = vzip1q_s16(v120, v121);
      int16x8_t v125 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v124)), (int8x16_t)vceqzq_s16(v124));
      int16x8_t v126 = vpmaxq_s16(v125, v125);
      int8x16_t v127 = (int8x16_t)vmaxq_s16(vmaxq_s16(v102, v112), vmaxq_s16(v119, v126));
      int16x8_t v128 = vclzq_s16(vsubq_s16(v122, v123));
      int8x16_t v129 = (int8x16_t)vsubq_s16(v100, v128);
      int8x16_t v130 = (int8x16_t)vcgtq_s16((int16x8_t)v127, (int16x8_t)v129);
      int16x8_t v131 = (int16x8_t)vbslq_s8(v130, v129, v127);
      v127.i64[0] = 0x1000100010001;
      v127.i64[1] = 0x1000100010001;
      int8x16_t v132 = (int8x16_t)vmaxq_s16(v131, (int16x8_t)v127);
      v127.i64[0] = 0x3000300030003;
      v127.i64[1] = 0x3000300030003;
      int8x16_t v133 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v102), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v134 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v112), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v119), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v136 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v126), (int16x8_t)v127), (int16x8_t)0);
      int8x16_t v137 = (int8x16_t)vsubq_s16((int16x8_t)v132, (int16x8_t)v133);
      int8x16_t v138 = (int8x16_t)vsubq_s16((int16x8_t)v132, v134);
      int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v132, v135);
      int8x16_t v140 = (int8x16_t)vsubq_s16((int16x8_t)v132, v136);
      int8x16_t v141 = (int8x16_t)vceqq_s16(vaddq_s16(v136, v135), vnegq_s16(vaddq_s16((int16x8_t)v133, v134)));
      v133.i64[0] = 0x4000400040004;
      v133.i64[1] = 0x4000400040004;
      int8x16_t v142 = vbicq_s8(v133, v141);
      v143.i64[0] = 0x7000700070007;
      v143.i64[1] = 0x7000700070007;
      int16x8_t v144 = (int16x8_t)vandq_s8(v61, v62);
      int16x8_t v145 = vaddq_s16((int16x8_t)v79, (int16x8_t)v79);
      int16x8_t v146 = vmulq_s16((int16x8_t)v74, v143);
      int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      int16x8_t v148 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v144, v146), v147), v145), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v132, v130), vaddq_s16((int16x8_t)v142, (int16x8_t)v142)), (int16x8_t)v137, v143), vaddq_s16(vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v139, (int16x8_t)v138), (int16x8_t)v140), 3uLL), v100))), 0);
      v141.i16[0] = vaddvq_s16(v148);
      int v149 = v141.u16[0];
      unint64_t v65 = v83 | HIWORD(v85);
      if (v141.i16[0])
      {
        v150.i64[0] = 0x2000200020002;
        v150.i64[1] = 0x2000200020002;
        v151.i64[0] = 0xA000A000A000ALL;
        v151.i64[1] = 0xA000A000A000ALL;
        int8x16_t v152 = vbslq_s8(v130, v151, v150);
        v151.i64[0] = -1;
        v151.i64[1] = -1;
        int8x16_t v153 = vorrq_s8(v142, v152);
        v154.i64[0] = 0xF000F000F000FLL;
        v154.i64[1] = 0xF000F000F000FLL;
        int8x16_t v155 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v151, vsubq_s16(v154, v128)), v123), v130);
        int8x16_t v156 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v148, 0xFuLL));
        int8x16_t v371 = vbslq_s8(v156, v88, v371);
        int8x16_t v372 = vbslq_s8(v156, v89, v372);
        int8x16_t v367 = vbslq_s8(v156, v90, v24);
        int8x16_t v368 = vbslq_s8(v156, v92, v25);
        int8x16_t v75 = vbslq_s8(v156, v138, v75);
        int8x16_t v76 = vbslq_s8(v156, v139, v76);
        int8x16_t v118 = vbslq_s8(v156, v140, v118);
        int8x16_t v373 = vbslq_s8(v156, v155, v373);
        int8x16_t v63 = vbslq_s8(v156, v132, v63);
        int8x16_t v80 = vbslq_s8(v156, v153, v80);
        v153.i64[0] = 0x8000800080008;
        v153.i64[1] = 0x8000800080008;
        int16x8_t v145 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), v153);
        int8x16_t v157 = vbslq_s8(v156, v137, v74);
        int16x8_t v146 = vmulq_s16((int16x8_t)v157, v143);
        int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      }
      else
      {
        int8x16_t v157 = v74;
        int8x16_t v367 = v24;
        int8x16_t v368 = v25;
      }
      int16x8_t v77 = (int16x8_t)v118;
      int16x4_t v159 = *(int16x4_t *)v369.i8;
      v160.i64[0] = 0x7000700070007;
      v160.i64[1] = 0x7000700070007;
      int16x8_t v161 = vsubq_s16((int16x8_t)v14, (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_242EA7520));
      int8x16_t v162 = (int8x16_t)v19;
      v162.i16[7] = v14.i16[7];
      int8x16_t v163 = (int8x16_t)vsubq_s16(v19, (int16x8_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_242EA7530));
      int8x16_t v164 = (int8x16_t)v369;
      v164.i16[7] = v14.i16[7];
      int8x16_t v165 = (int8x16_t)vsubq_s16(v369, (int16x8_t)vqtbl1q_s8(v164, (int8x16_t)xmmword_242EA7540));
      int8x16_t v166 = (int8x16_t)v370;
      v166.i16[7] = v14.i16[7];
      int16x8_t v167 = (int16x8_t)vqtbl1q_s8(v166, (int8x16_t)xmmword_242EA7550);
      int8x16_t v169 = (int8x16_t)v161;
      v169.i16[0] = v161.i16[7];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v370, v167);
      v169.i16[7] = v161.i16[0];
      v161.i16[0] = vmaxvq_s16((int16x8_t)v169);
      int16x8_t v170 = vdupq_lane_s16(*(int16x4_t *)v161.i8, 0);
      v167.i16[0] = vminvq_s16((int16x8_t)v169);
      int16x8_t v171 = vdupq_lane_s16(*(int16x4_t *)v167.i8, 0);
      v172.i64[0] = 0x8000800080008000;
      v172.i64[1] = 0x8000800080008000;
      int16x8_t v173 = vmaxq_s16(v170, v172);
      v174.i64[0] = 0x8000800080008000;
      v174.i64[1] = 0x8000800080008000;
      int16x8_t v175 = vminq_s16(v171, v174);
      int16x8_t v176 = vzip1q_s16(v170, v171);
      int8x16_t v177 = (int8x16_t)vceqzq_s16(v176);
      v178.i64[0] = 0x10001000100010;
      v178.i64[1] = 0x10001000100010;
      int16x8_t v179 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v176)), v177);
      int16x8_t v180 = vpmaxq_s16(v179, v179);
      v177.i16[0] = vmaxvq_s16((int16x8_t)v163);
      v159.i16[0] = vminvq_s16((int16x8_t)v163);
      int16x8_t v181 = vdupq_lane_s16(*(int16x4_t *)v177.i8, 0);
      int16x8_t v182 = vdupq_lane_s16(v159, 0);
      int16x8_t v183 = vmaxq_s16(v173, v181);
      int16x8_t v184 = vminq_s16(v175, v182);
      int16x8_t v185 = vzip1q_s16(v181, v182);
      int8x16_t v186 = (int8x16_t)vceqzq_s16(v185);
      int16x8_t v187 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v185)), v186);
      v186.i16[0] = vmaxvq_s16((int16x8_t)v165);
      v148.i16[0] = vminvq_s16((int16x8_t)v165);
      int16x8_t v188 = vdupq_lane_s16(*(int16x4_t *)v186.i8, 0);
      int16x8_t v189 = vdupq_lane_s16(*(int16x4_t *)v148.i8, 0);
      int16x8_t v190 = vpmaxq_s16(v187, v187);
      int16x8_t v191 = vmaxq_s16(v183, v188);
      int16x8_t v192 = vminq_s16(v184, v189);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      int8x16_t v194 = (int8x16_t)vceqzq_s16(v193);
      int16x8_t v195 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v193)), v194);
      int16x8_t v196 = vpmaxq_s16(v195, v195);
      v194.i16[0] = vmaxvq_s16((int16x8_t)v168);
      int16x8_t v197 = vdupq_lane_s16(*(int16x4_t *)v194.i8, 0);
      v130.i16[0] = vminvq_s16((int16x8_t)v168);
      int16x8_t v198 = vdupq_lane_s16(*(int16x4_t *)v130.i8, 0);
      int16x8_t v199 = vmaxq_s16(v191, v197);
      int16x8_t v200 = vminq_s16(v192, v198);
      int16x8_t v201 = vzip1q_s16(v197, v198);
      int16x8_t v202 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v201)), (int8x16_t)vceqzq_s16(v201));
      int16x8_t v203 = vpmaxq_s16(v202, v202);
      int8x16_t v204 = (int8x16_t)vmaxq_s16(vmaxq_s16(v180, v190), vmaxq_s16(v196, v203));
      int16x8_t v205 = vclzq_s16(vsubq_s16(v199, v200));
      int8x16_t v206 = (int8x16_t)vsubq_s16(v178, v205);
      int8x16_t v207 = (int8x16_t)vcgtq_s16((int16x8_t)v204, (int16x8_t)v206);
      int8x16_t v208 = vbslq_s8(v207, v206, v204);
      v209.i64[0] = 0x3000300030003;
      v209.i64[1] = 0x3000300030003;
      int16x8_t v210 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v180), v209), (int16x8_t)0);
      int8x16_t v211 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v190), v209), (int16x8_t)0);
      int16x8_t v212 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v196), v209), (int16x8_t)0);
      int16x8_t v213 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v203), v209), (int16x8_t)0);
      int8x16_t v214 = (int8x16_t)vsubq_s16((int16x8_t)v208, v210);
      int8x16_t v215 = (int8x16_t)vsubq_s16((int16x8_t)v208, (int16x8_t)v211);
      int8x16_t v216 = (int8x16_t)vsubq_s16((int16x8_t)v208, v212);
      int8x16_t v217 = (int8x16_t)vsubq_s16((int16x8_t)v208, v213);
      int8x16_t v218 = (int8x16_t)vceqq_s16(vaddq_s16(v213, v212), vnegq_s16(vaddq_s16(v210, (int16x8_t)v211)));
      v211.i64[0] = 0x4000400040004;
      v211.i64[1] = 0x4000400040004;
      int8x16_t v219 = vbicq_s8(v211, v218);
      int16x8_t v220 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v206, v207), vaddq_s16((int16x8_t)v219, (int16x8_t)v219)), (int16x8_t)v214, v160), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v216, (int16x8_t)v215), (int16x8_t)v217), 3uLL));
      v206.i64[0] = 0x8000800080008;
      v206.i64[1] = 0x8000800080008;
      v221.i64[0] = 0x2000200020002;
      v221.i64[1] = 0x2000200020002;
      int16x8_t v222 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v63, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v80, v206))), v145), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, (int8x16_t)v209), (int16x8_t)v221), (int8x16_t)v178), v146)), v147), v220), 0);
      v220.i16[0] = vaddvq_s16(v222);
      int v223 = v220.u16[0];
      if (v220.i16[0])
      {
        int8x16_t v224 = vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v208), v221);
        v225.i64[0] = 0x9000900090009;
        v225.i64[1] = 0x9000900090009;
        v226.i64[0] = -1;
        v226.i64[1] = -1;
        int8x16_t v227 = vorrq_s8(vorrq_s8(v224, (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v207, v225), (int16x8_t)vmvnq_s8(v207))), v219);
        v224.i64[0] = 0xF000F000F000FLL;
        v224.i64[1] = 0xF000F000F000FLL;
        int8x16_t v228 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v226, vsubq_s16((int16x8_t)v224, v205)), v200), v207);
        int8x16_t v229 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v222, 0xFuLL));
        v21.i16[0] = vbslq_s8(v229, vextq_s8(v14, v14, 0xEuLL), v21).u16[0];
        int16x8_t v22 = (int16x8_t)vbslq_s8(v229, v169, v371);
        int16x8_t v23 = (int16x8_t)vbslq_s8(v229, v163, v372);
        int8x16_t v24 = vbslq_s8(v229, v165, v367);
        int8x16_t v25 = vbslq_s8(v229, v168, v368);
        int8x16_t v74 = vbslq_s8(v229, v214, v157);
        int8x16_t v75 = vbslq_s8(v229, v215, v75);
        int8x16_t v76 = vbslq_s8(v229, v216, v76);
        int16x8_t v77 = (int16x8_t)vbslq_s8(v229, v217, v118);
        int8x16_t v68 = vbslq_s8(v229, v228, v373);
        int8x16_t v63 = vbslq_s8(v229, v208, v63);
        int8x16_t v80 = vbslq_s8(v229, v227, v80);
      }
      else
      {
        int8x16_t v24 = v367;
        int8x16_t v25 = v368;
        int8x16_t v68 = v373;
        int16x8_t v22 = (int16x8_t)v371;
        int16x8_t v23 = (int16x8_t)v372;
        int8x16_t v74 = v157;
      }
      if (v149) {
        BOOL v230 = v223 == 0;
      }
      else {
        BOOL v230 = 0;
      }
      char v64 = v230;
    }
    v231.i64[0] = 0x8000800080008;
    v231.i64[1] = 0x8000800080008;
    int16x8_t v232 = (int16x8_t)vandq_s8(v80, v231);
    v233.i64[0] = 0x3000300030003;
    v233.i64[1] = 0x3000300030003;
    v234.i64[0] = 0x2000200020002;
    v234.i64[1] = 0x2000200020002;
    int8x16_t v235 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, v233), v234);
    v234.i64[0] = 0x10001000100010;
    v234.i64[1] = 0x10001000100010;
    if ((unint64_t)((__int16)(vbicq_s8(v63, (int8x16_t)vceqzq_s16(v232)).u16[0]
                                    + ((2 * v80.i16[0]) & 8)
                                    + vandq_s8(v235, (int8x16_t)v234).u16[0]
                                    - v74.i16[0]
                                    + 8 * v74.i16[0]
                                    + 8 * vaddq_s16((int16x8_t)v76, vaddq_s16((int16x8_t)v75, v77)).u16[0])
                          - 363) <= 0xFFFFFFFFFFFFFE77)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
      return 48;
    }
    else
    {
      int8x16_t v236 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v237 = 8 * (a1 & 7);
      if (v237) {
        uint64_t v238 = *v236 & ~(-1 << v237);
      }
      else {
        uint64_t v238 = 0;
      }
      if (v63.i16[0]) {
        uint64_t v239 = (16 * v63.i8[0] - 16) & 0xF0;
      }
      else {
        uint64_t v239 = 0;
      }
      *a2 = v80.i8[0] << 6;
      unint64_t v240 = (v239 & 0xFFFFFFFFFF0000F0 | ((unint64_t)v21.u16[0] << 8) | v80.i8[0] & 0xF) >> 2;
      unint64_t v241 = (v240 << v237) | v238;
      if (v237 >= 0x2A)
      {
        *int8x16_t v236 = v241;
        unint64_t v241 = v240 >> (-8 * (a1 & 7u));
      }
      unint64_t v242 = v237 + 22;
      int8x16_t v243 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v74);
      int8x16_t v244 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v245 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v246 = (int8x16_t)vsubq_s16((int16x8_t)v63, v77);
      *(uint8x8_t *)v243.i8 = vqmovn_u16((uint16x8_t)v243);
      *(uint8x8_t *)v244.i8 = vqmovn_u16((uint16x8_t)v244);
      *(uint8x8_t *)v245.i8 = vqmovn_u16((uint16x8_t)v245);
      *(uint8x8_t *)v246.i8 = vqmovn_u16((uint16x8_t)v246);
      v243.i32[0] = vzip1q_s16((int16x8_t)vzip1q_s8(v243, v244), (int16x8_t)vzip1q_s8(v245, v246)).u32[0];
      v245.i64[0] = 0x202020202020202;
      v245.i64[1] = 0x202020202020202;
      int8x16_t v247 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v80.i8, (int8x8_t)0x4000400040004)))), v245);
      v245.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v245.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v246.i64[0] = -1;
      v246.i64[1] = -1;
      uint8x16_t v248 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v246, (uint8x16_t)vorrq_s8(v247, v245)), (int8x16_t)v243.u32[0]);
      int16x8_t v249 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v247.i8);
      uint16x8_t v250 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v248.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v249)), (int16x8_t)vmovl_high_u8(v248));
      uint16x8_t v251 = (uint16x8_t)vpaddq_s16(v249, (int16x8_t)vmovl_high_u8((uint8x16_t)v247));
      int32x4_t v252 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v251.i8);
      int32x4_t v253 = (int32x4_t)vmovl_high_u16(v251);
      int32x4_t v254 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v250.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v252)), (int32x4_t)vshlq_u32(vmovl_high_u16(v250), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v253)));
      int32x4_t v255 = vpaddq_s32(v252, v253);
      v256.i64[0] = v254.u32[0];
      v256.i64[1] = v254.u32[1];
      uint64x2_t v257 = (uint64x2_t)v256;
      v256.i64[0] = v254.u32[2];
      v256.i64[1] = v254.u32[3];
      uint64x2_t v258 = (uint64x2_t)v256;
      v256.i64[0] = v255.u32[0];
      v256.i64[1] = v255.u32[1];
      int64x2_t v259 = v256;
      v256.i64[0] = v255.u32[2];
      v256.i64[1] = v255.u32[3];
      int64x2_t v260 = vpaddq_s64((int64x2_t)vshlq_u64(v257, (uint64x2_t)vzip1q_s64((int64x2_t)0, v259)), (int64x2_t)vshlq_u64(v258, (uint64x2_t)vzip1q_s64((int64x2_t)0, v256)));
      int64x2_t v261 = vpaddq_s64(v259, v256);
      uint64_t v262 = (v237 + 22) & 0x3E;
      unint64_t v263 = (v260.i64[0] << v262) | v241;
      if ((unint64_t)(v261.i64[0] + v262) >= 0x40)
      {
        *(void *)((char *)v236 + ((v242 >> 3) & 8)) = v263;
        unint64_t v263 = (unint64_t)v260.i64[0] >> -(char)v262;
      }
      unint64_t v264 = v261.i64[0] + v242;
      unint64_t v265 = v263 | (v260.i64[1] << v264);
      if ((v264 & 0x3F) + v261.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v264 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v265;
        unint64_t v265 = (unint64_t)v260.i64[1] >> -(v264 & 0x3F);
        if ((v264 & 0x3F) == 0) {
          unint64_t v265 = 0;
        }
      }
      int8x16_t v266 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v74);
      unint64_t v267 = v264 + v261.i64[1];
      v268.i64[0] = -1;
      v268.i64[1] = -1;
      int16x8_t v269 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16(v232, v232), (int8x16_t)0, 0xEuLL), v63);
      v270.i64[0] = 0xF000F000F000FLL;
      v270.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v271 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v268, (uint16x8_t)vaddq_s16(v269, v270)), v68);
      int32x4_t v272 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v269.i8);
      int32x4_t v273 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v271.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v272)), (int32x4_t)vmovl_high_u16(v271));
      int32x4_t v274 = vpaddq_s32(v272, (int32x4_t)vmovl_high_u16((uint16x8_t)v269));
      v275.i64[0] = v273.u32[0];
      v275.i64[1] = v273.u32[1];
      uint64x2_t v276 = (uint64x2_t)v275;
      v275.i64[0] = v273.u32[2];
      v275.i64[1] = v273.u32[3];
      uint64x2_t v277 = (uint64x2_t)v275;
      v275.i64[0] = v274.u32[0];
      v275.i64[1] = v274.u32[1];
      int64x2_t v278 = v275;
      v275.i64[0] = v274.u32[2];
      v275.i64[1] = v274.u32[3];
      int64x2_t v279 = vpaddq_s64((int64x2_t)vshlq_u64(v276, (uint64x2_t)vzip1q_s64((int64x2_t)0, v278)), (int64x2_t)vshlq_u64(v277, (uint64x2_t)vzip1q_s64((int64x2_t)0, v275)));
      int64x2_t v280 = vpaddq_s64(v278, v275);
      unint64_t v281 = (v279.i64[0] << v267) | v265;
      if (v280.i64[0] + (v267 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v267 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v281;
        unint64_t v281 = (unint64_t)v279.i64[0] >> -(v267 & 0x3F);
        if ((v267 & 0x3F) == 0) {
          unint64_t v281 = 0;
        }
      }
      int16x8_t v282 = (int16x8_t)vandq_s8(v68, v266);
      uint64_t v283 = v280.i64[1];
      unint64_t v284 = v280.i64[0] + v267;
      unint64_t v285 = v281 | (v279.i64[1] << v284);
      if ((v284 & 0x3F) + v280.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v284 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
        unint64_t v285 = (unint64_t)v279.i64[1] >> -(v284 & 0x3F);
        if ((v284 & 0x3F) == 0) {
          unint64_t v285 = 0;
        }
      }
      int8x16_t v286 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v287 = (int8x16_t)vaddq_s16(v282, v22);
      unint64_t v288 = v284 + v283;
      if (v64)
      {
        v285 |= v65 << v288;
        if ((v288 & 0x3F) >= 0x30)
        {
          *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
          unint64_t v285 = v65 >> -(v288 & 0x3F);
        }
        v288 += 16;
      }
      int16x8_t v289 = (int16x8_t)vandq_s8(v68, v286);
      int16x8_t v290 = (int16x8_t)vextq_s8((int8x16_t)0, v74, 0xEuLL);
      v291.i64[0] = 0xF000F000F000FLL;
      v291.i64[1] = 0xF000F000F000FLL;
      v292.i64[0] = -1;
      v292.i64[1] = -1;
      uint16x8_t v293 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v292, (uint16x8_t)vaddq_s16(v290, v291)), v287);
      int32x4_t v294 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v290.i8);
      int32x4_t v295 = (int32x4_t)vmovl_high_u16((uint16x8_t)v290);
      int32x4_t v296 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v293.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v294)), (int32x4_t)vshlq_u32(vmovl_high_u16(v293), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v295)));
      int32x4_t v297 = vpaddq_s32(v294, v295);
      v298.i64[0] = v296.u32[0];
      v298.i64[1] = v296.u32[1];
      uint64x2_t v299 = (uint64x2_t)v298;
      v298.i64[0] = v296.u32[2];
      v298.i64[1] = v296.u32[3];
      uint64x2_t v300 = (uint64x2_t)v298;
      v298.i64[0] = v297.u32[0];
      v298.i64[1] = v297.u32[1];
      int64x2_t v301 = v298;
      v298.i64[0] = v297.u32[2];
      v298.i64[1] = v297.u32[3];
      int64x2_t v302 = vpaddq_s64((int64x2_t)vshlq_u64(v299, (uint64x2_t)vzip1q_s64((int64x2_t)0, v301)), (int64x2_t)vshlq_u64(v300, (uint64x2_t)vzip1q_s64((int64x2_t)0, v298)));
      int64x2_t v303 = vpaddq_s64(v301, v298);
      unint64_t v304 = (v302.i64[0] << v288) | v285;
      if (v303.i64[0] + (v288 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v304;
        unint64_t v304 = (unint64_t)v302.i64[0] >> -(v288 & 0x3F);
        if ((v288 & 0x3F) == 0) {
          unint64_t v304 = 0;
        }
      }
      int8x16_t v305 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v306 = (int8x16_t)vaddq_s16(v23, v289);
      unint64_t v307 = v303.i64[0] + v288;
      uint64_t v308 = (v303.i64[0] + v288) & 0x3F;
      unint64_t v309 = v304 | (v302.i64[1] << v307);
      if ((v307 & 0x3F) + v303.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v307 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v309;
        unint64_t v309 = (unint64_t)v302.i64[1] >> -(char)v308;
        if (!v308) {
          unint64_t v309 = 0;
        }
      }
      int16x8_t v310 = (int16x8_t)vandq_s8(v68, v305);
      unint64_t v311 = v307 + v303.i64[1];
      v312.i64[0] = 0xF000F000F000FLL;
      v312.i64[1] = 0xF000F000F000FLL;
      v313.i64[0] = -1;
      v313.i64[1] = -1;
      uint16x8_t v314 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v313, (uint16x8_t)vaddq_s16((int16x8_t)v75, v312)), v306);
      int32x4_t v315 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8);
      int32x4_t v316 = (int32x4_t)vmovl_high_u16((uint16x8_t)v75);
      int32x4_t v317 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v314.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v315)), (int32x4_t)vshlq_u32(vmovl_high_u16(v314), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v316)));
      int32x4_t v318 = vpaddq_s32(v315, v316);
      v319.i64[0] = v317.u32[0];
      v319.i64[1] = v317.u32[1];
      uint64x2_t v320 = (uint64x2_t)v319;
      v319.i64[0] = v317.u32[2];
      v319.i64[1] = v317.u32[3];
      uint64x2_t v321 = (uint64x2_t)v319;
      v319.i64[0] = v318.u32[0];
      v319.i64[1] = v318.u32[1];
      int64x2_t v322 = v319;
      v319.i64[0] = v318.u32[2];
      v319.i64[1] = v318.u32[3];
      int64x2_t v323 = vpaddq_s64((int64x2_t)vshlq_u64(v320, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)), (int64x2_t)vshlq_u64(v321, (uint64x2_t)vzip1q_s64((int64x2_t)0, v319)));
      int64x2_t v324 = vpaddq_s64(v322, v319);
      unint64_t v325 = (v323.i64[0] << v311) | v309;
      if (v324.i64[0] + (v311 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v325;
        unint64_t v325 = (unint64_t)v323.i64[0] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v325 = 0;
        }
      }
      int8x16_t v326 = (int8x16_t)vceqq_s16((int16x8_t)v63, v77);
      int8x16_t v327 = (int8x16_t)vaddq_s16((int16x8_t)v24, v310);
      unint64_t v328 = v324.i64[0] + v311;
      unint64_t v329 = v325 | (v323.i64[1] << v328);
      if ((v328 & 0x3F) + v324.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v328 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
        unint64_t v329 = (unint64_t)v323.i64[1] >> -(v328 & 0x3F);
        if ((v328 & 0x3F) == 0) {
          unint64_t v329 = 0;
        }
      }
      int16x8_t v330 = (int16x8_t)vandq_s8(v68, v326);
      unint64_t v331 = v328 + v324.i64[1];
      v332.i64[0] = 0xF000F000F000FLL;
      v332.i64[1] = 0xF000F000F000FLL;
      v333.i64[0] = -1;
      v333.i64[1] = -1;
      uint16x8_t v334 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v333, (uint16x8_t)vaddq_s16((int16x8_t)v76, v332)), v327);
      int32x4_t v335 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8);
      int32x4_t v336 = (int32x4_t)vmovl_high_u16((uint16x8_t)v76);
      int32x4_t v337 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v334.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v335)), (int32x4_t)vshlq_u32(vmovl_high_u16(v334), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v336)));
      int32x4_t v338 = vpaddq_s32(v335, v336);
      v339.i64[0] = v337.u32[0];
      v339.i64[1] = v337.u32[1];
      uint64x2_t v340 = (uint64x2_t)v339;
      v339.i64[0] = v337.u32[2];
      v339.i64[1] = v337.u32[3];
      uint64x2_t v341 = (uint64x2_t)v339;
      v339.i64[0] = v338.u32[0];
      v339.i64[1] = v338.u32[1];
      int64x2_t v342 = v339;
      v339.i64[0] = v338.u32[2];
      v339.i64[1] = v338.u32[3];
      int64x2_t v343 = vpaddq_s64((int64x2_t)vshlq_u64(v340, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)), (int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v339)));
      int64x2_t v344 = vpaddq_s64(v342, v339);
      unint64_t v345 = (v343.i64[0] << v331) | v329;
      if (v344.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v345;
        unint64_t v345 = (unint64_t)v343.i64[0] >> -(v331 & 0x3F);
        if ((v331 & 0x3F) == 0) {
          unint64_t v345 = 0;
        }
      }
      int8x16_t v346 = (int8x16_t)vaddq_s16((int16x8_t)v25, v330);
      unint64_t v347 = v344.i64[0] + v331;
      unint64_t v348 = v345 | (v343.i64[1] << v347);
      if ((v347 & 0x3F) + v344.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        unint64_t v348 = (unint64_t)v343.i64[1] >> -(v347 & 0x3F);
        if ((v347 & 0x3F) == 0) {
          unint64_t v348 = 0;
        }
      }
      unint64_t v349 = v347 + v344.i64[1];
      v350.i64[0] = 0xF000F000F000FLL;
      v350.i64[1] = 0xF000F000F000FLL;
      v351.i64[0] = -1;
      v351.i64[1] = -1;
      uint16x8_t v352 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v351, (uint16x8_t)vaddq_s16(v77, v350)), v346);
      int32x4_t v353 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8);
      int32x4_t v354 = (int32x4_t)vmovl_high_u16((uint16x8_t)v77);
      int32x4_t v355 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v352.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v353)), (int32x4_t)vshlq_u32(vmovl_high_u16(v352), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v354)));
      int32x4_t v356 = vpaddq_s32(v353, v354);
      v357.i64[0] = v355.u32[0];
      v357.i64[1] = v355.u32[1];
      uint64x2_t v358 = (uint64x2_t)v357;
      v357.i64[0] = v355.u32[2];
      v357.i64[1] = v355.u32[3];
      uint64x2_t v359 = (uint64x2_t)v357;
      v357.i64[0] = v356.u32[0];
      v357.i64[1] = v356.u32[1];
      int64x2_t v360 = v357;
      v357.i64[0] = v356.u32[2];
      v357.i64[1] = v356.u32[3];
      int64x2_t v361 = vpaddq_s64((int64x2_t)vshlq_u64(v358, (uint64x2_t)vzip1q_s64((int64x2_t)0, v360)), (int64x2_t)vshlq_u64(v359, (uint64x2_t)vzip1q_s64((int64x2_t)0, v357)));
      int64x2_t v362 = vpaddq_s64(v360, v357);
      unint64_t v363 = (v361.i64[0] << v349) | v348;
      if (v362.i64[0] + (v349 & 0x3F) > 0x3F)
      {
        *(void *)((char *)v236 + ((v349 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v363;
        if ((v349 & 0x3F) != 0) {
          unint64_t v363 = (unint64_t)v361.i64[0] >> -(v349 & 0x3F);
        }
        else {
          unint64_t v363 = 0;
        }
      }
      unint64_t v364 = v362.i64[0] + v349;
      unint64_t v365 = v363 | (v361.i64[1] << v364);
      if ((v364 & 0x3F) + v362.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v364 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
        unint64_t v365 = (unint64_t)v361.i64[1] >> -(v364 & 0x3F);
        if ((v364 & 0x3F) == 0) {
          unint64_t v365 = 0;
        }
      }
      unint64_t v366 = v364 + v362.i64[1];
      if ((v366 & 0x3F) != 0) {
        *(void *)((char *)v236 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
      }
      unint64_t result = (v366 - v237 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_WORD *)a1 = a3->i16[0];
    *a2 = 1;
    return 2;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  if (a5 > 1)
  {
    uint64_t v19 = a5 & 0xFE;
    if (a5 == v19)
    {
      uint64_t v20 = 0;
      int8x16_t v21 = (__int16 *)(a3 + 2);
      int16x8_t v22 = (char *)&v61 + 8;
      do
      {
        int16x8_t v23 = v22;
        int8x16_t v24 = v21;
        uint64_t v25 = a5;
        do
        {
          __int16 v26 = *(v24 - 1);
          __int16 v27 = *v24;
          v24 += 2;
          *(v23 - 4) = v26;
          *int16x8_t v23 = v27;
          v23 += 8;
          v25 -= 2;
        }
        while (v25);
        ++v20;
        int8x16_t v21 = (__int16 *)((char *)v21 + a4);
        v22 += 2;
      }
      while (v20 != a6);
    }
    else
    {
      uint64_t v28 = 0;
      int16x8_t v29 = (__int16 *)(a3 + 2);
      int16x8_t v30 = (char *)&v61 + 8;
      int16x8_t v31 = (char *)&v61 + ((8 * a5) & 0x7F0);
      do
      {
        int16x8_t v32 = v30;
        int8x16_t v33 = v29;
        uint64_t v34 = a5 & 0xFE;
        do
        {
          __int16 v35 = *(v33 - 1);
          __int16 v36 = *v33;
          v33 += 2;
          *(v32 - 4) = v35;
          *int16x8_t v32 = v36;
          v32 += 8;
          v34 -= 2;
        }
        while (v34);
        int16x8_t v37 = (__int16 *)(a3 + v28 * a4 + 2 * v19);
        int16x8_t v38 = v31;
        uint64_t v39 = a5 - v19;
        do
        {
          __int16 v40 = *v37++;
          *int16x8_t v38 = v40;
          v38 += 4;
          --v39;
        }
        while (v39);
        ++v28;
        int16x8_t v29 = (__int16 *)((char *)v29 + a4);
        v30 += 2;
        v31 += 2;
      }
      while (v28 != a6);
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v10 = a6 & 0xFE;
    unint64_t v11 = (__int16 *)(a3 + 1);
    int16x4_t v12 = (_WORD *)&v61 + 1;
    uint64_t v13 = v10;
    do
    {
      __int16 v14 = *(__int16 *)((char *)v11 - 1);
      __int16 v15 = *v11++;
      *(v12 - 1) = v14;
      _WORD *v12 = v15;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v10 != a6)
    {
LABEL_7:
      uint64_t v16 = a6 - v10;
      int32x4_t v17 = (_WORD *)&v61 + v10;
      int32x4_t v18 = (_WORD *)(a3 + v10 * a4);
      do
      {
        *v17++ = *v18;
        int32x4_t v18 = (_WORD *)((char *)v18 + a4);
        --v16;
      }
      while (v16);
    }
  }
  v56.i32[0] = (unsigned __int16)v61;
  v56.i32[1] = WORD4(v61);
  v56.i32[2] = WORD1(v61);
  v56.i32[3] = WORD5(v61);
  int v57 = (unsigned __int16)v62;
  int v58 = WORD4(v62);
  if (a5 >= 4) {
    unsigned int v41 = 4;
  }
  else {
    unsigned int v41 = a5;
  }
  if (a5 >= 4) {
    unsigned int v42 = a5 - 4;
  }
  else {
    unsigned int v42 = 0;
  }
  int v59 = WORD1(v62);
  int v60 = WORD5(v62);
  if (a6 >= 2) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = a6;
  }
  if (a6 >= 2) {
    unsigned int v44 = a6 - 2;
  }
  else {
    unsigned int v44 = 0;
  }
  char v46 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1, &v56, a7, v41, v43);
  v56.i32[0] = WORD2(v61);
  v56.i32[1] = WORD6(v61);
  v56.i32[2] = WORD3(v61);
  v56.i32[3] = HIWORD(v61);
  int v57 = WORD2(v62);
  int v58 = WORD6(v62);
  int v59 = WORD3(v62);
  int v60 = HIWORD(v62);
  if (a6 >= 4) {
    unsigned int v47 = 2;
  }
  else {
    unsigned int v47 = v44;
  }
  int v48 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 12, &v56, a7, v41, v47);
  v56.i32[0] = (unsigned __int16)v63;
  v56.i32[1] = WORD4(v63);
  v56.i32[2] = WORD1(v63);
  v56.i32[3] = WORD5(v63);
  int v57 = (unsigned __int16)v64;
  int v58 = WORD4(v64);
  if (a5 >= 8) {
    unsigned int v49 = 4;
  }
  else {
    unsigned int v49 = v42;
  }
  int v59 = WORD1(v64);
  int v60 = WORD5(v64);
  int v50 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 24, &v56, a7, v49, v43);
  v56.i32[0] = WORD2(v63);
  v56.i32[1] = WORD6(v63);
  v56.i32[2] = WORD3(v63);
  v56.i32[3] = HIWORD(v63);
  int v57 = WORD2(v64);
  int v58 = WORD6(v64);
  int v59 = WORD3(v64);
  int v60 = HIWORD(v64);
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 36, &v56, a7, v49, v47);
  if (v50) {
    char v52 = 4;
  }
  else {
    char v52 = 0;
  }
  if (v48) {
    char v53 = 2;
  }
  else {
    char v53 = 0;
  }
  if (result) {
    char v54 = -8;
  }
  else {
    char v54 = -16;
  }
  *a2 = v54 | v52 | v46 | v53;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(uint64_t a1, int8x16_t *a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (a3 == 1)
  {
    v8.i64[0] = 0x800000008000;
    v8.i64[1] = 0x800000008000;
    int8x16_t v9 = veorq_s8(*a2, v8);
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    int8x16_t v6 = vbicq_s8(v9, (int8x16_t)vceqq_s32((int32x4_t)v9, v10));
    int8x16_t v11 = veorq_s8(a2[1], v8);
    int8x16_t v7 = vbicq_s8(v11, (int8x16_t)vceqq_s32((int32x4_t)v11, v10));
    goto LABEL_5;
  }
  if (a3 == 3)
  {
    v5.i64[0] = 0x800000008000;
    v5.i64[1] = 0x800000008000;
    int8x16_t v6 = veorq_s8(*a2, v5);
    int8x16_t v7 = veorq_s8(a2[1], v5);
LABEL_5:
    int8x16_t v127 = v6;
    int8x16_t v128 = v7;
    unsigned int v12 = v6.i32[0];
    goto LABEL_7;
  }
  int8x16_t v13 = a2[1];
  int8x16_t v127 = *a2;
  int8x16_t v128 = v13;
  unsigned int v12 = v127.i32[0];
LABEL_7:
  if (a5) {
    BOOL v14 = a4 >= 2;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = !v14;
  if (v14)
  {
    unsigned int v17 = v127.u32[1];
    unsigned int v16 = v127.i32[1] < v12;
    if (v127.i32[1] >= v12) {
      unsigned int v18 = v12;
    }
    else {
      unsigned int v18 = v127.u32[1];
    }
    if (v12 > v127.i32[1]) {
      unsigned int v17 = v12;
    }
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = v12;
    unsigned int v18 = v12;
  }
  BOOL v19 = a5 < 2 || a4 == 0;
  int v20 = v19;
  if (!v19)
  {
    if (v127.i32[2] < v18)
    {
      unsigned int v16 = 2;
      unsigned int v18 = v127.u32[2];
    }
    if (v17 <= v127.i32[2]) {
      unsigned int v17 = v127.u32[2];
    }
  }
  BOOL v21 = a5 >= 2 && a4 >= 2;
  int v22 = !v21;
  if (v21)
  {
    if (v127.i32[3] < v18)
    {
      unsigned int v16 = 3;
      unsigned int v18 = v127.u32[3];
    }
    if (v17 <= v127.i32[3]) {
      unsigned int v17 = v127.u32[3];
    }
  }
  if (a5) {
    BOOL v23 = a4 >= 3;
  }
  else {
    BOOL v23 = 0;
  }
  int v24 = !v23;
  if (v23)
  {
    if (v128.i32[0] < v18)
    {
      unsigned int v16 = 4;
      unsigned int v18 = v128.i32[0];
    }
    if (v17 <= v128.i32[0]) {
      unsigned int v17 = v128.i32[0];
    }
  }
  if (a5) {
    BOOL v25 = a4 >= 4;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = !v25;
  if (v25)
  {
    if (v128.i32[1] < v18)
    {
      unsigned int v16 = 5;
      unsigned int v18 = v128.u32[1];
    }
    if (v17 <= v128.i32[1]) {
      unsigned int v17 = v128.u32[1];
    }
  }
  BOOL v27 = a5 >= 2 && a4 >= 3;
  int v28 = !v27;
  if (v27)
  {
    if (v128.i32[2] < v18)
    {
      unsigned int v16 = 6;
      unsigned int v18 = v128.u32[2];
    }
    if (v17 <= v128.i32[2]) {
      unsigned int v17 = v128.u32[2];
    }
  }
  BOOL v29 = a5 >= 2 && a4 >= 4;
  int v30 = !v29;
  if (v29)
  {
    if (v128.i32[3] < v18)
    {
      unsigned int v16 = 7;
      unsigned int v18 = v128.u32[3];
    }
    if (v17 <= v128.i32[3]) {
      unsigned int v17 = v128.u32[3];
    }
  }
  unsigned int v31 = v17 - v18;
  unsigned int v32 = __clz(v17 - v18);
  int v33 = 32 - v32;
  if ((int)(32 - v32) <= 1) {
    int v33 = 1;
  }
  unsigned int v34 = v33 - 1;
  if (v17 == 0xFFFF && v32 == 31) {
    unsigned int v34 = 1;
  }
  if ((a3 | 2) == 3)
  {
    BOOL v36 = 0;
    if (!(v18 >> 15) && v17 >= 0x8000) {
      BOOL v36 = kDQuadParamTable[10 * v34 + 488] == 0;
    }
  }
  else
  {
    BOOL v36 = 0;
  }
  if (v34 > 0xC || v36)
  {
    int v38 = kDQuadParamTable[10 * v34 + 484];
    unsigned int v39 = v38 + 4;
    if (v36) {
      int v40 = 0;
    }
    else {
      int v40 = -2;
    }
    int v41 = v18 & ~(-1 << (12 - v38));
    if (v39 >= 0x10) {
      int v41 = 0;
    }
    int v42 = v41 + v40;
    if (v42 >= 1 && __clz(v42 + v31) < v32) {
      ++v34;
    }
  }
  unint64_t v46 = (unint64_t)&kDQuadParamTable[10 * v34];
  unint64_t v43 = *(void *)(v46 + 1928);
  int v44 = *(_DWORD *)(v46 + 1936);
  int v45 = *(_DWORD *)(v46 + 1940);
  LODWORD(v46) = v45 + 4;
  if (a4) {
    BOOL v47 = a5 == 0;
  }
  else {
    BOOL v47 = 1;
  }
  int v48 = v47;
  if (v43 >> v46 > 0x10) {
    int v49 = 1;
  }
  else {
    int v49 = v48;
  }
  if (a3 != 4)
  {
    BOOL v50 = 0;
    goto LABEL_155;
  }
  if (v48)
  {
    BOOL v50 = 0;
    if (v15) {
      goto LABEL_143;
    }
  }
  else
  {
    BOOL v50 = (~v12 & 0x7C00) == 0 || v12 == 0x8000;
    if (v15) {
      goto LABEL_143;
    }
  }
  if ((~v127.i32[1] & 0x7C00) == 0 || v127.i32[1] == 0x8000) {
    BOOL v50 = 1;
  }
LABEL_143:
  if (v20)
  {
    if (v22) {
      goto LABEL_145;
    }
  }
  else
  {
    if ((~v127.i32[2] & 0x7C00) == 0 || v127.i32[2] == 0x8000) {
      BOOL v50 = 1;
    }
    if (v22)
    {
LABEL_145:
      if (v24) {
        goto LABEL_146;
      }
      goto LABEL_250;
    }
  }
  if ((~v127.i32[3] & 0x7C00) == 0 || v127.i32[3] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v24)
  {
LABEL_146:
    if (v26) {
      goto LABEL_147;
    }
    goto LABEL_257;
  }
LABEL_250:
  if ((~v128.i32[0] & 0x7C00) == 0 || v128.i32[0] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v26)
  {
LABEL_147:
    if (v28) {
      goto LABEL_148;
    }
    goto LABEL_264;
  }
LABEL_257:
  if ((~v128.i32[1] & 0x7C00) == 0 || v128.i32[1] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v28)
  {
LABEL_148:
    if (v30) {
      goto LABEL_155;
    }
    goto LABEL_149;
  }
LABEL_264:
  if ((~v128.i32[2] & 0x7C00) == 0 || v128.i32[2] == 0x8000) {
    BOOL v50 = 1;
  }
  if ((v30 & 1) == 0)
  {
LABEL_149:
    if ((~v128.i32[3] & 0x7C00) == 0 || v128.i32[3] == 0x8000) {
      BOOL v50 = 1;
    }
  }
LABEL_155:
  unint64_t v54 = 0;
  unsigned int v55 = 0;
  unsigned int v56 = v44 + 4;
  memset(v124, 0, sizeof(v124));
  int v125 = 0;
  unsigned int v57 = 16 * (v45 != 0);
  if (v56 >= 0x10) {
    uint64_t v58 = 16;
  }
  else {
    uint64_t v58 = v56;
  }
  if (v57 >= v46) {
    unint64_t v46 = v46;
  }
  else {
    unint64_t v46 = v57;
  }
  unsigned int v59 = v18 & (-1 << (16 - v58));
  unint64_t v60 = v16;
  unint64_t v61 = v43 >> v46;
  unsigned int v62 = v12 - v59;
  if (v48) {
    unsigned int v62 = 0;
  }
  BOOL v19 = v15 == 0;
  unsigned __int32 v63 = v127.i32[1] - v59;
  if (!v19) {
    unsigned __int32 v63 = 0;
  }
  v126[0] = v62;
  v126[1] = v63;
  unsigned __int32 v64 = v127.i32[2] - v59;
  if (v20) {
    unsigned __int32 v64 = 0;
  }
  unsigned __int32 v65 = v127.i32[3] - v59;
  if (v22) {
    unsigned __int32 v65 = 0;
  }
  v126[2] = v64;
  v126[3] = v65;
  unsigned __int32 v66 = v128.i32[0] - v59;
  if (v24) {
    unsigned __int32 v66 = 0;
  }
  unsigned __int32 v67 = v128.i32[1] - v59;
  if (v26) {
    unsigned __int32 v67 = 0;
  }
  v126[4] = v66;
  v126[5] = v67;
  unsigned __int32 v68 = v128.i32[2] - v59;
  if (v28) {
    unsigned __int32 v68 = 0;
  }
  unsigned __int32 v69 = v128.i32[3] - v59;
  if (v30) {
    unsigned __int32 v69 = 0;
  }
  v126[6] = v68;
  v126[7] = v69;
  if (v61 <= 1) {
    unint64_t v70 = 1;
  }
  else {
    unint64_t v70 = v61;
  }
  uint64_t v71 = 4 * v16;
  int16x8_t v72 = &byte_242EA911D;
  do
  {
    if (v71 != v54)
    {
      if (v46) {
        unint64_t v73 = v126[v54 / 4] / v70;
      }
      else {
        LODWORD(v73) = 0;
      }
      *((_DWORD *)v124 + v55) = v73;
      if (v61 >= 2)
      {
        unint64_t v74 = v126[v54 / 4];
        if (v74)
        {
          if (v74 / v70 * v70 == v74 && ((v74 / v70) & 1) != 0)
          {
            if (v59 || v73 != 1)
            {
              if ((a3 | 2) != 3
                || (uint64_t v76 = v127.u32[v54 / 4], v76 != 0x8000) && ((a3 | 2) != 3 || v70 + 0x8000 != v76))
              {
                LODWORD(v73) = v73 - 1;
                *((_DWORD *)v124 + v55) = v73;
              }
            }
            else
            {
              LODWORD(v73) = 1;
            }
          }
        }
      }
      if (v73 >> v46 || v127.i32[v54 / 4] == 0xFFFF) {
        *((_DWORD *)v124 + v55) = ~(-1 << v46);
      }
      if (*v72 >= a5 || *(v72 - 1) >= a4) {
        *((_DWORD *)v124 + v55) = 0;
      }
      ++v55;
    }
    v54 += 4;
    v72 += 2;
  }
  while (v54 != 32);
  uint64_t v77 = v49 | v50;
  int8x16_t v78 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v79 = 8 * (a1 & 7);
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  if (v77 == 1)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 8 * (a1 & 7);
    do
    {
      int v83 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v80;
      if (v83[1] >= a5 || *v83 >= a4) {
        unint64_t v85 = 0;
      }
      else {
        unint64_t v85 = (unint64_t)v127.u32[v80] >> 4;
      }
      if ((unint64_t)(v82 - v79 + (v81 << 6) - 85) >= 0xFFFFFFFFFFFFFF9FLL)
      {
        uint64_t v86 = 0;
        unint64_t v87 = 12;
        do
        {
          unint64_t v88 = 64 - v82;
          if (64 - v82 >= v87) {
            unint64_t v88 = v87;
          }
          v78[v81] |= ((v85 >> v86) & ~(-1 << v88)) << v82;
          v86 += v88;
          unint64_t v89 = v88 + v82;
          v81 += v89 >> 6;
          uint64_t v82 = v89 & 0x3F;
          v87 -= v88;
        }
        while (v87);
      }
      ++v80;
    }
    while (v80 != 8);
  }
  else
  {
    uint64_t v90 = 0;
    *v78 |= (unint64_t)(v34 & 0xF) << v79;
    uint64_t v91 = v79 | 4;
    if (v58 && (unint64_t)(v58 - v79 + v91) <= 0x60)
    {
      uint64_t v90 = 0;
      uint64_t v92 = 0;
      unint64_t v93 = v58;
      do
      {
        unint64_t v94 = 64 - v91;
        if (64 - v91 >= v93) {
          unint64_t v94 = v93;
        }
        v78[v90] |= (((unint64_t)(v59 >> (16 - v58)) >> v92) & ~(-1 << v94)) << v91;
        v92 += v94;
        unint64_t v95 = v94 + v91;
        v90 += v95 >> 6;
        uint64_t v91 = v95 & 0x3F;
        v93 -= v94;
      }
      while (v93);
    }
    if (v46)
    {
      if ((unint64_t)(v91 - v79 + (v90 << 6) + 3) <= 0x60)
      {
        uint64_t v96 = 0;
        unint64_t v97 = 3;
        do
        {
          unint64_t v98 = 64 - v91;
          if (64 - v91 >= v97) {
            unint64_t v98 = v97;
          }
          v78[v90] |= ((v60 >> v96) & ~(-1 << v98)) << v91;
          v96 += v98;
          unint64_t v99 = v98 + v91;
          v90 += v99 >> 6;
          uint64_t v91 = v99 & 0x3F;
          v97 -= v98;
        }
        while (v97);
      }
      int v100 = v58 + 7;
    }
    else
    {
      int v100 = v58 + 4;
    }
    int v106 = 96 - v100;
    unsigned int v107 = (((37 * v106) >> 8)
          + (((v106 - ((unsigned __int16)(37 * v106) >> 8)) & 0xFE) >> 1)) >> 2;
    unint64_t v108 = -7 * v107 + v106;
    if ((v108 - 257) >= 0xFFFFFF00 && v91 - v79 + (v90 << 6) + v108 <= 0x60)
    {
      do
      {
        unint64_t v109 = 64 - v91;
        if (64 - v91 >= v108) {
          unint64_t v109 = v108;
        }
        unint64_t v110 = v109 + v91;
        v90 += v110 >> 6;
        uint64_t v91 = v110 & 0x3F;
        v108 -= v109;
      }
      while (v108);
    }
    uint64_t v111 = 0;
    unint64_t v112 = v107 - v46;
    if (v112) {
      BOOL v113 = v112 > 0x100;
    }
    else {
      BOOL v113 = 1;
    }
    char v114 = v113;
    do
    {
      if (v46 && v46 - v79 + v91 + (v90 << 6) <= 0x60)
      {
        uint64_t v115 = 0;
        unint64_t v116 = *((unsigned int *)v124 + v111);
        unint64_t v117 = v46;
        do
        {
          unint64_t v118 = 64 - v91;
          if (64 - v91 >= v117) {
            unint64_t v118 = v117;
          }
          v78[v90] |= ((v116 >> v115) & ~(-1 << v118)) << v91;
          v115 += v118;
          unint64_t v119 = v118 + v91;
          v90 += v119 >> 6;
          uint64_t v91 = v119 & 0x3F;
          v117 -= v118;
        }
        while (v117);
      }
      if ((v114 & 1) == 0 && v91 - v79 + (v90 << 6) + v112 <= 0x60)
      {
        unint64_t v120 = v112;
        do
        {
          unint64_t v121 = 64 - v91;
          if (64 - v91 >= v120) {
            unint64_t v121 = v120;
          }
          unint64_t v122 = v121 + v91;
          v90 += v122 >> 6;
          uint64_t v91 = v122 & 0x3F;
          v120 -= v121;
        }
        while (v120);
      }
      ++v111;
    }
    while (v111 != 7);
  }
  return v77;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(uint64_t a1, uint64_t a2, int32x4_t *a3, unsigned int a4, int a5, double a6, double a7, double a8, int8x8_t a9)
{
  uint64_t v407 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v183 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v184 = (void *)(a1 + a2);
    *int16x8_t v184 = 0;
    v184[1] = 0;
    int16x8_t v185 = (void *)(a1 + 2 * a2);
    *int16x8_t v185 = 0;
    v185[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
LABEL_388:
    *int8x16_t v186 = 0;
    v186[1] = 0;
    return v183;
  }
  int8x16_t v9 = a3;
  if (a4 >= 0xF0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = a5 & 0xFFFFFFFD;
    unsigned int v368 = a4;
    while (1)
    {
      uint64_t v29 = (uint64_t)v9->i64 + 12 * v10;
      int v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = 8 * (v29 & 7);
      if (((a4 >> v10) & 1) == 0) {
        break;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = v31;
      do
      {
        if ((unint64_t)(v34 - v31 + (v33 << 6) - 85) < 0xFFFFFFFFFFFFFF9FLL)
        {
          __int16 v35 = 0;
        }
        else
        {
          __int16 v35 = 0;
          uint64_t v39 = 0;
          unint64_t v40 = 12;
          do
          {
            unint64_t v41 = 64 - v34;
            if (64 - v34 >= v40) {
              unint64_t v41 = v40;
            }
            v35 |= (unint64_t)((v30[v33] >> v34) & ~(-1 << v41)) << v39;
            v39 += v41;
            unint64_t v42 = v41 + v34;
            v33 += v42 >> 6;
            uint64_t v34 = v42 & 0x3F;
            v40 -= v41;
          }
          while (v40);
        }
        int v36 = 16 * (v35 & 0xFFF);
        int v37 = v36 - (v35 & 1) + 8;
        if (v36 == 65520) {
          int v37 = 0xFFFF;
        }
        if (!v36) {
          int v37 = 0;
        }
        if (v36 == 0x8000 && v11 == 1) {
          int v37 = v36;
        }
        if (a5 == 4) {
          int v37 = v36;
        }
        v369.i32[v32++] = v37 ^ (((a5 & 0xFFFFFFFD) == 1) << 15);
      }
      while (v32 != 8);
      LOWORD(v13) = v369.i16[0];
      LOWORD(v12) = v369.i16[2];
      LOWORD(v14) = v369.i16[4];
      LOWORD(v15) = v369.i16[6];
      LOWORD(v16) = v370;
      LOWORD(v17) = v371;
      LOWORD(v19) = v372;
      __int16 v18 = v373;
LABEL_5:
      int v20 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kRegionOffset + 2 * v10;
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      BOOL v23 = &v374 + v21;
      uint64_t v24 = 2 * v22;
      *(_WORD *)((char *)v23 + v24) = v13;
      BOOL v25 = &v374 + (v21 + 1);
      *(_WORD *)((char *)v25 + v24) = v12;
      uint64_t v26 = 2 * (v22 + 1);
      *(_WORD *)((char *)v23 + v26) = v14;
      *(_WORD *)((char *)v25 + v26) = v15;
      BOOL v27 = &v374 + (v21 + 2);
      *(_WORD *)((char *)v27 + v24) = v16;
      int v28 = &v374 + (v21 + 3);
      *(_WORD *)((char *)v28 + v24) = v17;
      *(_WORD *)((char *)v27 + v26) = v19;
      *(_WORD *)((char *)v28 + v26) = v18;
      if (++v10 == 4)
      {
        *(_WORD *)a1 = v374;
        *(_WORD *)(a1 + 2) = v375;
        *(_WORD *)(a1 + 4) = v379;
        *(_WORD *)(a1 + 6) = v383;
        *(_WORD *)(a1 + 8) = v387;
        *(_WORD *)(a1 + 10) = v391;
        *(_WORD *)(a1 + 12) = v395;
        *(_WORD *)(a1 + 14) = v399;
        int16x8_t v188 = (_WORD *)(a1 + a2);
        *int16x8_t v188 = WORD1(v374);
        v188[1] = v376;
        v188[2] = v380;
        v188[3] = v384;
        v188[4] = v388;
        v188[5] = v392;
        v188[6] = v396;
        v188[7] = v400;
        int16x8_t v189 = (_WORD *)(a1 + a2 + a2);
        *int16x8_t v189 = WORD2(v374);
        v189[1] = v377;
        v189[2] = v381;
        v189[3] = v385;
        v189[4] = v389;
        v189[5] = v393;
        v189[6] = v397;
        v189[7] = v401;
        int16x8_t v190 = (_WORD *)((char *)v189 + a2);
        *int16x8_t v190 = HIWORD(v374);
        v190[1] = v378;
        v190[2] = v382;
        v190[3] = v386;
        v190[4] = v390;
        v190[5] = v394;
        v190[6] = v398;
        uint64_t v183 = 48;
        v190[7] = v402;
        return v183;
      }
    }
    uint64_t v43 = (*v30 >> v31) & 0xFLL;
    uint64_t v44 = v31 | 4;
    int v45 = &kDQuadParamTable[10 * v43];
    unsigned int v46 = v45[484] + 4;
    LODWORD(v45) = v45[485];
    BOOL v47 = v45 != 0;
    unsigned int v48 = v45 + 4;
    if (v46 >= 0x10) {
      uint64_t v49 = 16;
    }
    else {
      uint64_t v49 = v46;
    }
    if (16 * v47 >= v48) {
      unint64_t v50 = v48;
    }
    else {
      unint64_t v50 = (16 * v47);
    }
    if (v49)
    {
      if ((unint64_t)(v49 - v31 + v44) <= 0x60)
      {
        int v52 = 0;
        uint64_t v51 = 0;
        uint64_t v55 = 0;
        unint64_t v56 = v49;
        do
        {
          unint64_t v57 = 64 - v44;
          if (64 - v44 >= v56) {
            unint64_t v57 = v56;
          }
          v52 |= (unint64_t)((v30[v51] >> v44) & ~(-1 << v57)) << v55;
          v55 += v57;
          unint64_t v58 = v57 + v44;
          v51 += v58 >> 6;
          uint64_t v44 = v58 & 0x3F;
          v56 -= v57;
        }
        while (v56);
        int v53 = v49 + 4;
        if (!v50) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v51 = 0;
        int v52 = 0;
        int v53 = v49 + 4;
        if (!v50) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      int v52 = 0;
      uint64_t v51 = 0;
      int v53 = 4;
      if (!v50)
      {
LABEL_45:
        int v54 = 0;
        uint64_t v59 = 0;
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        int v406 = 0;
        uint64_t v405 = 0;
        goto LABEL_98;
      }
    }
    if ((unint64_t)(v44 - v31 + (v51 << 6) + 3) <= 0x60)
    {
      int v54 = 0;
      uint64_t v60 = 0;
      unint64_t v61 = 3;
      do
      {
        unint64_t v62 = 64 - v44;
        if (64 - v44 >= v61) {
          unint64_t v62 = v61;
        }
        v54 |= (unint64_t)((v30[v51] >> v44) & ~(-1 << v62)) << v60;
        v60 += v62;
        unint64_t v63 = v62 + v44;
        v51 += v63 >> 6;
        uint64_t v44 = v63 & 0x3F;
        v61 -= v62;
      }
      while (v61);
    }
    else
    {
      int v54 = 0;
    }
    uint64_t v403 = 0;
    uint64_t v404 = 0;
    int v406 = 0;
    uint64_t v405 = 0;
    unsigned int v64 = 93 - v53;
    unsigned int v65 = (93 - v53) / 7u;
    unint64_t v66 = v50 - v31;
    unint64_t v67 = (v44 | (v51 << 6)) + v64 % 7;
    unint64_t v68 = v67 & 0x3F;
    if (v66 + v68 + (v67 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      uint64_t v59 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = v67 >> 6;
      unint64_t v71 = v50;
      do
      {
        unint64_t v72 = 64 - v68;
        if (64 - v68 >= v71) {
          unint64_t v72 = v71;
        }
        v59 |= ((unint64_t)((v30[v70] >> v68) & ~(-1 << v72)) << v69);
        v69 += v72;
        unint64_t v73 = v72 + v68;
        v70 += v73 >> 6;
        unint64_t v68 = v73 & 0x3F;
        v71 -= v72;
      }
      while (v71);
      LODWORD(v403) = v59;
      unint64_t v67 = v68 | (v70 << 6);
    }
    else
    {
      uint64_t v59 = 0;
    }
    uint64_t v74 = v65 - v50;
    unint64_t v75 = v67 + v74;
    uint64_t v76 = (v67 + v74) & 0x3F;
    if (v66 + v76 + (v75 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v77 = 0;
      uint64_t v78 = 0;
      unint64_t v79 = v75 >> 6;
      unint64_t v80 = v50;
      do
      {
        unint64_t v81 = 64 - v76;
        if (64 - v76 >= v80) {
          unint64_t v81 = v80;
        }
        v77 |= (unint64_t)((v30[v79] >> v76) & ~(-1 << v81)) << v78;
        v78 += v81;
        unint64_t v82 = v81 + v76;
        v79 += v82 >> 6;
        uint64_t v76 = v82 & 0x3F;
        v80 -= v81;
      }
      while (v80);
      HIDWORD(v403) = v77;
      unint64_t v75 = v76 | (v79 << 6);
    }
    else
    {
      HIDWORD(v403) = 0;
    }
    unint64_t v83 = v75 + v74;
    uint64_t v84 = v83 & 0x3F;
    if (v66 + v84 + (v83 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v85 = 0;
      uint64_t v86 = 0;
      unint64_t v87 = v83 >> 6;
      unint64_t v88 = v50;
      do
      {
        unint64_t v89 = 64 - v84;
        if (64 - v84 >= v88) {
          unint64_t v89 = v88;
        }
        v85 |= (unint64_t)((v30[v87] >> v84) & ~(-1 << v89)) << v86;
        v86 += v89;
        unint64_t v90 = v89 + v84;
        v87 += v90 >> 6;
        uint64_t v84 = v90 & 0x3F;
        v88 -= v89;
      }
      while (v88);
      LODWORD(v404) = v85;
      unint64_t v83 = v84 | (v87 << 6);
    }
    else
    {
      LODWORD(v404) = 0;
    }
    unint64_t v91 = v83 + v74;
    uint64_t v92 = v91 & 0x3F;
    if (v66 + v92 + (v91 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v93 = 0;
      uint64_t v94 = 0;
      unint64_t v95 = v91 >> 6;
      unint64_t v96 = v50;
      do
      {
        unint64_t v97 = 64 - v92;
        if (64 - v92 >= v96) {
          unint64_t v97 = v96;
        }
        v93 |= (unint64_t)((v30[v95] >> v92) & ~(-1 << v97)) << v94;
        v94 += v97;
        unint64_t v98 = v97 + v92;
        v95 += v98 >> 6;
        uint64_t v92 = v98 & 0x3F;
        v96 -= v97;
      }
      while (v96);
      HIDWORD(v404) = v93;
      unint64_t v91 = v92 | (v95 << 6);
    }
    else
    {
      HIDWORD(v404) = 0;
    }
    unint64_t v99 = v91 + v74;
    uint64_t v100 = v99 & 0x3F;
    if (v66 + v100 + (v99 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v101 = 0;
      uint64_t v102 = 0;
      unint64_t v103 = v99 >> 6;
      unint64_t v104 = v50;
      do
      {
        unint64_t v105 = 64 - v100;
        if (64 - v100 >= v104) {
          unint64_t v105 = v104;
        }
        v101 |= (unint64_t)((v30[v103] >> v100) & ~(-1 << v105)) << v102;
        v102 += v105;
        unint64_t v106 = v105 + v100;
        v103 += v106 >> 6;
        uint64_t v100 = v106 & 0x3F;
        v104 -= v105;
      }
      while (v104);
      LODWORD(v405) = v101;
      unint64_t v99 = v100 | (v103 << 6);
    }
    else
    {
      LODWORD(v405) = 0;
    }
    unint64_t v107 = v99 + v74;
    unint64_t v108 = v107 >> 6;
    uint64_t v109 = v107 & 0x3F;
    if (v66 + v109 + (v107 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v110 = 0;
      uint64_t v111 = 0;
      unint64_t v112 = v50;
      do
      {
        unint64_t v113 = 64 - v109;
        if (64 - v109 >= v112) {
          unint64_t v113 = v112;
        }
        v110 |= (unint64_t)((v30[v108] >> v109) & ~(-1 << v113)) << v111;
        v111 += v113;
        unint64_t v114 = v113 + v109;
        v108 += v114 >> 6;
        uint64_t v109 = v114 & 0x3F;
        v112 -= v113;
      }
      while (v112);
    }
    else
    {
      int v110 = 0;
    }
    HIDWORD(v405) = v110;
    unint64_t v115 = (v109 | (v108 << 6)) + v74;
    uint64_t v116 = v115 & 0x3F;
    if (v66 + v116 + (v115 & 0xFFFFFFFFFFFFFFC0) <= 0x60)
    {
      int v117 = 0;
      uint64_t v118 = 0;
      unint64_t v119 = v115 >> 6;
      unint64_t v120 = v50;
      do
      {
        unint64_t v121 = 64 - v116;
        if (64 - v116 >= v120) {
          unint64_t v121 = v120;
        }
        v117 |= (unint64_t)((v30[v119] >> v116) & ~(-1 << v121)) << v118;
        v118 += v121;
        unint64_t v122 = v121 + v116;
        v119 += v122 >> 6;
        uint64_t v116 = v122 & 0x3F;
        v120 -= v121;
      }
      while (v120);
    }
    else
    {
      int v117 = 0;
    }
    int v406 = v117;
LABEL_98:
    char v123 = 16 - v49;
    uint64_t v124 = (v52 << (16 - v49));
    unint64_t v125 = *(void *)&kDQuadParamTable[10 * v43 + 482];
    if (v125 >> v50 <= 1) {
      unint64_t v126 = 1;
    }
    else {
      unint64_t v126 = v125 >> v50;
    }
    unint64_t v127 = v126 >> 1;
    unint64_t v128 = (unint64_t)(1 << v123) >> 1;
    if (v126 >> 1 < v128) {
      unint64_t v128 = v126 >> 1;
    }
    unint64_t v129 = 0x8000 - v124;
    if (!v124) {
      unint64_t v128 = 0;
    }
    BOOL v130 = v124 == 0x8000;
    if (v124 >= 0xFFFF) {
      int v131 = 0xFFFF;
    }
    else {
      int v131 = v124;
    }
    unsigned int v132 = v131 ^ 0x8000;
    if (v126 <= v129)
    {
      __int16 v133 = -1025;
    }
    else
    {
      unsigned int v132 = 0;
      __int16 v133 = 0;
    }
    if (v11 == 1)
    {
      __int16 v18 = v133;
    }
    else
    {
      unsigned int v132 = v131;
      __int16 v18 = 31743;
    }
    if (!v50)
    {
      if (v126 <= v129) {
        __int16 v139 = 31743;
      }
      else {
        __int16 v139 = 0;
      }
      if (v11 == 1) {
        LOWORD(v19) = v139;
      }
      else {
        LOWORD(v19) = -1025;
      }
      if (a5 == 4)
      {
        int v140 = v124 & 0xFFFFFE00;
        a4 = v368;
        if ((v124 & 0xFFFFFE00) == 0x7C00)
        {
          LOWORD(v19) = v18;
          LOWORD(v17) = v18;
          LOWORD(v16) = v18;
          LOWORD(v15) = v18;
          LOWORD(v14) = v18;
          LOWORD(v12) = v18;
          LOWORD(v13) = v18;
        }
        else if (v140 == 64512)
        {
          __int16 v18 = v19;
          LOWORD(v17) = v19;
          LOWORD(v16) = v19;
          LOWORD(v15) = v19;
          LOWORD(v14) = v19;
          LOWORD(v12) = v19;
          LOWORD(v13) = v19;
        }
        else
        {
          LOWORD(v13) = ((a5 & 0xFFFFFFFD) != 1) << 15;
          __int16 v18 = v13;
          LOWORD(v19) = v13;
          LOWORD(v17) = v13;
          LOWORD(v16) = v13;
          LOWORD(v15) = v13;
          LOWORD(v14) = v13;
          LOWORD(v12) = v13;
          if (v140 != 32256)
          {
            __int16 v18 = v132;
            LOWORD(v19) = v132;
            LOWORD(v17) = v132;
            LOWORD(v16) = v132;
            LOWORD(v15) = v132;
            LOWORD(v14) = v132;
            LOWORD(v12) = v132;
            LOWORD(v13) = v132;
          }
        }
      }
      else
      {
        __int16 v18 = v132;
        LOWORD(v19) = v132;
        LOWORD(v17) = v132;
        LOWORD(v16) = v132;
        int32x4_t v369 = vdupq_n_s32(v132);
        LOWORD(v15) = v132;
        LOWORD(v14) = v132;
        LOWORD(v12) = v132;
        LOWORD(v13) = v132;
        a4 = v368;
      }
      goto LABEL_5;
    }
    unint64_t v134 = v125 + v124;
    uint64_t v135 = ~(-1 << v50);
    unint64_t v136 = v129 / v126;
    if (v54)
    {
      BOOL v137 = v136 == v59;
      if (v124 || v59)
      {
        if (v134 >= 0x10000 && v59 == v135)
        {
          uint64_t v138 = 1;
          uint64_t v59 = 0xFFFFLL;
LABEL_136:
          unint64_t v141 = v59 + v124;
          if (a5 == 4)
          {
            unint64_t v142 = v141 & 0xFFFFFFFFFFFFFE00;
            if ((v141 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v141 = 31743;
            }
            else if (v142 == 32256)
            {
              unint64_t v141 = 0x8000;
            }
            else if (v142 == 64512)
            {
              unint64_t v141 = 64511;
            }
          }
          if (v141 >= 0xFFFF) {
            LODWORD(v141) = 0xFFFF;
          }
          if (v137) {
            __int32 v143 = 0;
          }
          else {
            __int32 v143 = v141 ^ 0x8000;
          }
          if (v11 == 1) {
            __int32 v13 = v143;
          }
          else {
            __int32 v13 = v141;
          }
          v369.i32[0] = v13;
          if (v54 == 1)
          {
            uint64_t v144 = v128;
            BOOL v145 = v124 == 0x8000;
          }
          else
          {
            uint64_t v146 = *(unsigned int *)((unint64_t)&v403 | (4 * v138));
            BOOL v145 = v136 == v146;
            if (v124 | v146)
            {
              if (v134 >= 0x10000 && v146 == v135) {
                uint64_t v144 = 0xFFFFLL;
              }
              else {
                uint64_t v144 = v127 + v126 * v146;
              }
            }
            else
            {
              uint64_t v144 = 0;
            }
            ++v138;
          }
          unint64_t v12 = v144 + v124;
          if (a5 == 4)
          {
            unint64_t v147 = v12 & 0xFFFFFFFFFFFFFE00;
            if ((v12 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v12 = 31743;
            }
            else if (v147 == 32256)
            {
              unint64_t v12 = 0x8000;
            }
            else if (v147 == 64512)
            {
              unint64_t v12 = 64511;
            }
          }
          if (v12 >= 0xFFFF) {
            LODWORD(v12) = 0xFFFF;
          }
          if (v145) {
            int v148 = 0;
          }
          else {
            int v148 = v12 ^ 0x8000;
          }
          if (v11 == 1) {
            LODWORD(v12) = v148;
          }
          v369.i32[1] = v12;
          if (v54 == 2)
          {
            uint64_t v149 = v128;
            BOOL v150 = v124 == 0x8000;
          }
          else
          {
            uint64_t v151 = *((unsigned int *)&v403 + v138);
            BOOL v150 = v136 == v151;
            if (v124 | v151)
            {
              if (v134 >= 0x10000 && v151 == v135) {
                uint64_t v149 = 0xFFFFLL;
              }
              else {
                uint64_t v149 = v127 + v126 * v151;
              }
            }
            else
            {
              uint64_t v149 = 0;
            }
            ++v138;
          }
          unint64_t v14 = v149 + v124;
          if (a5 == 4)
          {
            unint64_t v152 = v14 & 0xFFFFFFFFFFFFFE00;
            if ((v14 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v14 = 31743;
            }
            else if (v152 == 32256)
            {
              unint64_t v14 = 0x8000;
            }
            else if (v152 == 64512)
            {
              unint64_t v14 = 64511;
            }
          }
          if (v14 >= 0xFFFF) {
            LODWORD(v14) = 0xFFFF;
          }
          if (v150) {
            int v153 = 0;
          }
          else {
            int v153 = v14 ^ 0x8000;
          }
          if (v11 == 1) {
            LODWORD(v14) = v153;
          }
          v369.i32[2] = v14;
          if (v54 == 3)
          {
            uint64_t v154 = v128;
            BOOL v155 = v124 == 0x8000;
          }
          else
          {
            uint64_t v156 = *((unsigned int *)&v403 + v138);
            BOOL v155 = v136 == v156;
            if (v124 | v156)
            {
              if (v134 >= 0x10000 && v156 == v135) {
                uint64_t v154 = 0xFFFFLL;
              }
              else {
                uint64_t v154 = v127 + v126 * v156;
              }
            }
            else
            {
              uint64_t v154 = 0;
            }
            ++v138;
          }
          unint64_t v157 = v154 + v124;
          if (a5 == 4)
          {
            unint64_t v158 = v157 & 0xFFFFFFFFFFFFFE00;
            if ((v157 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v157 = 31743;
            }
            else if (v158 == 32256)
            {
              unint64_t v157 = 0x8000;
            }
            else if (v158 == 64512)
            {
              unint64_t v157 = 64511;
            }
          }
          if (v157 >= 0xFFFF) {
            int v159 = 0xFFFF;
          }
          else {
            int v159 = v157;
          }
          if (v155) {
            int v160 = 0;
          }
          else {
            int v160 = v159 ^ 0x8000;
          }
          if (v11 == 1) {
            int v15 = v160;
          }
          else {
            int v15 = v159;
          }
          v369.i32[3] = v15;
          if (v54 == 4)
          {
            uint64_t v161 = v128;
            BOOL v162 = v124 == 0x8000;
          }
          else
          {
            uint64_t v163 = *((unsigned int *)&v403 + v138);
            BOOL v162 = v136 == v163;
            if (v124 | v163)
            {
              if (v134 >= 0x10000 && v163 == v135) {
                uint64_t v161 = 0xFFFFLL;
              }
              else {
                uint64_t v161 = v127 + v126 * v163;
              }
            }
            else
            {
              uint64_t v161 = 0;
            }
            ++v138;
          }
          unint64_t v164 = v161 + v124;
          if (a5 == 4)
          {
            unint64_t v165 = v164 & 0xFFFFFFFFFFFFFE00;
            if ((v164 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v164 = 31743;
            }
            else if (v165 == 32256)
            {
              unint64_t v164 = 0x8000;
            }
            else if (v165 == 64512)
            {
              unint64_t v164 = 64511;
            }
          }
          if (v164 >= 0xFFFF) {
            int v166 = 0xFFFF;
          }
          else {
            int v166 = v164;
          }
          if (v162) {
            int v16 = 0;
          }
          else {
            int v16 = v166 ^ 0x8000;
          }
          if (v11 != 1) {
            int v16 = v166;
          }
          int v370 = v16;
          if (v54 == 5)
          {
            uint64_t v167 = v128;
            BOOL v168 = v124 == 0x8000;
          }
          else
          {
            uint64_t v169 = *((unsigned int *)&v403 + v138);
            BOOL v168 = v136 == v169;
            if (v124 | v169)
            {
              if (v134 >= 0x10000 && v169 == v135) {
                uint64_t v167 = 0xFFFFLL;
              }
              else {
                uint64_t v167 = v127 + v126 * v169;
              }
            }
            else
            {
              uint64_t v167 = 0;
            }
            ++v138;
          }
          unint64_t v170 = v167 + v124;
          if (a5 == 4)
          {
            unint64_t v171 = v170 & 0xFFFFFFFFFFFFFE00;
            if ((v170 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v170 = 31743;
            }
            else if (v171 == 32256)
            {
              unint64_t v170 = 0x8000;
            }
            else if (v171 == 64512)
            {
              unint64_t v170 = 64511;
            }
          }
          if (v170 >= 0xFFFF) {
            int v172 = 0xFFFF;
          }
          else {
            int v172 = v170;
          }
          if (v168) {
            int v17 = 0;
          }
          else {
            int v17 = v172 ^ 0x8000;
          }
          if (v11 != 1) {
            int v17 = v172;
          }
          int v371 = v17;
          if (v54 == 6)
          {
            uint64_t v173 = v128;
            BOOL v174 = v124 == 0x8000;
          }
          else
          {
            uint64_t v175 = *((unsigned int *)&v403 + v138);
            BOOL v174 = v136 == v175;
            if (v124 | v175)
            {
              if (v134 >= 0x10000 && v175 == v135) {
                uint64_t v173 = 0xFFFFLL;
              }
              else {
                uint64_t v173 = v127 + v126 * v175;
              }
            }
            else
            {
              uint64_t v173 = 0;
            }
            ++v138;
          }
          unint64_t v176 = v173 + v124;
          if (a5 == 4)
          {
            unint64_t v177 = v176 & 0xFFFFFFFFFFFFFE00;
            if ((v176 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v176 = 31743;
            }
            else if (v177 == 32256)
            {
              unint64_t v176 = 0x8000;
            }
            else if (v177 == 64512)
            {
              unint64_t v176 = 64511;
            }
          }
          if (v176 >= 0xFFFF) {
            int v178 = 0xFFFF;
          }
          else {
            int v178 = v176;
          }
          int v179 = v178 ^ 0x8000;
          if (v174) {
            int v179 = 0;
          }
          if (v11 == 1) {
            int v19 = v179;
          }
          else {
            int v19 = v178;
          }
          int v372 = v19;
          a4 = v368;
          if (v54 != 7)
          {
            uint64_t v180 = *((unsigned int *)&v403 + v138);
            BOOL v130 = v136 == v180;
            if (v124 | v180)
            {
              if (v134 >= 0x10000 && v180 == v135) {
                unint64_t v128 = 0xFFFFLL;
              }
              else {
                unint64_t v128 = v127 + v126 * v180;
              }
            }
            else
            {
              unint64_t v128 = 0;
            }
          }
          unint64_t v181 = v128 + v124;
          int8x16_t v9 = a3;
          if (a5 == 4)
          {
            unint64_t v182 = v181 & 0xFFFFFFFFFFFFFE00;
            if ((v181 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v181 = 31743;
            }
            else if (v182 == 32256)
            {
              unint64_t v181 = 0x8000;
            }
            else if (v182 == 64512)
            {
              unint64_t v181 = 64511;
            }
          }
          if (v181 >= 0xFFFF) {
            LOWORD(v181) = -1;
          }
          __int16 v18 = v181 ^ 0x8000;
          if (v130) {
            __int16 v18 = 0;
          }
          if (v11 != 1) {
            __int16 v18 = v181;
          }
          goto LABEL_5;
        }
        uint64_t v59 = v127 + v126 * v59;
      }
      uint64_t v138 = 1;
      goto LABEL_136;
    }
    uint64_t v138 = 0;
    uint64_t v59 = v128;
    BOOL v137 = v124 == 0x8000;
    goto LABEL_136;
  }
  if (a4 == 63)
  {
    int32x4_t v191 = *a3;
    int32x4_t v192 = a3[1];
    int32x4_t v193 = a3[2];
    int32x4_t v194 = a3[3];
    *(int32x4_t *)a1 = vuzp1q_s32(*a3, v193);
    *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v191, v193);
    int16x8_t v195 = (int32x4_t *)(a1 + 2 * a2);
    *int16x8_t v195 = vuzp1q_s32(v192, v194);
    *(int32x4_t *)((char *)v195 + a2) = vuzp2q_s32(v192, v194);
    return 64;
  }
  if (a4 == 1)
  {
    int16x8_t v187 = vld1q_dup_s16(a3->i16);
    *(int16x8_t *)a1 = v187;
    *(int16x8_t *)(a1 + a2) = v187;
    *(int16x8_t *)(a1 + 2 * a2) = v187;
    *(int16x8_t *)(a1 + 3 * a2) = v187;
    return 2;
  }
  unint64_t v196 = 8 * (a3 & 7);
  unint64_t v197 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v198 = v196 + 22;
  unint64_t v199 = *(void *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) >> v196;
  if (v196 >= 0x2B) {
    v199 |= *(void *)(v197 + 8) << (-8 * (a3 & 7u));
  }
  unint64_t v200 = (8 * (a3 & 7)) | 0x180;
  int v201 = (a4 >> 6) | (4 * v199);
  uint16x8_t v202 = (uint16x8_t)vdupq_n_s16(v201 & 0xF);
  a9.i32[0] = v201 & 0xF;
  v203.i64[0] = 0x3000300030003;
  v203.i64[1] = 0x3000300030003;
  int8x16_t v204 = vbicq_s8((int8x16_t)vdupq_n_s16(((v199 >> 2) & 0xF) + 1), (int8x16_t)vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v203));
  int8x16_t v205 = vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16(vdup_lane_s16((int16x4_t)vand_s8(a9, (int8x8_t)0x4000400040004), 0))));
  v206.i64[0] = 0x202020202020202;
  v206.i64[1] = 0x202020202020202;
  int8x16_t v207 = vandq_s8(v205, v206);
  if (vmaxvq_s8(v207) < 1)
  {
    int v217 = 0;
    v218.i64[0] = -1;
    v218.i64[1] = -1;
    int8x16_t v219 = v204;
    int8x16_t v220 = v204;
    int8x16_t v221 = v204;
    v222.i64[0] = -1;
    v222.i64[1] = -1;
    int8x16_t v223 = v204;
    v224.i64[0] = -1;
    v224.i64[1] = -1;
    v225.i64[0] = -1;
    v225.i64[1] = -1;
  }
  else
  {
    int8x16_t v208 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v207, v207));
    int8x16_t v209 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v208, (int16x8_t)v208));
    unint64_t v210 = vpaddq_s32((int32x4_t)v209, (int32x4_t)v209).u64[0];
    v211.i64[0] = v210;
    v211.i64[1] = HIDWORD(v210);
    int64x2_t v212 = v211;
    unint64_t v213 = vaddvq_s64(v211);
    unint64_t v214 = v213 + v198;
    if (v213 <= 0x80 && v200 >= v214)
    {
      int64x2_t v226 = vaddq_s64(vzip1q_s64((int64x2_t)0, v212), vdupq_n_s64(v198 & 0x3E));
      int8x16_t v227 = (int64x2_t *)(v197 + ((v198 >> 3) & 8));
      int8x16_t v216 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v227, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227->i64[0], 0), (uint64x2_t)vnegq_s64(v226)));
      if (v213 + (v198 & 0x3E) < 0x81)
      {
        int v217 = 0;
      }
      else
      {
        int v217 = 0;
        int8x16_t v216 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v227[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v226))), v216);
      }
      unint64_t v198 = v214;
    }
    else
    {
      int8x16_t v216 = 0uLL;
      int v217 = 1;
    }
    int32x2_t v228 = vzip1_s32(*(int32x2_t *)v209.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL));
    v229.i64[0] = v228.u32[0];
    v229.i64[1] = v228.u32[1];
    int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v216, (uint64x2_t)vnegq_s64(v229));
    *(int32x2_t *)v216.i8 = vmovn_s64((int64x2_t)v216);
    *(int32x2_t *)v230.i8 = vmovn_s64(v230);
    int8x16_t v231 = (int8x16_t)vzip1q_s32((int32x4_t)v216, (int32x4_t)v230);
    int16x8_t v232 = (int16x8_t)vshlq_u32((uint32x4_t)v231, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v208.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL)))));
    *(int16x4_t *)v231.i8 = vmovn_s32((int32x4_t)v231);
    *(int16x4_t *)v232.i8 = vmovn_s32((int32x4_t)v232);
    int8x16_t v233 = (int8x16_t)vzip1q_s16((int16x8_t)v231, v232);
    *(int8x8_t *)v233.i8 = vzip1_s8(vmovn_s16((int16x8_t)v233), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v233, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v207.i8, *(int8x8_t *)v202.i8))))));
    v231.i64[0] = 0x101010101010101;
    v231.i64[1] = 0x101010101010101;
    int8x16_t v234 = vshlq_s8(v231, v207);
    v231.i64[0] = -1;
    v231.i64[1] = -1;
    v234.i32[0] = vandq_s8(v233, vaddq_s8(v234, v231)).u32[0];
    int16x8_t v235 = vdupq_n_s16(v234.i8[0]);
    int16x8_t v236 = vdupq_n_s16(v234.i8[1]);
    int16x8_t v237 = vdupq_n_s16(v234.i8[2]);
    int16x8_t v238 = vdupq_n_s16(v234.i8[3]);
    int8x16_t v223 = (int8x16_t)vsubq_s16((int16x8_t)v204, v235);
    int8x16_t v221 = (int8x16_t)vsubq_s16((int16x8_t)v204, v236);
    int8x16_t v220 = (int8x16_t)vsubq_s16((int16x8_t)v204, v237);
    int8x16_t v219 = (int8x16_t)vsubq_s16((int16x8_t)v204, v238);
    int8x16_t v225 = (int8x16_t)vceqzq_s16(v235);
    int8x16_t v224 = (int8x16_t)vceqzq_s16(v236);
    int8x16_t v222 = (int8x16_t)vceqzq_s16(v237);
    int8x16_t v218 = (int8x16_t)vceqzq_s16(v238);
  }
  v239.i64[0] = 0x7000700070007;
  v239.i64[1] = 0x7000700070007;
  int8x16_t v240 = 0uLL;
  int8x16_t v241 = vandq_s8(vextq_s8((int8x16_t)vcgtq_u16(v202, v239), (int8x16_t)0, 0xEuLL), v204);
  int8x16_t v242 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v241, (int16x8_t)v241));
  unint64_t v243 = vpaddq_s32((int32x4_t)v242, (int32x4_t)v242).u64[0];
  v244.i64[0] = v243;
  v244.i64[1] = HIDWORD(v243);
  int64x2_t v245 = v244;
  unint64_t v246 = vaddvq_s64(v244);
  if (v246 <= 0x80 && v200 >= v246 + v198)
  {
    int64x2_t v248 = vaddq_s64(vzip1q_s64((int64x2_t)0, v245), vdupq_n_s64(v198 & 0x3F));
    int16x8_t v249 = (int64x2_t *)(v197 + 8 * (v198 >> 6));
    int8x16_t v240 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v249, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249->i64[0], 0), (uint64x2_t)vnegq_s64(v248)));
    if (v246 + (v198 & 0x3F) >= 0x81) {
      int8x16_t v240 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v249[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v248))), v240);
    }
    v198 += v246;
  }
  else
  {
    int v217 = 1;
  }
  int v250 = a4 >> 6;
  if (v250 != 2)
  {
    LODWORD(v253) = 0;
    LODWORD(v252) = 0;
    unint64_t v254 = v198;
    goto LABEL_355;
  }
  unint64_t v251 = v198 + 8;
  if (v200 < v198 + 8)
  {
    LODWORD(v252) = 0;
    unint64_t v251 = v198;
LABEL_354:
    LODWORD(v253) = 0;
    int v217 = 1;
    unint64_t v254 = v251;
    goto LABEL_355;
  }
  uint64_t v252 = *(void *)(v197 + 8 * (v198 >> 6)) >> v198;
  if ((v198 & 0x3F) >= 0x39) {
    v252 |= *(void *)(v197 + 8 * (v198 >> 6) + 8) << -(v198 & 0x3F);
  }
  unint64_t v254 = v198 + 16;
  LODWORD(v252) = (char)v252;
  if (v200 < v198 + 16) {
    goto LABEL_354;
  }
  uint64_t v253 = *(void *)(v197 + 8 * (v251 >> 6)) >> v251;
  if ((v251 & 0x3F) >= 0x39) {
    v253 |= *(void *)(v197 + 8 * (v251 >> 6) + 8) << -(v251 & 0x3F);
  }
  LODWORD(v253) = (char)v253;
LABEL_355:
  int8x16_t v255 = 0uLL;
  int8x16_t v256 = vextq_s8((int8x16_t)0, v223, 0xEuLL);
  int8x16_t v257 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v256, (int16x8_t)v256));
  unint64_t v258 = vpaddq_s32((int32x4_t)v257, (int32x4_t)v257).u64[0];
  v259.i64[0] = v258;
  v259.i64[1] = HIDWORD(v258);
  int64x2_t v260 = v259;
  unint64_t v261 = vaddvq_s64(v259);
  unint64_t v262 = v261 + v254;
  if (v261 <= 0x80 && v200 >= v262)
  {
    unint64_t v265 = v254 & 0x3F;
    int64x2_t v266 = vaddq_s64(vzip1q_s64((int64x2_t)0, v260), vdupq_n_s64(v265));
    unint64_t v267 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v264 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v267, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267->i64[0], 0), (uint64x2_t)vnegq_s64(v266)));
    if (v261 + v265 >= 0x81) {
      int8x16_t v264 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v267[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v266))), v264);
    }
    unint64_t v254 = v262;
  }
  else
  {
    int v217 = 1;
    int8x16_t v264 = 0uLL;
  }
  int8x16_t v268 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v221, (int16x8_t)v221));
  unint64_t v269 = vpaddq_s32((int32x4_t)v268, (int32x4_t)v268).u64[0];
  v270.i64[0] = v269;
  v270.i64[1] = HIDWORD(v269);
  int64x2_t v271 = v270;
  unint64_t v272 = vaddvq_s64(v270);
  if (v272 < 0x81)
  {
    int32x2_t v273 = vzip1_s32(*(int32x2_t *)v268.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL));
    v274.i64[0] = v273.u32[0];
    v274.i64[1] = v273.u32[1];
    int64x2_t v275 = v274;
    int32x4_t v276 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v221.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL)));
    unint64_t v277 = v272 + v254;
    if (v200 >= v272 + v254)
    {
      unint64_t v278 = v254 & 0x3F;
      int64x2_t v279 = vaddq_s64(vzip1q_s64((int64x2_t)0, v271), vdupq_n_s64(v278));
      int64x2_t v280 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v255 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v280, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280->i64[0], 0), (uint64x2_t)vnegq_s64(v279)));
      if (v272 + v278 >= 0x81) {
        int8x16_t v255 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v280[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v279))), v255);
      }
      unint64_t v254 = v277;
    }
    else
    {
      int v217 = 1;
    }
    int64x2_t v281 = (int64x2_t)vshlq_u64((uint64x2_t)v255, (uint64x2_t)vnegq_s64(v275));
    *(int32x2_t *)v255.i8 = vmovn_s64((int64x2_t)v255);
    *(int32x2_t *)v281.i8 = vmovn_s64(v281);
    int16x8_t v282 = (int16x8_t)vzip1q_s32((int32x4_t)v255, (int32x4_t)v281);
    int16x8_t v283 = (int16x8_t)vshlq_u32((uint32x4_t)v282, (uint32x4_t)vnegq_s32(v276));
    *(int16x4_t *)v282.i8 = vmovn_s32((int32x4_t)v282);
    *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
    int8x16_t v255 = (int8x16_t)vzip1q_s16(v282, v283);
  }
  else
  {
    int v217 = 1;
  }
  int8x16_t v284 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v220, (int16x8_t)v220));
  unint64_t v285 = vpaddq_s32((int32x4_t)v284, (int32x4_t)v284).u64[0];
  v286.i64[0] = v285;
  v286.i64[1] = HIDWORD(v285);
  int64x2_t v287 = v286;
  unint64_t v288 = vaddvq_s64(v286);
  int8x16_t v289 = 0uLL;
  if (v288 <= 0x80)
  {
    int32x2_t v291 = vzip1_s32(*(int32x2_t *)v284.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v284, v284, 8uLL));
    v292.i64[0] = v291.u32[0];
    v292.i64[1] = v291.u32[1];
    int64x2_t v293 = v292;
    int32x4_t v294 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v220.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)));
    unint64_t v295 = v288 + v254;
    if (v200 >= v288 + v254)
    {
      unint64_t v297 = v254 & 0x3F;
      int64x2_t v298 = vaddq_s64(vzip1q_s64((int64x2_t)0, v287), vdupq_n_s64(v297));
      uint64x2_t v299 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v296 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v299, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299->i64[0], 0), (uint64x2_t)vnegq_s64(v298)));
      if (v288 + v297 >= 0x81) {
        int8x16_t v296 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v299[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v298))), v296);
      }
      unint64_t v254 = v295;
    }
    else
    {
      int8x16_t v296 = 0uLL;
      int v217 = 1;
    }
    int64x2_t v300 = (int64x2_t)vshlq_u64((uint64x2_t)v296, (uint64x2_t)vnegq_s64(v293));
    *(int32x2_t *)v296.i8 = vmovn_s64((int64x2_t)v296);
    *(int32x2_t *)v300.i8 = vmovn_s64(v300);
    int16x8_t v301 = (int16x8_t)vzip1q_s32((int32x4_t)v296, (int32x4_t)v300);
    int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v301, (uint32x4_t)vnegq_s32(v294));
    *(int16x4_t *)v301.i8 = vmovn_s32((int32x4_t)v301);
    *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
    int16x8_t v290 = vzip1q_s16(v301, v302);
  }
  else
  {
    int v217 = 1;
    int16x8_t v290 = 0uLL;
  }
  int8x16_t v303 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v219, (int16x8_t)v219));
  unint64_t v304 = vpaddq_s32((int32x4_t)v303, (int32x4_t)v303).u64[0];
  v305.i64[0] = v304;
  v305.i64[1] = HIDWORD(v304);
  int64x2_t v306 = v305;
  unint64_t v307 = vaddvq_s64(v305);
  if (v307 > 0x80) {
    goto LABEL_387;
  }
  if (v200 >= v307 + v254)
  {
    int64x2_t v308 = vaddq_s64(vzip1q_s64((int64x2_t)0, v306), vdupq_n_s64(v254 & 0x3F));
    unint64_t v309 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v289 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v309, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309->i64[0], 0), (uint64x2_t)vnegq_s64(v308)));
    if (v307 + (v254 & 0x3F) >= 0x81) {
      int8x16_t v289 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v309[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v308))), v289);
    }
    v254 += v307;
  }
  else
  {
    int v217 = 1;
  }
  if (v217 || (uint64_t v183 = (a4 & 0x3F) + 1, 8 * ((a3 & 7) + v183) - v254 >= 9))
  {
LABEL_387:
    uint64_t v183 = 0;
    v374 |= 0xFFFFLL << ((8 * &v374) & 0x30);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v310 = (void *)(a1 + a2);
    unint64_t v311 = (void *)(a1 + 2 * a2);
    *int16x8_t v310 = 0;
    v310[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
    *unint64_t v311 = 0;
    v311[1] = 0;
    goto LABEL_388;
  }
  int32x2_t v313 = vzip1_s32(*(int32x2_t *)v242.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
  int32x2_t v314 = vzip1_s32(*(int32x2_t *)v257.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
  v315.i64[0] = v313.u32[0];
  v315.i64[1] = v313.u32[1];
  int64x2_t v316 = v315;
  v315.i64[0] = v314.u32[0];
  v315.i64[1] = v314.u32[1];
  int64x2_t v317 = (int64x2_t)vshlq_u64((uint64x2_t)v240, (uint64x2_t)vnegq_s64(v316));
  int64x2_t v318 = (int64x2_t)vshlq_u64((uint64x2_t)v264, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v240);
  *(int32x2_t *)v317.i8 = vmovn_s64(v317);
  *(int32x2_t *)v264.i8 = vmovn_s64((int64x2_t)v264);
  *(int32x2_t *)v318.i8 = vmovn_s64(v318);
  int16x8_t v319 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v317);
  int16x8_t v320 = (int16x8_t)vzip1q_s32((int32x4_t)v264, (int32x4_t)v318);
  int16x8_t v321 = (int16x8_t)vshlq_u32((uint32x4_t)v319, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v241.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v241, v241, 8uLL)))));
  int16x8_t v322 = (int16x8_t)vshlq_u32((uint32x4_t)v320, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v256.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL)))));
  *(int16x4_t *)v319.i8 = vmovn_s32((int32x4_t)v319);
  *(int16x4_t *)v321.i8 = vmovn_s32((int32x4_t)v321);
  *(int16x4_t *)v320.i8 = vmovn_s32((int32x4_t)v320);
  *(int16x4_t *)v322.i8 = vmovn_s32((int32x4_t)v322);
  v323.i64[0] = 0x10001000100010;
  v323.i64[1] = 0x10001000100010;
  v324.i64[0] = 0x10001000100010;
  v324.i64[1] = 0x10001000100010;
  unint64_t v325 = v199 >> 6;
  int16x8_t v326 = vzip1q_s16(v319, v321);
  v321.i64[0] = 0xF000F000F000FLL;
  v321.i64[1] = 0xF000F000F000FLL;
  int16x8_t v327 = vsubq_s16(v323, (int16x8_t)v241);
  int16x8_t v328 = vzip1q_s16(v320, v322);
  v322.i64[0] = 0xF000F000F000FLL;
  v322.i64[1] = 0xF000F000F000FLL;
  int32x2_t v329 = vzip1_s32(*(int32x2_t *)v303.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
  v330.i64[0] = 0xF000F000F000FLL;
  v330.i64[1] = 0xF000F000F000FLL;
  v331.i64[0] = 0x10001000100010;
  v331.i64[1] = 0x10001000100010;
  int16x8_t v332 = vaddq_s16((int16x8_t)v241, v321);
  int16x8_t v333 = vaddq_s16((int16x8_t)v256, v322);
  int16x8_t v334 = vshlq_s16(v328, vsubq_s16(v324, (int16x8_t)v256));
  v315.i64[0] = v329.u32[0];
  v315.i64[1] = v329.u32[1];
  int8x16_t v335 = (int8x16_t)vshlq_s16(vshlq_s16(v326, v327), v332);
  int16x8_t v336 = vshlq_s16(v334, v333);
  int16x8_t v337 = vshlq_s16(vshlq_s16((int16x8_t)v255, vsubq_s16(v324, (int16x8_t)v221)), vaddq_s16((int16x8_t)v221, v322));
  int16x8_t v338 = vshlq_s16(vshlq_s16(v290, vsubq_s16(v324, (int16x8_t)v220)), vaddq_s16((int16x8_t)v220, v322));
  int64x2_t v339 = (int64x2_t)vshlq_u64((uint64x2_t)v289, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v334.i8 = vmovn_s64((int64x2_t)v289);
  *(int32x2_t *)v339.i8 = vmovn_s64(v339);
  int16x8_t v340 = (int16x8_t)vzip1q_s32((int32x4_t)v334, (int32x4_t)v339);
  int16x8_t v341 = (int16x8_t)vshlq_u32((uint32x4_t)v340, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v219.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL)))));
  *(int16x4_t *)v340.i8 = vmovn_s32((int32x4_t)v340);
  *(int16x4_t *)v341.i8 = vmovn_s32((int32x4_t)v341);
  int16x8_t v342 = vshlq_s16(vshlq_s16(vzip1q_s16(v340, v341), vsubq_s16(v331, (int16x8_t)v219)), vaddq_s16((int16x8_t)v219, v330));
  if (v250 == 2)
  {
    v343.i64[0] = 0xFFFFFFFF00000000;
    v343.i64[1] = 0xFFFFFFFF00000000;
    int16x8_t v344 = vmlal_s8((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v253), v343), vdup_n_s8(v252), (int8x8_t)0x302030201000100);
    int16x8_t v336 = vaddq_s16(v336, v344);
    int16x8_t v337 = vaddq_s16(vaddq_s16(vdupq_n_s16(2 * (int)v253), v344), v337);
    int16x8_t v338 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252), v344), v338);
    int16x8_t v342 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252 + 2 * (int)v253), v344), v342);
  }
  int16x8_t v345 = vdupq_n_s16(v325);
  int16x8_t v346 = vaddq_s16((int16x8_t)vandq_s8(v335, v225), v336);
  int8x16_t v347 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v335.i8, 0);
  int8x16_t v348 = (int8x16_t)vsubq_s16(v346, (int16x8_t)vandq_s8(v347, v225));
  int8x16_t v349 = (int8x16_t)vsubq_s16(v337, (int16x8_t)vandq_s8(v347, v224));
  int8x16_t v350 = (int8x16_t)vsubq_s16(v338, (int16x8_t)vandq_s8(v347, v222));
  int8x16_t v351 = (int8x16_t)vsubq_s16(v342, (int16x8_t)vandq_s8(v347, v218));
  v352.i64[0] = 0x1000100010001;
  v352.i64[1] = 0x1000100010001;
  if (vaddvq_s16(vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v352)))
  {
    int8x16_t v353 = v348;
    v353.i16[0] = v348.i16[7];
    v353.i16[7] = v348.i16[0];
    int8x16_t v354 = (int8x16_t)vnegq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
    int8x16_t v355 = vbslq_s8(v354, v353, v348);
    int8x16_t v356 = (int8x16_t)vaddq_s16((int16x8_t)v355, (int16x8_t)vandq_s8(vqtbl1q_s8(v355, (int8x16_t)xmmword_242EA7480), v354));
    int8x16_t v348 = (int8x16_t)vaddq_s16((int16x8_t)v356, (int16x8_t)vandq_s8(vqtbl1q_s8(v356, (int8x16_t)xmmword_242EA7490), v354));
    int8x16_t v357 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v349, (int8x16_t)xmmword_242EA74A0), v354), (int16x8_t)v349);
    int8x16_t v349 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v357, (int8x16_t)xmmword_242EA74B0), v354), (int16x8_t)v357);
    int8x16_t v358 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v350, (int8x16_t)xmmword_242EA74C0), v354), (int16x8_t)v350);
    int8x16_t v350 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v358, (int8x16_t)xmmword_242EA74D0), v354), (int16x8_t)v358);
    int8x16_t v359 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v351, (int8x16_t)xmmword_242EA74E0), v354), (int16x8_t)v351);
    int8x16_t v351 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v359, (int8x16_t)xmmword_242EA74F0), v354), (int16x8_t)v359);
  }
  int32x4_t v360 = (int32x4_t)vaddq_s16(v345, (int16x8_t)v348);
  int32x4_t v361 = (int32x4_t)vaddq_s16((int16x8_t)v349, v345);
  int32x4_t v362 = (int32x4_t)vaddq_s16((int16x8_t)v350, v345);
  int32x4_t v363 = (int32x4_t)vaddq_s16((int16x8_t)v351, v345);
  *(int32x4_t *)a1 = vuzp1q_s32(v360, v362);
  *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v360, v362);
  unint64_t v364 = (int32x4_t *)(a1 + 2 * a2);
  *unint64_t v364 = vuzp1q_s32(v361, v363);
  *(int32x4_t *)((char *)v364 + a2) = vuzp2q_s32(v361, v363);
  return v183;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(unint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  uint64_t v16 = a3;
  __int16 v18 = (int32x4_t *)result;
  if (a5 >= 8) {
    unsigned int v19 = 8;
  }
  else {
    unsigned int v19 = a5;
  }
  if (a6 >= 4) {
    unsigned int v20 = 4;
  }
  else {
    unsigned int v20 = a6;
  }
  if (v19 && v20)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(a3, a4, (int32x4_t *)result, a2, v19, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *a4 = 0;
  }
  uint64_t v21 = a4 + 1;
  if (a5 <= 8) {
    int v22 = 8;
  }
  else {
    int v22 = a5;
  }
  unsigned int v23 = v22 - 8;
  if (v23 >= 8) {
    int v24 = 8;
  }
  else {
    int v24 = v23;
  }
  if (v24 && v20)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v21, v18 + 1, a2, v24, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *uint64_t v21 = 0;
  }
  uint64_t v25 = 4 * a2;
  uint64_t v26 = a4 + 2;
  if (a6 <= 4) {
    int v27 = 4;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 4;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v19 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v26, (int32x4_t *)((char *)v18 + v25), a2, v19, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    int v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v26 = 0;
    int v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v30, (int32x4_t *)((char *)v18 + v25 + 16), a2, v24, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int v30 = 0;
LABEL_35:
  uint64_t v31 = a4 + 4;
  if (a6 <= 8) {
    int v32 = 8;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 8;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v19 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v31, (int32x4_t *)((char *)v18 + 8 * a2), a2, v19, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    __int16 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  else
  {
    *uint64_t v31 = 0;
    __int16 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  if (v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v35, (int32x4_t *)((char *)v18 + 8 * a2 + 16), a2, v24, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_49;
  }
LABEL_48:
  *__int16 v35 = 0;
LABEL_49:
  int v36 = a4 + 6;
  if (a6 <= 12) {
    int v37 = 12;
  }
  else {
    int v37 = a6;
  }
  unsigned int v38 = v37 - 12;
  if (v38 >= 4) {
    int v39 = 4;
  }
  else {
    int v39 = v38;
  }
  if (v19 && v39)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v36, (int32x4_t *)((char *)v18 + 12 * a2), a2, v19, v39, a7, a8, a9, a10, a11, a12);
    v16 += result;
    unint64_t v40 = a4 + 7;
    if (!v24) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v36 = 0;
    unint64_t v40 = a4 + 7;
    if (!v24)
    {
LABEL_64:
      *unint64_t v40 = 0;
      return result;
    }
  }
  if (!v39) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v16, v40, (int32x4_t *)((char *)v18 + 12 * a2 + 16), a2, v24, v39, a7, a8, a9, a10, a11, a12);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(uint64_t a1, int32x4_t *a2, unsigned __int8 *a3, int a4, double a5, double a6, double a7, int8x8_t a8)
{
  unsigned int v11 = (int32x4_t *)((char *)a2
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1, 32, a2, *a3, a4, a5, a6, a7, a8));
  uint64_t v16 = (int32x4_t *)((char *)v11
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 16, 32, v11, a3[1], a4, v12, v13, v14, v15));
  uint64_t v21 = (int32x4_t *)((char *)v16
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 128, 32, v16, a3[2], a4, v17, v18, v19, v20));
  uint64_t v26 = (int32x4_t *)((char *)v21
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 144, 32, v21, a3[3], a4, v22, v23, v24, v25));
  uint64_t v31 = (int32x4_t *)((char *)v26
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 256, 32, v26, a3[4], a4, v27, v28, v29, v30));
  int v36 = (int32x4_t *)((char *)v31
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 272, 32, v31, a3[5], a4, v32, v33, v34, v35));
  unint64_t v41 = (int32x4_t *)((char *)v36
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 384, 32, v36, a3[6], a4, v37, v38, v39, v40));
  unsigned int v46 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 400, 32, v41, v46, a4, v42, v43, v44, v45);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(uint64_t a1, unsigned char *a2, int32x4_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  int32x4_t v13 = *(int32x4_t *)((char *)a3 + a4);
  int8x16_t v14 = (int8x16_t)vzip1q_s32(*a3, v13);
  int16x8_t v15 = (int16x8_t)vzip2q_s32(*a3, v13);
  uint64_t v16 = (int32x4_t *)((char *)a3 + 2 * a4);
  int32x4_t v17 = *v16;
  int32x4_t v18 = *(int32x4_t *)((char *)v16 + a4);
  int16x8_t v19 = (int16x8_t)vzip1q_s32(*v16, v18);
  int16x8_t v20 = (int16x8_t)vzip2q_s32(*v16, v18);
  int8x16_t v21 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v14.i8, 0);
  int16x8_t v22 = vsubq_s16((int16x8_t)v14, (int16x8_t)v21);
  int16x8_t v23 = vsubq_s16(v19, (int16x8_t)v21);
  int8x16_t v24 = (int8x16_t)vsubq_s16(v15, (int16x8_t)v21);
  int8x16_t v25 = (int8x16_t)vsubq_s16(v20, (int16x8_t)v21);
  v17.i16[0] = vmaxvq_s16(v22);
  v18.i16[0] = vminvq_s16(v22);
  int16x8_t v26 = vdupq_lane_s16(*(int16x4_t *)v17.i8, 0);
  int16x8_t v27 = vdupq_lane_s16(*(int16x4_t *)v18.i8, 0);
  v28.i64[0] = 0x8000800080008000;
  v28.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v26, v28);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  int16x8_t v31 = vminq_s16(v27, v30);
  int16x8_t v32 = vzip1q_s16(v26, v27);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v32);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v32)), v33);
  v33.i16[0] = vmaxvq_s16(v23);
  a12.i16[0] = vminvq_s16(v23);
  int16x8_t v36 = vdupq_lane_s16(*(int16x4_t *)v33.i8, 0);
  int16x8_t v37 = vdupq_lane_s16(a12, 0);
  int16x8_t v38 = vpmaxq_s16(v35, v35);
  int16x8_t v39 = vmaxq_s16(v29, v36);
  int16x8_t v40 = vminq_s16(v31, v37);
  int16x8_t v41 = vzip1q_s16(v36, v37);
  int16x8_t v42 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v41)), (int8x16_t)vceqzq_s16(v41));
  int16x8_t v43 = vpmaxq_s16(v42, v42);
  v42.i16[0] = vmaxvq_s16((int16x8_t)v24);
  int16x8_t v44 = vdupq_lane_s16(*(int16x4_t *)v42.i8, 0);
  v36.i16[0] = vminvq_s16((int16x8_t)v24);
  int16x8_t v45 = vdupq_lane_s16(*(int16x4_t *)v36.i8, 0);
  int16x8_t v46 = vmaxq_s16(v39, v44);
  int16x8_t v47 = vminq_s16(v40, v45);
  int16x8_t v48 = vzip1q_s16(v44, v45);
  int8x16_t v49 = (int8x16_t)vceqzq_s16(v48);
  int16x8_t v50 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v48)), v49);
  int16x8_t v51 = vpmaxq_s16(v50, v50);
  v49.i16[0] = vmaxvq_s16((int16x8_t)v25);
  v45.i16[0] = vminvq_s16((int16x8_t)v25);
  int16x8_t v52 = vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
  int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)v45.i8, 0);
  int16x8_t v54 = vmaxq_s16(v46, v52);
  int16x8_t v55 = vminq_s16(v47, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int8x16_t v59 = (int8x16_t)vmaxq_s16(vmaxq_s16(v38, v43), vmaxq_s16(v51, v58));
  int16x8_t v60 = vclzq_s16(vsubq_s16(v54, v55));
  int8x16_t v61 = (int8x16_t)vsubq_s16(v34, v60);
  int8x16_t v62 = (int8x16_t)vcgtq_s16((int16x8_t)v59, (int16x8_t)v61);
  int8x16_t v63 = vbslq_s8(v62, v61, v59);
  if (vmaxvq_s16((int16x8_t)v63))
  {
    char v64 = 0;
    unint64_t v65 = 0;
    v66.i64[0] = -1;
    v66.i64[1] = -1;
    v67.i64[0] = 0xF000F000F000FLL;
    v67.i64[1] = 0xF000F000F000FLL;
    int8x16_t v68 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v66, vsubq_s16(v67, v60)), v55), v62);
    v69.i64[0] = 0x8000800080008;
    v69.i64[1] = 0x8000800080008;
    v66.i64[0] = 0x3000300030003;
    v66.i64[1] = 0x3000300030003;
    int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v38), v66), (int16x8_t)0);
    int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v43), v66), (int16x8_t)0);
    int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v51), v66), (int16x8_t)0);
    int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v58), v66), (int16x8_t)0);
    int8x16_t v74 = (int8x16_t)vsubq_s16((int16x8_t)v63, v70);
    int8x16_t v75 = (int8x16_t)vsubq_s16((int16x8_t)v63, v71);
    int8x16_t v76 = (int8x16_t)vsubq_s16((int16x8_t)v63, v72);
    int16x8_t v77 = vsubq_s16((int16x8_t)v63, (int16x8_t)v73);
    int8x16_t v78 = (int8x16_t)vceqq_s16(vaddq_s16((int16x8_t)v73, v72), vnegq_s16(vaddq_s16(v70, v71)));
    v73.i64[0] = 0x4000400040004;
    v73.i64[1] = 0x4000400040004;
    int8x16_t v79 = vbicq_s8(v73, v78);
    int8x16_t v80 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v63), (int8x16_t)v66), vandq_s8(v62, v69)), v79);
    if (a5 >= 4 && a6 >= 2)
    {
      int16x8_t v369 = v15;
      int16x8_t v370 = v20;
      int8x16_t v373 = v68;
      v81.i32[0] = v14.u16[2];
      v81.i32[1] = v14.u16[1];
      int32x2_t v82 = vshl_n_s32(vsub_s32(v81, vdup_n_s32(v14.u16[0])), 0x18uLL);
      int v83 = v82.i32[1] >> 24;
      int16x4_t v84 = (int16x4_t)vshl_s32(v82, (int32x2_t)0xFFFFFFEAFFFFFFE9);
      unsigned __int32 v85 = v82.i32[0];
      v86.i64[0] = 0xFFFFFFFF00000000;
      v86.i64[1] = 0xFFFFFFFF00000000;
      int16x8_t v87 = vmlaq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v82.i32[0] >> 24), v86), vdupq_n_s16(v82.i32[1] >> 24), (int16x8_t)xmmword_242EA76B0);
      int8x16_t v88 = (int8x16_t)vsubq_s16(v22, v87);
      int8x16_t v371 = (int8x16_t)v22;
      int8x16_t v372 = (int8x16_t)v23;
      int8x16_t v89 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[0]), v23), v87);
      int8x16_t v90 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[1]), (int16x8_t)v24), v87);
      int16x8_t v91 = vaddq_s16(vdupq_n_s16(-v84.i32[0] - v84.i32[1]), (int16x8_t)v25);
      int8x16_t v92 = (int8x16_t)vsubq_s16(v91, v87);
      v91.i16[0] = vmaxvq_s16((int16x8_t)v88);
      v84.i16[0] = vminvq_s16((int16x8_t)v88);
      int16x8_t v93 = vdupq_lane_s16(*(int16x4_t *)v91.i8, 0);
      int16x8_t v94 = vdupq_lane_s16(v84, 0);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v96 = vmaxq_s16(v93, v95);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v97 = vminq_s16(v94, v95);
      int16x8_t v98 = vzip1q_s16(v93, v94);
      int8x16_t v99 = (int8x16_t)vceqzq_s16(v98);
      v100.i64[0] = 0x10001000100010;
      v100.i64[1] = 0x10001000100010;
      int16x8_t v101 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v98)), v99);
      int16x8_t v102 = vpmaxq_s16(v101, v101);
      v99.i16[0] = vmaxvq_s16((int16x8_t)v89);
      v71.i16[0] = vminvq_s16((int16x8_t)v89);
      int16x8_t v103 = vdupq_lane_s16(*(int16x4_t *)v99.i8, 0);
      int16x8_t v104 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
      int16x8_t v105 = vmaxq_s16(v96, v103);
      int16x8_t v106 = vminq_s16(v97, v104);
      int16x8_t v107 = vzip1q_s16(v103, v104);
      int8x16_t v108 = (int8x16_t)vceqzq_s16(v107);
      int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v107)), v108);
      v108.i16[0] = vmaxvq_s16((int16x8_t)v90);
      v12.i16[0] = vminvq_s16((int16x8_t)v90);
      int16x8_t v110 = vdupq_lane_s16(*(int16x4_t *)v108.i8, 0);
      int16x8_t v111 = vdupq_lane_s16(v12, 0);
      int16x8_t v112 = vpmaxq_s16(v109, v109);
      int16x8_t v113 = vmaxq_s16(v105, v110);
      int16x8_t v114 = vminq_s16(v106, v111);
      int16x8_t v115 = vzip1q_s16(v110, v111);
      int8x16_t v116 = (int8x16_t)vceqzq_s16(v115);
      int16x8_t v117 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v115)), v116);
      int8x16_t v118 = (int8x16_t)v77;
      int16x8_t v119 = vpmaxq_s16(v117, v117);
      v117.i16[0] = vmaxvq_s16((int16x8_t)v92);
      int16x8_t v120 = vdupq_lane_s16(*(int16x4_t *)v117.i8, 0);
      v116.i16[0] = vminvq_s16((int16x8_t)v92);
      int16x8_t v121 = vdupq_lane_s16(*(int16x4_t *)v116.i8, 0);
      int16x8_t v122 = vmaxq_s16(v113, v120);
      int16x8_t v123 = vminq_s16(v114, v121);
      int16x8_t v124 = vzip1q_s16(v120, v121);
      int16x8_t v125 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v124)), (int8x16_t)vceqzq_s16(v124));
      int16x8_t v126 = vpmaxq_s16(v125, v125);
      int8x16_t v127 = (int8x16_t)vmaxq_s16(vmaxq_s16(v102, v112), vmaxq_s16(v119, v126));
      int16x8_t v128 = vclzq_s16(vsubq_s16(v122, v123));
      int8x16_t v129 = (int8x16_t)vsubq_s16(v100, v128);
      int8x16_t v130 = (int8x16_t)vcgtq_s16((int16x8_t)v127, (int16x8_t)v129);
      int16x8_t v131 = (int16x8_t)vbslq_s8(v130, v129, v127);
      v127.i64[0] = 0x1000100010001;
      v127.i64[1] = 0x1000100010001;
      int8x16_t v132 = (int8x16_t)vmaxq_s16(v131, (int16x8_t)v127);
      v127.i64[0] = 0x3000300030003;
      v127.i64[1] = 0x3000300030003;
      int8x16_t v133 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v102), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v134 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v112), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v119), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v136 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v126), (int16x8_t)v127), (int16x8_t)0);
      int8x16_t v137 = (int8x16_t)vsubq_s16((int16x8_t)v132, (int16x8_t)v133);
      int8x16_t v138 = (int8x16_t)vsubq_s16((int16x8_t)v132, v134);
      int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v132, v135);
      int8x16_t v140 = (int8x16_t)vsubq_s16((int16x8_t)v132, v136);
      int8x16_t v141 = (int8x16_t)vceqq_s16(vaddq_s16(v136, v135), vnegq_s16(vaddq_s16((int16x8_t)v133, v134)));
      v133.i64[0] = 0x4000400040004;
      v133.i64[1] = 0x4000400040004;
      int8x16_t v142 = vbicq_s8(v133, v141);
      v143.i64[0] = 0x7000700070007;
      v143.i64[1] = 0x7000700070007;
      int16x8_t v144 = (int16x8_t)vandq_s8(v61, v62);
      int16x8_t v145 = vaddq_s16((int16x8_t)v79, (int16x8_t)v79);
      int16x8_t v146 = vmulq_s16((int16x8_t)v74, v143);
      int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      int16x8_t v148 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v144, v146), v147), v145), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v132, v130), vaddq_s16((int16x8_t)v142, (int16x8_t)v142)), (int16x8_t)v137, v143), vaddq_s16(vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v139, (int16x8_t)v138), (int16x8_t)v140), 3uLL), v100))), 0);
      v141.i16[0] = vaddvq_s16(v148);
      int v149 = v141.u16[0];
      unint64_t v65 = v83 | HIWORD(v85);
      if (v141.i16[0])
      {
        v150.i64[0] = 0x2000200020002;
        v150.i64[1] = 0x2000200020002;
        v151.i64[0] = 0xA000A000A000ALL;
        v151.i64[1] = 0xA000A000A000ALL;
        int8x16_t v152 = vbslq_s8(v130, v151, v150);
        v151.i64[0] = -1;
        v151.i64[1] = -1;
        int8x16_t v153 = vorrq_s8(v142, v152);
        v154.i64[0] = 0xF000F000F000FLL;
        v154.i64[1] = 0xF000F000F000FLL;
        int8x16_t v155 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v151, vsubq_s16(v154, v128)), v123), v130);
        int8x16_t v156 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v148, 0xFuLL));
        int8x16_t v371 = vbslq_s8(v156, v88, v371);
        int8x16_t v372 = vbslq_s8(v156, v89, v372);
        int8x16_t v367 = vbslq_s8(v156, v90, v24);
        int8x16_t v368 = vbslq_s8(v156, v92, v25);
        int8x16_t v75 = vbslq_s8(v156, v138, v75);
        int8x16_t v76 = vbslq_s8(v156, v139, v76);
        int8x16_t v118 = vbslq_s8(v156, v140, v118);
        int8x16_t v373 = vbslq_s8(v156, v155, v373);
        int8x16_t v63 = vbslq_s8(v156, v132, v63);
        int8x16_t v80 = vbslq_s8(v156, v153, v80);
        v153.i64[0] = 0x8000800080008;
        v153.i64[1] = 0x8000800080008;
        int16x8_t v145 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), v153);
        int8x16_t v157 = vbslq_s8(v156, v137, v74);
        int16x8_t v146 = vmulq_s16((int16x8_t)v157, v143);
        int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      }
      else
      {
        int8x16_t v157 = v74;
        int8x16_t v367 = v24;
        int8x16_t v368 = v25;
      }
      int16x8_t v77 = (int16x8_t)v118;
      int16x4_t v159 = *(int16x4_t *)v369.i8;
      v160.i64[0] = 0x7000700070007;
      v160.i64[1] = 0x7000700070007;
      int16x8_t v161 = vsubq_s16((int16x8_t)v14, (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_242EA7520));
      int8x16_t v162 = (int8x16_t)v19;
      v162.i16[7] = v14.i16[7];
      int8x16_t v163 = (int8x16_t)vsubq_s16(v19, (int16x8_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_242EA7530));
      int8x16_t v164 = (int8x16_t)v369;
      v164.i16[7] = v14.i16[7];
      int8x16_t v165 = (int8x16_t)vsubq_s16(v369, (int16x8_t)vqtbl1q_s8(v164, (int8x16_t)xmmword_242EA7540));
      int8x16_t v166 = (int8x16_t)v370;
      v166.i16[7] = v14.i16[7];
      int16x8_t v167 = (int16x8_t)vqtbl1q_s8(v166, (int8x16_t)xmmword_242EA7550);
      int8x16_t v169 = (int8x16_t)v161;
      v169.i16[0] = v161.i16[7];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v370, v167);
      v169.i16[7] = v161.i16[0];
      v161.i16[0] = vmaxvq_s16((int16x8_t)v169);
      int16x8_t v170 = vdupq_lane_s16(*(int16x4_t *)v161.i8, 0);
      v167.i16[0] = vminvq_s16((int16x8_t)v169);
      int16x8_t v171 = vdupq_lane_s16(*(int16x4_t *)v167.i8, 0);
      v172.i64[0] = 0x8000800080008000;
      v172.i64[1] = 0x8000800080008000;
      int16x8_t v173 = vmaxq_s16(v170, v172);
      v174.i64[0] = 0x8000800080008000;
      v174.i64[1] = 0x8000800080008000;
      int16x8_t v175 = vminq_s16(v171, v174);
      int16x8_t v176 = vzip1q_s16(v170, v171);
      int8x16_t v177 = (int8x16_t)vceqzq_s16(v176);
      v178.i64[0] = 0x10001000100010;
      v178.i64[1] = 0x10001000100010;
      int16x8_t v179 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v176)), v177);
      int16x8_t v180 = vpmaxq_s16(v179, v179);
      v177.i16[0] = vmaxvq_s16((int16x8_t)v163);
      v159.i16[0] = vminvq_s16((int16x8_t)v163);
      int16x8_t v181 = vdupq_lane_s16(*(int16x4_t *)v177.i8, 0);
      int16x8_t v182 = vdupq_lane_s16(v159, 0);
      int16x8_t v183 = vmaxq_s16(v173, v181);
      int16x8_t v184 = vminq_s16(v175, v182);
      int16x8_t v185 = vzip1q_s16(v181, v182);
      int8x16_t v186 = (int8x16_t)vceqzq_s16(v185);
      int16x8_t v187 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v185)), v186);
      v186.i16[0] = vmaxvq_s16((int16x8_t)v165);
      v148.i16[0] = vminvq_s16((int16x8_t)v165);
      int16x8_t v188 = vdupq_lane_s16(*(int16x4_t *)v186.i8, 0);
      int16x8_t v189 = vdupq_lane_s16(*(int16x4_t *)v148.i8, 0);
      int16x8_t v190 = vpmaxq_s16(v187, v187);
      int16x8_t v191 = vmaxq_s16(v183, v188);
      int16x8_t v192 = vminq_s16(v184, v189);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      int8x16_t v194 = (int8x16_t)vceqzq_s16(v193);
      int16x8_t v195 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v193)), v194);
      int16x8_t v196 = vpmaxq_s16(v195, v195);
      v194.i16[0] = vmaxvq_s16((int16x8_t)v168);
      int16x8_t v197 = vdupq_lane_s16(*(int16x4_t *)v194.i8, 0);
      v130.i16[0] = vminvq_s16((int16x8_t)v168);
      int16x8_t v198 = vdupq_lane_s16(*(int16x4_t *)v130.i8, 0);
      int16x8_t v199 = vmaxq_s16(v191, v197);
      int16x8_t v200 = vminq_s16(v192, v198);
      int16x8_t v201 = vzip1q_s16(v197, v198);
      int16x8_t v202 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v201)), (int8x16_t)vceqzq_s16(v201));
      int16x8_t v203 = vpmaxq_s16(v202, v202);
      int8x16_t v204 = (int8x16_t)vmaxq_s16(vmaxq_s16(v180, v190), vmaxq_s16(v196, v203));
      int16x8_t v205 = vclzq_s16(vsubq_s16(v199, v200));
      int8x16_t v206 = (int8x16_t)vsubq_s16(v178, v205);
      int8x16_t v207 = (int8x16_t)vcgtq_s16((int16x8_t)v204, (int16x8_t)v206);
      int8x16_t v208 = vbslq_s8(v207, v206, v204);
      v209.i64[0] = 0x3000300030003;
      v209.i64[1] = 0x3000300030003;
      int16x8_t v210 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v180), v209), (int16x8_t)0);
      int8x16_t v211 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v190), v209), (int16x8_t)0);
      int16x8_t v212 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v196), v209), (int16x8_t)0);
      int16x8_t v213 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v203), v209), (int16x8_t)0);
      int8x16_t v214 = (int8x16_t)vsubq_s16((int16x8_t)v208, v210);
      int8x16_t v215 = (int8x16_t)vsubq_s16((int16x8_t)v208, (int16x8_t)v211);
      int8x16_t v216 = (int8x16_t)vsubq_s16((int16x8_t)v208, v212);
      int8x16_t v217 = (int8x16_t)vsubq_s16((int16x8_t)v208, v213);
      int8x16_t v218 = (int8x16_t)vceqq_s16(vaddq_s16(v213, v212), vnegq_s16(vaddq_s16(v210, (int16x8_t)v211)));
      v211.i64[0] = 0x4000400040004;
      v211.i64[1] = 0x4000400040004;
      int8x16_t v219 = vbicq_s8(v211, v218);
      int16x8_t v220 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v206, v207), vaddq_s16((int16x8_t)v219, (int16x8_t)v219)), (int16x8_t)v214, v160), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v216, (int16x8_t)v215), (int16x8_t)v217), 3uLL));
      v206.i64[0] = 0x8000800080008;
      v206.i64[1] = 0x8000800080008;
      v221.i64[0] = 0x2000200020002;
      v221.i64[1] = 0x2000200020002;
      int16x8_t v222 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v63, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v80, v206))), v145), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, (int8x16_t)v209), (int16x8_t)v221), (int8x16_t)v178), v146)), v147), v220), 0);
      v220.i16[0] = vaddvq_s16(v222);
      int v223 = v220.u16[0];
      if (v220.i16[0])
      {
        int8x16_t v224 = vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v208), v221);
        v225.i64[0] = 0x9000900090009;
        v225.i64[1] = 0x9000900090009;
        v226.i64[0] = -1;
        v226.i64[1] = -1;
        int8x16_t v227 = vorrq_s8(vorrq_s8(v224, (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v207, v225), (int16x8_t)vmvnq_s8(v207))), v219);
        v224.i64[0] = 0xF000F000F000FLL;
        v224.i64[1] = 0xF000F000F000FLL;
        int8x16_t v228 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v226, vsubq_s16((int16x8_t)v224, v205)), v200), v207);
        int8x16_t v229 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v222, 0xFuLL));
        v21.i16[0] = vbslq_s8(v229, vextq_s8(v14, v14, 0xEuLL), v21).u16[0];
        int16x8_t v22 = (int16x8_t)vbslq_s8(v229, v169, v371);
        int16x8_t v23 = (int16x8_t)vbslq_s8(v229, v163, v372);
        int8x16_t v24 = vbslq_s8(v229, v165, v367);
        int8x16_t v25 = vbslq_s8(v229, v168, v368);
        int8x16_t v74 = vbslq_s8(v229, v214, v157);
        int8x16_t v75 = vbslq_s8(v229, v215, v75);
        int8x16_t v76 = vbslq_s8(v229, v216, v76);
        int16x8_t v77 = (int16x8_t)vbslq_s8(v229, v217, v118);
        int8x16_t v68 = vbslq_s8(v229, v228, v373);
        int8x16_t v63 = vbslq_s8(v229, v208, v63);
        int8x16_t v80 = vbslq_s8(v229, v227, v80);
      }
      else
      {
        int8x16_t v24 = v367;
        int8x16_t v25 = v368;
        int8x16_t v68 = v373;
        int16x8_t v22 = (int16x8_t)v371;
        int16x8_t v23 = (int16x8_t)v372;
        int8x16_t v74 = v157;
      }
      if (v149) {
        BOOL v230 = v223 == 0;
      }
      else {
        BOOL v230 = 0;
      }
      char v64 = v230;
    }
    v231.i64[0] = 0x8000800080008;
    v231.i64[1] = 0x8000800080008;
    int16x8_t v232 = (int16x8_t)vandq_s8(v80, v231);
    v233.i64[0] = 0x3000300030003;
    v233.i64[1] = 0x3000300030003;
    v234.i64[0] = 0x2000200020002;
    v234.i64[1] = 0x2000200020002;
    int8x16_t v235 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, v233), v234);
    v234.i64[0] = 0x10001000100010;
    v234.i64[1] = 0x10001000100010;
    if ((unint64_t)((__int16)(vbicq_s8(v63, (int8x16_t)vceqzq_s16(v232)).u16[0]
                                    + ((2 * v80.i16[0]) & 8)
                                    + vandq_s8(v235, (int8x16_t)v234).u16[0]
                                    - v74.i16[0]
                                    + 8 * v74.i16[0]
                                    + 8 * vaddq_s16((int16x8_t)v76, vaddq_s16((int16x8_t)v75, v77)).u16[0])
                          - 299) <= 0xFFFFFFFFFFFFFEB7)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
      return 40;
    }
    else
    {
      int16x8_t v236 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v237 = 8 * (a1 & 7);
      if (v237) {
        uint64_t v238 = *v236 & ~(-1 << v237);
      }
      else {
        uint64_t v238 = 0;
      }
      if (v63.i16[0]) {
        uint64_t v239 = (16 * v63.i8[0] - 16) & 0xF0;
      }
      else {
        uint64_t v239 = 0;
      }
      *a2 = v80.i8[0] << 6;
      unint64_t v240 = (v239 & 0xFFFFFFFFFF0000F0 | ((unint64_t)v21.u16[0] << 8) | v80.i8[0] & 0xF) >> 2;
      unint64_t v241 = (v240 << v237) | v238;
      if (v237 >= 0x2A)
      {
        *int16x8_t v236 = v241;
        unint64_t v241 = v240 >> (-8 * (a1 & 7u));
      }
      unint64_t v242 = v237 + 22;
      int8x16_t v243 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v74);
      int8x16_t v244 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v245 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v246 = (int8x16_t)vsubq_s16((int16x8_t)v63, v77);
      *(uint8x8_t *)v243.i8 = vqmovn_u16((uint16x8_t)v243);
      *(uint8x8_t *)v244.i8 = vqmovn_u16((uint16x8_t)v244);
      *(uint8x8_t *)v245.i8 = vqmovn_u16((uint16x8_t)v245);
      *(uint8x8_t *)v246.i8 = vqmovn_u16((uint16x8_t)v246);
      v243.i32[0] = vzip1q_s16((int16x8_t)vzip1q_s8(v243, v244), (int16x8_t)vzip1q_s8(v245, v246)).u32[0];
      v245.i64[0] = 0x202020202020202;
      v245.i64[1] = 0x202020202020202;
      int8x16_t v247 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v80.i8, (int8x8_t)0x4000400040004)))), v245);
      v245.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v245.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v246.i64[0] = -1;
      v246.i64[1] = -1;
      uint8x16_t v248 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v246, (uint8x16_t)vorrq_s8(v247, v245)), (int8x16_t)v243.u32[0]);
      int16x8_t v249 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v247.i8);
      uint16x8_t v250 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v248.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v249)), (int16x8_t)vmovl_high_u8(v248));
      uint16x8_t v251 = (uint16x8_t)vpaddq_s16(v249, (int16x8_t)vmovl_high_u8((uint8x16_t)v247));
      int32x4_t v252 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v251.i8);
      int32x4_t v253 = (int32x4_t)vmovl_high_u16(v251);
      int32x4_t v254 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v250.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v252)), (int32x4_t)vshlq_u32(vmovl_high_u16(v250), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v253)));
      int32x4_t v255 = vpaddq_s32(v252, v253);
      v256.i64[0] = v254.u32[0];
      v256.i64[1] = v254.u32[1];
      uint64x2_t v257 = (uint64x2_t)v256;
      v256.i64[0] = v254.u32[2];
      v256.i64[1] = v254.u32[3];
      uint64x2_t v258 = (uint64x2_t)v256;
      v256.i64[0] = v255.u32[0];
      v256.i64[1] = v255.u32[1];
      int64x2_t v259 = v256;
      v256.i64[0] = v255.u32[2];
      v256.i64[1] = v255.u32[3];
      int64x2_t v260 = vpaddq_s64((int64x2_t)vshlq_u64(v257, (uint64x2_t)vzip1q_s64((int64x2_t)0, v259)), (int64x2_t)vshlq_u64(v258, (uint64x2_t)vzip1q_s64((int64x2_t)0, v256)));
      int64x2_t v261 = vpaddq_s64(v259, v256);
      uint64_t v262 = (v237 + 22) & 0x3E;
      unint64_t v263 = (v260.i64[0] << v262) | v241;
      if ((unint64_t)(v261.i64[0] + v262) >= 0x40)
      {
        *(void *)((char *)v236 + ((v242 >> 3) & 8)) = v263;
        unint64_t v263 = (unint64_t)v260.i64[0] >> -(char)v262;
      }
      unint64_t v264 = v261.i64[0] + v242;
      unint64_t v265 = v263 | (v260.i64[1] << v264);
      if ((v264 & 0x3F) + v261.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v264 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v265;
        unint64_t v265 = (unint64_t)v260.i64[1] >> -(v264 & 0x3F);
        if ((v264 & 0x3F) == 0) {
          unint64_t v265 = 0;
        }
      }
      int8x16_t v266 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v74);
      unint64_t v267 = v264 + v261.i64[1];
      v268.i64[0] = -1;
      v268.i64[1] = -1;
      int16x8_t v269 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16(v232, v232), (int8x16_t)0, 0xEuLL), v63);
      v270.i64[0] = 0xF000F000F000FLL;
      v270.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v271 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v268, (uint16x8_t)vaddq_s16(v269, v270)), v68);
      int32x4_t v272 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v269.i8);
      int32x4_t v273 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v271.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v272)), (int32x4_t)vmovl_high_u16(v271));
      int32x4_t v274 = vpaddq_s32(v272, (int32x4_t)vmovl_high_u16((uint16x8_t)v269));
      v275.i64[0] = v273.u32[0];
      v275.i64[1] = v273.u32[1];
      uint64x2_t v276 = (uint64x2_t)v275;
      v275.i64[0] = v273.u32[2];
      v275.i64[1] = v273.u32[3];
      uint64x2_t v277 = (uint64x2_t)v275;
      v275.i64[0] = v274.u32[0];
      v275.i64[1] = v274.u32[1];
      int64x2_t v278 = v275;
      v275.i64[0] = v274.u32[2];
      v275.i64[1] = v274.u32[3];
      int64x2_t v279 = vpaddq_s64((int64x2_t)vshlq_u64(v276, (uint64x2_t)vzip1q_s64((int64x2_t)0, v278)), (int64x2_t)vshlq_u64(v277, (uint64x2_t)vzip1q_s64((int64x2_t)0, v275)));
      int64x2_t v280 = vpaddq_s64(v278, v275);
      unint64_t v281 = (v279.i64[0] << v267) | v265;
      if (v280.i64[0] + (v267 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v267 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v281;
        unint64_t v281 = (unint64_t)v279.i64[0] >> -(v267 & 0x3F);
        if ((v267 & 0x3F) == 0) {
          unint64_t v281 = 0;
        }
      }
      int16x8_t v282 = (int16x8_t)vandq_s8(v68, v266);
      uint64_t v283 = v280.i64[1];
      unint64_t v284 = v280.i64[0] + v267;
      unint64_t v285 = v281 | (v279.i64[1] << v284);
      if ((v284 & 0x3F) + v280.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v284 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
        unint64_t v285 = (unint64_t)v279.i64[1] >> -(v284 & 0x3F);
        if ((v284 & 0x3F) == 0) {
          unint64_t v285 = 0;
        }
      }
      int8x16_t v286 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v287 = (int8x16_t)vaddq_s16(v282, v22);
      unint64_t v288 = v284 + v283;
      if (v64)
      {
        v285 |= v65 << v288;
        if ((v288 & 0x3F) >= 0x30)
        {
          *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
          unint64_t v285 = v65 >> -(v288 & 0x3F);
        }
        v288 += 16;
      }
      int16x8_t v289 = (int16x8_t)vandq_s8(v68, v286);
      int16x8_t v290 = (int16x8_t)vextq_s8((int8x16_t)0, v74, 0xEuLL);
      v291.i64[0] = 0xF000F000F000FLL;
      v291.i64[1] = 0xF000F000F000FLL;
      v292.i64[0] = -1;
      v292.i64[1] = -1;
      uint16x8_t v293 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v292, (uint16x8_t)vaddq_s16(v290, v291)), v287);
      int32x4_t v294 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v290.i8);
      int32x4_t v295 = (int32x4_t)vmovl_high_u16((uint16x8_t)v290);
      int32x4_t v296 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v293.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v294)), (int32x4_t)vshlq_u32(vmovl_high_u16(v293), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v295)));
      int32x4_t v297 = vpaddq_s32(v294, v295);
      v298.i64[0] = v296.u32[0];
      v298.i64[1] = v296.u32[1];
      uint64x2_t v299 = (uint64x2_t)v298;
      v298.i64[0] = v296.u32[2];
      v298.i64[1] = v296.u32[3];
      uint64x2_t v300 = (uint64x2_t)v298;
      v298.i64[0] = v297.u32[0];
      v298.i64[1] = v297.u32[1];
      int64x2_t v301 = v298;
      v298.i64[0] = v297.u32[2];
      v298.i64[1] = v297.u32[3];
      int64x2_t v302 = vpaddq_s64((int64x2_t)vshlq_u64(v299, (uint64x2_t)vzip1q_s64((int64x2_t)0, v301)), (int64x2_t)vshlq_u64(v300, (uint64x2_t)vzip1q_s64((int64x2_t)0, v298)));
      int64x2_t v303 = vpaddq_s64(v301, v298);
      unint64_t v304 = (v302.i64[0] << v288) | v285;
      if (v303.i64[0] + (v288 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v304;
        unint64_t v304 = (unint64_t)v302.i64[0] >> -(v288 & 0x3F);
        if ((v288 & 0x3F) == 0) {
          unint64_t v304 = 0;
        }
      }
      int8x16_t v305 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v306 = (int8x16_t)vaddq_s16(v23, v289);
      unint64_t v307 = v303.i64[0] + v288;
      uint64_t v308 = (v303.i64[0] + v288) & 0x3F;
      unint64_t v309 = v304 | (v302.i64[1] << v307);
      if ((v307 & 0x3F) + v303.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v307 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v309;
        unint64_t v309 = (unint64_t)v302.i64[1] >> -(char)v308;
        if (!v308) {
          unint64_t v309 = 0;
        }
      }
      int16x8_t v310 = (int16x8_t)vandq_s8(v68, v305);
      unint64_t v311 = v307 + v303.i64[1];
      v312.i64[0] = 0xF000F000F000FLL;
      v312.i64[1] = 0xF000F000F000FLL;
      v313.i64[0] = -1;
      v313.i64[1] = -1;
      uint16x8_t v314 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v313, (uint16x8_t)vaddq_s16((int16x8_t)v75, v312)), v306);
      int32x4_t v315 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8);
      int32x4_t v316 = (int32x4_t)vmovl_high_u16((uint16x8_t)v75);
      int32x4_t v317 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v314.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v315)), (int32x4_t)vshlq_u32(vmovl_high_u16(v314), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v316)));
      int32x4_t v318 = vpaddq_s32(v315, v316);
      v319.i64[0] = v317.u32[0];
      v319.i64[1] = v317.u32[1];
      uint64x2_t v320 = (uint64x2_t)v319;
      v319.i64[0] = v317.u32[2];
      v319.i64[1] = v317.u32[3];
      uint64x2_t v321 = (uint64x2_t)v319;
      v319.i64[0] = v318.u32[0];
      v319.i64[1] = v318.u32[1];
      int64x2_t v322 = v319;
      v319.i64[0] = v318.u32[2];
      v319.i64[1] = v318.u32[3];
      int64x2_t v323 = vpaddq_s64((int64x2_t)vshlq_u64(v320, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)), (int64x2_t)vshlq_u64(v321, (uint64x2_t)vzip1q_s64((int64x2_t)0, v319)));
      int64x2_t v324 = vpaddq_s64(v322, v319);
      unint64_t v325 = (v323.i64[0] << v311) | v309;
      if (v324.i64[0] + (v311 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v325;
        unint64_t v325 = (unint64_t)v323.i64[0] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v325 = 0;
        }
      }
      int8x16_t v326 = (int8x16_t)vceqq_s16((int16x8_t)v63, v77);
      int8x16_t v327 = (int8x16_t)vaddq_s16((int16x8_t)v24, v310);
      unint64_t v328 = v324.i64[0] + v311;
      unint64_t v329 = v325 | (v323.i64[1] << v328);
      if ((v328 & 0x3F) + v324.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v328 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
        unint64_t v329 = (unint64_t)v323.i64[1] >> -(v328 & 0x3F);
        if ((v328 & 0x3F) == 0) {
          unint64_t v329 = 0;
        }
      }
      int16x8_t v330 = (int16x8_t)vandq_s8(v68, v326);
      unint64_t v331 = v328 + v324.i64[1];
      v332.i64[0] = 0xF000F000F000FLL;
      v332.i64[1] = 0xF000F000F000FLL;
      v333.i64[0] = -1;
      v333.i64[1] = -1;
      uint16x8_t v334 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v333, (uint16x8_t)vaddq_s16((int16x8_t)v76, v332)), v327);
      int32x4_t v335 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8);
      int32x4_t v336 = (int32x4_t)vmovl_high_u16((uint16x8_t)v76);
      int32x4_t v337 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v334.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v335)), (int32x4_t)vshlq_u32(vmovl_high_u16(v334), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v336)));
      int32x4_t v338 = vpaddq_s32(v335, v336);
      v339.i64[0] = v337.u32[0];
      v339.i64[1] = v337.u32[1];
      uint64x2_t v340 = (uint64x2_t)v339;
      v339.i64[0] = v337.u32[2];
      v339.i64[1] = v337.u32[3];
      uint64x2_t v341 = (uint64x2_t)v339;
      v339.i64[0] = v338.u32[0];
      v339.i64[1] = v338.u32[1];
      int64x2_t v342 = v339;
      v339.i64[0] = v338.u32[2];
      v339.i64[1] = v338.u32[3];
      int64x2_t v343 = vpaddq_s64((int64x2_t)vshlq_u64(v340, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)), (int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v339)));
      int64x2_t v344 = vpaddq_s64(v342, v339);
      unint64_t v345 = (v343.i64[0] << v331) | v329;
      if (v344.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v345;
        unint64_t v345 = (unint64_t)v343.i64[0] >> -(v331 & 0x3F);
        if ((v331 & 0x3F) == 0) {
          unint64_t v345 = 0;
        }
      }
      int8x16_t v346 = (int8x16_t)vaddq_s16((int16x8_t)v25, v330);
      unint64_t v347 = v344.i64[0] + v331;
      unint64_t v348 = v345 | (v343.i64[1] << v347);
      if ((v347 & 0x3F) + v344.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        unint64_t v348 = (unint64_t)v343.i64[1] >> -(v347 & 0x3F);
        if ((v347 & 0x3F) == 0) {
          unint64_t v348 = 0;
        }
      }
      unint64_t v349 = v347 + v344.i64[1];
      v350.i64[0] = 0xF000F000F000FLL;
      v350.i64[1] = 0xF000F000F000FLL;
      v351.i64[0] = -1;
      v351.i64[1] = -1;
      uint16x8_t v352 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v351, (uint16x8_t)vaddq_s16(v77, v350)), v346);
      int32x4_t v353 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8);
      int32x4_t v354 = (int32x4_t)vmovl_high_u16((uint16x8_t)v77);
      int32x4_t v355 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v352.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v353)), (int32x4_t)vshlq_u32(vmovl_high_u16(v352), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v354)));
      int32x4_t v356 = vpaddq_s32(v353, v354);
      v357.i64[0] = v355.u32[0];
      v357.i64[1] = v355.u32[1];
      uint64x2_t v358 = (uint64x2_t)v357;
      v357.i64[0] = v355.u32[2];
      v357.i64[1] = v355.u32[3];
      uint64x2_t v359 = (uint64x2_t)v357;
      v357.i64[0] = v356.u32[0];
      v357.i64[1] = v356.u32[1];
      int64x2_t v360 = v357;
      v357.i64[0] = v356.u32[2];
      v357.i64[1] = v356.u32[3];
      int64x2_t v361 = vpaddq_s64((int64x2_t)vshlq_u64(v358, (uint64x2_t)vzip1q_s64((int64x2_t)0, v360)), (int64x2_t)vshlq_u64(v359, (uint64x2_t)vzip1q_s64((int64x2_t)0, v357)));
      int64x2_t v362 = vpaddq_s64(v360, v357);
      unint64_t v363 = (v361.i64[0] << v349) | v348;
      if (v362.i64[0] + (v349 & 0x3F) > 0x3F)
      {
        *(void *)((char *)v236 + ((v349 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v363;
        if ((v349 & 0x3F) != 0) {
          unint64_t v363 = (unint64_t)v361.i64[0] >> -(v349 & 0x3F);
        }
        else {
          unint64_t v363 = 0;
        }
      }
      unint64_t v364 = v362.i64[0] + v349;
      unint64_t v365 = v363 | (v361.i64[1] << v364);
      if ((v364 & 0x3F) + v362.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v364 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
        unint64_t v365 = (unint64_t)v361.i64[1] >> -(v364 & 0x3F);
        if ((v364 & 0x3F) == 0) {
          unint64_t v365 = 0;
        }
      }
      unint64_t v366 = v364 + v362.i64[1];
      if ((v366 & 0x3F) != 0) {
        *(void *)((char *)v236 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
      }
      unint64_t result = (v366 - v237 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_WORD *)a1 = a3->i16[0];
    *a2 = 1;
    return 2;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  if (a5 > 1)
  {
    uint64_t v19 = a5 & 0xFE;
    if (a5 == v19)
    {
      uint64_t v20 = 0;
      int8x16_t v21 = (__int16 *)(a3 + 2);
      int16x8_t v22 = (char *)&v61 + 8;
      do
      {
        int16x8_t v23 = v22;
        int8x16_t v24 = v21;
        uint64_t v25 = a5;
        do
        {
          __int16 v26 = *(v24 - 1);
          __int16 v27 = *v24;
          v24 += 2;
          *(v23 - 4) = v26;
          *int16x8_t v23 = v27;
          v23 += 8;
          v25 -= 2;
        }
        while (v25);
        ++v20;
        int8x16_t v21 = (__int16 *)((char *)v21 + a4);
        v22 += 2;
      }
      while (v20 != a6);
    }
    else
    {
      uint64_t v28 = 0;
      int16x8_t v29 = (__int16 *)(a3 + 2);
      int16x8_t v30 = (char *)&v61 + 8;
      int16x8_t v31 = (char *)&v61 + ((8 * a5) & 0x7F0);
      do
      {
        int16x8_t v32 = v30;
        int8x16_t v33 = v29;
        uint64_t v34 = a5 & 0xFE;
        do
        {
          __int16 v35 = *(v33 - 1);
          __int16 v36 = *v33;
          v33 += 2;
          *(v32 - 4) = v35;
          *int16x8_t v32 = v36;
          v32 += 8;
          v34 -= 2;
        }
        while (v34);
        int16x8_t v37 = (__int16 *)(a3 + v28 * a4 + 2 * v19);
        int16x8_t v38 = v31;
        uint64_t v39 = a5 - v19;
        do
        {
          __int16 v40 = *v37++;
          *int16x8_t v38 = v40;
          v38 += 4;
          --v39;
        }
        while (v39);
        ++v28;
        int16x8_t v29 = (__int16 *)((char *)v29 + a4);
        v30 += 2;
        v31 += 2;
      }
      while (v28 != a6);
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v10 = a6 & 0xFE;
    unsigned int v11 = (__int16 *)(a3 + 1);
    int16x4_t v12 = (_WORD *)&v61 + 1;
    uint64_t v13 = v10;
    do
    {
      __int16 v14 = *(__int16 *)((char *)v11 - 1);
      __int16 v15 = *v11++;
      *(v12 - 1) = v14;
      _WORD *v12 = v15;
      v12 += 2;
      v13 -= 2;
    }
    while (v13);
    if (v10 != a6)
    {
LABEL_7:
      uint64_t v16 = a6 - v10;
      int32x4_t v17 = (_WORD *)&v61 + v10;
      int32x4_t v18 = (_WORD *)(a3 + v10 * a4);
      do
      {
        *v17++ = *v18;
        int32x4_t v18 = (_WORD *)((char *)v18 + a4);
        --v16;
      }
      while (v16);
    }
  }
  v56.i32[0] = (unsigned __int16)v61;
  v56.i32[1] = WORD4(v61);
  v56.i32[2] = WORD1(v61);
  v56.i32[3] = WORD5(v61);
  int v57 = (unsigned __int16)v62;
  int v58 = WORD4(v62);
  if (a5 >= 4) {
    unsigned int v41 = 4;
  }
  else {
    unsigned int v41 = a5;
  }
  if (a5 >= 4) {
    unsigned int v42 = a5 - 4;
  }
  else {
    unsigned int v42 = 0;
  }
  int v59 = WORD1(v62);
  int v60 = WORD5(v62);
  if (a6 >= 2) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = a6;
  }
  if (a6 >= 2) {
    unsigned int v44 = a6 - 2;
  }
  else {
    unsigned int v44 = 0;
  }
  char v46 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1, &v56, a7, v41, v43);
  v56.i32[0] = WORD2(v61);
  v56.i32[1] = WORD6(v61);
  v56.i32[2] = WORD3(v61);
  v56.i32[3] = HIWORD(v61);
  int v57 = WORD2(v62);
  int v58 = WORD6(v62);
  int v59 = WORD3(v62);
  int v60 = HIWORD(v62);
  if (a6 >= 4) {
    unsigned int v47 = 2;
  }
  else {
    unsigned int v47 = v44;
  }
  int v48 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 10, &v56, a7, v41, v47);
  v56.i32[0] = (unsigned __int16)v63;
  v56.i32[1] = WORD4(v63);
  v56.i32[2] = WORD1(v63);
  v56.i32[3] = WORD5(v63);
  int v57 = (unsigned __int16)v64;
  int v58 = WORD4(v64);
  if (a5 >= 8) {
    unsigned int v49 = 4;
  }
  else {
    unsigned int v49 = v42;
  }
  int v59 = WORD1(v64);
  int v60 = WORD5(v64);
  int v50 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 20, &v56, a7, v49, v43);
  v56.i32[0] = WORD2(v63);
  v56.i32[1] = WORD6(v63);
  v56.i32[2] = WORD3(v63);
  v56.i32[3] = HIWORD(v63);
  int v57 = WORD2(v64);
  int v58 = WORD6(v64);
  int v59 = WORD3(v64);
  int v60 = HIWORD(v64);
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 30, &v56, a7, v49, v47);
  if (v50) {
    char v52 = 4;
  }
  else {
    char v52 = 0;
  }
  if (v48) {
    char v53 = 2;
  }
  else {
    char v53 = 0;
  }
  if (result) {
    char v54 = -8;
  }
  else {
    char v54 = -16;
  }
  *a2 = v54 | v52 | v46 | v53;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(uint64_t a1, int8x16_t *a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (a3 == 1)
  {
    v8.i64[0] = 0x800000008000;
    v8.i64[1] = 0x800000008000;
    int8x16_t v9 = veorq_s8(*a2, v8);
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    int8x16_t v6 = vbicq_s8(v9, (int8x16_t)vceqq_s32((int32x4_t)v9, v10));
    int8x16_t v11 = veorq_s8(a2[1], v8);
    int8x16_t v7 = vbicq_s8(v11, (int8x16_t)vceqq_s32((int32x4_t)v11, v10));
    goto LABEL_5;
  }
  if (a3 == 3)
  {
    v5.i64[0] = 0x800000008000;
    v5.i64[1] = 0x800000008000;
    int8x16_t v6 = veorq_s8(*a2, v5);
    int8x16_t v7 = veorq_s8(a2[1], v5);
LABEL_5:
    int8x16_t v127 = v6;
    int8x16_t v128 = v7;
    unsigned int v12 = v6.i32[0];
    goto LABEL_7;
  }
  int8x16_t v13 = a2[1];
  int8x16_t v127 = *a2;
  int8x16_t v128 = v13;
  unsigned int v12 = v127.i32[0];
LABEL_7:
  if (a5) {
    BOOL v14 = a4 >= 2;
  }
  else {
    BOOL v14 = 0;
  }
  int v15 = !v14;
  if (v14)
  {
    unsigned int v17 = v127.u32[1];
    unsigned int v16 = v127.i32[1] < v12;
    if (v127.i32[1] >= v12) {
      unsigned int v18 = v12;
    }
    else {
      unsigned int v18 = v127.u32[1];
    }
    if (v12 > v127.i32[1]) {
      unsigned int v17 = v12;
    }
  }
  else
  {
    unsigned int v16 = 0;
    unsigned int v17 = v12;
    unsigned int v18 = v12;
  }
  BOOL v19 = a5 < 2 || a4 == 0;
  int v20 = v19;
  if (!v19)
  {
    if (v127.i32[2] < v18)
    {
      unsigned int v16 = 2;
      unsigned int v18 = v127.u32[2];
    }
    if (v17 <= v127.i32[2]) {
      unsigned int v17 = v127.u32[2];
    }
  }
  BOOL v21 = a5 >= 2 && a4 >= 2;
  int v22 = !v21;
  if (v21)
  {
    if (v127.i32[3] < v18)
    {
      unsigned int v16 = 3;
      unsigned int v18 = v127.u32[3];
    }
    if (v17 <= v127.i32[3]) {
      unsigned int v17 = v127.u32[3];
    }
  }
  if (a5) {
    BOOL v23 = a4 >= 3;
  }
  else {
    BOOL v23 = 0;
  }
  int v24 = !v23;
  if (v23)
  {
    if (v128.i32[0] < v18)
    {
      unsigned int v16 = 4;
      unsigned int v18 = v128.i32[0];
    }
    if (v17 <= v128.i32[0]) {
      unsigned int v17 = v128.i32[0];
    }
  }
  if (a5) {
    BOOL v25 = a4 >= 4;
  }
  else {
    BOOL v25 = 0;
  }
  int v26 = !v25;
  if (v25)
  {
    if (v128.i32[1] < v18)
    {
      unsigned int v16 = 5;
      unsigned int v18 = v128.u32[1];
    }
    if (v17 <= v128.i32[1]) {
      unsigned int v17 = v128.u32[1];
    }
  }
  BOOL v27 = a5 >= 2 && a4 >= 3;
  int v28 = !v27;
  if (v27)
  {
    if (v128.i32[2] < v18)
    {
      unsigned int v16 = 6;
      unsigned int v18 = v128.u32[2];
    }
    if (v17 <= v128.i32[2]) {
      unsigned int v17 = v128.u32[2];
    }
  }
  BOOL v29 = a5 >= 2 && a4 >= 4;
  int v30 = !v29;
  if (v29)
  {
    if (v128.i32[3] < v18)
    {
      unsigned int v16 = 7;
      unsigned int v18 = v128.u32[3];
    }
    if (v17 <= v128.i32[3]) {
      unsigned int v17 = v128.u32[3];
    }
  }
  unsigned int v31 = v17 - v18;
  unsigned int v32 = __clz(v17 - v18);
  int v33 = 32 - v32;
  if ((int)(32 - v32) <= 1) {
    int v33 = 1;
  }
  unsigned int v34 = v33 - 1;
  if (v17 == 0xFFFF && v32 == 31) {
    unsigned int v34 = 1;
  }
  if ((a3 | 2) == 3)
  {
    BOOL v36 = 0;
    if (!(v18 >> 15) && v17 >= 0x8000) {
      BOOL v36 = kDQuadParamTable[10 * v34 + 488] == 0;
    }
  }
  else
  {
    BOOL v36 = 0;
  }
  if (v34 > 0xC || v36)
  {
    int v38 = kDQuadParamTable[10 * v34 + 484];
    unsigned int v39 = v38 + 2;
    if (v36) {
      int v40 = 0;
    }
    else {
      int v40 = -2;
    }
    int v41 = v18 & ~(-1 << (14 - v38));
    if (v39 >= 0x10) {
      int v41 = 0;
    }
    int v42 = v41 + v40;
    if (v42 >= 1 && __clz(v42 + v31) < v32) {
      ++v34;
    }
  }
  unint64_t v46 = (unint64_t)&kDQuadParamTable[10 * v34];
  unint64_t v43 = *(void *)(v46 + 1928);
  int v44 = *(_DWORD *)(v46 + 1936);
  int v45 = *(_DWORD *)(v46 + 1940);
  LODWORD(v46) = v45 + 2;
  if (a4) {
    BOOL v47 = a5 == 0;
  }
  else {
    BOOL v47 = 1;
  }
  int v48 = v47;
  if (v43 >> v46 > 0x100) {
    int v49 = 1;
  }
  else {
    int v49 = v48;
  }
  if (a3 != 4)
  {
    BOOL v50 = 0;
    goto LABEL_155;
  }
  if (v48)
  {
    BOOL v50 = 0;
    if (v15) {
      goto LABEL_143;
    }
  }
  else
  {
    BOOL v50 = (~v12 & 0x7C00) == 0 || v12 == 0x8000;
    if (v15) {
      goto LABEL_143;
    }
  }
  if ((~v127.i32[1] & 0x7C00) == 0 || v127.i32[1] == 0x8000) {
    BOOL v50 = 1;
  }
LABEL_143:
  if (v20)
  {
    if (v22) {
      goto LABEL_145;
    }
  }
  else
  {
    if ((~v127.i32[2] & 0x7C00) == 0 || v127.i32[2] == 0x8000) {
      BOOL v50 = 1;
    }
    if (v22)
    {
LABEL_145:
      if (v24) {
        goto LABEL_146;
      }
      goto LABEL_250;
    }
  }
  if ((~v127.i32[3] & 0x7C00) == 0 || v127.i32[3] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v24)
  {
LABEL_146:
    if (v26) {
      goto LABEL_147;
    }
    goto LABEL_257;
  }
LABEL_250:
  if ((~v128.i32[0] & 0x7C00) == 0 || v128.i32[0] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v26)
  {
LABEL_147:
    if (v28) {
      goto LABEL_148;
    }
    goto LABEL_264;
  }
LABEL_257:
  if ((~v128.i32[1] & 0x7C00) == 0 || v128.i32[1] == 0x8000) {
    BOOL v50 = 1;
  }
  if (v28)
  {
LABEL_148:
    if (v30) {
      goto LABEL_155;
    }
    goto LABEL_149;
  }
LABEL_264:
  if ((~v128.i32[2] & 0x7C00) == 0 || v128.i32[2] == 0x8000) {
    BOOL v50 = 1;
  }
  if ((v30 & 1) == 0)
  {
LABEL_149:
    if ((~v128.i32[3] & 0x7C00) == 0 || v128.i32[3] == 0x8000) {
      BOOL v50 = 1;
    }
  }
LABEL_155:
  unint64_t v54 = 0;
  unsigned int v55 = 0;
  unsigned int v56 = v44 + 2;
  memset(v124, 0, sizeof(v124));
  int v125 = 0;
  unsigned int v57 = 16 * (v45 != 0);
  if (v56 >= 0x10) {
    uint64_t v58 = 16;
  }
  else {
    uint64_t v58 = v56;
  }
  if (v57 >= v46) {
    unint64_t v46 = v46;
  }
  else {
    unint64_t v46 = v57;
  }
  unsigned int v59 = v18 & (-1 << (16 - v58));
  unint64_t v60 = v16;
  unint64_t v61 = v43 >> v46;
  unsigned int v62 = v12 - v59;
  if (v48) {
    unsigned int v62 = 0;
  }
  BOOL v19 = v15 == 0;
  unsigned __int32 v63 = v127.i32[1] - v59;
  if (!v19) {
    unsigned __int32 v63 = 0;
  }
  v126[0] = v62;
  v126[1] = v63;
  unsigned __int32 v64 = v127.i32[2] - v59;
  if (v20) {
    unsigned __int32 v64 = 0;
  }
  unsigned __int32 v65 = v127.i32[3] - v59;
  if (v22) {
    unsigned __int32 v65 = 0;
  }
  v126[2] = v64;
  v126[3] = v65;
  unsigned __int32 v66 = v128.i32[0] - v59;
  if (v24) {
    unsigned __int32 v66 = 0;
  }
  unsigned __int32 v67 = v128.i32[1] - v59;
  if (v26) {
    unsigned __int32 v67 = 0;
  }
  v126[4] = v66;
  v126[5] = v67;
  unsigned __int32 v68 = v128.i32[2] - v59;
  if (v28) {
    unsigned __int32 v68 = 0;
  }
  unsigned __int32 v69 = v128.i32[3] - v59;
  if (v30) {
    unsigned __int32 v69 = 0;
  }
  v126[6] = v68;
  v126[7] = v69;
  if (v61 <= 1) {
    unint64_t v70 = 1;
  }
  else {
    unint64_t v70 = v61;
  }
  uint64_t v71 = 4 * v16;
  int16x8_t v72 = &byte_242EA911D;
  do
  {
    if (v71 != v54)
    {
      if (v46) {
        unint64_t v73 = v126[v54 / 4] / v70;
      }
      else {
        LODWORD(v73) = 0;
      }
      *((_DWORD *)v124 + v55) = v73;
      if (v61 >= 2)
      {
        unint64_t v74 = v126[v54 / 4];
        if (v74)
        {
          if (v74 / v70 * v70 == v74 && ((v74 / v70) & 1) != 0)
          {
            if (v59 || v73 != 1)
            {
              if ((a3 | 2) != 3
                || (uint64_t v76 = v127.u32[v54 / 4], v76 != 0x8000) && ((a3 | 2) != 3 || v70 + 0x8000 != v76))
              {
                LODWORD(v73) = v73 - 1;
                *((_DWORD *)v124 + v55) = v73;
              }
            }
            else
            {
              LODWORD(v73) = 1;
            }
          }
        }
      }
      if (v73 >> v46 || v127.i32[v54 / 4] == 0xFFFF) {
        *((_DWORD *)v124 + v55) = ~(-1 << v46);
      }
      if (*v72 >= a5 || *(v72 - 1) >= a4) {
        *((_DWORD *)v124 + v55) = 0;
      }
      ++v55;
    }
    v54 += 4;
    v72 += 2;
  }
  while (v54 != 32);
  uint64_t v77 = v49 | v50;
  int8x16_t v78 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v79 = 8 * (a1 & 7);
  *(_WORD *)(a1 + 8) = 0;
  *(void *)a1 = 0;
  if (v77 == 1)
  {
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 8 * (a1 & 7);
    do
    {
      int v83 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v80;
      if (v83[1] >= a5 || *v83 >= a4) {
        unint64_t v85 = 0;
      }
      else {
        unint64_t v85 = (unint64_t)v127.u32[v80] >> 8;
      }
      if ((unint64_t)(v82 - v79 + (v81 << 6) - 73) >= 0xFFFFFFFFFFFFFFAFLL)
      {
        uint64_t v86 = 0;
        unint64_t v87 = 8;
        do
        {
          unint64_t v88 = 64 - v82;
          if (64 - v82 >= v87) {
            unint64_t v88 = v87;
          }
          v78[v81] |= ((v85 >> v86) & ~(-1 << v88)) << v82;
          v86 += v88;
          unint64_t v89 = v88 + v82;
          v81 += v89 >> 6;
          uint64_t v82 = v89 & 0x3F;
          v87 -= v88;
        }
        while (v87);
      }
      ++v80;
    }
    while (v80 != 8);
  }
  else
  {
    uint64_t v90 = 0;
    *v78 |= (unint64_t)(v34 & 0xF) << v79;
    uint64_t v91 = v79 | 4;
    if (v58 && (unint64_t)(v58 - v79 + v91) <= 0x50)
    {
      uint64_t v90 = 0;
      uint64_t v92 = 0;
      unint64_t v93 = v58;
      do
      {
        unint64_t v94 = 64 - v91;
        if (64 - v91 >= v93) {
          unint64_t v94 = v93;
        }
        v78[v90] |= (((unint64_t)(v59 >> (16 - v58)) >> v92) & ~(-1 << v94)) << v91;
        v92 += v94;
        unint64_t v95 = v94 + v91;
        v90 += v95 >> 6;
        uint64_t v91 = v95 & 0x3F;
        v93 -= v94;
      }
      while (v93);
    }
    if (v46)
    {
      if ((unint64_t)(v91 - v79 + (v90 << 6) + 3) <= 0x50)
      {
        uint64_t v96 = 0;
        unint64_t v97 = 3;
        do
        {
          unint64_t v98 = 64 - v91;
          if (64 - v91 >= v97) {
            unint64_t v98 = v97;
          }
          v78[v90] |= ((v60 >> v96) & ~(-1 << v98)) << v91;
          v96 += v98;
          unint64_t v99 = v98 + v91;
          v90 += v99 >> 6;
          uint64_t v91 = v99 & 0x3F;
          v97 -= v98;
        }
        while (v97);
      }
      int v100 = v58 + 7;
    }
    else
    {
      int v100 = v58 + 4;
    }
    int v106 = 80 - v100;
    unsigned int v107 = (((37 * v106) >> 8)
          + (((v106 - ((unsigned __int16)(37 * v106) >> 8)) & 0xFE) >> 1)) >> 2;
    unint64_t v108 = -7 * v107 + v106;
    if ((v108 - 257) >= 0xFFFFFF00 && v91 - v79 + (v90 << 6) + v108 <= 0x50)
    {
      do
      {
        unint64_t v109 = 64 - v91;
        if (64 - v91 >= v108) {
          unint64_t v109 = v108;
        }
        unint64_t v110 = v109 + v91;
        v90 += v110 >> 6;
        uint64_t v91 = v110 & 0x3F;
        v108 -= v109;
      }
      while (v108);
    }
    uint64_t v111 = 0;
    unint64_t v112 = v107 - v46;
    if (v112) {
      BOOL v113 = v112 > 0x100;
    }
    else {
      BOOL v113 = 1;
    }
    char v114 = v113;
    do
    {
      if (v46 && v46 - v79 + v91 + (v90 << 6) <= 0x50)
      {
        uint64_t v115 = 0;
        unint64_t v116 = *((unsigned int *)v124 + v111);
        unint64_t v117 = v46;
        do
        {
          unint64_t v118 = 64 - v91;
          if (64 - v91 >= v117) {
            unint64_t v118 = v117;
          }
          v78[v90] |= ((v116 >> v115) & ~(-1 << v118)) << v91;
          v115 += v118;
          unint64_t v119 = v118 + v91;
          v90 += v119 >> 6;
          uint64_t v91 = v119 & 0x3F;
          v117 -= v118;
        }
        while (v117);
      }
      if ((v114 & 1) == 0 && v91 - v79 + (v90 << 6) + v112 <= 0x50)
      {
        unint64_t v120 = v112;
        do
        {
          unint64_t v121 = 64 - v91;
          if (64 - v91 >= v120) {
            unint64_t v121 = v120;
          }
          unint64_t v122 = v121 + v91;
          v90 += v122 >> 6;
          uint64_t v91 = v122 & 0x3F;
          v120 -= v121;
        }
        while (v120);
      }
      ++v111;
    }
    while (v111 != 7);
  }
  return v77;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(uint64_t a1, uint64_t a2, int32x4_t *a3, unsigned int a4, int a5, double a6, double a7, double a8, int8x8_t a9)
{
  uint64_t v407 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v183 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v184 = (void *)(a1 + a2);
    *int16x8_t v184 = 0;
    v184[1] = 0;
    int16x8_t v185 = (void *)(a1 + 2 * a2);
    *int16x8_t v185 = 0;
    v185[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
LABEL_388:
    *int8x16_t v186 = 0;
    v186[1] = 0;
    return v183;
  }
  int8x16_t v9 = a3;
  if (a4 >= 0xF0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = a5 & 0xFFFFFFFD;
    unsigned int v368 = a4;
    while (1)
    {
      uint64_t v29 = (uint64_t)v9->i64 + 10 * v10;
      int v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = 8 * (v29 & 7);
      if (((a4 >> v10) & 1) == 0) {
        break;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = v31;
      do
      {
        if ((unint64_t)(v34 - v31 + (v33 << 6) - 73) < 0xFFFFFFFFFFFFFFAFLL)
        {
          unsigned __int8 v35 = 0;
        }
        else
        {
          unsigned __int8 v35 = 0;
          uint64_t v39 = 0;
          unint64_t v40 = 8;
          do
          {
            unint64_t v41 = 64 - v34;
            if (64 - v34 >= v40) {
              unint64_t v41 = v40;
            }
            v35 |= (unint64_t)((v30[v33] >> v34) & ~(-1 << v41)) << v39;
            v39 += v41;
            unint64_t v42 = v41 + v34;
            v33 += v42 >> 6;
            uint64_t v34 = v42 & 0x3F;
            v40 -= v41;
          }
          while (v40);
        }
        int v36 = v35 << 8;
        int v37 = v36 - (v35 & 1) + 128;
        if (v36 == 65280) {
          int v37 = 0xFFFF;
        }
        if (!v36) {
          int v37 = 0;
        }
        if (v36 == 0x8000 && v11 == 1) {
          int v37 = v36;
        }
        if (a5 == 4) {
          int v37 = v36;
        }
        v369.i32[v32++] = v37 ^ (((a5 & 0xFFFFFFFD) == 1) << 15);
      }
      while (v32 != 8);
      LOWORD(v13) = v369.i16[0];
      LOWORD(v12) = v369.i16[2];
      LOWORD(v14) = v369.i16[4];
      LOWORD(v15) = v369.i16[6];
      LOWORD(v16) = v370;
      LOWORD(v17) = v371;
      LOWORD(v19) = v372;
      __int16 v18 = v373;
LABEL_5:
      int v20 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kRegionOffset + 2 * v10;
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      BOOL v23 = &v374 + v21;
      uint64_t v24 = 2 * v22;
      *(_WORD *)((char *)v23 + v24) = v13;
      BOOL v25 = &v374 + (v21 + 1);
      *(_WORD *)((char *)v25 + v24) = v12;
      uint64_t v26 = 2 * (v22 + 1);
      *(_WORD *)((char *)v23 + v26) = v14;
      *(_WORD *)((char *)v25 + v26) = v15;
      BOOL v27 = &v374 + (v21 + 2);
      *(_WORD *)((char *)v27 + v24) = v16;
      int v28 = &v374 + (v21 + 3);
      *(_WORD *)((char *)v28 + v24) = v17;
      *(_WORD *)((char *)v27 + v26) = v19;
      *(_WORD *)((char *)v28 + v26) = v18;
      if (++v10 == 4)
      {
        *(_WORD *)a1 = v374;
        *(_WORD *)(a1 + 2) = v375;
        *(_WORD *)(a1 + 4) = v379;
        *(_WORD *)(a1 + 6) = v383;
        *(_WORD *)(a1 + 8) = v387;
        *(_WORD *)(a1 + 10) = v391;
        *(_WORD *)(a1 + 12) = v395;
        *(_WORD *)(a1 + 14) = v399;
        int16x8_t v188 = (_WORD *)(a1 + a2);
        *int16x8_t v188 = WORD1(v374);
        v188[1] = v376;
        v188[2] = v380;
        v188[3] = v384;
        v188[4] = v388;
        v188[5] = v392;
        v188[6] = v396;
        v188[7] = v400;
        int16x8_t v189 = (_WORD *)(a1 + a2 + a2);
        *int16x8_t v189 = WORD2(v374);
        v189[1] = v377;
        v189[2] = v381;
        v189[3] = v385;
        v189[4] = v389;
        v189[5] = v393;
        v189[6] = v397;
        v189[7] = v401;
        int16x8_t v190 = (_WORD *)((char *)v189 + a2);
        *int16x8_t v190 = HIWORD(v374);
        v190[1] = v378;
        v190[2] = v382;
        v190[3] = v386;
        v190[4] = v390;
        v190[5] = v394;
        v190[6] = v398;
        uint64_t v183 = 40;
        v190[7] = v402;
        return v183;
      }
    }
    uint64_t v43 = (*v30 >> v31) & 0xFLL;
    uint64_t v44 = v31 | 4;
    int v45 = &kDQuadParamTable[10 * v43];
    unsigned int v46 = v45[484] + 2;
    LODWORD(v45) = v45[485];
    BOOL v47 = v45 != 0;
    unsigned int v48 = v45 + 2;
    if (v46 >= 0x10) {
      uint64_t v49 = 16;
    }
    else {
      uint64_t v49 = v46;
    }
    if (16 * v47 >= v48) {
      unint64_t v50 = v48;
    }
    else {
      unint64_t v50 = (16 * v47);
    }
    if (v49)
    {
      if ((unint64_t)(v49 - v31 + v44) <= 0x50)
      {
        int v52 = 0;
        uint64_t v51 = 0;
        uint64_t v55 = 0;
        unint64_t v56 = v49;
        do
        {
          unint64_t v57 = 64 - v44;
          if (64 - v44 >= v56) {
            unint64_t v57 = v56;
          }
          v52 |= (unint64_t)((v30[v51] >> v44) & ~(-1 << v57)) << v55;
          v55 += v57;
          unint64_t v58 = v57 + v44;
          v51 += v58 >> 6;
          uint64_t v44 = v58 & 0x3F;
          v56 -= v57;
        }
        while (v56);
        int v53 = v49 + 4;
        if (!v50) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v51 = 0;
        int v52 = 0;
        int v53 = v49 + 4;
        if (!v50) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      int v52 = 0;
      uint64_t v51 = 0;
      int v53 = 4;
      if (!v50)
      {
LABEL_45:
        int v54 = 0;
        uint64_t v59 = 0;
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        int v406 = 0;
        uint64_t v405 = 0;
        goto LABEL_98;
      }
    }
    if ((unint64_t)(v44 - v31 + (v51 << 6) + 3) <= 0x50)
    {
      int v54 = 0;
      uint64_t v60 = 0;
      unint64_t v61 = 3;
      do
      {
        unint64_t v62 = 64 - v44;
        if (64 - v44 >= v61) {
          unint64_t v62 = v61;
        }
        v54 |= (unint64_t)((v30[v51] >> v44) & ~(-1 << v62)) << v60;
        v60 += v62;
        unint64_t v63 = v62 + v44;
        v51 += v63 >> 6;
        uint64_t v44 = v63 & 0x3F;
        v61 -= v62;
      }
      while (v61);
    }
    else
    {
      int v54 = 0;
    }
    uint64_t v403 = 0;
    uint64_t v404 = 0;
    int v406 = 0;
    uint64_t v405 = 0;
    unsigned int v64 = 77 - v53;
    unsigned int v65 = (77 - v53) / 7u;
    unint64_t v66 = v50 - v31;
    unint64_t v67 = (v44 | (v51 << 6)) + v64 % 7;
    unint64_t v68 = v67 & 0x3F;
    if (v66 + v68 + (v67 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      uint64_t v59 = 0;
      uint64_t v69 = 0;
      unint64_t v70 = v67 >> 6;
      unint64_t v71 = v50;
      do
      {
        unint64_t v72 = 64 - v68;
        if (64 - v68 >= v71) {
          unint64_t v72 = v71;
        }
        v59 |= ((unint64_t)((v30[v70] >> v68) & ~(-1 << v72)) << v69);
        v69 += v72;
        unint64_t v73 = v72 + v68;
        v70 += v73 >> 6;
        unint64_t v68 = v73 & 0x3F;
        v71 -= v72;
      }
      while (v71);
      LODWORD(v403) = v59;
      unint64_t v67 = v68 | (v70 << 6);
    }
    else
    {
      uint64_t v59 = 0;
    }
    uint64_t v74 = v65 - v50;
    unint64_t v75 = v67 + v74;
    uint64_t v76 = (v67 + v74) & 0x3F;
    if (v66 + v76 + (v75 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v77 = 0;
      uint64_t v78 = 0;
      unint64_t v79 = v75 >> 6;
      unint64_t v80 = v50;
      do
      {
        unint64_t v81 = 64 - v76;
        if (64 - v76 >= v80) {
          unint64_t v81 = v80;
        }
        v77 |= (unint64_t)((v30[v79] >> v76) & ~(-1 << v81)) << v78;
        v78 += v81;
        unint64_t v82 = v81 + v76;
        v79 += v82 >> 6;
        uint64_t v76 = v82 & 0x3F;
        v80 -= v81;
      }
      while (v80);
      HIDWORD(v403) = v77;
      unint64_t v75 = v76 | (v79 << 6);
    }
    else
    {
      HIDWORD(v403) = 0;
    }
    unint64_t v83 = v75 + v74;
    uint64_t v84 = v83 & 0x3F;
    if (v66 + v84 + (v83 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v85 = 0;
      uint64_t v86 = 0;
      unint64_t v87 = v83 >> 6;
      unint64_t v88 = v50;
      do
      {
        unint64_t v89 = 64 - v84;
        if (64 - v84 >= v88) {
          unint64_t v89 = v88;
        }
        v85 |= (unint64_t)((v30[v87] >> v84) & ~(-1 << v89)) << v86;
        v86 += v89;
        unint64_t v90 = v89 + v84;
        v87 += v90 >> 6;
        uint64_t v84 = v90 & 0x3F;
        v88 -= v89;
      }
      while (v88);
      LODWORD(v404) = v85;
      unint64_t v83 = v84 | (v87 << 6);
    }
    else
    {
      LODWORD(v404) = 0;
    }
    unint64_t v91 = v83 + v74;
    uint64_t v92 = v91 & 0x3F;
    if (v66 + v92 + (v91 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v93 = 0;
      uint64_t v94 = 0;
      unint64_t v95 = v91 >> 6;
      unint64_t v96 = v50;
      do
      {
        unint64_t v97 = 64 - v92;
        if (64 - v92 >= v96) {
          unint64_t v97 = v96;
        }
        v93 |= (unint64_t)((v30[v95] >> v92) & ~(-1 << v97)) << v94;
        v94 += v97;
        unint64_t v98 = v97 + v92;
        v95 += v98 >> 6;
        uint64_t v92 = v98 & 0x3F;
        v96 -= v97;
      }
      while (v96);
      HIDWORD(v404) = v93;
      unint64_t v91 = v92 | (v95 << 6);
    }
    else
    {
      HIDWORD(v404) = 0;
    }
    unint64_t v99 = v91 + v74;
    uint64_t v100 = v99 & 0x3F;
    if (v66 + v100 + (v99 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v101 = 0;
      uint64_t v102 = 0;
      unint64_t v103 = v99 >> 6;
      unint64_t v104 = v50;
      do
      {
        unint64_t v105 = 64 - v100;
        if (64 - v100 >= v104) {
          unint64_t v105 = v104;
        }
        v101 |= (unint64_t)((v30[v103] >> v100) & ~(-1 << v105)) << v102;
        v102 += v105;
        unint64_t v106 = v105 + v100;
        v103 += v106 >> 6;
        uint64_t v100 = v106 & 0x3F;
        v104 -= v105;
      }
      while (v104);
      LODWORD(v405) = v101;
      unint64_t v99 = v100 | (v103 << 6);
    }
    else
    {
      LODWORD(v405) = 0;
    }
    unint64_t v107 = v99 + v74;
    unint64_t v108 = v107 >> 6;
    uint64_t v109 = v107 & 0x3F;
    if (v66 + v109 + (v107 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v110 = 0;
      uint64_t v111 = 0;
      unint64_t v112 = v50;
      do
      {
        unint64_t v113 = 64 - v109;
        if (64 - v109 >= v112) {
          unint64_t v113 = v112;
        }
        v110 |= (unint64_t)((v30[v108] >> v109) & ~(-1 << v113)) << v111;
        v111 += v113;
        unint64_t v114 = v113 + v109;
        v108 += v114 >> 6;
        uint64_t v109 = v114 & 0x3F;
        v112 -= v113;
      }
      while (v112);
    }
    else
    {
      int v110 = 0;
    }
    HIDWORD(v405) = v110;
    unint64_t v115 = (v109 | (v108 << 6)) + v74;
    uint64_t v116 = v115 & 0x3F;
    if (v66 + v116 + (v115 & 0xFFFFFFFFFFFFFFC0) <= 0x50)
    {
      int v117 = 0;
      uint64_t v118 = 0;
      unint64_t v119 = v115 >> 6;
      unint64_t v120 = v50;
      do
      {
        unint64_t v121 = 64 - v116;
        if (64 - v116 >= v120) {
          unint64_t v121 = v120;
        }
        v117 |= (unint64_t)((v30[v119] >> v116) & ~(-1 << v121)) << v118;
        v118 += v121;
        unint64_t v122 = v121 + v116;
        v119 += v122 >> 6;
        uint64_t v116 = v122 & 0x3F;
        v120 -= v121;
      }
      while (v120);
    }
    else
    {
      int v117 = 0;
    }
    int v406 = v117;
LABEL_98:
    char v123 = 16 - v49;
    uint64_t v124 = (v52 << (16 - v49));
    unint64_t v125 = *(void *)&kDQuadParamTable[10 * v43 + 482];
    if (v125 >> v50 <= 1) {
      unint64_t v126 = 1;
    }
    else {
      unint64_t v126 = v125 >> v50;
    }
    unint64_t v127 = v126 >> 1;
    unint64_t v128 = (unint64_t)(1 << v123) >> 1;
    if (v126 >> 1 < v128) {
      unint64_t v128 = v126 >> 1;
    }
    unint64_t v129 = 0x8000 - v124;
    if (!v124) {
      unint64_t v128 = 0;
    }
    BOOL v130 = v124 == 0x8000;
    if (v124 >= 0xFFFF) {
      int v131 = 0xFFFF;
    }
    else {
      int v131 = v124;
    }
    unsigned int v132 = v131 ^ 0x8000;
    if (v126 <= v129)
    {
      __int16 v133 = -1025;
    }
    else
    {
      unsigned int v132 = 0;
      __int16 v133 = 0;
    }
    if (v11 == 1)
    {
      __int16 v18 = v133;
    }
    else
    {
      unsigned int v132 = v131;
      __int16 v18 = 31743;
    }
    if (!v50)
    {
      if (v126 <= v129) {
        __int16 v139 = 31743;
      }
      else {
        __int16 v139 = 0;
      }
      if (v11 == 1) {
        LOWORD(v19) = v139;
      }
      else {
        LOWORD(v19) = -1025;
      }
      if (a5 == 4)
      {
        int v140 = v124 & 0xFFFFFE00;
        a4 = v368;
        if ((v124 & 0xFFFFFE00) == 0x7C00)
        {
          LOWORD(v19) = v18;
          LOWORD(v17) = v18;
          LOWORD(v16) = v18;
          LOWORD(v15) = v18;
          LOWORD(v14) = v18;
          LOWORD(v12) = v18;
          LOWORD(v13) = v18;
        }
        else if (v140 == 64512)
        {
          __int16 v18 = v19;
          LOWORD(v17) = v19;
          LOWORD(v16) = v19;
          LOWORD(v15) = v19;
          LOWORD(v14) = v19;
          LOWORD(v12) = v19;
          LOWORD(v13) = v19;
        }
        else
        {
          LOWORD(v13) = ((a5 & 0xFFFFFFFD) != 1) << 15;
          __int16 v18 = v13;
          LOWORD(v19) = v13;
          LOWORD(v17) = v13;
          LOWORD(v16) = v13;
          LOWORD(v15) = v13;
          LOWORD(v14) = v13;
          LOWORD(v12) = v13;
          if (v140 != 32256)
          {
            __int16 v18 = v132;
            LOWORD(v19) = v132;
            LOWORD(v17) = v132;
            LOWORD(v16) = v132;
            LOWORD(v15) = v132;
            LOWORD(v14) = v132;
            LOWORD(v12) = v132;
            LOWORD(v13) = v132;
          }
        }
      }
      else
      {
        __int16 v18 = v132;
        LOWORD(v19) = v132;
        LOWORD(v17) = v132;
        LOWORD(v16) = v132;
        int32x4_t v369 = vdupq_n_s32(v132);
        LOWORD(v15) = v132;
        LOWORD(v14) = v132;
        LOWORD(v12) = v132;
        LOWORD(v13) = v132;
        a4 = v368;
      }
      goto LABEL_5;
    }
    unint64_t v134 = v125 + v124;
    uint64_t v135 = ~(-1 << v50);
    unint64_t v136 = v129 / v126;
    if (v54)
    {
      BOOL v137 = v136 == v59;
      if (v124 || v59)
      {
        if (v134 >= 0x10000 && v59 == v135)
        {
          uint64_t v138 = 1;
          uint64_t v59 = 0xFFFFLL;
LABEL_136:
          unint64_t v141 = v59 + v124;
          if (a5 == 4)
          {
            unint64_t v142 = v141 & 0xFFFFFFFFFFFFFE00;
            if ((v141 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v141 = 31743;
            }
            else if (v142 == 32256)
            {
              unint64_t v141 = 0x8000;
            }
            else if (v142 == 64512)
            {
              unint64_t v141 = 64511;
            }
          }
          if (v141 >= 0xFFFF) {
            LODWORD(v141) = 0xFFFF;
          }
          if (v137) {
            __int32 v143 = 0;
          }
          else {
            __int32 v143 = v141 ^ 0x8000;
          }
          if (v11 == 1) {
            __int32 v13 = v143;
          }
          else {
            __int32 v13 = v141;
          }
          v369.i32[0] = v13;
          if (v54 == 1)
          {
            uint64_t v144 = v128;
            BOOL v145 = v124 == 0x8000;
          }
          else
          {
            uint64_t v146 = *(unsigned int *)((unint64_t)&v403 | (4 * v138));
            BOOL v145 = v136 == v146;
            if (v124 | v146)
            {
              if (v134 >= 0x10000 && v146 == v135) {
                uint64_t v144 = 0xFFFFLL;
              }
              else {
                uint64_t v144 = v127 + v126 * v146;
              }
            }
            else
            {
              uint64_t v144 = 0;
            }
            ++v138;
          }
          unint64_t v12 = v144 + v124;
          if (a5 == 4)
          {
            unint64_t v147 = v12 & 0xFFFFFFFFFFFFFE00;
            if ((v12 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v12 = 31743;
            }
            else if (v147 == 32256)
            {
              unint64_t v12 = 0x8000;
            }
            else if (v147 == 64512)
            {
              unint64_t v12 = 64511;
            }
          }
          if (v12 >= 0xFFFF) {
            LODWORD(v12) = 0xFFFF;
          }
          if (v145) {
            int v148 = 0;
          }
          else {
            int v148 = v12 ^ 0x8000;
          }
          if (v11 == 1) {
            LODWORD(v12) = v148;
          }
          v369.i32[1] = v12;
          if (v54 == 2)
          {
            uint64_t v149 = v128;
            BOOL v150 = v124 == 0x8000;
          }
          else
          {
            uint64_t v151 = *((unsigned int *)&v403 + v138);
            BOOL v150 = v136 == v151;
            if (v124 | v151)
            {
              if (v134 >= 0x10000 && v151 == v135) {
                uint64_t v149 = 0xFFFFLL;
              }
              else {
                uint64_t v149 = v127 + v126 * v151;
              }
            }
            else
            {
              uint64_t v149 = 0;
            }
            ++v138;
          }
          unint64_t v14 = v149 + v124;
          if (a5 == 4)
          {
            unint64_t v152 = v14 & 0xFFFFFFFFFFFFFE00;
            if ((v14 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v14 = 31743;
            }
            else if (v152 == 32256)
            {
              unint64_t v14 = 0x8000;
            }
            else if (v152 == 64512)
            {
              unint64_t v14 = 64511;
            }
          }
          if (v14 >= 0xFFFF) {
            LODWORD(v14) = 0xFFFF;
          }
          if (v150) {
            int v153 = 0;
          }
          else {
            int v153 = v14 ^ 0x8000;
          }
          if (v11 == 1) {
            LODWORD(v14) = v153;
          }
          v369.i32[2] = v14;
          if (v54 == 3)
          {
            uint64_t v154 = v128;
            BOOL v155 = v124 == 0x8000;
          }
          else
          {
            uint64_t v156 = *((unsigned int *)&v403 + v138);
            BOOL v155 = v136 == v156;
            if (v124 | v156)
            {
              if (v134 >= 0x10000 && v156 == v135) {
                uint64_t v154 = 0xFFFFLL;
              }
              else {
                uint64_t v154 = v127 + v126 * v156;
              }
            }
            else
            {
              uint64_t v154 = 0;
            }
            ++v138;
          }
          unint64_t v157 = v154 + v124;
          if (a5 == 4)
          {
            unint64_t v158 = v157 & 0xFFFFFFFFFFFFFE00;
            if ((v157 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v157 = 31743;
            }
            else if (v158 == 32256)
            {
              unint64_t v157 = 0x8000;
            }
            else if (v158 == 64512)
            {
              unint64_t v157 = 64511;
            }
          }
          if (v157 >= 0xFFFF) {
            int v159 = 0xFFFF;
          }
          else {
            int v159 = v157;
          }
          if (v155) {
            int v160 = 0;
          }
          else {
            int v160 = v159 ^ 0x8000;
          }
          if (v11 == 1) {
            int v15 = v160;
          }
          else {
            int v15 = v159;
          }
          v369.i32[3] = v15;
          if (v54 == 4)
          {
            uint64_t v161 = v128;
            BOOL v162 = v124 == 0x8000;
          }
          else
          {
            uint64_t v163 = *((unsigned int *)&v403 + v138);
            BOOL v162 = v136 == v163;
            if (v124 | v163)
            {
              if (v134 >= 0x10000 && v163 == v135) {
                uint64_t v161 = 0xFFFFLL;
              }
              else {
                uint64_t v161 = v127 + v126 * v163;
              }
            }
            else
            {
              uint64_t v161 = 0;
            }
            ++v138;
          }
          unint64_t v164 = v161 + v124;
          if (a5 == 4)
          {
            unint64_t v165 = v164 & 0xFFFFFFFFFFFFFE00;
            if ((v164 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v164 = 31743;
            }
            else if (v165 == 32256)
            {
              unint64_t v164 = 0x8000;
            }
            else if (v165 == 64512)
            {
              unint64_t v164 = 64511;
            }
          }
          if (v164 >= 0xFFFF) {
            int v166 = 0xFFFF;
          }
          else {
            int v166 = v164;
          }
          if (v162) {
            int v16 = 0;
          }
          else {
            int v16 = v166 ^ 0x8000;
          }
          if (v11 != 1) {
            int v16 = v166;
          }
          int v370 = v16;
          if (v54 == 5)
          {
            uint64_t v167 = v128;
            BOOL v168 = v124 == 0x8000;
          }
          else
          {
            uint64_t v169 = *((unsigned int *)&v403 + v138);
            BOOL v168 = v136 == v169;
            if (v124 | v169)
            {
              if (v134 >= 0x10000 && v169 == v135) {
                uint64_t v167 = 0xFFFFLL;
              }
              else {
                uint64_t v167 = v127 + v126 * v169;
              }
            }
            else
            {
              uint64_t v167 = 0;
            }
            ++v138;
          }
          unint64_t v170 = v167 + v124;
          if (a5 == 4)
          {
            unint64_t v171 = v170 & 0xFFFFFFFFFFFFFE00;
            if ((v170 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v170 = 31743;
            }
            else if (v171 == 32256)
            {
              unint64_t v170 = 0x8000;
            }
            else if (v171 == 64512)
            {
              unint64_t v170 = 64511;
            }
          }
          if (v170 >= 0xFFFF) {
            int v172 = 0xFFFF;
          }
          else {
            int v172 = v170;
          }
          if (v168) {
            int v17 = 0;
          }
          else {
            int v17 = v172 ^ 0x8000;
          }
          if (v11 != 1) {
            int v17 = v172;
          }
          int v371 = v17;
          if (v54 == 6)
          {
            uint64_t v173 = v128;
            BOOL v174 = v124 == 0x8000;
          }
          else
          {
            uint64_t v175 = *((unsigned int *)&v403 + v138);
            BOOL v174 = v136 == v175;
            if (v124 | v175)
            {
              if (v134 >= 0x10000 && v175 == v135) {
                uint64_t v173 = 0xFFFFLL;
              }
              else {
                uint64_t v173 = v127 + v126 * v175;
              }
            }
            else
            {
              uint64_t v173 = 0;
            }
            ++v138;
          }
          unint64_t v176 = v173 + v124;
          if (a5 == 4)
          {
            unint64_t v177 = v176 & 0xFFFFFFFFFFFFFE00;
            if ((v176 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v176 = 31743;
            }
            else if (v177 == 32256)
            {
              unint64_t v176 = 0x8000;
            }
            else if (v177 == 64512)
            {
              unint64_t v176 = 64511;
            }
          }
          if (v176 >= 0xFFFF) {
            int v178 = 0xFFFF;
          }
          else {
            int v178 = v176;
          }
          int v179 = v178 ^ 0x8000;
          if (v174) {
            int v179 = 0;
          }
          if (v11 == 1) {
            int v19 = v179;
          }
          else {
            int v19 = v178;
          }
          int v372 = v19;
          a4 = v368;
          if (v54 != 7)
          {
            uint64_t v180 = *((unsigned int *)&v403 + v138);
            BOOL v130 = v136 == v180;
            if (v124 | v180)
            {
              if (v134 >= 0x10000 && v180 == v135) {
                unint64_t v128 = 0xFFFFLL;
              }
              else {
                unint64_t v128 = v127 + v126 * v180;
              }
            }
            else
            {
              unint64_t v128 = 0;
            }
          }
          unint64_t v181 = v128 + v124;
          int8x16_t v9 = a3;
          if (a5 == 4)
          {
            unint64_t v182 = v181 & 0xFFFFFFFFFFFFFE00;
            if ((v181 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v181 = 31743;
            }
            else if (v182 == 32256)
            {
              unint64_t v181 = 0x8000;
            }
            else if (v182 == 64512)
            {
              unint64_t v181 = 64511;
            }
          }
          if (v181 >= 0xFFFF) {
            LOWORD(v181) = -1;
          }
          __int16 v18 = v181 ^ 0x8000;
          if (v130) {
            __int16 v18 = 0;
          }
          if (v11 != 1) {
            __int16 v18 = v181;
          }
          goto LABEL_5;
        }
        uint64_t v59 = v127 + v126 * v59;
      }
      uint64_t v138 = 1;
      goto LABEL_136;
    }
    uint64_t v138 = 0;
    uint64_t v59 = v128;
    BOOL v137 = v124 == 0x8000;
    goto LABEL_136;
  }
  if (a4 == 63)
  {
    int32x4_t v191 = *a3;
    int32x4_t v192 = a3[1];
    int32x4_t v193 = a3[2];
    int32x4_t v194 = a3[3];
    *(int32x4_t *)a1 = vuzp1q_s32(*a3, v193);
    *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v191, v193);
    int16x8_t v195 = (int32x4_t *)(a1 + 2 * a2);
    *int16x8_t v195 = vuzp1q_s32(v192, v194);
    *(int32x4_t *)((char *)v195 + a2) = vuzp2q_s32(v192, v194);
    return 64;
  }
  if (a4 == 1)
  {
    int16x8_t v187 = vld1q_dup_s16(a3->i16);
    *(int16x8_t *)a1 = v187;
    *(int16x8_t *)(a1 + a2) = v187;
    *(int16x8_t *)(a1 + 2 * a2) = v187;
    *(int16x8_t *)(a1 + 3 * a2) = v187;
    return 2;
  }
  unint64_t v196 = 8 * (a3 & 7);
  unint64_t v197 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v198 = v196 + 22;
  unint64_t v199 = *(void *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) >> v196;
  if (v196 >= 0x2B) {
    v199 |= *(void *)(v197 + 8) << (-8 * (a3 & 7u));
  }
  unint64_t v200 = (8 * (a3 & 7)) | 0x140;
  int v201 = (a4 >> 6) | (4 * v199);
  uint16x8_t v202 = (uint16x8_t)vdupq_n_s16(v201 & 0xF);
  a9.i32[0] = v201 & 0xF;
  v203.i64[0] = 0x3000300030003;
  v203.i64[1] = 0x3000300030003;
  int8x16_t v204 = vbicq_s8((int8x16_t)vdupq_n_s16(((v199 >> 2) & 0xF) + 1), (int8x16_t)vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v203));
  int8x16_t v205 = vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16(vdup_lane_s16((int16x4_t)vand_s8(a9, (int8x8_t)0x4000400040004), 0))));
  v206.i64[0] = 0x202020202020202;
  v206.i64[1] = 0x202020202020202;
  int8x16_t v207 = vandq_s8(v205, v206);
  if (vmaxvq_s8(v207) < 1)
  {
    int v217 = 0;
    v218.i64[0] = -1;
    v218.i64[1] = -1;
    int8x16_t v219 = v204;
    int8x16_t v220 = v204;
    int8x16_t v221 = v204;
    v222.i64[0] = -1;
    v222.i64[1] = -1;
    int8x16_t v223 = v204;
    v224.i64[0] = -1;
    v224.i64[1] = -1;
    v225.i64[0] = -1;
    v225.i64[1] = -1;
  }
  else
  {
    int8x16_t v208 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v207, v207));
    int8x16_t v209 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v208, (int16x8_t)v208));
    unint64_t v210 = vpaddq_s32((int32x4_t)v209, (int32x4_t)v209).u64[0];
    v211.i64[0] = v210;
    v211.i64[1] = HIDWORD(v210);
    int64x2_t v212 = v211;
    unint64_t v213 = vaddvq_s64(v211);
    unint64_t v214 = v213 + v198;
    if (v213 <= 0x80 && v200 >= v214)
    {
      int64x2_t v226 = vaddq_s64(vzip1q_s64((int64x2_t)0, v212), vdupq_n_s64(v198 & 0x3E));
      int8x16_t v227 = (int64x2_t *)(v197 + ((v198 >> 3) & 8));
      int8x16_t v216 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v227, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227->i64[0], 0), (uint64x2_t)vnegq_s64(v226)));
      if (v213 + (v198 & 0x3E) < 0x81)
      {
        int v217 = 0;
      }
      else
      {
        int v217 = 0;
        int8x16_t v216 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v227[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v226))), v216);
      }
      unint64_t v198 = v214;
    }
    else
    {
      int8x16_t v216 = 0uLL;
      int v217 = 1;
    }
    int32x2_t v228 = vzip1_s32(*(int32x2_t *)v209.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL));
    v229.i64[0] = v228.u32[0];
    v229.i64[1] = v228.u32[1];
    int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v216, (uint64x2_t)vnegq_s64(v229));
    *(int32x2_t *)v216.i8 = vmovn_s64((int64x2_t)v216);
    *(int32x2_t *)v230.i8 = vmovn_s64(v230);
    int8x16_t v231 = (int8x16_t)vzip1q_s32((int32x4_t)v216, (int32x4_t)v230);
    int16x8_t v232 = (int16x8_t)vshlq_u32((uint32x4_t)v231, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v208.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL)))));
    *(int16x4_t *)v231.i8 = vmovn_s32((int32x4_t)v231);
    *(int16x4_t *)v232.i8 = vmovn_s32((int32x4_t)v232);
    int8x16_t v233 = (int8x16_t)vzip1q_s16((int16x8_t)v231, v232);
    *(int8x8_t *)v233.i8 = vzip1_s8(vmovn_s16((int16x8_t)v233), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v233, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v207.i8, *(int8x8_t *)v202.i8))))));
    v231.i64[0] = 0x101010101010101;
    v231.i64[1] = 0x101010101010101;
    int8x16_t v234 = vshlq_s8(v231, v207);
    v231.i64[0] = -1;
    v231.i64[1] = -1;
    v234.i32[0] = vandq_s8(v233, vaddq_s8(v234, v231)).u32[0];
    int16x8_t v235 = vdupq_n_s16(v234.i8[0]);
    int16x8_t v236 = vdupq_n_s16(v234.i8[1]);
    int16x8_t v237 = vdupq_n_s16(v234.i8[2]);
    int16x8_t v238 = vdupq_n_s16(v234.i8[3]);
    int8x16_t v223 = (int8x16_t)vsubq_s16((int16x8_t)v204, v235);
    int8x16_t v221 = (int8x16_t)vsubq_s16((int16x8_t)v204, v236);
    int8x16_t v220 = (int8x16_t)vsubq_s16((int16x8_t)v204, v237);
    int8x16_t v219 = (int8x16_t)vsubq_s16((int16x8_t)v204, v238);
    int8x16_t v225 = (int8x16_t)vceqzq_s16(v235);
    int8x16_t v224 = (int8x16_t)vceqzq_s16(v236);
    int8x16_t v222 = (int8x16_t)vceqzq_s16(v237);
    int8x16_t v218 = (int8x16_t)vceqzq_s16(v238);
  }
  v239.i64[0] = 0x7000700070007;
  v239.i64[1] = 0x7000700070007;
  int8x16_t v240 = 0uLL;
  int8x16_t v241 = vandq_s8(vextq_s8((int8x16_t)vcgtq_u16(v202, v239), (int8x16_t)0, 0xEuLL), v204);
  int8x16_t v242 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v241, (int16x8_t)v241));
  unint64_t v243 = vpaddq_s32((int32x4_t)v242, (int32x4_t)v242).u64[0];
  v244.i64[0] = v243;
  v244.i64[1] = HIDWORD(v243);
  int64x2_t v245 = v244;
  unint64_t v246 = vaddvq_s64(v244);
  if (v246 <= 0x80 && v200 >= v246 + v198)
  {
    int64x2_t v248 = vaddq_s64(vzip1q_s64((int64x2_t)0, v245), vdupq_n_s64(v198 & 0x3F));
    int16x8_t v249 = (int64x2_t *)(v197 + 8 * (v198 >> 6));
    int8x16_t v240 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v249, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249->i64[0], 0), (uint64x2_t)vnegq_s64(v248)));
    if (v246 + (v198 & 0x3F) >= 0x81) {
      int8x16_t v240 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v249[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v248))), v240);
    }
    v198 += v246;
  }
  else
  {
    int v217 = 1;
  }
  int v250 = a4 >> 6;
  if (v250 != 2)
  {
    LODWORD(v253) = 0;
    LODWORD(v252) = 0;
    unint64_t v254 = v198;
    goto LABEL_355;
  }
  unint64_t v251 = v198 + 8;
  if (v200 < v198 + 8)
  {
    LODWORD(v252) = 0;
    unint64_t v251 = v198;
LABEL_354:
    LODWORD(v253) = 0;
    int v217 = 1;
    unint64_t v254 = v251;
    goto LABEL_355;
  }
  uint64_t v252 = *(void *)(v197 + 8 * (v198 >> 6)) >> v198;
  if ((v198 & 0x3F) >= 0x39) {
    v252 |= *(void *)(v197 + 8 * (v198 >> 6) + 8) << -(v198 & 0x3F);
  }
  unint64_t v254 = v198 + 16;
  LODWORD(v252) = (char)v252;
  if (v200 < v198 + 16) {
    goto LABEL_354;
  }
  uint64_t v253 = *(void *)(v197 + 8 * (v251 >> 6)) >> v251;
  if ((v251 & 0x3F) >= 0x39) {
    v253 |= *(void *)(v197 + 8 * (v251 >> 6) + 8) << -(v251 & 0x3F);
  }
  LODWORD(v253) = (char)v253;
LABEL_355:
  int8x16_t v255 = 0uLL;
  int8x16_t v256 = vextq_s8((int8x16_t)0, v223, 0xEuLL);
  int8x16_t v257 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v256, (int16x8_t)v256));
  unint64_t v258 = vpaddq_s32((int32x4_t)v257, (int32x4_t)v257).u64[0];
  v259.i64[0] = v258;
  v259.i64[1] = HIDWORD(v258);
  int64x2_t v260 = v259;
  unint64_t v261 = vaddvq_s64(v259);
  unint64_t v262 = v261 + v254;
  if (v261 <= 0x80 && v200 >= v262)
  {
    unint64_t v265 = v254 & 0x3F;
    int64x2_t v266 = vaddq_s64(vzip1q_s64((int64x2_t)0, v260), vdupq_n_s64(v265));
    unint64_t v267 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v264 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v267, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267->i64[0], 0), (uint64x2_t)vnegq_s64(v266)));
    if (v261 + v265 >= 0x81) {
      int8x16_t v264 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v267[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v266))), v264);
    }
    unint64_t v254 = v262;
  }
  else
  {
    int v217 = 1;
    int8x16_t v264 = 0uLL;
  }
  int8x16_t v268 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v221, (int16x8_t)v221));
  unint64_t v269 = vpaddq_s32((int32x4_t)v268, (int32x4_t)v268).u64[0];
  v270.i64[0] = v269;
  v270.i64[1] = HIDWORD(v269);
  int64x2_t v271 = v270;
  unint64_t v272 = vaddvq_s64(v270);
  if (v272 < 0x81)
  {
    int32x2_t v273 = vzip1_s32(*(int32x2_t *)v268.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL));
    v274.i64[0] = v273.u32[0];
    v274.i64[1] = v273.u32[1];
    int64x2_t v275 = v274;
    int32x4_t v276 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v221.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL)));
    unint64_t v277 = v272 + v254;
    if (v200 >= v272 + v254)
    {
      unint64_t v278 = v254 & 0x3F;
      int64x2_t v279 = vaddq_s64(vzip1q_s64((int64x2_t)0, v271), vdupq_n_s64(v278));
      int64x2_t v280 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v255 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v280, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280->i64[0], 0), (uint64x2_t)vnegq_s64(v279)));
      if (v272 + v278 >= 0x81) {
        int8x16_t v255 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v280[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v279))), v255);
      }
      unint64_t v254 = v277;
    }
    else
    {
      int v217 = 1;
    }
    int64x2_t v281 = (int64x2_t)vshlq_u64((uint64x2_t)v255, (uint64x2_t)vnegq_s64(v275));
    *(int32x2_t *)v255.i8 = vmovn_s64((int64x2_t)v255);
    *(int32x2_t *)v281.i8 = vmovn_s64(v281);
    int16x8_t v282 = (int16x8_t)vzip1q_s32((int32x4_t)v255, (int32x4_t)v281);
    int16x8_t v283 = (int16x8_t)vshlq_u32((uint32x4_t)v282, (uint32x4_t)vnegq_s32(v276));
    *(int16x4_t *)v282.i8 = vmovn_s32((int32x4_t)v282);
    *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
    int8x16_t v255 = (int8x16_t)vzip1q_s16(v282, v283);
  }
  else
  {
    int v217 = 1;
  }
  int8x16_t v284 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v220, (int16x8_t)v220));
  unint64_t v285 = vpaddq_s32((int32x4_t)v284, (int32x4_t)v284).u64[0];
  v286.i64[0] = v285;
  v286.i64[1] = HIDWORD(v285);
  int64x2_t v287 = v286;
  unint64_t v288 = vaddvq_s64(v286);
  int8x16_t v289 = 0uLL;
  if (v288 <= 0x80)
  {
    int32x2_t v291 = vzip1_s32(*(int32x2_t *)v284.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v284, v284, 8uLL));
    v292.i64[0] = v291.u32[0];
    v292.i64[1] = v291.u32[1];
    int64x2_t v293 = v292;
    int32x4_t v294 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v220.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)));
    unint64_t v295 = v288 + v254;
    if (v200 >= v288 + v254)
    {
      unint64_t v297 = v254 & 0x3F;
      int64x2_t v298 = vaddq_s64(vzip1q_s64((int64x2_t)0, v287), vdupq_n_s64(v297));
      uint64x2_t v299 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v296 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v299, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299->i64[0], 0), (uint64x2_t)vnegq_s64(v298)));
      if (v288 + v297 >= 0x81) {
        int8x16_t v296 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v299[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v298))), v296);
      }
      unint64_t v254 = v295;
    }
    else
    {
      int8x16_t v296 = 0uLL;
      int v217 = 1;
    }
    int64x2_t v300 = (int64x2_t)vshlq_u64((uint64x2_t)v296, (uint64x2_t)vnegq_s64(v293));
    *(int32x2_t *)v296.i8 = vmovn_s64((int64x2_t)v296);
    *(int32x2_t *)v300.i8 = vmovn_s64(v300);
    int16x8_t v301 = (int16x8_t)vzip1q_s32((int32x4_t)v296, (int32x4_t)v300);
    int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v301, (uint32x4_t)vnegq_s32(v294));
    *(int16x4_t *)v301.i8 = vmovn_s32((int32x4_t)v301);
    *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
    int16x8_t v290 = vzip1q_s16(v301, v302);
  }
  else
  {
    int v217 = 1;
    int16x8_t v290 = 0uLL;
  }
  int8x16_t v303 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v219, (int16x8_t)v219));
  unint64_t v304 = vpaddq_s32((int32x4_t)v303, (int32x4_t)v303).u64[0];
  v305.i64[0] = v304;
  v305.i64[1] = HIDWORD(v304);
  int64x2_t v306 = v305;
  unint64_t v307 = vaddvq_s64(v305);
  if (v307 > 0x80) {
    goto LABEL_387;
  }
  if (v200 >= v307 + v254)
  {
    int64x2_t v308 = vaddq_s64(vzip1q_s64((int64x2_t)0, v306), vdupq_n_s64(v254 & 0x3F));
    unint64_t v309 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v289 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v309, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309->i64[0], 0), (uint64x2_t)vnegq_s64(v308)));
    if (v307 + (v254 & 0x3F) >= 0x81) {
      int8x16_t v289 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v309[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v308))), v289);
    }
    v254 += v307;
  }
  else
  {
    int v217 = 1;
  }
  if (v217 || (uint64_t v183 = (a4 & 0x3F) + 1, 8 * ((a3 & 7) + v183) - v254 >= 9))
  {
LABEL_387:
    uint64_t v183 = 0;
    v374 |= 0xFFFFLL << ((8 * &v374) & 0x30);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v310 = (void *)(a1 + a2);
    unint64_t v311 = (void *)(a1 + 2 * a2);
    *int16x8_t v310 = 0;
    v310[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
    *unint64_t v311 = 0;
    v311[1] = 0;
    goto LABEL_388;
  }
  int32x2_t v313 = vzip1_s32(*(int32x2_t *)v242.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
  int32x2_t v314 = vzip1_s32(*(int32x2_t *)v257.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
  v315.i64[0] = v313.u32[0];
  v315.i64[1] = v313.u32[1];
  int64x2_t v316 = v315;
  v315.i64[0] = v314.u32[0];
  v315.i64[1] = v314.u32[1];
  int64x2_t v317 = (int64x2_t)vshlq_u64((uint64x2_t)v240, (uint64x2_t)vnegq_s64(v316));
  int64x2_t v318 = (int64x2_t)vshlq_u64((uint64x2_t)v264, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v240);
  *(int32x2_t *)v317.i8 = vmovn_s64(v317);
  *(int32x2_t *)v264.i8 = vmovn_s64((int64x2_t)v264);
  *(int32x2_t *)v318.i8 = vmovn_s64(v318);
  int16x8_t v319 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v317);
  int16x8_t v320 = (int16x8_t)vzip1q_s32((int32x4_t)v264, (int32x4_t)v318);
  int16x8_t v321 = (int16x8_t)vshlq_u32((uint32x4_t)v319, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v241.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v241, v241, 8uLL)))));
  int16x8_t v322 = (int16x8_t)vshlq_u32((uint32x4_t)v320, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v256.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL)))));
  *(int16x4_t *)v319.i8 = vmovn_s32((int32x4_t)v319);
  *(int16x4_t *)v321.i8 = vmovn_s32((int32x4_t)v321);
  *(int16x4_t *)v320.i8 = vmovn_s32((int32x4_t)v320);
  *(int16x4_t *)v322.i8 = vmovn_s32((int32x4_t)v322);
  v323.i64[0] = 0x10001000100010;
  v323.i64[1] = 0x10001000100010;
  v324.i64[0] = 0x10001000100010;
  v324.i64[1] = 0x10001000100010;
  unint64_t v325 = v199 >> 6;
  int16x8_t v326 = vzip1q_s16(v319, v321);
  v321.i64[0] = 0xF000F000F000FLL;
  v321.i64[1] = 0xF000F000F000FLL;
  int16x8_t v327 = vsubq_s16(v323, (int16x8_t)v241);
  int16x8_t v328 = vzip1q_s16(v320, v322);
  v322.i64[0] = 0xF000F000F000FLL;
  v322.i64[1] = 0xF000F000F000FLL;
  int32x2_t v329 = vzip1_s32(*(int32x2_t *)v303.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
  v330.i64[0] = 0xF000F000F000FLL;
  v330.i64[1] = 0xF000F000F000FLL;
  v331.i64[0] = 0x10001000100010;
  v331.i64[1] = 0x10001000100010;
  int16x8_t v332 = vaddq_s16((int16x8_t)v241, v321);
  int16x8_t v333 = vaddq_s16((int16x8_t)v256, v322);
  int16x8_t v334 = vshlq_s16(v328, vsubq_s16(v324, (int16x8_t)v256));
  v315.i64[0] = v329.u32[0];
  v315.i64[1] = v329.u32[1];
  int8x16_t v335 = (int8x16_t)vshlq_s16(vshlq_s16(v326, v327), v332);
  int16x8_t v336 = vshlq_s16(v334, v333);
  int16x8_t v337 = vshlq_s16(vshlq_s16((int16x8_t)v255, vsubq_s16(v324, (int16x8_t)v221)), vaddq_s16((int16x8_t)v221, v322));
  int16x8_t v338 = vshlq_s16(vshlq_s16(v290, vsubq_s16(v324, (int16x8_t)v220)), vaddq_s16((int16x8_t)v220, v322));
  int64x2_t v339 = (int64x2_t)vshlq_u64((uint64x2_t)v289, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v334.i8 = vmovn_s64((int64x2_t)v289);
  *(int32x2_t *)v339.i8 = vmovn_s64(v339);
  int16x8_t v340 = (int16x8_t)vzip1q_s32((int32x4_t)v334, (int32x4_t)v339);
  int16x8_t v341 = (int16x8_t)vshlq_u32((uint32x4_t)v340, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v219.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL)))));
  *(int16x4_t *)v340.i8 = vmovn_s32((int32x4_t)v340);
  *(int16x4_t *)v341.i8 = vmovn_s32((int32x4_t)v341);
  int16x8_t v342 = vshlq_s16(vshlq_s16(vzip1q_s16(v340, v341), vsubq_s16(v331, (int16x8_t)v219)), vaddq_s16((int16x8_t)v219, v330));
  if (v250 == 2)
  {
    v343.i64[0] = 0xFFFFFFFF00000000;
    v343.i64[1] = 0xFFFFFFFF00000000;
    int16x8_t v344 = vmlal_s8((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v253), v343), vdup_n_s8(v252), (int8x8_t)0x302030201000100);
    int16x8_t v336 = vaddq_s16(v336, v344);
    int16x8_t v337 = vaddq_s16(vaddq_s16(vdupq_n_s16(2 * (int)v253), v344), v337);
    int16x8_t v338 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252), v344), v338);
    int16x8_t v342 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252 + 2 * (int)v253), v344), v342);
  }
  int16x8_t v345 = vdupq_n_s16(v325);
  int16x8_t v346 = vaddq_s16((int16x8_t)vandq_s8(v335, v225), v336);
  int8x16_t v347 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v335.i8, 0);
  int8x16_t v348 = (int8x16_t)vsubq_s16(v346, (int16x8_t)vandq_s8(v347, v225));
  int8x16_t v349 = (int8x16_t)vsubq_s16(v337, (int16x8_t)vandq_s8(v347, v224));
  int8x16_t v350 = (int8x16_t)vsubq_s16(v338, (int16x8_t)vandq_s8(v347, v222));
  int8x16_t v351 = (int8x16_t)vsubq_s16(v342, (int16x8_t)vandq_s8(v347, v218));
  v352.i64[0] = 0x1000100010001;
  v352.i64[1] = 0x1000100010001;
  if (vaddvq_s16(vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v352)))
  {
    int8x16_t v353 = v348;
    v353.i16[0] = v348.i16[7];
    v353.i16[7] = v348.i16[0];
    int8x16_t v354 = (int8x16_t)vnegq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
    int8x16_t v355 = vbslq_s8(v354, v353, v348);
    int8x16_t v356 = (int8x16_t)vaddq_s16((int16x8_t)v355, (int16x8_t)vandq_s8(vqtbl1q_s8(v355, (int8x16_t)xmmword_242EA7480), v354));
    int8x16_t v348 = (int8x16_t)vaddq_s16((int16x8_t)v356, (int16x8_t)vandq_s8(vqtbl1q_s8(v356, (int8x16_t)xmmword_242EA7490), v354));
    int8x16_t v357 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v349, (int8x16_t)xmmword_242EA74A0), v354), (int16x8_t)v349);
    int8x16_t v349 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v357, (int8x16_t)xmmword_242EA74B0), v354), (int16x8_t)v357);
    int8x16_t v358 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v350, (int8x16_t)xmmword_242EA74C0), v354), (int16x8_t)v350);
    int8x16_t v350 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v358, (int8x16_t)xmmword_242EA74D0), v354), (int16x8_t)v358);
    int8x16_t v359 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v351, (int8x16_t)xmmword_242EA74E0), v354), (int16x8_t)v351);
    int8x16_t v351 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v359, (int8x16_t)xmmword_242EA74F0), v354), (int16x8_t)v359);
  }
  int32x4_t v360 = (int32x4_t)vaddq_s16(v345, (int16x8_t)v348);
  int32x4_t v361 = (int32x4_t)vaddq_s16((int16x8_t)v349, v345);
  int32x4_t v362 = (int32x4_t)vaddq_s16((int16x8_t)v350, v345);
  int32x4_t v363 = (int32x4_t)vaddq_s16((int16x8_t)v351, v345);
  *(int32x4_t *)a1 = vuzp1q_s32(v360, v362);
  *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v360, v362);
  unint64_t v364 = (int32x4_t *)(a1 + 2 * a2);
  *unint64_t v364 = vuzp1q_s32(v361, v363);
  *(int32x4_t *)((char *)v364 + a2) = vuzp2q_s32(v361, v363);
  return v183;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(unint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  uint64_t v16 = a3;
  __int16 v18 = (int32x4_t *)result;
  if (a5 >= 8) {
    unsigned int v19 = 8;
  }
  else {
    unsigned int v19 = a5;
  }
  if (a6 >= 4) {
    unsigned int v20 = 4;
  }
  else {
    unsigned int v20 = a6;
  }
  if (v19 && v20)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(a3, a4, (int32x4_t *)result, a2, v19, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *a4 = 0;
  }
  uint64_t v21 = a4 + 1;
  if (a5 <= 8) {
    int v22 = 8;
  }
  else {
    int v22 = a5;
  }
  unsigned int v23 = v22 - 8;
  if (v23 >= 8) {
    int v24 = 8;
  }
  else {
    int v24 = v23;
  }
  if (v24 && v20)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v21, v18 + 1, a2, v24, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *uint64_t v21 = 0;
  }
  uint64_t v25 = 4 * a2;
  uint64_t v26 = a4 + 2;
  if (a6 <= 4) {
    int v27 = 4;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 4;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v19 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v26, (int32x4_t *)((char *)v18 + v25), a2, v19, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    int v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v26 = 0;
    int v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v30, (int32x4_t *)((char *)v18 + v25 + 16), a2, v24, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int v30 = 0;
LABEL_35:
  uint64_t v31 = a4 + 4;
  if (a6 <= 8) {
    int v32 = 8;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 8;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v19 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v31, (int32x4_t *)((char *)v18 + 8 * a2), a2, v19, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    unsigned __int8 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  else
  {
    *uint64_t v31 = 0;
    unsigned __int8 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  if (v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v35, (int32x4_t *)((char *)v18 + 8 * a2 + 16), a2, v24, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_49;
  }
LABEL_48:
  *unsigned __int8 v35 = 0;
LABEL_49:
  int v36 = a4 + 6;
  if (a6 <= 12) {
    int v37 = 12;
  }
  else {
    int v37 = a6;
  }
  unsigned int v38 = v37 - 12;
  if (v38 >= 4) {
    int v39 = 4;
  }
  else {
    int v39 = v38;
  }
  if (v19 && v39)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v36, (int32x4_t *)((char *)v18 + 12 * a2), a2, v19, v39, a7, a8, a9, a10, a11, a12);
    v16 += result;
    unint64_t v40 = a4 + 7;
    if (!v24) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v36 = 0;
    unint64_t v40 = a4 + 7;
    if (!v24)
    {
LABEL_64:
      *unint64_t v40 = 0;
      return result;
    }
  }
  if (!v39) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v16, v40, (int32x4_t *)((char *)v18 + 12 * a2 + 16), a2, v24, v39, a7, a8, a9, a10, a11, a12);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(uint64_t a1, int32x4_t *a2, unsigned __int8 *a3, int a4, double a5, double a6, double a7, int8x8_t a8)
{
  unsigned int v11 = (int32x4_t *)((char *)a2
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1, 32, a2, *a3, a4, a5, a6, a7, a8));
  uint64_t v16 = (int32x4_t *)((char *)v11
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 16, 32, v11, a3[1], a4, v12, v13, v14, v15));
  uint64_t v21 = (int32x4_t *)((char *)v16
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 128, 32, v16, a3[2], a4, v17, v18, v19, v20));
  uint64_t v26 = (int32x4_t *)((char *)v21
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 144, 32, v21, a3[3], a4, v22, v23, v24, v25));
  uint64_t v31 = (int32x4_t *)((char *)v26
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 256, 32, v26, a3[4], a4, v27, v28, v29, v30));
  int v36 = (int32x4_t *)((char *)v31
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 272, 32, v31, a3[5], a4, v32, v33, v34, v35));
  unint64_t v41 = (int32x4_t *)((char *)v36
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 384, 32, v36, a3[6], a4, v37, v38, v39, v40));
  unsigned int v46 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 400, 32, v41, v46, a4, v42, v43, v44, v45);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(unint64_t a1, unsigned char *a2, int32x4_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  int32x4_t v13 = *(int32x4_t *)((char *)a3 + a4);
  int8x16_t v14 = (int8x16_t)vzip1q_s32(*a3, v13);
  int16x8_t v15 = (int16x8_t)vzip2q_s32(*a3, v13);
  uint64_t v16 = (int32x4_t *)((char *)a3 + 2 * a4);
  int32x4_t v17 = *v16;
  int32x4_t v18 = *(int32x4_t *)((char *)v16 + a4);
  int16x8_t v19 = (int16x8_t)vzip1q_s32(*v16, v18);
  int16x8_t v20 = (int16x8_t)vzip2q_s32(*v16, v18);
  int8x16_t v21 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v14.i8, 0);
  int16x8_t v22 = vsubq_s16((int16x8_t)v14, (int16x8_t)v21);
  int16x8_t v23 = vsubq_s16(v19, (int16x8_t)v21);
  int8x16_t v24 = (int8x16_t)vsubq_s16(v15, (int16x8_t)v21);
  int8x16_t v25 = (int8x16_t)vsubq_s16(v20, (int16x8_t)v21);
  v17.i16[0] = vmaxvq_s16(v22);
  v18.i16[0] = vminvq_s16(v22);
  int16x8_t v26 = vdupq_lane_s16(*(int16x4_t *)v17.i8, 0);
  int16x8_t v27 = vdupq_lane_s16(*(int16x4_t *)v18.i8, 0);
  v28.i64[0] = 0x8000800080008000;
  v28.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v26, v28);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  int16x8_t v31 = vminq_s16(v27, v30);
  int16x8_t v32 = vzip1q_s16(v26, v27);
  int8x16_t v33 = (int8x16_t)vceqzq_s16(v32);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v32)), v33);
  v33.i16[0] = vmaxvq_s16(v23);
  a12.i16[0] = vminvq_s16(v23);
  int16x8_t v36 = vdupq_lane_s16(*(int16x4_t *)v33.i8, 0);
  int16x8_t v37 = vdupq_lane_s16(a12, 0);
  int16x8_t v38 = vpmaxq_s16(v35, v35);
  int16x8_t v39 = vmaxq_s16(v29, v36);
  int16x8_t v40 = vminq_s16(v31, v37);
  int16x8_t v41 = vzip1q_s16(v36, v37);
  int16x8_t v42 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v41)), (int8x16_t)vceqzq_s16(v41));
  int16x8_t v43 = vpmaxq_s16(v42, v42);
  v42.i16[0] = vmaxvq_s16((int16x8_t)v24);
  int16x8_t v44 = vdupq_lane_s16(*(int16x4_t *)v42.i8, 0);
  v36.i16[0] = vminvq_s16((int16x8_t)v24);
  int16x8_t v45 = vdupq_lane_s16(*(int16x4_t *)v36.i8, 0);
  int16x8_t v46 = vmaxq_s16(v39, v44);
  int16x8_t v47 = vminq_s16(v40, v45);
  int16x8_t v48 = vzip1q_s16(v44, v45);
  int8x16_t v49 = (int8x16_t)vceqzq_s16(v48);
  int16x8_t v50 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v48)), v49);
  int16x8_t v51 = vpmaxq_s16(v50, v50);
  v49.i16[0] = vmaxvq_s16((int16x8_t)v25);
  v45.i16[0] = vminvq_s16((int16x8_t)v25);
  int16x8_t v52 = vdupq_lane_s16(*(int16x4_t *)v49.i8, 0);
  int16x8_t v53 = vdupq_lane_s16(*(int16x4_t *)v45.i8, 0);
  int16x8_t v54 = vmaxq_s16(v46, v52);
  int16x8_t v55 = vminq_s16(v47, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int8x16_t v59 = (int8x16_t)vmaxq_s16(vmaxq_s16(v38, v43), vmaxq_s16(v51, v58));
  int16x8_t v60 = vclzq_s16(vsubq_s16(v54, v55));
  int8x16_t v61 = (int8x16_t)vsubq_s16(v34, v60);
  int8x16_t v62 = (int8x16_t)vcgtq_s16((int16x8_t)v59, (int16x8_t)v61);
  int8x16_t v63 = vbslq_s8(v62, v61, v59);
  if (vmaxvq_s16((int16x8_t)v63))
  {
    char v64 = 0;
    unint64_t v65 = 0;
    v66.i64[0] = -1;
    v66.i64[1] = -1;
    v67.i64[0] = 0xF000F000F000FLL;
    v67.i64[1] = 0xF000F000F000FLL;
    int8x16_t v68 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v66, vsubq_s16(v67, v60)), v55), v62);
    v69.i64[0] = 0x8000800080008;
    v69.i64[1] = 0x8000800080008;
    v66.i64[0] = 0x3000300030003;
    v66.i64[1] = 0x3000300030003;
    int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v38), v66), (int16x8_t)0);
    int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v43), v66), (int16x8_t)0);
    int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v51), v66), (int16x8_t)0);
    int8x16_t v73 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v63, v58), v66), (int16x8_t)0);
    int8x16_t v74 = (int8x16_t)vsubq_s16((int16x8_t)v63, v70);
    int8x16_t v75 = (int8x16_t)vsubq_s16((int16x8_t)v63, v71);
    int8x16_t v76 = (int8x16_t)vsubq_s16((int16x8_t)v63, v72);
    int16x8_t v77 = vsubq_s16((int16x8_t)v63, (int16x8_t)v73);
    int8x16_t v78 = (int8x16_t)vceqq_s16(vaddq_s16((int16x8_t)v73, v72), vnegq_s16(vaddq_s16(v70, v71)));
    v73.i64[0] = 0x4000400040004;
    v73.i64[1] = 0x4000400040004;
    int8x16_t v79 = vbicq_s8(v73, v78);
    int8x16_t v80 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v63), (int8x16_t)v66), vandq_s8(v62, v69)), v79);
    if (a5 >= 4 && a6 >= 2)
    {
      int16x8_t v369 = v15;
      int16x8_t v370 = v20;
      int8x16_t v373 = v68;
      v81.i32[0] = v14.u16[2];
      v81.i32[1] = v14.u16[1];
      int32x2_t v82 = vshl_n_s32(vsub_s32(v81, vdup_n_s32(v14.u16[0])), 0x18uLL);
      int v83 = v82.i32[1] >> 24;
      int16x4_t v84 = (int16x4_t)vshl_s32(v82, (int32x2_t)0xFFFFFFEAFFFFFFE9);
      unsigned __int32 v85 = v82.i32[0];
      v86.i64[0] = 0xFFFFFFFF00000000;
      v86.i64[1] = 0xFFFFFFFF00000000;
      int16x8_t v87 = vmlaq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v82.i32[0] >> 24), v86), vdupq_n_s16(v82.i32[1] >> 24), (int16x8_t)xmmword_242EA76B0);
      int8x16_t v88 = (int8x16_t)vsubq_s16(v22, v87);
      int8x16_t v371 = (int8x16_t)v22;
      int8x16_t v372 = (int8x16_t)v23;
      int8x16_t v89 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[0]), v23), v87);
      int8x16_t v90 = (int8x16_t)vsubq_s16(vaddq_s16(vdupq_n_s16(-v84.i32[1]), (int16x8_t)v24), v87);
      int16x8_t v91 = vaddq_s16(vdupq_n_s16(-v84.i32[0] - v84.i32[1]), (int16x8_t)v25);
      int8x16_t v92 = (int8x16_t)vsubq_s16(v91, v87);
      v91.i16[0] = vmaxvq_s16((int16x8_t)v88);
      v84.i16[0] = vminvq_s16((int16x8_t)v88);
      int16x8_t v93 = vdupq_lane_s16(*(int16x4_t *)v91.i8, 0);
      int16x8_t v94 = vdupq_lane_s16(v84, 0);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v96 = vmaxq_s16(v93, v95);
      v95.i64[0] = 0x8000800080008000;
      v95.i64[1] = 0x8000800080008000;
      int16x8_t v97 = vminq_s16(v94, v95);
      int16x8_t v98 = vzip1q_s16(v93, v94);
      int8x16_t v99 = (int8x16_t)vceqzq_s16(v98);
      v100.i64[0] = 0x10001000100010;
      v100.i64[1] = 0x10001000100010;
      int16x8_t v101 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v98)), v99);
      int16x8_t v102 = vpmaxq_s16(v101, v101);
      v99.i16[0] = vmaxvq_s16((int16x8_t)v89);
      v71.i16[0] = vminvq_s16((int16x8_t)v89);
      int16x8_t v103 = vdupq_lane_s16(*(int16x4_t *)v99.i8, 0);
      int16x8_t v104 = vdupq_lane_s16(*(int16x4_t *)v71.i8, 0);
      int16x8_t v105 = vmaxq_s16(v96, v103);
      int16x8_t v106 = vminq_s16(v97, v104);
      int16x8_t v107 = vzip1q_s16(v103, v104);
      int8x16_t v108 = (int8x16_t)vceqzq_s16(v107);
      int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v107)), v108);
      v108.i16[0] = vmaxvq_s16((int16x8_t)v90);
      v12.i16[0] = vminvq_s16((int16x8_t)v90);
      int16x8_t v110 = vdupq_lane_s16(*(int16x4_t *)v108.i8, 0);
      int16x8_t v111 = vdupq_lane_s16(v12, 0);
      int16x8_t v112 = vpmaxq_s16(v109, v109);
      int16x8_t v113 = vmaxq_s16(v105, v110);
      int16x8_t v114 = vminq_s16(v106, v111);
      int16x8_t v115 = vzip1q_s16(v110, v111);
      int8x16_t v116 = (int8x16_t)vceqzq_s16(v115);
      int16x8_t v117 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v115)), v116);
      int8x16_t v118 = (int8x16_t)v77;
      int16x8_t v119 = vpmaxq_s16(v117, v117);
      v117.i16[0] = vmaxvq_s16((int16x8_t)v92);
      int16x8_t v120 = vdupq_lane_s16(*(int16x4_t *)v117.i8, 0);
      v116.i16[0] = vminvq_s16((int16x8_t)v92);
      int16x8_t v121 = vdupq_lane_s16(*(int16x4_t *)v116.i8, 0);
      int16x8_t v122 = vmaxq_s16(v113, v120);
      int16x8_t v123 = vminq_s16(v114, v121);
      int16x8_t v124 = vzip1q_s16(v120, v121);
      int16x8_t v125 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v100, vclsq_s16(v124)), (int8x16_t)vceqzq_s16(v124));
      int16x8_t v126 = vpmaxq_s16(v125, v125);
      int8x16_t v127 = (int8x16_t)vmaxq_s16(vmaxq_s16(v102, v112), vmaxq_s16(v119, v126));
      int16x8_t v128 = vclzq_s16(vsubq_s16(v122, v123));
      int8x16_t v129 = (int8x16_t)vsubq_s16(v100, v128);
      int8x16_t v130 = (int8x16_t)vcgtq_s16((int16x8_t)v127, (int16x8_t)v129);
      int16x8_t v131 = (int16x8_t)vbslq_s8(v130, v129, v127);
      v127.i64[0] = 0x1000100010001;
      v127.i64[1] = 0x1000100010001;
      int8x16_t v132 = (int8x16_t)vmaxq_s16(v131, (int16x8_t)v127);
      v127.i64[0] = 0x3000300030003;
      v127.i64[1] = 0x3000300030003;
      int8x16_t v133 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v102), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v134 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v112), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v119), (int16x8_t)v127), (int16x8_t)0);
      int16x8_t v136 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v132, v126), (int16x8_t)v127), (int16x8_t)0);
      int8x16_t v137 = (int8x16_t)vsubq_s16((int16x8_t)v132, (int16x8_t)v133);
      int8x16_t v138 = (int8x16_t)vsubq_s16((int16x8_t)v132, v134);
      int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v132, v135);
      int8x16_t v140 = (int8x16_t)vsubq_s16((int16x8_t)v132, v136);
      int8x16_t v141 = (int8x16_t)vceqq_s16(vaddq_s16(v136, v135), vnegq_s16(vaddq_s16((int16x8_t)v133, v134)));
      v133.i64[0] = 0x4000400040004;
      v133.i64[1] = 0x4000400040004;
      int8x16_t v142 = vbicq_s8(v133, v141);
      v143.i64[0] = 0x7000700070007;
      v143.i64[1] = 0x7000700070007;
      int16x8_t v144 = (int16x8_t)vandq_s8(v61, v62);
      int16x8_t v145 = vaddq_s16((int16x8_t)v79, (int16x8_t)v79);
      int16x8_t v146 = vmulq_s16((int16x8_t)v74, v143);
      int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      int16x8_t v148 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v144, v146), v147), v145), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v132, v130), vaddq_s16((int16x8_t)v142, (int16x8_t)v142)), (int16x8_t)v137, v143), vaddq_s16(vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v139, (int16x8_t)v138), (int16x8_t)v140), 3uLL), v100))), 0);
      v141.i16[0] = vaddvq_s16(v148);
      int v149 = v141.u16[0];
      unint64_t v65 = v83 | HIWORD(v85);
      if (v141.i16[0])
      {
        v150.i64[0] = 0x2000200020002;
        v150.i64[1] = 0x2000200020002;
        v151.i64[0] = 0xA000A000A000ALL;
        v151.i64[1] = 0xA000A000A000ALL;
        int8x16_t v152 = vbslq_s8(v130, v151, v150);
        v151.i64[0] = -1;
        v151.i64[1] = -1;
        int8x16_t v153 = vorrq_s8(v142, v152);
        v154.i64[0] = 0xF000F000F000FLL;
        v154.i64[1] = 0xF000F000F000FLL;
        int8x16_t v155 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v151, vsubq_s16(v154, v128)), v123), v130);
        int8x16_t v156 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v148, 0xFuLL));
        int8x16_t v371 = vbslq_s8(v156, v88, v371);
        int8x16_t v372 = vbslq_s8(v156, v89, v372);
        int8x16_t v367 = vbslq_s8(v156, v90, v24);
        int8x16_t v368 = vbslq_s8(v156, v92, v25);
        int8x16_t v75 = vbslq_s8(v156, v138, v75);
        int8x16_t v76 = vbslq_s8(v156, v139, v76);
        int8x16_t v118 = vbslq_s8(v156, v140, v118);
        int8x16_t v373 = vbslq_s8(v156, v155, v373);
        int8x16_t v63 = vbslq_s8(v156, v132, v63);
        int8x16_t v80 = vbslq_s8(v156, v153, v80);
        v153.i64[0] = 0x8000800080008;
        v153.i64[1] = 0x8000800080008;
        int16x8_t v145 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), v153);
        int8x16_t v157 = vbslq_s8(v156, v137, v74);
        int16x8_t v146 = vmulq_s16((int16x8_t)v157, v143);
        int16x8_t v147 = vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v76, (int16x8_t)v75), (int16x8_t)v118), 3uLL);
      }
      else
      {
        int8x16_t v157 = v74;
        int8x16_t v367 = v24;
        int8x16_t v368 = v25;
      }
      int16x8_t v77 = (int16x8_t)v118;
      int16x4_t v159 = *(int16x4_t *)v369.i8;
      v160.i64[0] = 0x7000700070007;
      v160.i64[1] = 0x7000700070007;
      int16x8_t v161 = vsubq_s16((int16x8_t)v14, (int16x8_t)vqtbl1q_s8(v14, (int8x16_t)xmmword_242EA7520));
      int8x16_t v162 = (int8x16_t)v19;
      v162.i16[7] = v14.i16[7];
      int8x16_t v163 = (int8x16_t)vsubq_s16(v19, (int16x8_t)vqtbl1q_s8(v162, (int8x16_t)xmmword_242EA7530));
      int8x16_t v164 = (int8x16_t)v369;
      v164.i16[7] = v14.i16[7];
      int8x16_t v165 = (int8x16_t)vsubq_s16(v369, (int16x8_t)vqtbl1q_s8(v164, (int8x16_t)xmmword_242EA7540));
      int8x16_t v166 = (int8x16_t)v370;
      v166.i16[7] = v14.i16[7];
      int16x8_t v167 = (int16x8_t)vqtbl1q_s8(v166, (int8x16_t)xmmword_242EA7550);
      int8x16_t v169 = (int8x16_t)v161;
      v169.i16[0] = v161.i16[7];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v370, v167);
      v169.i16[7] = v161.i16[0];
      v161.i16[0] = vmaxvq_s16((int16x8_t)v169);
      int16x8_t v170 = vdupq_lane_s16(*(int16x4_t *)v161.i8, 0);
      v167.i16[0] = vminvq_s16((int16x8_t)v169);
      int16x8_t v171 = vdupq_lane_s16(*(int16x4_t *)v167.i8, 0);
      v172.i64[0] = 0x8000800080008000;
      v172.i64[1] = 0x8000800080008000;
      int16x8_t v173 = vmaxq_s16(v170, v172);
      v174.i64[0] = 0x8000800080008000;
      v174.i64[1] = 0x8000800080008000;
      int16x8_t v175 = vminq_s16(v171, v174);
      int16x8_t v176 = vzip1q_s16(v170, v171);
      int8x16_t v177 = (int8x16_t)vceqzq_s16(v176);
      v178.i64[0] = 0x10001000100010;
      v178.i64[1] = 0x10001000100010;
      int16x8_t v179 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v176)), v177);
      int16x8_t v180 = vpmaxq_s16(v179, v179);
      v177.i16[0] = vmaxvq_s16((int16x8_t)v163);
      v159.i16[0] = vminvq_s16((int16x8_t)v163);
      int16x8_t v181 = vdupq_lane_s16(*(int16x4_t *)v177.i8, 0);
      int16x8_t v182 = vdupq_lane_s16(v159, 0);
      int16x8_t v183 = vmaxq_s16(v173, v181);
      int16x8_t v184 = vminq_s16(v175, v182);
      int16x8_t v185 = vzip1q_s16(v181, v182);
      int8x16_t v186 = (int8x16_t)vceqzq_s16(v185);
      int16x8_t v187 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v185)), v186);
      v186.i16[0] = vmaxvq_s16((int16x8_t)v165);
      v148.i16[0] = vminvq_s16((int16x8_t)v165);
      int16x8_t v188 = vdupq_lane_s16(*(int16x4_t *)v186.i8, 0);
      int16x8_t v189 = vdupq_lane_s16(*(int16x4_t *)v148.i8, 0);
      int16x8_t v190 = vpmaxq_s16(v187, v187);
      int16x8_t v191 = vmaxq_s16(v183, v188);
      int16x8_t v192 = vminq_s16(v184, v189);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      int8x16_t v194 = (int8x16_t)vceqzq_s16(v193);
      int16x8_t v195 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v193)), v194);
      int16x8_t v196 = vpmaxq_s16(v195, v195);
      v194.i16[0] = vmaxvq_s16((int16x8_t)v168);
      int16x8_t v197 = vdupq_lane_s16(*(int16x4_t *)v194.i8, 0);
      v130.i16[0] = vminvq_s16((int16x8_t)v168);
      int16x8_t v198 = vdupq_lane_s16(*(int16x4_t *)v130.i8, 0);
      int16x8_t v199 = vmaxq_s16(v191, v197);
      int16x8_t v200 = vminq_s16(v192, v198);
      int16x8_t v201 = vzip1q_s16(v197, v198);
      int16x8_t v202 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v178, vclsq_s16(v201)), (int8x16_t)vceqzq_s16(v201));
      int16x8_t v203 = vpmaxq_s16(v202, v202);
      int8x16_t v204 = (int8x16_t)vmaxq_s16(vmaxq_s16(v180, v190), vmaxq_s16(v196, v203));
      int16x8_t v205 = vclzq_s16(vsubq_s16(v199, v200));
      int8x16_t v206 = (int8x16_t)vsubq_s16(v178, v205);
      int8x16_t v207 = (int8x16_t)vcgtq_s16((int16x8_t)v204, (int16x8_t)v206);
      int8x16_t v208 = vbslq_s8(v207, v206, v204);
      v209.i64[0] = 0x3000300030003;
      v209.i64[1] = 0x3000300030003;
      int16x8_t v210 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v180), v209), (int16x8_t)0);
      int8x16_t v211 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v190), v209), (int16x8_t)0);
      int16x8_t v212 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v196), v209), (int16x8_t)0);
      int16x8_t v213 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v208, v203), v209), (int16x8_t)0);
      int8x16_t v214 = (int8x16_t)vsubq_s16((int16x8_t)v208, v210);
      int8x16_t v215 = (int8x16_t)vsubq_s16((int16x8_t)v208, (int16x8_t)v211);
      int8x16_t v216 = (int8x16_t)vsubq_s16((int16x8_t)v208, v212);
      int8x16_t v217 = (int8x16_t)vsubq_s16((int16x8_t)v208, v213);
      int8x16_t v218 = (int8x16_t)vceqq_s16(vaddq_s16(v213, v212), vnegq_s16(vaddq_s16(v210, (int16x8_t)v211)));
      v211.i64[0] = 0x4000400040004;
      v211.i64[1] = 0x4000400040004;
      int8x16_t v219 = vbicq_s8(v211, v218);
      int16x8_t v220 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v206, v207), vaddq_s16((int16x8_t)v219, (int16x8_t)v219)), (int16x8_t)v214, v160), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v216, (int16x8_t)v215), (int16x8_t)v217), 3uLL));
      v206.i64[0] = 0x8000800080008;
      v206.i64[1] = 0x8000800080008;
      v221.i64[0] = 0x2000200020002;
      v221.i64[1] = 0x2000200020002;
      int16x8_t v222 = vdupq_lane_s16((int16x4_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v63, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v80, v206))), v145), vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, (int8x16_t)v209), (int16x8_t)v221), (int8x16_t)v178), v146)), v147), v220), 0);
      v220.i16[0] = vaddvq_s16(v222);
      int v223 = v220.u16[0];
      if (v220.i16[0])
      {
        int8x16_t v224 = vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v208), v221);
        v225.i64[0] = 0x9000900090009;
        v225.i64[1] = 0x9000900090009;
        v226.i64[0] = -1;
        v226.i64[1] = -1;
        int8x16_t v227 = vorrq_s8(vorrq_s8(v224, (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v207, v225), (int16x8_t)vmvnq_s8(v207))), v219);
        v224.i64[0] = 0xF000F000F000FLL;
        v224.i64[1] = 0xF000F000F000FLL;
        int8x16_t v228 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v226, vsubq_s16((int16x8_t)v224, v205)), v200), v207);
        int8x16_t v229 = (int8x16_t)vcltzq_s16(vshlq_n_s16(v222, 0xFuLL));
        v21.i16[0] = vbslq_s8(v229, vextq_s8(v14, v14, 0xEuLL), v21).u16[0];
        int16x8_t v22 = (int16x8_t)vbslq_s8(v229, v169, v371);
        int16x8_t v23 = (int16x8_t)vbslq_s8(v229, v163, v372);
        int8x16_t v24 = vbslq_s8(v229, v165, v367);
        int8x16_t v25 = vbslq_s8(v229, v168, v368);
        int8x16_t v74 = vbslq_s8(v229, v214, v157);
        int8x16_t v75 = vbslq_s8(v229, v215, v75);
        int8x16_t v76 = vbslq_s8(v229, v216, v76);
        int16x8_t v77 = (int16x8_t)vbslq_s8(v229, v217, v118);
        int8x16_t v68 = vbslq_s8(v229, v228, v373);
        int8x16_t v63 = vbslq_s8(v229, v208, v63);
        int8x16_t v80 = vbslq_s8(v229, v227, v80);
      }
      else
      {
        int8x16_t v24 = v367;
        int8x16_t v25 = v368;
        int8x16_t v68 = v373;
        int16x8_t v22 = (int16x8_t)v371;
        int16x8_t v23 = (int16x8_t)v372;
        int8x16_t v74 = v157;
      }
      if (v149) {
        BOOL v230 = v223 == 0;
      }
      else {
        BOOL v230 = 0;
      }
      char v64 = v230;
    }
    v231.i64[0] = 0x8000800080008;
    v231.i64[1] = 0x8000800080008;
    int16x8_t v232 = (int16x8_t)vandq_s8(v80, v231);
    v233.i64[0] = 0x3000300030003;
    v233.i64[1] = 0x3000300030003;
    v234.i64[0] = 0x2000200020002;
    v234.i64[1] = 0x2000200020002;
    int8x16_t v235 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, v233), v234);
    v234.i64[0] = 0x10001000100010;
    v234.i64[1] = 0x10001000100010;
    if ((unint64_t)((__int16)(vbicq_s8(v63, (int8x16_t)vceqzq_s16(v232)).u16[0]
                                    + ((2 * v80.i16[0]) & 8)
                                    + vandq_s8(v235, (int8x16_t)v234).u16[0]
                                    - v74.i16[0]
                                    + 8 * v74.i16[0]
                                    + 8 * vaddq_s16((int16x8_t)v76, vaddq_s16((int16x8_t)v75, v77)).u16[0])
                          - 235) <= 0xFFFFFFFFFFFFFEF7)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressLossyCompressedSubblock(a1, a2, (uint64_t)a3, a4, a5, a6, a7);
      return 32;
    }
    else
    {
      int16x8_t v236 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v237 = 8 * (a1 & 7);
      if (v237) {
        uint64_t v238 = *v236 & ~(-1 << v237);
      }
      else {
        uint64_t v238 = 0;
      }
      if (v63.i16[0]) {
        uint64_t v239 = (16 * v63.i8[0] - 16) & 0xF0;
      }
      else {
        uint64_t v239 = 0;
      }
      *a2 = v80.i8[0] << 6;
      unint64_t v240 = (v239 & 0xFFFFFFFFFF0000F0 | ((unint64_t)v21.u16[0] << 8) | v80.i8[0] & 0xF) >> 2;
      unint64_t v241 = (v240 << v237) | v238;
      if (v237 >= 0x2A)
      {
        *int16x8_t v236 = v241;
        unint64_t v241 = v240 >> (-8 * (a1 & 7u));
      }
      unint64_t v242 = v237 + 22;
      int8x16_t v243 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v74);
      int8x16_t v244 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v245 = (int8x16_t)vsubq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v246 = (int8x16_t)vsubq_s16((int16x8_t)v63, v77);
      *(uint8x8_t *)v243.i8 = vqmovn_u16((uint16x8_t)v243);
      *(uint8x8_t *)v244.i8 = vqmovn_u16((uint16x8_t)v244);
      *(uint8x8_t *)v245.i8 = vqmovn_u16((uint16x8_t)v245);
      *(uint8x8_t *)v246.i8 = vqmovn_u16((uint16x8_t)v246);
      v243.i32[0] = vzip1q_s16((int16x8_t)vzip1q_s8(v243, v244), (int16x8_t)vzip1q_s8(v245, v246)).u32[0];
      v245.i64[0] = 0x202020202020202;
      v245.i64[1] = 0x202020202020202;
      int8x16_t v247 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v80.i8, (int8x8_t)0x4000400040004)))), v245);
      v245.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v245.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v246.i64[0] = -1;
      v246.i64[1] = -1;
      uint8x16_t v248 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v246, (uint8x16_t)vorrq_s8(v247, v245)), (int8x16_t)v243.u32[0]);
      int16x8_t v249 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v247.i8);
      uint16x8_t v250 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v248.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v249)), (int16x8_t)vmovl_high_u8(v248));
      uint16x8_t v251 = (uint16x8_t)vpaddq_s16(v249, (int16x8_t)vmovl_high_u8((uint8x16_t)v247));
      int32x4_t v252 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v251.i8);
      int32x4_t v253 = (int32x4_t)vmovl_high_u16(v251);
      int32x4_t v254 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v250.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v252)), (int32x4_t)vshlq_u32(vmovl_high_u16(v250), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v253)));
      int32x4_t v255 = vpaddq_s32(v252, v253);
      v256.i64[0] = v254.u32[0];
      v256.i64[1] = v254.u32[1];
      uint64x2_t v257 = (uint64x2_t)v256;
      v256.i64[0] = v254.u32[2];
      v256.i64[1] = v254.u32[3];
      uint64x2_t v258 = (uint64x2_t)v256;
      v256.i64[0] = v255.u32[0];
      v256.i64[1] = v255.u32[1];
      int64x2_t v259 = v256;
      v256.i64[0] = v255.u32[2];
      v256.i64[1] = v255.u32[3];
      int64x2_t v260 = vpaddq_s64((int64x2_t)vshlq_u64(v257, (uint64x2_t)vzip1q_s64((int64x2_t)0, v259)), (int64x2_t)vshlq_u64(v258, (uint64x2_t)vzip1q_s64((int64x2_t)0, v256)));
      int64x2_t v261 = vpaddq_s64(v259, v256);
      uint64_t v262 = (v237 + 22) & 0x3E;
      unint64_t v263 = (v260.i64[0] << v262) | v241;
      if ((unint64_t)(v261.i64[0] + v262) >= 0x40)
      {
        *(void *)((char *)v236 + ((v242 >> 3) & 8)) = v263;
        unint64_t v263 = (unint64_t)v260.i64[0] >> -(char)v262;
      }
      unint64_t v264 = v261.i64[0] + v242;
      unint64_t v265 = v263 | (v260.i64[1] << v264);
      if ((v264 & 0x3F) + v261.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v264 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v265;
        unint64_t v265 = (unint64_t)v260.i64[1] >> -(v264 & 0x3F);
        if ((v264 & 0x3F) == 0) {
          unint64_t v265 = 0;
        }
      }
      int8x16_t v266 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v74);
      unint64_t v267 = v264 + v261.i64[1];
      v268.i64[0] = -1;
      v268.i64[1] = -1;
      int16x8_t v269 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16(v232, v232), (int8x16_t)0, 0xEuLL), v63);
      v270.i64[0] = 0xF000F000F000FLL;
      v270.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v271 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v268, (uint16x8_t)vaddq_s16(v269, v270)), v68);
      int32x4_t v272 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v269.i8);
      int32x4_t v273 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v271.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v272)), (int32x4_t)vmovl_high_u16(v271));
      int32x4_t v274 = vpaddq_s32(v272, (int32x4_t)vmovl_high_u16((uint16x8_t)v269));
      v275.i64[0] = v273.u32[0];
      v275.i64[1] = v273.u32[1];
      uint64x2_t v276 = (uint64x2_t)v275;
      v275.i64[0] = v273.u32[2];
      v275.i64[1] = v273.u32[3];
      uint64x2_t v277 = (uint64x2_t)v275;
      v275.i64[0] = v274.u32[0];
      v275.i64[1] = v274.u32[1];
      int64x2_t v278 = v275;
      v275.i64[0] = v274.u32[2];
      v275.i64[1] = v274.u32[3];
      int64x2_t v279 = vpaddq_s64((int64x2_t)vshlq_u64(v276, (uint64x2_t)vzip1q_s64((int64x2_t)0, v278)), (int64x2_t)vshlq_u64(v277, (uint64x2_t)vzip1q_s64((int64x2_t)0, v275)));
      int64x2_t v280 = vpaddq_s64(v278, v275);
      unint64_t v281 = (v279.i64[0] << v267) | v265;
      if (v280.i64[0] + (v267 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v267 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v281;
        unint64_t v281 = (unint64_t)v279.i64[0] >> -(v267 & 0x3F);
        if ((v267 & 0x3F) == 0) {
          unint64_t v281 = 0;
        }
      }
      int16x8_t v282 = (int16x8_t)vandq_s8(v68, v266);
      uint64_t v283 = v280.i64[1];
      unint64_t v284 = v280.i64[0] + v267;
      unint64_t v285 = v281 | (v279.i64[1] << v284);
      if ((v284 & 0x3F) + v280.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v284 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
        unint64_t v285 = (unint64_t)v279.i64[1] >> -(v284 & 0x3F);
        if ((v284 & 0x3F) == 0) {
          unint64_t v285 = 0;
        }
      }
      int8x16_t v286 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v75);
      int8x16_t v287 = (int8x16_t)vaddq_s16(v282, v22);
      unint64_t v288 = v284 + v283;
      if (v64)
      {
        v285 |= v65 << v288;
        if ((v288 & 0x3F) >= 0x30)
        {
          *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v285;
          unint64_t v285 = v65 >> -(v288 & 0x3F);
        }
        v288 += 16;
      }
      int16x8_t v289 = (int16x8_t)vandq_s8(v68, v286);
      int16x8_t v290 = (int16x8_t)vextq_s8((int8x16_t)0, v74, 0xEuLL);
      v291.i64[0] = 0xF000F000F000FLL;
      v291.i64[1] = 0xF000F000F000FLL;
      v292.i64[0] = -1;
      v292.i64[1] = -1;
      uint16x8_t v293 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v292, (uint16x8_t)vaddq_s16(v290, v291)), v287);
      int32x4_t v294 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v290.i8);
      int32x4_t v295 = (int32x4_t)vmovl_high_u16((uint16x8_t)v290);
      int32x4_t v296 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v293.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v294)), (int32x4_t)vshlq_u32(vmovl_high_u16(v293), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v295)));
      int32x4_t v297 = vpaddq_s32(v294, v295);
      v298.i64[0] = v296.u32[0];
      v298.i64[1] = v296.u32[1];
      uint64x2_t v299 = (uint64x2_t)v298;
      v298.i64[0] = v296.u32[2];
      v298.i64[1] = v296.u32[3];
      uint64x2_t v300 = (uint64x2_t)v298;
      v298.i64[0] = v297.u32[0];
      v298.i64[1] = v297.u32[1];
      int64x2_t v301 = v298;
      v298.i64[0] = v297.u32[2];
      v298.i64[1] = v297.u32[3];
      int64x2_t v302 = vpaddq_s64((int64x2_t)vshlq_u64(v299, (uint64x2_t)vzip1q_s64((int64x2_t)0, v301)), (int64x2_t)vshlq_u64(v300, (uint64x2_t)vzip1q_s64((int64x2_t)0, v298)));
      int64x2_t v303 = vpaddq_s64(v301, v298);
      unint64_t v304 = (v302.i64[0] << v288) | v285;
      if (v303.i64[0] + (v288 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v288 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v304;
        unint64_t v304 = (unint64_t)v302.i64[0] >> -(v288 & 0x3F);
        if ((v288 & 0x3F) == 0) {
          unint64_t v304 = 0;
        }
      }
      int8x16_t v305 = (int8x16_t)vceqq_s16((int16x8_t)v63, (int16x8_t)v76);
      int8x16_t v306 = (int8x16_t)vaddq_s16(v23, v289);
      unint64_t v307 = v303.i64[0] + v288;
      uint64_t v308 = (v303.i64[0] + v288) & 0x3F;
      unint64_t v309 = v304 | (v302.i64[1] << v307);
      if ((v307 & 0x3F) + v303.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v307 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v309;
        unint64_t v309 = (unint64_t)v302.i64[1] >> -(char)v308;
        if (!v308) {
          unint64_t v309 = 0;
        }
      }
      int16x8_t v310 = (int16x8_t)vandq_s8(v68, v305);
      unint64_t v311 = v307 + v303.i64[1];
      v312.i64[0] = 0xF000F000F000FLL;
      v312.i64[1] = 0xF000F000F000FLL;
      v313.i64[0] = -1;
      v313.i64[1] = -1;
      uint16x8_t v314 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v313, (uint16x8_t)vaddq_s16((int16x8_t)v75, v312)), v306);
      int32x4_t v315 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8);
      int32x4_t v316 = (int32x4_t)vmovl_high_u16((uint16x8_t)v75);
      int32x4_t v317 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v314.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v315)), (int32x4_t)vshlq_u32(vmovl_high_u16(v314), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v316)));
      int32x4_t v318 = vpaddq_s32(v315, v316);
      v319.i64[0] = v317.u32[0];
      v319.i64[1] = v317.u32[1];
      uint64x2_t v320 = (uint64x2_t)v319;
      v319.i64[0] = v317.u32[2];
      v319.i64[1] = v317.u32[3];
      uint64x2_t v321 = (uint64x2_t)v319;
      v319.i64[0] = v318.u32[0];
      v319.i64[1] = v318.u32[1];
      int64x2_t v322 = v319;
      v319.i64[0] = v318.u32[2];
      v319.i64[1] = v318.u32[3];
      int64x2_t v323 = vpaddq_s64((int64x2_t)vshlq_u64(v320, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)), (int64x2_t)vshlq_u64(v321, (uint64x2_t)vzip1q_s64((int64x2_t)0, v319)));
      int64x2_t v324 = vpaddq_s64(v322, v319);
      unint64_t v325 = (v323.i64[0] << v311) | v309;
      if (v324.i64[0] + (v311 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v325;
        unint64_t v325 = (unint64_t)v323.i64[0] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v325 = 0;
        }
      }
      int8x16_t v326 = (int8x16_t)vceqq_s16((int16x8_t)v63, v77);
      int8x16_t v327 = (int8x16_t)vaddq_s16((int16x8_t)v24, v310);
      unint64_t v328 = v324.i64[0] + v311;
      unint64_t v329 = v325 | (v323.i64[1] << v328);
      if ((v328 & 0x3F) + v324.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v328 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
        unint64_t v329 = (unint64_t)v323.i64[1] >> -(v328 & 0x3F);
        if ((v328 & 0x3F) == 0) {
          unint64_t v329 = 0;
        }
      }
      int16x8_t v330 = (int16x8_t)vandq_s8(v68, v326);
      unint64_t v331 = v328 + v324.i64[1];
      v332.i64[0] = 0xF000F000F000FLL;
      v332.i64[1] = 0xF000F000F000FLL;
      v333.i64[0] = -1;
      v333.i64[1] = -1;
      uint16x8_t v334 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v333, (uint16x8_t)vaddq_s16((int16x8_t)v76, v332)), v327);
      int32x4_t v335 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8);
      int32x4_t v336 = (int32x4_t)vmovl_high_u16((uint16x8_t)v76);
      int32x4_t v337 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v334.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v335)), (int32x4_t)vshlq_u32(vmovl_high_u16(v334), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v336)));
      int32x4_t v338 = vpaddq_s32(v335, v336);
      v339.i64[0] = v337.u32[0];
      v339.i64[1] = v337.u32[1];
      uint64x2_t v340 = (uint64x2_t)v339;
      v339.i64[0] = v337.u32[2];
      v339.i64[1] = v337.u32[3];
      uint64x2_t v341 = (uint64x2_t)v339;
      v339.i64[0] = v338.u32[0];
      v339.i64[1] = v338.u32[1];
      int64x2_t v342 = v339;
      v339.i64[0] = v338.u32[2];
      v339.i64[1] = v338.u32[3];
      int64x2_t v343 = vpaddq_s64((int64x2_t)vshlq_u64(v340, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)), (int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v339)));
      int64x2_t v344 = vpaddq_s64(v342, v339);
      unint64_t v345 = (v343.i64[0] << v331) | v329;
      if (v344.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v236 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v345;
        unint64_t v345 = (unint64_t)v343.i64[0] >> -(v331 & 0x3F);
        if ((v331 & 0x3F) == 0) {
          unint64_t v345 = 0;
        }
      }
      int8x16_t v346 = (int8x16_t)vaddq_s16((int16x8_t)v25, v330);
      unint64_t v347 = v344.i64[0] + v331;
      unint64_t v348 = v345 | (v343.i64[1] << v347);
      if ((v347 & 0x3F) + v344.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        unint64_t v348 = (unint64_t)v343.i64[1] >> -(v347 & 0x3F);
        if ((v347 & 0x3F) == 0) {
          unint64_t v348 = 0;
        }
      }
      unint64_t v349 = v347 + v344.i64[1];
      v350.i64[0] = 0xF000F000F000FLL;
      v350.i64[1] = 0xF000F000F000FLL;
      v351.i64[0] = -1;
      v351.i64[1] = -1;
      uint16x8_t v352 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v351, (uint16x8_t)vaddq_s16(v77, v350)), v346);
      int32x4_t v353 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8);
      int32x4_t v354 = (int32x4_t)vmovl_high_u16((uint16x8_t)v77);
      int32x4_t v355 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v352.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v353)), (int32x4_t)vshlq_u32(vmovl_high_u16(v352), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v354)));
      int32x4_t v356 = vpaddq_s32(v353, v354);
      v357.i64[0] = v355.u32[0];
      v357.i64[1] = v355.u32[1];
      uint64x2_t v358 = (uint64x2_t)v357;
      v357.i64[0] = v355.u32[2];
      v357.i64[1] = v355.u32[3];
      uint64x2_t v359 = (uint64x2_t)v357;
      v357.i64[0] = v356.u32[0];
      v357.i64[1] = v356.u32[1];
      int64x2_t v360 = v357;
      v357.i64[0] = v356.u32[2];
      v357.i64[1] = v356.u32[3];
      int64x2_t v361 = vpaddq_s64((int64x2_t)vshlq_u64(v358, (uint64x2_t)vzip1q_s64((int64x2_t)0, v360)), (int64x2_t)vshlq_u64(v359, (uint64x2_t)vzip1q_s64((int64x2_t)0, v357)));
      int64x2_t v362 = vpaddq_s64(v360, v357);
      unint64_t v363 = (v361.i64[0] << v349) | v348;
      if (v362.i64[0] + (v349 & 0x3F) > 0x3F)
      {
        *(void *)((char *)v236 + ((v349 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v363;
        if ((v349 & 0x3F) != 0) {
          unint64_t v363 = (unint64_t)v361.i64[0] >> -(v349 & 0x3F);
        }
        else {
          unint64_t v363 = 0;
        }
      }
      unint64_t v364 = v362.i64[0] + v349;
      unint64_t v365 = v363 | (v361.i64[1] << v364);
      if ((v364 & 0x3F) + v362.i64[1] >= 0x40)
      {
        *(void *)((char *)v236 + ((v364 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
        unint64_t v365 = (unint64_t)v361.i64[1] >> -(v364 & 0x3F);
        if ((v364 & 0x3F) == 0) {
          unint64_t v365 = 0;
        }
      }
      unint64_t v366 = v364 + v362.i64[1];
      if ((v366 & 0x3F) != 0) {
        *(void *)((char *)v236 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
      }
      unint64_t result = (v366 - v237 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_WORD *)a1 = a3->i16[0];
    *a2 = 1;
    return 2;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(uint64_t a1, uint64_t a2, int32x4_t *a3, unsigned int a4, int a5, double a6, double a7, double a8, int8x8_t a9)
{
  uint64_t v407 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v183 = 0;
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v184 = (void *)(a1 + a2);
    *int16x8_t v184 = 0;
    v184[1] = 0;
    int16x8_t v185 = (void *)(a1 + 2 * a2);
    *int16x8_t v185 = 0;
    v185[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
LABEL_392:
    *int8x16_t v186 = 0;
    v186[1] = 0;
    return v183;
  }
  int8x16_t v9 = a3;
  if (a4 >= 0xF0)
  {
    uint64_t v10 = 0;
    unsigned int v11 = a5 & 0xFFFFFFFD;
    unsigned int v368 = a4;
    while (1)
    {
      int16x8_t v29 = &v9->i64[v10];
      int16x8_t v30 = (void *)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v31 = 8 * (v29 & 7);
      if (((a4 >> v10) & 1) == 0) {
        break;
      }
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = v31;
      do
      {
        if ((unint64_t)(v34 - v31 + (v33 << 6) - 57) < 0xFFFFFFFFFFFFFFBFLL)
        {
          unsigned __int8 v35 = 0;
        }
        else
        {
          unsigned __int8 v35 = 0;
          uint64_t v39 = 0;
          unint64_t v40 = 8;
          do
          {
            unint64_t v41 = 64 - v34;
            if (64 - v34 >= v40) {
              unint64_t v41 = v40;
            }
            v35 |= (unint64_t)((v30[v33] >> v34) & ~(-1 << v41)) << v39;
            v39 += v41;
            unint64_t v42 = v41 + v34;
            v33 += v42 >> 6;
            uint64_t v34 = v42 & 0x3F;
            v40 -= v41;
          }
          while (v40);
        }
        int v36 = v35 << 8;
        int v37 = v36 - (v35 & 1) + 128;
        if (v36 == 65280) {
          int v37 = 0xFFFF;
        }
        if (!v36) {
          int v37 = 0;
        }
        if (v36 == 0x8000 && v11 == 1) {
          int v37 = v36;
        }
        if (a5 == 4) {
          int v37 = v36;
        }
        v369.i32[v32++] = v37 ^ (((a5 & 0xFFFFFFFD) == 1) << 15);
      }
      while (v32 != 8);
      LOWORD(v13) = v369.i16[0];
      LOWORD(v12) = v369.i16[2];
      LOWORD(v14) = v369.i16[4];
      LOWORD(v15) = v369.i16[6];
      LOWORD(v17) = v370;
      LOWORD(v16) = v371;
      LOWORD(v19) = v372;
      __int16 v18 = v373;
LABEL_5:
      int16x8_t v20 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kRegionOffset + 2 * v10;
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      int16x8_t v23 = &v374 + v21;
      uint64_t v24 = 2 * v22;
      *(_WORD *)((char *)v23 + v24) = v13;
      int8x16_t v25 = &v374 + (v21 + 1);
      *(_WORD *)((char *)v25 + v24) = v12;
      uint64_t v26 = 2 * (v22 + 1);
      *(_WORD *)((char *)v23 + v26) = v14;
      *(_WORD *)((char *)v25 + v26) = v15;
      int16x8_t v27 = &v374 + (v21 + 2);
      *(_WORD *)((char *)v27 + v24) = v17;
      int16x8_t v28 = &v374 + (v21 + 3);
      *(_WORD *)((char *)v28 + v24) = v16;
      *(_WORD *)((char *)v27 + v26) = v19;
      *(_WORD *)((char *)v28 + v26) = v18;
      if (++v10 == 4)
      {
        *(_WORD *)a1 = v374;
        *(_WORD *)(a1 + 2) = v375;
        *(_WORD *)(a1 + 4) = v379;
        *(_WORD *)(a1 + 6) = v383;
        *(_WORD *)(a1 + 8) = v387;
        *(_WORD *)(a1 + 10) = v391;
        *(_WORD *)(a1 + 12) = v395;
        *(_WORD *)(a1 + 14) = v399;
        int16x8_t v188 = (_WORD *)(a1 + a2);
        *int16x8_t v188 = WORD1(v374);
        v188[1] = v376;
        v188[2] = v380;
        v188[3] = v384;
        v188[4] = v388;
        v188[5] = v392;
        v188[6] = v396;
        v188[7] = v400;
        int16x8_t v189 = (_WORD *)(a1 + a2 + a2);
        *int16x8_t v189 = WORD2(v374);
        v189[1] = v377;
        v189[2] = v381;
        v189[3] = v385;
        v189[4] = v389;
        v189[5] = v393;
        v189[6] = v397;
        v189[7] = v401;
        int16x8_t v190 = (_WORD *)((char *)v189 + a2);
        *int16x8_t v190 = HIWORD(v374);
        v190[1] = v378;
        v190[2] = v382;
        v190[3] = v386;
        v190[4] = v390;
        v190[5] = v394;
        v190[6] = v398;
        uint64_t v183 = 32;
        v190[7] = v402;
        return v183;
      }
    }
    uint64_t v43 = (*v30 >> v31) & 0xFLL;
    uint64_t v44 = v31 | 4;
    int16x8_t v45 = &kDQuadParamTable[10 * v43];
    unsigned int v46 = v45[484];
    unsigned int v47 = v45[485];
    if (v46 >= 0x10) {
      uint64_t v48 = 16;
    }
    else {
      uint64_t v48 = v46;
    }
    if (v47 >= 0x10) {
      uint64_t v49 = 16;
    }
    else {
      uint64_t v49 = v47;
    }
    if (v48)
    {
      if ((unint64_t)(v48 - v31 + v44) <= 0x40)
      {
        int v51 = 0;
        uint64_t v50 = 0;
        uint64_t v54 = 0;
        unint64_t v55 = v48;
        do
        {
          unint64_t v56 = 64 - v44;
          if (64 - v44 >= v55) {
            unint64_t v56 = v55;
          }
          v51 |= (unint64_t)((v30[v50] >> v44) & ~(-1 << v56)) << v54;
          v54 += v56;
          unint64_t v57 = v56 + v44;
          v50 += v57 >> 6;
          uint64_t v44 = v57 & 0x3F;
          v55 -= v56;
        }
        while (v55);
        int v52 = v48 + 4;
        if (!v49) {
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v50 = 0;
        int v51 = 0;
        int v52 = v48 + 4;
        if (!v49) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      int v51 = 0;
      uint64_t v50 = 0;
      int v52 = 4;
      if (!v49)
      {
LABEL_45:
        int v53 = 0;
        uint64_t v58 = 0;
        uint64_t v403 = 0;
        uint64_t v404 = 0;
        int v406 = 0;
        uint64_t v405 = 0;
        goto LABEL_98;
      }
    }
    if ((unint64_t)(v44 - v31 + (v50 << 6) + 3) <= 0x40)
    {
      int v53 = 0;
      uint64_t v59 = 0;
      unint64_t v60 = 3;
      do
      {
        unint64_t v61 = 64 - v44;
        if (64 - v44 >= v60) {
          unint64_t v61 = v60;
        }
        v53 |= (unint64_t)((v30[v50] >> v44) & ~(-1 << v61)) << v59;
        v59 += v61;
        unint64_t v62 = v61 + v44;
        v50 += v62 >> 6;
        uint64_t v44 = v62 & 0x3F;
        v60 -= v61;
      }
      while (v60);
    }
    else
    {
      int v53 = 0;
    }
    uint64_t v403 = 0;
    uint64_t v404 = 0;
    int v406 = 0;
    uint64_t v405 = 0;
    unsigned int v63 = 61 - v52;
    unsigned int v64 = (61 - v52) / 7u;
    uint64_t v65 = v49 - v31;
    unint64_t v66 = (v44 | (v50 << 6)) + v63 % 7;
    unint64_t v67 = v66 & 0x3F;
    if (v65 + v67 + (v66 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      uint64_t v58 = 0;
      uint64_t v68 = 0;
      unint64_t v69 = v66 >> 6;
      unint64_t v70 = v49;
      do
      {
        unint64_t v71 = 64 - v67;
        if (64 - v67 >= v70) {
          unint64_t v71 = v70;
        }
        v58 |= ((unint64_t)((v30[v69] >> v67) & ~(-1 << v71)) << v68);
        v68 += v71;
        unint64_t v72 = v71 + v67;
        v69 += v72 >> 6;
        unint64_t v67 = v72 & 0x3F;
        v70 -= v71;
      }
      while (v70);
      LODWORD(v403) = v58;
      unint64_t v66 = v67 | (v69 << 6);
    }
    else
    {
      uint64_t v58 = 0;
    }
    uint64_t v73 = v64 - v49;
    unint64_t v74 = v66 + v73;
    uint64_t v75 = (v66 + v73) & 0x3F;
    if (v65 + v75 + ((v66 + v73) & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v76 = 0;
      uint64_t v77 = 0;
      unint64_t v78 = v74 >> 6;
      unint64_t v79 = v49;
      do
      {
        unint64_t v80 = 64 - v75;
        if (64 - v75 >= v79) {
          unint64_t v80 = v79;
        }
        v76 |= (unint64_t)((v30[v78] >> v75) & ~(-1 << v80)) << v77;
        v77 += v80;
        unint64_t v81 = v80 + v75;
        v78 += v81 >> 6;
        uint64_t v75 = v81 & 0x3F;
        v79 -= v80;
      }
      while (v79);
      HIDWORD(v403) = v76;
      unint64_t v74 = v75 | (v78 << 6);
    }
    else
    {
      HIDWORD(v403) = 0;
    }
    unint64_t v82 = v74 + v73;
    uint64_t v83 = v82 & 0x3F;
    if (v65 + v83 + (v82 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v84 = 0;
      uint64_t v85 = 0;
      unint64_t v86 = v82 >> 6;
      unint64_t v87 = v49;
      do
      {
        unint64_t v88 = 64 - v83;
        if (64 - v83 >= v87) {
          unint64_t v88 = v87;
        }
        v84 |= (unint64_t)((v30[v86] >> v83) & ~(-1 << v88)) << v85;
        v85 += v88;
        unint64_t v89 = v88 + v83;
        v86 += v89 >> 6;
        uint64_t v83 = v89 & 0x3F;
        v87 -= v88;
      }
      while (v87);
      LODWORD(v404) = v84;
      unint64_t v82 = v83 | (v86 << 6);
    }
    else
    {
      LODWORD(v404) = 0;
    }
    unint64_t v90 = v82 + v73;
    uint64_t v91 = v90 & 0x3F;
    if (v65 + v91 + (v90 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v92 = 0;
      uint64_t v93 = 0;
      unint64_t v94 = v90 >> 6;
      unint64_t v95 = v49;
      do
      {
        unint64_t v96 = 64 - v91;
        if (64 - v91 >= v95) {
          unint64_t v96 = v95;
        }
        v92 |= (unint64_t)((v30[v94] >> v91) & ~(-1 << v96)) << v93;
        v93 += v96;
        unint64_t v97 = v96 + v91;
        v94 += v97 >> 6;
        uint64_t v91 = v97 & 0x3F;
        v95 -= v96;
      }
      while (v95);
      HIDWORD(v404) = v92;
      unint64_t v90 = v91 | (v94 << 6);
    }
    else
    {
      HIDWORD(v404) = 0;
    }
    unint64_t v98 = v90 + v73;
    uint64_t v99 = v98 & 0x3F;
    if (v65 + v99 + (v98 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v100 = 0;
      uint64_t v101 = 0;
      unint64_t v102 = v98 >> 6;
      unint64_t v103 = v49;
      do
      {
        unint64_t v104 = 64 - v99;
        if (64 - v99 >= v103) {
          unint64_t v104 = v103;
        }
        v100 |= (unint64_t)((v30[v102] >> v99) & ~(-1 << v104)) << v101;
        v101 += v104;
        unint64_t v105 = v104 + v99;
        v102 += v105 >> 6;
        uint64_t v99 = v105 & 0x3F;
        v103 -= v104;
      }
      while (v103);
      LODWORD(v405) = v100;
      unint64_t v98 = v99 | (v102 << 6);
    }
    else
    {
      LODWORD(v405) = 0;
    }
    unint64_t v106 = v98 + v73;
    unint64_t v107 = v106 >> 6;
    uint64_t v108 = v106 & 0x3F;
    if (v65 + v108 + (v106 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v109 = 0;
      uint64_t v110 = 0;
      unint64_t v111 = v49;
      do
      {
        unint64_t v112 = 64 - v108;
        if (64 - v108 >= v111) {
          unint64_t v112 = v111;
        }
        v109 |= (unint64_t)((v30[v107] >> v108) & ~(-1 << v112)) << v110;
        v110 += v112;
        unint64_t v113 = v112 + v108;
        v107 += v113 >> 6;
        uint64_t v108 = v113 & 0x3F;
        v111 -= v112;
      }
      while (v111);
    }
    else
    {
      int v109 = 0;
    }
    HIDWORD(v405) = v109;
    unint64_t v114 = (v108 | (v107 << 6)) + v73;
    uint64_t v115 = v114 & 0x3F;
    if (v65 + v115 + (v114 & 0xFFFFFFFFFFFFFFC0) <= 0x40)
    {
      int v116 = 0;
      uint64_t v117 = 0;
      unint64_t v118 = v114 >> 6;
      unint64_t v119 = v49;
      do
      {
        unint64_t v120 = 64 - v115;
        if (64 - v115 >= v119) {
          unint64_t v120 = v119;
        }
        v116 |= (unint64_t)((v30[v118] >> v115) & ~(-1 << v120)) << v117;
        v117 += v120;
        unint64_t v121 = v120 + v115;
        v118 += v121 >> 6;
        uint64_t v115 = v121 & 0x3F;
        v119 -= v120;
      }
      while (v119);
    }
    else
    {
      int v116 = 0;
    }
    int v406 = v116;
LABEL_98:
    char v122 = 16 - v48;
    uint64_t v123 = (v51 << (16 - v48));
    unint64_t v124 = *(void *)&kDQuadParamTable[10 * v43 + 482];
    if (v124 >> v49 <= 1) {
      unint64_t v125 = 1;
    }
    else {
      unint64_t v125 = v124 >> v49;
    }
    unint64_t v126 = v125 >> 1;
    unint64_t v127 = (unint64_t)(1 << v122) >> 1;
    if (v125 >> 1 < v127) {
      unint64_t v127 = v125 >> 1;
    }
    unint64_t v128 = 0x8000 - v123;
    if (!v123) {
      unint64_t v127 = 0;
    }
    BOOL v129 = v123 == 0x8000;
    if (v123 >= 0xFFFF) {
      int v130 = 0xFFFF;
    }
    else {
      int v130 = v123;
    }
    int v131 = v130 ^ 0x8000;
    if (v125 <= v128)
    {
      __int16 v132 = -1025;
    }
    else
    {
      int v131 = 0;
      __int16 v132 = 0;
    }
    if (v11 == 1) {
      unsigned int v133 = v131;
    }
    else {
      unsigned int v133 = v130;
    }
    if (v11 == 1) {
      __int16 v18 = v132;
    }
    else {
      __int16 v18 = 31743;
    }
    if (!v49)
    {
      if (v125 <= v128) {
        __int16 v139 = 31743;
      }
      else {
        __int16 v139 = 0;
      }
      if (v11 == 1) {
        LOWORD(v19) = v139;
      }
      else {
        LOWORD(v19) = -1025;
      }
      if (a5 == 4)
      {
        int v140 = v123 & 0xFFFFFE00;
        a4 = v368;
        if ((v123 & 0xFFFFFE00) == 0x7C00)
        {
          LOWORD(v19) = v18;
          LOWORD(v16) = v18;
          LOWORD(v17) = v18;
          LOWORD(v15) = v18;
          LOWORD(v14) = v18;
          LOWORD(v12) = v18;
          LOWORD(v13) = v18;
        }
        else if (v140 == 64512)
        {
          __int16 v18 = v19;
          LOWORD(v16) = v19;
          LOWORD(v17) = v19;
          LOWORD(v15) = v19;
          LOWORD(v14) = v19;
          LOWORD(v12) = v19;
          LOWORD(v13) = v19;
        }
        else
        {
          LOWORD(v13) = ((a5 & 0xFFFFFFFD) != 1) << 15;
          __int16 v18 = v13;
          LOWORD(v19) = v13;
          LOWORD(v16) = v13;
          LOWORD(v17) = v13;
          LOWORD(v15) = v13;
          LOWORD(v14) = v13;
          LOWORD(v12) = v13;
          if (v140 != 32256)
          {
            __int16 v18 = v133;
            LOWORD(v19) = v133;
            LOWORD(v16) = v133;
            LOWORD(v17) = v133;
            LOWORD(v15) = v133;
            LOWORD(v14) = v133;
            LOWORD(v12) = v133;
            LOWORD(v13) = v133;
          }
        }
      }
      else
      {
        __int16 v18 = v133;
        LOWORD(v19) = v133;
        LOWORD(v16) = v133;
        LOWORD(v17) = v133;
        int32x4_t v369 = vdupq_n_s32(v133);
        LOWORD(v15) = v133;
        LOWORD(v14) = v133;
        LOWORD(v12) = v133;
        LOWORD(v13) = v133;
        a4 = v368;
      }
      goto LABEL_5;
    }
    unint64_t v134 = v124 + v123;
    uint64_t v135 = ~(-1 << v49);
    unint64_t v136 = v128 / v125;
    if (v53)
    {
      BOOL v137 = v136 == v58;
      if (v123 || v58)
      {
        if (v134 >= 0x10000 && v58 == v135)
        {
          uint64_t v138 = 1;
          uint64_t v58 = 0xFFFFLL;
LABEL_139:
          unint64_t v141 = v58 + v123;
          if (a5 == 4)
          {
            unint64_t v142 = v141 & 0xFFFFFFFFFFFFFE00;
            if ((v141 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v141 = 31743;
            }
            else if (v142 == 32256)
            {
              unint64_t v141 = 0x8000;
            }
            else if (v142 == 64512)
            {
              unint64_t v141 = 64511;
            }
          }
          if (v141 >= 0xFFFF) {
            LODWORD(v141) = 0xFFFF;
          }
          if (v137) {
            __int32 v143 = 0;
          }
          else {
            __int32 v143 = v141 ^ 0x8000;
          }
          if (v11 == 1) {
            __int32 v13 = v143;
          }
          else {
            __int32 v13 = v141;
          }
          v369.i32[0] = v13;
          if (v53 == 1)
          {
            uint64_t v144 = v127;
            BOOL v145 = v123 == 0x8000;
          }
          else
          {
            uint64_t v146 = *(unsigned int *)((unint64_t)&v403 | (4 * v138));
            BOOL v145 = v136 == v146;
            if (v123 | v146)
            {
              if (v134 >= 0x10000 && v146 == v135) {
                uint64_t v144 = 0xFFFFLL;
              }
              else {
                uint64_t v144 = v126 + v125 * v146;
              }
            }
            else
            {
              uint64_t v144 = 0;
            }
            ++v138;
          }
          unint64_t v147 = v144 + v123;
          if (a5 == 4)
          {
            unint64_t v148 = v147 & 0xFFFFFFFFFFFFFE00;
            if ((v147 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v147 = 31743;
            }
            else if (v148 == 32256)
            {
              unint64_t v147 = 0x8000;
            }
            else if (v148 == 64512)
            {
              unint64_t v147 = 64511;
            }
          }
          if (v147 >= 0xFFFF) {
            LODWORD(v147) = 0xFFFF;
          }
          if (v145) {
            __int32 v12 = 0;
          }
          else {
            __int32 v12 = v147 ^ 0x8000;
          }
          if (v11 != 1) {
            __int32 v12 = v147;
          }
          v369.i32[1] = v12;
          if (v53 == 2)
          {
            uint64_t v149 = v127;
            BOOL v150 = v123 == 0x8000;
          }
          else
          {
            uint64_t v151 = *((unsigned int *)&v403 + v138);
            BOOL v150 = v136 == v151;
            if (v123 | v151)
            {
              if (v134 >= 0x10000 && v151 == v135) {
                uint64_t v149 = 0xFFFFLL;
              }
              else {
                uint64_t v149 = v126 + v125 * v151;
              }
            }
            else
            {
              uint64_t v149 = 0;
            }
            ++v138;
          }
          unint64_t v14 = v149 + v123;
          if (a5 == 4)
          {
            unint64_t v152 = v14 & 0xFFFFFFFFFFFFFE00;
            if ((v14 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v14 = 31743;
            }
            else if (v152 == 32256)
            {
              unint64_t v14 = 0x8000;
            }
            else if (v152 == 64512)
            {
              unint64_t v14 = 64511;
            }
          }
          if (v14 >= 0xFFFF) {
            LODWORD(v14) = 0xFFFF;
          }
          if (v150) {
            int v153 = 0;
          }
          else {
            int v153 = v14 ^ 0x8000;
          }
          if (v11 == 1) {
            LODWORD(v14) = v153;
          }
          v369.i32[2] = v14;
          if (v53 == 3)
          {
            uint64_t v154 = v127;
            BOOL v155 = v123 == 0x8000;
          }
          else
          {
            uint64_t v156 = *((unsigned int *)&v403 + v138);
            BOOL v155 = v136 == v156;
            if (v123 | v156)
            {
              if (v134 >= 0x10000 && v156 == v135) {
                uint64_t v154 = 0xFFFFLL;
              }
              else {
                uint64_t v154 = v126 + v125 * v156;
              }
            }
            else
            {
              uint64_t v154 = 0;
            }
            ++v138;
          }
          unint64_t v157 = v154 + v123;
          if (a5 == 4)
          {
            unint64_t v158 = v157 & 0xFFFFFFFFFFFFFE00;
            if ((v157 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v157 = 31743;
            }
            else if (v158 == 32256)
            {
              unint64_t v157 = 0x8000;
            }
            else if (v158 == 64512)
            {
              unint64_t v157 = 64511;
            }
          }
          if (v157 >= 0xFFFF) {
            int v159 = 0xFFFF;
          }
          else {
            int v159 = v157;
          }
          if (v155) {
            int v160 = 0;
          }
          else {
            int v160 = v159 ^ 0x8000;
          }
          if (v11 == 1) {
            int v15 = v160;
          }
          else {
            int v15 = v159;
          }
          v369.i32[3] = v15;
          if (v53 == 4)
          {
            uint64_t v161 = v127;
            BOOL v162 = v123 == 0x8000;
          }
          else
          {
            uint64_t v163 = *((unsigned int *)&v403 + v138);
            BOOL v162 = v136 == v163;
            if (v123 | v163)
            {
              if (v134 >= 0x10000 && v163 == v135) {
                uint64_t v161 = 0xFFFFLL;
              }
              else {
                uint64_t v161 = v126 + v125 * v163;
              }
            }
            else
            {
              uint64_t v161 = 0;
            }
            ++v138;
          }
          unint64_t v164 = v161 + v123;
          if (a5 == 4)
          {
            unint64_t v165 = v164 & 0xFFFFFFFFFFFFFE00;
            if ((v164 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v164 = 31743;
            }
            else if (v165 == 32256)
            {
              unint64_t v164 = 0x8000;
            }
            else if (v165 == 64512)
            {
              unint64_t v164 = 64511;
            }
          }
          if (v164 >= 0xFFFF) {
            int v166 = 0xFFFF;
          }
          else {
            int v166 = v164;
          }
          if (v162) {
            int v167 = 0;
          }
          else {
            int v167 = v166 ^ 0x8000;
          }
          if (v11 == 1) {
            int v17 = v167;
          }
          else {
            int v17 = v166;
          }
          int v370 = v17;
          if (v53 == 5)
          {
            uint64_t v168 = v127;
            BOOL v169 = v123 == 0x8000;
          }
          else
          {
            uint64_t v170 = *((unsigned int *)&v403 + v138);
            BOOL v169 = v136 == v170;
            if (v123 | v170)
            {
              if (v134 >= 0x10000 && v170 == v135) {
                uint64_t v168 = 0xFFFFLL;
              }
              else {
                uint64_t v168 = v126 + v125 * v170;
              }
            }
            else
            {
              uint64_t v168 = 0;
            }
            ++v138;
          }
          unint64_t v171 = v168 + v123;
          if (a5 == 4)
          {
            unint64_t v172 = v171 & 0xFFFFFFFFFFFFFE00;
            if ((v171 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v171 = 31743;
            }
            else if (v172 == 32256)
            {
              unint64_t v171 = 0x8000;
            }
            else if (v172 == 64512)
            {
              unint64_t v171 = 64511;
            }
          }
          if (v171 >= 0xFFFF) {
            int v173 = 0xFFFF;
          }
          else {
            int v173 = v171;
          }
          if (v169) {
            int v16 = 0;
          }
          else {
            int v16 = v173 ^ 0x8000;
          }
          if (v11 != 1) {
            int v16 = v173;
          }
          int v371 = v16;
          if (v53 == 6)
          {
            uint64_t v174 = v127;
            BOOL v175 = v123 == 0x8000;
          }
          else
          {
            uint64_t v176 = *((unsigned int *)&v403 + v138);
            BOOL v175 = v136 == v176;
            if (v123 | v176)
            {
              if (v134 >= 0x10000 && v176 == v135) {
                uint64_t v174 = 0xFFFFLL;
              }
              else {
                uint64_t v174 = v126 + v125 * v176;
              }
            }
            else
            {
              uint64_t v174 = 0;
            }
            ++v138;
          }
          unint64_t v177 = v174 + v123;
          if (a5 == 4)
          {
            unint64_t v178 = v177 & 0xFFFFFFFFFFFFFE00;
            if ((v177 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v177 = 31743;
            }
            else if (v178 == 32256)
            {
              unint64_t v177 = 0x8000;
            }
            else if (v178 == 64512)
            {
              unint64_t v177 = 64511;
            }
          }
          if (v177 >= 0xFFFF) {
            int v179 = 0xFFFF;
          }
          else {
            int v179 = v177;
          }
          if (v175) {
            int v19 = 0;
          }
          else {
            int v19 = v179 ^ 0x8000;
          }
          if (v11 != 1) {
            int v19 = v179;
          }
          int v372 = v19;
          if (v53 != 7)
          {
            uint64_t v180 = *((unsigned int *)&v403 + v138);
            BOOL v129 = v136 == v180;
            if (v123 | v180)
            {
              if (v134 >= 0x10000 && v180 == v135) {
                unint64_t v127 = 0xFFFFLL;
              }
              else {
                unint64_t v127 = v126 + v125 * v180;
              }
            }
            else
            {
              unint64_t v127 = 0;
            }
          }
          unint64_t v181 = v127 + v123;
          int8x16_t v9 = a3;
          a4 = v368;
          if (a5 == 4)
          {
            unint64_t v182 = v181 & 0xFFFFFFFFFFFFFE00;
            if ((v181 & 0xFFFFFFFFFFFFFE00) == 0x7C00)
            {
              unint64_t v181 = 31743;
            }
            else if (v182 == 32256)
            {
              unint64_t v181 = 0x8000;
            }
            else if (v182 == 64512)
            {
              unint64_t v181 = 64511;
            }
          }
          if (v181 >= 0xFFFF) {
            LOWORD(v181) = -1;
          }
          __int16 v18 = v181 ^ 0x8000;
          if (v129) {
            __int16 v18 = 0;
          }
          if (v11 != 1) {
            __int16 v18 = v181;
          }
          goto LABEL_5;
        }
        uint64_t v58 = v126 + v125 * v58;
      }
      uint64_t v138 = 1;
      goto LABEL_139;
    }
    uint64_t v138 = 0;
    uint64_t v58 = v127;
    BOOL v137 = v123 == 0x8000;
    goto LABEL_139;
  }
  if (a4 == 63)
  {
    int32x4_t v191 = *a3;
    int32x4_t v192 = a3[1];
    int32x4_t v193 = a3[2];
    int32x4_t v194 = a3[3];
    *(int32x4_t *)a1 = vuzp1q_s32(*a3, v193);
    *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v191, v193);
    int16x8_t v195 = (int32x4_t *)(a1 + 2 * a2);
    *int16x8_t v195 = vuzp1q_s32(v192, v194);
    *(int32x4_t *)((char *)v195 + a2) = vuzp2q_s32(v192, v194);
    return 64;
  }
  if (a4 == 1)
  {
    int16x8_t v187 = vld1q_dup_s16(a3->i16);
    *(int16x8_t *)a1 = v187;
    *(int16x8_t *)(a1 + a2) = v187;
    *(int16x8_t *)(a1 + 2 * a2) = v187;
    *(int16x8_t *)(a1 + 3 * a2) = v187;
    return 2;
  }
  unint64_t v196 = 8 * (a3 & 7);
  unint64_t v197 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v198 = v196 + 22;
  unint64_t v199 = *(void *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) >> v196;
  if (v196 >= 0x2B) {
    v199 |= *(void *)(v197 + 8) << (-8 * (a3 & 7u));
  }
  unint64_t v200 = (8 * (a3 & 7)) | 0x100;
  int v201 = (a4 >> 6) | (4 * v199);
  uint16x8_t v202 = (uint16x8_t)vdupq_n_s16(v201 & 0xF);
  a9.i32[0] = v201 & 0xF;
  v203.i64[0] = 0x3000300030003;
  v203.i64[1] = 0x3000300030003;
  int8x16_t v204 = vbicq_s8((int8x16_t)vdupq_n_s16(((v199 >> 2) & 0xF) + 1), (int8x16_t)vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v203));
  int8x16_t v205 = vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16(vdup_lane_s16((int16x4_t)vand_s8(a9, (int8x8_t)0x4000400040004), 0))));
  v206.i64[0] = 0x202020202020202;
  v206.i64[1] = 0x202020202020202;
  int8x16_t v207 = vandq_s8(v205, v206);
  if (vmaxvq_s8(v207) < 1)
  {
    int v217 = 0;
    v218.i64[0] = -1;
    v218.i64[1] = -1;
    int8x16_t v219 = v204;
    int8x16_t v220 = v204;
    int8x16_t v221 = v204;
    v222.i64[0] = -1;
    v222.i64[1] = -1;
    int8x16_t v223 = v204;
    v224.i64[0] = -1;
    v224.i64[1] = -1;
    v225.i64[0] = -1;
    v225.i64[1] = -1;
  }
  else
  {
    int8x16_t v208 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v207, v207));
    int8x16_t v209 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v208, (int16x8_t)v208));
    unint64_t v210 = vpaddq_s32((int32x4_t)v209, (int32x4_t)v209).u64[0];
    v211.i64[0] = v210;
    v211.i64[1] = HIDWORD(v210);
    int64x2_t v212 = v211;
    unint64_t v213 = vaddvq_s64(v211);
    unint64_t v214 = v213 + v198;
    if (v213 <= 0x80 && v200 >= v214)
    {
      int64x2_t v226 = vaddq_s64(vzip1q_s64((int64x2_t)0, v212), vdupq_n_s64(v198 & 0x3E));
      int8x16_t v227 = (int64x2_t *)(v197 + ((v198 >> 3) & 8));
      int8x16_t v216 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v227, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227->i64[0], 0), (uint64x2_t)vnegq_s64(v226)));
      if (v213 + (v198 & 0x3E) < 0x81)
      {
        int v217 = 0;
      }
      else
      {
        int v217 = 0;
        int8x16_t v216 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v227[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v226)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v227[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v226))), v216);
      }
      unint64_t v198 = v214;
    }
    else
    {
      int8x16_t v216 = 0uLL;
      int v217 = 1;
    }
    int32x2_t v228 = vzip1_s32(*(int32x2_t *)v209.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL));
    v229.i64[0] = v228.u32[0];
    v229.i64[1] = v228.u32[1];
    int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v216, (uint64x2_t)vnegq_s64(v229));
    *(int32x2_t *)v216.i8 = vmovn_s64((int64x2_t)v216);
    *(int32x2_t *)v230.i8 = vmovn_s64(v230);
    int8x16_t v231 = (int8x16_t)vzip1q_s32((int32x4_t)v216, (int32x4_t)v230);
    int16x8_t v232 = (int16x8_t)vshlq_u32((uint32x4_t)v231, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v208.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL)))));
    *(int16x4_t *)v231.i8 = vmovn_s32((int32x4_t)v231);
    *(int16x4_t *)v232.i8 = vmovn_s32((int32x4_t)v232);
    int8x16_t v233 = (int8x16_t)vzip1q_s16((int16x8_t)v231, v232);
    *(int8x8_t *)v233.i8 = vzip1_s8(vmovn_s16((int16x8_t)v233), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v233, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v207.i8, *(int8x8_t *)v202.i8))))));
    v231.i64[0] = 0x101010101010101;
    v231.i64[1] = 0x101010101010101;
    int8x16_t v234 = vshlq_s8(v231, v207);
    v231.i64[0] = -1;
    v231.i64[1] = -1;
    v234.i32[0] = vandq_s8(v233, vaddq_s8(v234, v231)).u32[0];
    int16x8_t v235 = vdupq_n_s16(v234.i8[0]);
    int16x8_t v236 = vdupq_n_s16(v234.i8[1]);
    int16x8_t v237 = vdupq_n_s16(v234.i8[2]);
    int16x8_t v238 = vdupq_n_s16(v234.i8[3]);
    int8x16_t v223 = (int8x16_t)vsubq_s16((int16x8_t)v204, v235);
    int8x16_t v221 = (int8x16_t)vsubq_s16((int16x8_t)v204, v236);
    int8x16_t v220 = (int8x16_t)vsubq_s16((int16x8_t)v204, v237);
    int8x16_t v219 = (int8x16_t)vsubq_s16((int16x8_t)v204, v238);
    int8x16_t v225 = (int8x16_t)vceqzq_s16(v235);
    int8x16_t v224 = (int8x16_t)vceqzq_s16(v236);
    int8x16_t v222 = (int8x16_t)vceqzq_s16(v237);
    int8x16_t v218 = (int8x16_t)vceqzq_s16(v238);
  }
  v239.i64[0] = 0x7000700070007;
  v239.i64[1] = 0x7000700070007;
  int8x16_t v240 = 0uLL;
  int8x16_t v241 = vandq_s8(vextq_s8((int8x16_t)vcgtq_u16(v202, v239), (int8x16_t)0, 0xEuLL), v204);
  int8x16_t v242 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v241, (int16x8_t)v241));
  unint64_t v243 = vpaddq_s32((int32x4_t)v242, (int32x4_t)v242).u64[0];
  v244.i64[0] = v243;
  v244.i64[1] = HIDWORD(v243);
  int64x2_t v245 = v244;
  unint64_t v246 = vaddvq_s64(v244);
  if (v246 <= 0x80 && v200 >= v246 + v198)
  {
    int64x2_t v248 = vaddq_s64(vzip1q_s64((int64x2_t)0, v245), vdupq_n_s64(v198 & 0x3F));
    int16x8_t v249 = (int64x2_t *)(v197 + 8 * (v198 >> 6));
    int8x16_t v240 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v249, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249->i64[0], 0), (uint64x2_t)vnegq_s64(v248)));
    if (v246 + (v198 & 0x3F) >= 0x81) {
      int8x16_t v240 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v249[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v248)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v249[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v248))), v240);
    }
    v198 += v246;
  }
  else
  {
    int v217 = 1;
  }
  int v250 = a4 >> 6;
  if (v250 != 2)
  {
    LODWORD(v253) = 0;
    LODWORD(v252) = 0;
    unint64_t v254 = v198;
    goto LABEL_359;
  }
  unint64_t v251 = v198 + 8;
  if (v200 < v198 + 8)
  {
    LODWORD(v252) = 0;
    unint64_t v251 = v198;
LABEL_358:
    LODWORD(v253) = 0;
    int v217 = 1;
    unint64_t v254 = v251;
    goto LABEL_359;
  }
  uint64_t v252 = *(void *)(v197 + 8 * (v198 >> 6)) >> v198;
  if ((v198 & 0x3F) >= 0x39) {
    v252 |= *(void *)(v197 + 8 * (v198 >> 6) + 8) << -(v198 & 0x3F);
  }
  unint64_t v254 = v198 + 16;
  LODWORD(v252) = (char)v252;
  if (v200 < v198 + 16) {
    goto LABEL_358;
  }
  uint64_t v253 = *(void *)(v197 + 8 * (v251 >> 6)) >> v251;
  if ((v251 & 0x3F) >= 0x39) {
    v253 |= *(void *)(v197 + 8 * (v251 >> 6) + 8) << -(v251 & 0x3F);
  }
  LODWORD(v253) = (char)v253;
LABEL_359:
  int8x16_t v255 = 0uLL;
  int8x16_t v256 = vextq_s8((int8x16_t)0, v223, 0xEuLL);
  int8x16_t v257 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v256, (int16x8_t)v256));
  unint64_t v258 = vpaddq_s32((int32x4_t)v257, (int32x4_t)v257).u64[0];
  v259.i64[0] = v258;
  v259.i64[1] = HIDWORD(v258);
  int64x2_t v260 = v259;
  unint64_t v261 = vaddvq_s64(v259);
  unint64_t v262 = v261 + v254;
  if (v261 <= 0x80 && v200 >= v262)
  {
    unint64_t v265 = v254 & 0x3F;
    int64x2_t v266 = vaddq_s64(vzip1q_s64((int64x2_t)0, v260), vdupq_n_s64(v265));
    unint64_t v267 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v264 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v267, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267->i64[0], 0), (uint64x2_t)vnegq_s64(v266)));
    if (v261 + v265 >= 0x81) {
      int8x16_t v264 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v267[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v266)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v267[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v266))), v264);
    }
    unint64_t v254 = v262;
  }
  else
  {
    int v217 = 1;
    int8x16_t v264 = 0uLL;
  }
  int8x16_t v268 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v221, (int16x8_t)v221));
  unint64_t v269 = vpaddq_s32((int32x4_t)v268, (int32x4_t)v268).u64[0];
  v270.i64[0] = v269;
  v270.i64[1] = HIDWORD(v269);
  int64x2_t v271 = v270;
  unint64_t v272 = vaddvq_s64(v270);
  if (v272 < 0x81)
  {
    int32x2_t v273 = vzip1_s32(*(int32x2_t *)v268.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v268, v268, 8uLL));
    v274.i64[0] = v273.u32[0];
    v274.i64[1] = v273.u32[1];
    int64x2_t v275 = v274;
    int32x4_t v276 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v221.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v221, v221, 8uLL)));
    unint64_t v277 = v272 + v254;
    if (v200 >= v272 + v254)
    {
      unint64_t v278 = v254 & 0x3F;
      int64x2_t v279 = vaddq_s64(vzip1q_s64((int64x2_t)0, v271), vdupq_n_s64(v278));
      int64x2_t v280 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v255 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v280, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280->i64[0], 0), (uint64x2_t)vnegq_s64(v279)));
      if (v272 + v278 >= 0x81) {
        int8x16_t v255 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v280[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v279)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v280[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v279))), v255);
      }
      unint64_t v254 = v277;
    }
    else
    {
      int v217 = 1;
    }
    int64x2_t v281 = (int64x2_t)vshlq_u64((uint64x2_t)v255, (uint64x2_t)vnegq_s64(v275));
    *(int32x2_t *)v255.i8 = vmovn_s64((int64x2_t)v255);
    *(int32x2_t *)v281.i8 = vmovn_s64(v281);
    int16x8_t v282 = (int16x8_t)vzip1q_s32((int32x4_t)v255, (int32x4_t)v281);
    int16x8_t v283 = (int16x8_t)vshlq_u32((uint32x4_t)v282, (uint32x4_t)vnegq_s32(v276));
    *(int16x4_t *)v282.i8 = vmovn_s32((int32x4_t)v282);
    *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
    int8x16_t v255 = (int8x16_t)vzip1q_s16(v282, v283);
  }
  else
  {
    int v217 = 1;
  }
  int8x16_t v284 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v220, (int16x8_t)v220));
  unint64_t v285 = vpaddq_s32((int32x4_t)v284, (int32x4_t)v284).u64[0];
  v286.i64[0] = v285;
  v286.i64[1] = HIDWORD(v285);
  int64x2_t v287 = v286;
  unint64_t v288 = vaddvq_s64(v286);
  int8x16_t v289 = 0uLL;
  if (v288 <= 0x80)
  {
    int32x2_t v291 = vzip1_s32(*(int32x2_t *)v284.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v284, v284, 8uLL));
    v292.i64[0] = v291.u32[0];
    v292.i64[1] = v291.u32[1];
    int64x2_t v293 = v292;
    int32x4_t v294 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v220.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)));
    unint64_t v295 = v288 + v254;
    if (v200 >= v288 + v254)
    {
      unint64_t v297 = v254 & 0x3F;
      int64x2_t v298 = vaddq_s64(vzip1q_s64((int64x2_t)0, v287), vdupq_n_s64(v297));
      uint64x2_t v299 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
      int8x16_t v296 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v299, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299->i64[0], 0), (uint64x2_t)vnegq_s64(v298)));
      if (v288 + v297 >= 0x81) {
        int8x16_t v296 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v299[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v298)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v299[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v298))), v296);
      }
      unint64_t v254 = v295;
    }
    else
    {
      int8x16_t v296 = 0uLL;
      int v217 = 1;
    }
    int64x2_t v300 = (int64x2_t)vshlq_u64((uint64x2_t)v296, (uint64x2_t)vnegq_s64(v293));
    *(int32x2_t *)v296.i8 = vmovn_s64((int64x2_t)v296);
    *(int32x2_t *)v300.i8 = vmovn_s64(v300);
    int16x8_t v301 = (int16x8_t)vzip1q_s32((int32x4_t)v296, (int32x4_t)v300);
    int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v301, (uint32x4_t)vnegq_s32(v294));
    *(int16x4_t *)v301.i8 = vmovn_s32((int32x4_t)v301);
    *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
    int16x8_t v290 = vzip1q_s16(v301, v302);
  }
  else
  {
    int v217 = 1;
    int16x8_t v290 = 0uLL;
  }
  int8x16_t v303 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v219, (int16x8_t)v219));
  unint64_t v304 = vpaddq_s32((int32x4_t)v303, (int32x4_t)v303).u64[0];
  v305.i64[0] = v304;
  v305.i64[1] = HIDWORD(v304);
  int64x2_t v306 = v305;
  unint64_t v307 = vaddvq_s64(v305);
  if (v307 > 0x80) {
    goto LABEL_391;
  }
  if (v200 >= v307 + v254)
  {
    int64x2_t v308 = vaddq_s64(vzip1q_s64((int64x2_t)0, v306), vdupq_n_s64(v254 & 0x3F));
    unint64_t v309 = (int64x2_t *)(v197 + 8 * (v254 >> 6));
    int8x16_t v289 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v309, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309->i64[0], 0), (uint64x2_t)vnegq_s64(v308)));
    if (v307 + (v254 & 0x3F) >= 0x81) {
      int8x16_t v289 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v309[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v308)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v309[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v308))), v289);
    }
    v254 += v307;
  }
  else
  {
    int v217 = 1;
  }
  if (v217 || (uint64_t v183 = (a4 & 0x3F) + 1, 8 * ((a3 & 7) + v183) - v254 >= 9))
  {
LABEL_391:
    uint64_t v183 = 0;
    v374 |= 0xFFFFLL << ((8 * &v374) & 0x30);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    int16x8_t v310 = (void *)(a1 + a2);
    unint64_t v311 = (void *)(a1 + 2 * a2);
    *int16x8_t v310 = 0;
    v310[1] = 0;
    int8x16_t v186 = (void *)(a1 + a2 + 2 * a2);
    *unint64_t v311 = 0;
    v311[1] = 0;
    goto LABEL_392;
  }
  int32x2_t v313 = vzip1_s32(*(int32x2_t *)v242.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v242, v242, 8uLL));
  int32x2_t v314 = vzip1_s32(*(int32x2_t *)v257.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v257, v257, 8uLL));
  v315.i64[0] = v313.u32[0];
  v315.i64[1] = v313.u32[1];
  int64x2_t v316 = v315;
  v315.i64[0] = v314.u32[0];
  v315.i64[1] = v314.u32[1];
  int64x2_t v317 = (int64x2_t)vshlq_u64((uint64x2_t)v240, (uint64x2_t)vnegq_s64(v316));
  int64x2_t v318 = (int64x2_t)vshlq_u64((uint64x2_t)v264, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v240);
  *(int32x2_t *)v317.i8 = vmovn_s64(v317);
  *(int32x2_t *)v264.i8 = vmovn_s64((int64x2_t)v264);
  *(int32x2_t *)v318.i8 = vmovn_s64(v318);
  int16x8_t v319 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v317);
  int16x8_t v320 = (int16x8_t)vzip1q_s32((int32x4_t)v264, (int32x4_t)v318);
  int16x8_t v321 = (int16x8_t)vshlq_u32((uint32x4_t)v319, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v241.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v241, v241, 8uLL)))));
  int16x8_t v322 = (int16x8_t)vshlq_u32((uint32x4_t)v320, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v256.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v256, v256, 8uLL)))));
  *(int16x4_t *)v319.i8 = vmovn_s32((int32x4_t)v319);
  *(int16x4_t *)v321.i8 = vmovn_s32((int32x4_t)v321);
  *(int16x4_t *)v320.i8 = vmovn_s32((int32x4_t)v320);
  *(int16x4_t *)v322.i8 = vmovn_s32((int32x4_t)v322);
  v323.i64[0] = 0x10001000100010;
  v323.i64[1] = 0x10001000100010;
  v324.i64[0] = 0x10001000100010;
  v324.i64[1] = 0x10001000100010;
  unint64_t v325 = v199 >> 6;
  int16x8_t v326 = vzip1q_s16(v319, v321);
  v321.i64[0] = 0xF000F000F000FLL;
  v321.i64[1] = 0xF000F000F000FLL;
  int16x8_t v327 = vsubq_s16(v323, (int16x8_t)v241);
  int16x8_t v328 = vzip1q_s16(v320, v322);
  v322.i64[0] = 0xF000F000F000FLL;
  v322.i64[1] = 0xF000F000F000FLL;
  int32x2_t v329 = vzip1_s32(*(int32x2_t *)v303.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v303, v303, 8uLL));
  v330.i64[0] = 0xF000F000F000FLL;
  v330.i64[1] = 0xF000F000F000FLL;
  v331.i64[0] = 0x10001000100010;
  v331.i64[1] = 0x10001000100010;
  int16x8_t v332 = vaddq_s16((int16x8_t)v241, v321);
  int16x8_t v333 = vaddq_s16((int16x8_t)v256, v322);
  int16x8_t v334 = vshlq_s16(v328, vsubq_s16(v324, (int16x8_t)v256));
  v315.i64[0] = v329.u32[0];
  v315.i64[1] = v329.u32[1];
  int8x16_t v335 = (int8x16_t)vshlq_s16(vshlq_s16(v326, v327), v332);
  int16x8_t v336 = vshlq_s16(v334, v333);
  int16x8_t v337 = vshlq_s16(vshlq_s16((int16x8_t)v255, vsubq_s16(v324, (int16x8_t)v221)), vaddq_s16((int16x8_t)v221, v322));
  int16x8_t v338 = vshlq_s16(vshlq_s16(v290, vsubq_s16(v324, (int16x8_t)v220)), vaddq_s16((int16x8_t)v220, v322));
  int64x2_t v339 = (int64x2_t)vshlq_u64((uint64x2_t)v289, (uint64x2_t)vnegq_s64(v315));
  *(int32x2_t *)v334.i8 = vmovn_s64((int64x2_t)v289);
  *(int32x2_t *)v339.i8 = vmovn_s64(v339);
  int16x8_t v340 = (int16x8_t)vzip1q_s32((int32x4_t)v334, (int32x4_t)v339);
  int16x8_t v341 = (int16x8_t)vshlq_u32((uint32x4_t)v340, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v219.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL)))));
  *(int16x4_t *)v340.i8 = vmovn_s32((int32x4_t)v340);
  *(int16x4_t *)v341.i8 = vmovn_s32((int32x4_t)v341);
  int16x8_t v342 = vshlq_s16(vshlq_s16(vzip1q_s16(v340, v341), vsubq_s16(v331, (int16x8_t)v219)), vaddq_s16((int16x8_t)v219, v330));
  if (v250 == 2)
  {
    v343.i64[0] = 0xFFFFFFFF00000000;
    v343.i64[1] = 0xFFFFFFFF00000000;
    int16x8_t v344 = vmlal_s8((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v253), v343), vdup_n_s8(v252), (int8x8_t)0x302030201000100);
    int16x8_t v336 = vaddq_s16(v336, v344);
    int16x8_t v337 = vaddq_s16(vaddq_s16(vdupq_n_s16(2 * (int)v253), v344), v337);
    int16x8_t v338 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252), v344), v338);
    int16x8_t v342 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v252 + 2 * (int)v253), v344), v342);
  }
  int16x8_t v345 = vdupq_n_s16(v325);
  int16x8_t v346 = vaddq_s16((int16x8_t)vandq_s8(v335, v225), v336);
  int8x16_t v347 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v335.i8, 0);
  int8x16_t v348 = (int8x16_t)vsubq_s16(v346, (int16x8_t)vandq_s8(v347, v225));
  int8x16_t v349 = (int8x16_t)vsubq_s16(v337, (int16x8_t)vandq_s8(v347, v224));
  int8x16_t v350 = (int8x16_t)vsubq_s16(v338, (int16x8_t)vandq_s8(v347, v222));
  int8x16_t v351 = (int8x16_t)vsubq_s16(v342, (int16x8_t)vandq_s8(v347, v218));
  v352.i64[0] = 0x1000100010001;
  v352.i64[1] = 0x1000100010001;
  if (vaddvq_s16(vceqq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v352)))
  {
    int8x16_t v353 = v348;
    v353.i16[0] = v348.i16[7];
    v353.i16[7] = v348.i16[0];
    int8x16_t v354 = (int8x16_t)vnegq_s16((int16x8_t)(*(_OWORD *)&v202 & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
    int8x16_t v355 = vbslq_s8(v354, v353, v348);
    int8x16_t v356 = (int8x16_t)vaddq_s16((int16x8_t)v355, (int16x8_t)vandq_s8(vqtbl1q_s8(v355, (int8x16_t)xmmword_242EA7480), v354));
    int8x16_t v348 = (int8x16_t)vaddq_s16((int16x8_t)v356, (int16x8_t)vandq_s8(vqtbl1q_s8(v356, (int8x16_t)xmmword_242EA7490), v354));
    int8x16_t v357 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v349, (int8x16_t)xmmword_242EA74A0), v354), (int16x8_t)v349);
    int8x16_t v349 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v357, (int8x16_t)xmmword_242EA74B0), v354), (int16x8_t)v357);
    int8x16_t v358 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v350, (int8x16_t)xmmword_242EA74C0), v354), (int16x8_t)v350);
    int8x16_t v350 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v358, (int8x16_t)xmmword_242EA74D0), v354), (int16x8_t)v358);
    int8x16_t v359 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v351, (int8x16_t)xmmword_242EA74E0), v354), (int16x8_t)v351);
    int8x16_t v351 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v359, (int8x16_t)xmmword_242EA74F0), v354), (int16x8_t)v359);
  }
  int32x4_t v360 = (int32x4_t)vaddq_s16(v345, (int16x8_t)v348);
  int32x4_t v361 = (int32x4_t)vaddq_s16((int16x8_t)v349, v345);
  int32x4_t v362 = (int32x4_t)vaddq_s16((int16x8_t)v350, v345);
  int32x4_t v363 = (int32x4_t)vaddq_s16((int16x8_t)v351, v345);
  *(int32x4_t *)a1 = vuzp1q_s32(v360, v362);
  *(int32x4_t *)(a1 + a2) = vuzp2q_s32(v360, v362);
  unint64_t v364 = (int32x4_t *)(a1 + 2 * a2);
  *unint64_t v364 = vuzp1q_s32(v361, v363);
  *(int32x4_t *)((char *)v364 + a2) = vuzp2q_s32(v361, v363);
  return v183;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(unint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, int16x4_t a12)
{
  unint64_t v16 = a3;
  __int16 v18 = (int32x4_t *)result;
  if (a5 >= 8) {
    unsigned int v19 = 8;
  }
  else {
    unsigned int v19 = a5;
  }
  if (a6 >= 4) {
    unsigned int v20 = 4;
  }
  else {
    unsigned int v20 = a6;
  }
  if (v19 && v20)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(a3, a4, (int32x4_t *)result, a2, v19, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *a4 = 0;
  }
  uint64_t v21 = a4 + 1;
  if (a5 <= 8) {
    int v22 = 8;
  }
  else {
    int v22 = a5;
  }
  unsigned int v23 = v22 - 8;
  if (v23 >= 8) {
    int v24 = 8;
  }
  else {
    int v24 = v23;
  }
  if (v24 && v20)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v21, v18 + 1, a2, v24, v20, a7, a8, a9, a10, a11, a12);
    v16 += result;
  }
  else
  {
    *uint64_t v21 = 0;
  }
  uint64_t v25 = 4 * a2;
  uint64_t v26 = a4 + 2;
  if (a6 <= 4) {
    int v27 = 4;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 4;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v19 && v29)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v26, (int32x4_t *)((char *)v18 + v25), a2, v19, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    int16x8_t v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v26 = 0;
    int16x8_t v30 = a4 + 3;
    if (!v24) {
      goto LABEL_34;
    }
  }
  if (v29)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v30, (int32x4_t *)((char *)v18 + v25 + 16), a2, v24, v29, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int16x8_t v30 = 0;
LABEL_35:
  uint64_t v31 = a4 + 4;
  if (a6 <= 8) {
    int v32 = 8;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 8;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v19 && v34)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v31, (int32x4_t *)((char *)v18 + 8 * a2), a2, v19, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    unsigned __int8 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  else
  {
    *uint64_t v31 = 0;
    unsigned __int8 v35 = a4 + 5;
    if (!v24) {
      goto LABEL_48;
    }
  }
  if (v34)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v35, (int32x4_t *)((char *)v18 + 8 * a2 + 16), a2, v24, v34, a7, a8, a9, a10, a11, a12);
    v16 += result;
    goto LABEL_49;
  }
LABEL_48:
  *unsigned __int8 v35 = 0;
LABEL_49:
  int v36 = a4 + 6;
  if (a6 <= 12) {
    int v37 = 12;
  }
  else {
    int v37 = a6;
  }
  unsigned int v38 = v37 - 12;
  if (v38 >= 4) {
    int v39 = 4;
  }
  else {
    int v39 = v38;
  }
  if (v19 && v39)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v36, (int32x4_t *)((char *)v18 + 12 * a2), a2, v19, v39, a7, a8, a9, a10, a11, a12);
    v16 += result;
    unint64_t v40 = a4 + 7;
    if (!v24) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v36 = 0;
    unint64_t v40 = a4 + 7;
    if (!v24)
    {
LABEL_64:
      *unint64_t v40 = 0;
      return result;
    }
  }
  if (!v39) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v16, v40, (int32x4_t *)((char *)v18 + 12 * a2 + 16), a2, v24, v39, a7, a8, a9, a10, a11, a12);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(uint64_t a1, int32x4_t *a2, unsigned __int8 *a3, int a4, double a5, double a6, double a7, int8x8_t a8)
{
  unsigned int v11 = (int32x4_t *)((char *)a2
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1, 32, a2, *a3, a4, a5, a6, a7, a8));
  unint64_t v16 = (int32x4_t *)((char *)v11
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 16, 32, v11, a3[1], a4, v12, v13, v14, v15));
  uint64_t v21 = (int32x4_t *)((char *)v16
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 128, 32, v16, a3[2], a4, v17, v18, v19, v20));
  uint64_t v26 = (int32x4_t *)((char *)v21
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 144, 32, v21, a3[3], a4, v22, v23, v24, v25));
  uint64_t v31 = (int32x4_t *)((char *)v26
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 256, 32, v26, a3[4], a4, v27, v28, v29, v30));
  int v36 = (int32x4_t *)((char *)v31
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 272, 32, v31, a3[5], a4, v32, v33, v34, v35));
  unint64_t v41 = (int32x4_t *)((char *)v36
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 384, 32, v36, a3[6], a4, v37, v38, v39, v40));
  unsigned int v46 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 400, 32, v41, v46, a4, v42, v43, v44, v45);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)3,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)2,(AGXTextureFootprint)0>::decompressSubblock(int32x4_t *a1, uint64_t a2, int32x4_t *a3, unsigned int a4, double a5, double a6, double a7, int8x8_t a8)
{
  switch(a4)
  {
    case 0x3Fu:
      int32x4_t v12 = *a3;
      int32x4_t v13 = a3[1];
      int32x4_t v14 = a3[2];
      int32x4_t v15 = a3[3];
      *a1 = vuzp1q_s32(*a3, v14);
      *(int32x4_t *)((char *)a1 + a2) = vuzp2q_s32(v12, v14);
      unint64_t v16 = (int32x4_t *)((char *)a1 + 2 * a2);
      *unint64_t v16 = vuzp1q_s32(v13, v15);
      *(int32x4_t *)((char *)v16 + a2) = vuzp2q_s32(v13, v15);
      return 64;
    case 1u:
      int16x8_t v17 = vld1q_dup_s16(a3->i16);
      *a1 = (int32x4_t)v17;
      *(int16x8_t *)((char *)a1 + a2) = v17;
      *(int16x8_t *)((char *)a1 + 2 * a2) = v17;
      *(int16x8_t *)((char *)a1 + 3 * a2) = v17;
      return 2;
    case 0u:
      uint64_t v8 = 0;
      a1->i64[0] = 0;
      a1->i64[1] = 0;
      int8x16_t v9 = (uint64_t *)((char *)a1->i64 + a2);
      *int8x16_t v9 = 0;
      v9[1] = 0;
      uint64_t v10 = (uint64_t *)((char *)a1->i64 + 2 * a2);
      *uint64_t v10 = 0;
      v10[1] = 0;
      unsigned int v11 = (uint64_t *)((char *)a1->i64 + 2 * a2 + a2);
LABEL_71:
      *unsigned int v11 = 0;
      v11[1] = 0;
      return v8;
  }
  unint64_t v18 = 8 * (a3 & 7);
  unint64_t v19 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v18 + 22;
  unint64_t v21 = *(void *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) >> v18;
  if (v18 >= 0x2B) {
    v21 |= *(void *)(v19 + 8) << (-8 * (a3 & 7u));
  }
  unint64_t v22 = (8 * (a3 & 7)) | 0x200;
  int v23 = (a4 >> 6) | (4 * v21);
  uint16x8_t v24 = (uint16x8_t)vdupq_n_s16(v23 & 0xF);
  a8.i32[0] = v23 & 0xF;
  v25.i64[0] = 0x3000300030003;
  v25.i64[1] = 0x3000300030003;
  int8x16_t v26 = vbicq_s8((int8x16_t)vdupq_n_s16(((v21 >> 2) & 0xF) + 1), (int8x16_t)vceqq_s16((int16x8_t)(*(_OWORD *)&v24 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v25));
  int8x16_t v27 = vbicq_s8((int8x16_t)xmmword_242EA7370, (int8x16_t)vmovl_s16(vceqz_s16(vdup_lane_s16((int16x4_t)vand_s8(a8, (int8x8_t)0x4000400040004), 0))));
  v28.i64[0] = 0x202020202020202;
  v28.i64[1] = 0x202020202020202;
  int8x16_t v29 = vandq_s8(v27, v28);
  if (vmaxvq_s8(v29) < 1)
  {
    int v39 = 0;
    v40.i64[0] = -1;
    v40.i64[1] = -1;
    int8x16_t v41 = v26;
    int8x16_t v42 = v26;
    int8x16_t v43 = v26;
    v44.i64[0] = -1;
    v44.i64[1] = -1;
    int8x16_t v45 = v26;
    v46.i64[0] = -1;
    v46.i64[1] = -1;
    v47.i64[0] = -1;
    v47.i64[1] = -1;
  }
  else
  {
    int8x16_t v30 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v29, v29));
    int8x16_t v31 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v30, (int16x8_t)v30));
    unint64_t v32 = vpaddq_s32((int32x4_t)v31, (int32x4_t)v31).u64[0];
    v33.i64[0] = v32;
    v33.i64[1] = HIDWORD(v32);
    int64x2_t v34 = v33;
    unint64_t v35 = vaddvq_s64(v33);
    unint64_t v36 = v35 + v20;
    if (v35 <= 0x80 && v22 >= v36)
    {
      int64x2_t v48 = vaddq_s64(vzip1q_s64((int64x2_t)0, v34), vdupq_n_s64(v20 & 0x3E));
      uint64_t v49 = (int64x2_t *)(v19 + ((v20 >> 3) & 8));
      int8x16_t v38 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v49, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v48)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v49->i64[0], 0), (uint64x2_t)vnegq_s64(v48)));
      if (v35 + (v20 & 0x3E) < 0x81)
      {
        int v39 = 0;
      }
      else
      {
        int v39 = 0;
        int8x16_t v38 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v49[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v48)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v49[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v48))), v38);
      }
      unint64_t v20 = v36;
    }
    else
    {
      int8x16_t v38 = 0uLL;
      int v39 = 1;
    }
    int32x2_t v50 = vzip1_s32(*(int32x2_t *)v31.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    v51.i64[0] = v50.u32[0];
    v51.i64[1] = v50.u32[1];
    int64x2_t v52 = (int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)vnegq_s64(v51));
    *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
    *(int32x2_t *)v52.i8 = vmovn_s64(v52);
    int8x16_t v53 = (int8x16_t)vzip1q_s32((int32x4_t)v38, (int32x4_t)v52);
    int16x8_t v54 = (int16x8_t)vshlq_u32((uint32x4_t)v53, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v30.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)))));
    *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)v53);
    *(int16x4_t *)v54.i8 = vmovn_s32((int32x4_t)v54);
    int8x16_t v55 = (int8x16_t)vzip1q_s16((int16x8_t)v53, v54);
    *(int8x8_t *)v55.i8 = vzip1_s8(vmovn_s16((int16x8_t)v55), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v55, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v29.i8, *(int8x8_t *)v24.i8))))));
    v53.i64[0] = 0x101010101010101;
    v53.i64[1] = 0x101010101010101;
    int8x16_t v56 = vshlq_s8(v53, v29);
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    v56.i32[0] = vandq_s8(v55, vaddq_s8(v56, v53)).u32[0];
    int16x8_t v57 = vdupq_n_s16(v56.i8[0]);
    int16x8_t v58 = vdupq_n_s16(v56.i8[1]);
    int16x8_t v59 = vdupq_n_s16(v56.i8[2]);
    int16x8_t v60 = vdupq_n_s16(v56.i8[3]);
    int8x16_t v45 = (int8x16_t)vsubq_s16((int16x8_t)v26, v57);
    int8x16_t v43 = (int8x16_t)vsubq_s16((int16x8_t)v26, v58);
    int8x16_t v42 = (int8x16_t)vsubq_s16((int16x8_t)v26, v59);
    int8x16_t v41 = (int8x16_t)vsubq_s16((int16x8_t)v26, v60);
    int8x16_t v47 = (int8x16_t)vceqzq_s16(v57);
    int8x16_t v46 = (int8x16_t)vceqzq_s16(v58);
    int8x16_t v44 = (int8x16_t)vceqzq_s16(v59);
    int8x16_t v40 = (int8x16_t)vceqzq_s16(v60);
  }
  v61.i64[0] = 0x7000700070007;
  v61.i64[1] = 0x7000700070007;
  int8x16_t v62 = 0uLL;
  int8x16_t v63 = vandq_s8(vextq_s8((int8x16_t)vcgtq_u16(v24, v61), (int8x16_t)0, 0xEuLL), v26);
  int8x16_t v64 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v63, (int16x8_t)v63));
  unint64_t v65 = vpaddq_s32((int32x4_t)v64, (int32x4_t)v64).u64[0];
  v66.i64[0] = v65;
  v66.i64[1] = HIDWORD(v65);
  int64x2_t v67 = v66;
  unint64_t v68 = vaddvq_s64(v66);
  if (v68 <= 0x80 && v22 >= v68 + v20)
  {
    int64x2_t v70 = vaddq_s64(vzip1q_s64((int64x2_t)0, v67), vdupq_n_s64(v20 & 0x3F));
    unint64_t v71 = (int64x2_t *)(v19 + 8 * (v20 >> 6));
    int8x16_t v62 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v71, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v70)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v71->i64[0], 0), (uint64x2_t)vnegq_s64(v70)));
    if (v68 + (v20 & 0x3F) >= 0x81) {
      int8x16_t v62 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v71[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v70)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v71[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v70))), v62);
    }
    v20 += v68;
  }
  else
  {
    int v39 = 1;
  }
  int v72 = a4 >> 6;
  if (v72 == 2)
  {
    unint64_t v73 = v20 + 8;
    if (v22 >= v20 + 8)
    {
      uint64_t v74 = *(void *)(v19 + 8 * (v20 >> 6)) >> v20;
      if ((v20 & 0x3F) >= 0x39) {
        v74 |= *(void *)(v19 + 8 * (v20 >> 6) + 8) << -(v20 & 0x3F);
      }
      unint64_t v76 = v20 + 16;
      LODWORD(v74) = (char)v74;
      if (v22 >= v20 + 16)
      {
        uint64_t v75 = *(void *)(v19 + 8 * (v73 >> 6)) >> v73;
        if ((v73 & 0x3F) >= 0x39) {
          v75 |= *(void *)(v19 + 8 * (v73 >> 6) + 8) << -(v73 & 0x3F);
        }
        LODWORD(v75) = (char)v75;
        goto LABEL_40;
      }
    }
    else
    {
      LODWORD(v74) = 0;
      unint64_t v73 = v20;
    }
    LODWORD(v75) = 0;
    int v39 = 1;
    unint64_t v76 = v73;
  }
  else
  {
    LODWORD(v75) = 0;
    LODWORD(v74) = 0;
    unint64_t v76 = v20;
  }
LABEL_40:
  int8x16_t v77 = 0uLL;
  int8x16_t v78 = vextq_s8((int8x16_t)0, v45, 0xEuLL);
  int8x16_t v79 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v78, (int16x8_t)v78));
  unint64_t v80 = vpaddq_s32((int32x4_t)v79, (int32x4_t)v79).u64[0];
  v81.i64[0] = v80;
  v81.i64[1] = HIDWORD(v80);
  int64x2_t v82 = v81;
  unint64_t v83 = vaddvq_s64(v81);
  unint64_t v84 = v83 + v76;
  if (v83 <= 0x80 && v22 >= v84)
  {
    unint64_t v87 = v76 & 0x3F;
    int64x2_t v88 = vaddq_s64(vzip1q_s64((int64x2_t)0, v82), vdupq_n_s64(v87));
    unint64_t v89 = (int64x2_t *)(v19 + 8 * (v76 >> 6));
    int8x16_t v86 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v89, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v88)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v89->i64[0], 0), (uint64x2_t)vnegq_s64(v88)));
    if (v83 + v87 >= 0x81) {
      int8x16_t v86 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v89[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v88)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v89[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v88))), v86);
    }
    unint64_t v76 = v84;
  }
  else
  {
    int v39 = 1;
    int8x16_t v86 = 0uLL;
  }
  int8x16_t v90 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v43, (int16x8_t)v43));
  unint64_t v91 = vpaddq_s32((int32x4_t)v90, (int32x4_t)v90).u64[0];
  v92.i64[0] = v91;
  v92.i64[1] = HIDWORD(v91);
  int64x2_t v93 = v92;
  unint64_t v94 = vaddvq_s64(v92);
  if (v94 < 0x81)
  {
    int32x2_t v95 = vzip1_s32(*(int32x2_t *)v90.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
    v96.i64[0] = v95.u32[0];
    v96.i64[1] = v95.u32[1];
    int64x2_t v97 = v96;
    int32x4_t v98 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v43.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
    unint64_t v99 = v94 + v76;
    if (v22 >= v94 + v76)
    {
      unint64_t v100 = v76 & 0x3F;
      int64x2_t v101 = vaddq_s64(vzip1q_s64((int64x2_t)0, v93), vdupq_n_s64(v100));
      unint64_t v102 = (int64x2_t *)(v19 + 8 * (v76 >> 6));
      int8x16_t v77 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v102, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v101)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v102->i64[0], 0), (uint64x2_t)vnegq_s64(v101)));
      if (v94 + v100 >= 0x81) {
        int8x16_t v77 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v102[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v101)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v102[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v101))), v77);
      }
      unint64_t v76 = v99;
    }
    else
    {
      int v39 = 1;
    }
    int64x2_t v103 = (int64x2_t)vshlq_u64((uint64x2_t)v77, (uint64x2_t)vnegq_s64(v97));
    *(int32x2_t *)v77.i8 = vmovn_s64((int64x2_t)v77);
    *(int32x2_t *)v103.i8 = vmovn_s64(v103);
    int16x8_t v104 = (int16x8_t)vzip1q_s32((int32x4_t)v77, (int32x4_t)v103);
    int16x8_t v105 = (int16x8_t)vshlq_u32((uint32x4_t)v104, (uint32x4_t)vnegq_s32(v98));
    *(int16x4_t *)v104.i8 = vmovn_s32((int32x4_t)v104);
    *(int16x4_t *)v105.i8 = vmovn_s32((int32x4_t)v105);
    int8x16_t v77 = (int8x16_t)vzip1q_s16(v104, v105);
  }
  else
  {
    int v39 = 1;
  }
  int8x16_t v106 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v42, (int16x8_t)v42));
  unint64_t v107 = vpaddq_s32((int32x4_t)v106, (int32x4_t)v106).u64[0];
  v108.i64[0] = v107;
  v108.i64[1] = HIDWORD(v107);
  int64x2_t v109 = v108;
  unint64_t v110 = vaddvq_s64(v108);
  if (v110 <= 0x80)
  {
    int32x2_t v112 = vzip1_s32(*(int32x2_t *)v106.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
    v113.i64[0] = v112.u32[0];
    v113.i64[1] = v112.u32[1];
    int64x2_t v114 = v113;
    int32x4_t v115 = (int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v42.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)));
    unint64_t v116 = v110 + v76;
    if (v22 >= v110 + v76)
    {
      unint64_t v118 = v76 & 0x3F;
      int64x2_t v119 = vaddq_s64(vzip1q_s64((int64x2_t)0, v109), vdupq_n_s64(v118));
      unint64_t v120 = (int64x2_t *)(v19 + 8 * (v76 >> 6));
      int8x16_t v117 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v120, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v119)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v120->i64[0], 0), (uint64x2_t)vnegq_s64(v119)));
      if (v110 + v118 >= 0x81) {
        int8x16_t v117 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v120[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v119)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v120[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v119))), v117);
      }
      unint64_t v76 = v116;
    }
    else
    {
      int8x16_t v117 = 0uLL;
      int v39 = 1;
    }
    int64x2_t v121 = (int64x2_t)vshlq_u64((uint64x2_t)v117, (uint64x2_t)vnegq_s64(v114));
    *(int32x2_t *)v117.i8 = vmovn_s64((int64x2_t)v117);
    *(int32x2_t *)v121.i8 = vmovn_s64(v121);
    int16x8_t v122 = (int16x8_t)vzip1q_s32((int32x4_t)v117, (int32x4_t)v121);
    int16x8_t v123 = (int16x8_t)vshlq_u32((uint32x4_t)v122, (uint32x4_t)vnegq_s32(v115));
    *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v122);
    *(int16x4_t *)v123.i8 = vmovn_s32((int32x4_t)v123);
    int16x8_t v111 = vzip1q_s16(v122, v123);
  }
  else
  {
    int v39 = 1;
    int16x8_t v111 = 0uLL;
  }
  int8x16_t v124 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v41, (int16x8_t)v41));
  unint64_t v125 = vpaddq_s32((int32x4_t)v124, (int32x4_t)v124).u64[0];
  v126.i64[0] = v125;
  v126.i64[1] = HIDWORD(v125);
  int64x2_t v127 = v126;
  unint64_t v128 = vaddvq_s64(v126);
  if (v128 > 0x80 || v22 < v128 + v76) {
    goto LABEL_70;
  }
  int64x2_t v129 = vaddq_s64(vzip1q_s64((int64x2_t)0, v127), vdupq_n_s64(v76 & 0x3F));
  int v130 = (int64x2_t *)(v19 + 8 * (v76 >> 6));
  int8x16_t v131 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v130, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v129)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v130->i64[0], 0), (uint64x2_t)vnegq_s64(v129)));
  if (v128 + (v76 & 0x3F) >= 0x81) {
    int8x16_t v131 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v130[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v129)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v130[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v129))), v131);
  }
  if (v39 || (uint64_t v8 = (a4 & 0x3F) + 1, 8 * ((a3 & 7) + v8) - (v128 + v76) >= 9))
  {
LABEL_70:
    uint64_t v8 = 0;
    v187 |= 0xFFFFLL << ((8 * (&v187 + 6)) & 0x30);
    a1->i64[0] = 0;
    a1->i64[1] = 0;
    __int16 v132 = (uint64_t *)((char *)a1->i64 + a2);
    unsigned int v133 = (uint64_t *)((char *)a1->i64 + 2 * a2);
    *__int16 v132 = 0;
    v132[1] = 0;
    unsigned int v11 = (uint64_t *)((char *)a1->i64 + 2 * a2 + a2);
    void *v133 = 0;
    v133[1] = 0;
    goto LABEL_71;
  }
  int32x2_t v135 = vzip1_s32(*(int32x2_t *)v64.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL));
  int32x2_t v136 = vzip1_s32(*(int32x2_t *)v79.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
  v137.i64[0] = v135.u32[0];
  v137.i64[1] = v135.u32[1];
  int64x2_t v138 = v137;
  v137.i64[0] = v136.u32[0];
  v137.i64[1] = v136.u32[1];
  int64x2_t v139 = (int64x2_t)vshlq_u64((uint64x2_t)v62, (uint64x2_t)vnegq_s64(v138));
  int64x2_t v140 = (int64x2_t)vshlq_u64((uint64x2_t)v86, (uint64x2_t)vnegq_s64(v137));
  *(int32x2_t *)v62.i8 = vmovn_s64((int64x2_t)v62);
  *(int32x2_t *)v139.i8 = vmovn_s64(v139);
  *(int32x2_t *)v86.i8 = vmovn_s64((int64x2_t)v86);
  *(int32x2_t *)v140.i8 = vmovn_s64(v140);
  int16x8_t v141 = (int16x8_t)vzip1q_s32((int32x4_t)v62, (int32x4_t)v139);
  int16x8_t v142 = (int16x8_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v140);
  int16x8_t v143 = (int16x8_t)vshlq_u32((uint32x4_t)v141, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v63.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)))));
  int16x8_t v144 = (int16x8_t)vshlq_u32((uint32x4_t)v142, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v78.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)))));
  *(int16x4_t *)v141.i8 = vmovn_s32((int32x4_t)v141);
  *(int16x4_t *)v143.i8 = vmovn_s32((int32x4_t)v143);
  *(int16x4_t *)v142.i8 = vmovn_s32((int32x4_t)v142);
  *(int16x4_t *)v144.i8 = vmovn_s32((int32x4_t)v144);
  v145.i64[0] = 0x10001000100010;
  v145.i64[1] = 0x10001000100010;
  v146.i64[0] = 0x10001000100010;
  v146.i64[1] = 0x10001000100010;
  unint64_t v147 = v21 >> 6;
  int16x8_t v148 = vzip1q_s16(v141, v143);
  v143.i64[0] = 0xF000F000F000FLL;
  v143.i64[1] = 0xF000F000F000FLL;
  int16x8_t v149 = vsubq_s16(v145, (int16x8_t)v63);
  int16x8_t v150 = vzip1q_s16(v142, v144);
  v144.i64[0] = 0xF000F000F000FLL;
  v144.i64[1] = 0xF000F000F000FLL;
  int32x2_t v151 = vzip1_s32(*(int32x2_t *)v124.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
  v152.i64[0] = 0xF000F000F000FLL;
  v152.i64[1] = 0xF000F000F000FLL;
  v153.i64[0] = 0x10001000100010;
  v153.i64[1] = 0x10001000100010;
  int16x8_t v154 = vaddq_s16((int16x8_t)v63, v143);
  int16x8_t v155 = vaddq_s16((int16x8_t)v78, v144);
  int16x8_t v156 = vshlq_s16(v150, vsubq_s16(v146, (int16x8_t)v78));
  v137.i64[0] = v151.u32[0];
  v137.i64[1] = v151.u32[1];
  int8x16_t v157 = (int8x16_t)vshlq_s16(vshlq_s16(v148, v149), v154);
  int16x8_t v158 = vshlq_s16(v156, v155);
  int16x8_t v159 = vshlq_s16(vshlq_s16((int16x8_t)v77, vsubq_s16(v146, (int16x8_t)v43)), vaddq_s16((int16x8_t)v43, v144));
  int16x8_t v160 = vshlq_s16(vshlq_s16(v111, vsubq_s16(v146, (int16x8_t)v42)), vaddq_s16((int16x8_t)v42, v144));
  int64x2_t v161 = (int64x2_t)vshlq_u64((uint64x2_t)v131, (uint64x2_t)vnegq_s64(v137));
  *(int32x2_t *)v156.i8 = vmovn_s64((int64x2_t)v131);
  *(int32x2_t *)v161.i8 = vmovn_s64(v161);
  int16x8_t v162 = (int16x8_t)vzip1q_s32((int32x4_t)v156, (int32x4_t)v161);
  int16x8_t v163 = (int16x8_t)vshlq_u32((uint32x4_t)v162, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v41.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)))));
  *(int16x4_t *)v162.i8 = vmovn_s32((int32x4_t)v162);
  *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
  int16x8_t v164 = vshlq_s16(vshlq_s16(vzip1q_s16(v162, v163), vsubq_s16(v153, (int16x8_t)v41)), vaddq_s16((int16x8_t)v41, v152));
  if (v72 == 2)
  {
    v165.i64[0] = 0xFFFFFFFF00000000;
    v165.i64[1] = 0xFFFFFFFF00000000;
    int16x8_t v166 = vmlal_s8((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v75), v165), vdup_n_s8(v74), (int8x8_t)0x302030201000100);
    int16x8_t v158 = vaddq_s16(v158, v166);
    int16x8_t v159 = vaddq_s16(vaddq_s16(vdupq_n_s16(2 * (int)v75), v166), v159);
    int16x8_t v160 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v74), v166), v160);
    int16x8_t v164 = vaddq_s16(vaddq_s16(vdupq_n_s16(4 * (int)v74 + 2 * (int)v75), v166), v164);
  }
  int16x8_t v167 = vdupq_n_s16(v147);
  int16x8_t v168 = vaddq_s16((int16x8_t)vandq_s8(v157, v47), v158);
  int8x16_t v169 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v157.i8, 0);
  int8x16_t v170 = (int8x16_t)vsubq_s16(v168, (int16x8_t)vandq_s8(v169, v47));
  int8x16_t v171 = (int8x16_t)vsubq_s16(v159, (int16x8_t)vandq_s8(v169, v46));
  int8x16_t v172 = (int8x16_t)vsubq_s16(v160, (int16x8_t)vandq_s8(v169, v44));
  int8x16_t v173 = (int8x16_t)vsubq_s16(v164, (int16x8_t)vandq_s8(v169, v40));
  v174.i64[0] = 0x1000100010001;
  v174.i64[1] = 0x1000100010001;
  if (vaddvq_s16(vceqq_s16((int16x8_t)(*(_OWORD *)&v24 & __PAIR128__(0xFFF3FFF3FFF3FFF3, 0xFFF3FFF3FFF3FFF3)), v174)))
  {
    int8x16_t v175 = v170;
    v175.i16[0] = v170.i16[7];
    v175.i16[7] = v170.i16[0];
    int8x16_t v176 = (int8x16_t)vnegq_s16((int16x8_t)(*(_OWORD *)&v24 & __PAIR128__(0xFFF1FFF1FFF1FFF1, 0xFFF1FFF1FFF1FFF1)));
    int8x16_t v177 = vbslq_s8(v176, v175, v170);
    int8x16_t v178 = (int8x16_t)vaddq_s16((int16x8_t)v177, (int16x8_t)vandq_s8(vqtbl1q_s8(v177, (int8x16_t)xmmword_242EA7480), v176));
    int8x16_t v170 = (int8x16_t)vaddq_s16((int16x8_t)v178, (int16x8_t)vandq_s8(vqtbl1q_s8(v178, (int8x16_t)xmmword_242EA7490), v176));
    int8x16_t v179 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v171, (int8x16_t)xmmword_242EA74A0), v176), (int16x8_t)v171);
    int8x16_t v171 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v179, (int8x16_t)xmmword_242EA74B0), v176), (int16x8_t)v179);
    int8x16_t v180 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v172, (int8x16_t)xmmword_242EA74C0), v176), (int16x8_t)v172);
    int8x16_t v172 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v180, (int8x16_t)xmmword_242EA74D0), v176), (int16x8_t)v180);
    int8x16_t v181 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v173, (int8x16_t)xmmword_242EA74E0), v176), (int16x8_t)v173);
    int8x16_t v173 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl1q_s8(v181, (int8x16_t)xmmword_242EA74F0), v176), (int16x8_t)v181);
  }
  int32x4_t v182 = (int32x4_t)vaddq_s16(v167, (int16x8_t)v170);
  int32x4_t v183 = (int32x4_t)vaddq_s16((int16x8_t)v171, v167);
  int32x4_t v184 = (int32x4_t)vaddq_s16((int16x8_t)v172, v167);
  int32x4_t v185 = (int32x4_t)vaddq_s16((int16x8_t)v173, v167);
  *a1 = vuzp1q_s32(v182, v184);
  *(int32x4_t *)((char *)a1 + a2) = vuzp2q_s32(v182, v184);
  int8x16_t v186 = (int32x4_t *)((char *)a1 + 2 * a2);
  *int8x16_t v186 = vuzp1q_s32(v183, v185);
  *(int32x4_t *)((char *)v186 + a2) = vuzp2q_s32(v183, v185);
  return v8;
}

uint64_t AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)18,AGX::AppleCompressionGen2::Vec<short>>(uint64_t a1, uint64_t a2, double *a3, unint64_t *a4, unsigned int a5)
{
  unint64_t v5 = a4[2];
  unint64_t v6 = *a4;
  unint64_t v7 = *a4 + 36;
  if (v5) {
    BOOL v8 = v5 >= v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    unint64_t v9 = v6 >> 6;
    unint64_t v10 = *a4 & 0x3F;
    unint64_t v11 = a4[1];
    uint64_t v12 = *(void *)(v11 + 8 * (v6 >> 6)) >> v6;
    if (v10 >= 0x1D) {
      v12 |= *(void *)(v11 + 8 * v9 + 8) << -(char)v10;
    }
    *a4 = v7;
    uint64_t v13 = v12 & 0xFFFFFFFFFLL;
  }
  else
  {
    uint64_t v13 = 0;
    *((unsigned char *)a4 + 24) = 1;
  }
  *(_WORD *)a1 = v13 & 0x1F;
  *(_WORD *)(a1 + 2) = (v13 >> 5) & 0x1F;
  *(_WORD *)(a1 + 4) = (v13 >> 10) & 0x1F;
  *(_WORD *)(a1 + 6) = (v13 >> 15) & 0x1F;
  *(_WORD *)a2 = ((v13 >> 20) & 0xF) + 1;
  *(_WORD *)(a2 + 2) = (BYTE3(v13) & 0xF) + 1;
  *(_WORD *)(a2 + 4) = (v13 >> 28) + 1;
  *(_WORD *)(a2 + 6) = WORD2(v13) + 1;
  unint64_t v14 = a4[2];
  unint64_t v15 = *a4;
  unint64_t v16 = *a4 + 64;
  if (v14 && v14 < v16)
  {
    uint64_t v17 = 0;
    *((unsigned char *)a4 + 24) = 1;
  }
  else
  {
    unint64_t v18 = v15 >> 6;
    unint64_t v19 = a4[1];
    uint64_t v17 = *(void *)(v19 + 8 * (v15 >> 6)) >> v15;
    uint64_t v20 = *a4 & 0x3F;
    if (v20) {
      v17 |= *(void *)(v19 + 8 * v18 + 8) << -(char)v20;
    }
    *a4 = v16;
  }
  *(void *)a3 = v17;
  float64x2_t v21 = vld1q_dup_f64((const double *)a1);
  *(float64x2_t *)a1 = v21;
  float64x2_t v22 = vld1q_dup_f64((const double *)a2);
  *(float64x2_t *)a2 = v22;
  float64x2_t v23 = vld1q_dup_f64(a3);
  *(float64x2_t *)a3 = v23;
  return a5 + 1;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(float64x2_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  switch(a4)
  {
    case 0xFFu:
      long long v10 = *(_OWORD *)(a3 + 16);
      long long v11 = *(_OWORD *)(a3 + 48);
      long long v12 = *(_OWORD *)(a3 + 144);
      long long v13 = *(_OWORD *)(a3 + 176);
      long long v14 = *(_OWORD *)(a3 + 64);
      long long v15 = *(_OWORD *)(a3 + 96);
      float64x2_t v16 = *(float64x2_t *)(a3 + 32);
      long long v17 = *(_OWORD *)(a3 + 192);
      long long v18 = *(_OWORD *)(a3 + 224);
      long long v19 = *(_OWORD *)(a3 + 240);
      float64x2_t v20 = *(float64x2_t *)(a3 + 128);
      float64x2_t v21 = *(float64x2_t *)(a3 + 160);
      long long v22 = *(_OWORD *)(a3 + 80);
      long long v23 = *(_OWORD *)(a3 + 112);
      long long v24 = *(_OWORD *)(a3 + 208);
      int16x8_t v25 = (_OWORD *)((char *)a1->f64 + a2);
      *a1 = *(float64x2_t *)a3;
      a1[1] = v16;
      a1[2] = v20;
      a1[3] = v21;
      int8x16_t v26 = (_OWORD *)((char *)a1->f64 + 2 * a2);
      *int16x8_t v25 = v10;
      v25[1] = v11;
      v25[2] = v12;
      v25[3] = v13;
      *int8x16_t v26 = v14;
      v26[1] = v15;
      v26[2] = v17;
      v26[3] = v18;
      int8x16_t v27 = (_OWORD *)((char *)v26 + a2);
      uint64_t result = 256;
      *int8x16_t v27 = v22;
      v27[1] = v23;
      v27[2] = v24;
      v27[3] = v19;
      return result;
    case 7u:
      float64x2_t v28 = vld1q_dup_f64((const double *)a3);
      *a1 = v28;
      a1[1] = v28;
      a1[2] = v28;
      a1[3] = v28;
      int8x16_t v29 = (float64x2_t *)((char *)a1 + a2);
      *int8x16_t v29 = v28;
      v29[1] = v28;
      v29[2] = v28;
      v29[3] = v28;
      int8x16_t v30 = (float64x2_t *)((char *)a1 + 2 * a2);
      *int8x16_t v30 = v28;
      v30[1] = v28;
      v30[2] = v28;
      v30[3] = v28;
      int8x16_t v31 = (float64x2_t *)((char *)a1 + 2 * a2 + a2);
      *int8x16_t v31 = v28;
      v31[1] = v28;
      uint64_t result = 8;
LABEL_228:
      v31[2] = v28;
      v31[3] = v28;
      return result;
    case 0u:
      uint64_t result = 0;
      a1[2] = 0u;
      a1[3] = 0u;
      *a1 = 0u;
      a1[1] = 0u;
      unint64_t v7 = (_OWORD *)((char *)a1->f64 + a2);
      v7[2] = 0u;
      v7[3] = 0u;
      *unint64_t v7 = 0u;
      v7[1] = 0u;
      BOOL v8 = (_OWORD *)((char *)a1->f64 + 2 * a2);
      v8[2] = 0u;
      v8[3] = 0u;
      *BOOL v8 = 0u;
      v8[1] = 0u;
      unint64_t v9 = (_OWORD *)((char *)a1->f64 + 2 * a2 + a2);
      v9[2] = 0u;
      v9[3] = 0u;
      *unint64_t v9 = 0u;
      v9[1] = 0u;
      return result;
  }
  unsigned __int8 v416 = 0;
  unint64_t v413 = 8 * (a3 & 7);
  unint64_t v414 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v415 = v413 | 0x800;
  uint64_t result = AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)18,AGX::AppleCompressionGen2::Vec<short>>((uint64_t)&v426, (uint64_t)v431, (double *)v425.i64, &v413, a4);
  v33.i64[0] = 0x3000300030003;
  v33.i64[1] = 0x3000300030003;
  int8x16_t v34 = v426;
  int16x8_t v35 = (int16x8_t)vandq_s8(v426, v33);
  int8x16_t v36 = vbicq_s8(v431[0], (int8x16_t)vceqq_s16(v35, (int16x8_t)v33));
  v431[0] = v36;
  int16x8_t v427 = (int16x8_t)v36;
  int16x8_t v428 = (int16x8_t)v36;
  int16x8_t v429 = (int16x8_t)v36;
  int16x8_t v430 = (int16x8_t)v36;
  v37.i64[0] = 0x202020202020202;
  v37.i64[1] = 0x202020202020202;
  int8x16_t v38 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v426.i8, (int16x4_t)0x4000400040004)), v37);
  unint64_t v39 = v413;
  if (vmaxvq_s8(v38) < 1)
  {
    v52.i64[0] = -1;
    v52.i64[1] = -1;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
  }
  else
  {
    int8x16_t v40 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v38, v38));
    int8x16_t v41 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v40, (int16x8_t)v40));
    unint64_t v42 = vpaddq_s32((int32x4_t)v41, (int32x4_t)v41).u64[0];
    v43.i64[0] = v42;
    v43.i64[1] = HIDWORD(v42);
    int64x2_t v44 = v43;
    unint64_t v45 = vaddvq_s64(v43);
    unint64_t v46 = v45;
    unint64_t v47 = v413 + v45;
    if (v415) {
      BOOL v48 = v415 >= v47;
    }
    else {
      BOOL v48 = 1;
    }
    int v49 = !v48;
    if (v45 <= 0x80 && v49 == 0)
    {
      v32.i64[0] = 63;
      int8x16_t v56 = (int64x2_t *)(v414 + 8 * (v413 >> 6));
      int64x2_t v57 = vaddq_s64(vdupq_lane_s64(vandq_s8((int8x16_t)v413, v32).i64[0], 0), vzip1q_s64((int64x2_t)0, v44));
      int8x16_t v51 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v56, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56->i64[0], 0), (uint64x2_t)vnegq_s64(v57)));
      if ((v413 & 0x3F) + v46 >= 0x81) {
        int8x16_t v51 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v56[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v57))), v51);
      }
      unint64_t v413 = v47;
      unint64_t v39 = v47;
    }
    else
    {
      unsigned __int8 v416 = 1;
      int8x16_t v51 = 0uLL;
    }
    int32x2_t v58 = vzip1_s32(*(int32x2_t *)v41.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
    v59.i64[0] = v58.u32[0];
    v59.i64[1] = v58.u32[1];
    int64x2_t v60 = (int64x2_t)vshlq_u64((uint64x2_t)v51, (uint64x2_t)vnegq_s64(v59));
    *(int32x2_t *)v51.i8 = vmovn_s64((int64x2_t)v51);
    *(int32x2_t *)v60.i8 = vmovn_s64(v60);
    int16x8_t v61 = (int16x8_t)vzip1q_s32((int32x4_t)v51, (int32x4_t)v60);
    int16x8_t v62 = (int16x8_t)vshlq_u32((uint32x4_t)v61, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v40.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)))));
    *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
    *(int16x4_t *)v62.i8 = vmovn_s32((int32x4_t)v62);
    int8x16_t v63 = (int8x16_t)vzip1q_s16(v61, v62);
    int8x16_t v64 = (int8x16_t)vshlq_u16((uint16x8_t)v63, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)))));
    *(int8x8_t *)v63.i8 = vmovn_s16((int16x8_t)v63);
    *(int8x8_t *)v64.i8 = vmovn_s16((int16x8_t)v64);
    int8x16_t v65 = vzip1q_s8(v63, v64);
    v64.i64[0] = 0x101010101010101;
    v64.i64[1] = 0x101010101010101;
    int8x16_t v66 = vshlq_s8(v64, v38);
    v64.i64[0] = -1;
    v64.i64[1] = -1;
    int32x4_t v67 = (int32x4_t)vqtbl1q_s8(vandq_s8(v65, vaddq_s8(v66, v64)), (int8x16_t)xmmword_242EA7560);
    *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 0);
    *(int32x2_t *)v64.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 1);
    int8x8_t v68 = (int8x8_t)vdupq_laneq_s32(v67, 2).u64[0];
    v67.i64[0] = vdupq_laneq_s32(v67, 3).u64[0];
    int16x8_t v427 = vsubw_s8(v427, *(int8x8_t *)v65.i8);
    int16x8_t v428 = vsubw_s8(v428, *(int8x8_t *)v64.i8);
    int16x8_t v429 = vsubw_s8(v429, v68);
    int16x8_t v430 = vsubw_s8(v430, *(int8x8_t *)v67.i8);
    int16x8_t v55 = vmovl_s8(vceqz_s8(*(int8x8_t *)v65.i8));
    int16x8_t v54 = vmovl_s8(vceqz_s8(*(int8x8_t *)v64.i8));
    int16x8_t v53 = vmovl_s8(vceqz_s8(v68));
    int16x8_t v52 = vmovl_s8(vceqz_s8(*(int8x8_t *)v67.i8));
  }
  v69.i64[0] = 0x8000800080008;
  v69.i64[1] = 0x8000800080008;
  int8x16_t v70 = 0uLL;
  int8x16_t v71 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v426, v69), (int8x16_t)0, 8uLL), v36);
  int8x16_t v72 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v71, (int16x8_t)v71));
  unint64_t v73 = vpaddq_s32((int32x4_t)v72, (int32x4_t)v72).u64[0];
  v74.i64[0] = v73;
  v74.i64[1] = HIDWORD(v73);
  int64x2_t v75 = v74;
  unint64_t v76 = vaddvq_s64(v74);
  if (v415) {
    BOOL v77 = v415 >= v39 + v76;
  }
  else {
    BOOL v77 = 1;
  }
  int v78 = !v77;
  if (v76 <= 0x80 && v78 == 0)
  {
    int64x2_t v80 = vaddq_s64(vdupq_n_s64(v39 & 0x3F), vzip1q_s64((int64x2_t)0, v75));
    int64x2_t v81 = (int64x2_t *)(v414 + 8 * (v39 >> 6));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v81, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81->i64[0], 0), (uint64x2_t)vnegq_s64(v80)));
    if ((v39 & 0x3F) + v76 >= 0x81) {
      int8x16_t v70 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v81[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v80))), v70);
    }
    v39 += v76;
  }
  else
  {
    unsigned __int8 v416 = 1;
  }
  int v82 = v426.i8[0] & 3;
  if (v82 == 2)
  {
    unint64_t v83 = v39 + 8;
    if (v415)
    {
      if (v415 < v83)
      {
        unsigned __int8 v416 = 1;
LABEL_45:
        unsigned __int8 v416 = 1;
        goto LABEL_46;
      }
      unint64_t v84 = v39 + 16;
      v39 += 8;
      if (v415 < v84) {
        goto LABEL_45;
      }
      unint64_t v83 = v39;
    }
    unint64_t v39 = v83 + 8;
  }
LABEL_46:
  int8x16_t v85 = 0uLL;
  int8x16_t v86 = vextq_s8((int8x16_t)0, (int8x16_t)v427, 8uLL);
  int8x16_t v87 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v86, (int16x8_t)v86));
  unint64_t v88 = vpaddq_s32((int32x4_t)v87, (int32x4_t)v87).u64[0];
  v89.i64[0] = v88;
  v89.i64[1] = HIDWORD(v88);
  int64x2_t v90 = v89;
  unint64_t v91 = vaddvq_s64(v89);
  unint64_t v92 = v39 + v91;
  if (v415) {
    BOOL v93 = v415 >= v92;
  }
  else {
    BOOL v93 = 1;
  }
  int v94 = !v93;
  if (v91 > 0x80 || v94)
  {
    int v99 = 1;
    unint64_t v97 = v414;
  }
  else
  {
    unint64_t v95 = v39 & 0x3F;
    int64x2_t v96 = vaddq_s64(vdupq_n_s64(v95), vzip1q_s64((int64x2_t)0, v90));
    unint64_t v97 = v414;
    int32x4_t v98 = (int64x2_t *)(v414 + 8 * (v39 >> 6));
    int8x16_t v85 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v96)));
    if (v95 + v91 >= 0x81) {
      int8x16_t v85 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v96))), v85);
    }
    int v99 = v416;
    unint64_t v39 = v92;
  }
  v100.i64[0] = 0xF000F000F000FLL;
  v100.i64[1] = 0xF000F000F000FLL;
  v101.i64[0] = 0x10001000100010;
  v101.i64[1] = 0x10001000100010;
  int8x16_t v102 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v427, v427));
  unint64_t v103 = vpaddq_s32((int32x4_t)v102, (int32x4_t)v102).u64[0];
  v104.i64[0] = v103;
  v104.i64[1] = HIDWORD(v103);
  int64x2_t v105 = v104;
  unint64_t v106 = vaddvq_s64(v104);
  unint64_t v107 = v106;
  unint64_t v108 = v39 + v106;
  if (v415) {
    BOOL v109 = v415 >= v108;
  }
  else {
    BOOL v109 = 1;
  }
  char v110 = !v109;
  int8x16_t v111 = 0uLL;
  if (v106 > 0x80 || (v110 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v108 = v39;
    int8x16_t v115 = 0uLL;
  }
  else
  {
    unint64_t v112 = v39 & 0x3F;
    int64x2_t v113 = vaddq_s64(vdupq_n_s64(v112), vzip1q_s64((int64x2_t)0, v105));
    int64x2_t v114 = (int64x2_t *)(v97 + 8 * (v39 >> 6));
    int8x16_t v115 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v114, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114->i64[0], 0), (uint64x2_t)vnegq_s64(v113)));
    if (v112 + v107 >= 0x81) {
      int8x16_t v115 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v114[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v113))), v115);
    }
  }
  int32x2_t v116 = vzip1_s32(*(int32x2_t *)v102.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
  v117.i64[0] = v116.u32[0];
  v117.i64[1] = v116.u32[1];
  uint64x2_t v118 = (uint64x2_t)vnegq_s64(v117);
  int64x2_t v119 = (int64x2_t)vshlq_u64((uint64x2_t)v115, v118);
  *(int32x2_t *)v115.i8 = vmovn_s64((int64x2_t)v115);
  *(int32x2_t *)v119.i8 = vmovn_s64(v119);
  int16x8_t v120 = (int16x8_t)vzip1q_s32((int32x4_t)v115, (int32x4_t)v119);
  uint32x4_t v121 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v427.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v427, (int8x16_t)v427, 8uLL))));
  int16x8_t v122 = (int16x8_t)vshlq_u32((uint32x4_t)v120, v121);
  *(int16x4_t *)v120.i8 = vmovn_s32((int32x4_t)v120);
  *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v122);
  int16x8_t v123 = vzip1q_s16(v120, v122);
  int16x8_t v124 = vaddq_s16(v427, v100);
  int16x8_t v125 = vsubq_s16(v101, v427);
  int16x8_t v126 = vshlq_s16(vshlq_s16(v123, v125), v124);
  int16x8_t v418 = v126;
  unint64_t v127 = v108 + v107;
  if (v415) {
    BOOL v128 = v415 >= v127;
  }
  else {
    BOOL v128 = 1;
  }
  char v129 = !v128;
  if (v107 > 0x80 || (v129 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v127 = v108;
  }
  else
  {
    unint64_t v130 = v108 & 0x3F;
    int64x2_t v131 = vaddq_s64(vdupq_n_s64(v130), vzip1q_s64((int64x2_t)0, v105));
    __int16 v132 = (int64x2_t *)(v97 + 8 * (v108 >> 6));
    int8x16_t v111 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v132, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132->i64[0], 0), (uint64x2_t)vnegq_s64(v131)));
    if (v130 + v107 >= 0x81) {
      int8x16_t v111 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v132[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v131))), v111);
    }
  }
  int64x2_t v133 = (int64x2_t)vshlq_u64((uint64x2_t)v111, v118);
  *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v111);
  *(int32x2_t *)v133.i8 = vmovn_s64(v133);
  int16x8_t v134 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v133);
  int16x8_t v135 = (int16x8_t)vshlq_u32((uint32x4_t)v134, v121);
  *(int16x4_t *)v134.i8 = vmovn_s32((int32x4_t)v134);
  *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
  int16x8_t v136 = vshlq_s16(vshlq_s16(vzip1q_s16(v134, v135), v125), v124);
  int16x8_t v419 = v136;
  unint64_t v137 = v127 + v107;
  if (v415) {
    BOOL v138 = v415 >= v137;
  }
  else {
    BOOL v138 = 1;
  }
  char v139 = !v138;
  int8x16_t v140 = 0uLL;
  if (v107 > 0x80 || (v139 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v137 = v127;
    int8x16_t v144 = 0uLL;
  }
  else
  {
    unint64_t v141 = v127 & 0x3F;
    int64x2_t v142 = vaddq_s64(vdupq_n_s64(v141), vzip1q_s64((int64x2_t)0, v105));
    int16x8_t v143 = (int64x2_t *)(v97 + 8 * (v127 >> 6));
    int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v143, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143->i64[0], 0), (uint64x2_t)vnegq_s64(v142)));
    if (v141 + v107 >= 0x81) {
      int8x16_t v144 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v143[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v142))), v144);
    }
  }
  int64x2_t v145 = (int64x2_t)vshlq_u64((uint64x2_t)v144, v118);
  *(int32x2_t *)v144.i8 = vmovn_s64((int64x2_t)v144);
  *(int32x2_t *)v145.i8 = vmovn_s64(v145);
  int16x8_t v146 = (int16x8_t)vzip1q_s32((int32x4_t)v144, (int32x4_t)v145);
  int16x8_t v147 = (int16x8_t)vshlq_u32((uint32x4_t)v146, v121);
  *(int16x4_t *)v146.i8 = vmovn_s32((int32x4_t)v146);
  *(int16x4_t *)v147.i8 = vmovn_s32((int32x4_t)v147);
  int16x8_t v148 = vshlq_s16(vshlq_s16(vzip1q_s16(v146, v147), v125), v124);
  int16x8_t v420 = v148;
  int8x16_t v149 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v428, v428));
  v146.i64[0] = vpaddq_s32((int32x4_t)v149, (int32x4_t)v149).u64[0];
  v150.i64[0] = v146.u32[0];
  v150.i64[1] = v146.u32[1];
  int64x2_t v151 = v150;
  unint64_t v152 = vaddvq_s64(v150);
  unint64_t v153 = v152;
  unint64_t v154 = v137 + v152;
  if (v415) {
    BOOL v155 = v415 >= v154;
  }
  else {
    BOOL v155 = 1;
  }
  char v156 = !v155;
  if (v152 > 0x80 || (v156 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v154 = v137;
  }
  else
  {
    unint64_t v157 = v137 & 0x3F;
    int64x2_t v158 = vaddq_s64(vdupq_n_s64(v157), vzip1q_s64((int64x2_t)0, v151));
    int16x8_t v159 = (int64x2_t *)(v97 + 8 * (v137 >> 6));
    int8x16_t v140 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v159, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159->i64[0], 0), (uint64x2_t)vnegq_s64(v158)));
    if (v157 + v153 >= 0x81) {
      int8x16_t v140 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v159[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v158))), v140);
    }
  }
  unint64_t v160 = v154 + v153;
  if (v415) {
    BOOL v161 = v415 >= v160;
  }
  else {
    BOOL v161 = 1;
  }
  char v162 = !v161;
  int8x16_t v163 = 0uLL;
  if (v153 > 0x80 || (v162 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v160 = v154;
    int8x16_t v167 = 0uLL;
  }
  else
  {
    unint64_t v164 = v154 & 0x3F;
    int64x2_t v165 = vaddq_s64(vdupq_n_s64(v164), vzip1q_s64((int64x2_t)0, v151));
    int16x8_t v166 = (int64x2_t *)(v97 + 8 * (v154 >> 6));
    int8x16_t v167 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v166, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166->i64[0], 0), (uint64x2_t)vnegq_s64(v165)));
    if (v164 + v153 >= 0x81) {
      int8x16_t v167 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v166[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v165))), v167);
    }
  }
  unint64_t v168 = v160 + v153;
  if (v415) {
    BOOL v169 = v415 >= v168;
  }
  else {
    BOOL v169 = 1;
  }
  char v170 = !v169;
  int8x16_t v410 = (int8x16_t)v55;
  if (v153 > 0x80 || (v170 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v168 = v160;
  }
  else
  {
    int64x2_t v171 = vaddq_s64(vdupq_n_s64(v160 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int8x16_t v172 = (int64x2_t *)(v97 + 8 * (v160 >> 6));
    int8x16_t v163 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v172, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172->i64[0], 0), (uint64x2_t)vnegq_s64(v171)));
    if ((v160 & 0x3F) + v153 >= 0x81) {
      int8x16_t v163 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v172[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v171))), v163);
    }
  }
  unint64_t v173 = v168 + v153;
  if (v415) {
    BOOL v174 = v415 >= v173;
  }
  else {
    BOOL v174 = 1;
  }
  char v175 = !v174;
  int8x16_t v176 = 0uLL;
  int8x16_t v411 = (int8x16_t)v52;
  int16x8_t v412 = v35;
  int8x16_t v408 = (int8x16_t)v54;
  if (v153 > 0x80 || (v175 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v173 = v168;
    int8x16_t v179 = 0uLL;
  }
  else
  {
    int64x2_t v177 = vaddq_s64(vdupq_n_s64(v168 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int8x16_t v178 = (int64x2_t *)(v97 + 8 * (v168 >> 6));
    int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v178, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178->i64[0], 0), (uint64x2_t)vnegq_s64(v177)));
    if ((v168 & 0x3F) + v153 >= 0x81) {
      int8x16_t v179 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v178[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v177))), v179);
    }
  }
  int8x16_t v180 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v429, v429));
  unint64_t v181 = vpaddq_s32((int32x4_t)v180, (int32x4_t)v180).u64[0];
  v182.i64[0] = v181;
  v182.i64[1] = HIDWORD(v181);
  int64x2_t v183 = v182;
  unint64_t v184 = vaddvq_s64(v182);
  unint64_t v185 = v184;
  unint64_t v186 = v173 + v184;
  if (v415) {
    BOOL v187 = v415 >= v186;
  }
  else {
    BOOL v187 = 1;
  }
  char v188 = !v187;
  int8x16_t v409 = (int8x16_t)v53;
  if (v184 > 0x80 || (v188 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v186 = v173;
  }
  else
  {
    unint64_t v189 = v173 & 0x3F;
    int64x2_t v190 = vaddq_s64(vdupq_n_s64(v189), vzip1q_s64((int64x2_t)0, v183));
    int32x4_t v191 = (int64x2_t *)(v97 + 8 * (v173 >> 6));
    int8x16_t v176 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v191, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191->i64[0], 0), (uint64x2_t)vnegq_s64(v190)));
    if (v189 + v185 >= 0x81) {
      int8x16_t v176 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v191[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v190))), v176);
    }
  }
  unint64_t v192 = v186 + v185;
  if (v415) {
    BOOL v193 = v415 >= v192;
  }
  else {
    BOOL v193 = 1;
  }
  char v194 = !v193;
  int8x16_t v195 = 0uLL;
  if (v185 > 0x80 || (v194 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v192 = v186;
    int8x16_t v199 = 0uLL;
  }
  else
  {
    unint64_t v196 = v186 & 0x3F;
    int64x2_t v197 = vaddq_s64(vdupq_n_s64(v196), vzip1q_s64((int64x2_t)0, v183));
    unint64_t v198 = (int64x2_t *)(v97 + 8 * (v186 >> 6));
    int8x16_t v199 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v198, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198->i64[0], 0), (uint64x2_t)vnegq_s64(v197)));
    if (v196 + v185 >= 0x81) {
      int8x16_t v199 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v198[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v197))), v199);
    }
  }
  unint64_t v200 = v192 + v185;
  if (v415) {
    BOOL v201 = v415 >= v200;
  }
  else {
    BOOL v201 = 1;
  }
  char v202 = !v201;
  if (v185 > 0x80 || (v202 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v200 = v192;
  }
  else
  {
    unint64_t v203 = v192 & 0x3F;
    int64x2_t v204 = vaddq_s64(vdupq_n_s64(v203), vzip1q_s64((int64x2_t)0, v183));
    int8x16_t v205 = (int64x2_t *)(v97 + 8 * (v192 >> 6));
    int8x16_t v195 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v205, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205->i64[0], 0), (uint64x2_t)vnegq_s64(v204)));
    if (v203 + v185 >= 0x81) {
      int8x16_t v195 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v205[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v204))), v195);
    }
  }
  unint64_t v206 = v200 + v185;
  if (v415) {
    BOOL v207 = v415 >= v206;
  }
  else {
    BOOL v207 = 1;
  }
  char v208 = !v207;
  int8x16_t v209 = 0uLL;
  if (v185 > 0x80 || (v208 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v206 = v200;
    int8x16_t v213 = 0uLL;
  }
  else
  {
    unint64_t v210 = v200 & 0x3F;
    int64x2_t v211 = vaddq_s64(vdupq_n_s64(v210), vzip1q_s64((int64x2_t)0, v183));
    int64x2_t v212 = (int64x2_t *)(v97 + 8 * (v200 >> 6));
    int8x16_t v213 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v212, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212->i64[0], 0), (uint64x2_t)vnegq_s64(v211)));
    if (v210 + v185 >= 0x81) {
      int8x16_t v213 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v212[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v211))), v213);
    }
  }
  int8x16_t v214 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v430, v430));
  unint64_t v215 = vpaddq_s32((int32x4_t)v214, (int32x4_t)v214).u64[0];
  v216.i64[0] = v215;
  v216.i64[1] = HIDWORD(v215);
  int64x2_t v217 = v216;
  unint64_t v218 = vaddvq_s64(v216);
  unint64_t v219 = v218;
  unint64_t v220 = v206 + v218;
  if (v415) {
    BOOL v221 = v415 >= v220;
  }
  else {
    BOOL v221 = 1;
  }
  char v222 = !v221;
  if (v218 > 0x80 || (v222 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v220 = v206;
  }
  else
  {
    unint64_t v223 = v206 & 0x3F;
    int64x2_t v224 = vaddq_s64(vdupq_n_s64(v223), vzip1q_s64((int64x2_t)0, v217));
    int8x16_t v225 = (int64x2_t *)(v97 + 8 * (v206 >> 6));
    int8x16_t v209 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v225, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225->i64[0], 0), (uint64x2_t)vnegq_s64(v224)));
    if (v223 + v219 >= 0x81) {
      int8x16_t v209 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v225[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v224))), v209);
    }
  }
  unint64_t v226 = v220 + v219;
  if (v415) {
    BOOL v227 = v415 >= v226;
  }
  else {
    BOOL v227 = 1;
  }
  char v228 = !v227;
  int8x16_t v229 = 0uLL;
  if (v219 > 0x80 || (v228 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v226 = v220;
    int8x16_t v233 = 0uLL;
  }
  else
  {
    unint64_t v230 = v220 & 0x3F;
    int64x2_t v231 = vaddq_s64(vdupq_n_s64(v230), vzip1q_s64((int64x2_t)0, v217));
    int16x8_t v232 = (int64x2_t *)(v97 + 8 * (v220 >> 6));
    int8x16_t v233 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v232, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232->i64[0], 0), (uint64x2_t)vnegq_s64(v231)));
    if (v230 + v219 >= 0x81) {
      int8x16_t v233 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v232[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v231))), v233);
    }
  }
  unint64_t v234 = v226 + v219;
  if (v415) {
    BOOL v235 = v415 >= v234;
  }
  else {
    BOOL v235 = 1;
  }
  char v236 = !v235;
  if (v219 > 0x80 || (v236 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v234 = v226;
  }
  else
  {
    unint64_t v237 = v226 & 0x3F;
    int64x2_t v238 = vaddq_s64(vdupq_n_s64(v237), vzip1q_s64((int64x2_t)0, v217));
    uint16x8_t v239 = (int64x2_t *)(v97 + 8 * (v226 >> 6));
    int8x16_t v229 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v239, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v238)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239->i64[0], 0), (uint64x2_t)vnegq_s64(v238)));
    if (v237 + v219 >= 0x81) {
      int8x16_t v229 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v238)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v239[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v238))), v229);
    }
  }
  unint64_t v240 = v234 + v219;
  if (v415) {
    BOOL v241 = v415 >= v240;
  }
  else {
    BOOL v241 = 1;
  }
  char v242 = !v241;
  if (v219 > 0x80 || (v242 & 1) != 0) {
    goto LABEL_227;
  }
  int64x2_t v243 = vaddq_s64(vdupq_n_s64(v234 & 0x3F), vzip1q_s64((int64x2_t)0, v217));
  int64x2_t v244 = (int64x2_t *)(v97 + 8 * (v234 >> 6));
  int64x2_t v245 = vdupq_n_s64(0x40uLL);
  int8x16_t v246 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v244, 1), (uint64x2_t)vsubq_s64(v245, v243)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v244->i64[0], 0), (uint64x2_t)vnegq_s64(v243)));
  if ((v234 & 0x3F) + v219 >= 0x81)
  {
    int64x2_t v245 = vdupq_n_s64(0xC0uLL);
    int8x16_t v246 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v244[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v243)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v244[1], 1), (uint64x2_t)vsubq_s64(v245, v243))), v246);
  }
  if (v99 || v415 + 8 * result - v240 - 2048 >= 9 || v82 == 2)
  {
LABEL_227:
    uint64_t result = 0;
    v28.f64[0] = NAN;
    v28.f64[1] = NAN;
    *a1 = v28;
    a1[1] = v28;
    a1[2] = v28;
    a1[3] = v28;
    int8x16_t v247 = (float64x2_t *)((char *)a1 + a2);
    *int8x16_t v247 = v28;
    v247[1] = v28;
    v247[2] = v28;
    v247[3] = v28;
    int64x2_t v248 = (float64x2_t *)((char *)a1 + 2 * a2);
    *int64x2_t v248 = v28;
    v248[1] = v28;
    v248[2] = v28;
    v248[3] = v28;
    int8x16_t v31 = (float64x2_t *)((char *)a1 + 2 * a2 + a2);
    *int8x16_t v31 = v28;
    v31[1] = v28;
    goto LABEL_228;
  }
  int32x2_t v249 = vzip1_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
  int32x2_t v250 = vzip1_s32(*(int32x2_t *)v87.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  *(int32x2_t *)v72.i8 = vzip1_s32(*(int32x2_t *)v149.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL));
  int32x2_t v251 = vzip1_s32(*(int32x2_t *)v180.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL));
  int32x4_t v252 = (int32x4_t)vextq_s8(v214, v214, 8uLL);
  int32x2_t v253 = vzip1_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v252.i8);
  v254.i64[0] = v249.u32[0];
  v254.i64[1] = v249.u32[1];
  int64x2_t v255 = (int64x2_t)vshlq_u64((uint64x2_t)v70, (uint64x2_t)vnegq_s64(v254));
  *(int32x2_t *)v70.i8 = vmovn_s64((int64x2_t)v70);
  *(int32x2_t *)v255.i8 = vmovn_s64(v255);
  int16x8_t v256 = (int16x8_t)vzip1q_s32((int32x4_t)v70, (int32x4_t)v255);
  v254.i64[0] = v250.u32[0];
  v254.i64[1] = v250.u32[1];
  int64x2_t v257 = (int64x2_t)vshlq_u64((uint64x2_t)v85, (uint64x2_t)vnegq_s64(v254));
  *(int32x2_t *)v252.i8 = vmovn_s64((int64x2_t)v85);
  *(int32x2_t *)v257.i8 = vmovn_s64(v257);
  int32x4_t v258 = vzip1q_s32(v252, (int32x4_t)v257);
  v254.i64[0] = v72.u32[0];
  v254.i64[1] = v72.u32[1];
  int32x4_t v259 = (int32x4_t)vnegq_s64(v254);
  int64x2_t v260 = (int64x2_t)vshlq_u64((uint64x2_t)v140, (uint64x2_t)v259);
  *(int32x2_t *)v245.i8 = vmovn_s64((int64x2_t)v140);
  *(int32x2_t *)v260.i8 = vmovn_s64(v260);
  int16x8_t v261 = (int16x8_t)vzip1q_s32((int32x4_t)v245, (int32x4_t)v260);
  int64x2_t v262 = (int64x2_t)vshlq_u64((uint64x2_t)v167, (uint64x2_t)v259);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v167);
  *(int32x2_t *)v262.i8 = vmovn_s64(v262);
  int16x8_t v263 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v262);
  int64x2_t v264 = (int64x2_t)vshlq_u64((uint64x2_t)v163, (uint64x2_t)v259);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v163);
  *(int32x2_t *)v264.i8 = vmovn_s64(v264);
  int16x8_t v265 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v264);
  v254.i64[0] = v251.u32[0];
  v254.i64[1] = v251.u32[1];
  int64x2_t v266 = v254;
  v254.i64[0] = v253.u32[0];
  v254.i64[1] = v253.u32[1];
  int32x4_t v267 = (int32x4_t)vnegq_s64(v266);
  int64x2_t v268 = (int64x2_t)vshlq_u64((uint64x2_t)v179, (uint64x2_t)v259);
  *(int32x2_t *)v259.i8 = vmovn_s64((int64x2_t)v179);
  *(int32x2_t *)v268.i8 = vmovn_s64(v268);
  int16x8_t v269 = (int16x8_t)vzip1q_s32(v259, (int32x4_t)v268);
  int64x2_t v270 = (int64x2_t)vshlq_u64((uint64x2_t)v176, (uint64x2_t)v267);
  *(int32x2_t *)v259.i8 = vmovn_s64((int64x2_t)v176);
  *(int32x2_t *)v270.i8 = vmovn_s64(v270);
  int16x8_t v271 = (int16x8_t)vzip1q_s32(v259, (int32x4_t)v270);
  int64x2_t v272 = (int64x2_t)vshlq_u64((uint64x2_t)v199, (uint64x2_t)v267);
  *(int32x2_t *)v259.i8 = vmovn_s64((int64x2_t)v199);
  *(int32x2_t *)v272.i8 = vmovn_s64(v272);
  int16x8_t v273 = (int16x8_t)vzip1q_s32(v259, (int32x4_t)v272);
  int64x2_t v274 = (int64x2_t)vshlq_u64((uint64x2_t)v195, (uint64x2_t)v267);
  *(int32x2_t *)v259.i8 = vmovn_s64((int64x2_t)v195);
  *(int32x2_t *)v274.i8 = vmovn_s64(v274);
  int16x8_t v275 = (int16x8_t)vzip1q_s32(v259, (int32x4_t)v274);
  uint64x2_t v276 = (uint64x2_t)vnegq_s64(v254);
  int64x2_t v277 = (int64x2_t)vshlq_u64((uint64x2_t)v213, (uint64x2_t)v267);
  *(int32x2_t *)v259.i8 = vmovn_s64((int64x2_t)v213);
  *(int32x2_t *)v277.i8 = vmovn_s64(v277);
  int16x8_t v278 = (int16x8_t)vzip1q_s32(v259, (int32x4_t)v277);
  int64x2_t v279 = (int64x2_t)vshlq_u64((uint64x2_t)v209, v276);
  *(int32x2_t *)v267.i8 = vmovn_s64((int64x2_t)v209);
  *(int32x2_t *)v279.i8 = vmovn_s64(v279);
  int16x8_t v280 = (int16x8_t)vzip1q_s32(v267, (int32x4_t)v279);
  int64x2_t v281 = (int64x2_t)vshlq_u64((uint64x2_t)v233, v276);
  *(int32x2_t *)v233.i8 = vmovn_s64((int64x2_t)v233);
  *(int32x2_t *)v281.i8 = vmovn_s64(v281);
  int16x8_t v282 = (int16x8_t)vzip1q_s32((int32x4_t)v233, (int32x4_t)v281);
  int64x2_t v283 = (int64x2_t)vshlq_u64((uint64x2_t)v229, v276);
  *(int32x2_t *)v281.i8 = vmovn_s64((int64x2_t)v229);
  *(int32x2_t *)v283.i8 = vmovn_s64(v283);
  int16x8_t v284 = (int16x8_t)vzip1q_s32((int32x4_t)v281, (int32x4_t)v283);
  int16x8_t v285 = (int16x8_t)vshlq_u32((uint32x4_t)v256, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v71.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)))));
  *(int16x4_t *)v256.i8 = vmovn_s32((int32x4_t)v256);
  *(int16x4_t *)v285.i8 = vmovn_s32((int32x4_t)v285);
  int16x8_t v286 = vzip1q_s16(v256, v285);
  uint32x4_t v287 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v428.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v428, (int8x16_t)v428, 8uLL))));
  int16x8_t v288 = (int16x8_t)vshlq_u32((uint32x4_t)v258, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)))));
  *(int16x4_t *)v179.i8 = vmovn_s32(v258);
  *(int16x4_t *)v288.i8 = vmovn_s32((int32x4_t)v288);
  int16x8_t v289 = vzip1q_s16((int16x8_t)v179, v288);
  int16x8_t v290 = (int16x8_t)vshlq_u32((uint32x4_t)v261, v287);
  *(int16x4_t *)v261.i8 = vmovn_s32((int32x4_t)v261);
  *(int16x4_t *)v290.i8 = vmovn_s32((int32x4_t)v290);
  int16x8_t v291 = vzip1q_s16(v261, v290);
  int16x8_t v292 = (int16x8_t)vshlq_u32((uint32x4_t)v263, v287);
  *(int16x4_t *)v263.i8 = vmovn_s32((int32x4_t)v263);
  *(int16x4_t *)v292.i8 = vmovn_s32((int32x4_t)v292);
  int16x8_t v293 = vzip1q_s16(v263, v292);
  int16x8_t v294 = (int16x8_t)vshlq_u32((uint32x4_t)v265, v287);
  *(int16x4_t *)v265.i8 = vmovn_s32((int32x4_t)v265);
  *(int16x4_t *)v294.i8 = vmovn_s32((int32x4_t)v294);
  int16x8_t v295 = vzip1q_s16(v265, v294);
  uint32x4_t v296 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v429.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v429, (int8x16_t)v429, 8uLL))));
  int16x8_t v297 = (int16x8_t)vshlq_u32((uint32x4_t)v269, v287);
  *(int16x4_t *)v269.i8 = vmovn_s32((int32x4_t)v269);
  *(int16x4_t *)v297.i8 = vmovn_s32((int32x4_t)v297);
  int16x8_t v298 = vzip1q_s16(v269, v297);
  int16x8_t v299 = (int16x8_t)vshlq_u32((uint32x4_t)v271, v296);
  *(int16x4_t *)v271.i8 = vmovn_s32((int32x4_t)v271);
  *(int16x4_t *)v299.i8 = vmovn_s32((int32x4_t)v299);
  int16x8_t v300 = vzip1q_s16(v271, v299);
  int16x8_t v301 = (int16x8_t)vshlq_u32((uint32x4_t)v273, v296);
  *(int16x4_t *)v273.i8 = vmovn_s32((int32x4_t)v273);
  *(int16x4_t *)v301.i8 = vmovn_s32((int32x4_t)v301);
  int16x8_t v302 = vzip1q_s16(v273, v301);
  int16x8_t v303 = (int16x8_t)vshlq_u32((uint32x4_t)v275, v296);
  *(int16x4_t *)v275.i8 = vmovn_s32((int32x4_t)v275);
  *(int16x4_t *)v303.i8 = vmovn_s32((int32x4_t)v303);
  int16x8_t v304 = vzip1q_s16(v275, v303);
  uint32x4_t v305 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v430.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v430, (int8x16_t)v430, 8uLL))));
  int16x8_t v306 = (int16x8_t)vshlq_u32((uint32x4_t)v278, v296);
  *(int16x4_t *)v278.i8 = vmovn_s32((int32x4_t)v278);
  *(int16x4_t *)v306.i8 = vmovn_s32((int32x4_t)v306);
  int16x8_t v307 = vzip1q_s16(v278, v306);
  int16x8_t v308 = (int16x8_t)vshlq_u32((uint32x4_t)v280, v305);
  *(int16x4_t *)v280.i8 = vmovn_s32((int32x4_t)v280);
  *(int16x4_t *)v308.i8 = vmovn_s32((int32x4_t)v308);
  int16x8_t v309 = vzip1q_s16(v280, v308);
  int16x8_t v310 = (int16x8_t)vshlq_u32((uint32x4_t)v282, v305);
  *(int16x4_t *)v282.i8 = vmovn_s32((int32x4_t)v282);
  *(int16x4_t *)v310.i8 = vmovn_s32((int32x4_t)v310);
  int16x8_t v311 = vzip1q_s16(v282, v310);
  int16x8_t v312 = (int16x8_t)vshlq_u32((uint32x4_t)v284, v305);
  *(int16x4_t *)v284.i8 = vmovn_s32((int32x4_t)v284);
  *(int16x4_t *)v312.i8 = vmovn_s32((int32x4_t)v312);
  int16x8_t v313 = vzip1q_s16(v284, v312);
  v312.i64[0] = 0x10001000100010;
  v312.i64[1] = 0x10001000100010;
  int16x8_t v314 = vsubq_s16(v312, (int16x8_t)v71);
  v315.i64[0] = 0xF000F000F000FLL;
  v315.i64[1] = 0xF000F000F000FLL;
  int16x8_t v316 = vaddq_s16((int16x8_t)v71, v315);
  int16x8_t v317 = vshlq_s16(v286, v314);
  v314.i64[0] = 0x10001000100010;
  v314.i64[1] = 0x10001000100010;
  int16x8_t v318 = vsubq_s16(v314, (int16x8_t)v86);
  int16x8_t v319 = vaddq_s16((int16x8_t)v86, v315);
  v315.i64[0] = 0x10001000100010;
  v315.i64[1] = 0x10001000100010;
  int16x8_t v320 = vshlq_s16(v289, v318);
  v318.i64[0] = 0xF000F000F000FLL;
  v318.i64[1] = 0xF000F000F000FLL;
  int16x8_t v321 = vsubq_s16(v315, v428);
  int16x8_t v322 = vaddq_s16(v428, v318);
  v318.i64[0] = 0x10001000100010;
  v318.i64[1] = 0x10001000100010;
  int16x8_t v323 = vshlq_s16(v291, v321);
  int16x8_t v324 = vshlq_s16(v293, v321);
  int16x8_t v325 = vshlq_s16(v295, v321);
  int16x8_t v326 = vshlq_s16(v298, v321);
  v321.i64[0] = 0xF000F000F000FLL;
  v321.i64[1] = 0xF000F000F000FLL;
  int16x8_t v327 = vsubq_s16(v318, v429);
  int16x8_t v328 = vaddq_s16(v429, v321);
  v321.i64[0] = 0x10001000100010;
  v321.i64[1] = 0x10001000100010;
  int16x8_t v329 = vshlq_s16(v300, v327);
  int16x8_t v330 = vshlq_s16(v302, v327);
  int16x8_t v331 = vshlq_s16(v304, v327);
  int16x8_t v332 = vshlq_s16(v307, v327);
  v327.i64[0] = 0xF000F000F000FLL;
  v327.i64[1] = 0xF000F000F000FLL;
  int16x8_t v333 = vsubq_s16(v321, v430);
  int16x8_t v334 = vaddq_s16(v430, v327);
  int8x16_t v335 = (int8x16_t)vshlq_s16(v317, v316);
  int16x8_t v336 = vshlq_s16(v320, v319);
  int16x8_t v337 = vshlq_s16(v323, v322);
  int16x8_t v338 = vshlq_s16(v324, v322);
  int16x8_t v339 = vshlq_s16(v325, v322);
  int16x8_t v340 = vshlq_s16(v326, v322);
  int16x8_t v341 = vshlq_s16(v329, v328);
  int16x8_t v342 = vshlq_s16(v330, v328);
  int16x8_t v343 = vshlq_s16(v331, v328);
  int16x8_t v344 = vshlq_s16(v332, v328);
  int64x2_t v345 = (int64x2_t)vshlq_u64((uint64x2_t)v246, v276);
  *(int32x2_t *)v246.i8 = vmovn_s64((int64x2_t)v246);
  *(int32x2_t *)v345.i8 = vmovn_s64(v345);
  int16x8_t v346 = (int16x8_t)vzip1q_s32((int32x4_t)v246, (int32x4_t)v345);
  int16x8_t v347 = vshlq_s16(vshlq_s16(v309, v333), v334);
  int16x8_t v348 = vshlq_s16(vshlq_s16(v311, v333), v334);
  int16x8_t v349 = vshlq_s16(vshlq_s16(v313, v333), v334);
  int16x8_t v350 = (int16x8_t)vshlq_u32((uint32x4_t)v346, v305);
  *(int16x4_t *)v346.i8 = vmovn_s32((int32x4_t)v346);
  *(int16x4_t *)v350.i8 = vmovn_s32((int32x4_t)v350);
  int16x8_t v351 = vshlq_s16(vshlq_s16(vzip1q_s16(v346, v350), v333), v334);
  int16x8_t v352 = vaddq_s16((int16x8_t)vandq_s8(v335, v410), v336);
  int8x16_t v353 = (int8x16_t)vdupq_lane_s64(v335.i64[0], 0);
  int16x8_t v354 = (int16x8_t)vandq_s8(v408, v353);
  int16x8_t v355 = vsubq_s16(v337, v354);
  int16x8_t v356 = vsubq_s16(v338, v354);
  int16x8_t v357 = vsubq_s16(v339, v354);
  int16x8_t v358 = vsubq_s16(v340, v354);
  int16x8_t v359 = (int16x8_t)vandq_s8(v409, v353);
  int16x8_t v360 = vsubq_s16(v341, v359);
  int16x8_t v361 = vsubq_s16(v342, v359);
  int16x8_t v362 = (int16x8_t)vandq_s8(v410, v353);
  int16x8_t v363 = vsubq_s16(v343, v359);
  int16x8_t v364 = vsubq_s16(v344, v359);
  v365.i64[0] = 0x1000100010001;
  v365.i64[1] = 0x1000100010001;
  int16x8_t v366 = vsubq_s16(v126, v362);
  int16x8_t v367 = vsubq_s16(v136, v362);
  int16x8_t v368 = (int16x8_t)vandq_s8(v411, v353);
  int16x8_t v369 = vsubq_s16(v347, v368);
  int16x8_t v370 = vsubq_s16(v348, v368);
  int16x8_t v371 = vsubq_s16(v349, v368);
  int16x8_t v372 = vsubq_s16(v351, v368);
  int8x16_t v373 = (int8x16_t)vsubq_s16(v148, v362);
  int8x16_t v374 = (int8x16_t)vsubq_s16(v352, v362);
  int16x8_t v417 = v352;
  int8x16_t v421 = (int8x16_t)v369;
  int8x16_t v422 = (int8x16_t)v370;
  int8x16_t v423 = (int8x16_t)v371;
  int8x16_t v424 = (int8x16_t)v372;
  if (vaddvq_s16(vceqq_s16(v412, (int16x8_t)v365)))
  {
    int8x16_t v375 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v426, v365));
    v376.i64[1] = v374.i64[1];
    v376.i64[0] = v373.i64[1];
    v377.i64[0] = v373.i64[0];
    v377.i64[1] = v374.i64[0];
    int16x8_t v378 = (int16x8_t)vbslq_s8(v375, v376, v374);
    int16x8_t v379 = (int16x8_t)vbslq_s8(v375, v377, v373);
    v380.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v380.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    int16x8_t v381 = (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v366 - 1), v380), v375);
    v434.val[0] = (int8x16_t)vaddq_s16(v378, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v366 - 1), (int8x16_t)xmmword_242EA7710), v375));
    v434.val[1] = (int8x16_t)vaddq_s16(v366, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v366 - 1), (int8x16_t)xmmword_242EA7720), v375));
    v434.val[2] = (int8x16_t)vaddq_s16(v367, v381);
    v434.val[3] = (int8x16_t)vaddq_s16(v379, v381);
    int16x8_t v382 = (int16x8_t)vandq_s8(vqtbl4q_s8(v434, v380), v375);
    int8x16_t v374 = (int8x16_t)vaddq_s16((int16x8_t)v434.val[0], (int16x8_t)vandq_s8(vqtbl4q_s8(v434, (int8x16_t)xmmword_242EA7730), v375));
    int16x8_t v366 = vaddq_s16((int16x8_t)v434.val[1], (int16x8_t)vandq_s8(vqtbl4q_s8(v434, (int8x16_t)xmmword_242EA7740), v375));
    int16x8_t v417 = (int16x8_t)v374;
    int16x8_t v418 = v366;
    int16x8_t v367 = vaddq_s16((int16x8_t)v434.val[2], v382);
    int8x16_t v373 = (int8x16_t)vaddq_s16((int16x8_t)v434.val[3], v382);
    v432.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v355.i8, (int8x16_t)xmmword_242EA7710), v375), v355);
    v432.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v355.i8, (int8x16_t)xmmword_242EA7750), v375), v356);
    v432.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v355.i8, v380), v375), v357);
    v432.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v355.i8, (int8x16_t)xmmword_242EA7760), v375), v358);
    v434.val[3] = vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA7730), v375);
    int16x8_t v383 = (int16x8_t)vandq_s8(vqtbl4q_s8(v432, v380), v375);
    int16x8_t v355 = vaddq_s16((int16x8_t)v434.val[3], (int16x8_t)v432.val[0]);
    int16x8_t v356 = vaddq_s16((int16x8_t)v432.val[1], (int16x8_t)v434.val[3]);
    int16x8_t v357 = vaddq_s16((int16x8_t)v432.val[2], v383);
    int16x8_t v358 = vaddq_s16((int16x8_t)v432.val[3], v383);
    v432.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v360.i8, (int8x16_t)xmmword_242EA74D0), v375), v360);
    v432.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v360.i8, (int8x16_t)xmmword_242EA75A0), v375), v361);
    v432.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v360.i8, (int8x16_t)xmmword_242EA7710), v375), v363);
    v432.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v360.i8, (int8x16_t)xmmword_242EA7720), v375), v364);
    v434.val[3] = vandq_s8(vqtbl4q_s8(v432, v380), v375);
    int16x8_t v360 = vaddq_s16((int16x8_t)v432.val[0], (int16x8_t)v434.val[3]);
    int16x8_t v361 = vaddq_s16((int16x8_t)v432.val[1], (int16x8_t)v434.val[3]);
    int16x8_t v363 = vaddq_s16((int16x8_t)v432.val[2], (int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA75D0), v375));
    int16x8_t v364 = vaddq_s16((int16x8_t)v432.val[3], (int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA7770), v375));
    v432.val[0] = v421;
    v432.val[1] = v422;
    int8x16_t v34 = v426;
    v432.val[2] = v423;
    v432.val[3] = v424;
    v433.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA74D0), v375), (int16x8_t)v421);
    v433.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA7780), v375), (int16x8_t)v422);
    int16x8_t v419 = v367;
    int16x8_t v420 = (int16x8_t)v373;
    v433.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA7710), v375), (int16x8_t)v423);
    v433.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v432, (int8x16_t)xmmword_242EA7720), v375), (int16x8_t)v424);
    int16x8_t v384 = (int16x8_t)vandq_s8(vqtbl4q_s8(v433, v380), v375);
    int16x8_t v385 = (int16x8_t)vandq_s8(vqtbl4q_s8(v433, (int8x16_t)xmmword_242EA75D0), v375);
    int16x8_t v386 = (int16x8_t)vandq_s8(vqtbl4q_s8(v433, (int8x16_t)xmmword_242EA7790), v375);
    int16x8_t v369 = vaddq_s16((int16x8_t)v433.val[0], v384);
    int16x8_t v370 = vaddq_s16((int16x8_t)v433.val[1], v384);
    int16x8_t v371 = vaddq_s16((int16x8_t)v433.val[2], v385);
    int16x8_t v372 = vaddq_s16((int16x8_t)v433.val[3], v386);
  }
  int8x16_t v387 = (int8x16_t)vaddq_s16(v425, (int16x8_t)v374);
  int8x16_t v388 = (int8x16_t)vaddq_s16(v366, v425);
  int8x16_t v389 = (int8x16_t)vaddq_s16(v367, v425);
  int8x16_t v390 = (int8x16_t)vaddq_s16((int16x8_t)v373, v425);
  int8x16_t v391 = (int8x16_t)vaddq_s16(v355, v425);
  int8x16_t v392 = (int8x16_t)vaddq_s16(v356, v425);
  int8x16_t v393 = (int8x16_t)vaddq_s16(v357, v425);
  int8x16_t v394 = (int8x16_t)vaddq_s16(v358, v425);
  int8x16_t v395 = (int8x16_t)vaddq_s16(v360, v425);
  int8x16_t v396 = (int8x16_t)vaddq_s16(v361, v425);
  int8x16_t v397 = (int8x16_t)vaddq_s16(v363, v425);
  int8x16_t v398 = (int8x16_t)vaddq_s16(v364, v425);
  int8x16_t v399 = (int8x16_t)vaddq_s16(v369, v425);
  int8x16_t v400 = (int8x16_t)vaddq_s16(v370, v425);
  int8x16_t v401 = (int8x16_t)vaddq_s16(v371, v425);
  int8x16_t v402 = (int8x16_t)vaddq_s16(v372, v425);
  v403.i64[0] = 0x10001000100010;
  v403.i64[1] = 0x10001000100010;
  int8x16_t v404 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v34, v403));
  uint64_t v405 = (int16x8_t *)((char *)a1 + a2);
  *(int16x8_t *)a1 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v387, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v387);
  a1[1] = (float64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v389, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v389);
  a1[2] = (float64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v395, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v395);
  a1[3] = (float64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v397, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v397);
  int v406 = (int16x8_t *)((char *)a1 + 2 * a2);
  *uint64_t v405 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v388, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v388);
  v405[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v390, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v390);
  v405[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v396, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v396);
  v405[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v398, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v398);
  *int v406 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v391, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v391);
  v406[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v393, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v393);
  v406[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v399, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v399);
  v406[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v401, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v401);
  uint64_t v407 = (int16x8_t *)((char *)v406 + a2);
  *uint64_t v407 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v392, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v392);
  v407[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v394, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v394);
  v407[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v400, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v400);
  v407[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v402, (int8x16_t)xmmword_242EA77A0), v404), (int16x8_t)v402);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(float64x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1, 128, a2, *a3);
  uint64_t v6 = v5
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 4, 128, v5, a3[1]);
  uint64_t v7 = v6
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 32, 128, v6, a3[2]);
  uint64_t v8 = v7
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 36, 128, v7, a3[3]);
  uint64_t v9 = v8
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 64, 128, v8, a3[4]);
  uint64_t v10 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 68, 128, v9, a3[5]);
  uint64_t v11 = v10
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 96, 128, v10, a3[6]);
  unsigned int v12 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 100, 128, v11, v12);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(unint64_t a1, char *a2, int16x8_t *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6 = (int16x8_t *)((char *)a3 + 2 * a4);
  int16x8_t v7 = a3[3];
  int16x8_t v8 = a3[2];
  int16x8_t v9 = a3[1];
  int8x16_t v10 = *(int8x16_t *)((char *)a3 + a4);
  int16x8_t v11 = *(int16x8_t *)((char *)&a3[2] + a4);
  int16x8_t v12 = *(int16x8_t *)((char *)&a3[3] + a4);
  int16x8_t v14 = *v6;
  int16x8_t v15 = v6[1];
  int16x8_t v16 = v6[2];
  int16x8_t v17 = v6[3];
  long long v13 = (int16x8_t *)((char *)v6 + a4);
  int16x8_t v18 = v16;
  int16x8_t v19 = v15;
  int16x8_t v20 = v13[1];
  int16x8_t v21 = v13[2];
  int16x8_t v22 = v13[3];
  int16x8_t v23 = *v13;
  int16x8_t v24 = (int16x8_t)vdupq_lane_s64(a3->i64[0], 0);
  int16x8_t v451 = *a3;
  int16x8_t v452 = (int16x8_t)v10;
  int16x8_t v453 = v9;
  int16x8_t v454 = *(int16x8_t *)((char *)&a3[1] + a4);
  int8x16_t v464 = (int8x16_t)vsubq_s16(*a3, v24);
  int8x16_t v465 = (int8x16_t)vsubq_s16((int16x8_t)v10, v24);
  int8x16_t v466 = (int8x16_t)vsubq_s16(v9, v24);
  int8x16_t v467 = (int8x16_t)vsubq_s16(v454, v24);
  int16x8_t v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v464, (int16x8_t)v465), (int16x8_t)v466), (int16x8_t)v467), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v26 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v464, (int16x8_t)v465), (int16x8_t)v466), (int16x8_t)v467), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v27 = vpmaxq_s16(v25, v25);
  int16x8_t v28 = vpminq_s16(v26, v26);
  int16x8_t v29 = vzip1q_s16(v27, v28);
  v30.i64[0] = 0x10001000100010;
  v30.i64[1] = 0x10001000100010;
  int16x8_t v31 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v29)), (int8x16_t)vceqzq_s16(v29));
  int8x16_t v468 = (int8x16_t)vsubq_s16(v14, v24);
  int8x16_t v469 = (int8x16_t)vsubq_s16(v23, v24);
  int16x8_t v461 = v14;
  int16x8_t v462 = v23;
  int16x8_t v463 = v19;
  int8x16_t v470 = (int8x16_t)vsubq_s16(v19, v24);
  int8x16_t v471 = (int8x16_t)vsubq_s16(v20, v24);
  v29.i64[0] = 0x8000800080008000;
  v29.i64[1] = 0x8000800080008000;
  int16x8_t v32 = vmaxq_s16(v27, v29);
  v29.i64[0] = 0x8000800080008000;
  v29.i64[1] = 0x8000800080008000;
  int16x8_t v33 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v468, (int16x8_t)v469), (int16x8_t)v470), (int16x8_t)v471), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v34 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v468, (int16x8_t)v469), (int16x8_t)v470), (int16x8_t)v471), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v35 = vpmaxq_s16(v33, v33);
  int16x8_t v36 = vpminq_s16(v34, v34);
  int16x8_t v37 = vmaxq_s16(v32, v35);
  int16x8_t v38 = vminq_s16(vminq_s16(v28, v29), v36);
  int16x8_t v39 = vzip1q_s16(v35, v36);
  int16x8_t v40 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v39)), (int8x16_t)vceqzq_s16(v39));
  int8x16_t v472 = (int8x16_t)vsubq_s16(v8, v24);
  int8x16_t v473 = (int8x16_t)vsubq_s16(v11, v24);
  int16x8_t v458 = v8;
  int16x8_t v459 = v11;
  int16x8_t v460 = v7;
  int16x8_t v41 = vsubq_s16(v7, v24);
  int16x8_t v42 = vminq_s16(vminq_s16((int16x8_t)v472, (int16x8_t)v473), v41);
  int16x8_t v450 = v12;
  int8x16_t v474 = (int8x16_t)v41;
  int8x16_t v475 = (int8x16_t)vsubq_s16(v12, v24);
  int16x8_t v43 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v472, (int16x8_t)v473), v41), (int16x8_t)v475), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v44 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v42, (int16x8_t)v475), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v45 = vpmaxq_s16(v43, v43);
  int16x8_t v46 = vpminq_s16(v44, v44);
  int16x8_t v47 = vmaxq_s16(v37, v45);
  int16x8_t v48 = vminq_s16(v38, v46);
  int16x8_t v49 = vzip1q_s16(v45, v46);
  int16x8_t v50 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v49)), (int8x16_t)vceqzq_s16(v49));
  int8x16_t v476 = (int8x16_t)vsubq_s16(v18, v24);
  int8x16_t v477 = (int8x16_t)vsubq_s16(v21, v24);
  int8x16_t v480 = (int8x16_t)v24;
  int16x8_t v455 = v18;
  int16x8_t v456 = v21;
  int16x8_t v457 = v17;
  int16x8_t v448 = v20;
  int16x8_t v449 = v22;
  int8x16_t v478 = (int8x16_t)vsubq_s16(v17, v24);
  int8x16_t v479 = (int8x16_t)vsubq_s16(v22, v24);
  int16x8_t v51 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v476, (int16x8_t)v477), (int16x8_t)v478), (int16x8_t)v479), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v52 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v476, (int16x8_t)v477), (int16x8_t)v478), (int16x8_t)v479), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v53 = vpmaxq_s16(v51, v51);
  int16x8_t v54 = vpminq_s16(v52, v52);
  int16x8_t v55 = vmaxq_s16(v47, v53);
  int16x8_t v56 = vminq_s16(v48, v54);
  int16x8_t v57 = vzip1q_s16(v53, v54);
  int16x8_t v58 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v57)), (int8x16_t)vceqzq_s16(v57));
  int16x8_t v59 = vpmaxq_s16(v31, v31);
  int16x8_t v60 = vpmaxq_s16(v40, v40);
  int16x8_t v61 = vpmaxq_s16(v50, v50);
  int16x8_t v62 = vpmaxq_s16(v58, v58);
  int8x16_t v63 = (int8x16_t)vmaxq_s16(vmaxq_s16(v59, v60), vmaxq_s16(v61, v62));
  int16x8_t v64 = vclzq_s16(vsubq_s16(v55, v56));
  v8.i64[0] = 0xF000F000F000FLL;
  v8.i64[1] = 0xF000F000F000FLL;
  v65.i64[0] = -1;
  v65.i64[1] = -1;
  int16x8_t v66 = vshlq_s16(v65, vsubq_s16(v8, v64));
  int8x16_t v487 = (int8x16_t)v56;
  int8x16_t v488 = (int8x16_t)v55;
  int8x16_t v67 = (int8x16_t)vsubq_s16((int16x8_t)v30, v64);
  int8x16_t v68 = (int8x16_t)vcgtq_s16((int16x8_t)v63, (int16x8_t)v67);
  int16x8_t v69 = (int16x8_t)vbslq_s8(v68, v67, v63);
  int8x16_t v489 = vandq_s8((int8x16_t)vsubq_s16(v66, v56), v68);
  v10.i64[0] = 0x8000800080008;
  v10.i64[1] = 0x8000800080008;
  int8x16_t v70 = vorrq_s8((int8x16_t)0, vandq_s8(v68, v10));
  v71.i64[0] = 0x3000300030003;
  v71.i64[1] = 0x3000300030003;
  int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16(v69, v60), (int16x8_t)v71), (int16x8_t)0);
  int16x8_t v73 = vmaxq_s16(vminq_s16(vsubq_s16(v69, v61), (int16x8_t)v71), (int16x8_t)0);
  int16x8_t v483 = vsubq_s16(v69, v72);
  int16x8_t v484 = vsubq_s16(v69, v73);
  int16x8_t v74 = vmaxq_s16(vminq_s16(vsubq_s16(v69, v62), (int16x8_t)v71), (int16x8_t)0);
  int16x8_t v485 = vsubq_s16(v69, v74);
  int8x16_t v486 = (int8x16_t)v69;
  int16x8_t v75 = vaddq_s16(v74, v73);
  int16x8_t v76 = vmaxq_s16(vminq_s16(vsubq_s16(v69, v59), (int16x8_t)v71), (int16x8_t)0);
  int8x16_t v77 = (int8x16_t)vceqq_s16(v75, vnegq_s16(vaddq_s16(v76, v72)));
  int v78 = (unsigned __int16)vmaxvq_s16(v69);
  int16x8_t v79 = vsubq_s16(v69, v76);
  v10.i64[0] = 0x4000400040004;
  v10.i64[1] = 0x4000400040004;
  int8x16_t v80 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16(v69), v71), v70), vbicq_s8(v10, v77));
  int8x16_t v481 = v80;
  int16x8_t v482 = v79;
  if (v78)
  {
    v81.i64[0] = 0x8000800080008000;
    v81.i64[1] = 0x8000800080008000;
    int8x16_t v82 = (int8x16_t)vsubq_s16((int16x8_t)v466, (int16x8_t)vqtbl1q_s8(v466, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v83 = (int8x16_t)vsubq_s16((int16x8_t)v467, (int16x8_t)vqtbl1q_s8(v467, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v84 = (int8x16_t)vsubq_s16((int16x8_t)v469, (int16x8_t)vqtbl1q_s8(v469, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v470, (int16x8_t)vqtbl1q_s8(v470, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v86 = (int8x16_t)vsubq_s16((int16x8_t)v471, (int16x8_t)vqtbl1q_s8(v471, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v87 = (int8x16_t)vsubq_s16((int16x8_t)v472, (int16x8_t)vqtbl1q_s8(v472, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v88 = (int8x16_t)vsubq_s16((int16x8_t)v473, (int16x8_t)vqtbl1q_s8(v473, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v474, (int16x8_t)vqtbl1q_s8(v474, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v475, (int16x8_t)vqtbl1q_s8(v475, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v476, (int16x8_t)vqtbl1q_s8(v476, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v477, (int16x8_t)vqtbl1q_s8(v477, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v93 = (int8x16_t)vsubq_s16((int16x8_t)v478, (int16x8_t)vqtbl1q_s8(v478, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v94 = (int8x16_t)vsubq_s16((int16x8_t)v479, (int16x8_t)vqtbl1q_s8(v479, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v443 = (int8x16_t)vsubq_s16((int16x8_t)v464, (int16x8_t)vqtbl1q_s8(v464, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v445 = (int8x16_t)vsubq_s16((int16x8_t)v465, (int16x8_t)vqtbl1q_s8(v465, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v95 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v443, (int16x8_t)v445), (int16x8_t)v82), (int16x8_t)v83), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v96 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v443, (int16x8_t)v445), (int16x8_t)v82), (int16x8_t)v83), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v97 = vpmaxq_s16(v95, v95);
    int16x8_t v98 = vpminq_s16(v96, v96);
    int16x8_t v99 = vmaxq_s16(v97, v81);
    v81.i64[0] = 0x8000800080008000;
    v81.i64[1] = 0x8000800080008000;
    int16x8_t v100 = vminq_s16(v98, v81);
    int16x8_t v101 = vzip1q_s16(v97, v98);
    int16x8_t v102 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v101)), (int8x16_t)vceqzq_s16(v101));
    int16x8_t v103 = vpmaxq_s16(v102, v102);
    int8x16_t v439 = (int8x16_t)vsubq_s16((int16x8_t)v468, (int16x8_t)vqtbl1q_s8(v468, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v439, (int16x8_t)v84), (int16x8_t)v85), (int16x8_t)v86), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v439, (int16x8_t)v84), (int16x8_t)v85), (int16x8_t)v86), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v106 = vpmaxq_s16(v104, v104);
    int16x8_t v107 = vpminq_s16(v105, v105);
    int16x8_t v108 = vmaxq_s16(v99, v106);
    int16x8_t v109 = vminq_s16(v100, v107);
    int16x8_t v110 = vzip1q_s16(v106, v107);
    int16x8_t v111 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v110)), (int8x16_t)vceqzq_s16(v110));
    int8x16_t v112 = (int8x16_t)vpmaxq_s16(v111, v111);
    int16x8_t v113 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v87, (int16x8_t)v88), (int16x8_t)v89), (int16x8_t)v90), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v114 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v87, (int16x8_t)v88), (int16x8_t)v89), (int16x8_t)v90), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v115 = vpmaxq_s16(v113, v113);
    int16x8_t v116 = vpminq_s16(v114, v114);
    int16x8_t v117 = vmaxq_s16(v108, v115);
    int16x8_t v118 = vminq_s16(v109, v116);
    int16x8_t v119 = vzip1q_s16(v115, v116);
    int16x8_t v120 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v119)), (int8x16_t)vceqzq_s16(v119));
    int16x8_t v121 = vpmaxq_s16(v120, v120);
    int16x8_t v122 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v91, (int16x8_t)v92), (int16x8_t)v93), (int16x8_t)v94), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v123 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v91, (int16x8_t)v92), (int16x8_t)v93), (int16x8_t)v94), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v124 = vpmaxq_s16(v122, v122);
    int16x8_t v125 = vpminq_s16(v123, v123);
    int16x8_t v126 = vmaxq_s16(v117, v124);
    int16x8_t v127 = vzip1q_s16(v124, v125);
    int16x8_t v128 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v30, vclsq_s16(v127)), (int8x16_t)vceqzq_s16(v127));
    int16x8_t v129 = vpmaxq_s16(v128, v128);
    int8x16_t v130 = (int8x16_t)vmaxq_s16(vmaxq_s16(v103, (int16x8_t)v112), vmaxq_s16(v121, v129));
    int8x16_t v441 = (int8x16_t)v126;
    int8x16_t v131 = (int8x16_t)vminq_s16(v118, v125);
    int16x8_t v132 = vclzq_s16(vsubq_s16(v126, (int16x8_t)v131));
    int8x16_t v133 = (int8x16_t)vsubq_s16((int16x8_t)v30, v132);
    int8x16_t v134 = (int8x16_t)vcgtq_s16((int16x8_t)v130, (int16x8_t)v133);
    int8x16_t v135 = vbslq_s8(v134, v133, v130);
    int16x8_t v136 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v135, v103), (int16x8_t)v71), (int16x8_t)0);
    int16x8_t v137 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v135, (int16x8_t)v112), (int16x8_t)v71), (int16x8_t)0);
    int16x8_t v138 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v135, v121), (int16x8_t)v71), (int16x8_t)0);
    int16x8_t v139 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v135, v129), (int16x8_t)v71), (int16x8_t)0);
    v81.i64[0] = 0x4000400040004;
    v81.i64[1] = 0x4000400040004;
    int8x16_t v140 = vbicq_s8((int8x16_t)v81, (int8x16_t)vceqq_s16(vaddq_s16(v139, v138), vnegq_s16(vaddq_s16(v136, v137))));
    v112.i64[0] = 0x18001800180018;
    v112.i64[1] = 0x18001800180018;
    int8x16_t v141 = vbslq_s8(v134, v112, v30);
    int8x16_t v434 = (int8x16_t)vsubq_s16((int16x8_t)v135, v137);
    int8x16_t v435 = (int8x16_t)vsubq_s16((int16x8_t)v135, v138);
    int8x16_t v437 = (int8x16_t)vsubq_s16((int16x8_t)v135, v139);
    v139.i64[0] = 0x7000700070007;
    v139.i64[1] = 0x7000700070007;
    int8x16_t v432 = (int8x16_t)vsubq_s16((int16x8_t)v135, v136);
    int16x8_t v142 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v135, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v141 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v140, (int16x8_t)v140)), (int16x8_t)v432, v139), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v435, (int16x8_t)v434), (int16x8_t)v437), 3uLL));
    v81.i64[0] = 0x8000800080008;
    v81.i64[1] = 0x8000800080008;
    int16x8_t v143 = (int16x8_t)vandq_s8(v80, v71);
    v144.i64[0] = 0x2000200020002;
    v144.i64[1] = 0x2000200020002;
    int16x8_t v145 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v143, v144), v30);
    int8x16_t v146 = v486;
    int16x8_t v147 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v486, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v70, (int8x16_t)v81))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), (int8x16_t)v81)), v145);
    int16x8_t v148 = v482;
    int16x8_t v149 = v483;
    int16x8_t v150 = vmlaq_s16(v147, v482, v139);
    int16x8_t v151 = v484;
    int16x8_t v152 = v485;
    int8x16_t v153 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(v150, vshlq_n_s16(vaddq_s16(vaddq_s16(v484, v483), v485), 3uLL)), v142).i64[0], 0);
    int v154 = (unsigned __int16)vaddvq_s16((int16x8_t)v153);
    BOOL v156 = a5 < 4 || a6 < 2;
    if (v154)
    {
      v157.i64[0] = 0x3000300030003;
      v157.i64[1] = 0x3000300030003;
      int8x16_t v158 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v135), v157), v141), v140);
      v159.i64[0] = 0xF000F000F000FLL;
      v159.i64[1] = 0xF000F000F000FLL;
      int8x16_t v464 = vbslq_s8(v153, v443, v464);
      int8x16_t v465 = vbslq_s8(v153, v445, v465);
      v160.i64[0] = -1;
      v160.i64[1] = -1;
      int8x16_t v466 = vbslq_s8(v153, v82, v466);
      int8x16_t v467 = vbslq_s8(v153, v83, v467);
      int8x16_t v468 = vbslq_s8(v153, v439, v468);
      int8x16_t v469 = vbslq_s8(v153, v84, v469);
      int8x16_t v470 = vbslq_s8(v153, v85, v470);
      int8x16_t v471 = vbslq_s8(v153, v86, v471);
      int8x16_t v472 = vbslq_s8(v153, v87, v472);
      int8x16_t v473 = vbslq_s8(v153, v88, v473);
      int8x16_t v474 = vbslq_s8(v153, v89, v474);
      int8x16_t v475 = vbslq_s8(v153, v90, v475);
      int8x16_t v476 = vbslq_s8(v153, v91, v476);
      int8x16_t v477 = vbslq_s8(v153, v92, v477);
      int8x16_t v478 = vbslq_s8(v153, v93, v478);
      int8x16_t v479 = vbslq_s8(v153, v94, v479);
      int16x8_t v148 = (int16x8_t)vbslq_s8(v153, v432, (int8x16_t)v482);
      int16x8_t v149 = (int16x8_t)vbslq_s8(v153, v434, (int8x16_t)v483);
      int16x8_t v482 = v148;
      int16x8_t v483 = v149;
      int16x8_t v151 = (int16x8_t)vbslq_s8(v153, v435, (int8x16_t)v484);
      int16x8_t v152 = (int16x8_t)vbslq_s8(v153, v437, (int8x16_t)v485);
      int16x8_t v484 = v151;
      int16x8_t v485 = v152;
      int8x16_t v488 = vbslq_s8(v153, v441, v488);
      int8x16_t v489 = vbslq_s8(v153, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v160, vsubq_s16(v159, v132)), (int16x8_t)v131), v134), v489);
      int8x16_t v146 = vbslq_s8(v153, v135, v486);
      int8x16_t v486 = v146;
      int8x16_t v487 = vbslq_s8(v153, v131, v487);
      int8x16_t v80 = vbslq_s8(v153, v158, v481);
      int8x16_t v480 = vbslq_s8(v153, (int8x16_t)vsubq_s16((int16x8_t)v480, (int16x8_t)vqtbl1q_s8(v480, (int8x16_t)xmmword_242EA77A0)), v480);
      int8x16_t v481 = v80;
    }
    int16x8_t v161 = v461;
    int16x8_t v162 = v462;
    int16x8_t v163 = v463;
    int16x8_t v164 = v451;
    int16x8_t v165 = v452;
    int16x8_t v166 = v453;
    int8x16_t v167 = (int8x16_t)v454;
    if (!v156)
    {
      int16x8_t v168 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v164.i8, (int8x16_t)xmmword_242EA77C0);
      int16x8_t v169 = vsubq_s16(v451, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v164.i8, (int8x16_t)xmmword_242EA7710));
      int8x16_t v442 = (int8x16_t)vsubq_s16(v452, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v164.i8, (int8x16_t)xmmword_242EA7720));
      int8x16_t v444 = (int8x16_t)vsubq_s16(v453, v168);
      int16x8_t v446 = vsubq_s16(v454, v168);
      uint64_t v170 = v448.i64[0];
      uint64_t v171 = v454.i64[1];
      int16x8_t v172 = vsubq_s16(v461, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v161.i8, (int8x16_t)xmmword_242EA7710));
      int16x8_t v173 = vsubq_s16(v462, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v161.i8, (int8x16_t)xmmword_242EA7750));
      int16x8_t v174 = vsubq_s16(v463, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v161.i8, (int8x16_t)xmmword_242EA77C0));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v448, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v161.i8, (int8x16_t)xmmword_242EA7760));
      v490.val[0] = (int8x16_t)v458;
      v490.val[1] = (int8x16_t)v459;
      v490.val[2] = (int8x16_t)v460;
      v490.val[3].i64[0] = v450.i64[0];
      v490.val[3].i64[1] = v454.i64[1];
      int8x16_t v176 = (int8x16_t)vsubq_s16(v458, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA77D0));
      int8x16_t v177 = (int8x16_t)vsubq_s16(v459, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA77E0));
      int8x16_t v178 = (int8x16_t)vsubq_s16(v460, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA7710));
      int8x16_t v179 = (int8x16_t)v173;
      int8x16_t v180 = (int8x16_t)vsubq_s16(v450, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA7720));
      v490.val[0] = (int8x16_t)v455;
      v490.val[1] = (int8x16_t)v456;
      v490.val[2] = (int8x16_t)v457;
      v490.val[3].i64[0] = v449.i64[0];
      v490.val[3].i64[1] = v454.i64[1];
      int16x8_t v181 = vsubq_s16(v455, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA77D0));
      int16x8_t v182 = vsubq_s16(v456, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA7780));
      int16x8_t v183 = vsubq_s16(v457, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA7710));
      int16x8_t v184 = vsubq_s16(v449, (int16x8_t)vqtbl4q_s8(v490, (int8x16_t)xmmword_242EA7720));
      int8x16_t v185 = (int8x16_t)v172;
      int8x16_t v186 = v175;
      v189.i64[0] = v446.i64[0];
      int8x16_t v187 = (int8x16_t)v174;
      v188.i64[1] = v169.i64[1];
      v188.i64[0] = v446.i64[1];
      v189.i64[1] = v169.i64[0];
      int16x8_t v190 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v188, (int16x8_t)v442), (int16x8_t)v444), (int16x8_t)v189), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v191 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v188, (int16x8_t)v442), (int16x8_t)v444), (int16x8_t)v189), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v192 = vpmaxq_s16(v190, v190);
      int8x16_t v193 = (int8x16_t)vpminq_s16(v191, v191);
      v194.i64[0] = 0x8000800080008000;
      v194.i64[1] = 0x8000800080008000;
      int16x8_t v195 = vmaxq_s16(v192, v194);
      v194.i64[0] = 0x8000800080008000;
      v194.i64[1] = 0x8000800080008000;
      int16x8_t v196 = vminq_s16((int16x8_t)v193, v194);
      int16x8_t v197 = vzip1q_s16(v192, (int16x8_t)v193);
      v193.i64[0] = 0x10001000100010;
      v193.i64[1] = 0x10001000100010;
      int16x8_t v198 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v193, vclsq_s16(v197)), (int8x16_t)vceqzq_s16(v197));
      int16x8_t v199 = vpmaxq_s16(v198, v198);
      int16x8_t v200 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v172, (int16x8_t)v179), v174), (int16x8_t)v175), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v201 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16(v172, (int16x8_t)v179), v174), (int16x8_t)v175), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v202 = vpmaxq_s16(v200, v200);
      int16x8_t v203 = vpminq_s16(v201, v201);
      int16x8_t v204 = vmaxq_s16(v195, v202);
      int16x8_t v205 = vminq_s16(v196, v203);
      int16x8_t v206 = vzip1q_s16(v202, v203);
      int16x8_t v207 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v193, vclsq_s16(v206)), (int8x16_t)vceqzq_s16(v206));
      int16x8_t v208 = vpmaxq_s16(v207, v207);
      int16x8_t v209 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v176, (int16x8_t)v177), (int16x8_t)v178), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v210 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v176, (int16x8_t)v177), (int16x8_t)v178), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v211 = vpmaxq_s16(v209, v209);
      int16x8_t v212 = vpminq_s16(v210, v210);
      int16x8_t v213 = vmaxq_s16(v204, v211);
      int16x8_t v214 = vminq_s16(v205, v212);
      int16x8_t v215 = vzip1q_s16(v211, v212);
      int16x8_t v216 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v193, vclsq_s16(v215)), (int8x16_t)vceqzq_s16(v215));
      int16x8_t v217 = vpmaxq_s16(v216, v216);
      int16x8_t v218 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v181, v182), v183), v184), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v219 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16(v181, v182), v183), v184), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v220 = vpmaxq_s16(v218, v218);
      int16x8_t v221 = vpminq_s16(v219, v219);
      int16x8_t v222 = vmaxq_s16(v213, v220);
      int8x16_t v223 = (int8x16_t)vminq_s16(v214, v221);
      int16x8_t v224 = vzip1q_s16(v220, v221);
      int16x8_t v225 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v193, vclsq_s16(v224)), (int8x16_t)vceqzq_s16(v224));
      int16x8_t v226 = vpmaxq_s16(v225, v225);
      int8x16_t v227 = (int8x16_t)vmaxq_s16(vmaxq_s16(v199, v208), vmaxq_s16(v217, v226));
      int16x8_t v436 = vclzq_s16(vsubq_s16(v222, (int16x8_t)v223));
      int8x16_t v228 = (int8x16_t)vsubq_s16((int16x8_t)v193, v436);
      int8x16_t v229 = (int8x16_t)vcgtq_s16((int16x8_t)v227, (int16x8_t)v228);
      int8x16_t v230 = vbslq_s8(v229, v228, v227);
      v175.i64[0] = 0x3000300030003;
      v175.i64[1] = 0x3000300030003;
      int8x16_t v231 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v230, v199), (int16x8_t)v175), (int16x8_t)0);
      int16x8_t v232 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v230, v208), (int16x8_t)v175), (int16x8_t)0);
      int16x8_t v233 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v230, v217), (int16x8_t)v175), (int16x8_t)0);
      int16x8_t v234 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v230, v226), (int16x8_t)v175), (int16x8_t)0);
      int16x8_t v235 = vsubq_s16((int16x8_t)v230, (int16x8_t)v231);
      int16x8_t v236 = vsubq_s16((int16x8_t)v230, v233);
      v490.val[1] = (int8x16_t)vsubq_s16((int16x8_t)v230, v234);
      int16x8_t v237 = vaddq_s16(v234, v233);
      int8x16_t v238 = (int8x16_t)vsubq_s16((int16x8_t)v230, v232);
      int8x16_t v239 = (int8x16_t)vceqq_s16(v237, vnegq_s16(vaddq_s16((int16x8_t)v231, v232)));
      v231.i64[0] = 0x4000400040004;
      v231.i64[1] = 0x4000400040004;
      int8x16_t v240 = vbicq_s8(v231, v239);
      int16x8_t v241 = (int16x8_t)vandq_s8(v228, v229);
      v228.i64[0] = 0x7000700070007;
      v228.i64[1] = 0x7000700070007;
      int8x16_t v438 = (int8x16_t)v236;
      int8x16_t v440 = (int8x16_t)v235;
      int8x16_t v447 = v490.val[1];
      int16x8_t v242 = vaddq_s16(vmlaq_s16(vaddq_s16(v241, vaddq_s16((int16x8_t)v240, (int16x8_t)v240)), v235, (int16x8_t)v228), vshlq_n_s16(vaddq_s16(vaddq_s16(v236, (int16x8_t)v238), (int16x8_t)v490.val[1]), 3uLL));
      int8x16_t v80 = v481;
      int16x8_t v148 = v482;
      v243.i64[0] = 0x2000200020002;
      v243.i64[1] = 0x2000200020002;
      int16x8_t v244 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v481, v175), (int16x8_t)v243), v193);
      v193.i64[0] = 0x8000800080008;
      v193.i64[1] = 0x8000800080008;
      int16x8_t v245 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), v193);
      int8x16_t v246 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v481, v193));
      int16x8_t v152 = v485;
      int8x16_t v146 = v486;
      int16x8_t v247 = vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v486, v246), v245), v244), v482, (int16x8_t)v228);
      int16x8_t v149 = v483;
      int16x8_t v151 = v484;
      int8x16_t v248 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(v247, vshlq_n_s16(vaddq_s16(vaddq_s16(v484, v483), v485), 3uLL)), v242).i64[0], 0);
      if (vaddvq_s16((int16x8_t)v248))
      {
        v249.i64[0] = 0x9000900090009;
        v249.i64[1] = 0x9000900090009;
        int8x16_t v433 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v230), v243), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v229, v249), (int16x8_t)vmvnq_s8(v229))), v240);
        v250.i64[0] = 0xF000F000F000FLL;
        v250.i64[1] = 0xF000F000F000FLL;
        v251.i64[0] = -1;
        v251.i64[1] = -1;
        int8x16_t v252 = vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v251, vsubq_s16(v250, v436)), (int16x8_t)v223), v229);
        int8x16_t v253 = (int8x16_t)v181;
        int8x16_t v254 = (int8x16_t)v183;
        int8x16_t v255 = (int8x16_t)v182;
        int8x16_t v256 = (int8x16_t)v222;
        int8x16_t v257 = (int8x16_t)v184;
        int16x8_t v164 = v451;
        int16x8_t v165 = v452;
        int16x8_t v166 = v453;
        int8x16_t v167 = (int8x16_t)v454;
        int8x16_t v431 = vbslq_s8(v248, v188, v464);
        int8x16_t v258 = vbslq_s8(v248, v254, v478);
        int8x16_t v259 = vbslq_s8(v248, v256, v488);
        int16x8_t v148 = (int16x8_t)vbslq_s8(v248, v440, (int8x16_t)v482);
        int16x8_t v149 = (int16x8_t)vbslq_s8(v248, v238, (int8x16_t)v483);
        int16x8_t v151 = (int16x8_t)vbslq_s8(v248, v438, (int8x16_t)v484);
        int16x8_t v152 = (int16x8_t)vbslq_s8(v248, v447, (int8x16_t)v485);
        int8x16_t v260 = vbslq_s8(v248, v252, v489);
        int8x16_t v146 = vbslq_s8(v248, v230, v486);
        int8x16_t v80 = vbslq_s8(v248, v433, v481);
        int8x16_t v479 = vbslq_s8(v248, v257, v479);
        int8x16_t v480 = vbslq_s8(v248, vextq_s8(v167, v167, 8uLL), v480);
        int8x16_t v464 = v431;
        int8x16_t v465 = vbslq_s8(v248, v442, v465);
        int8x16_t v466 = vbslq_s8(v248, v444, v466);
        int8x16_t v467 = vbslq_s8(v248, v189, v467);
        int8x16_t v468 = vbslq_s8(v248, v185, v468);
        int8x16_t v469 = vbslq_s8(v248, v179, v469);
        int8x16_t v470 = vbslq_s8(v248, v187, v470);
        int8x16_t v471 = vbslq_s8(v248, v186, v471);
        int8x16_t v472 = vbslq_s8(v248, v176, v472);
        int8x16_t v473 = vbslq_s8(v248, v177, v473);
        int8x16_t v474 = vbslq_s8(v248, v178, v474);
        int8x16_t v475 = vbslq_s8(v248, v180, v475);
        int8x16_t v476 = vbslq_s8(v248, v253, v476);
        int8x16_t v477 = vbslq_s8(v248, v255, v477);
        int8x16_t v478 = v258;
        int8x16_t v487 = vbslq_s8(v248, v223, v487);
        int8x16_t v488 = v259;
        int8x16_t v489 = v260;
        int16x8_t v482 = v148;
        int16x8_t v483 = v149;
        int16x8_t v484 = v151;
        int16x8_t v485 = v152;
        int8x16_t v486 = v146;
        int8x16_t v481 = v80;
      }
      else
      {
        int16x8_t v164 = v451;
        int16x8_t v165 = v452;
        int16x8_t v166 = v453;
        int8x16_t v167 = (int8x16_t)v454;
      }
      int16x8_t v161 = v461;
      int16x8_t v162 = v462;
      int16x8_t v163 = v463;
    }
    int16x8_t v263 = (int16x8_t)vandq_s8(v489, (int8x16_t)vceqq_s16((int16x8_t)v146, v148));
    int8x16_t v464 = (int8x16_t)vaddq_s16(v263, (int16x8_t)v464);
    int8x16_t v465 = (int8x16_t)vaddq_s16((int16x8_t)v465, v263);
    int8x16_t v466 = (int8x16_t)vaddq_s16((int16x8_t)v466, v263);
    int8x16_t v467 = (int8x16_t)vaddq_s16((int16x8_t)v467, v263);
    int16x8_t v264 = (int16x8_t)vandq_s8(v489, (int8x16_t)vceqq_s16((int16x8_t)v146, v149));
    int8x16_t v468 = (int8x16_t)vaddq_s16((int16x8_t)v468, v264);
    int8x16_t v469 = (int8x16_t)vaddq_s16((int16x8_t)v469, v264);
    int8x16_t v470 = (int8x16_t)vaddq_s16((int16x8_t)v470, v264);
    int8x16_t v471 = (int8x16_t)vaddq_s16((int16x8_t)v471, v264);
    int16x8_t v265 = (int16x8_t)vandq_s8(v489, (int8x16_t)vceqq_s16((int16x8_t)v146, v151));
    int8x16_t v472 = (int8x16_t)vaddq_s16((int16x8_t)v472, v265);
    int8x16_t v473 = (int8x16_t)vaddq_s16((int16x8_t)v473, v265);
    int8x16_t v474 = (int8x16_t)vaddq_s16((int16x8_t)v474, v265);
    int8x16_t v475 = (int8x16_t)vaddq_s16((int16x8_t)v475, v265);
    int8x16_t v266 = vandq_s8(v489, (int8x16_t)vceqq_s16((int16x8_t)v146, v152));
    int8x16_t v476 = (int8x16_t)vaddq_s16((int16x8_t)v476, (int16x8_t)v266);
    int8x16_t v477 = (int8x16_t)vaddq_s16((int16x8_t)v477, (int16x8_t)v266);
    int8x16_t v478 = (int8x16_t)vaddq_s16((int16x8_t)v478, (int16x8_t)v266);
    int8x16_t v479 = (int8x16_t)vaddq_s16((int16x8_t)v479, (int16x8_t)v266);
    v266.i64[0] = 0x8000800080008;
    v266.i64[1] = 0x8000800080008;
    v267.i64[0] = 0x3000300030003;
    v267.i64[1] = 0x3000300030003;
    v268.i64[0] = 0x2000200020002;
    v268.i64[1] = 0x2000200020002;
    int8x16_t v269 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v80, v267), v268);
    v268.i64[0] = 0x10001000100010;
    v268.i64[1] = 0x10001000100010;
    int16x8_t v270 = (int16x8_t)vandq_s8(v269, (int8x16_t)v268);
    v268.i64[0] = 0x7000700070007;
    v268.i64[1] = 0x7000700070007;
    int16x8_t v271 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v146, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v80, v266))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v80, (int16x8_t)v80), v266)), v270), v148, v268), vshlq_n_s16(vaddq_s16(v151, vaddq_s16(v149, v152)), 3uLL));
    int16x8_t v272 = vpaddq_s16(v271, v271);
    if ((unint64_t)(vpaddq_s16(v272, v272).i16[0] + 107) > 0x7FF)
    {
      *(int16x8_t *)a1 = v164;
      *(int16x8_t *)(a1 + 16) = v165;
      *(int16x8_t *)(a1 + 32) = v166;
      *(int8x16_t *)(a1 + 48) = v167;
      *(int16x8_t *)(a1 + 64) = v161;
      *(int16x8_t *)(a1 + 80) = v162;
      *(int16x8_t *)(a1 + 96) = v163;
      *(int16x8_t *)(a1 + 112) = v448;
      *(int16x8_t *)(a1 + 128) = v458;
      *(int16x8_t *)(a1 + 144) = v459;
      *(int16x8_t *)(a1 + 160) = v460;
      *(int16x8_t *)(a1 + 176) = v450;
      uint64x2_t v276 = (int16x8_t *)(a1 + 192);
      char v261 = -1;
      unint64_t result = 256;
      *uint64x2_t v276 = v455;
      v276[1] = v456;
      v276[2] = v457;
      v276[3] = v449;
    }
    else
    {
      int16x8_t v273 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v274 = 8 * (a1 & 7);
      if (v274) {
        uint64_t v275 = *v273 & ~(-1 << v274);
      }
      else {
        uint64_t v275 = 0;
      }
      *a2 = 0;
      uint64_t v277 = ((v146.u16[0] << 20) - 0x100000) & 0xF00000;
      v278.i32[0] = v80.u16[1];
      v278.i32[1] = v80.u16[2];
      int8x8_t v279 = vand_s8((int8x8_t)vshl_u32(v278, (uint32x2_t)0xA00000005), (int8x8_t)0x7C00000003E0);
      __int32 v280 = v279.i32[1];
      __int32 v281 = v279.i32[0] | v80.i8[0] & 0x1F;
      if (!v146.i16[0]) {
        uint64_t v277 = 0;
      }
      unint64_t v282 = (unint64_t)((v146.i8[4] - 1) & 0xF) << 28;
      if (!v146.i16[2]) {
        unint64_t v282 = 0;
      }
      v283.i32[0] = v146.u16[3];
      v283.i32[1] = v146.u16[1];
      int32x2_t v284 = vceqz_s32((int32x2_t)vand_s8(v283, (int8x8_t)0xFFFF0000FFFFLL));
      v285.i64[0] = v284.i32[0];
      v285.i64[1] = v284.i32[1];
      int8x16_t v286 = (int8x16_t)v285;
      v287.i64[0] = -1;
      v287.i64[1] = -1;
      int8x8_t v288 = vand_s8((int8x8_t)vadd_s32((int32x2_t)v283, (int32x2_t)-1), (int8x8_t)0xF0000000FLL);
      v285.i64[0] = v288.u32[0];
      v285.i64[1] = v288.u32[1];
      int8x16_t v289 = vbicq_s8((int8x16_t)vshlq_u64(v285, (uint64x2_t)xmmword_242EA77F0), v286);
      v286.i64[0] = v282;
      v286.i64[1] = v281 | v280 | ((unint64_t)(v80.i8[6] & 0x1F) << 15) | v277;
      int8x16_t v290 = vorrq_s8(v286, v289);
      uint64_t v291 = v480.i64[0];
      unint64_t v292 = vorrq_s8(v290, (int8x16_t)vdupq_laneq_s64((int64x2_t)v290, 1)).u64[0];
      unint64_t v293 = (v292 << v274) | v275;
      if (v274 >= 0x1C)
      {
        *int16x8_t v273 = v293;
        unint64_t v293 = v292 >> (-8 * (a1 & 7u));
      }
      uint64_t v294 = v291;
      v295.i64[0] = WORD2(v291);
      v295.i64[1] = HIWORD(v291);
      v296.i64[0] = 0xFFFFLL;
      v296.i64[1] = 0xFFFFLL;
      uint64x2_t v297 = vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)v295, v296), (uint64x2_t)xmmword_242EA7800);
      unint64_t v298 = v294 | v297.i64[0] | v297.i64[1];
      char v299 = (v274 + 36) & 0x3C;
      *(void *)((char *)v273 + (((v274 + 36) >> 3) & 8)) = v293 | (v298 << v299);
      unint64_t v300 = v274 + 100;
      int8x16_t v301 = (int8x16_t)vsubq_s16((int16x8_t)v486, v482);
      int8x16_t v302 = (int8x16_t)vsubq_s16((int16x8_t)v486, v483);
      int8x16_t v303 = (int8x16_t)vsubq_s16((int16x8_t)v486, v484);
      int8x16_t v304 = (int8x16_t)vsubq_s16((int16x8_t)v486, v485);
      *(uint8x8_t *)v301.i8 = vqmovn_u16((uint16x8_t)v301);
      *(uint8x8_t *)v302.i8 = vqmovn_u16((uint16x8_t)v302);
      *(uint8x8_t *)v303.i8 = vqmovn_u16((uint16x8_t)v303);
      *(uint8x8_t *)v304.i8 = vqmovn_u16((uint16x8_t)v304);
      int16x8_t v305 = (int16x8_t)vtrn1q_s8(v301, v302);
      int16x8_t v306 = (int16x8_t)vtrn2q_s8(v301, v302);
      int8x16_t v307 = vtrn1q_s8(v303, v304);
      int16x8_t v308 = (int16x8_t)vtrn2q_s8(v303, v304);
      int8x16_t v309 = (int8x16_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(v305, (int16x8_t)v307), (int32x4_t)vzip1q_s16(v306, v308)), (int64x2_t)vzip1q_s32((int32x4_t)vtrn2q_s16(v305, (int16x8_t)v307), (int32x4_t)vtrn2q_s16(v306, v308)));
      v307.i64[0] = 0x202020202020202;
      v307.i64[1] = 0x202020202020202;
      int8x16_t v310 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v481.i8, (int16x4_t)0x4000400040004)), v307);
      v307.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v307.i64[1] = 0xF8F8F8F8F8F8F8F8;
      uint8x16_t v311 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8(v287, (uint8x16_t)vorrq_s8(v310, v307)), v309);
      int16x8_t v312 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v310.i8);
      int16x8_t v313 = (int16x8_t)vmovl_high_u8((uint8x16_t)v310);
      uint16x8_t v314 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v311.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v312)), (int16x8_t)vshlq_u16(vmovl_high_u8(v311), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v313)));
      uint16x8_t v315 = (uint16x8_t)vpaddq_s16(v312, v313);
      int32x4_t v316 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v315.i8);
      int32x4_t v317 = (int32x4_t)vmovl_high_u16(v315);
      int32x4_t v318 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v314.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v316)), (int32x4_t)vshlq_u32(vmovl_high_u16(v314), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v317)));
      int32x4_t v319 = vpaddq_s32(v316, v317);
      v295.i64[0] = v318.u32[0];
      v295.i64[1] = v318.u32[1];
      uint64x2_t v320 = (uint64x2_t)v295;
      v295.i64[0] = v318.u32[2];
      v295.i64[1] = v318.u32[3];
      uint64x2_t v321 = (uint64x2_t)v295;
      v295.i64[0] = v319.u32[0];
      v295.i64[1] = v319.u32[1];
      int64x2_t v322 = v295;
      v295.i64[0] = v319.u32[2];
      v295.i64[1] = v319.u32[3];
      int64x2_t v323 = vpaddq_s64((int64x2_t)vshlq_u64(v320, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)), (int64x2_t)vshlq_u64(v321, (uint64x2_t)vzip1q_s64((int64x2_t)0, v295)));
      int64x2_t v324 = vpaddq_s64(v322, v295);
      uint64_t v325 = (v274 + 100) & 0x3C;
      unint64_t v326 = (v323.i64[0] << v325) | (v298 >> -v299);
      if ((unint64_t)(v324.i64[0] + v325) >= 0x40)
      {
        *(void *)((char *)v273 + ((v300 >> 3) & 0x18)) = v326;
        unint64_t v326 = (unint64_t)v323.i64[0] >> -(char)v325;
      }
      unint64_t v327 = v324.i64[0] + v300;
      unint64_t v328 = v326 | (v323.i64[1] << v327);
      if ((v327 & 0x3F) + v324.i64[1] >= 0x40)
      {
        *(void *)((char *)v273 + ((v327 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v328;
        unint64_t v328 = (unint64_t)v323.i64[1] >> -(v327 & 0x3F);
        if ((v327 & 0x3F) == 0) {
          unint64_t v328 = 0;
        }
      }
      unint64_t v329 = v327 + v324.i64[1];
      v330.i64[0] = 0x8000800080008;
      v330.i64[1] = 0x8000800080008;
      v331.i64[0] = -1;
      v331.i64[1] = -1;
      int16x8_t v332 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v481, v330), (int8x16_t)0, 8uLL), v486);
      v333.i64[0] = 0xF000F000F000FLL;
      v333.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v334 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v331, (uint16x8_t)vaddq_s16(v332, v333)), v489);
      int32x4_t v335 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v332.i8);
      int32x4_t v336 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v334.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v335)), (int32x4_t)vmovl_high_u16(v334));
      int32x4_t v337 = vpaddq_s32(v335, (int32x4_t)vmovl_high_u16((uint16x8_t)v332));
      v338.i64[0] = v336.u32[0];
      v338.i64[1] = v336.u32[1];
      uint64x2_t v339 = (uint64x2_t)v338;
      v338.i64[0] = v336.u32[2];
      v338.i64[1] = v336.u32[3];
      uint64x2_t v340 = (uint64x2_t)v338;
      v338.i64[0] = v337.u32[0];
      v338.i64[1] = v337.u32[1];
      int64x2_t v341 = v338;
      v338.i64[0] = v337.u32[2];
      v338.i64[1] = v337.u32[3];
      int64x2_t v342 = vpaddq_s64((int64x2_t)vshlq_u64(v339, (uint64x2_t)vzip1q_s64((int64x2_t)0, v341)), (int64x2_t)vshlq_u64(v340, (uint64x2_t)vzip1q_s64((int64x2_t)0, v338)));
      int64x2_t v343 = vpaddq_s64(v341, v338);
      unint64_t v344 = (v342.i64[0] << v329) | v328;
      if (v343.i64[0] + (v329 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v273 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v344;
        unint64_t v344 = (unint64_t)v342.i64[0] >> -(v329 & 0x3F);
        if ((v329 & 0x3F) == 0) {
          unint64_t v344 = 0;
        }
      }
      unint64_t v345 = v343.i64[0] + v329;
      unint64_t v346 = v344 | (v342.i64[1] << v345);
      if ((v345 & 0x3F) + v343.i64[1] >= 0x40)
      {
        *(void *)((char *)v273 + ((v345 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v346;
        unint64_t v346 = (unint64_t)v342.i64[1] >> -(v345 & 0x3F);
        if ((v345 & 0x3F) == 0) {
          unint64_t v346 = 0;
        }
      }
      unint64_t v347 = v345 + v343.i64[1];
      int16x8_t v348 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v482, 8uLL);
      v349.i64[0] = 0xF000F000F000FLL;
      v349.i64[1] = 0xF000F000F000FLL;
      v350.i64[0] = -1;
      v350.i64[1] = -1;
      uint16x8_t v351 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v350, (uint16x8_t)vaddq_s16(v348, v349)), v464);
      int32x4_t v352 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v348.i8);
      int32x4_t v353 = (int32x4_t)vmovl_high_u16((uint16x8_t)v348);
      int32x4_t v354 = vpaddq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v351.i8), (int32x4_t)vshlq_u32(vmovl_high_u16(v351), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v353)));
      int32x4_t v355 = vpaddq_s32(v352, v353);
      v356.i64[0] = v354.u32[0];
      v356.i64[1] = v354.u32[1];
      uint64x2_t v357 = (uint64x2_t)v356;
      v356.i64[0] = v354.u32[2];
      v356.i64[1] = v354.u32[3];
      uint64x2_t v358 = (uint64x2_t)v356;
      v356.i64[0] = v355.u32[0];
      v356.i64[1] = v355.u32[1];
      int64x2_t v359 = v356;
      v356.i64[0] = v355.u32[2];
      v356.i64[1] = v355.u32[3];
      int64x2_t v360 = vpaddq_s64((int64x2_t)vshlq_u64(v357, (uint64x2_t)vzip1q_s64((int64x2_t)0, v359)), (int64x2_t)vshlq_u64(v358, (uint64x2_t)vzip1q_s64((int64x2_t)0, v356)));
      int64x2_t v361 = vpaddq_s64(v359, v356);
      unint64_t v362 = (v360.i64[0] << v347) | v346;
      if (v361.i64[0] + (v347 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v273 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v362;
        if ((v347 & 0x3F) != 0) {
          unint64_t v362 = (unint64_t)v360.i64[0] >> -(v347 & 0x3F);
        }
        else {
          unint64_t v362 = 0;
        }
      }
      unint64_t v363 = v361.i64[0] + v347;
      uint64_t v364 = (v361.i64[0] + v347) & 0x3F;
      unint64_t v365 = v362 | (v360.i64[1] << v363);
      if ((unint64_t)(v364 + v361.i64[1]) >= 0x40)
      {
        *(void *)((char *)v273 + ((v363 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
        unint64_t v365 = (unint64_t)v360.i64[1] >> -(char)v364;
        if (!v364) {
          unint64_t v365 = 0;
        }
      }
      unint64_t v366 = v363 + v361.i64[1];
      v367.i64[0] = 0xF000F000F000FLL;
      v367.i64[1] = 0xF000F000F000FLL;
      v368.i64[0] = -1;
      v368.i64[1] = -1;
      for (uint64_t i = 16; i != 64; i += 16)
      {
        uint16x8_t v370 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v368, (uint16x8_t)vaddq_s16(v482, v367)), *(int8x16_t *)((char *)&v464 + i));
        int32x4_t v371 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v482.i8);
        int32x4_t v372 = (int32x4_t)vmovl_high_u16((uint16x8_t)v482);
        int32x4_t v373 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v370.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v371)), (int32x4_t)vshlq_u32(vmovl_high_u16(v370), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v372)));
        int32x4_t v374 = vpaddq_s32(v371, v372);
        v375.i64[0] = v373.u32[0];
        v375.i64[1] = v373.u32[1];
        uint64x2_t v376 = (uint64x2_t)v375;
        v375.i64[0] = v373.u32[2];
        v375.i64[1] = v373.u32[3];
        uint64x2_t v377 = (uint64x2_t)v375;
        v375.i64[0] = v374.u32[0];
        v375.i64[1] = v374.u32[1];
        int64x2_t v378 = v375;
        v375.i64[0] = v374.u32[2];
        v375.i64[1] = v374.u32[3];
        int64x2_t v379 = vpaddq_s64((int64x2_t)vshlq_u64(v376, (uint64x2_t)vzip1q_s64((int64x2_t)0, v378)), (int64x2_t)vshlq_u64(v377, (uint64x2_t)vzip1q_s64((int64x2_t)0, v375)));
        int64x2_t v380 = vpaddq_s64(v378, v375);
        unint64_t v381 = (v379.i64[0] << v366) | v365;
        if (v380.i64[0] + (v366 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v273 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v381;
          unint64_t v381 = (unint64_t)v379.i64[0] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v381 = 0;
          }
        }
        unint64_t v382 = v380.i64[0] + v366;
        unint64_t v365 = v381 | (v379.i64[1] << v382);
        if ((v382 & 0x3F) + v380.i64[1] >= 0x40)
        {
          *(void *)((char *)v273 + ((v382 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v379.i64[1] >> -(v382 & 0x3F);
          if ((v382 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v382 + v380.i64[1];
      }
      uint64_t v383 = 0;
      v384.i64[0] = 0xF000F000F000FLL;
      v384.i64[1] = 0xF000F000F000FLL;
      v385.i64[0] = -1;
      v385.i64[1] = -1;
      do
      {
        uint16x8_t v386 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v385, (uint16x8_t)vaddq_s16(v483, v384)), *(int8x16_t *)((char *)&v468 + v383));
        int32x4_t v387 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v483.i8);
        int32x4_t v388 = (int32x4_t)vmovl_high_u16((uint16x8_t)v483);
        int32x4_t v389 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v386.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v387)), (int32x4_t)vshlq_u32(vmovl_high_u16(v386), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v388)));
        int32x4_t v390 = vpaddq_s32(v387, v388);
        v391.i64[0] = v389.u32[0];
        v391.i64[1] = v389.u32[1];
        uint64x2_t v392 = (uint64x2_t)v391;
        v391.i64[0] = v389.u32[2];
        v391.i64[1] = v389.u32[3];
        uint64x2_t v393 = (uint64x2_t)v391;
        v391.i64[0] = v390.u32[0];
        v391.i64[1] = v390.u32[1];
        int64x2_t v394 = v391;
        v391.i64[0] = v390.u32[2];
        v391.i64[1] = v390.u32[3];
        int64x2_t v395 = vpaddq_s64((int64x2_t)vshlq_u64(v392, (uint64x2_t)vzip1q_s64((int64x2_t)0, v394)), (int64x2_t)vshlq_u64(v393, (uint64x2_t)vzip1q_s64((int64x2_t)0, v391)));
        int64x2_t v396 = vpaddq_s64(v394, v391);
        unint64_t v397 = (v395.i64[0] << v366) | v365;
        if (v396.i64[0] + (v366 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v273 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v397;
          unint64_t v397 = (unint64_t)v395.i64[0] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v397 = 0;
          }
        }
        unint64_t v398 = v396.i64[0] + v366;
        unint64_t v365 = v397 | (v395.i64[1] << v398);
        if ((v398 & 0x3F) + v396.i64[1] >= 0x40)
        {
          *(void *)((char *)v273 + ((v398 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v395.i64[1] >> -(v398 & 0x3F);
          if ((v398 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v398 + v396.i64[1];
        v383 += 16;
      }
      while (v383 != 64);
      uint64_t v399 = 0;
      v400.i64[0] = 0xF000F000F000FLL;
      v400.i64[1] = 0xF000F000F000FLL;
      v401.i64[0] = -1;
      v401.i64[1] = -1;
      do
      {
        uint16x8_t v402 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v401, (uint16x8_t)vaddq_s16(v484, v400)), *(int8x16_t *)((char *)&v472 + v399));
        int32x4_t v403 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v484.i8);
        int32x4_t v404 = (int32x4_t)vmovl_high_u16((uint16x8_t)v484);
        int32x4_t v405 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v402.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v403)), (int32x4_t)vshlq_u32(vmovl_high_u16(v402), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v404)));
        int32x4_t v406 = vpaddq_s32(v403, v404);
        v407.i64[0] = v405.u32[0];
        v407.i64[1] = v405.u32[1];
        uint64x2_t v408 = (uint64x2_t)v407;
        v407.i64[0] = v405.u32[2];
        v407.i64[1] = v405.u32[3];
        uint64x2_t v409 = (uint64x2_t)v407;
        v407.i64[0] = v406.u32[0];
        v407.i64[1] = v406.u32[1];
        int64x2_t v410 = v407;
        v407.i64[0] = v406.u32[2];
        v407.i64[1] = v406.u32[3];
        int64x2_t v411 = vpaddq_s64((int64x2_t)vshlq_u64(v408, (uint64x2_t)vzip1q_s64((int64x2_t)0, v410)), (int64x2_t)vshlq_u64(v409, (uint64x2_t)vzip1q_s64((int64x2_t)0, v407)));
        int64x2_t v412 = vpaddq_s64(v410, v407);
        unint64_t v413 = (v411.i64[0] << v366) | v365;
        if (v412.i64[0] + (v366 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v273 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v413;
          unint64_t v413 = (unint64_t)v411.i64[0] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v413 = 0;
          }
        }
        unint64_t v414 = v412.i64[0] + v366;
        unint64_t v365 = v413 | (v411.i64[1] << v414);
        if ((v414 & 0x3F) + v412.i64[1] >= 0x40)
        {
          *(void *)((char *)v273 + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v411.i64[1] >> -(v414 & 0x3F);
          if ((v414 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v414 + v412.i64[1];
        v399 += 16;
      }
      while (v399 != 64);
      uint64_t v415 = 0;
      v416.i64[0] = 0xF000F000F000FLL;
      v416.i64[1] = 0xF000F000F000FLL;
      v417.i64[0] = -1;
      v417.i64[1] = -1;
      do
      {
        uint16x8_t v418 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v417, (uint16x8_t)vaddq_s16(v485, v416)), *(int8x16_t *)((char *)&v476 + v415));
        int32x4_t v419 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v485.i8);
        int32x4_t v420 = (int32x4_t)vmovl_high_u16((uint16x8_t)v485);
        int32x4_t v421 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v418.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v419)), (int32x4_t)vshlq_u32(vmovl_high_u16(v418), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v420)));
        int32x4_t v422 = vpaddq_s32(v419, v420);
        v423.i64[0] = v421.u32[0];
        v423.i64[1] = v421.u32[1];
        uint64x2_t v424 = (uint64x2_t)v423;
        v423.i64[0] = v421.u32[2];
        v423.i64[1] = v421.u32[3];
        uint64x2_t v425 = (uint64x2_t)v423;
        v423.i64[0] = v422.u32[0];
        v423.i64[1] = v422.u32[1];
        int64x2_t v426 = v423;
        v423.i64[0] = v422.u32[2];
        v423.i64[1] = v422.u32[3];
        int64x2_t v427 = vpaddq_s64((int64x2_t)vshlq_u64(v424, (uint64x2_t)vzip1q_s64((int64x2_t)0, v426)), (int64x2_t)vshlq_u64(v425, (uint64x2_t)vzip1q_s64((int64x2_t)0, v423)));
        int64x2_t v428 = vpaddq_s64(v426, v423);
        unint64_t v429 = (v427.i64[0] << v366) | v365;
        if (v428.i64[0] + (v366 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v273 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v429;
          unint64_t v429 = (unint64_t)v427.i64[0] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v429 = 0;
          }
        }
        unint64_t v430 = v428.i64[0] + v366;
        unint64_t v365 = v429 | (v427.i64[1] << v430);
        if ((v430 & 0x3F) + v428.i64[1] >= 0x40)
        {
          *(void *)((char *)v273 + ((v430 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v427.i64[1] >> -(v430 & 0x3F);
          if ((v430 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v430 + v428.i64[1];
        v415 += 16;
      }
      while (v415 != 64);
      if ((v366 & 0x3F) != 0) {
        *(void *)((char *)v273 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
      }
      unint64_t result = (v366 - v274 + 7) >> 3;
      char v261 = *a2 | (result - 1);
    }
  }
  else
  {
    *(void *)a1 = a3->i64[0];
    char v261 = 7;
    unint64_t result = 8;
  }
  *a2 = v261;
  return result;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(unint64_t result, uint64_t a2, unint64_t a3, char *a4, int a5, int a6)
{
  unint64_t v9 = a3;
  int16x8_t v11 = (int16x8_t *)result;
  if (a5 >= 8) {
    unsigned int v12 = 8;
  }
  else {
    unsigned int v12 = a5;
  }
  if (a6 >= 4) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = a6;
  }
  if (v12 && v13)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(a3, a4, (int16x8_t *)result, a2, v12, v13);
    v9 += result;
  }
  else
  {
    *a4 = 0;
  }
  int16x8_t v14 = a4 + 1;
  if (a5 <= 8) {
    int v15 = 8;
  }
  else {
    int v15 = a5;
  }
  unsigned int v16 = v15 - 8;
  if (v16 >= 8) {
    int v17 = 8;
  }
  else {
    int v17 = v16;
  }
  if (v17 && v13)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v14, v11 + 4, a2, v17, v13);
    v9 += result;
  }
  else
  {
    char *v14 = 0;
  }
  uint64_t v18 = 4 * a2;
  int16x8_t v19 = a4 + 2;
  if (a6 <= 4) {
    int v20 = 4;
  }
  else {
    int v20 = a6;
  }
  unsigned int v21 = v20 - 4;
  if (v21 >= 4) {
    int v22 = 4;
  }
  else {
    int v22 = v21;
  }
  if (v12 && v22)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v19, (int16x8_t *)((char *)v11 + v18), a2, v12, v22);
    v9 += result;
    int16x8_t v23 = a4 + 3;
    if (!v17) {
      goto LABEL_34;
    }
  }
  else
  {
    char *v19 = 0;
    int16x8_t v23 = a4 + 3;
    if (!v17) {
      goto LABEL_34;
    }
  }
  if (v22)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v23, (int16x8_t *)((char *)v11 + v18 + 64), a2, v17, v22);
    v9 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int16x8_t v23 = 0;
LABEL_35:
  int16x8_t v24 = a4 + 4;
  if (a6 <= 8) {
    int v25 = 8;
  }
  else {
    int v25 = a6;
  }
  unsigned int v26 = v25 - 8;
  if (v26 >= 4) {
    int v27 = 4;
  }
  else {
    int v27 = v26;
  }
  if (v12 && v27)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v24, (int16x8_t *)((char *)v11 + 8 * a2), a2, v12, v27);
    v9 += result;
    int16x8_t v28 = a4 + 5;
    if (!v17) {
      goto LABEL_48;
    }
  }
  else
  {
    char *v24 = 0;
    int16x8_t v28 = a4 + 5;
    if (!v17) {
      goto LABEL_48;
    }
  }
  if (v27)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v28, (int16x8_t *)((char *)v11 + 8 * a2 + 64), a2, v17, v27);
    v9 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int16x8_t v28 = 0;
LABEL_49:
  int16x8_t v29 = a4 + 6;
  if (a6 <= 12) {
    int v30 = 12;
  }
  else {
    int v30 = a6;
  }
  unsigned int v31 = v30 - 12;
  if (v31 >= 4) {
    int v32 = 4;
  }
  else {
    int v32 = v31;
  }
  if (v12 && v32)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v29, (int16x8_t *)((char *)v11 + 12 * a2), a2, v12, v32);
    v9 += result;
    int16x8_t v33 = a4 + 7;
    if (!v17) {
      goto LABEL_64;
    }
  }
  else
  {
    *int16x8_t v29 = 0;
    int16x8_t v33 = a4 + 7;
    if (!v17)
    {
LABEL_64:
      *int16x8_t v33 = 0;
      return result;
    }
  }
  if (!v32) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v33, (int16x8_t *)((char *)v11 + 12 * a2 + 64), a2, v17, v32);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  int16x8_t v7 = (_OWORD *)(a3 + 2 * a4);
  int16x8_t v8 = *(int16x8_t *)(a3 + 48);
  int16x8_t v9 = *(int16x8_t *)(a3 + 32);
  int16x8_t v10 = *(int16x8_t *)(a3 + 16);
  int16x8_t v11 = *(int16x8_t *)(a3 + a4);
  int16x8_t v12 = *(int16x8_t *)(a3 + a4 + 32);
  int16x8_t v13 = *(int16x8_t *)(a3 + a4 + 48);
  int8x16_t v15 = *(int8x16_t *)v7;
  int8x16_t v16 = *((int8x16_t *)v7 + 1);
  int16x8_t v17 = *((int16x8_t *)v7 + 2);
  int16x8_t v18 = *((int16x8_t *)v7 + 3);
  int16x8_t v14 = (int16x8_t *)((char *)v7 + a4);
  int16x8_t v444 = *v14;
  int16x8_t v446 = v14[1];
  int16x8_t v447 = v14[2];
  int16x8_t v448 = v14[3];
  int16x8_t v19 = (int16x8_t)vdupq_lane_s64(*(void *)a3, 0);
  int16x8_t v441 = *(int16x8_t *)a3;
  int16x8_t v442 = v11;
  int8x16_t v443 = *(int8x16_t *)(a3 + a4 + 16);
  int8x16_t v449 = (int8x16_t)vsubq_s16(*(int16x8_t *)a3, v19);
  int8x16_t v450 = (int8x16_t)vsubq_s16(v11, v19);
  int8x16_t v451 = (int8x16_t)vsubq_s16(v10, v19);
  int8x16_t v452 = (int8x16_t)vsubq_s16((int16x8_t)v443, v19);
  int16x8_t v20 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v22 = vpmaxq_s16(v20, v20);
  int16x8_t v23 = vpminq_s16(v21, v21);
  int16x8_t v24 = vzip1q_s16(v22, v23);
  v25.i64[0] = 0x10001000100010;
  v25.i64[1] = 0x10001000100010;
  int16x8_t v26 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v24)), (int8x16_t)vceqzq_s16(v24));
  int8x16_t v453 = (int8x16_t)vsubq_s16((int16x8_t)v15, v19);
  int8x16_t v454 = (int8x16_t)vsubq_s16(v444, v19);
  int16x8_t v430 = (int16x8_t)v15;
  int16x8_t v432 = (int16x8_t)v16;
  int16x8_t v27 = vsubq_s16((int16x8_t)v16, v19);
  int16x8_t v28 = vminq_s16(vminq_s16((int16x8_t)v453, (int16x8_t)v454), v27);
  int8x16_t v455 = (int8x16_t)v27;
  int8x16_t v456 = (int8x16_t)vsubq_s16(v446, v19);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v22, (int16x8_t)v15);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v30 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v453, (int16x8_t)v454), v27), (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v31 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v28, (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v32 = vpmaxq_s16(v30, v30);
  int16x8_t v33 = vpminq_s16(v31, v31);
  int16x8_t v34 = vmaxq_s16(v29, v32);
  int16x8_t v35 = vminq_s16(vminq_s16(v23, (int16x8_t)v15), v33);
  int16x8_t v36 = vzip1q_s16(v32, v33);
  int16x8_t v37 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v36)), (int8x16_t)vceqzq_s16(v36));
  int8x16_t v457 = (int8x16_t)vsubq_s16(v9, v19);
  int8x16_t v458 = (int8x16_t)vsubq_s16(v12, v19);
  int16x8_t v435 = v9;
  int16x8_t v437 = v12;
  int16x8_t v438 = v8;
  int16x8_t v38 = vsubq_s16(v8, v19);
  int16x8_t v39 = vminq_s16(vminq_s16((int16x8_t)v457, (int16x8_t)v458), v38);
  int16x8_t v434 = v13;
  int8x16_t v459 = (int8x16_t)v38;
  int8x16_t v460 = (int8x16_t)vsubq_s16(v13, v19);
  int16x8_t v40 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v457, (int16x8_t)v458), v38), (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v39, (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v42 = vpmaxq_s16(v40, v40);
  int16x8_t v43 = vpminq_s16(v41, v41);
  int16x8_t v44 = vmaxq_s16(v34, v42);
  int16x8_t v45 = vminq_s16(v35, v43);
  int16x8_t v46 = vzip1q_s16(v42, v43);
  int16x8_t v47 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v46)), (int8x16_t)vceqzq_s16(v46));
  int8x16_t v461 = (int8x16_t)vsubq_s16(v17, v19);
  int8x16_t v462 = (int8x16_t)vsubq_s16(v447, v19);
  int8x16_t v465 = (int8x16_t)v19;
  int16x8_t v439 = v17;
  int16x8_t v440 = v18;
  int8x16_t v463 = (int8x16_t)vsubq_s16(v18, v19);
  int8x16_t v464 = (int8x16_t)vsubq_s16(v448, v19);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vmaxq_s16(v44, v50);
  int16x8_t v53 = vminq_s16(v45, v51);
  int16x8_t v54 = vzip1q_s16(v50, v51);
  int16x8_t v55 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v54)), (int8x16_t)vceqzq_s16(v54));
  int16x8_t v56 = vpmaxq_s16(v26, v26);
  int16x8_t v57 = vpmaxq_s16(v37, v37);
  int16x8_t v58 = vpmaxq_s16(v47, v47);
  int16x8_t v59 = vpmaxq_s16(v55, v55);
  int8x16_t v60 = (int8x16_t)vmaxq_s16(vmaxq_s16(v56, v57), vmaxq_s16(v58, v59));
  int16x8_t v61 = vclzq_s16(vsubq_s16(v52, v53));
  v9.i64[0] = 0xF000F000F000FLL;
  v9.i64[1] = 0xF000F000F000FLL;
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  int16x8_t v63 = vshlq_s16(v62, vsubq_s16(v9, v61));
  int8x16_t v472 = (int8x16_t)v53;
  int8x16_t v473 = (int8x16_t)v52;
  int8x16_t v64 = (int8x16_t)vsubq_s16((int16x8_t)v25, v61);
  int8x16_t v65 = (int8x16_t)vcgtq_s16((int16x8_t)v60, (int16x8_t)v64);
  int16x8_t v66 = (int16x8_t)vbslq_s8(v65, v64, v60);
  int8x16_t v474 = vandq_s8((int8x16_t)vsubq_s16(v63, v53), v65);
  v15.i64[0] = 0x8000800080008;
  v15.i64[1] = 0x8000800080008;
  int8x16_t v67 = vorrq_s8((int8x16_t)0, vandq_s8(v65, v15));
  v68.i64[0] = 0x3000300030003;
  v68.i64[1] = 0x3000300030003;
  int16x8_t v69 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v57), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v58), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v468 = vsubq_s16(v66, v69);
  int16x8_t v469 = vsubq_s16(v66, v70);
  int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v59), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v470 = vsubq_s16(v66, v71);
  int8x16_t v471 = (int8x16_t)v66;
  int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v56), (int16x8_t)v68), (int16x8_t)0);
  v16.i64[0] = 0x4000400040004;
  v16.i64[1] = 0x4000400040004;
  int8x16_t v73 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16(v66), v68), v67), vbicq_s8(v16, (int8x16_t)vceqq_s16(vaddq_s16(v71, v70), vnegq_s16(vaddq_s16(v72, v69)))));
  int8x16_t v466 = v73;
  int16x8_t v467 = vsubq_s16(v66, v72);
  if (vmaxvq_s16(v66))
  {
    int16x8_t v74 = vsubq_s16((int16x8_t)v449, (int16x8_t)vqtbl1q_s8(v449, (int8x16_t)xmmword_242EA77A0));
    v75.i64[0] = 0x8000800080008000;
    v75.i64[1] = 0x8000800080008000;
    v76.i64[0] = 0x8000800080008000;
    v76.i64[1] = 0x8000800080008000;
    int16x8_t v77 = vsubq_s16((int16x8_t)v450, (int16x8_t)vqtbl1q_s8(v450, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v78 = vsubq_s16((int16x8_t)v451, (int16x8_t)vqtbl1q_s8(v451, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v79 = vsubq_s16((int16x8_t)v452, (int16x8_t)vqtbl1q_s8(v452, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v427 = v67;
    int8x16_t v80 = (int8x16_t)vsubq_s16((int16x8_t)v454, (int16x8_t)vqtbl1q_s8(v454, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v81 = (int8x16_t)vsubq_s16((int16x8_t)v456, (int16x8_t)vqtbl1q_s8(v456, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v82 = (int8x16_t)vsubq_s16((int16x8_t)v457, (int16x8_t)vqtbl1q_s8(v457, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v83 = (int8x16_t)vsubq_s16((int16x8_t)v458, (int16x8_t)vqtbl1q_s8(v458, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v84 = (int8x16_t)vsubq_s16((int16x8_t)v459, (int16x8_t)vqtbl1q_s8(v459, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v460, (int16x8_t)vqtbl1q_s8(v460, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v86 = vsubq_s16((int16x8_t)v462, (int16x8_t)vqtbl1q_s8(v462, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v87 = (int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v74, v77), v78), v79);
    int8x16_t v421 = (int8x16_t)v74;
    int8x16_t v422 = (int8x16_t)v77;
    int16x8_t v88 = vminq_s16(v74, v77);
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v463, (int16x8_t)vqtbl1q_s8(v463, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v455, (int16x8_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v453, (int16x8_t)vqtbl1q_s8(v453, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v461, (int16x8_t)vqtbl1q_s8(v461, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v423 = (int8x16_t)v79;
    int8x16_t v425 = (int8x16_t)v78;
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_242EA77B0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(v88, v78), v79), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vmaxq_s16(v95, v75);
    int16x8_t v98 = vminq_s16(v96, v76);
    int16x8_t v99 = vzip1q_s16(v95, v96);
    int16x8_t v100 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v99)), (int8x16_t)vceqzq_s16(v99));
    int16x8_t v101 = vpmaxq_s16(v100, v100);
    int16x8_t v102 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v103 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v104 = vpmaxq_s16(v102, v102);
    int16x8_t v105 = vpminq_s16(v103, v103);
    int16x8_t v106 = vmaxq_s16(v97, v104);
    int16x8_t v107 = vminq_s16(v98, v105);
    int16x8_t v108 = vzip1q_s16(v104, v105);
    int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v108)), (int8x16_t)vceqzq_s16(v108));
    int16x8_t v110 = vpmaxq_s16(v109, v109);
    int16x8_t v111 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v112 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v113 = vpmaxq_s16(v111, v111);
    int16x8_t v114 = vpminq_s16(v112, v112);
    int16x8_t v115 = vmaxq_s16(v106, v113);
    int16x8_t v116 = vminq_s16(v107, v114);
    int16x8_t v117 = vzip1q_s16(v113, v114);
    int16x8_t v118 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v117)), (int8x16_t)vceqzq_s16(v117));
    int8x16_t v119 = (int8x16_t)vpmaxq_s16(v118, v118);
    int8x16_t v415 = (int8x16_t)vsubq_s16((int16x8_t)v464, (int16x8_t)vqtbl1q_s8(v464, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v120 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v121 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v122 = vpmaxq_s16(v120, v120);
    int16x8_t v123 = vpminq_s16(v121, v121);
    int16x8_t v124 = vmaxq_s16(v115, v122);
    int16x8_t v125 = vminq_s16(v116, v123);
    int16x8_t v126 = vzip1q_s16(v122, v123);
    int16x8_t v127 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v126)), (int8x16_t)vceqzq_s16(v126));
    int16x8_t v128 = vpmaxq_s16(v127, v127);
    int8x16_t v129 = (int8x16_t)vmaxq_s16(vmaxq_s16(v101, v110), vmaxq_s16((int16x8_t)v119, v128));
    int8x16_t v419 = (int8x16_t)v86;
    int8x16_t v420 = (int8x16_t)v124;
    int8x16_t v130 = (int8x16_t)v125;
    int16x8_t v131 = vclzq_s16(vsubq_s16(v124, v125));
    int8x16_t v132 = (int8x16_t)vsubq_s16((int16x8_t)v25, v131);
    int8x16_t v133 = (int8x16_t)vcgtq_s16((int16x8_t)v129, (int16x8_t)v132);
    int8x16_t v134 = vbslq_s8(v133, v132, v129);
    int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v101), (int16x8_t)v68), (int16x8_t)0);
    int8x16_t v136 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v110), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v137 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, (int16x8_t)v119), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v138 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v128), (int16x8_t)v68), (int16x8_t)0);
    v119.i64[0] = 0x4000400040004;
    v119.i64[1] = 0x4000400040004;
    int8x16_t v139 = vbicq_s8(v119, (int8x16_t)vceqq_s16(vaddq_s16(v138, v137), vnegq_s16(vaddq_s16(v135, (int16x8_t)v136))));
    v119.i64[0] = 0x18001800180018;
    v119.i64[1] = 0x18001800180018;
    int8x16_t v140 = vbslq_s8(v133, v119, v25);
    int8x16_t v141 = (int8x16_t)vsubq_s16((int16x8_t)v134, v135);
    int8x16_t v416 = (int8x16_t)vsubq_s16((int16x8_t)v134, (int16x8_t)v136);
    int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v134, v137);
    int8x16_t v418 = (int8x16_t)vsubq_s16((int16x8_t)v134, v138);
    v135.i64[0] = 0x7000700070007;
    v135.i64[1] = 0x7000700070007;
    v136.i64[0] = 0x8000800080008;
    v136.i64[1] = 0x8000800080008;
    int16x8_t v142 = (int16x8_t)vandq_s8(v427, v136);
    int16x8_t v143 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v136);
    int16x8_t v144 = (int16x8_t)vandq_s8(v73, v68);
    v145.i64[0] = 0x2000200020002;
    v145.i64[1] = 0x2000200020002;
    int16x8_t v146 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v144, v145), v25);
    int8x16_t v147 = (int8x16_t)vceqzq_s16(v142);
    int8x16_t v148 = v471;
    int16x8_t v149 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v147), v143), v146);
    int16x8_t v150 = v467;
    int16x8_t v151 = v468;
    int16x8_t v153 = v469;
    int16x8_t v152 = v470;
    int8x16_t v154 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(vmlaq_s16(v149, v467, v135), vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v134, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v140 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v139, (int16x8_t)v139)), (int16x8_t)v141, v135), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v417, (int16x8_t)v416), (int16x8_t)v418), 3uLL))).i64[0], 0);
    int v155 = (unsigned __int16)vaddvq_s16((int16x8_t)v154);
    BOOL v157 = a5 < 4 || a6 < 2;
    if (v155)
    {
      v158.i64[0] = 0x3000300030003;
      v158.i64[1] = 0x3000300030003;
      int8x16_t v159 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v134), v158), v140), v139);
      v160.i64[0] = 0xF000F000F000FLL;
      v160.i64[1] = 0xF000F000F000FLL;
      int8x16_t v449 = vbslq_s8(v154, v421, v449);
      int8x16_t v450 = vbslq_s8(v154, v422, v450);
      v161.i64[0] = -1;
      v161.i64[1] = -1;
      int8x16_t v451 = vbslq_s8(v154, v425, v451);
      int8x16_t v452 = vbslq_s8(v154, v423, v452);
      int8x16_t v453 = vbslq_s8(v154, v91, v453);
      int8x16_t v454 = vbslq_s8(v154, v80, v454);
      int8x16_t v455 = vbslq_s8(v154, v90, v455);
      int8x16_t v456 = vbslq_s8(v154, v81, v456);
      int8x16_t v457 = vbslq_s8(v154, v82, v457);
      int8x16_t v458 = vbslq_s8(v154, v83, v458);
      int8x16_t v459 = vbslq_s8(v154, v84, v459);
      int8x16_t v460 = vbslq_s8(v154, v85, v460);
      int8x16_t v461 = vbslq_s8(v154, v92, v461);
      int8x16_t v462 = vbslq_s8(v154, v419, v462);
      int8x16_t v463 = vbslq_s8(v154, v89, v463);
      int8x16_t v464 = vbslq_s8(v154, v415, v464);
      int16x8_t v150 = (int16x8_t)vbslq_s8(v154, v141, (int8x16_t)v467);
      int16x8_t v151 = (int16x8_t)vbslq_s8(v154, v416, (int8x16_t)v468);
      int16x8_t v467 = v150;
      int16x8_t v468 = v151;
      int16x8_t v153 = (int16x8_t)vbslq_s8(v154, v417, (int8x16_t)v469);
      int16x8_t v152 = (int16x8_t)vbslq_s8(v154, v418, (int8x16_t)v470);
      int16x8_t v469 = v153;
      int16x8_t v470 = v152;
      int8x16_t v473 = vbslq_s8(v154, v420, v473);
      int8x16_t v474 = vbslq_s8(v154, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v161, vsubq_s16(v160, v131)), (int16x8_t)v130), v133), v474);
      int8x16_t v148 = vbslq_s8(v154, v134, v471);
      int8x16_t v471 = v148;
      int8x16_t v472 = vbslq_s8(v154, v130, v472);
      int8x16_t v73 = vbslq_s8(v154, v159, v466);
      int8x16_t v465 = vbslq_s8(v154, (int8x16_t)vsubq_s16((int16x8_t)v465, (int16x8_t)vqtbl1q_s8(v465, (int8x16_t)xmmword_242EA77A0)), v465);
      int8x16_t v466 = v73;
    }
    int16x8_t v162 = v441;
    int16x8_t v163 = v442;
    int16x8_t v164 = v10;
    int8x16_t v165 = v443;
    if (!v157)
    {
      int16x8_t v166 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA77C0);
      int8x16_t v426 = (int8x16_t)vsubq_s16(v10, v166);
      int16x8_t v428 = vsubq_s16(v441, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7710));
      int16x8_t v167 = vsubq_s16((int16x8_t)v443, v166);
      v475.val[0] = (int8x16_t)v430;
      v475.val[1] = (int8x16_t)v444;
      v475.val[2] = (int8x16_t)v432;
      v475.val[3].i64[0] = v446.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v430, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v424 = (int8x16_t)vsubq_s16(v444, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7750));
      int16x8_t v169 = vsubq_s16(v432, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77C0));
      int16x8_t v170 = vsubq_s16(v446, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7760));
      v475.val[0] = (int8x16_t)v435;
      v475.val[1] = (int8x16_t)v437;
      v475.val[2] = (int8x16_t)v438;
      v475.val[3].i64[0] = v434.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int16x8_t v171 = (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7720);
      int16x8_t v172 = vsubq_s16(v435, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77D0));
      int16x8_t v173 = vsubq_s16(v437, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77E0));
      int8x16_t v174 = (int8x16_t)vsubq_s16(v438, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v442, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7720));
      v475.val[0] = (int8x16_t)vsubq_s16(v434, v171);
      int8x16_t v176 = (int8x16_t)v169;
      v476.val[0] = (int8x16_t)v439;
      v476.val[1] = (int8x16_t)v447;
      v476.val[2] = (int8x16_t)v440;
      v476.val[3].i64[0] = v448.i64[0];
      v476.val[3].i64[1] = v443.i64[1];
      int16x8_t v177 = (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7720);
      int8x16_t v178 = (int8x16_t)vsubq_s16(v439, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA77D0));
      int8x16_t v179 = (int8x16_t)vsubq_s16(v447, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7780));
      v476.val[2] = (int8x16_t)vsubq_s16(v440, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7710));
      int8x16_t v180 = (int8x16_t)vsubq_s16(v448, v177);
      v181.i64[1] = v428.i64[1];
      v181.i64[0] = v167.i64[1];
      v167.i64[1] = v428.i64[0];
      int8x16_t v436 = (int8x16_t)v167;
      int16x8_t v182 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v183 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v184 = vpmaxq_s16(v182, v182);
      int16x8_t v185 = vpminq_s16(v183, v183);
      v186.i64[0] = 0x8000800080008000;
      v186.i64[1] = 0x8000800080008000;
      int16x8_t v187 = vmaxq_s16(v184, v186);
      v188.i64[0] = 0x8000800080008000;
      v188.i64[1] = 0x8000800080008000;
      int16x8_t v189 = vminq_s16(v185, v188);
      int16x8_t v190 = vzip1q_s16(v184, v185);
      v476.val[1].i64[0] = 0x10001000100010;
      v476.val[1].i64[1] = 0x10001000100010;
      int16x8_t v191 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v190)), (int8x16_t)vceqzq_s16(v190));
      int16x8_t v192 = vpmaxq_s16(v191, v191);
      int8x16_t v445 = (int8x16_t)v170;
      int16x8_t v193 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v194 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v195 = vpmaxq_s16(v193, v193);
      int16x8_t v196 = vpminq_s16(v194, v194);
      int16x8_t v197 = vmaxq_s16(v187, v195);
      int16x8_t v198 = vminq_s16(v189, v196);
      int16x8_t v199 = vzip1q_s16(v195, v196);
      int16x8_t v200 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v199)), (int8x16_t)vceqzq_s16(v199));
      int16x8_t v201 = vpmaxq_s16(v200, v200);
      int8x16_t v433 = (int8x16_t)v173;
      int8x16_t v202 = (int8x16_t)v172;
      int8x16_t v429 = v476.val[2];
      int8x16_t v431 = v475.val[0];
      int16x8_t v203 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v204 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v205 = vpmaxq_s16(v203, v203);
      int16x8_t v206 = vpminq_s16(v204, v204);
      int16x8_t v207 = vmaxq_s16(v197, v205);
      int16x8_t v208 = vminq_s16(v198, v206);
      int16x8_t v209 = vzip1q_s16(v205, v206);
      int16x8_t v210 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v209)), (int8x16_t)vceqzq_s16(v209));
      int16x8_t v211 = vpmaxq_s16(v210, v210);
      int16x8_t v212 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v213 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v214 = vpmaxq_s16(v212, v212);
      v476.val[0] = (int8x16_t)vpminq_s16(v213, v213);
      int16x8_t v215 = vmaxq_s16(v207, v214);
      int8x16_t v216 = (int8x16_t)vminq_s16(v208, (int16x8_t)v476.val[0]);
      int16x8_t v217 = vzip1q_s16(v214, (int16x8_t)v476.val[0]);
      int16x8_t v218 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v217)), (int8x16_t)vceqzq_s16(v217));
      v476.val[0] = (int8x16_t)vpmaxq_s16(v218, v218);
      int8x16_t v219 = (int8x16_t)vmaxq_s16(vmaxq_s16(v192, v201), vmaxq_s16(v211, (int16x8_t)v476.val[0]));
      int16x8_t v220 = vclzq_s16(vsubq_s16(v215, (int16x8_t)v216));
      v476.val[3] = (int8x16_t)vsubq_s16((int16x8_t)v476.val[1], v220);
      int8x16_t v221 = (int8x16_t)vcgtq_s16((int16x8_t)v219, (int16x8_t)v476.val[3]);
      int8x16_t v222 = vbslq_s8(v221, v476.val[3], v219);
      v223.i64[0] = 0x3000300030003;
      v223.i64[1] = 0x3000300030003;
      int16x8_t v224 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v192), v223), (int16x8_t)0);
      int8x16_t v225 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v201), v223), (int16x8_t)0);
      int16x8_t v226 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v211), v223), (int16x8_t)0);
      int16x8_t v227 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, (int16x8_t)v476.val[0]), v223), (int16x8_t)0);
      int8x16_t v228 = (int8x16_t)vsubq_s16((int16x8_t)v222, v224);
      int16x8_t v229 = vsubq_s16((int16x8_t)v222, (int16x8_t)v225);
      int8x16_t v230 = (int8x16_t)vsubq_s16((int16x8_t)v222, v226);
      int8x16_t v231 = (int8x16_t)vsubq_s16((int16x8_t)v222, v227);
      int8x16_t v232 = (int8x16_t)vceqq_s16(vaddq_s16(v227, v226), vnegq_s16(vaddq_s16(v224, (int16x8_t)v225)));
      v225.i64[0] = 0x4000400040004;
      v225.i64[1] = 0x4000400040004;
      int8x16_t v233 = vbicq_s8(v225, v232);
      v169.i64[0] = 0x7000700070007;
      v169.i64[1] = 0x7000700070007;
      v476.val[3] = (int8x16_t)vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v476.val[3], v221), vaddq_s16((int16x8_t)v233, (int16x8_t)v233)), (int16x8_t)v228, v169), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v230, v229), (int16x8_t)v231), 3uLL));
      int8x16_t v73 = v466;
      int16x8_t v150 = v467;
      int16x8_t v234 = (int16x8_t)vandq_s8(v466, (int8x16_t)v223);
      v235.i64[0] = 0x2000200020002;
      v235.i64[1] = 0x2000200020002;
      int16x8_t v236 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v234, (int16x8_t)v235), v476.val[1]);
      v476.val[1].i64[0] = 0x8000800080008;
      v476.val[1].i64[1] = 0x8000800080008;
      int16x8_t v237 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v476.val[1]);
      v475.val[0] = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v466, v476.val[1]));
      int16x8_t v152 = v470;
      int8x16_t v148 = v471;
      int16x8_t v238 = vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v475.val[0]), v237), v236), v467, v169);
      int16x8_t v151 = v468;
      int16x8_t v153 = v469;
      int8x16_t v239 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(v238, vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), (int16x8_t)v476.val[3]).i64[0], 0);
      if (vaddvq_s16((int16x8_t)v239))
      {
        int8x16_t v240 = (int8x16_t)v229;
        int8x16_t v241 = v202;
        v242.i64[0] = 0x9000900090009;
        v242.i64[1] = 0x9000900090009;
        int8x16_t v243 = (int8x16_t)v215;
        int8x16_t v244 = vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v222), v235), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v221, v242), (int16x8_t)vmvnq_s8(v221)));
        v242.i64[0] = -1;
        v242.i64[1] = -1;
        v245.i64[0] = 0xF000F000F000FLL;
        v245.i64[1] = 0xF000F000F000FLL;
        int8x16_t v246 = vbslq_s8(v239, v243, v473);
        int16x8_t v150 = (int16x8_t)vbslq_s8(v239, v228, (int8x16_t)v467);
        int16x8_t v151 = (int16x8_t)vbslq_s8(v239, v240, (int8x16_t)v468);
        int16x8_t v153 = (int16x8_t)vbslq_s8(v239, v230, (int8x16_t)v469);
        int16x8_t v152 = (int16x8_t)vbslq_s8(v239, v231, (int8x16_t)v470);
        int8x16_t v148 = vbslq_s8(v239, v222, v471);
        int8x16_t v73 = vbslq_s8(v239, vorrq_s8(v244, v233), v466);
        int8x16_t v464 = vbslq_s8(v239, v180, v464);
        int8x16_t v465 = vbslq_s8(v239, vextq_s8(v443, v443, 8uLL), v465);
        int8x16_t v449 = vbslq_s8(v239, v181, v449);
        int8x16_t v450 = vbslq_s8(v239, v175, v450);
        int8x16_t v451 = vbslq_s8(v239, v426, v451);
        int8x16_t v452 = vbslq_s8(v239, v436, v452);
        int8x16_t v453 = vbslq_s8(v239, v168, v453);
        int8x16_t v454 = vbslq_s8(v239, v424, v454);
        int8x16_t v455 = vbslq_s8(v239, v176, v455);
        int8x16_t v456 = vbslq_s8(v239, v445, v456);
        int8x16_t v457 = vbslq_s8(v239, v241, v457);
        int8x16_t v458 = vbslq_s8(v239, v433, v458);
        int8x16_t v459 = vbslq_s8(v239, v174, v459);
        int8x16_t v460 = vbslq_s8(v239, v431, v460);
        int8x16_t v461 = vbslq_s8(v239, v178, v461);
        int8x16_t v462 = vbslq_s8(v239, v179, v462);
        int8x16_t v463 = vbslq_s8(v239, v429, v463);
        int8x16_t v472 = vbslq_s8(v239, v216, v472);
        int8x16_t v473 = v246;
        int8x16_t v474 = vbslq_s8(v239, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v242, vsubq_s16(v245, v220)), (int16x8_t)v216), v221), v474);
        int16x8_t v467 = v150;
        int16x8_t v468 = v151;
        int16x8_t v469 = v153;
        int16x8_t v470 = v152;
        int8x16_t v471 = v148;
        int8x16_t v466 = v73;
      }
    }
    int16x8_t v247 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v150));
    int8x16_t v449 = (int8x16_t)vaddq_s16(v247, (int16x8_t)v449);
    int8x16_t v450 = (int8x16_t)vaddq_s16((int16x8_t)v450, v247);
    int8x16_t v451 = (int8x16_t)vaddq_s16((int16x8_t)v451, v247);
    int8x16_t v452 = (int8x16_t)vaddq_s16((int16x8_t)v452, v247);
    int16x8_t v248 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v151));
    int8x16_t v453 = (int8x16_t)vaddq_s16((int16x8_t)v453, v248);
    int8x16_t v454 = (int8x16_t)vaddq_s16((int16x8_t)v454, v248);
    int8x16_t v455 = (int8x16_t)vaddq_s16((int16x8_t)v455, v248);
    int8x16_t v456 = (int8x16_t)vaddq_s16((int16x8_t)v456, v248);
    int16x8_t v249 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v153));
    int8x16_t v457 = (int8x16_t)vaddq_s16((int16x8_t)v457, v249);
    int8x16_t v458 = (int8x16_t)vaddq_s16((int16x8_t)v458, v249);
    int8x16_t v459 = (int8x16_t)vaddq_s16((int16x8_t)v459, v249);
    int8x16_t v460 = (int8x16_t)vaddq_s16((int16x8_t)v460, v249);
    int8x16_t v250 = vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v152));
    int8x16_t v461 = (int8x16_t)vaddq_s16((int16x8_t)v461, (int16x8_t)v250);
    int8x16_t v462 = (int8x16_t)vaddq_s16((int16x8_t)v462, (int16x8_t)v250);
    int8x16_t v463 = (int8x16_t)vaddq_s16((int16x8_t)v463, (int16x8_t)v250);
    int8x16_t v464 = (int8x16_t)vaddq_s16((int16x8_t)v464, (int16x8_t)v250);
    v250.i64[0] = 0x8000800080008;
    v250.i64[1] = 0x8000800080008;
    v251.i64[0] = 0x3000300030003;
    v251.i64[1] = 0x3000300030003;
    v252.i64[0] = 0x2000200020002;
    v252.i64[1] = 0x2000200020002;
    int8x16_t v253 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v73, v251), v252);
    v252.i64[0] = 0x10001000100010;
    v252.i64[1] = 0x10001000100010;
    int16x8_t v254 = (int16x8_t)vandq_s8(v253, (int8x16_t)v252);
    v252.i64[0] = 0x7000700070007;
    v252.i64[1] = 0x7000700070007;
    int16x8_t v255 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v148, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v73, v250))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v250)), v254), v150, v252), vshlq_n_s16(vaddq_s16(v153, vaddq_s16(v151, v152)), 3uLL));
    int16x8_t v256 = vpaddq_s16(v255, v255);
    if ((unint64_t)(vpaddq_s16(v256, v256).i16[0] - 1437) < 0xFFFFFFFFFFFFF9F8)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 192;
    }
    else
    {
      int8x16_t v257 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v258 = 8 * (a1 & 7);
      if (v258) {
        uint64_t v259 = *v257 & ~(-1 << v258);
      }
      else {
        uint64_t v259 = 0;
      }
      *a2 = 0;
      uint64_t v261 = ((v148.u16[0] << 20) - 0x100000) & 0xF00000;
      v262.i32[0] = v73.u16[1];
      v262.i32[1] = v73.u16[2];
      int8x8_t v263 = vand_s8((int8x8_t)vshl_u32(v262, (uint32x2_t)0xA00000005), (int8x8_t)0x7C00000003E0);
      __int32 v264 = v263.i32[1];
      __int32 v265 = v263.i32[0] | v73.i8[0] & 0x1F;
      if (!v148.i16[0]) {
        uint64_t v261 = 0;
      }
      unint64_t v266 = (unint64_t)((v148.i8[4] - 1) & 0xF) << 28;
      if (!v148.i16[2]) {
        unint64_t v266 = 0;
      }
      v267.i32[0] = v148.u16[3];
      v267.i32[1] = v148.u16[1];
      int32x2_t v268 = vceqz_s32((int32x2_t)vand_s8(v267, (int8x8_t)0xFFFF0000FFFFLL));
      v269.i64[0] = v268.i32[0];
      v269.i64[1] = v268.i32[1];
      int8x16_t v270 = (int8x16_t)v269;
      v271.i64[0] = -1;
      v271.i64[1] = -1;
      int8x8_t v272 = vand_s8((int8x8_t)vadd_s32((int32x2_t)v267, (int32x2_t)-1), (int8x8_t)0xF0000000FLL);
      v269.i64[0] = v272.u32[0];
      v269.i64[1] = v272.u32[1];
      int8x16_t v273 = vbicq_s8((int8x16_t)vshlq_u64(v269, (uint64x2_t)xmmword_242EA77F0), v270);
      v270.i64[0] = v266;
      v270.i64[1] = v265 | v264 | ((unint64_t)(v73.i8[6] & 0x1F) << 15) | v261;
      int8x16_t v274 = vorrq_s8(v270, v273);
      uint64_t v275 = v465.i64[0];
      unint64_t v276 = vorrq_s8(v274, (int8x16_t)vdupq_laneq_s64((int64x2_t)v274, 1)).u64[0];
      unint64_t v277 = (v276 << v258) | v259;
      if (v258 >= 0x1C)
      {
        void *v257 = v277;
        unint64_t v277 = v276 >> (-8 * (a1 & 7u));
      }
      uint64_t v278 = v275;
      v279.i64[0] = WORD2(v275);
      v279.i64[1] = HIWORD(v275);
      v280.i64[0] = 0xFFFFLL;
      v280.i64[1] = 0xFFFFLL;
      uint64x2_t v281 = vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)v279, v280), (uint64x2_t)xmmword_242EA7800);
      unint64_t v282 = v278 | v281.i64[0] | v281.i64[1];
      char v283 = (v258 + 36) & 0x3C;
      *(void *)((char *)v257 + (((v258 + 36) >> 3) & 8)) = v277 | (v282 << v283);
      unint64_t v284 = v258 + 100;
      int8x16_t v285 = (int8x16_t)vsubq_s16((int16x8_t)v471, v467);
      int8x16_t v286 = (int8x16_t)vsubq_s16((int16x8_t)v471, v468);
      int8x16_t v287 = (int8x16_t)vsubq_s16((int16x8_t)v471, v469);
      int8x16_t v288 = (int8x16_t)vsubq_s16((int16x8_t)v471, v470);
      *(uint8x8_t *)v285.i8 = vqmovn_u16((uint16x8_t)v285);
      *(uint8x8_t *)v286.i8 = vqmovn_u16((uint16x8_t)v286);
      *(uint8x8_t *)v287.i8 = vqmovn_u16((uint16x8_t)v287);
      *(uint8x8_t *)v288.i8 = vqmovn_u16((uint16x8_t)v288);
      int16x8_t v289 = (int16x8_t)vtrn1q_s8(v285, v286);
      int16x8_t v290 = (int16x8_t)vtrn2q_s8(v285, v286);
      int8x16_t v291 = vtrn1q_s8(v287, v288);
      int16x8_t v292 = (int16x8_t)vtrn2q_s8(v287, v288);
      int8x16_t v293 = (int8x16_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(v289, (int16x8_t)v291), (int32x4_t)vzip1q_s16(v290, v292)), (int64x2_t)vzip1q_s32((int32x4_t)vtrn2q_s16(v289, (int16x8_t)v291), (int32x4_t)vtrn2q_s16(v290, v292)));
      v291.i64[0] = 0x202020202020202;
      v291.i64[1] = 0x202020202020202;
      int8x16_t v294 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v466.i8, (int16x4_t)0x4000400040004)), v291);
      v291.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v291.i64[1] = 0xF8F8F8F8F8F8F8F8;
      uint8x16_t v295 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8(v271, (uint8x16_t)vorrq_s8(v294, v291)), v293);
      int16x8_t v296 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v294.i8);
      int16x8_t v297 = (int16x8_t)vmovl_high_u8((uint8x16_t)v294);
      uint16x8_t v298 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v295.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v296)), (int16x8_t)vshlq_u16(vmovl_high_u8(v295), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v297)));
      uint16x8_t v299 = (uint16x8_t)vpaddq_s16(v296, v297);
      int32x4_t v300 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v299.i8);
      int32x4_t v301 = (int32x4_t)vmovl_high_u16(v299);
      int32x4_t v302 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v298.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v300)), (int32x4_t)vshlq_u32(vmovl_high_u16(v298), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v301)));
      int32x4_t v303 = vpaddq_s32(v300, v301);
      v279.i64[0] = v302.u32[0];
      v279.i64[1] = v302.u32[1];
      uint64x2_t v304 = (uint64x2_t)v279;
      v279.i64[0] = v302.u32[2];
      v279.i64[1] = v302.u32[3];
      uint64x2_t v305 = (uint64x2_t)v279;
      v279.i64[0] = v303.u32[0];
      v279.i64[1] = v303.u32[1];
      int64x2_t v306 = v279;
      v279.i64[0] = v303.u32[2];
      v279.i64[1] = v303.u32[3];
      int64x2_t v307 = vpaddq_s64((int64x2_t)vshlq_u64(v304, (uint64x2_t)vzip1q_s64((int64x2_t)0, v306)), (int64x2_t)vshlq_u64(v305, (uint64x2_t)vzip1q_s64((int64x2_t)0, v279)));
      int64x2_t v308 = vpaddq_s64(v306, v279);
      uint64_t v309 = (v258 + 100) & 0x3C;
      unint64_t v310 = (v307.i64[0] << v309) | (v282 >> -v283);
      if ((unint64_t)(v308.i64[0] + v309) >= 0x40)
      {
        *(void *)((char *)v257 + ((v284 >> 3) & 0x18)) = v310;
        unint64_t v310 = (unint64_t)v307.i64[0] >> -(char)v309;
      }
      unint64_t v311 = v308.i64[0] + v284;
      unint64_t v312 = v310 | (v307.i64[1] << v311);
      if ((v311 & 0x3F) + v308.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v312;
        unint64_t v312 = (unint64_t)v307.i64[1] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v312 = 0;
        }
      }
      unint64_t v313 = v311 + v308.i64[1];
      v314.i64[0] = 0x8000800080008;
      v314.i64[1] = 0x8000800080008;
      v315.i64[0] = -1;
      v315.i64[1] = -1;
      int16x8_t v316 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v466, v314), (int8x16_t)0, 8uLL), v471);
      v317.i64[0] = 0xF000F000F000FLL;
      v317.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v318 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v315, (uint16x8_t)vaddq_s16(v316, v317)), v474);
      int32x4_t v319 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v316.i8);
      int32x4_t v320 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v318.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v319)), (int32x4_t)vmovl_high_u16(v318));
      int32x4_t v321 = vpaddq_s32(v319, (int32x4_t)vmovl_high_u16((uint16x8_t)v316));
      v322.i64[0] = v320.u32[0];
      v322.i64[1] = v320.u32[1];
      uint64x2_t v323 = (uint64x2_t)v322;
      v322.i64[0] = v320.u32[2];
      v322.i64[1] = v320.u32[3];
      uint64x2_t v324 = (uint64x2_t)v322;
      v322.i64[0] = v321.u32[0];
      v322.i64[1] = v321.u32[1];
      int64x2_t v325 = v322;
      v322.i64[0] = v321.u32[2];
      v322.i64[1] = v321.u32[3];
      int64x2_t v326 = vpaddq_s64((int64x2_t)vshlq_u64(v323, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)), (int64x2_t)vshlq_u64(v324, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)));
      int64x2_t v327 = vpaddq_s64(v325, v322);
      unint64_t v328 = (v326.i64[0] << v313) | v312;
      if (v327.i64[0] + (v313 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v313 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v328;
        unint64_t v328 = (unint64_t)v326.i64[0] >> -(v313 & 0x3F);
        if ((v313 & 0x3F) == 0) {
          unint64_t v328 = 0;
        }
      }
      unint64_t v329 = v327.i64[0] + v313;
      unint64_t v330 = v328 | (v326.i64[1] << v329);
      if ((v329 & 0x3F) + v327.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v330;
        unint64_t v330 = (unint64_t)v326.i64[1] >> -(v329 & 0x3F);
        if ((v329 & 0x3F) == 0) {
          unint64_t v330 = 0;
        }
      }
      unint64_t v331 = v329 + v327.i64[1];
      int16x8_t v332 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v467, 8uLL);
      v333.i64[0] = 0xF000F000F000FLL;
      v333.i64[1] = 0xF000F000F000FLL;
      v334.i64[0] = -1;
      v334.i64[1] = -1;
      uint16x8_t v335 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v334, (uint16x8_t)vaddq_s16(v332, v333)), v449);
      int32x4_t v336 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v332.i8);
      int32x4_t v337 = (int32x4_t)vmovl_high_u16((uint16x8_t)v332);
      int32x4_t v338 = vpaddq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v335.i8), (int32x4_t)vshlq_u32(vmovl_high_u16(v335), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v337)));
      int32x4_t v339 = vpaddq_s32(v336, v337);
      v340.i64[0] = v338.u32[0];
      v340.i64[1] = v338.u32[1];
      uint64x2_t v341 = (uint64x2_t)v340;
      v340.i64[0] = v338.u32[2];
      v340.i64[1] = v338.u32[3];
      uint64x2_t v342 = (uint64x2_t)v340;
      v340.i64[0] = v339.u32[0];
      v340.i64[1] = v339.u32[1];
      int64x2_t v343 = v340;
      v340.i64[0] = v339.u32[2];
      v340.i64[1] = v339.u32[3];
      int64x2_t v344 = vpaddq_s64((int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v343)), (int64x2_t)vshlq_u64(v342, (uint64x2_t)vzip1q_s64((int64x2_t)0, v340)));
      int64x2_t v345 = vpaddq_s64(v343, v340);
      unint64_t v346 = (v344.i64[0] << v331) | v330;
      if (v345.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v346;
        if ((v331 & 0x3F) != 0) {
          unint64_t v346 = (unint64_t)v344.i64[0] >> -(v331 & 0x3F);
        }
        else {
          unint64_t v346 = 0;
        }
      }
      unint64_t v347 = v345.i64[0] + v331;
      uint64_t v348 = (v345.i64[0] + v331) & 0x3F;
      unint64_t v349 = v346 | (v344.i64[1] << v347);
      if ((unint64_t)(v348 + v345.i64[1]) >= 0x40)
      {
        *(void *)((char *)v257 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
        unint64_t v349 = (unint64_t)v344.i64[1] >> -(char)v348;
        if (!v348) {
          unint64_t v349 = 0;
        }
      }
      unint64_t v350 = v347 + v345.i64[1];
      v351.i64[0] = 0xF000F000F000FLL;
      v351.i64[1] = 0xF000F000F000FLL;
      v352.i64[0] = -1;
      v352.i64[1] = -1;
      for (uint64_t i = 16; i != 64; i += 16)
      {
        uint16x8_t v354 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v352, (uint16x8_t)vaddq_s16(v467, v351)), *(int8x16_t *)((char *)&v449 + i));
        int32x4_t v355 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v467.i8);
        int32x4_t v356 = (int32x4_t)vmovl_high_u16((uint16x8_t)v467);
        int32x4_t v357 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v354.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v355)), (int32x4_t)vshlq_u32(vmovl_high_u16(v354), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v356)));
        int32x4_t v358 = vpaddq_s32(v355, v356);
        v359.i64[0] = v357.u32[0];
        v359.i64[1] = v357.u32[1];
        uint64x2_t v360 = (uint64x2_t)v359;
        v359.i64[0] = v357.u32[2];
        v359.i64[1] = v357.u32[3];
        uint64x2_t v361 = (uint64x2_t)v359;
        v359.i64[0] = v358.u32[0];
        v359.i64[1] = v358.u32[1];
        int64x2_t v362 = v359;
        v359.i64[0] = v358.u32[2];
        v359.i64[1] = v358.u32[3];
        int64x2_t v363 = vpaddq_s64((int64x2_t)vshlq_u64(v360, (uint64x2_t)vzip1q_s64((int64x2_t)0, v362)), (int64x2_t)vshlq_u64(v361, (uint64x2_t)vzip1q_s64((int64x2_t)0, v359)));
        int64x2_t v364 = vpaddq_s64(v362, v359);
        unint64_t v365 = (v363.i64[0] << v350) | v349;
        if (v364.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v363.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v364.i64[0] + v350;
        unint64_t v349 = v365 | (v363.i64[1] << v366);
        if ((v366 & 0x3F) + v364.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v363.i64[1] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v366 + v364.i64[1];
      }
      uint64_t v367 = 0;
      v368.i64[0] = 0xF000F000F000FLL;
      v368.i64[1] = 0xF000F000F000FLL;
      v369.i64[0] = -1;
      v369.i64[1] = -1;
      do
      {
        uint16x8_t v370 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v369, (uint16x8_t)vaddq_s16(v468, v368)), *(int8x16_t *)((char *)&v453 + v367));
        int32x4_t v371 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v468.i8);
        int32x4_t v372 = (int32x4_t)vmovl_high_u16((uint16x8_t)v468);
        int32x4_t v373 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v370.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v371)), (int32x4_t)vshlq_u32(vmovl_high_u16(v370), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v372)));
        int32x4_t v374 = vpaddq_s32(v371, v372);
        v375.i64[0] = v373.u32[0];
        v375.i64[1] = v373.u32[1];
        uint64x2_t v376 = (uint64x2_t)v375;
        v375.i64[0] = v373.u32[2];
        v375.i64[1] = v373.u32[3];
        uint64x2_t v377 = (uint64x2_t)v375;
        v375.i64[0] = v374.u32[0];
        v375.i64[1] = v374.u32[1];
        int64x2_t v378 = v375;
        v375.i64[0] = v374.u32[2];
        v375.i64[1] = v374.u32[3];
        int64x2_t v379 = vpaddq_s64((int64x2_t)vshlq_u64(v376, (uint64x2_t)vzip1q_s64((int64x2_t)0, v378)), (int64x2_t)vshlq_u64(v377, (uint64x2_t)vzip1q_s64((int64x2_t)0, v375)));
        int64x2_t v380 = vpaddq_s64(v378, v375);
        unint64_t v381 = (v379.i64[0] << v350) | v349;
        if (v380.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v381;
          unint64_t v381 = (unint64_t)v379.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v381 = 0;
          }
        }
        unint64_t v382 = v380.i64[0] + v350;
        unint64_t v349 = v381 | (v379.i64[1] << v382);
        if ((v382 & 0x3F) + v380.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v382 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v379.i64[1] >> -(v382 & 0x3F);
          if ((v382 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v382 + v380.i64[1];
        v367 += 16;
      }
      while (v367 != 64);
      uint64_t v383 = 0;
      v384.i64[0] = 0xF000F000F000FLL;
      v384.i64[1] = 0xF000F000F000FLL;
      v385.i64[0] = -1;
      v385.i64[1] = -1;
      do
      {
        uint16x8_t v386 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v385, (uint16x8_t)vaddq_s16(v469, v384)), *(int8x16_t *)((char *)&v457 + v383));
        int32x4_t v387 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v469.i8);
        int32x4_t v388 = (int32x4_t)vmovl_high_u16((uint16x8_t)v469);
        int32x4_t v389 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v386.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v387)), (int32x4_t)vshlq_u32(vmovl_high_u16(v386), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v388)));
        int32x4_t v390 = vpaddq_s32(v387, v388);
        v391.i64[0] = v389.u32[0];
        v391.i64[1] = v389.u32[1];
        uint64x2_t v392 = (uint64x2_t)v391;
        v391.i64[0] = v389.u32[2];
        v391.i64[1] = v389.u32[3];
        uint64x2_t v393 = (uint64x2_t)v391;
        v391.i64[0] = v390.u32[0];
        v391.i64[1] = v390.u32[1];
        int64x2_t v394 = v391;
        v391.i64[0] = v390.u32[2];
        v391.i64[1] = v390.u32[3];
        int64x2_t v395 = vpaddq_s64((int64x2_t)vshlq_u64(v392, (uint64x2_t)vzip1q_s64((int64x2_t)0, v394)), (int64x2_t)vshlq_u64(v393, (uint64x2_t)vzip1q_s64((int64x2_t)0, v391)));
        int64x2_t v396 = vpaddq_s64(v394, v391);
        unint64_t v397 = (v395.i64[0] << v350) | v349;
        if (v396.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v397;
          unint64_t v397 = (unint64_t)v395.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v397 = 0;
          }
        }
        unint64_t v398 = v396.i64[0] + v350;
        unint64_t v349 = v397 | (v395.i64[1] << v398);
        if ((v398 & 0x3F) + v396.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v398 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v395.i64[1] >> -(v398 & 0x3F);
          if ((v398 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v398 + v396.i64[1];
        v383 += 16;
      }
      while (v383 != 64);
      uint64_t v399 = 0;
      v400.i64[0] = 0xF000F000F000FLL;
      v400.i64[1] = 0xF000F000F000FLL;
      v401.i64[0] = -1;
      v401.i64[1] = -1;
      do
      {
        uint16x8_t v402 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v401, (uint16x8_t)vaddq_s16(v470, v400)), *(int8x16_t *)((char *)&v461 + v399));
        int32x4_t v403 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v470.i8);
        int32x4_t v404 = (int32x4_t)vmovl_high_u16((uint16x8_t)v470);
        int32x4_t v405 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v402.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v403)), (int32x4_t)vshlq_u32(vmovl_high_u16(v402), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v404)));
        int32x4_t v406 = vpaddq_s32(v403, v404);
        v407.i64[0] = v405.u32[0];
        v407.i64[1] = v405.u32[1];
        uint64x2_t v408 = (uint64x2_t)v407;
        v407.i64[0] = v405.u32[2];
        v407.i64[1] = v405.u32[3];
        uint64x2_t v409 = (uint64x2_t)v407;
        v407.i64[0] = v406.u32[0];
        v407.i64[1] = v406.u32[1];
        int64x2_t v410 = v407;
        v407.i64[0] = v406.u32[2];
        v407.i64[1] = v406.u32[3];
        int64x2_t v411 = vpaddq_s64((int64x2_t)vshlq_u64(v408, (uint64x2_t)vzip1q_s64((int64x2_t)0, v410)), (int64x2_t)vshlq_u64(v409, (uint64x2_t)vzip1q_s64((int64x2_t)0, v407)));
        int64x2_t v412 = vpaddq_s64(v410, v407);
        unint64_t v413 = (v411.i64[0] << v350) | v349;
        if (v412.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v413;
          unint64_t v413 = (unint64_t)v411.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v413 = 0;
          }
        }
        unint64_t v414 = v412.i64[0] + v350;
        unint64_t v349 = v413 | (v411.i64[1] << v414);
        if ((v414 & 0x3F) + v412.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v411.i64[1] >> -(v414 & 0x3F);
          if ((v414 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v414 + v412.i64[1];
        v399 += 16;
      }
      while (v399 != 64);
      if ((v350 & 0x3F) != 0) {
        *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
      }
      unint64_t result = (v350 - v258 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(void *)a1 = *(void *)a3;
    *a2 = 7;
    return 8;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v10 = a6;
  long long v67 = 0u;
  long long v68 = 0u;
  if (a5 > 1)
  {
    uint64_t v20 = a5 & 0xFE;
    if (a5 == v20)
    {
      uint64_t v21 = 0;
      int16x8_t v22 = (uint64_t *)(a3 + 8);
      int16x8_t v23 = &v69;
      do
      {
        int16x8_t v24 = v23;
        int8x16_t v25 = v22;
        uint64_t v26 = a5;
        do
        {
          uint64_t v27 = *v25;
          *((void *)v24 - 4) = *(v25 - 1);
          *(void *)int16x8_t v24 = v27;
          v24 += 4;
          v25 += 2;
          v26 -= 2;
        }
        while (v26);
        ++v21;
        int16x8_t v22 = (uint64_t *)((char *)v22 + a4);
        int16x8_t v23 = (long long *)((char *)v23 + 8);
      }
      while (v21 != a6);
    }
    else
    {
      uint64_t v28 = 0;
      int16x8_t v29 = (uint64_t *)(a3 + 8);
      int16x8_t v30 = &v69;
      int16x8_t v31 = (char *)&v67 + ((32 * a5) & 0x1FC0);
      do
      {
        int16x8_t v32 = v30;
        int16x8_t v33 = v29;
        uint64_t v34 = a5 & 0xFE;
        do
        {
          uint64_t v35 = *v33;
          *((void *)v32 - 4) = *(v33 - 1);
          *(void *)int16x8_t v32 = v35;
          v32 += 4;
          v33 += 2;
          v34 -= 2;
        }
        while (v34);
        int16x8_t v36 = (uint64_t *)(a3 + v28 * a4 + 8 * v20);
        int16x8_t v37 = v31;
        uint64_t v38 = a5 - v20;
        do
        {
          uint64_t v39 = *v36++;
          *int16x8_t v37 = v39;
          v37 += 4;
          --v38;
        }
        while (v38);
        ++v28;
        int16x8_t v29 = (uint64_t *)((char *)v29 + a4);
        int16x8_t v30 = (long long *)((char *)v30 + 8);
        v31 += 8;
      }
      while (v28 != v10);
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v11 = a6 & 0xFE;
    int16x8_t v12 = (uint64_t *)(a3 + 1);
    int16x8_t v13 = (void *)&v67 + 1;
    uint64_t v14 = v11;
    do
    {
      uint64_t v15 = *(uint64_t *)((char *)v12 - 1);
      uint64_t v16 = *v12;
      int16x8_t v12 = (uint64_t *)((char *)v12 + 2);
      *(v13 - 1) = v15;
      void *v13 = v16;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v11 != a6)
    {
LABEL_7:
      uint64_t v17 = a6 - v11;
      int16x8_t v18 = (void *)&v67 + v11;
      int16x8_t v19 = (void *)(a3 + v11 * a4);
      do
      {
        *v18++ = *v19;
        int16x8_t v19 = (void *)((char *)v19 + a4);
        --v17;
      }
      while (v17);
    }
  }
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v67);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v69);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v67 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v69 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v71);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v73);
  uint32x4_t v40 = vmovl_u16(*(uint16x4_t *)((char *)&v71 + 8));
  uint32x4_t v41 = vmovl_u16(*(uint16x4_t *)((char *)&v73 + 8));
  if (a5 >= 4) {
    unsigned int v42 = 4;
  }
  else {
    unsigned int v42 = a5;
  }
  if (a5 >= 4) {
    unsigned int v43 = a5 - 4;
  }
  else {
    unsigned int v43 = 0;
  }
  if (a6 >= 2) {
    unsigned int v44 = 2;
  }
  else {
    unsigned int v44 = a6;
  }
  uint32x4_t v65 = v40;
  uint32x4_t v66 = v41;
  if (a6 >= 2) {
    unsigned int v45 = a6 - 2;
  }
  else {
    unsigned int v45 = 0;
  }
  char v47 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1, (uint64_t)&v59, a7, v42, v44);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v68);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v70);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v68 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v70 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v72);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v74);
  uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)((char *)&v72 + 8));
  uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)((char *)&v74 + 8));
  if (a6 >= 4) {
    unsigned int v48 = 2;
  }
  else {
    unsigned int v48 = v45;
  }
  int v49 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 48, (uint64_t)&v59, a7, v42, v48);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v75);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v77);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v75 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v77 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v79);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v81);
  uint32x4_t v50 = vmovl_u16(*(uint16x4_t *)((char *)&v79 + 8));
  uint32x4_t v51 = vmovl_u16(*(uint16x4_t *)((char *)&v81 + 8));
  if (a5 >= 8) {
    unsigned int v52 = 4;
  }
  else {
    unsigned int v52 = v43;
  }
  uint32x4_t v65 = v50;
  uint32x4_t v66 = v51;
  int v53 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 96, (uint64_t)&v59, a7, v52, v44);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v76);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v78);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v76 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v78 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v80);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v82);
  uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)((char *)&v80 + 8));
  uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)((char *)&v82 + 8));
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 144, (uint64_t)&v59, a7, v52, v48);
  if (v53) {
    char v55 = 4;
  }
  else {
    char v55 = 0;
  }
  if (v49) {
    char v56 = 2;
  }
  else {
    char v56 = 0;
  }
  if (result) {
    char v57 = -8;
  }
  else {
    char v57 = -16;
  }
  *a2 = v57 | v55 | v47 | v56;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(unint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v8 = 0;
  uint64_t v283 = *MEMORY[0x263EF8340];
  BOOL v9 = a5 < 2;
  BOOL v10 = a4 < 4 || a5 < 2;
  BOOL v258 = v10;
  BOOL v11 = a4 < 4 || a5 == 0;
  BOOL v257 = v11;
  BOOL v12 = a4 < 3 || a5 < 2;
  BOOL v256 = v12;
  BOOL v13 = a4 < 3 || a5 == 0;
  BOOL v255 = v13;
  if (a4) {
    BOOL v14 = a5 < 2;
  }
  else {
    BOOL v14 = 1;
  }
  if (a4 < 2) {
    BOOL v9 = 1;
  }
  BOOL v253 = v9;
  BOOL v254 = v14;
  BOOL v15 = a4 < 2 || a5 == 0;
  do
  {
    *(unsigned int *)((char *)&v279 + v8 * 4) = 16;
    v272[v8] = 3;
    *(_DWORD *)((char *)&v271[2] + v8 * 4) = 0x8000;
    int16x8_t v23 = (unsigned int *)(a2 + v8 * 4);
    if (a3 == 1)
    {
      int8x16_t v25 = &v274[v8];
      if ((*v23 ^ 0x8000) == 1) {
        unsigned int v24 = 0;
      }
      else {
        unsigned int v24 = *v23 ^ 0x8000;
      }
      *int8x16_t v25 = v24;
      if ((v23[4] ^ 0x8000) == 1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v23[4] ^ 0x8000;
      }
      v25[4] = v26;
      if ((v23[8] ^ 0x8000) == 1) {
        unsigned int v27 = 0;
      }
      else {
        unsigned int v27 = v23[8] ^ 0x8000;
      }
      v25[8] = v27;
      if ((v23[12] ^ 0x8000) == 1) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = v23[12] ^ 0x8000;
      }
      v25[12] = v28;
      if ((v23[16] ^ 0x8000) == 1) {
        unsigned int v29 = 0;
      }
      else {
        unsigned int v29 = v23[16] ^ 0x8000;
      }
      v25[16] = v29;
      unsigned int v30 = v23[20] ^ 0x8000;
      if (v30 == 1) {
        unsigned int v30 = 0;
      }
      v25[20] = v30;
      unsigned int v31 = v23[24] ^ 0x8000;
      if (v31 == 1) {
        unsigned int v31 = 0;
      }
      v25[24] = v31;
      int v33 = v23[28] ^ 0x8000;
      if (v33 == 1) {
        unsigned int v32 = 0;
      }
      else {
        unsigned int v32 = v33;
      }
    }
    else if (a3 == 3)
    {
      unsigned int v24 = *v23 ^ 0x8000;
      int8x16_t v25 = &v274[v8];
      *int8x16_t v25 = v24;
      unsigned int v26 = v23[4] ^ 0x8000;
      v25[4] = v26;
      unsigned int v27 = v23[8] ^ 0x8000;
      v25[8] = v27;
      unsigned int v28 = v23[12] ^ 0x8000;
      v25[12] = v28;
      unsigned int v29 = v23[16] ^ 0x8000;
      v25[16] = v29;
      unsigned int v30 = v23[20] ^ 0x8000;
      v25[20] = v30;
      unsigned int v31 = v23[24] ^ 0x8000;
      v25[24] = v31;
      unsigned int v32 = v23[28] ^ 0x8000;
    }
    else
    {
      unsigned int v24 = *v23;
      int8x16_t v25 = &v274[v8];
      *int8x16_t v25 = *v23;
      unsigned int v26 = v23[4];
      v25[4] = v26;
      unsigned int v27 = v23[8];
      v25[8] = v27;
      unsigned int v28 = v23[12];
      v25[12] = v28;
      unsigned int v29 = v23[16];
      v25[16] = v29;
      unsigned int v30 = v23[20];
      v25[20] = v30;
      unsigned int v31 = v23[24];
      v25[24] = v31;
      unsigned int v32 = v23[28];
    }
    v25[28] = v32;
    uint64_t v34 = &v278[v8 + 4];
    v278[v8 + 4] = v24;
    v278[v8 + 8] = v24;
    v278[v8] = 0;
    unsigned int v35 = v24;
    if (v15)
    {
      if (v254) {
        goto LABEL_60;
      }
    }
    else
    {
      if (v26 < v24)
      {
        v278[v8] = 1;
        v278[v8 + 8] = v26;
        unsigned int v35 = v26;
      }
      if (v24 >= v26) {
        int16x8_t v36 = &v278[v8 + 4];
      }
      else {
        int16x8_t v36 = &v274[v8 + 4];
      }
      unsigned int v24 = *v36;
      *uint64_t v34 = v24;
      if (v254)
      {
LABEL_60:
        if (v253) {
          goto LABEL_61;
        }
        goto LABEL_78;
      }
    }
    if (v27 < v35)
    {
      v278[v8] = 2;
      v278[v8 + 8] = v27;
      unsigned int v35 = v27;
    }
    if (v24 >= v27) {
      int16x8_t v37 = &v278[v8 + 4];
    }
    else {
      int16x8_t v37 = &v274[v8 + 8];
    }
    unsigned int v24 = *v37;
    *uint64_t v34 = *v37;
    if (v253)
    {
LABEL_61:
      if (v255) {
        goto LABEL_62;
      }
      goto LABEL_84;
    }
LABEL_78:
    if (v28 < v35)
    {
      v278[v8] = 3;
      v278[v8 + 8] = v28;
      unsigned int v35 = v28;
    }
    if (v24 >= v28) {
      uint64_t v38 = &v278[v8 + 4];
    }
    else {
      uint64_t v38 = &v274[v8 + 12];
    }
    unsigned int v24 = *v38;
    *uint64_t v34 = *v38;
    if (v255)
    {
LABEL_62:
      if (v257) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
LABEL_84:
    if (v29 < v35)
    {
      v278[v8] = 4;
      v278[v8 + 8] = v29;
      unsigned int v35 = v29;
    }
    if (v24 >= v29) {
      uint64_t v39 = &v278[v8 + 4];
    }
    else {
      uint64_t v39 = &v274[v8 + 16];
    }
    unsigned int v24 = *v39;
    *uint64_t v34 = *v39;
    if (v257)
    {
LABEL_63:
      if (v256) {
        goto LABEL_64;
      }
      goto LABEL_96;
    }
LABEL_90:
    if (v30 < v35)
    {
      v278[v8] = 5;
      v278[v8 + 8] = v30;
      unsigned int v35 = v30;
    }
    if (v24 >= v30) {
      uint32x4_t v40 = &v278[v8 + 4];
    }
    else {
      uint32x4_t v40 = &v274[v8 + 20];
    }
    unsigned int v24 = *v40;
    *uint64_t v34 = *v40;
    if (v256)
    {
LABEL_64:
      if (v258) {
        goto LABEL_106;
      }
LABEL_101:
      if (v32 < v35)
      {
        v278[v8] = 7;
        v278[v8 + 8] = v32;
        unsigned int v35 = v32;
      }
      unsigned int v42 = &v274[v8 + 28];
      if (v24 >= v32) {
        unsigned int v42 = &v278[v8 + 4];
      }
      unsigned int v24 = *v42;
      *uint64_t v34 = *v42;
      goto LABEL_106;
    }
LABEL_96:
    if (v31 < v35)
    {
      v278[v8] = 6;
      v278[v8 + 8] = v31;
      unsigned int v35 = v31;
    }
    uint32x4_t v41 = &v274[v8 + 24];
    if (v24 >= v31) {
      uint32x4_t v41 = &v278[v8 + 4];
    }
    unsigned int v24 = *v41;
    *uint64_t v34 = *v41;
    if (!v258) {
      goto LABEL_101;
    }
LABEL_106:
    unsigned int v43 = __clz(v24 - v35);
    int v44 = 32 - v43;
    if ((int)(32 - v43) <= 1) {
      int v44 = 1;
    }
    unsigned int v45 = v44 - 1;
    if (v24 == 0xFFFF && v43 == 31) {
      unsigned int v45 = 1;
    }
    v275[v8] = v45;
    BOOL v47 = 0;
    if ((a3 | 2) == 3 && v24 >= 0x8000 && !(v35 >> 15)) {
      BOOL v47 = kDQuadParamTable[10 * v45 + 488] == 0;
    }
    if (v45 > 0xC || v47)
    {
      int v16 = kDQuadParamTable[10 * v45 + 484] - v47;
      unsigned int v17 = v16 + 4;
      if (v47) {
        int v18 = 0;
      }
      else {
        int v18 = -2;
      }
      int v19 = v35 & ~(-1 << (12 - v16));
      if (v17 >= 0x10) {
        int v19 = 0;
      }
      int v20 = v19 + v18;
      unsigned int v21 = __clz(v20 + v24 - v35);
      if (v20 >= 1 && v21 < v43) {
        v275[v8] = v45 + 1;
      }
    }
    ++v8;
  }
  while (v8 != 4);
  v271[0] = 0;
  v271[1] = 0;
  v270[0] = 0;
  v270[1] = 0;
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::deriveLossyDQuadBitSharing(v272, v275, v271, v270);
  unint64_t v48 = 0;
  int v49 = 0;
  if (a4) {
    BOOL v50 = a5 == 0;
  }
  else {
    BOOL v50 = 1;
  }
  int v51 = v50;
  while (2)
  {
    uint64_t v53 = v272[v48];
    unsigned int v54 = v275[v48];
    char v55 = &kDQuadParamTable[160 * v53 + 10 * v54];
    int v56 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
          + 4 * v53
          + 1);
    int v57 = v55[5];
    unsigned int v58 = v55[4] + v56;
    *(unsigned int *)((char *)&v266 + v48 * 4) = v58;
    int v59 = v57 + v56;
    *(unsigned int *)((char *)&v262 + v48 * 4) = v59;
    unint64_t v60 = *((void *)v55 + 1);
    int v61 = *(_DWORD *)((char *)v270 + v48 * 4) - *(_DWORD *)((char *)v271 + v48 * 4);
    if (v61 < 0)
    {
      if (kDQuadParamTable[160 * v53 + 7 + 10 * v54] < *(_DWORD *)((char *)v271 + v48 * 4)
                                                                    - *(_DWORD *)((char *)v270 + v48 * 4))
      {
        *(unsigned int *)((char *)&v262 + v48 * 4) = --v59;
        if (!kDQuadParamTable[160 * v53 + 8 + 10 * v54])
        {
          int v62 = -1;
LABEL_134:
          *(unsigned int *)((char *)&v266 + v48 * 4) = v62 + v58;
        }
      }
    }
    else if (v61)
    {
      v59 += v61;
      *(unsigned int *)((char *)&v262 + v48 * 4) = v59;
      int v62 = v61;
      goto LABEL_134;
    }
    if (v53 == 5)
    {
      int v63 = (v61 < 2) | v49;
      if (v54 == 1) {
        int v49 = v63;
      }
    }
    if (a3 == 4)
    {
      if (v53 == 3) {
        int v64 = 31744;
      }
      else {
        int v64 = 0;
      }
      if (v53 == 4) {
        int v65 = 2139095040;
      }
      else {
        int v65 = v64;
      }
      int v66 = 1 << (*(unsigned int *)((char *)&v279 + v48 * 4) - 1);
      if (v51)
      {
        if (v15) {
          goto LABEL_149;
        }
LABEL_163:
        unsigned int v70 = v274[v48 + 4];
        BOOL v72 = (v65 & ~v70) == 0 || v70 == v66;
        v49 |= v72;
        if (!v254) {
          goto LABEL_170;
        }
LABEL_150:
        if (v253) {
          goto LABEL_151;
        }
LABEL_177:
        unsigned int v76 = v274[v48 + 12];
        BOOL v78 = (v65 & ~v76) == 0 || v76 == v66;
        v49 |= v78;
        if (!v255) {
          goto LABEL_184;
        }
LABEL_152:
        if (v257) {
          goto LABEL_153;
        }
LABEL_191:
        unsigned int v82 = v274[v48 + 20];
        BOOL v84 = (v65 & ~v82) == 0 || v82 == v66;
        v49 |= v84;
        if (!v256) {
          goto LABEL_198;
        }
LABEL_154:
        if (!v258) {
          goto LABEL_205;
        }
      }
      else
      {
        unsigned int v67 = v274[v48];
        BOOL v69 = (v65 & ~v67) == 0 || v67 == v66;
        v49 |= v69;
        if (!v15) {
          goto LABEL_163;
        }
LABEL_149:
        if (v254) {
          goto LABEL_150;
        }
LABEL_170:
        unsigned int v73 = v274[v48 + 8];
        BOOL v75 = (v65 & ~v73) == 0 || v73 == v66;
        v49 |= v75;
        if (!v253) {
          goto LABEL_177;
        }
LABEL_151:
        if (v255) {
          goto LABEL_152;
        }
LABEL_184:
        unsigned int v79 = v274[v48 + 16];
        BOOL v81 = (v65 & ~v79) == 0 || v79 == v66;
        v49 |= v81;
        if (!v257) {
          goto LABEL_191;
        }
LABEL_153:
        if (v256) {
          goto LABEL_154;
        }
LABEL_198:
        unsigned int v85 = v274[v48 + 24];
        BOOL v87 = (v65 & ~v85) == 0 || v85 == v66;
        v49 |= v87;
        if (!v258)
        {
LABEL_205:
          unsigned int v88 = v274[v48 + 28];
          BOOL v90 = (v65 & ~v88) == 0 || v88 == v66;
          v49 |= v90;
        }
      }
    }
    if (v60 >> v59 > 1 << *(_DWORD *)((char *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)18,(AGXTextureFootprint)3>::lossyFallBackInfo
                                       + v48 * 4
                                       + 16))
      int v52 = 1;
    else {
      int v52 = v51;
    }
    v49 |= v52;
    if (++v48 != 4) {
      continue;
    }
    break;
  }
  uint64_t v91 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  memset(v259, 0, sizeof(v259));
  int8x16_t v92 = v274;
  int16x8_t v93 = v273;
  do
  {
    uint64_t v94 = 0;
    unsigned int v95 = 0;
    unsigned int v96 = *(&v279 + v91);
    if (v96 >= *(&v266 + v91)) {
      unsigned int v97 = *(&v266 + v91);
    }
    else {
      unsigned int v97 = *(&v279 + v91);
    }
    *(&v266 + v91) = v97;
    int16x8_t v98 = &kDQuadParamTable[160 * v272[v91] + 10 * v275[v91]];
    unsigned int v99 = *(&v262 + v91);
    if (v98[5]) {
      unsigned int v100 = v96;
    }
    else {
      unsigned int v100 = 0;
    }
    if (v100 < v99) {
      unsigned int v99 = v100;
    }
    int v101 = v278[v91 + 8] & (-1 << (v96 - v97));
    int16x8_t v102 = &v274[v91];
    int v103 = *v102 - v101;
    int16x8_t v104 = &v273[2 * v91];
    if (v51) {
      int v103 = 0;
    }
    int v105 = v102[4] - v101;
    if (v15) {
      int v105 = 0;
    }
    *int16x8_t v104 = v103;
    v104[1] = v105;
    int v106 = v102[8] - v101;
    if (v254) {
      int v106 = 0;
    }
    int v107 = v102[12] - v101;
    if (v253) {
      int v107 = 0;
    }
    v104[2] = v106;
    v104[3] = v107;
    int v108 = v102[16] - v101;
    if (v255) {
      int v108 = 0;
    }
    int v109 = v102[20] - v101;
    if (v257) {
      int v109 = 0;
    }
    v104[4] = v108;
    v104[5] = v109;
    uint64_t v110 = -1 << v96;
    *(&v262 + v91) = v99;
    unint64_t v111 = *((void *)v98 + 1);
    *((_DWORD *)&v260 + v91) = v101;
    unint64_t v112 = v111 >> v99;
    int v113 = v102[24] - v101;
    if (v256) {
      int v113 = 0;
    }
    int v114 = v102[28] - v101;
    if (v258) {
      int v114 = 0;
    }
    v104[6] = v113;
    v104[7] = v114;
    if (v112 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v112;
    }
    uint64_t v116 = 4 * v278[v91];
    int16x8_t v117 = &byte_242EA911D;
    do
    {
      if (v116 != v94)
      {
        if (v99) {
          unint64_t v118 = *(unsigned int *)((char *)v93 + v94) / v115;
        }
        else {
          LODWORD(v118) = 0;
        }
        int8x16_t v119 = (int *)v259 + 7 * v91 + v95;
        *int8x16_t v119 = v118;
        if (v112 >= 2)
        {
          unint64_t v120 = *(unsigned int *)((char *)v93 + v94);
          if (v120)
          {
            if (v120 / v115 * v115 == v120 && ((v120 / v115) & 1) != 0)
            {
              if (v101 || v118 != 1)
              {
                if ((a3 | 2) != 3
                  || (uint64_t v122 = v92[v94], v123 = *((unsigned int *)&v271[2] + v91), v122 != v123)
                  && ((a3 | 2) != 3 || v115 + v123 != v122))
                {
                  LODWORD(v118) = v118 - 1;
                  *int8x16_t v119 = v118;
                }
              }
              else
              {
                LODWORD(v118) = 1;
              }
            }
          }
        }
        if ((unint64_t)v118 >> v99 || v92[v94] == ~v110) {
          *int8x16_t v119 = ~(-1 << v99);
        }
        if (*v117 >= a5 || *(v117 - 1) >= a4) {
          *int8x16_t v119 = 0;
        }
        ++v95;
      }
      v94 += 4;
      v117 += 2;
    }
    while (v94 != 32);
    ++v91;
    v93 += 2;
    ++v92;
  }
  while (v91 != 4);
  int16x8_t v124 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v125 = 8 * (a1 & 7);
  *(_OWORD *)a1 = 0u;
  if (v49)
  {
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    unsigned int v128 = v279;
    unsigned int v129 = v280;
    uint64_t v130 = v279 - 4;
    uint64_t v131 = v280 - 4;
    unsigned int v133 = v281;
    unsigned int v132 = v282;
    uint64_t v134 = v281 - 4;
    uint64_t v135 = v282 - 4;
    uint64_t v136 = 8 * (a1 & 7);
    while (1)
    {
      int16x8_t v137 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v126;
      BOOL v138 = v137[1] >= a5 || *v137 >= a4;
      char v139 = v138;
      if (v138)
      {
        unint64_t v140 = 0;
        if (v130 > 0x100) {
          goto LABEL_290;
        }
      }
      else
      {
        unint64_t v140 = (unint64_t)v274[4 * v126] >> 4;
        if (v130 > 0x100) {
          goto LABEL_290;
        }
      }
      if (v128 != 4 && (unint64_t)(v136 - v125 + (v127 << 6) + v130) <= 0x180)
      {
        uint64_t v141 = 0;
        unint64_t v142 = v128 - 4;
        do
        {
          unint64_t v143 = 64 - v136;
          if (64 - v136 >= v142) {
            unint64_t v143 = v142;
          }
          v124[v127] |= ((v140 >> v141) & ~(-1 << v143)) << v136;
          v141 += v143;
          unint64_t v144 = v143 + v136;
          v127 += v144 >> 6;
          uint64_t v136 = v144 & 0x3F;
          v142 -= v143;
        }
        while (v142);
      }
LABEL_290:
      if (v139)
      {
        unint64_t v145 = 0;
        if (v131 > 0x100) {
          goto LABEL_300;
        }
      }
      else
      {
        unint64_t v145 = (unint64_t)v274[4 * v126 + 1] >> 4;
        if (v131 > 0x100) {
          goto LABEL_300;
        }
      }
      if (v129 != 4 && (unint64_t)(v136 - v125 + (v127 << 6) + v131) <= 0x180)
      {
        uint64_t v146 = 0;
        unint64_t v147 = v129 - 4;
        do
        {
          unint64_t v148 = 64 - v136;
          if (64 - v136 >= v147) {
            unint64_t v148 = v147;
          }
          v124[v127] |= ((v145 >> v146) & ~(-1 << v148)) << v136;
          v146 += v148;
          unint64_t v149 = v148 + v136;
          v127 += v149 >> 6;
          uint64_t v136 = v149 & 0x3F;
          v147 -= v148;
        }
        while (v147);
      }
LABEL_300:
      if (v139)
      {
        unint64_t v150 = 0;
        if (v134 > 0x100) {
          goto LABEL_310;
        }
      }
      else
      {
        unint64_t v150 = (unint64_t)v274[4 * v126 + 2] >> 4;
        if (v134 > 0x100) {
          goto LABEL_310;
        }
      }
      if (v133 != 4 && (unint64_t)(v136 - v125 + (v127 << 6) + v134) <= 0x180)
      {
        uint64_t v151 = 0;
        unint64_t v152 = v133 - 4;
        do
        {
          unint64_t v153 = 64 - v136;
          if (64 - v136 >= v152) {
            unint64_t v153 = v152;
          }
          v124[v127] |= ((v150 >> v151) & ~(-1 << v153)) << v136;
          v151 += v153;
          unint64_t v154 = v153 + v136;
          v127 += v154 >> 6;
          uint64_t v136 = v154 & 0x3F;
          v152 -= v153;
        }
        while (v152);
      }
LABEL_310:
      if (v139)
      {
        unint64_t v155 = 0;
        if (v135 <= 0x100) {
          goto LABEL_314;
        }
      }
      else
      {
        unint64_t v155 = (unint64_t)v274[4 * v126 + 3] >> 4;
        if (v135 <= 0x100)
        {
LABEL_314:
          if (v132 != 4 && (unint64_t)(v136 - v125 + (v127 << 6) + v135) <= 0x180)
          {
            uint64_t v156 = 0;
            unint64_t v157 = v132 - 4;
            do
            {
              unint64_t v158 = 64 - v136;
              if (64 - v136 >= v157) {
                unint64_t v158 = v157;
              }
              v124[v127] |= ((v155 >> v156) & ~(-1 << v158)) << v136;
              v156 += v158;
              unint64_t v159 = v158 + v136;
              v127 += v159 >> 6;
              uint64_t v136 = v159 & 0x3F;
              v157 -= v158;
            }
            while (v157);
          }
        }
      }
      if (++v126 == 8) {
        return v49 & 1;
      }
    }
  }
  unsigned int v160 = v275[0];
  unsigned int v161 = v275[1];
  unint64_t v162 = ((unint64_t)(v275[0] & 0xF) << v125) | *v124;
  *int16x8_t v124 = v162;
  uint64_t v163 = v125 | 4;
  if ((v125 | 4uLL) - v125 - 381 <= 0xFFFFFFFFFFFFFE7ELL)
  {
    unint64_t v164 = 0;
    int v165 = v276;
    goto LABEL_324;
  }
  *int16x8_t v124 = ((unint64_t)(v161 & 0xF) << v163) | v162;
  uint64_t v163 = (v125 + 8) & 0x38;
  unint64_t v164 = (unint64_t)(v125 + 8) >> 6;
  uint64_t v166 = (v125 + 8) & 0x40;
  int v165 = v276;
  if (((v163 - v125) | 4uLL) + v166 < 0x181)
  {
    unint64_t v250 = ((unint64_t)(v276 & 0xF) << v163) | v124[v164];
    v124[v164] = v250;
    uint64_t v168 = v163 | 4;
    unint64_t v251 = (v163 | 4) - v125 + v166 + 4;
    int v167 = v277;
    if (v251 <= 0x180)
    {
      v124[v164] = ((unint64_t)(v277 & 0xF) << v168) | v250;
      v164 += (unint64_t)(v163 + 8) >> 6;
      uint64_t v168 = (v163 + 8) & 0x38;
    }
  }
  else
  {
LABEL_324:
    int v167 = v277;
    uint64_t v168 = v163;
  }
  if (v160 || v279 == 2 || v279 >= 0x10)
  {
    unsigned int v169 = v266;
    if (v266 <= 0x100 && v266 && v168 - v125 + (v164 << 6) + v266 <= 0x180)
    {
      uint64_t v170 = 0;
      unint64_t v171 = v260 >> (v279 - v266);
      unint64_t v172 = v266;
      do
      {
        unint64_t v173 = 64 - v168;
        if (64 - v168 >= v172) {
          unint64_t v173 = v172;
        }
        v124[v164] |= ((v171 >> v170) & ~(-1 << v173)) << v168;
        v170 += v173;
        unint64_t v174 = v173 + v168;
        v164 += v174 >> 6;
        uint64_t v168 = v174 & 0x3F;
        v172 -= v173;
      }
      while (v172);
    }
    int v175 = v169 + 16;
    unsigned int v176 = v280;
    if (v161) {
      goto LABEL_334;
    }
LABEL_438:
    if (v176 == 2 || v176 >= 0x10) {
      goto LABEL_334;
    }
  }
  else
  {
    int v175 = 16;
    unsigned int v176 = v280;
    if (!v161) {
      goto LABEL_438;
    }
LABEL_334:
    unsigned int v177 = v267;
    if (v267 <= 0x100 && v267 && v168 - v125 + (v164 << 6) + v267 <= 0x180)
    {
      uint64_t v178 = 0;
      unint64_t v179 = (HIDWORD(v260) >> (v176 - v267));
      unint64_t v180 = v267;
      do
      {
        unint64_t v181 = 64 - v168;
        if (64 - v168 >= v180) {
          unint64_t v181 = v180;
        }
        v124[v164] |= ((v179 >> v178) & ~(-1 << v181)) << v168;
        v178 += v181;
        unint64_t v182 = v181 + v168;
        v164 += v182 >> 6;
        uint64_t v168 = v182 & 0x3F;
        v180 -= v181;
      }
      while (v180);
    }
    v175 += v177;
  }
  if (v165 || v281 == 2 || v281 >= 0x10)
  {
    unsigned int v183 = v268;
    if (v268 <= 0x100 && v268 && v168 - v125 + (v164 << 6) + v268 <= 0x180)
    {
      uint64_t v184 = 0;
      unint64_t v185 = v261 >> (v281 - v268);
      unint64_t v186 = v268;
      do
      {
        unint64_t v187 = 64 - v168;
        if (64 - v168 >= v186) {
          unint64_t v187 = v186;
        }
        v124[v164] |= ((v185 >> v184) & ~(-1 << v187)) << v168;
        v184 += v187;
        unint64_t v188 = v187 + v168;
        v164 += v188 >> 6;
        uint64_t v168 = v188 & 0x3F;
        v186 -= v187;
      }
      while (v186);
    }
    v175 += v183;
  }
  if (v167 || v282 == 2 || v282 >= 0x10)
  {
    unsigned int v189 = v269;
    if (v269 <= 0x100 && v269 && v168 - v125 + (v164 << 6) + v269 <= 0x180)
    {
      uint64_t v190 = 0;
      unint64_t v191 = (HIDWORD(v261) >> (v282 - v269));
      unint64_t v192 = v269;
      do
      {
        unint64_t v193 = 64 - v168;
        if (64 - v168 >= v192) {
          unint64_t v193 = v192;
        }
        v124[v164] |= ((v191 >> v190) & ~(-1 << v193)) << v168;
        v190 += v193;
        unint64_t v194 = v193 + v168;
        v164 += v194 >> 6;
        uint64_t v168 = v194 & 0x3F;
        v192 -= v193;
      }
      while (v192);
    }
    v175 += v189;
  }
  unint64_t v195 = v262;
  if (v262)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x180)
    {
      uint64_t v196 = 0;
      unint64_t v197 = v278[0];
      unint64_t v198 = 3;
      do
      {
        unint64_t v199 = 64 - v168;
        if (64 - v168 >= v198) {
          unint64_t v199 = v198;
        }
        v124[v164] |= ((v197 >> v196) & ~(-1 << v199)) << v168;
        v196 += v199;
        unint64_t v200 = v199 + v168;
        v164 += v200 >> 6;
        uint64_t v168 = v200 & 0x3F;
        v198 -= v199;
      }
      while (v198);
    }
    v175 += 3;
  }
  unint64_t v201 = v263;
  if (v263)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x180)
    {
      uint64_t v202 = 0;
      unint64_t v203 = v278[1];
      unint64_t v204 = 3;
      do
      {
        unint64_t v205 = 64 - v168;
        if (64 - v168 >= v204) {
          unint64_t v205 = v204;
        }
        v124[v164] |= ((v203 >> v202) & ~(-1 << v205)) << v168;
        v202 += v205;
        unint64_t v206 = v205 + v168;
        v164 += v206 >> 6;
        uint64_t v168 = v206 & 0x3F;
        v204 -= v205;
      }
      while (v204);
    }
    v175 += 3;
  }
  unint64_t v207 = v264;
  if (v264)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x180)
    {
      uint64_t v208 = 0;
      unint64_t v209 = v278[2];
      unint64_t v210 = 3;
      do
      {
        unint64_t v211 = 64 - v168;
        if (64 - v168 >= v210) {
          unint64_t v211 = v210;
        }
        v124[v164] |= ((v209 >> v208) & ~(-1 << v211)) << v168;
        v208 += v211;
        unint64_t v212 = v211 + v168;
        v164 += v212 >> 6;
        uint64_t v168 = v212 & 0x3F;
        v210 -= v211;
      }
      while (v210);
    }
    v175 += 3;
  }
  unint64_t v213 = v265;
  if (v265)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x180)
    {
      uint64_t v214 = 0;
      unint64_t v215 = v278[3];
      unint64_t v216 = 3;
      do
      {
        unint64_t v217 = 64 - v168;
        if (64 - v168 >= v216) {
          unint64_t v217 = v216;
        }
        v124[v164] |= ((v215 >> v214) & ~(-1 << v217)) << v168;
        v214 += v217;
        unint64_t v218 = v217 + v168;
        v164 += v218 >> 6;
        uint64_t v168 = v218 & 0x3F;
        v216 -= v217;
      }
      while (v216);
    }
    v175 += 3;
  }
  unsigned int v219 = 384 - v175;
  unsigned int v220 = (384 - v175) / 7u;
  unint64_t v221 = v219 % 7;
  if ((v221 - 257) >= 0xFFFFFF00 && v168 - v125 + (v164 << 6) + v221 <= 0x180)
  {
    do
    {
      unint64_t v222 = 64 - v168;
      if (64 - v168 >= v221) {
        unint64_t v222 = v221;
      }
      unint64_t v223 = v222 + v168;
      v164 += v223 >> 6;
      uint64_t v168 = v223 & 0x3F;
      v221 -= v222;
    }
    while (v221);
  }
  uint64_t v224 = 0;
  while (2)
  {
    if (v195 && v195 <= 0x100 && v168 - v125 + (v164 << 6) + v195 <= 0x180)
    {
      uint64_t v225 = 0;
      unint64_t v226 = *((unsigned int *)v259 + v224);
      unint64_t v227 = v195;
      do
      {
        unint64_t v228 = 64 - v168;
        if (64 - v168 >= v227) {
          unint64_t v228 = v227;
        }
        v124[v164] |= ((v226 >> v225) & ~(-1 << v228)) << v168;
        v225 += v228;
        unint64_t v229 = v228 + v168;
        v164 += v229 >> 6;
        uint64_t v168 = v229 & 0x3F;
        v227 -= v228;
      }
      while (v227);
    }
    if (!v201)
    {
      int v235 = v195;
      if (!v207) {
        goto LABEL_419;
      }
      goto LABEL_412;
    }
    if (v201 <= 0x100 && v168 - v125 + (v164 << 6) + v201 <= 0x180)
    {
      uint64_t v230 = 0;
      unint64_t v231 = *((unsigned int *)&v259[1] + v224 + 3);
      unint64_t v232 = v201;
      do
      {
        unint64_t v233 = 64 - v168;
        if (64 - v168 >= v232) {
          unint64_t v233 = v232;
        }
        v124[v164] |= ((v231 >> v230) & ~(-1 << v233)) << v168;
        v230 += v233;
        unint64_t v234 = v233 + v168;
        v164 += v234 >> 6;
        uint64_t v168 = v234 & 0x3F;
        v232 -= v233;
      }
      while (v232);
    }
    int v235 = v201 + v195;
    if (v207)
    {
LABEL_412:
      if (v207 <= 0x100 && v168 - v125 + (v164 << 6) + v207 <= 0x180)
      {
        uint64_t v236 = 0;
        unint64_t v237 = *((unsigned int *)&v259[3] + v224 + 2);
        unint64_t v238 = v207;
        do
        {
          unint64_t v239 = 64 - v168;
          if (64 - v168 >= v238) {
            unint64_t v239 = v238;
          }
          v124[v164] |= ((v237 >> v236) & ~(-1 << v239)) << v168;
          v236 += v239;
          unint64_t v240 = v239 + v168;
          v164 += v240 >> 6;
          uint64_t v168 = v240 & 0x3F;
          v238 -= v239;
        }
        while (v238);
      }
      v235 += v207;
    }
LABEL_419:
    if (v213)
    {
      if (v213 <= 0x100 && v168 - v125 + (v164 << 6) + v213 <= 0x180)
      {
        uint64_t v241 = 0;
        unint64_t v242 = *((unsigned int *)&v259[5] + v224 + 1);
        unint64_t v243 = v213;
        do
        {
          unint64_t v244 = 64 - v168;
          if (64 - v168 >= v243) {
            unint64_t v244 = v243;
          }
          v124[v164] |= ((v242 >> v241) & ~(-1 << v244)) << v168;
          v241 += v244;
          unint64_t v245 = v244 + v168;
          v164 += v245 >> 6;
          uint64_t v168 = v245 & 0x3F;
          v243 -= v244;
        }
        while (v243);
      }
      v235 += v213;
    }
    unint64_t v246 = v220 - v235;
    if (v246 && v246 <= 0x100 && v168 - v125 + (v164 << 6) + v246 <= 0x180)
    {
      do
      {
        unint64_t v247 = 64 - v168;
        if (64 - v168 >= v246) {
          unint64_t v247 = v246;
        }
        unint64_t v248 = v247 + v168;
        v164 += v248 >> 6;
        uint64_t v168 = v248 & 0x3F;
        v246 -= v247;
      }
      while (v246);
    }
    if (++v224 != 7) {
      continue;
    }
    return v49 & 1;
  }
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(unint64_t result, uint64_t a2, int a3)
{
  unint64_t v3 = result & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = 8 * (result & 7);
  unsigned int v5 = a3 & 0xFFFFFFFD;
  int v6 = ((a3 & 0xFFFFFFFD) == 1) << 15;
  if (a3 == 4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (result & 7);
    while ((unint64_t)(v9 - v4 + (v8 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
    {
      __int16 v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 12;
      do
      {
        unint64_t v14 = 64 - v9;
        if (64 - v9 >= v13) {
          unint64_t v14 = v13;
        }
        v11 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v14)) << v12;
        v12 += v14;
        unint64_t v15 = v14 + v9;
        v8 += v15 >> 6;
        uint64_t v9 = v15 & 0x3F;
        v13 -= v14;
      }
      while (v13);
      uint64_t result = 16 * v7;
      *(_DWORD *)(a2 + 16 * v7) = (16 * (v11 & 0xFFF)) ^ v6;
      if ((unint64_t)(v9 - v4 + (v8 << 6) - 373) < 0xFFFFFFFFFFFFFE7FLL) {
        goto LABEL_4;
      }
      __int16 v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 12;
      do
      {
        unint64_t v19 = 64 - v9;
        if (64 - v9 >= v18) {
          unint64_t v19 = v18;
        }
        v16 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v19)) << v17;
        v17 += v19;
        unint64_t v20 = v19 + v9;
        v8 += v20 >> 6;
        uint64_t v9 = v20 & 0x3F;
        v18 -= v19;
      }
      while (v18);
      uint64_t result = a2 + 16 * v7;
      *(_DWORD *)(result + 4) = (16 * (v16 & 0xFFF)) ^ v6;
      if ((unint64_t)(v9 - v4 + (v8 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
      {
        __int16 v21 = 0;
        uint64_t v22 = 0;
        unint64_t v23 = 12;
        do
        {
          unint64_t v24 = 64 - v9;
          if (64 - v9 >= v23) {
            unint64_t v24 = v23;
          }
          v21 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v24)) << v22;
          v22 += v24;
          unint64_t v25 = v24 + v9;
          v8 += v25 >> 6;
          uint64_t v9 = v25 & 0x3F;
          v23 -= v24;
        }
        while (v23);
        uint64_t result = a2 + 16 * v7;
        *(_DWORD *)(result + 8) = (16 * (v21 & 0xFFF)) ^ v6;
        if ((unint64_t)(v9 - v4 + (v8 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
        {
          __int16 v10 = 0;
          uint64_t v26 = 0;
          uint64_t result = 12;
          do
          {
            unint64_t v27 = 64 - v9;
            if (64 - v9 >= result) {
              unint64_t v27 = result;
            }
            v10 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v27)) << v26;
            v26 += v27;
            unint64_t v28 = v27 + v9;
            v8 += v28 >> 6;
            uint64_t v9 = v28 & 0x3F;
            result -= v27;
          }
          while (result);
        }
        else
        {
          __int16 v10 = 0;
        }
        goto LABEL_6;
      }
LABEL_5:
      __int16 v10 = 0;
      *(_DWORD *)(a2 + 16 * v7 + 8) = v6;
LABEL_6:
      *(_DWORD *)(a2 + 16 * v7++ + 12) = (16 * (v10 & 0xFFF)) ^ v6;
      if (v7 == 8) {
        return result;
      }
    }
    *(_DWORD *)(a2 + 16 * v7) = v6;
LABEL_4:
    *(_DWORD *)(a2 + 16 * v7 + 4) = v6;
    goto LABEL_5;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t result = -1;
  uint64_t v31 = v4;
  do
  {
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
    {
      __int16 v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 12;
      do
      {
        unint64_t v35 = 64 - v31;
        if (64 - v31 >= v34) {
          unint64_t v35 = v34;
        }
        v32 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v35)) << v33;
        v33 += v35;
        unint64_t v36 = v35 + v31;
        v30 += v36 >> 6;
        uint64_t v31 = v36 & 0x3F;
        v34 -= v35;
      }
      while (v34);
    }
    else
    {
      __int16 v32 = 0;
    }
    int v37 = 16 * (v32 & 0xFFF);
    BOOL v38 = v37 == 0x8000 && v5 == 1;
    if (!v38 && v37)
    {
      if (v37 == 65520) {
        int v37 = 0xFFFF;
      }
      else {
        v37 |= 8 - (v32 & 1);
      }
    }
    *(_DWORD *)(a2 + 16 * v29) = v37 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
    {
      __int16 v39 = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 12;
      do
      {
        unint64_t v42 = 64 - v31;
        if (64 - v31 >= v41) {
          unint64_t v42 = v41;
        }
        v39 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v42)) << v40;
        v40 += v42;
        unint64_t v43 = v42 + v31;
        v30 += v43 >> 6;
        uint64_t v31 = v43 & 0x3F;
        v41 -= v42;
      }
      while (v41);
    }
    else
    {
      __int16 v39 = 0;
    }
    int v44 = 16 * (v39 & 0xFFF);
    if ((v44 != 0x8000 || v5 != 1) && v44 != 0)
    {
      int v47 = (8 - (v39 & 1)) | v44;
      if (v44 == 65520) {
        int v44 = 0xFFFF;
      }
      else {
        int v44 = v47;
      }
    }
    *(_DWORD *)(a2 + 16 * v29 + 4) = v44 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
    {
      __int16 v48 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 12;
      do
      {
        unint64_t v51 = 64 - v31;
        if (64 - v31 >= v50) {
          unint64_t v51 = v50;
        }
        v48 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v51)) << v49;
        v49 += v51;
        unint64_t v52 = v51 + v31;
        v30 += v52 >> 6;
        uint64_t v31 = v52 & 0x3F;
        v50 -= v51;
      }
      while (v50);
    }
    else
    {
      __int16 v48 = 0;
    }
    int v53 = 16 * (v48 & 0xFFF);
    if ((v53 != 0x8000 || v5 != 1) && v53 != 0)
    {
      int v56 = (8 - (v48 & 1)) | v53;
      if (v53 == 65520) {
        int v53 = 0xFFFF;
      }
      else {
        int v53 = v56;
      }
    }
    *(_DWORD *)(a2 + 16 * v29 + 8) = v53 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 373) >= 0xFFFFFFFFFFFFFE7FLL)
    {
      __int16 v57 = 0;
      uint64_t v58 = 0;
      unint64_t v59 = 12;
      do
      {
        unint64_t v60 = 64 - v31;
        if (64 - v31 >= v59) {
          unint64_t v60 = v59;
        }
        v57 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v60)) << v58;
        v58 += v60;
        unint64_t v61 = v60 + v31;
        v30 += v61 >> 6;
        uint64_t v31 = v61 & 0x3F;
        v59 -= v60;
      }
      while (v59);
    }
    else
    {
      __int16 v57 = 0;
    }
    int v62 = 16 * (v57 & 0xFFF);
    if ((v62 != 0x8000 || v5 != 1) && v62 != 0)
    {
      int v65 = (8 - (v57 & 1)) | v62;
      if (v62 == 65520) {
        int v62 = 0xFFFF;
      }
      else {
        int v62 = v65;
      }
    }
    *(_DWORD *)(a2 + 16 * v29++ + 12) = v62 ^ v6;
  }
  while (v29 != 8);
  return result;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = 8 * (a1 & 7);
  unint64_t v6 = *(void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v6 >> v5;
  uint64_t v8 = (v6 >> v5) & 0xF;
  uint64_t v9 = v5 | 4;
  if ((v5 | 4uLL) - v5 - 381 >= 0xFFFFFFFFFFFFFE7FLL)
  {
    uint64_t v14 = (v5 + 8) & 0x38;
    unint64_t v12 = (unint64_t)(v5 + 8) >> 6;
    uint64_t v11 = (v6 >> v9) & 0xF;
    uint64_t v15 = (v5 + 8) & 0x40;
    if (((v14 - v5) | 4uLL) + v15 <= 0x180)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v12);
      uint64_t v10 = (v16 >> v14) & 0xF;
      uint64_t v9 = v14 | 4;
      if ((v14 | 4uLL) - v5 + v15 + 4 <= 0x180)
      {
        uint64_t v13 = (v16 >> v9) & 0xF;
        unint64_t v17 = v14 + 8;
        v12 += v17 >> 6;
        uint64_t v9 = v17 & 0x38;
      }
      else
      {
        LODWORD(v13) = 0;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      LODWORD(v13) = 0;
      uint64_t v9 = (v5 + 8) & 0x38;
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v11) = 0;
    unint64_t v12 = 0;
    LODWORD(v13) = 0;
  }
  memset_pattern16(&__b, &unk_242EA88A0, 0x10uLL);
  memset_pattern16(&v223, &unk_242EA88B0, 0x10uLL);
  v227[0] = v8;
  v227[1] = v11;
  v227[2] = v10;
  v227[3] = v13;
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  uint64_t v215 = 0;
  uint64_t v216 = 0;
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::deriveLossyDQuadBitSharing(&v223, v227, &v217, &v215);
  LODWORD(v20) = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
                 + 4 * v223
                 + 1);
  unint64_t v19 = (unint64_t)&kDQuadParamTable[160 * v223 + 10 * (v7 & 0xF)];
  int v18 = *(_DWORD *)(v19 + 20);
  LODWORD(v19) = *(_DWORD *)(v19 + 16) + v20;
  LODWORD(v20) = v18 + v20;
  int v21 = v215 - v217;
  if ((int)v215 - (int)v217 < 0)
  {
    if (kDQuadParamTable[160 * v223 + 7 + 10 * (v7 & 0xF)] >= (int)v217 - (int)v215) {
      goto LABEL_14;
    }
    LODWORD(v20) = v20 - 1;
    if (kDQuadParamTable[160 * v223 + 8 + 10 * (v7 & 0xF)]) {
      goto LABEL_14;
    }
    int v21 = -1;
  }
  else
  {
    if (!v21) {
      goto LABEL_14;
    }
    LODWORD(v20) = v21 + v20;
  }
  LODWORD(v19) = v21 + v19;
LABEL_14:
  if (__b >= v19) {
    unint64_t v19 = v19;
  }
  else {
    unint64_t v19 = __b;
  }
  v214[0] = v19;
  if (v18) {
    unsigned int v22 = __b;
  }
  else {
    unsigned int v22 = 0;
  }
  if (v22 >= v20) {
    unint64_t v20 = v20;
  }
  else {
    unint64_t v20 = v22;
  }
  v213[0] = v20;
  int v23 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v224
        + 1);
  unint64_t v24 = &kDQuadParamTable[160 * v224 + 10 * v11];
  int v26 = v24[4];
  int v25 = v24[5];
  unsigned int v27 = v26 + v23;
  LODWORD(v28) = v25 + v23;
  int v29 = HIDWORD(v215) - HIDWORD(v217);
  if (HIDWORD(v215) - HIDWORD(v217) < 0)
  {
    if (kDQuadParamTable[160 * v224 + 7 + 10 * v11] >= HIDWORD(v217) - HIDWORD(v215)) {
      goto LABEL_29;
    }
    LODWORD(v28) = v28 - 1;
    if (kDQuadParamTable[160 * v224 + 8 + 10 * v11]) {
      goto LABEL_29;
    }
    int v29 = -1;
  }
  else
  {
    if (!v29) {
      goto LABEL_29;
    }
    LODWORD(v28) = v29 + v28;
  }
  v27 += v29;
LABEL_29:
  if (v220 >= v27) {
    unint64_t v30 = v27;
  }
  else {
    unint64_t v30 = v220;
  }
  v214[1] = v30;
  if (v25) {
    unsigned int v31 = v220;
  }
  else {
    unsigned int v31 = 0;
  }
  if (v31 >= v28) {
    unint64_t v28 = v28;
  }
  else {
    unint64_t v28 = v31;
  }
  v213[1] = v28;
  int v32 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v225
        + 1);
  uint64_t v33 = &kDQuadParamTable[160 * v225 + 10 * v10];
  int v35 = v33[4];
  int v34 = v33[5];
  unsigned int v36 = v35 + v32;
  LODWORD(v37) = v34 + v32;
  int v38 = v216 - v218;
  if ((int)v216 - (int)v218 < 0)
  {
    if (kDQuadParamTable[160 * v225 + 7 + 10 * v10] >= (int)v218 - (int)v216) {
      goto LABEL_44;
    }
    LODWORD(v37) = v37 - 1;
    if (kDQuadParamTable[160 * v225 + 8 + 10 * v10]) {
      goto LABEL_44;
    }
    int v38 = -1;
  }
  else
  {
    if (!v38) {
      goto LABEL_44;
    }
    LODWORD(v37) = v38 + v37;
  }
  v36 += v38;
LABEL_44:
  if (v221 >= v36) {
    unint64_t v39 = v36;
  }
  else {
    unint64_t v39 = v221;
  }
  v214[2] = v39;
  if (v34) {
    unsigned int v40 = v221;
  }
  else {
    unsigned int v40 = 0;
  }
  if (v40 >= v37) {
    unint64_t v37 = v37;
  }
  else {
    unint64_t v37 = v40;
  }
  v213[2] = v37;
  int v41 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v226
        + 1);
  unint64_t v43 = (unint64_t)&kDQuadParamTable[160 * v226 + 10 * v13];
  int v42 = *(_DWORD *)(v43 + 20);
  LODWORD(v43) = *(_DWORD *)(v43 + 16) + v41;
  LODWORD(v44) = v42 + v41;
  int v45 = HIDWORD(v216) - HIDWORD(v218);
  if (HIDWORD(v216) - HIDWORD(v218) < 0)
  {
    if (kDQuadParamTable[160 * v226 + 7 + 10 * v13] >= HIDWORD(v218) - HIDWORD(v216)) {
      goto LABEL_59;
    }
    LODWORD(v44) = v44 - 1;
    if (kDQuadParamTable[160 * v226 + 8 + 10 * v13]) {
      goto LABEL_59;
    }
    int v45 = -1;
  }
  else
  {
    if (!v45) {
      goto LABEL_59;
    }
    LODWORD(v44) = v45 + v44;
  }
  LODWORD(v43) = v45 + v43;
LABEL_59:
  if (v222 >= v43) {
    unint64_t v43 = v43;
  }
  else {
    unint64_t v43 = v222;
  }
  v214[3] = v43;
  if (v42) {
    unsigned int v46 = v222;
  }
  else {
    unsigned int v46 = 0;
  }
  if (v46 >= v44) {
    unint64_t v44 = v44;
  }
  else {
    unint64_t v44 = v46;
  }
  v213[3] = v44;
  uint64_t v211 = 0;
  uint64_t v212 = 0;
  if (v8 || __b - 8 >= 5)
  {
    if (v19 <= 0x20)
    {
      int v48 = 0;
      if (v19 && v9 - v5 + (v12 << 6) + v19 <= 0x180)
      {
        int v48 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = v19;
        do
        {
          unint64_t v51 = 64 - v9;
          if (64 - v9 >= v50) {
            unint64_t v51 = v50;
          }
          v48 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v51)) << v49;
          v49 += v51;
          v12 += (v51 + v9) >> 6;
          uint64_t v9 = (v51 + v9) & 0x3F;
          v50 -= v51;
        }
        while (v50);
      }
    }
    else
    {
      int v48 = 0;
    }
    LODWORD(v211) = v48 << (__b - v19);
    int v47 = v19 + 16;
    if (v11)
    {
LABEL_84:
      if (v30 <= 0x20)
      {
        int v52 = 0;
        if (v30 && v9 - v5 + (v12 << 6) + v30 <= 0x180)
        {
          int v52 = 0;
          uint64_t v53 = 0;
          unint64_t v54 = v30;
          do
          {
            unint64_t v55 = 64 - v9;
            if (64 - v9 >= v54) {
              unint64_t v55 = v54;
            }
            v52 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v55)) << v53;
            v53 += v55;
            v12 += (v55 + v9) >> 6;
            uint64_t v9 = (v55 + v9) & 0x3F;
            v54 -= v55;
          }
          while (v54);
        }
      }
      else
      {
        int v52 = 0;
      }
      HIDWORD(v211) = v52 << (v220 - v30);
      v47 += v30;
      if (v10) {
        goto LABEL_96;
      }
      goto LABEL_93;
    }
  }
  else
  {
    int v47 = 16;
    if (v11) {
      goto LABEL_84;
    }
  }
  if (v220 - 8 >= 5) {
    goto LABEL_84;
  }
  HIDWORD(v211) = 0;
  if (v10) {
    goto LABEL_96;
  }
LABEL_93:
  if (v221 - 8 < 5)
  {
    LODWORD(v212) = 0;
    if (v13) {
      goto LABEL_108;
    }
    goto LABEL_105;
  }
LABEL_96:
  if (v39 <= 0x20)
  {
    int v56 = 0;
    if (v39 && v9 - v5 + (v12 << 6) + v39 <= 0x180)
    {
      int v56 = 0;
      uint64_t v57 = 0;
      unint64_t v58 = v39;
      do
      {
        unint64_t v59 = 64 - v9;
        if (64 - v9 >= v58) {
          unint64_t v59 = v58;
        }
        v56 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v59)) << v57;
        v57 += v59;
        v12 += (v59 + v9) >> 6;
        uint64_t v9 = (v59 + v9) & 0x3F;
        v58 -= v59;
      }
      while (v58);
    }
  }
  else
  {
    int v56 = 0;
  }
  LODWORD(v212) = v56 << (v221 - v39);
  v47 += v39;
  if (v13)
  {
LABEL_108:
    if (v43 <= 0x20)
    {
      int v61 = 0;
      if (v43)
      {
        uint64_t v60 = a2;
        if (v9 - v5 + (v12 << 6) + v43 <= 0x180)
        {
          int v61 = 0;
          uint64_t v62 = 0;
          unint64_t v63 = v43;
          do
          {
            unint64_t v64 = 64 - v9;
            if (64 - v9 >= v63) {
              unint64_t v64 = v63;
            }
            v61 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v64)) << v62;
            v62 += v64;
            v12 += (v64 + v9) >> 6;
            uint64_t v9 = (v64 + v9) & 0x3F;
            v63 -= v64;
          }
          while (v63);
        }
LABEL_118:
        HIDWORD(v212) = v61 << (v222 - v43);
        v47 += v43;
        uint64_t v209 = 0;
        uint64_t v210 = 0;
        if (v20) {
          goto LABEL_119;
        }
        goto LABEL_126;
      }
    }
    else
    {
      int v61 = 0;
    }
    uint64_t v60 = a2;
    goto LABEL_118;
  }
LABEL_105:
  if (v222 - 8 >= 5) {
    goto LABEL_108;
  }
  HIDWORD(v212) = 0;
  uint64_t v60 = a2;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  if (v20)
  {
LABEL_119:
    if (v9 - v5 + (v12 << 6) + 3 <= 0x180)
    {
      int v65 = 0;
      uint64_t v66 = 0;
      unint64_t v67 = 3;
      do
      {
        unint64_t v68 = 64 - v9;
        if (64 - v9 >= v67) {
          unint64_t v68 = v67;
        }
        v65 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v68)) << v66;
        v66 += v68;
        v12 += (v68 + v9) >> 6;
        uint64_t v9 = (v68 + v9) & 0x3F;
        v67 -= v68;
      }
      while (v67);
    }
    else
    {
      int v65 = 0;
    }
    LODWORD(v209) = v65;
    v47 += 3;
  }
LABEL_126:
  if (v28)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x180)
    {
      int v69 = 0;
      uint64_t v70 = 0;
      unint64_t v71 = 3;
      do
      {
        unint64_t v72 = 64 - v9;
        if (64 - v9 >= v71) {
          unint64_t v72 = v71;
        }
        v69 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v72)) << v70;
        v70 += v72;
        v12 += (v72 + v9) >> 6;
        uint64_t v9 = (v72 + v9) & 0x3F;
        v71 -= v72;
      }
      while (v71);
    }
    else
    {
      int v69 = 0;
    }
    HIDWORD(v209) = v69;
    v47 += 3;
  }
  if (v37)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x180)
    {
      int v73 = 0;
      uint64_t v74 = 0;
      unint64_t v75 = 3;
      do
      {
        unint64_t v76 = 64 - v9;
        if (64 - v9 >= v75) {
          unint64_t v76 = v75;
        }
        v73 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v76)) << v74;
        v74 += v76;
        v12 += (v76 + v9) >> 6;
        uint64_t v9 = (v76 + v9) & 0x3F;
        v75 -= v76;
      }
      while (v75);
    }
    else
    {
      int v73 = 0;
    }
    LODWORD(v210) = v73;
    v47 += 3;
  }
  if (v44)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x180)
    {
      int v77 = 0;
      uint64_t v78 = 0;
      unint64_t v79 = 3;
      do
      {
        unint64_t v80 = 64 - v9;
        if (64 - v9 >= v79) {
          unint64_t v80 = v79;
        }
        v77 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v80)) << v78;
        v78 += v80;
        v12 += (v80 + v9) >> 6;
        uint64_t v9 = (v80 + v9) & 0x3F;
        v79 -= v80;
      }
      while (v79);
    }
    else
    {
      int v77 = 0;
    }
    HIDWORD(v210) = v77;
    v47 += 3;
  }
  uint64_t v81 = 0;
  unsigned int v82 = a3 & 0xFFFFFFFD;
  unsigned int v83 = 384 - v47;
  unsigned int v84 = (384 - v47) / 7u;
  unint64_t v85 = (v9 | (v12 << 6)) + v83 % 7;
  memset(v208, 0, sizeof(v208));
  do
  {
    unint64_t v88 = v85 >> 6;
    unint64_t v89 = v85 & 0x3F;
    if (v20)
    {
      if (v20 <= 0x20 && v89 - v5 + (v85 & 0xFFFFFFFFFFFFFFC0) + v20 <= 0x180)
      {
        int v90 = 0;
        uint64_t v91 = 0;
        unint64_t v92 = v20;
        do
        {
          unint64_t v93 = 64 - v89;
          if (64 - v89 >= v92) {
            unint64_t v93 = v92;
          }
          v90 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v93)) << v91;
          v91 += v93;
          unint64_t v94 = v93 + v89;
          v88 += v94 >> 6;
          unint64_t v89 = v94 & 0x3F;
          v92 -= v93;
        }
        while (v92);
      }
      else
      {
        int v90 = 0;
      }
      *((_DWORD *)v208 + v81) = v90;
    }
    if (!v28)
    {
      int v87 = v20;
      if (!v37) {
        goto LABEL_182;
      }
LABEL_174:
      if (v37 <= 0x20 && v89 - v5 + (v88 << 6) + v37 <= 0x180)
      {
        int v100 = 0;
        uint64_t v101 = 0;
        unint64_t v102 = v37;
        do
        {
          unint64_t v103 = 64 - v89;
          if (64 - v89 >= v102) {
            unint64_t v103 = v102;
          }
          v100 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v103)) << v101;
          v101 += v103;
          unint64_t v104 = v103 + v89;
          v88 += v104 >> 6;
          unint64_t v89 = v104 & 0x3F;
          v102 -= v103;
        }
        while (v102);
      }
      else
      {
        int v100 = 0;
      }
      *((_DWORD *)&v208[3] + v81 + 2) = v100;
      v87 += v37;
      goto LABEL_182;
    }
    if (v28 <= 0x20 && v89 - v5 + (v88 << 6) + v28 <= 0x180)
    {
      int v95 = 0;
      uint64_t v96 = 0;
      unint64_t v97 = v28;
      do
      {
        unint64_t v98 = 64 - v89;
        if (64 - v89 >= v97) {
          unint64_t v98 = v97;
        }
        v95 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v98)) << v96;
        v96 += v98;
        unint64_t v99 = v98 + v89;
        v88 += v99 >> 6;
        unint64_t v89 = v99 & 0x3F;
        v97 -= v98;
      }
      while (v97);
    }
    else
    {
      int v95 = 0;
    }
    *((_DWORD *)&v208[1] + v81 + 3) = v95;
    int v87 = v28 + v20;
    if (v37) {
      goto LABEL_174;
    }
LABEL_182:
    if (v44)
    {
      if (v44 > 0x20 || v89 - v5 + (v88 << 6) + v44 > 0x180)
      {
        int v86 = 0;
      }
      else
      {
        int v86 = 0;
        uint64_t v105 = 0;
        unint64_t v106 = v44;
        do
        {
          unint64_t v107 = 64 - v89;
          if (64 - v89 >= v106) {
            unint64_t v107 = v106;
          }
          v86 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v107)) << v105;
          v105 += v107;
          unint64_t v108 = v107 + v89;
          v88 += v108 >> 6;
          unint64_t v89 = v108 & 0x3F;
          v106 -= v107;
        }
        while (v106);
      }
      *((_DWORD *)&v208[5] + v81 + 1) = v86;
      v87 += v44;
    }
    unint64_t v85 = (v89 | (v88 << 6)) + v84 - v87;
    ++v81;
  }
  while (v81 != 7);
  unint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = v60 + 112;
  do
  {
    unint64_t v116 = *(void *)&kDQuadParamTable[160 * *(unsigned int *)((char *)&v223 + v109) + 2 + 10 * v227[v109 / 4]];
    int v117 = v213[v109 / 4];
    unint64_t v118 = v116 >> v117;
    if (v116 >> v117 <= 1) {
      unint64_t v118 = 1;
    }
    int v119 = *(unsigned int *)((char *)&__b + v109);
    unint64_t v120 = v118 >> 1;
    unint64_t v121 = (unint64_t)(1 << (v119 - v214[v109 / 4])) >> 1;
    if (v118 >> 1 < v121) {
      unint64_t v121 = v118 >> 1;
    }
    unint64_t v122 = (1 << (v119 - 1));
    unint64_t v123 = *(unsigned int *)((char *)&v211 + v109);
    unint64_t v124 = v122 - v123;
    unint64_t v125 = 1 << v119;
    int v126 = (1 << v119) - 1;
    if (v123) {
      unint64_t v127 = v121;
    }
    else {
      unint64_t v127 = 0;
    }
    BOOL v128 = v123 == v122;
    BOOL v129 = v119 == 16;
    if (v119 == 16) {
      unint64_t result = 31744;
    }
    else {
      unint64_t result = 2139095040;
    }
    if (v119 == 16) {
      unint64_t v131 = 64512;
    }
    else {
      unint64_t v131 = 4286578688;
    }
    unint64_t v132 = 2143289344;
    if (v129) {
      unint64_t v132 = 32256;
    }
    unint64_t v133 = 4290772992;
    if (v129) {
      unint64_t v133 = 65024;
    }
    unint64_t v134 = (v131 - 1);
    if (v117)
    {
      unint64_t v135 = v116 + v123;
      uint64_t v136 = ~(-1 << v117);
      int v137 = *(_DWORD *)((char *)&v209 + v109);
      unint64_t v138 = v124 / v118;
      if (!v137)
      {
        uint64_t v147 = 0;
        unint64_t v141 = v127;
        BOOL v140 = v123 == v122;
        goto LABEL_253;
      }
      uint64_t v139 = *(unsigned int *)((char *)v208 + v110);
      BOOL v140 = v138 == v139;
      if (v123 | v139)
      {
        if (v135 >= v125 && v139 == v136)
        {
          uint64_t v147 = 1;
          unint64_t v141 = v125 - 1;
          goto LABEL_253;
        }
        unint64_t v141 = v120 + v118 * v139;
      }
      else
      {
        unint64_t v141 = 0;
      }
      uint64_t v147 = 1;
LABEL_253:
      unint64_t v148 = v141 + v123;
      unint64_t v149 = v148;
      if (a3 == 4)
      {
        BOOL v150 = v148 < result || v148 >= v132;
        unint64_t v149 = (result - 1);
        if (v150)
        {
          BOOL v151 = v148 < v132 || v148 >= v122;
          unint64_t v149 = v122;
          if (v151)
          {
            if (v148 < v133 && v148 >= v131) {
              unint64_t v149 = (v131 - 1);
            }
            else {
              unint64_t v149 = v148;
            }
          }
        }
      }
      if (v149 >= v125) {
        int v153 = v126;
      }
      else {
        int v153 = v149;
      }
      if (v140) {
        int v154 = 0;
      }
      else {
        int v154 = v153 ^ v122;
      }
      if (v82 != 1) {
        int v154 = v153;
      }
      *(_DWORD *)(v111 + v109 - 112) = v154;
      if (v137 == 1)
      {
        unint64_t v155 = v127;
        BOOL v156 = v123 == v122;
      }
      else
      {
        uint64_t v157 = *(unsigned int *)(((unint64_t)v208 | (4 * v147)) + v110);
        BOOL v156 = v138 == v157;
        if (v123 | v157)
        {
          if (v135 < v125 || (unint64_t v155 = v125 - 1, v157 != v136)) {
            unint64_t v155 = v120 + v118 * v157;
          }
        }
        else
        {
          unint64_t v155 = 0;
        }
        ++v147;
      }
      unint64_t v158 = v155 + v123;
      unint64_t v159 = v158;
      if (a3 == 4)
      {
        BOOL v160 = v158 < result || v158 >= v132;
        unint64_t v159 = (result - 1);
        if (v160)
        {
          if (v158 < v132 || (unint64_t v159 = v122, v158 >= v122))
          {
            if (v158 < v133 && v158 >= v131) {
              unint64_t v159 = (v131 - 1);
            }
            else {
              unint64_t v159 = v158;
            }
          }
        }
      }
      if (v159 >= v125) {
        int v162 = v126;
      }
      else {
        int v162 = v159;
      }
      if (v156) {
        int v163 = 0;
      }
      else {
        int v163 = v162 ^ v122;
      }
      if (v82 != 1) {
        int v163 = v162;
      }
      *(_DWORD *)(v111 + v109 - 96) = v163;
      if (v137 == 2)
      {
        unint64_t v164 = v127;
        BOOL v165 = v123 == v122;
      }
      else
      {
        uint64_t v166 = *(unsigned int *)(((unint64_t)v208 | (4 * v147)) + v110);
        BOOL v165 = v138 == v166;
        if (v123 | v166)
        {
          if (v135 < v125 || (unint64_t v164 = v125 - 1, v166 != v136)) {
            unint64_t v164 = v120 + v118 * v166;
          }
        }
        else
        {
          unint64_t v164 = 0;
        }
        ++v147;
      }
      unint64_t v167 = v164 + v123;
      unint64_t v168 = v167;
      if (a3 == 4)
      {
        if (v167 < result || (unint64_t v168 = (result - 1), v167 >= v132))
        {
          if (v167 < v132 || (unint64_t v168 = v122, v167 >= v122))
          {
            if (v167 < v133 && v167 >= v131) {
              unint64_t v168 = (v131 - 1);
            }
            else {
              unint64_t v168 = v167;
            }
          }
        }
      }
      if (v168 >= v125) {
        int v170 = v126;
      }
      else {
        int v170 = v168;
      }
      if (v165) {
        int v171 = 0;
      }
      else {
        int v171 = v170 ^ v122;
      }
      if (v82 != 1) {
        int v171 = v170;
      }
      *(_DWORD *)(v111 + v109 - 80) = v171;
      if (v137 == 3)
      {
        unint64_t v172 = v127;
        BOOL v173 = v123 == v122;
      }
      else
      {
        uint64_t v174 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v173 = v138 == v174;
        if (v123 | v174)
        {
          if (v135 < v125 || (unint64_t v172 = v125 - 1, v174 != v136)) {
            unint64_t v172 = v120 + v118 * v174;
          }
        }
        else
        {
          unint64_t v172 = 0;
        }
        ++v147;
      }
      unint64_t v175 = v172 + v123;
      unint64_t v176 = v175;
      if (a3 == 4)
      {
        if (v175 < result || (unint64_t v176 = (result - 1), v175 >= v132))
        {
          if (v175 < v132 || (unint64_t v176 = v122, v175 >= v122))
          {
            if (v175 < v133 && v175 >= v131) {
              unint64_t v176 = (v131 - 1);
            }
            else {
              unint64_t v176 = v175;
            }
          }
        }
      }
      if (v176 >= v125) {
        int v178 = v126;
      }
      else {
        int v178 = v176;
      }
      if (v173) {
        int v179 = 0;
      }
      else {
        int v179 = v178 ^ v122;
      }
      if (v82 != 1) {
        int v179 = v178;
      }
      *(_DWORD *)(v111 + v109 - 64) = v179;
      if (v137 == 4)
      {
        unint64_t v180 = v127;
        BOOL v181 = v123 == v122;
      }
      else
      {
        uint64_t v182 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v181 = v138 == v182;
        if (v123 | v182)
        {
          if (v135 < v125 || (unint64_t v180 = v125 - 1, v182 != v136)) {
            unint64_t v180 = v120 + v118 * v182;
          }
        }
        else
        {
          unint64_t v180 = 0;
        }
        ++v147;
      }
      unint64_t v183 = v180 + v123;
      unint64_t v184 = v183;
      if (a3 == 4)
      {
        if (v183 < result || (unint64_t v184 = (result - 1), v183 >= v132))
        {
          if (v183 < v132 || (unint64_t v184 = v122, v183 >= v122))
          {
            if (v183 < v133 && v183 >= v131) {
              unint64_t v184 = (v131 - 1);
            }
            else {
              unint64_t v184 = v183;
            }
          }
        }
      }
      if (v184 >= v125) {
        int v186 = v126;
      }
      else {
        int v186 = v184;
      }
      if (v181) {
        int v187 = 0;
      }
      else {
        int v187 = v186 ^ v122;
      }
      if (v82 != 1) {
        int v187 = v186;
      }
      *(_DWORD *)(v111 + v109 - 48) = v187;
      if (v137 == 5)
      {
        unint64_t v188 = v127;
        BOOL v189 = v123 == v122;
      }
      else
      {
        uint64_t v190 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v189 = v138 == v190;
        if (v123 | v190)
        {
          if (v135 < v125 || (unint64_t v188 = v125 - 1, v190 != v136)) {
            unint64_t v188 = v120 + v118 * v190;
          }
        }
        else
        {
          unint64_t v188 = 0;
        }
        ++v147;
      }
      unint64_t v191 = v188 + v123;
      unint64_t v192 = v191;
      if (a3 == 4)
      {
        if (v191 < result || (unint64_t v192 = (result - 1), v191 >= v132))
        {
          if (v191 < v132 || (unint64_t v192 = v122, v191 >= v122))
          {
            if (v191 < v133 && v191 >= v131) {
              unint64_t v192 = (v131 - 1);
            }
            else {
              unint64_t v192 = v191;
            }
          }
        }
      }
      if (v192 >= v125) {
        int v194 = v126;
      }
      else {
        int v194 = v192;
      }
      if (v189) {
        int v195 = 0;
      }
      else {
        int v195 = v194 ^ v122;
      }
      if (v82 != 1) {
        int v195 = v194;
      }
      *(_DWORD *)(v111 + v109 - 32) = v195;
      if (v137 == 6)
      {
        unint64_t v196 = v127;
        BOOL v197 = v123 == v122;
      }
      else
      {
        uint64_t v198 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v197 = v138 == v198;
        if (v123 | v198)
        {
          if (v135 < v125 || (unint64_t v196 = v125 - 1, v198 != v136)) {
            unint64_t v196 = v120 + v118 * v198;
          }
        }
        else
        {
          unint64_t v196 = 0;
        }
        ++v147;
      }
      unint64_t v199 = v196 + v123;
      unint64_t v200 = v199;
      if (a3 == 4)
      {
        if (v199 < result || (unint64_t v200 = (result - 1), v199 >= v132))
        {
          if (v199 < v132 || (unint64_t v200 = v122, v199 >= v122))
          {
            if (v199 < v133 && v199 >= v131) {
              unint64_t v200 = (v131 - 1);
            }
            else {
              unint64_t v200 = v199;
            }
          }
        }
      }
      if (v200 >= v125) {
        int v202 = v126;
      }
      else {
        int v202 = v200;
      }
      if (v197) {
        int v203 = 0;
      }
      else {
        int v203 = v202 ^ v122;
      }
      if (v82 != 1) {
        int v203 = v202;
      }
      *(_DWORD *)(v111 + v109 - 16) = v203;
      if (v137 != 7)
      {
        uint64_t v204 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v128 = v138 == v204;
        if (v123 | v204)
        {
          if (v135 >= v125 && v204 == v136) {
            unint64_t v127 = v125 - 1;
          }
          else {
            unint64_t v127 = v120 + v118 * v204;
          }
        }
        else
        {
          unint64_t v127 = 0;
        }
      }
      unint64_t v205 = v127 + v123;
      unint64_t v113 = v127 + v123;
      if (a3 == 4)
      {
        if (v205 < result || (unint64_t v113 = (result - 1), v205 >= v132))
        {
          if (v205 < v132 || (unint64_t v113 = v122, v205 >= v122))
          {
            if (v205 < v133 && v205 >= v131) {
              unint64_t v113 = (v131 - 1);
            }
            else {
              unint64_t v113 = v127 + v123;
            }
          }
        }
      }
      if (v113 >= v125) {
        int v114 = v126;
      }
      else {
        int v114 = v113;
      }
      int v115 = v114 ^ v122;
      if (v128) {
        int v115 = 0;
      }
      if (v82 == 1) {
        int v114 = v115;
      }
      goto LABEL_204;
    }
    BOOL v143 = v132 <= v123 && v123 < v122;
    BOOL v145 = v123 >= v131 && v133 > v123;
    if (a3 == 4)
    {
      if (v123 < result || v132 <= v123)
      {
        if (v143)
        {
          if (v125 <= v122) {
            LODWORD(v146) = v126;
          }
          else {
            LODWORD(v146) = v122;
          }
        }
        else
        {
          if (v145) {
            unint64_t v146 = v134;
          }
          else {
            unint64_t v146 = *(unsigned int *)((char *)&v211 + v109);
          }
          if (v146 >= v125) {
            LODWORD(v146) = v126;
          }
        }
      }
      else if (v125 <= (result - 1))
      {
        LODWORD(v146) = v126;
      }
      else
      {
        LODWORD(v146) = result - 1;
      }
    }
    else if (v125 <= v123)
    {
      LODWORD(v146) = v126;
    }
    else
    {
      LODWORD(v146) = *(_DWORD *)((char *)&v211 + v109);
    }
    if (v118 <= v124) {
      int v114 = v146 ^ v122;
    }
    else {
      int v114 = 0;
    }
    if (v82 != 1) {
      int v114 = v146;
    }
    uint64_t v206 = v111 + v109;
    *(_DWORD *)(v206 - 112) = v114;
    *(_DWORD *)(v206 - 96) = v114;
    *(_DWORD *)(v206 - 80) = v114;
    *(_DWORD *)(v206 - 64) = v114;
    *(_DWORD *)(v206 - 48) = v114;
    *(_DWORD *)(v206 - 32) = v114;
    *(_DWORD *)(v206 - 16) = v114;
LABEL_204:
    *(_DWORD *)(v111 + v109) = v114;
    v110 += 28;
    v109 += 4;
  }
  while (v110 != 112);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v459 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v11 = (_OWORD *)(a1 + a2);
    v11[2] = 0u;
    v11[3] = 0u;
    *uint64_t v11 = 0u;
    v11[1] = 0u;
    unint64_t v12 = (_OWORD *)(a1 + 2 * a2);
    v12[2] = 0u;
    v12[3] = 0u;
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    uint64_t v13 = (_OWORD *)(a1 + a2 + 2 * a2);
    v13[2] = 0u;
    v13[3] = 0u;
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    return result;
  }
  char v7 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v440, a5);
    }
    int32x4_t v434 = (int32x4_t)v442;
    int32x4_t v430 = v440;
    int32x4_t v432 = v443;
    int32x4_t v424 = v445;
    int32x4_t v425 = (int32x4_t)v441;
    unint64_t v18 = a3 + 48;
    int32x4_t v426 = v446;
    int32x4_t v428 = v444;
    int32x4_t v423 = v447;
    if ((v7 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v18, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v18, (uint64_t)&v440, a5);
    }
    int32x4_t v421 = (int32x4_t)v441;
    int32x4_t v422 = v440;
    int32x4_t v419 = v443;
    int32x4_t v420 = (int32x4_t)v442;
    int32x4_t v417 = v445;
    int32x4_t v418 = v444;
    unint64_t v39 = a3 + 96;
    int32x4_t v415 = v447;
    int32x4_t v416 = v446;
    if ((v7 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v39, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v39, (uint64_t)&v440, a5);
    }
    int32x4_t v413 = (int32x4_t)v441;
    int32x4_t v414 = v440;
    int32x4_t v411 = v443;
    int32x4_t v412 = (int32x4_t)v442;
    int32x4_t v409 = v445;
    int32x4_t v410 = v444;
    unint64_t v40 = a3 + 144;
    int32x4_t v407 = v447;
    int32x4_t v408 = v446;
    if ((v7 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v40, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v40, (uint64_t)&v440, a5);
    }
    int32x4_t v41 = v440;
    int32x4_t v42 = (int32x4_t)v441;
    int32x4_t v43 = (int32x4_t)v442;
    int32x4_t v44 = v443;
    int32x4_t v45 = v444;
    int32x4_t v46 = v445;
    int32x4_t v47 = v446;
    int32x4_t v48 = v447;
    *(int16x4_t *)a1 = vmovn_s32(v430);
    *(int16x4_t *)(a1 + 8) = vmovn_s32(v425);
    *(int16x4_t *)(a1 + 16) = vmovn_s32(v428);
    *(int16x4_t *)(a1 + 24) = vmovn_s32(v424);
    *(int16x4_t *)(a1 + 32) = vmovn_s32(v414);
    *(int16x4_t *)(a1 + 40) = vmovn_s32(v413);
    *(int16x4_t *)(a1 + 48) = vmovn_s32(v410);
    *(int16x4_t *)(a1 + 56) = vmovn_s32(v409);
    uint64_t v49 = (int16x4_t *)(a1 + a2);
    *uint64_t v49 = vmovn_s32(v434);
    v49[1] = vmovn_s32(v432);
    v49[2] = vmovn_s32(v426);
    v49[3] = vmovn_s32(v423);
    v49[4] = vmovn_s32(v412);
    v49[5] = vmovn_s32(v411);
    v49[6] = vmovn_s32(v408);
    v49[7] = vmovn_s32(v407);
    unint64_t v50 = (int16x4_t *)(a1 + a2 + a2);
    *unint64_t v50 = vmovn_s32(v422);
    v50[1] = vmovn_s32(v421);
    v50[2] = vmovn_s32(v418);
    v50[3] = vmovn_s32(v417);
    v50[4] = vmovn_s32(v41);
    v50[5] = vmovn_s32(v42);
    v50[6] = vmovn_s32(v45);
    v50[7] = vmovn_s32(v46);
    unint64_t v51 = (int16x4_t *)((char *)v50 + a2);
    *unint64_t v51 = vmovn_s32(v420);
    v51[1] = vmovn_s32(v419);
    v51[2] = vmovn_s32(v416);
    v51[3] = vmovn_s32(v415);
    v51[4] = vmovn_s32(v43);
    v51[5] = vmovn_s32(v44);
    uint64_t result = 192;
    v51[6] = vmovn_s32(v47);
    v51[7] = vmovn_s32(v48);
    return result;
  }
  if (a4 == 7)
  {
    float64x2_t v14 = vld1q_dup_f64((const double *)a3);
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    uint64_t v15 = (float64x2_t *)(a1 + a2);
    *uint64_t v15 = v14;
    v15[1] = v14;
    v15[2] = v14;
    v15[3] = v14;
    unint64_t v16 = (float64x2_t *)(a1 + 2 * a2);
    *unint64_t v16 = v14;
    v16[1] = v14;
    v16[2] = v14;
    v16[3] = v14;
    unint64_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *unint64_t v17 = v14;
    v17[1] = v14;
    uint64_t result = 8;
LABEL_239:
    v17[2] = v14;
    v17[3] = v14;
    return result;
  }
  unsigned __int8 v439 = 0;
  unint64_t v436 = 8 * (a3 & 7);
  unint64_t v437 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v438 = v436 | 0x600;
  uint64_t result = AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)18,AGX::AppleCompressionGen2::Vec<short>>((uint64_t)&v453, (uint64_t)v458, (double *)v452.i64, &v436, a4);
  v20.i64[0] = 0x3000300030003;
  v20.i64[1] = 0x3000300030003;
  int8x16_t v21 = v453;
  int16x8_t v22 = (int16x8_t)vandq_s8(v453, v20);
  int8x16_t v23 = vbicq_s8(v458[0], (int8x16_t)vceqq_s16(v22, (int16x8_t)v20));
  v458[0] = v23;
  int16x8_t v454 = (int16x8_t)v23;
  int16x8_t v455 = (int16x8_t)v23;
  int16x8_t v456 = (int16x8_t)v23;
  int16x8_t v457 = (int16x8_t)v23;
  v24.i64[0] = 0x202020202020202;
  v24.i64[1] = 0x202020202020202;
  int8x16_t v25 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v453.i8, (int16x4_t)0x4000400040004)), v24);
  unint64_t v26 = v436;
  if (vmaxvq_s8(v25) < 1)
  {
    v52.i64[0] = -1;
    v52.i64[1] = -1;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
  }
  else
  {
    int8x16_t v27 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v25, v25));
    int8x16_t v28 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v27, (int16x8_t)v27));
    unint64_t v29 = vpaddq_s32((int32x4_t)v28, (int32x4_t)v28).u64[0];
    v30.i64[0] = v29;
    v30.i64[1] = HIDWORD(v29);
    int64x2_t v31 = v30;
    unint64_t v32 = vaddvq_s64(v30);
    unint64_t v33 = v32;
    unint64_t v34 = v436 + v32;
    if (v438) {
      BOOL v35 = v438 >= v34;
    }
    else {
      BOOL v35 = 1;
    }
    int v36 = !v35;
    if (v32 <= 0x80 && v36 == 0)
    {
      v19.i64[0] = 63;
      int v56 = (int64x2_t *)(v437 + 8 * (v436 >> 6));
      int64x2_t v57 = vaddq_s64(vdupq_lane_s64(vandq_s8((int8x16_t)v436, v19).i64[0], 0), vzip1q_s64((int64x2_t)0, v31));
      int8x16_t v38 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v56, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56->i64[0], 0), (uint64x2_t)vnegq_s64(v57)));
      if ((v436 & 0x3F) + v33 >= 0x81) {
        int8x16_t v38 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v56[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v57))), v38);
      }
      unint64_t v436 = v34;
      unint64_t v26 = v34;
    }
    else
    {
      unsigned __int8 v439 = 1;
      int8x16_t v38 = 0uLL;
    }
    int32x2_t v58 = vzip1_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
    v59.i64[0] = v58.u32[0];
    v59.i64[1] = v58.u32[1];
    int64x2_t v60 = (int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)vnegq_s64(v59));
    *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
    *(int32x2_t *)v60.i8 = vmovn_s64(v60);
    int16x8_t v61 = (int16x8_t)vzip1q_s32((int32x4_t)v38, (int32x4_t)v60);
    int16x8_t v62 = (int16x8_t)vshlq_u32((uint32x4_t)v61, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))));
    *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
    *(int16x4_t *)v62.i8 = vmovn_s32((int32x4_t)v62);
    int8x16_t v63 = (int8x16_t)vzip1q_s16(v61, v62);
    int8x16_t v64 = (int8x16_t)vshlq_u16((uint16x8_t)v63, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))));
    *(int8x8_t *)v63.i8 = vmovn_s16((int16x8_t)v63);
    *(int8x8_t *)v64.i8 = vmovn_s16((int16x8_t)v64);
    int8x16_t v65 = vzip1q_s8(v63, v64);
    v64.i64[0] = 0x101010101010101;
    v64.i64[1] = 0x101010101010101;
    int8x16_t v66 = vshlq_s8(v64, v25);
    v64.i64[0] = -1;
    v64.i64[1] = -1;
    int32x4_t v67 = (int32x4_t)vqtbl1q_s8(vandq_s8(v65, vaddq_s8(v66, v64)), (int8x16_t)xmmword_242EA7560);
    *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 0);
    *(int32x2_t *)v64.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 1);
    int8x8_t v68 = (int8x8_t)vdupq_laneq_s32(v67, 2).u64[0];
    v67.i64[0] = vdupq_laneq_s32(v67, 3).u64[0];
    int16x8_t v454 = vsubw_s8(v454, *(int8x8_t *)v65.i8);
    int16x8_t v455 = vsubw_s8(v455, *(int8x8_t *)v64.i8);
    int16x8_t v456 = vsubw_s8(v456, v68);
    int16x8_t v457 = vsubw_s8(v457, *(int8x8_t *)v67.i8);
    int16x8_t v55 = vmovl_s8(vceqz_s8(*(int8x8_t *)v65.i8));
    int16x8_t v54 = vmovl_s8(vceqz_s8(*(int8x8_t *)v64.i8));
    int16x8_t v53 = vmovl_s8(vceqz_s8(v68));
    int16x8_t v52 = vmovl_s8(vceqz_s8(*(int8x8_t *)v67.i8));
  }
  v69.i64[0] = 0x8000800080008;
  v69.i64[1] = 0x8000800080008;
  int8x16_t v70 = 0uLL;
  int8x16_t v71 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v453, v69), (int8x16_t)0, 8uLL), v23);
  int8x16_t v72 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v71, (int16x8_t)v71));
  unint64_t v73 = vpaddq_s32((int32x4_t)v72, (int32x4_t)v72).u64[0];
  v74.i64[0] = v73;
  v74.i64[1] = HIDWORD(v73);
  int64x2_t v75 = v74;
  unint64_t v76 = vaddvq_s64(v74);
  if (v438) {
    BOOL v77 = v438 >= v26 + v76;
  }
  else {
    BOOL v77 = 1;
  }
  int v78 = !v77;
  if (v76 <= 0x80 && v78 == 0)
  {
    int64x2_t v80 = vaddq_s64(vdupq_n_s64(v26 & 0x3F), vzip1q_s64((int64x2_t)0, v75));
    uint64_t v81 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v81, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81->i64[0], 0), (uint64x2_t)vnegq_s64(v80)));
    if ((v26 & 0x3F) + v76 >= 0x81) {
      int8x16_t v70 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v81[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v80))), v70);
    }
    v26 += v76;
  }
  else
  {
    unsigned __int8 v439 = 1;
  }
  int v82 = v453.i8[0] & 3;
  if (v82 == 2)
  {
    unint64_t v83 = v26 + 8;
    if (v438)
    {
      if (v438 < v83)
      {
        unsigned __int8 v439 = 1;
LABEL_57:
        unsigned __int8 v439 = 1;
        goto LABEL_58;
      }
      unint64_t v84 = v26 + 16;
      v26 += 8;
      if (v438 < v84) {
        goto LABEL_57;
      }
      unint64_t v83 = v26;
    }
    unint64_t v26 = v83 + 8;
  }
LABEL_58:
  int8x16_t v85 = 0uLL;
  int8x16_t v86 = vextq_s8((int8x16_t)0, (int8x16_t)v454, 8uLL);
  int8x16_t v87 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v86, (int16x8_t)v86));
  unint64_t v88 = vpaddq_s32((int32x4_t)v87, (int32x4_t)v87).u64[0];
  v89.i64[0] = v88;
  v89.i64[1] = HIDWORD(v88);
  int64x2_t v90 = v89;
  unint64_t v91 = vaddvq_s64(v89);
  unint64_t v92 = v26 + v91;
  if (v438) {
    BOOL v93 = v438 >= v92;
  }
  else {
    BOOL v93 = 1;
  }
  int v94 = !v93;
  if (v91 > 0x80 || v94)
  {
    int v99 = 1;
    unint64_t v97 = v437;
  }
  else
  {
    unint64_t v95 = v26 & 0x3F;
    int64x2_t v96 = vaddq_s64(vdupq_n_s64(v95), vzip1q_s64((int64x2_t)0, v90));
    unint64_t v97 = v437;
    unint64_t v98 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v85 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v96)));
    if (v95 + v91 >= 0x81) {
      int8x16_t v85 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v96))), v85);
    }
    int v99 = v439;
    unint64_t v26 = v92;
  }
  v100.i64[0] = 0xF000F000F000FLL;
  v100.i64[1] = 0xF000F000F000FLL;
  v101.i64[0] = 0x10001000100010;
  v101.i64[1] = 0x10001000100010;
  int8x16_t v102 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v454, v454));
  unint64_t v103 = vpaddq_s32((int32x4_t)v102, (int32x4_t)v102).u64[0];
  v104.i64[0] = v103;
  v104.i64[1] = HIDWORD(v103);
  int64x2_t v105 = v104;
  unint64_t v106 = vaddvq_s64(v104);
  unint64_t v107 = v106;
  unint64_t v108 = v26 + v106;
  if (v438) {
    BOOL v109 = v438 >= v108;
  }
  else {
    BOOL v109 = 1;
  }
  char v110 = !v109;
  int8x16_t v111 = 0uLL;
  if (v106 > 0x80 || (v110 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v108 = v26;
    int8x16_t v115 = 0uLL;
  }
  else
  {
    unint64_t v112 = v26 & 0x3F;
    int64x2_t v113 = vaddq_s64(vdupq_n_s64(v112), vzip1q_s64((int64x2_t)0, v105));
    int v114 = (int64x2_t *)(v97 + 8 * (v26 >> 6));
    int8x16_t v115 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v114, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114->i64[0], 0), (uint64x2_t)vnegq_s64(v113)));
    if (v112 + v107 >= 0x81) {
      int8x16_t v115 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v114[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v113))), v115);
    }
  }
  int32x2_t v116 = vzip1_s32(*(int32x2_t *)v102.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
  v117.i64[0] = v116.u32[0];
  v117.i64[1] = v116.u32[1];
  uint64x2_t v118 = (uint64x2_t)vnegq_s64(v117);
  int64x2_t v119 = (int64x2_t)vshlq_u64((uint64x2_t)v115, v118);
  *(int32x2_t *)v115.i8 = vmovn_s64((int64x2_t)v115);
  *(int32x2_t *)v119.i8 = vmovn_s64(v119);
  int16x8_t v120 = (int16x8_t)vzip1q_s32((int32x4_t)v115, (int32x4_t)v119);
  uint32x4_t v121 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v454.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v454, (int8x16_t)v454, 8uLL))));
  int16x8_t v122 = (int16x8_t)vshlq_u32((uint32x4_t)v120, v121);
  *(int16x4_t *)v120.i8 = vmovn_s32((int32x4_t)v120);
  *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v122);
  int16x8_t v123 = vzip1q_s16(v120, v122);
  int16x8_t v124 = vaddq_s16(v454, (int16x8_t)v100);
  int16x8_t v125 = vsubq_s16(v101, v454);
  int16x8_t v126 = vshlq_s16(vshlq_s16(v123, v125), v124);
  int16x8_t v441 = v126;
  unint64_t v127 = v108 + v107;
  if (v438) {
    BOOL v128 = v438 >= v127;
  }
  else {
    BOOL v128 = 1;
  }
  char v129 = !v128;
  if (v107 > 0x80 || (v129 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v127 = v108;
  }
  else
  {
    unint64_t v130 = v108 & 0x3F;
    int64x2_t v131 = vaddq_s64(vdupq_n_s64(v130), vzip1q_s64((int64x2_t)0, v105));
    unint64_t v132 = (int64x2_t *)(v97 + 8 * (v108 >> 6));
    int8x16_t v111 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v132, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132->i64[0], 0), (uint64x2_t)vnegq_s64(v131)));
    if (v130 + v107 >= 0x81) {
      int8x16_t v111 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v132[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v131))), v111);
    }
  }
  int64x2_t v133 = (int64x2_t)vshlq_u64((uint64x2_t)v111, v118);
  *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v111);
  *(int32x2_t *)v133.i8 = vmovn_s64(v133);
  int16x8_t v134 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v133);
  int16x8_t v135 = (int16x8_t)vshlq_u32((uint32x4_t)v134, v121);
  *(int16x4_t *)v134.i8 = vmovn_s32((int32x4_t)v134);
  *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
  int16x8_t v136 = vshlq_s16(vshlq_s16(vzip1q_s16(v134, v135), v125), v124);
  int16x8_t v442 = v136;
  unint64_t v137 = v127 + v107;
  if (v438) {
    BOOL v138 = v438 >= v137;
  }
  else {
    BOOL v138 = 1;
  }
  char v139 = !v138;
  int8x16_t v140 = 0uLL;
  if (v107 > 0x80 || (v139 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v137 = v127;
    int8x16_t v144 = 0uLL;
  }
  else
  {
    unint64_t v141 = v127 & 0x3F;
    int64x2_t v142 = vaddq_s64(vdupq_n_s64(v141), vzip1q_s64((int64x2_t)0, v105));
    BOOL v143 = (int64x2_t *)(v97 + 8 * (v127 >> 6));
    int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v143, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143->i64[0], 0), (uint64x2_t)vnegq_s64(v142)));
    if (v141 + v107 >= 0x81) {
      int8x16_t v144 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v143[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v142))), v144);
    }
  }
  int64x2_t v145 = (int64x2_t)vshlq_u64((uint64x2_t)v144, v118);
  *(int32x2_t *)v144.i8 = vmovn_s64((int64x2_t)v144);
  *(int32x2_t *)v145.i8 = vmovn_s64(v145);
  int16x8_t v146 = (int16x8_t)vzip1q_s32((int32x4_t)v144, (int32x4_t)v145);
  int16x8_t v147 = (int16x8_t)vshlq_u32((uint32x4_t)v146, v121);
  *(int16x4_t *)v146.i8 = vmovn_s32((int32x4_t)v146);
  *(int16x4_t *)v147.i8 = vmovn_s32((int32x4_t)v147);
  int16x8_t v148 = vshlq_s16(vshlq_s16(vzip1q_s16(v146, v147), v125), v124);
  int32x4_t v443 = (int32x4_t)v148;
  int8x16_t v149 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v455, v455));
  v146.i64[0] = vpaddq_s32((int32x4_t)v149, (int32x4_t)v149).u64[0];
  v150.i64[0] = v146.u32[0];
  v150.i64[1] = v146.u32[1];
  int64x2_t v151 = v150;
  unint64_t v152 = vaddvq_s64(v150);
  unint64_t v153 = v152;
  unint64_t v154 = v137 + v152;
  if (v438) {
    BOOL v155 = v438 >= v154;
  }
  else {
    BOOL v155 = 1;
  }
  char v156 = !v155;
  if (v152 > 0x80 || (v156 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v154 = v137;
  }
  else
  {
    unint64_t v157 = v137 & 0x3F;
    int64x2_t v158 = vaddq_s64(vdupq_n_s64(v157), vzip1q_s64((int64x2_t)0, v151));
    unint64_t v159 = (int64x2_t *)(v97 + 8 * (v137 >> 6));
    int8x16_t v140 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v159, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159->i64[0], 0), (uint64x2_t)vnegq_s64(v158)));
    if (v157 + v153 >= 0x81) {
      int8x16_t v140 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v159[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v158))), v140);
    }
  }
  unint64_t v160 = v154 + v153;
  if (v438) {
    BOOL v161 = v438 >= v160;
  }
  else {
    BOOL v161 = 1;
  }
  char v162 = !v161;
  int8x16_t v163 = 0uLL;
  if (v153 > 0x80 || (v162 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v160 = v154;
    int8x16_t v167 = 0uLL;
  }
  else
  {
    unint64_t v164 = v154 & 0x3F;
    int64x2_t v165 = vaddq_s64(vdupq_n_s64(v164), vzip1q_s64((int64x2_t)0, v151));
    uint64_t v166 = (int64x2_t *)(v97 + 8 * (v154 >> 6));
    int8x16_t v167 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v166, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166->i64[0], 0), (uint64x2_t)vnegq_s64(v165)));
    if (v164 + v153 >= 0x81) {
      int8x16_t v167 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v166[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v165))), v167);
    }
  }
  unint64_t v168 = v160 + v153;
  if (v438) {
    BOOL v169 = v438 >= v168;
  }
  else {
    BOOL v169 = 1;
  }
  char v170 = !v169;
  int8x16_t v431 = (int8x16_t)v55;
  if (v153 > 0x80 || (v170 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v168 = v160;
  }
  else
  {
    int64x2_t v171 = vaddq_s64(vdupq_n_s64(v160 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    unint64_t v172 = (int64x2_t *)(v97 + 8 * (v160 >> 6));
    int8x16_t v163 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v172, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172->i64[0], 0), (uint64x2_t)vnegq_s64(v171)));
    if ((v160 & 0x3F) + v153 >= 0x81) {
      int8x16_t v163 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v172[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v171))), v163);
    }
  }
  unint64_t v173 = v168 + v153;
  if (v438) {
    BOOL v174 = v438 >= v173;
  }
  else {
    BOOL v174 = 1;
  }
  char v175 = !v174;
  int8x16_t v176 = 0uLL;
  int8x16_t v433 = (int8x16_t)v52;
  int16x8_t v435 = v22;
  int8x16_t v427 = (int8x16_t)v54;
  if (v153 > 0x80 || (v175 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v173 = v168;
    int8x16_t v179 = 0uLL;
  }
  else
  {
    int64x2_t v177 = vaddq_s64(vdupq_n_s64(v168 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int v178 = (int64x2_t *)(v97 + 8 * (v168 >> 6));
    int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v178, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178->i64[0], 0), (uint64x2_t)vnegq_s64(v177)));
    if ((v168 & 0x3F) + v153 >= 0x81) {
      int8x16_t v179 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v178[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v177))), v179);
    }
  }
  int8x16_t v180 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v456, v456));
  unint64_t v181 = vpaddq_s32((int32x4_t)v180, (int32x4_t)v180).u64[0];
  v182.i64[0] = v181;
  v182.i64[1] = HIDWORD(v181);
  int64x2_t v183 = v182;
  unint64_t v184 = vaddvq_s64(v182);
  unint64_t v185 = v184;
  unint64_t v186 = v173 + v184;
  if (v438) {
    BOOL v187 = v438 >= v186;
  }
  else {
    BOOL v187 = 1;
  }
  char v188 = !v187;
  int8x16_t v429 = (int8x16_t)v53;
  if (v184 > 0x80 || (v188 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v186 = v173;
  }
  else
  {
    unint64_t v189 = v173 & 0x3F;
    int64x2_t v190 = vaddq_s64(vdupq_n_s64(v189), vzip1q_s64((int64x2_t)0, v183));
    unint64_t v191 = (int64x2_t *)(v97 + 8 * (v173 >> 6));
    int8x16_t v176 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v191, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191->i64[0], 0), (uint64x2_t)vnegq_s64(v190)));
    if (v189 + v185 >= 0x81) {
      int8x16_t v176 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v191[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v190))), v176);
    }
  }
  unint64_t v192 = v186 + v185;
  if (v438) {
    BOOL v193 = v438 >= v192;
  }
  else {
    BOOL v193 = 1;
  }
  char v194 = !v193;
  int8x16_t v195 = 0uLL;
  if (v185 > 0x80 || (v194 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v192 = v186;
    int8x16_t v199 = 0uLL;
  }
  else
  {
    unint64_t v196 = v186 & 0x3F;
    int64x2_t v197 = vaddq_s64(vdupq_n_s64(v196), vzip1q_s64((int64x2_t)0, v183));
    uint64_t v198 = (int64x2_t *)(v97 + 8 * (v186 >> 6));
    int8x16_t v199 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v198, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198->i64[0], 0), (uint64x2_t)vnegq_s64(v197)));
    if (v196 + v185 >= 0x81) {
      int8x16_t v199 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v198[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v197))), v199);
    }
  }
  unint64_t v200 = v192 + v185;
  if (v438) {
    BOOL v201 = v438 >= v200;
  }
  else {
    BOOL v201 = 1;
  }
  char v202 = !v201;
  if (v185 > 0x80 || (v202 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v200 = v192;
  }
  else
  {
    unint64_t v203 = v192 & 0x3F;
    int64x2_t v204 = vaddq_s64(vdupq_n_s64(v203), vzip1q_s64((int64x2_t)0, v183));
    unint64_t v205 = (int64x2_t *)(v97 + 8 * (v192 >> 6));
    int8x16_t v195 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v205, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205->i64[0], 0), (uint64x2_t)vnegq_s64(v204)));
    if (v203 + v185 >= 0x81) {
      int8x16_t v195 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v205[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v204))), v195);
    }
  }
  unint64_t v206 = v200 + v185;
  if (v438) {
    BOOL v207 = v438 >= v206;
  }
  else {
    BOOL v207 = 1;
  }
  char v208 = !v207;
  int8x16_t v209 = 0uLL;
  if (v185 > 0x80 || (v208 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v206 = v200;
    int8x16_t v213 = 0uLL;
  }
  else
  {
    unint64_t v210 = v200 & 0x3F;
    int64x2_t v211 = vaddq_s64(vdupq_n_s64(v210), vzip1q_s64((int64x2_t)0, v183));
    uint64_t v212 = (int64x2_t *)(v97 + 8 * (v200 >> 6));
    int8x16_t v213 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v212, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212->i64[0], 0), (uint64x2_t)vnegq_s64(v211)));
    if (v210 + v185 >= 0x81) {
      int8x16_t v213 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v212[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v211))), v213);
    }
  }
  int8x16_t v214 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v457, v457));
  unint64_t v215 = vpaddq_s32((int32x4_t)v214, (int32x4_t)v214).u64[0];
  v216.i64[0] = v215;
  v216.i64[1] = HIDWORD(v215);
  int64x2_t v217 = v216;
  unint64_t v218 = vaddvq_s64(v216);
  unint64_t v219 = v218;
  unint64_t v220 = v206 + v218;
  if (v438) {
    BOOL v221 = v438 >= v220;
  }
  else {
    BOOL v221 = 1;
  }
  char v222 = !v221;
  if (v218 > 0x80 || (v222 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v220 = v206;
  }
  else
  {
    unint64_t v223 = v206 & 0x3F;
    int64x2_t v224 = vaddq_s64(vdupq_n_s64(v223), vzip1q_s64((int64x2_t)0, v217));
    unsigned int v225 = (int64x2_t *)(v97 + 8 * (v206 >> 6));
    int8x16_t v209 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v225, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225->i64[0], 0), (uint64x2_t)vnegq_s64(v224)));
    if (v223 + v219 >= 0x81) {
      int8x16_t v209 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v225[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v224))), v209);
    }
  }
  unint64_t v226 = v220 + v219;
  if (v438) {
    BOOL v227 = v438 >= v226;
  }
  else {
    BOOL v227 = 1;
  }
  char v228 = !v227;
  int8x16_t v229 = 0uLL;
  if (v219 > 0x80 || (v228 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v226 = v220;
    int8x16_t v233 = 0uLL;
  }
  else
  {
    unint64_t v230 = v220 & 0x3F;
    int64x2_t v231 = vaddq_s64(vdupq_n_s64(v230), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v232 = (int64x2_t *)(v97 + 8 * (v220 >> 6));
    int64x2_t v100 = vnegq_s64(v231);
    int8x16_t v233 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v232, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232->i64[0], 0), (uint64x2_t)v100));
    if (v230 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v233 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v232[1], 1), (uint64x2_t)vsubq_s64(v100, v231))), v233);
    }
  }
  unint64_t v234 = v226 + v219;
  if (v438) {
    BOOL v235 = v438 >= v234;
  }
  else {
    BOOL v235 = 1;
  }
  char v236 = !v235;
  if (v219 > 0x80 || (v236 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v234 = v226;
  }
  else
  {
    unint64_t v237 = v226 & 0x3F;
    int64x2_t v238 = vaddq_s64(vdupq_n_s64(v237), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v239 = (int64x2_t *)(v97 + 8 * (v226 >> 6));
    int64x2_t v100 = vsubq_s64(vdupq_n_s64(0x40uLL), v238);
    int8x16_t v229 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v239, 1), (uint64x2_t)v100), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239->i64[0], 0), (uint64x2_t)vnegq_s64(v238)));
    if (v237 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v229 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v238)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v239[1], 1), (uint64x2_t)vsubq_s64(v100, v238))), v229);
    }
  }
  unint64_t v240 = v234 + v219;
  if (v438) {
    BOOL v241 = v438 >= v240;
  }
  else {
    BOOL v241 = 1;
  }
  char v242 = !v241;
  int8x16_t v243 = 0uLL;
  if (v219 > 0x80 || (v242 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v240 = v234;
  }
  else
  {
    int64x2_t v244 = vaddq_s64(vdupq_n_s64(v234 & 0x3F), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v245 = (int64x2_t *)(v97 + 8 * (v234 >> 6));
    int64x2_t v100 = vdupq_n_s64(0x40uLL);
    int8x16_t v243 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v245, 1), (uint64x2_t)vsubq_s64(v100, v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245->i64[0], 0), (uint64x2_t)vnegq_s64(v244)));
    if ((v234 & 0x3F) + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v243 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v245[1], 1), (uint64x2_t)vsubq_s64(v100, v244))), v243);
    }
  }
  if (v99 || v438 + 8 * result - v240 - 1536 >= 9 || v82 == 2)
  {
    uint64_t result = 0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    unint64_t v246 = (float64x2_t *)(a1 + a2);
    *unint64_t v246 = v14;
    v246[1] = v14;
    v246[2] = v14;
    v246[3] = v14;
    unint64_t v247 = (float64x2_t *)(a1 + 2 * a2);
    *unint64_t v247 = v14;
    v247[1] = v14;
    v247[2] = v14;
    v247[3] = v14;
    unint64_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *unint64_t v17 = v14;
    v17[1] = v14;
    goto LABEL_239;
  }
  int32x2_t v248 = vzip1_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
  int32x2_t v249 = vzip1_s32(*(int32x2_t *)v87.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  *(int32x2_t *)v72.i8 = vzip1_s32(*(int32x2_t *)v149.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL));
  int32x2_t v250 = vzip1_s32(*(int32x2_t *)v180.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL));
  int32x4_t v251 = (int32x4_t)vextq_s8(v214, v214, 8uLL);
  int32x2_t v252 = vzip1_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v251.i8);
  v253.i64[0] = v248.u32[0];
  v253.i64[1] = v248.u32[1];
  int64x2_t v254 = (int64x2_t)vshlq_u64((uint64x2_t)v70, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v70.i8 = vmovn_s64((int64x2_t)v70);
  *(int32x2_t *)v254.i8 = vmovn_s64(v254);
  int16x8_t v255 = (int16x8_t)vzip1q_s32((int32x4_t)v70, (int32x4_t)v254);
  v253.i64[0] = v249.u32[0];
  v253.i64[1] = v249.u32[1];
  int64x2_t v256 = (int64x2_t)vshlq_u64((uint64x2_t)v85, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v251.i8 = vmovn_s64((int64x2_t)v85);
  *(int32x2_t *)v256.i8 = vmovn_s64(v256);
  int32x4_t v257 = vzip1q_s32(v251, (int32x4_t)v256);
  v253.i64[0] = v72.u32[0];
  v253.i64[1] = v72.u32[1];
  int32x4_t v258 = (int32x4_t)vnegq_s64(v253);
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v140, (uint64x2_t)v258);
  *(int32x2_t *)v100.i8 = vmovn_s64((int64x2_t)v140);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v167, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v167);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v261);
  int64x2_t v263 = (int64x2_t)vshlq_u64((uint64x2_t)v163, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v163);
  *(int32x2_t *)v263.i8 = vmovn_s64(v263);
  int16x8_t v264 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v263);
  v253.i64[0] = v250.u32[0];
  v253.i64[1] = v250.u32[1];
  int64x2_t v265 = v253;
  v253.i64[0] = v252.u32[0];
  v253.i64[1] = v252.u32[1];
  int32x4_t v266 = (int32x4_t)vnegq_s64(v265);
  int64x2_t v267 = (int64x2_t)vshlq_u64((uint64x2_t)v179, (uint64x2_t)v258);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v179);
  *(int32x2_t *)v267.i8 = vmovn_s64(v267);
  int16x8_t v268 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v267);
  int64x2_t v269 = (int64x2_t)vshlq_u64((uint64x2_t)v176, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v176);
  *(int32x2_t *)v269.i8 = vmovn_s64(v269);
  int16x8_t v270 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v269);
  int64x2_t v271 = (int64x2_t)vshlq_u64((uint64x2_t)v199, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v199);
  *(int32x2_t *)v271.i8 = vmovn_s64(v271);
  int16x8_t v272 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v271);
  int64x2_t v273 = (int64x2_t)vshlq_u64((uint64x2_t)v195, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v195);
  *(int32x2_t *)v273.i8 = vmovn_s64(v273);
  int16x8_t v274 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v273);
  uint64x2_t v275 = (uint64x2_t)vnegq_s64(v253);
  int64x2_t v276 = (int64x2_t)vshlq_u64((uint64x2_t)v213, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v213);
  *(int32x2_t *)v276.i8 = vmovn_s64(v276);
  int16x8_t v277 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v276);
  int64x2_t v278 = (int64x2_t)vshlq_u64((uint64x2_t)v209, v275);
  *(int32x2_t *)v266.i8 = vmovn_s64((int64x2_t)v209);
  *(int32x2_t *)v278.i8 = vmovn_s64(v278);
  int16x8_t v279 = (int16x8_t)vzip1q_s32(v266, (int32x4_t)v278);
  int64x2_t v280 = (int64x2_t)vshlq_u64((uint64x2_t)v233, v275);
  *(int32x2_t *)v233.i8 = vmovn_s64((int64x2_t)v233);
  *(int32x2_t *)v280.i8 = vmovn_s64(v280);
  int16x8_t v281 = (int16x8_t)vzip1q_s32((int32x4_t)v233, (int32x4_t)v280);
  int64x2_t v282 = (int64x2_t)vshlq_u64((uint64x2_t)v229, v275);
  *(int32x2_t *)v280.i8 = vmovn_s64((int64x2_t)v229);
  *(int32x2_t *)v282.i8 = vmovn_s64(v282);
  int16x8_t v283 = (int16x8_t)vzip1q_s32((int32x4_t)v280, (int32x4_t)v282);
  int16x8_t v284 = (int16x8_t)vshlq_u32((uint32x4_t)v255, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v71.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)))));
  *(int16x4_t *)v255.i8 = vmovn_s32((int32x4_t)v255);
  *(int16x4_t *)v284.i8 = vmovn_s32((int32x4_t)v284);
  int16x8_t v285 = vzip1q_s16(v255, v284);
  uint32x4_t v286 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v455.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v455, (int8x16_t)v455, 8uLL))));
  int16x8_t v287 = (int16x8_t)vshlq_u32((uint32x4_t)v257, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)))));
  *(int16x4_t *)v179.i8 = vmovn_s32(v257);
  *(int16x4_t *)v287.i8 = vmovn_s32((int32x4_t)v287);
  int16x8_t v288 = vzip1q_s16((int16x8_t)v179, v287);
  int16x8_t v289 = (int16x8_t)vshlq_u32((uint32x4_t)v260, v286);
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v289.i8 = vmovn_s32((int32x4_t)v289);
  int16x8_t v290 = vzip1q_s16(v260, v289);
  int16x8_t v291 = (int16x8_t)vshlq_u32((uint32x4_t)v262, v286);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v291.i8 = vmovn_s32((int32x4_t)v291);
  int16x8_t v292 = vzip1q_s16(v262, v291);
  int16x8_t v293 = (int16x8_t)vshlq_u32((uint32x4_t)v264, v286);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  *(int16x4_t *)v293.i8 = vmovn_s32((int32x4_t)v293);
  int16x8_t v294 = vzip1q_s16(v264, v293);
  uint32x4_t v295 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v456.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v456, (int8x16_t)v456, 8uLL))));
  int16x8_t v296 = (int16x8_t)vshlq_u32((uint32x4_t)v268, v286);
  *(int16x4_t *)v268.i8 = vmovn_s32((int32x4_t)v268);
  *(int16x4_t *)v296.i8 = vmovn_s32((int32x4_t)v296);
  int16x8_t v297 = vzip1q_s16(v268, v296);
  int16x8_t v298 = (int16x8_t)vshlq_u32((uint32x4_t)v270, v295);
  *(int16x4_t *)v270.i8 = vmovn_s32((int32x4_t)v270);
  *(int16x4_t *)v298.i8 = vmovn_s32((int32x4_t)v298);
  int16x8_t v299 = vzip1q_s16(v270, v298);
  int16x8_t v300 = (int16x8_t)vshlq_u32((uint32x4_t)v272, v295);
  *(int16x4_t *)v272.i8 = vmovn_s32((int32x4_t)v272);
  *(int16x4_t *)v300.i8 = vmovn_s32((int32x4_t)v300);
  int16x8_t v301 = vzip1q_s16(v272, v300);
  int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v274, v295);
  *(int16x4_t *)v274.i8 = vmovn_s32((int32x4_t)v274);
  *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
  int16x8_t v303 = vzip1q_s16(v274, v302);
  uint32x4_t v304 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v457.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v457, (int8x16_t)v457, 8uLL))));
  int16x8_t v305 = (int16x8_t)vshlq_u32((uint32x4_t)v277, v295);
  *(int16x4_t *)v277.i8 = vmovn_s32((int32x4_t)v277);
  *(int16x4_t *)v305.i8 = vmovn_s32((int32x4_t)v305);
  int16x8_t v306 = vzip1q_s16(v277, v305);
  int16x8_t v307 = (int16x8_t)vshlq_u32((uint32x4_t)v279, v304);
  *(int16x4_t *)v279.i8 = vmovn_s32((int32x4_t)v279);
  *(int16x4_t *)v307.i8 = vmovn_s32((int32x4_t)v307);
  int16x8_t v308 = vzip1q_s16(v279, v307);
  int16x8_t v309 = (int16x8_t)vshlq_u32((uint32x4_t)v281, v304);
  *(int16x4_t *)v281.i8 = vmovn_s32((int32x4_t)v281);
  *(int16x4_t *)v309.i8 = vmovn_s32((int32x4_t)v309);
  int16x8_t v310 = vzip1q_s16(v281, v309);
  int16x8_t v311 = (int16x8_t)vshlq_u32((uint32x4_t)v283, v304);
  *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
  *(int16x4_t *)v311.i8 = vmovn_s32((int32x4_t)v311);
  int16x8_t v312 = vzip1q_s16(v283, v311);
  v311.i64[0] = 0x10001000100010;
  v311.i64[1] = 0x10001000100010;
  int16x8_t v313 = vsubq_s16(v311, (int16x8_t)v71);
  v314.i64[0] = 0xF000F000F000FLL;
  v314.i64[1] = 0xF000F000F000FLL;
  int16x8_t v315 = vaddq_s16((int16x8_t)v71, v314);
  int16x8_t v316 = vshlq_s16(v285, v313);
  v313.i64[0] = 0x10001000100010;
  v313.i64[1] = 0x10001000100010;
  int16x8_t v317 = vsubq_s16(v313, (int16x8_t)v86);
  int16x8_t v318 = vaddq_s16((int16x8_t)v86, v314);
  v314.i64[0] = 0x10001000100010;
  v314.i64[1] = 0x10001000100010;
  int16x8_t v319 = vshlq_s16(v288, v317);
  v317.i64[0] = 0xF000F000F000FLL;
  v317.i64[1] = 0xF000F000F000FLL;
  int16x8_t v320 = vsubq_s16(v314, v455);
  int16x8_t v321 = vaddq_s16(v455, v317);
  v317.i64[0] = 0x10001000100010;
  v317.i64[1] = 0x10001000100010;
  int16x8_t v322 = vshlq_s16(v290, v320);
  int16x8_t v323 = vshlq_s16(v292, v320);
  int16x8_t v324 = vshlq_s16(v294, v320);
  int16x8_t v325 = vshlq_s16(v297, v320);
  v320.i64[0] = 0xF000F000F000FLL;
  v320.i64[1] = 0xF000F000F000FLL;
  int16x8_t v326 = vsubq_s16(v317, v456);
  int16x8_t v327 = vaddq_s16(v456, v320);
  v320.i64[0] = 0x10001000100010;
  v320.i64[1] = 0x10001000100010;
  int16x8_t v328 = vshlq_s16(v299, v326);
  int16x8_t v329 = vshlq_s16(v301, v326);
  int16x8_t v330 = vshlq_s16(v303, v326);
  int16x8_t v331 = vshlq_s16(v306, v326);
  v326.i64[0] = 0xF000F000F000FLL;
  v326.i64[1] = 0xF000F000F000FLL;
  int16x8_t v332 = vsubq_s16(v320, v457);
  int16x8_t v333 = vaddq_s16(v457, v326);
  int8x16_t v334 = (int8x16_t)vshlq_s16(v316, v315);
  int16x8_t v335 = vshlq_s16(v319, v318);
  int16x8_t v336 = vshlq_s16(v322, v321);
  int16x8_t v337 = vshlq_s16(v323, v321);
  int16x8_t v338 = vshlq_s16(v324, v321);
  int16x8_t v339 = vshlq_s16(v325, v321);
  int16x8_t v340 = vshlq_s16(v328, v327);
  int16x8_t v341 = vshlq_s16(v329, v327);
  int16x8_t v342 = vshlq_s16(v330, v327);
  int16x8_t v343 = vshlq_s16(v331, v327);
  int64x2_t v344 = (int64x2_t)vshlq_u64((uint64x2_t)v243, v275);
  *(int32x2_t *)v243.i8 = vmovn_s64((int64x2_t)v243);
  *(int32x2_t *)v344.i8 = vmovn_s64(v344);
  int16x8_t v345 = (int16x8_t)vzip1q_s32((int32x4_t)v243, (int32x4_t)v344);
  int16x8_t v346 = vshlq_s16(vshlq_s16(v308, v332), v333);
  int16x8_t v347 = vshlq_s16(vshlq_s16(v310, v332), v333);
  int16x8_t v348 = vshlq_s16(vshlq_s16(v312, v332), v333);
  int16x8_t v349 = (int16x8_t)vshlq_u32((uint32x4_t)v345, v304);
  *(int16x4_t *)v345.i8 = vmovn_s32((int32x4_t)v345);
  *(int16x4_t *)v349.i8 = vmovn_s32((int32x4_t)v349);
  int16x8_t v350 = vshlq_s16(vshlq_s16(vzip1q_s16(v345, v349), v332), v333);
  int16x8_t v351 = vaddq_s16((int16x8_t)vandq_s8(v334, v431), v335);
  int8x16_t v352 = (int8x16_t)vdupq_lane_s64(v334.i64[0], 0);
  int16x8_t v353 = (int16x8_t)vandq_s8(v427, v352);
  int16x8_t v354 = vsubq_s16(v336, v353);
  int16x8_t v355 = vsubq_s16(v337, v353);
  int16x8_t v356 = vsubq_s16(v338, v353);
  int16x8_t v357 = vsubq_s16(v339, v353);
  int16x8_t v358 = (int16x8_t)vandq_s8(v429, v352);
  int16x8_t v359 = vsubq_s16(v340, v358);
  int16x8_t v360 = vsubq_s16(v341, v358);
  int16x8_t v361 = (int16x8_t)vandq_s8(v431, v352);
  int16x8_t v362 = vsubq_s16(v342, v358);
  int16x8_t v363 = vsubq_s16(v343, v358);
  v364.i64[0] = 0x1000100010001;
  v364.i64[1] = 0x1000100010001;
  int16x8_t v365 = vsubq_s16(v126, v361);
  int16x8_t v366 = vsubq_s16(v136, v361);
  int16x8_t v367 = (int16x8_t)vandq_s8(v433, v352);
  int16x8_t v368 = vsubq_s16(v346, v367);
  int16x8_t v369 = vsubq_s16(v347, v367);
  int16x8_t v370 = vsubq_s16(v348, v367);
  int16x8_t v371 = vsubq_s16(v350, v367);
  int8x16_t v372 = (int8x16_t)vsubq_s16(v148, v361);
  int8x16_t v373 = (int8x16_t)vsubq_s16(v351, v361);
  int32x4_t v440 = (int32x4_t)v351;
  int8x16_t v448 = (int8x16_t)v368;
  int8x16_t v449 = (int8x16_t)v369;
  int8x16_t v450 = (int8x16_t)v370;
  int8x16_t v451 = (int8x16_t)v371;
  if (vaddvq_s16(vceqq_s16(v435, (int16x8_t)v364)))
  {
    int8x16_t v374 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v453, v364));
    v375.i64[1] = v373.i64[1];
    v375.i64[0] = v372.i64[1];
    v376.i64[0] = v372.i64[0];
    v376.i64[1] = v373.i64[0];
    int16x8_t v377 = (int16x8_t)vbslq_s8(v374, v375, v373);
    int16x8_t v378 = (int16x8_t)vbslq_s8(v374, v376, v372);
    v379.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v379.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    int16x8_t v380 = (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), v379), v374);
    v462.val[0] = (int8x16_t)vaddq_s16(v377, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7710), v374));
    v462.val[1] = (int8x16_t)vaddq_s16(v365, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7720), v374));
    v462.val[2] = (int8x16_t)vaddq_s16(v366, v380);
    v462.val[3] = (int8x16_t)vaddq_s16(v378, v380);
    int16x8_t v381 = (int16x8_t)vandq_s8(vqtbl4q_s8(v462, v379), v374);
    int8x16_t v373 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[0], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7730), v374));
    int16x8_t v365 = vaddq_s16((int16x8_t)v462.val[1], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7740), v374));
    int32x4_t v440 = (int32x4_t)v373;
    int16x8_t v441 = v365;
    int16x8_t v366 = vaddq_s16((int16x8_t)v462.val[2], v381);
    int8x16_t v372 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[3], v381);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7710), v374), v354);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7750), v374), v355);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, v379), v374), v356);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7760), v374), v357);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7730), v374);
    int16x8_t v382 = (int16x8_t)vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v354 = vaddq_s16((int16x8_t)v462.val[3], (int16x8_t)v460.val[0]);
    int16x8_t v355 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v356 = vaddq_s16((int16x8_t)v460.val[2], v382);
    int16x8_t v357 = vaddq_s16((int16x8_t)v460.val[3], v382);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA74D0), v374), v359);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA75A0), v374), v360);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7710), v374), v362);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7720), v374), v363);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v359 = vaddq_s16((int16x8_t)v460.val[0], (int16x8_t)v462.val[3]);
    int16x8_t v360 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v362 = vaddq_s16((int16x8_t)v460.val[2], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA75D0), v374));
    int16x8_t v363 = vaddq_s16((int16x8_t)v460.val[3], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7770), v374));
    v460.val[0] = v448;
    v460.val[1] = v449;
    int8x16_t v21 = v453;
    v460.val[2] = v450;
    v460.val[3] = v451;
    v461.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA74D0), v374), (int16x8_t)v448);
    v461.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7780), v374), (int16x8_t)v449);
    int16x8_t v442 = v366;
    int32x4_t v443 = (int32x4_t)v372;
    v461.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7710), v374), (int16x8_t)v450);
    v461.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7720), v374), (int16x8_t)v451);
    int16x8_t v383 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, v379), v374);
    int16x8_t v384 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA75D0), v374);
    int16x8_t v385 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA7790), v374);
    int16x8_t v368 = vaddq_s16((int16x8_t)v461.val[0], v383);
    int16x8_t v369 = vaddq_s16((int16x8_t)v461.val[1], v383);
    int16x8_t v370 = vaddq_s16((int16x8_t)v461.val[2], v384);
    int16x8_t v371 = vaddq_s16((int16x8_t)v461.val[3], v385);
  }
  int8x16_t v386 = (int8x16_t)vaddq_s16(v452, (int16x8_t)v373);
  int8x16_t v387 = (int8x16_t)vaddq_s16(v365, v452);
  int8x16_t v388 = (int8x16_t)vaddq_s16(v366, v452);
  int8x16_t v389 = (int8x16_t)vaddq_s16((int16x8_t)v372, v452);
  int8x16_t v390 = (int8x16_t)vaddq_s16(v354, v452);
  int8x16_t v391 = (int8x16_t)vaddq_s16(v355, v452);
  int8x16_t v392 = (int8x16_t)vaddq_s16(v356, v452);
  int8x16_t v393 = (int8x16_t)vaddq_s16(v357, v452);
  int8x16_t v394 = (int8x16_t)vaddq_s16(v359, v452);
  int8x16_t v395 = (int8x16_t)vaddq_s16(v360, v452);
  int8x16_t v396 = (int8x16_t)vaddq_s16(v362, v452);
  int8x16_t v397 = (int8x16_t)vaddq_s16(v363, v452);
  int8x16_t v398 = (int8x16_t)vaddq_s16(v368, v452);
  int8x16_t v399 = (int8x16_t)vaddq_s16(v369, v452);
  int8x16_t v400 = (int8x16_t)vaddq_s16(v370, v452);
  int8x16_t v401 = (int8x16_t)vaddq_s16(v371, v452);
  v402.i64[0] = 0x10001000100010;
  v402.i64[1] = 0x10001000100010;
  int8x16_t v403 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v21, v402));
  int32x4_t v404 = (int16x8_t *)(a1 + a2);
  *(int16x8_t *)a1 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v386, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v386);
  *(int16x8_t *)(a1 + 16) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v388, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v388);
  *(int16x8_t *)(a1 + 32) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v394, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v394);
  *(int16x8_t *)(a1 + 48) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v396, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v396);
  int32x4_t v405 = (int16x8_t *)(a1 + 2 * a2);
  *int32x4_t v404 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v387, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v387);
  v404[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v389, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v389);
  v404[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v395, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v395);
  v404[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v397, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v397);
  *int32x4_t v405 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v390, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v390);
  v405[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v392, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v392);
  v405[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v398, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v398);
  v405[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v400, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v400);
  int32x4_t v406 = (int16x8_t *)((char *)v405 + a2);
  *int32x4_t v406 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v391, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v391);
  v406[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v393, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v393);
  v406[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v399, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v399);
  v406[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v401, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v401);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(uint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  unint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  unint64_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v16, v13 + 64, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *unint64_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  int8x16_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *int8x16_t v21 = 0;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v25, v13 + v20 + 64, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int8x16_t v25 = 0;
LABEL_35:
  unint64_t v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *unint64_t v26 = 0;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v30, v13 + 8 * a2 + 64, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int64x2_t v30 = 0;
LABEL_49:
  int64x2_t v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    BOOL v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int64x2_t v31 = 0;
    BOOL v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *BOOL v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v35, v13 + 12 * a2 + 64, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(uint64_t a1, unint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1, 128, a2, *a3, a4);
  unint64_t v8 = v7
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 64, 128, v7, a3[1], a4);
  unint64_t v9 = v8
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 512, 128, v8, a3[2], a4);
  unint64_t v10 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 576, 128, v9, a3[3], a4);
  unint64_t v11 = v10
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 1024, 128, v10, a3[4], a4);
  unint64_t v12 = v11
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 1088, 128, v11, a3[5], a4);
  unint64_t v13 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 1536, 128, v12, a3[6], a4);
  unsigned int v14 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 1600, 128, v13, v14, a4);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  unint64_t v7 = (_OWORD *)(a3 + 2 * a4);
  int16x8_t v8 = *(int16x8_t *)(a3 + 48);
  int16x8_t v9 = *(int16x8_t *)(a3 + 32);
  int16x8_t v10 = *(int16x8_t *)(a3 + 16);
  int16x8_t v11 = *(int16x8_t *)(a3 + a4);
  int16x8_t v12 = *(int16x8_t *)(a3 + a4 + 32);
  int16x8_t v13 = *(int16x8_t *)(a3 + a4 + 48);
  int8x16_t v15 = *(int8x16_t *)v7;
  int8x16_t v16 = *((int8x16_t *)v7 + 1);
  int16x8_t v17 = *((int16x8_t *)v7 + 2);
  int16x8_t v18 = *((int16x8_t *)v7 + 3);
  unsigned int v14 = (int16x8_t *)((char *)v7 + a4);
  int16x8_t v444 = *v14;
  int16x8_t v446 = v14[1];
  int16x8_t v447 = v14[2];
  int16x8_t v448 = v14[3];
  int16x8_t v19 = (int16x8_t)vdupq_lane_s64(*(void *)a3, 0);
  int16x8_t v441 = *(int16x8_t *)a3;
  int16x8_t v442 = v11;
  int8x16_t v443 = *(int8x16_t *)(a3 + a4 + 16);
  int8x16_t v449 = (int8x16_t)vsubq_s16(*(int16x8_t *)a3, v19);
  int8x16_t v450 = (int8x16_t)vsubq_s16(v11, v19);
  int8x16_t v451 = (int8x16_t)vsubq_s16(v10, v19);
  int8x16_t v452 = (int8x16_t)vsubq_s16((int16x8_t)v443, v19);
  int16x8_t v20 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v22 = vpmaxq_s16(v20, v20);
  int16x8_t v23 = vpminq_s16(v21, v21);
  int16x8_t v24 = vzip1q_s16(v22, v23);
  v25.i64[0] = 0x10001000100010;
  v25.i64[1] = 0x10001000100010;
  int16x8_t v26 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v24)), (int8x16_t)vceqzq_s16(v24));
  int8x16_t v453 = (int8x16_t)vsubq_s16((int16x8_t)v15, v19);
  int8x16_t v454 = (int8x16_t)vsubq_s16(v444, v19);
  int16x8_t v430 = (int16x8_t)v15;
  int16x8_t v432 = (int16x8_t)v16;
  int16x8_t v27 = vsubq_s16((int16x8_t)v16, v19);
  int16x8_t v28 = vminq_s16(vminq_s16((int16x8_t)v453, (int16x8_t)v454), v27);
  int8x16_t v455 = (int8x16_t)v27;
  int8x16_t v456 = (int8x16_t)vsubq_s16(v446, v19);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v22, (int16x8_t)v15);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v30 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v453, (int16x8_t)v454), v27), (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v31 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v28, (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v32 = vpmaxq_s16(v30, v30);
  int16x8_t v33 = vpminq_s16(v31, v31);
  int16x8_t v34 = vmaxq_s16(v29, v32);
  int16x8_t v35 = vminq_s16(vminq_s16(v23, (int16x8_t)v15), v33);
  int16x8_t v36 = vzip1q_s16(v32, v33);
  int16x8_t v37 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v36)), (int8x16_t)vceqzq_s16(v36));
  int8x16_t v457 = (int8x16_t)vsubq_s16(v9, v19);
  int8x16_t v458 = (int8x16_t)vsubq_s16(v12, v19);
  int16x8_t v435 = v9;
  int16x8_t v437 = v12;
  int16x8_t v438 = v8;
  int16x8_t v38 = vsubq_s16(v8, v19);
  int16x8_t v39 = vminq_s16(vminq_s16((int16x8_t)v457, (int16x8_t)v458), v38);
  int16x8_t v434 = v13;
  int8x16_t v459 = (int8x16_t)v38;
  int8x16_t v460 = (int8x16_t)vsubq_s16(v13, v19);
  int16x8_t v40 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v457, (int16x8_t)v458), v38), (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v39, (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v42 = vpmaxq_s16(v40, v40);
  int16x8_t v43 = vpminq_s16(v41, v41);
  int16x8_t v44 = vmaxq_s16(v34, v42);
  int16x8_t v45 = vminq_s16(v35, v43);
  int16x8_t v46 = vzip1q_s16(v42, v43);
  int16x8_t v47 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v46)), (int8x16_t)vceqzq_s16(v46));
  int8x16_t v461 = (int8x16_t)vsubq_s16(v17, v19);
  int8x16_t v462 = (int8x16_t)vsubq_s16(v447, v19);
  int8x16_t v465 = (int8x16_t)v19;
  int16x8_t v439 = v17;
  int16x8_t v440 = v18;
  int8x16_t v463 = (int8x16_t)vsubq_s16(v18, v19);
  int8x16_t v464 = (int8x16_t)vsubq_s16(v448, v19);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vmaxq_s16(v44, v50);
  int16x8_t v53 = vminq_s16(v45, v51);
  int16x8_t v54 = vzip1q_s16(v50, v51);
  int16x8_t v55 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v54)), (int8x16_t)vceqzq_s16(v54));
  int16x8_t v56 = vpmaxq_s16(v26, v26);
  int16x8_t v57 = vpmaxq_s16(v37, v37);
  int16x8_t v58 = vpmaxq_s16(v47, v47);
  int16x8_t v59 = vpmaxq_s16(v55, v55);
  int8x16_t v60 = (int8x16_t)vmaxq_s16(vmaxq_s16(v56, v57), vmaxq_s16(v58, v59));
  int16x8_t v61 = vclzq_s16(vsubq_s16(v52, v53));
  v9.i64[0] = 0xF000F000F000FLL;
  v9.i64[1] = 0xF000F000F000FLL;
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  int16x8_t v63 = vshlq_s16(v62, vsubq_s16(v9, v61));
  int8x16_t v472 = (int8x16_t)v53;
  int8x16_t v473 = (int8x16_t)v52;
  int8x16_t v64 = (int8x16_t)vsubq_s16((int16x8_t)v25, v61);
  int8x16_t v65 = (int8x16_t)vcgtq_s16((int16x8_t)v60, (int16x8_t)v64);
  int16x8_t v66 = (int16x8_t)vbslq_s8(v65, v64, v60);
  int8x16_t v474 = vandq_s8((int8x16_t)vsubq_s16(v63, v53), v65);
  v15.i64[0] = 0x8000800080008;
  v15.i64[1] = 0x8000800080008;
  int8x16_t v67 = vorrq_s8((int8x16_t)0, vandq_s8(v65, v15));
  v68.i64[0] = 0x3000300030003;
  v68.i64[1] = 0x3000300030003;
  int16x8_t v69 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v57), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v58), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v468 = vsubq_s16(v66, v69);
  int16x8_t v469 = vsubq_s16(v66, v70);
  int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v59), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v470 = vsubq_s16(v66, v71);
  int8x16_t v471 = (int8x16_t)v66;
  int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v56), (int16x8_t)v68), (int16x8_t)0);
  v16.i64[0] = 0x4000400040004;
  v16.i64[1] = 0x4000400040004;
  int8x16_t v73 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16(v66), v68), v67), vbicq_s8(v16, (int8x16_t)vceqq_s16(vaddq_s16(v71, v70), vnegq_s16(vaddq_s16(v72, v69)))));
  int8x16_t v466 = v73;
  int16x8_t v467 = vsubq_s16(v66, v72);
  if (vmaxvq_s16(v66))
  {
    int16x8_t v74 = vsubq_s16((int16x8_t)v449, (int16x8_t)vqtbl1q_s8(v449, (int8x16_t)xmmword_242EA77A0));
    v75.i64[0] = 0x8000800080008000;
    v75.i64[1] = 0x8000800080008000;
    v76.i64[0] = 0x8000800080008000;
    v76.i64[1] = 0x8000800080008000;
    int16x8_t v77 = vsubq_s16((int16x8_t)v450, (int16x8_t)vqtbl1q_s8(v450, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v78 = vsubq_s16((int16x8_t)v451, (int16x8_t)vqtbl1q_s8(v451, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v79 = vsubq_s16((int16x8_t)v452, (int16x8_t)vqtbl1q_s8(v452, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v427 = v67;
    int8x16_t v80 = (int8x16_t)vsubq_s16((int16x8_t)v454, (int16x8_t)vqtbl1q_s8(v454, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v81 = (int8x16_t)vsubq_s16((int16x8_t)v456, (int16x8_t)vqtbl1q_s8(v456, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v82 = (int8x16_t)vsubq_s16((int16x8_t)v457, (int16x8_t)vqtbl1q_s8(v457, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v83 = (int8x16_t)vsubq_s16((int16x8_t)v458, (int16x8_t)vqtbl1q_s8(v458, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v84 = (int8x16_t)vsubq_s16((int16x8_t)v459, (int16x8_t)vqtbl1q_s8(v459, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v460, (int16x8_t)vqtbl1q_s8(v460, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v86 = vsubq_s16((int16x8_t)v462, (int16x8_t)vqtbl1q_s8(v462, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v87 = (int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v74, v77), v78), v79);
    int8x16_t v421 = (int8x16_t)v74;
    int8x16_t v422 = (int8x16_t)v77;
    int16x8_t v88 = vminq_s16(v74, v77);
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v463, (int16x8_t)vqtbl1q_s8(v463, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v455, (int16x8_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v453, (int16x8_t)vqtbl1q_s8(v453, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v461, (int16x8_t)vqtbl1q_s8(v461, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v423 = (int8x16_t)v79;
    int8x16_t v425 = (int8x16_t)v78;
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_242EA77B0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(v88, v78), v79), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vmaxq_s16(v95, v75);
    int16x8_t v98 = vminq_s16(v96, v76);
    int16x8_t v99 = vzip1q_s16(v95, v96);
    int16x8_t v100 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v99)), (int8x16_t)vceqzq_s16(v99));
    int16x8_t v101 = vpmaxq_s16(v100, v100);
    int16x8_t v102 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v103 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v104 = vpmaxq_s16(v102, v102);
    int16x8_t v105 = vpminq_s16(v103, v103);
    int16x8_t v106 = vmaxq_s16(v97, v104);
    int16x8_t v107 = vminq_s16(v98, v105);
    int16x8_t v108 = vzip1q_s16(v104, v105);
    int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v108)), (int8x16_t)vceqzq_s16(v108));
    int16x8_t v110 = vpmaxq_s16(v109, v109);
    int16x8_t v111 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v112 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v113 = vpmaxq_s16(v111, v111);
    int16x8_t v114 = vpminq_s16(v112, v112);
    int16x8_t v115 = vmaxq_s16(v106, v113);
    int16x8_t v116 = vminq_s16(v107, v114);
    int16x8_t v117 = vzip1q_s16(v113, v114);
    int16x8_t v118 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v117)), (int8x16_t)vceqzq_s16(v117));
    int8x16_t v119 = (int8x16_t)vpmaxq_s16(v118, v118);
    int8x16_t v415 = (int8x16_t)vsubq_s16((int16x8_t)v464, (int16x8_t)vqtbl1q_s8(v464, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v120 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v121 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v122 = vpmaxq_s16(v120, v120);
    int16x8_t v123 = vpminq_s16(v121, v121);
    int16x8_t v124 = vmaxq_s16(v115, v122);
    int16x8_t v125 = vminq_s16(v116, v123);
    int16x8_t v126 = vzip1q_s16(v122, v123);
    int16x8_t v127 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v126)), (int8x16_t)vceqzq_s16(v126));
    int16x8_t v128 = vpmaxq_s16(v127, v127);
    int8x16_t v129 = (int8x16_t)vmaxq_s16(vmaxq_s16(v101, v110), vmaxq_s16((int16x8_t)v119, v128));
    int8x16_t v419 = (int8x16_t)v86;
    int8x16_t v420 = (int8x16_t)v124;
    int8x16_t v130 = (int8x16_t)v125;
    int16x8_t v131 = vclzq_s16(vsubq_s16(v124, v125));
    int8x16_t v132 = (int8x16_t)vsubq_s16((int16x8_t)v25, v131);
    int8x16_t v133 = (int8x16_t)vcgtq_s16((int16x8_t)v129, (int16x8_t)v132);
    int8x16_t v134 = vbslq_s8(v133, v132, v129);
    int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v101), (int16x8_t)v68), (int16x8_t)0);
    int8x16_t v136 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v110), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v137 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, (int16x8_t)v119), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v138 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v128), (int16x8_t)v68), (int16x8_t)0);
    v119.i64[0] = 0x4000400040004;
    v119.i64[1] = 0x4000400040004;
    int8x16_t v139 = vbicq_s8(v119, (int8x16_t)vceqq_s16(vaddq_s16(v138, v137), vnegq_s16(vaddq_s16(v135, (int16x8_t)v136))));
    v119.i64[0] = 0x18001800180018;
    v119.i64[1] = 0x18001800180018;
    int8x16_t v140 = vbslq_s8(v133, v119, v25);
    int8x16_t v141 = (int8x16_t)vsubq_s16((int16x8_t)v134, v135);
    int8x16_t v416 = (int8x16_t)vsubq_s16((int16x8_t)v134, (int16x8_t)v136);
    int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v134, v137);
    int8x16_t v418 = (int8x16_t)vsubq_s16((int16x8_t)v134, v138);
    v135.i64[0] = 0x7000700070007;
    v135.i64[1] = 0x7000700070007;
    v136.i64[0] = 0x8000800080008;
    v136.i64[1] = 0x8000800080008;
    int16x8_t v142 = (int16x8_t)vandq_s8(v427, v136);
    int16x8_t v143 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v136);
    int16x8_t v144 = (int16x8_t)vandq_s8(v73, v68);
    v145.i64[0] = 0x2000200020002;
    v145.i64[1] = 0x2000200020002;
    int16x8_t v146 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v144, v145), v25);
    int8x16_t v147 = (int8x16_t)vceqzq_s16(v142);
    int8x16_t v148 = v471;
    int16x8_t v149 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v147), v143), v146);
    int16x8_t v150 = v467;
    int16x8_t v151 = v468;
    int16x8_t v153 = v469;
    int16x8_t v152 = v470;
    int8x16_t v154 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(vmlaq_s16(v149, v467, v135), vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v134, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v140 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v139, (int16x8_t)v139)), (int16x8_t)v141, v135), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v417, (int16x8_t)v416), (int16x8_t)v418), 3uLL))).i64[0], 0);
    int v155 = (unsigned __int16)vaddvq_s16((int16x8_t)v154);
    BOOL v157 = a5 < 4 || a6 < 2;
    if (v155)
    {
      v158.i64[0] = 0x3000300030003;
      v158.i64[1] = 0x3000300030003;
      int8x16_t v159 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v134), v158), v140), v139);
      v160.i64[0] = 0xF000F000F000FLL;
      v160.i64[1] = 0xF000F000F000FLL;
      int8x16_t v449 = vbslq_s8(v154, v421, v449);
      int8x16_t v450 = vbslq_s8(v154, v422, v450);
      v161.i64[0] = -1;
      v161.i64[1] = -1;
      int8x16_t v451 = vbslq_s8(v154, v425, v451);
      int8x16_t v452 = vbslq_s8(v154, v423, v452);
      int8x16_t v453 = vbslq_s8(v154, v91, v453);
      int8x16_t v454 = vbslq_s8(v154, v80, v454);
      int8x16_t v455 = vbslq_s8(v154, v90, v455);
      int8x16_t v456 = vbslq_s8(v154, v81, v456);
      int8x16_t v457 = vbslq_s8(v154, v82, v457);
      int8x16_t v458 = vbslq_s8(v154, v83, v458);
      int8x16_t v459 = vbslq_s8(v154, v84, v459);
      int8x16_t v460 = vbslq_s8(v154, v85, v460);
      int8x16_t v461 = vbslq_s8(v154, v92, v461);
      int8x16_t v462 = vbslq_s8(v154, v419, v462);
      int8x16_t v463 = vbslq_s8(v154, v89, v463);
      int8x16_t v464 = vbslq_s8(v154, v415, v464);
      int16x8_t v150 = (int16x8_t)vbslq_s8(v154, v141, (int8x16_t)v467);
      int16x8_t v151 = (int16x8_t)vbslq_s8(v154, v416, (int8x16_t)v468);
      int16x8_t v467 = v150;
      int16x8_t v468 = v151;
      int16x8_t v153 = (int16x8_t)vbslq_s8(v154, v417, (int8x16_t)v469);
      int16x8_t v152 = (int16x8_t)vbslq_s8(v154, v418, (int8x16_t)v470);
      int16x8_t v469 = v153;
      int16x8_t v470 = v152;
      int8x16_t v473 = vbslq_s8(v154, v420, v473);
      int8x16_t v474 = vbslq_s8(v154, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v161, vsubq_s16(v160, v131)), (int16x8_t)v130), v133), v474);
      int8x16_t v148 = vbslq_s8(v154, v134, v471);
      int8x16_t v471 = v148;
      int8x16_t v472 = vbslq_s8(v154, v130, v472);
      int8x16_t v73 = vbslq_s8(v154, v159, v466);
      int8x16_t v465 = vbslq_s8(v154, (int8x16_t)vsubq_s16((int16x8_t)v465, (int16x8_t)vqtbl1q_s8(v465, (int8x16_t)xmmword_242EA77A0)), v465);
      int8x16_t v466 = v73;
    }
    int16x8_t v162 = v441;
    int16x8_t v163 = v442;
    int16x8_t v164 = v10;
    int8x16_t v165 = v443;
    if (!v157)
    {
      int16x8_t v166 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA77C0);
      int8x16_t v426 = (int8x16_t)vsubq_s16(v10, v166);
      int16x8_t v428 = vsubq_s16(v441, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7710));
      int16x8_t v167 = vsubq_s16((int16x8_t)v443, v166);
      v475.val[0] = (int8x16_t)v430;
      v475.val[1] = (int8x16_t)v444;
      v475.val[2] = (int8x16_t)v432;
      v475.val[3].i64[0] = v446.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v430, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v424 = (int8x16_t)vsubq_s16(v444, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7750));
      int16x8_t v169 = vsubq_s16(v432, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77C0));
      int16x8_t v170 = vsubq_s16(v446, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7760));
      v475.val[0] = (int8x16_t)v435;
      v475.val[1] = (int8x16_t)v437;
      v475.val[2] = (int8x16_t)v438;
      v475.val[3].i64[0] = v434.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int16x8_t v171 = (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7720);
      int16x8_t v172 = vsubq_s16(v435, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77D0));
      int16x8_t v173 = vsubq_s16(v437, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77E0));
      int8x16_t v174 = (int8x16_t)vsubq_s16(v438, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v442, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7720));
      v475.val[0] = (int8x16_t)vsubq_s16(v434, v171);
      int8x16_t v176 = (int8x16_t)v169;
      v476.val[0] = (int8x16_t)v439;
      v476.val[1] = (int8x16_t)v447;
      v476.val[2] = (int8x16_t)v440;
      v476.val[3].i64[0] = v448.i64[0];
      v476.val[3].i64[1] = v443.i64[1];
      int16x8_t v177 = (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7720);
      int8x16_t v178 = (int8x16_t)vsubq_s16(v439, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA77D0));
      int8x16_t v179 = (int8x16_t)vsubq_s16(v447, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7780));
      v476.val[2] = (int8x16_t)vsubq_s16(v440, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7710));
      int8x16_t v180 = (int8x16_t)vsubq_s16(v448, v177);
      v181.i64[1] = v428.i64[1];
      v181.i64[0] = v167.i64[1];
      v167.i64[1] = v428.i64[0];
      int8x16_t v436 = (int8x16_t)v167;
      int16x8_t v182 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v183 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v184 = vpmaxq_s16(v182, v182);
      int16x8_t v185 = vpminq_s16(v183, v183);
      v186.i64[0] = 0x8000800080008000;
      v186.i64[1] = 0x8000800080008000;
      int16x8_t v187 = vmaxq_s16(v184, v186);
      v188.i64[0] = 0x8000800080008000;
      v188.i64[1] = 0x8000800080008000;
      int16x8_t v189 = vminq_s16(v185, v188);
      int16x8_t v190 = vzip1q_s16(v184, v185);
      v476.val[1].i64[0] = 0x10001000100010;
      v476.val[1].i64[1] = 0x10001000100010;
      int16x8_t v191 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v190)), (int8x16_t)vceqzq_s16(v190));
      int16x8_t v192 = vpmaxq_s16(v191, v191);
      int8x16_t v445 = (int8x16_t)v170;
      int16x8_t v193 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v194 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v195 = vpmaxq_s16(v193, v193);
      int16x8_t v196 = vpminq_s16(v194, v194);
      int16x8_t v197 = vmaxq_s16(v187, v195);
      int16x8_t v198 = vminq_s16(v189, v196);
      int16x8_t v199 = vzip1q_s16(v195, v196);
      int16x8_t v200 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v199)), (int8x16_t)vceqzq_s16(v199));
      int16x8_t v201 = vpmaxq_s16(v200, v200);
      int8x16_t v433 = (int8x16_t)v173;
      int8x16_t v202 = (int8x16_t)v172;
      int8x16_t v429 = v476.val[2];
      int8x16_t v431 = v475.val[0];
      int16x8_t v203 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v204 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v205 = vpmaxq_s16(v203, v203);
      int16x8_t v206 = vpminq_s16(v204, v204);
      int16x8_t v207 = vmaxq_s16(v197, v205);
      int16x8_t v208 = vminq_s16(v198, v206);
      int16x8_t v209 = vzip1q_s16(v205, v206);
      int16x8_t v210 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v209)), (int8x16_t)vceqzq_s16(v209));
      int16x8_t v211 = vpmaxq_s16(v210, v210);
      int16x8_t v212 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v213 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v214 = vpmaxq_s16(v212, v212);
      v476.val[0] = (int8x16_t)vpminq_s16(v213, v213);
      int16x8_t v215 = vmaxq_s16(v207, v214);
      int8x16_t v216 = (int8x16_t)vminq_s16(v208, (int16x8_t)v476.val[0]);
      int16x8_t v217 = vzip1q_s16(v214, (int16x8_t)v476.val[0]);
      int16x8_t v218 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v217)), (int8x16_t)vceqzq_s16(v217));
      v476.val[0] = (int8x16_t)vpmaxq_s16(v218, v218);
      int8x16_t v219 = (int8x16_t)vmaxq_s16(vmaxq_s16(v192, v201), vmaxq_s16(v211, (int16x8_t)v476.val[0]));
      int16x8_t v220 = vclzq_s16(vsubq_s16(v215, (int16x8_t)v216));
      v476.val[3] = (int8x16_t)vsubq_s16((int16x8_t)v476.val[1], v220);
      int8x16_t v221 = (int8x16_t)vcgtq_s16((int16x8_t)v219, (int16x8_t)v476.val[3]);
      int8x16_t v222 = vbslq_s8(v221, v476.val[3], v219);
      v223.i64[0] = 0x3000300030003;
      v223.i64[1] = 0x3000300030003;
      int16x8_t v224 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v192), v223), (int16x8_t)0);
      int8x16_t v225 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v201), v223), (int16x8_t)0);
      int16x8_t v226 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v211), v223), (int16x8_t)0);
      int16x8_t v227 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, (int16x8_t)v476.val[0]), v223), (int16x8_t)0);
      int8x16_t v228 = (int8x16_t)vsubq_s16((int16x8_t)v222, v224);
      int16x8_t v229 = vsubq_s16((int16x8_t)v222, (int16x8_t)v225);
      int8x16_t v230 = (int8x16_t)vsubq_s16((int16x8_t)v222, v226);
      int8x16_t v231 = (int8x16_t)vsubq_s16((int16x8_t)v222, v227);
      int8x16_t v232 = (int8x16_t)vceqq_s16(vaddq_s16(v227, v226), vnegq_s16(vaddq_s16(v224, (int16x8_t)v225)));
      v225.i64[0] = 0x4000400040004;
      v225.i64[1] = 0x4000400040004;
      int8x16_t v233 = vbicq_s8(v225, v232);
      v169.i64[0] = 0x7000700070007;
      v169.i64[1] = 0x7000700070007;
      v476.val[3] = (int8x16_t)vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v476.val[3], v221), vaddq_s16((int16x8_t)v233, (int16x8_t)v233)), (int16x8_t)v228, v169), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v230, v229), (int16x8_t)v231), 3uLL));
      int8x16_t v73 = v466;
      int16x8_t v150 = v467;
      int16x8_t v234 = (int16x8_t)vandq_s8(v466, (int8x16_t)v223);
      v235.i64[0] = 0x2000200020002;
      v235.i64[1] = 0x2000200020002;
      int16x8_t v236 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v234, (int16x8_t)v235), v476.val[1]);
      v476.val[1].i64[0] = 0x8000800080008;
      v476.val[1].i64[1] = 0x8000800080008;
      int16x8_t v237 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v476.val[1]);
      v475.val[0] = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v466, v476.val[1]));
      int16x8_t v152 = v470;
      int8x16_t v148 = v471;
      int16x8_t v238 = vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v475.val[0]), v237), v236), v467, v169);
      int16x8_t v151 = v468;
      int16x8_t v153 = v469;
      int8x16_t v239 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(v238, vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), (int16x8_t)v476.val[3]).i64[0], 0);
      if (vaddvq_s16((int16x8_t)v239))
      {
        int8x16_t v240 = (int8x16_t)v229;
        int8x16_t v241 = v202;
        v242.i64[0] = 0x9000900090009;
        v242.i64[1] = 0x9000900090009;
        int8x16_t v243 = (int8x16_t)v215;
        int8x16_t v244 = vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v222), v235), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v221, v242), (int16x8_t)vmvnq_s8(v221)));
        v242.i64[0] = -1;
        v242.i64[1] = -1;
        v245.i64[0] = 0xF000F000F000FLL;
        v245.i64[1] = 0xF000F000F000FLL;
        int8x16_t v246 = vbslq_s8(v239, v243, v473);
        int16x8_t v150 = (int16x8_t)vbslq_s8(v239, v228, (int8x16_t)v467);
        int16x8_t v151 = (int16x8_t)vbslq_s8(v239, v240, (int8x16_t)v468);
        int16x8_t v153 = (int16x8_t)vbslq_s8(v239, v230, (int8x16_t)v469);
        int16x8_t v152 = (int16x8_t)vbslq_s8(v239, v231, (int8x16_t)v470);
        int8x16_t v148 = vbslq_s8(v239, v222, v471);
        int8x16_t v73 = vbslq_s8(v239, vorrq_s8(v244, v233), v466);
        int8x16_t v464 = vbslq_s8(v239, v180, v464);
        int8x16_t v465 = vbslq_s8(v239, vextq_s8(v443, v443, 8uLL), v465);
        int8x16_t v449 = vbslq_s8(v239, v181, v449);
        int8x16_t v450 = vbslq_s8(v239, v175, v450);
        int8x16_t v451 = vbslq_s8(v239, v426, v451);
        int8x16_t v452 = vbslq_s8(v239, v436, v452);
        int8x16_t v453 = vbslq_s8(v239, v168, v453);
        int8x16_t v454 = vbslq_s8(v239, v424, v454);
        int8x16_t v455 = vbslq_s8(v239, v176, v455);
        int8x16_t v456 = vbslq_s8(v239, v445, v456);
        int8x16_t v457 = vbslq_s8(v239, v241, v457);
        int8x16_t v458 = vbslq_s8(v239, v433, v458);
        int8x16_t v459 = vbslq_s8(v239, v174, v459);
        int8x16_t v460 = vbslq_s8(v239, v431, v460);
        int8x16_t v461 = vbslq_s8(v239, v178, v461);
        int8x16_t v462 = vbslq_s8(v239, v179, v462);
        int8x16_t v463 = vbslq_s8(v239, v429, v463);
        int8x16_t v472 = vbslq_s8(v239, v216, v472);
        int8x16_t v473 = v246;
        int8x16_t v474 = vbslq_s8(v239, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v242, vsubq_s16(v245, v220)), (int16x8_t)v216), v221), v474);
        int16x8_t v467 = v150;
        int16x8_t v468 = v151;
        int16x8_t v469 = v153;
        int16x8_t v470 = v152;
        int8x16_t v471 = v148;
        int8x16_t v466 = v73;
      }
    }
    int16x8_t v247 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v150));
    int8x16_t v449 = (int8x16_t)vaddq_s16(v247, (int16x8_t)v449);
    int8x16_t v450 = (int8x16_t)vaddq_s16((int16x8_t)v450, v247);
    int8x16_t v451 = (int8x16_t)vaddq_s16((int16x8_t)v451, v247);
    int8x16_t v452 = (int8x16_t)vaddq_s16((int16x8_t)v452, v247);
    int16x8_t v248 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v151));
    int8x16_t v453 = (int8x16_t)vaddq_s16((int16x8_t)v453, v248);
    int8x16_t v454 = (int8x16_t)vaddq_s16((int16x8_t)v454, v248);
    int8x16_t v455 = (int8x16_t)vaddq_s16((int16x8_t)v455, v248);
    int8x16_t v456 = (int8x16_t)vaddq_s16((int16x8_t)v456, v248);
    int16x8_t v249 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v153));
    int8x16_t v457 = (int8x16_t)vaddq_s16((int16x8_t)v457, v249);
    int8x16_t v458 = (int8x16_t)vaddq_s16((int16x8_t)v458, v249);
    int8x16_t v459 = (int8x16_t)vaddq_s16((int16x8_t)v459, v249);
    int8x16_t v460 = (int8x16_t)vaddq_s16((int16x8_t)v460, v249);
    int8x16_t v250 = vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v152));
    int8x16_t v461 = (int8x16_t)vaddq_s16((int16x8_t)v461, (int16x8_t)v250);
    int8x16_t v462 = (int8x16_t)vaddq_s16((int16x8_t)v462, (int16x8_t)v250);
    int8x16_t v463 = (int8x16_t)vaddq_s16((int16x8_t)v463, (int16x8_t)v250);
    int8x16_t v464 = (int8x16_t)vaddq_s16((int16x8_t)v464, (int16x8_t)v250);
    v250.i64[0] = 0x8000800080008;
    v250.i64[1] = 0x8000800080008;
    v251.i64[0] = 0x3000300030003;
    v251.i64[1] = 0x3000300030003;
    v252.i64[0] = 0x2000200020002;
    v252.i64[1] = 0x2000200020002;
    int8x16_t v253 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v73, v251), v252);
    v252.i64[0] = 0x10001000100010;
    v252.i64[1] = 0x10001000100010;
    int16x8_t v254 = (int16x8_t)vandq_s8(v253, (int8x16_t)v252);
    v252.i64[0] = 0x7000700070007;
    v252.i64[1] = 0x7000700070007;
    int16x8_t v255 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v148, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v73, v250))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v250)), v254), v150, v252), vshlq_n_s16(vaddq_s16(v153, vaddq_s16(v151, v152)), 3uLL));
    int16x8_t v256 = vpaddq_s16(v255, v255);
    if ((unint64_t)(vpaddq_s16(v256, v256).i16[0] - 1181) < 0xFFFFFFFFFFFFFAF8)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 160;
    }
    else
    {
      int32x4_t v257 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v258 = 8 * (a1 & 7);
      if (v258) {
        uint64_t v259 = *v257 & ~(-1 << v258);
      }
      else {
        uint64_t v259 = 0;
      }
      *a2 = 0;
      uint64_t v261 = ((v148.u16[0] << 20) - 0x100000) & 0xF00000;
      v262.i32[0] = v73.u16[1];
      v262.i32[1] = v73.u16[2];
      int8x8_t v263 = vand_s8((int8x8_t)vshl_u32(v262, (uint32x2_t)0xA00000005), (int8x8_t)0x7C00000003E0);
      __int32 v264 = v263.i32[1];
      __int32 v265 = v263.i32[0] | v73.i8[0] & 0x1F;
      if (!v148.i16[0]) {
        uint64_t v261 = 0;
      }
      unint64_t v266 = (unint64_t)((v148.i8[4] - 1) & 0xF) << 28;
      if (!v148.i16[2]) {
        unint64_t v266 = 0;
      }
      v267.i32[0] = v148.u16[3];
      v267.i32[1] = v148.u16[1];
      int32x2_t v268 = vceqz_s32((int32x2_t)vand_s8(v267, (int8x8_t)0xFFFF0000FFFFLL));
      v269.i64[0] = v268.i32[0];
      v269.i64[1] = v268.i32[1];
      int8x16_t v270 = (int8x16_t)v269;
      v271.i64[0] = -1;
      v271.i64[1] = -1;
      int8x8_t v272 = vand_s8((int8x8_t)vadd_s32((int32x2_t)v267, (int32x2_t)-1), (int8x8_t)0xF0000000FLL);
      v269.i64[0] = v272.u32[0];
      v269.i64[1] = v272.u32[1];
      int8x16_t v273 = vbicq_s8((int8x16_t)vshlq_u64(v269, (uint64x2_t)xmmword_242EA77F0), v270);
      v270.i64[0] = v266;
      v270.i64[1] = v265 | v264 | ((unint64_t)(v73.i8[6] & 0x1F) << 15) | v261;
      int8x16_t v274 = vorrq_s8(v270, v273);
      uint64_t v275 = v465.i64[0];
      unint64_t v276 = vorrq_s8(v274, (int8x16_t)vdupq_laneq_s64((int64x2_t)v274, 1)).u64[0];
      unint64_t v277 = (v276 << v258) | v259;
      if (v258 >= 0x1C)
      {
        void *v257 = v277;
        unint64_t v277 = v276 >> (-8 * (a1 & 7u));
      }
      uint64_t v278 = v275;
      v279.i64[0] = WORD2(v275);
      v279.i64[1] = HIWORD(v275);
      v280.i64[0] = 0xFFFFLL;
      v280.i64[1] = 0xFFFFLL;
      uint64x2_t v281 = vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)v279, v280), (uint64x2_t)xmmword_242EA7800);
      unint64_t v282 = v278 | v281.i64[0] | v281.i64[1];
      char v283 = (v258 + 36) & 0x3C;
      *(void *)((char *)v257 + (((v258 + 36) >> 3) & 8)) = v277 | (v282 << v283);
      unint64_t v284 = v258 + 100;
      int8x16_t v285 = (int8x16_t)vsubq_s16((int16x8_t)v471, v467);
      int8x16_t v286 = (int8x16_t)vsubq_s16((int16x8_t)v471, v468);
      int8x16_t v287 = (int8x16_t)vsubq_s16((int16x8_t)v471, v469);
      int8x16_t v288 = (int8x16_t)vsubq_s16((int16x8_t)v471, v470);
      *(uint8x8_t *)v285.i8 = vqmovn_u16((uint16x8_t)v285);
      *(uint8x8_t *)v286.i8 = vqmovn_u16((uint16x8_t)v286);
      *(uint8x8_t *)v287.i8 = vqmovn_u16((uint16x8_t)v287);
      *(uint8x8_t *)v288.i8 = vqmovn_u16((uint16x8_t)v288);
      int16x8_t v289 = (int16x8_t)vtrn1q_s8(v285, v286);
      int16x8_t v290 = (int16x8_t)vtrn2q_s8(v285, v286);
      int8x16_t v291 = vtrn1q_s8(v287, v288);
      int16x8_t v292 = (int16x8_t)vtrn2q_s8(v287, v288);
      int8x16_t v293 = (int8x16_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(v289, (int16x8_t)v291), (int32x4_t)vzip1q_s16(v290, v292)), (int64x2_t)vzip1q_s32((int32x4_t)vtrn2q_s16(v289, (int16x8_t)v291), (int32x4_t)vtrn2q_s16(v290, v292)));
      v291.i64[0] = 0x202020202020202;
      v291.i64[1] = 0x202020202020202;
      int8x16_t v294 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v466.i8, (int16x4_t)0x4000400040004)), v291);
      v291.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v291.i64[1] = 0xF8F8F8F8F8F8F8F8;
      uint8x16_t v295 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8(v271, (uint8x16_t)vorrq_s8(v294, v291)), v293);
      int16x8_t v296 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v294.i8);
      int16x8_t v297 = (int16x8_t)vmovl_high_u8((uint8x16_t)v294);
      uint16x8_t v298 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v295.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v296)), (int16x8_t)vshlq_u16(vmovl_high_u8(v295), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v297)));
      uint16x8_t v299 = (uint16x8_t)vpaddq_s16(v296, v297);
      int32x4_t v300 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v299.i8);
      int32x4_t v301 = (int32x4_t)vmovl_high_u16(v299);
      int32x4_t v302 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v298.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v300)), (int32x4_t)vshlq_u32(vmovl_high_u16(v298), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v301)));
      int32x4_t v303 = vpaddq_s32(v300, v301);
      v279.i64[0] = v302.u32[0];
      v279.i64[1] = v302.u32[1];
      uint64x2_t v304 = (uint64x2_t)v279;
      v279.i64[0] = v302.u32[2];
      v279.i64[1] = v302.u32[3];
      uint64x2_t v305 = (uint64x2_t)v279;
      v279.i64[0] = v303.u32[0];
      v279.i64[1] = v303.u32[1];
      int64x2_t v306 = v279;
      v279.i64[0] = v303.u32[2];
      v279.i64[1] = v303.u32[3];
      int64x2_t v307 = vpaddq_s64((int64x2_t)vshlq_u64(v304, (uint64x2_t)vzip1q_s64((int64x2_t)0, v306)), (int64x2_t)vshlq_u64(v305, (uint64x2_t)vzip1q_s64((int64x2_t)0, v279)));
      int64x2_t v308 = vpaddq_s64(v306, v279);
      uint64_t v309 = (v258 + 100) & 0x3C;
      unint64_t v310 = (v307.i64[0] << v309) | (v282 >> -v283);
      if ((unint64_t)(v308.i64[0] + v309) >= 0x40)
      {
        *(void *)((char *)v257 + ((v284 >> 3) & 0x18)) = v310;
        unint64_t v310 = (unint64_t)v307.i64[0] >> -(char)v309;
      }
      unint64_t v311 = v308.i64[0] + v284;
      unint64_t v312 = v310 | (v307.i64[1] << v311);
      if ((v311 & 0x3F) + v308.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v312;
        unint64_t v312 = (unint64_t)v307.i64[1] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v312 = 0;
        }
      }
      unint64_t v313 = v311 + v308.i64[1];
      v314.i64[0] = 0x8000800080008;
      v314.i64[1] = 0x8000800080008;
      v315.i64[0] = -1;
      v315.i64[1] = -1;
      int16x8_t v316 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v466, v314), (int8x16_t)0, 8uLL), v471);
      v317.i64[0] = 0xF000F000F000FLL;
      v317.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v318 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v315, (uint16x8_t)vaddq_s16(v316, v317)), v474);
      int32x4_t v319 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v316.i8);
      int32x4_t v320 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v318.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v319)), (int32x4_t)vmovl_high_u16(v318));
      int32x4_t v321 = vpaddq_s32(v319, (int32x4_t)vmovl_high_u16((uint16x8_t)v316));
      v322.i64[0] = v320.u32[0];
      v322.i64[1] = v320.u32[1];
      uint64x2_t v323 = (uint64x2_t)v322;
      v322.i64[0] = v320.u32[2];
      v322.i64[1] = v320.u32[3];
      uint64x2_t v324 = (uint64x2_t)v322;
      v322.i64[0] = v321.u32[0];
      v322.i64[1] = v321.u32[1];
      int64x2_t v325 = v322;
      v322.i64[0] = v321.u32[2];
      v322.i64[1] = v321.u32[3];
      int64x2_t v326 = vpaddq_s64((int64x2_t)vshlq_u64(v323, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)), (int64x2_t)vshlq_u64(v324, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)));
      int64x2_t v327 = vpaddq_s64(v325, v322);
      unint64_t v328 = (v326.i64[0] << v313) | v312;
      if (v327.i64[0] + (v313 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v313 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v328;
        unint64_t v328 = (unint64_t)v326.i64[0] >> -(v313 & 0x3F);
        if ((v313 & 0x3F) == 0) {
          unint64_t v328 = 0;
        }
      }
      unint64_t v329 = v327.i64[0] + v313;
      unint64_t v330 = v328 | (v326.i64[1] << v329);
      if ((v329 & 0x3F) + v327.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v330;
        unint64_t v330 = (unint64_t)v326.i64[1] >> -(v329 & 0x3F);
        if ((v329 & 0x3F) == 0) {
          unint64_t v330 = 0;
        }
      }
      unint64_t v331 = v329 + v327.i64[1];
      int16x8_t v332 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v467, 8uLL);
      v333.i64[0] = 0xF000F000F000FLL;
      v333.i64[1] = 0xF000F000F000FLL;
      v334.i64[0] = -1;
      v334.i64[1] = -1;
      uint16x8_t v335 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v334, (uint16x8_t)vaddq_s16(v332, v333)), v449);
      int32x4_t v336 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v332.i8);
      int32x4_t v337 = (int32x4_t)vmovl_high_u16((uint16x8_t)v332);
      int32x4_t v338 = vpaddq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v335.i8), (int32x4_t)vshlq_u32(vmovl_high_u16(v335), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v337)));
      int32x4_t v339 = vpaddq_s32(v336, v337);
      v340.i64[0] = v338.u32[0];
      v340.i64[1] = v338.u32[1];
      uint64x2_t v341 = (uint64x2_t)v340;
      v340.i64[0] = v338.u32[2];
      v340.i64[1] = v338.u32[3];
      uint64x2_t v342 = (uint64x2_t)v340;
      v340.i64[0] = v339.u32[0];
      v340.i64[1] = v339.u32[1];
      int64x2_t v343 = v340;
      v340.i64[0] = v339.u32[2];
      v340.i64[1] = v339.u32[3];
      int64x2_t v344 = vpaddq_s64((int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v343)), (int64x2_t)vshlq_u64(v342, (uint64x2_t)vzip1q_s64((int64x2_t)0, v340)));
      int64x2_t v345 = vpaddq_s64(v343, v340);
      unint64_t v346 = (v344.i64[0] << v331) | v330;
      if (v345.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v346;
        if ((v331 & 0x3F) != 0) {
          unint64_t v346 = (unint64_t)v344.i64[0] >> -(v331 & 0x3F);
        }
        else {
          unint64_t v346 = 0;
        }
      }
      unint64_t v347 = v345.i64[0] + v331;
      uint64_t v348 = (v345.i64[0] + v331) & 0x3F;
      unint64_t v349 = v346 | (v344.i64[1] << v347);
      if ((unint64_t)(v348 + v345.i64[1]) >= 0x40)
      {
        *(void *)((char *)v257 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
        unint64_t v349 = (unint64_t)v344.i64[1] >> -(char)v348;
        if (!v348) {
          unint64_t v349 = 0;
        }
      }
      unint64_t v350 = v347 + v345.i64[1];
      v351.i64[0] = 0xF000F000F000FLL;
      v351.i64[1] = 0xF000F000F000FLL;
      v352.i64[0] = -1;
      v352.i64[1] = -1;
      for (uint64_t i = 16; i != 64; i += 16)
      {
        uint16x8_t v354 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v352, (uint16x8_t)vaddq_s16(v467, v351)), *(int8x16_t *)((char *)&v449 + i));
        int32x4_t v355 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v467.i8);
        int32x4_t v356 = (int32x4_t)vmovl_high_u16((uint16x8_t)v467);
        int32x4_t v357 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v354.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v355)), (int32x4_t)vshlq_u32(vmovl_high_u16(v354), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v356)));
        int32x4_t v358 = vpaddq_s32(v355, v356);
        v359.i64[0] = v357.u32[0];
        v359.i64[1] = v357.u32[1];
        uint64x2_t v360 = (uint64x2_t)v359;
        v359.i64[0] = v357.u32[2];
        v359.i64[1] = v357.u32[3];
        uint64x2_t v361 = (uint64x2_t)v359;
        v359.i64[0] = v358.u32[0];
        v359.i64[1] = v358.u32[1];
        int64x2_t v362 = v359;
        v359.i64[0] = v358.u32[2];
        v359.i64[1] = v358.u32[3];
        int64x2_t v363 = vpaddq_s64((int64x2_t)vshlq_u64(v360, (uint64x2_t)vzip1q_s64((int64x2_t)0, v362)), (int64x2_t)vshlq_u64(v361, (uint64x2_t)vzip1q_s64((int64x2_t)0, v359)));
        int64x2_t v364 = vpaddq_s64(v362, v359);
        unint64_t v365 = (v363.i64[0] << v350) | v349;
        if (v364.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v363.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v364.i64[0] + v350;
        unint64_t v349 = v365 | (v363.i64[1] << v366);
        if ((v366 & 0x3F) + v364.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v363.i64[1] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v366 + v364.i64[1];
      }
      uint64_t v367 = 0;
      v368.i64[0] = 0xF000F000F000FLL;
      v368.i64[1] = 0xF000F000F000FLL;
      v369.i64[0] = -1;
      v369.i64[1] = -1;
      do
      {
        uint16x8_t v370 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v369, (uint16x8_t)vaddq_s16(v468, v368)), *(int8x16_t *)((char *)&v453 + v367));
        int32x4_t v371 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v468.i8);
        int32x4_t v372 = (int32x4_t)vmovl_high_u16((uint16x8_t)v468);
        int32x4_t v373 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v370.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v371)), (int32x4_t)vshlq_u32(vmovl_high_u16(v370), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v372)));
        int32x4_t v374 = vpaddq_s32(v371, v372);
        v375.i64[0] = v373.u32[0];
        v375.i64[1] = v373.u32[1];
        uint64x2_t v376 = (uint64x2_t)v375;
        v375.i64[0] = v373.u32[2];
        v375.i64[1] = v373.u32[3];
        uint64x2_t v377 = (uint64x2_t)v375;
        v375.i64[0] = v374.u32[0];
        v375.i64[1] = v374.u32[1];
        int64x2_t v378 = v375;
        v375.i64[0] = v374.u32[2];
        v375.i64[1] = v374.u32[3];
        int64x2_t v379 = vpaddq_s64((int64x2_t)vshlq_u64(v376, (uint64x2_t)vzip1q_s64((int64x2_t)0, v378)), (int64x2_t)vshlq_u64(v377, (uint64x2_t)vzip1q_s64((int64x2_t)0, v375)));
        int64x2_t v380 = vpaddq_s64(v378, v375);
        unint64_t v381 = (v379.i64[0] << v350) | v349;
        if (v380.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v381;
          unint64_t v381 = (unint64_t)v379.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v381 = 0;
          }
        }
        unint64_t v382 = v380.i64[0] + v350;
        unint64_t v349 = v381 | (v379.i64[1] << v382);
        if ((v382 & 0x3F) + v380.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v382 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v379.i64[1] >> -(v382 & 0x3F);
          if ((v382 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v382 + v380.i64[1];
        v367 += 16;
      }
      while (v367 != 64);
      uint64_t v383 = 0;
      v384.i64[0] = 0xF000F000F000FLL;
      v384.i64[1] = 0xF000F000F000FLL;
      v385.i64[0] = -1;
      v385.i64[1] = -1;
      do
      {
        uint16x8_t v386 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v385, (uint16x8_t)vaddq_s16(v469, v384)), *(int8x16_t *)((char *)&v457 + v383));
        int32x4_t v387 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v469.i8);
        int32x4_t v388 = (int32x4_t)vmovl_high_u16((uint16x8_t)v469);
        int32x4_t v389 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v386.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v387)), (int32x4_t)vshlq_u32(vmovl_high_u16(v386), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v388)));
        int32x4_t v390 = vpaddq_s32(v387, v388);
        v391.i64[0] = v389.u32[0];
        v391.i64[1] = v389.u32[1];
        uint64x2_t v392 = (uint64x2_t)v391;
        v391.i64[0] = v389.u32[2];
        v391.i64[1] = v389.u32[3];
        uint64x2_t v393 = (uint64x2_t)v391;
        v391.i64[0] = v390.u32[0];
        v391.i64[1] = v390.u32[1];
        int64x2_t v394 = v391;
        v391.i64[0] = v390.u32[2];
        v391.i64[1] = v390.u32[3];
        int64x2_t v395 = vpaddq_s64((int64x2_t)vshlq_u64(v392, (uint64x2_t)vzip1q_s64((int64x2_t)0, v394)), (int64x2_t)vshlq_u64(v393, (uint64x2_t)vzip1q_s64((int64x2_t)0, v391)));
        int64x2_t v396 = vpaddq_s64(v394, v391);
        unint64_t v397 = (v395.i64[0] << v350) | v349;
        if (v396.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v397;
          unint64_t v397 = (unint64_t)v395.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v397 = 0;
          }
        }
        unint64_t v398 = v396.i64[0] + v350;
        unint64_t v349 = v397 | (v395.i64[1] << v398);
        if ((v398 & 0x3F) + v396.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v398 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v395.i64[1] >> -(v398 & 0x3F);
          if ((v398 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v398 + v396.i64[1];
        v383 += 16;
      }
      while (v383 != 64);
      uint64_t v399 = 0;
      v400.i64[0] = 0xF000F000F000FLL;
      v400.i64[1] = 0xF000F000F000FLL;
      v401.i64[0] = -1;
      v401.i64[1] = -1;
      do
      {
        uint16x8_t v402 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v401, (uint16x8_t)vaddq_s16(v470, v400)), *(int8x16_t *)((char *)&v461 + v399));
        int32x4_t v403 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v470.i8);
        int32x4_t v404 = (int32x4_t)vmovl_high_u16((uint16x8_t)v470);
        int32x4_t v405 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v402.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v403)), (int32x4_t)vshlq_u32(vmovl_high_u16(v402), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v404)));
        int32x4_t v406 = vpaddq_s32(v403, v404);
        v407.i64[0] = v405.u32[0];
        v407.i64[1] = v405.u32[1];
        uint64x2_t v408 = (uint64x2_t)v407;
        v407.i64[0] = v405.u32[2];
        v407.i64[1] = v405.u32[3];
        uint64x2_t v409 = (uint64x2_t)v407;
        v407.i64[0] = v406.u32[0];
        v407.i64[1] = v406.u32[1];
        int64x2_t v410 = v407;
        v407.i64[0] = v406.u32[2];
        v407.i64[1] = v406.u32[3];
        int64x2_t v411 = vpaddq_s64((int64x2_t)vshlq_u64(v408, (uint64x2_t)vzip1q_s64((int64x2_t)0, v410)), (int64x2_t)vshlq_u64(v409, (uint64x2_t)vzip1q_s64((int64x2_t)0, v407)));
        int64x2_t v412 = vpaddq_s64(v410, v407);
        unint64_t v413 = (v411.i64[0] << v350) | v349;
        if (v412.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v413;
          unint64_t v413 = (unint64_t)v411.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v413 = 0;
          }
        }
        unint64_t v414 = v412.i64[0] + v350;
        unint64_t v349 = v413 | (v411.i64[1] << v414);
        if ((v414 & 0x3F) + v412.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v411.i64[1] >> -(v414 & 0x3F);
          if ((v414 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v414 + v412.i64[1];
        v399 += 16;
      }
      while (v399 != 64);
      if ((v350 & 0x3F) != 0) {
        *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
      }
      unint64_t result = (v350 - v258 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(void *)a1 = *(void *)a3;
    *a2 = 7;
    return 8;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v10 = a6;
  long long v67 = 0u;
  long long v68 = 0u;
  if (a5 > 1)
  {
    uint64_t v20 = a5 & 0xFE;
    if (a5 == v20)
    {
      uint64_t v21 = 0;
      int16x8_t v22 = (uint64_t *)(a3 + 8);
      int16x8_t v23 = &v69;
      do
      {
        int16x8_t v24 = v23;
        int8x16_t v25 = v22;
        uint64_t v26 = a5;
        do
        {
          uint64_t v27 = *v25;
          *((void *)v24 - 4) = *(v25 - 1);
          *(void *)int16x8_t v24 = v27;
          v24 += 4;
          v25 += 2;
          v26 -= 2;
        }
        while (v26);
        ++v21;
        int16x8_t v22 = (uint64_t *)((char *)v22 + a4);
        int16x8_t v23 = (long long *)((char *)v23 + 8);
      }
      while (v21 != a6);
    }
    else
    {
      uint64_t v28 = 0;
      int16x8_t v29 = (uint64_t *)(a3 + 8);
      int16x8_t v30 = &v69;
      int16x8_t v31 = (char *)&v67 + ((32 * a5) & 0x1FC0);
      do
      {
        int16x8_t v32 = v30;
        int16x8_t v33 = v29;
        uint64_t v34 = a5 & 0xFE;
        do
        {
          uint64_t v35 = *v33;
          *((void *)v32 - 4) = *(v33 - 1);
          *(void *)int16x8_t v32 = v35;
          v32 += 4;
          v33 += 2;
          v34 -= 2;
        }
        while (v34);
        int16x8_t v36 = (uint64_t *)(a3 + v28 * a4 + 8 * v20);
        int16x8_t v37 = v31;
        uint64_t v38 = a5 - v20;
        do
        {
          uint64_t v39 = *v36++;
          *int16x8_t v37 = v39;
          v37 += 4;
          --v38;
        }
        while (v38);
        ++v28;
        int16x8_t v29 = (uint64_t *)((char *)v29 + a4);
        int16x8_t v30 = (long long *)((char *)v30 + 8);
        v31 += 8;
      }
      while (v28 != v10);
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v11 = a6 & 0xFE;
    int16x8_t v12 = (uint64_t *)(a3 + 1);
    int16x8_t v13 = (void *)&v67 + 1;
    uint64_t v14 = v11;
    do
    {
      uint64_t v15 = *(uint64_t *)((char *)v12 - 1);
      uint64_t v16 = *v12;
      int16x8_t v12 = (uint64_t *)((char *)v12 + 2);
      *(v13 - 1) = v15;
      void *v13 = v16;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v11 != a6)
    {
LABEL_7:
      uint64_t v17 = a6 - v11;
      int16x8_t v18 = (void *)&v67 + v11;
      int16x8_t v19 = (void *)(a3 + v11 * a4);
      do
      {
        *v18++ = *v19;
        int16x8_t v19 = (void *)((char *)v19 + a4);
        --v17;
      }
      while (v17);
    }
  }
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v67);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v69);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v67 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v69 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v71);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v73);
  uint32x4_t v40 = vmovl_u16(*(uint16x4_t *)((char *)&v71 + 8));
  uint32x4_t v41 = vmovl_u16(*(uint16x4_t *)((char *)&v73 + 8));
  if (a5 >= 4) {
    unsigned int v42 = 4;
  }
  else {
    unsigned int v42 = a5;
  }
  if (a5 >= 4) {
    unsigned int v43 = a5 - 4;
  }
  else {
    unsigned int v43 = 0;
  }
  if (a6 >= 2) {
    unsigned int v44 = 2;
  }
  else {
    unsigned int v44 = a6;
  }
  uint32x4_t v65 = v40;
  uint32x4_t v66 = v41;
  if (a6 >= 2) {
    unsigned int v45 = a6 - 2;
  }
  else {
    unsigned int v45 = 0;
  }
  char v47 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1, (uint64_t)&v59, a7, v42, v44);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v68);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v70);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v68 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v70 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v72);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v74);
  uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)((char *)&v72 + 8));
  uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)((char *)&v74 + 8));
  if (a6 >= 4) {
    unsigned int v48 = 2;
  }
  else {
    unsigned int v48 = v45;
  }
  int v49 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 40, (uint64_t)&v59, a7, v42, v48);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v75);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v77);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v75 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v77 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v79);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v81);
  uint32x4_t v50 = vmovl_u16(*(uint16x4_t *)((char *)&v79 + 8));
  uint32x4_t v51 = vmovl_u16(*(uint16x4_t *)((char *)&v81 + 8));
  if (a5 >= 8) {
    unsigned int v52 = 4;
  }
  else {
    unsigned int v52 = v43;
  }
  uint32x4_t v65 = v50;
  uint32x4_t v66 = v51;
  int v53 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 80, (uint64_t)&v59, a7, v52, v44);
  uint32x4_t v59 = vmovl_u16(*(uint16x4_t *)&v76);
  uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)&v78);
  uint32x4_t v61 = vmovl_u16(*(uint16x4_t *)((char *)&v76 + 8));
  uint32x4_t v62 = vmovl_u16(*(uint16x4_t *)((char *)&v78 + 8));
  uint32x4_t v63 = vmovl_u16(*(uint16x4_t *)&v80);
  uint32x4_t v64 = vmovl_u16(*(uint16x4_t *)&v82);
  uint32x4_t v65 = vmovl_u16(*(uint16x4_t *)((char *)&v80 + 8));
  uint32x4_t v66 = vmovl_u16(*(uint16x4_t *)((char *)&v82 + 8));
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 120, (uint64_t)&v59, a7, v52, v48);
  if (v53) {
    char v55 = 4;
  }
  else {
    char v55 = 0;
  }
  if (v49) {
    char v56 = 2;
  }
  else {
    char v56 = 0;
  }
  if (result) {
    char v57 = -8;
  }
  else {
    char v57 = -16;
  }
  *a2 = v57 | v55 | v47 | v56;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v8 = 0;
  uint64_t v283 = *MEMORY[0x263EF8340];
  BOOL v9 = a5 < 2;
  BOOL v10 = a4 < 4 || a5 < 2;
  BOOL v258 = v10;
  BOOL v11 = a4 < 4 || a5 == 0;
  BOOL v257 = v11;
  BOOL v12 = a4 < 3 || a5 < 2;
  BOOL v256 = v12;
  BOOL v13 = a4 < 3 || a5 == 0;
  BOOL v255 = v13;
  if (a4) {
    BOOL v14 = a5 < 2;
  }
  else {
    BOOL v14 = 1;
  }
  if (a4 < 2) {
    BOOL v9 = 1;
  }
  BOOL v253 = v9;
  BOOL v254 = v14;
  BOOL v15 = a4 < 2 || a5 == 0;
  do
  {
    *(unsigned int *)((char *)&v279 + v8 * 4) = 16;
    v272[v8] = 3;
    *(_DWORD *)((char *)&v271[2] + v8 * 4) = 0x8000;
    int16x8_t v23 = (unsigned int *)(a2 + v8 * 4);
    if (a3 == 1)
    {
      int8x16_t v25 = &v274[v8];
      if ((*v23 ^ 0x8000) == 1) {
        unsigned int v24 = 0;
      }
      else {
        unsigned int v24 = *v23 ^ 0x8000;
      }
      *int8x16_t v25 = v24;
      if ((v23[4] ^ 0x8000) == 1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v23[4] ^ 0x8000;
      }
      v25[4] = v26;
      if ((v23[8] ^ 0x8000) == 1) {
        unsigned int v27 = 0;
      }
      else {
        unsigned int v27 = v23[8] ^ 0x8000;
      }
      v25[8] = v27;
      if ((v23[12] ^ 0x8000) == 1) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = v23[12] ^ 0x8000;
      }
      v25[12] = v28;
      if ((v23[16] ^ 0x8000) == 1) {
        unsigned int v29 = 0;
      }
      else {
        unsigned int v29 = v23[16] ^ 0x8000;
      }
      v25[16] = v29;
      unsigned int v30 = v23[20] ^ 0x8000;
      if (v30 == 1) {
        unsigned int v30 = 0;
      }
      v25[20] = v30;
      unsigned int v31 = v23[24] ^ 0x8000;
      if (v31 == 1) {
        unsigned int v31 = 0;
      }
      v25[24] = v31;
      int v33 = v23[28] ^ 0x8000;
      if (v33 == 1) {
        unsigned int v32 = 0;
      }
      else {
        unsigned int v32 = v33;
      }
    }
    else if (a3 == 3)
    {
      unsigned int v24 = *v23 ^ 0x8000;
      int8x16_t v25 = &v274[v8];
      *int8x16_t v25 = v24;
      unsigned int v26 = v23[4] ^ 0x8000;
      v25[4] = v26;
      unsigned int v27 = v23[8] ^ 0x8000;
      v25[8] = v27;
      unsigned int v28 = v23[12] ^ 0x8000;
      v25[12] = v28;
      unsigned int v29 = v23[16] ^ 0x8000;
      v25[16] = v29;
      unsigned int v30 = v23[20] ^ 0x8000;
      v25[20] = v30;
      unsigned int v31 = v23[24] ^ 0x8000;
      v25[24] = v31;
      unsigned int v32 = v23[28] ^ 0x8000;
    }
    else
    {
      unsigned int v24 = *v23;
      int8x16_t v25 = &v274[v8];
      *int8x16_t v25 = *v23;
      unsigned int v26 = v23[4];
      v25[4] = v26;
      unsigned int v27 = v23[8];
      v25[8] = v27;
      unsigned int v28 = v23[12];
      v25[12] = v28;
      unsigned int v29 = v23[16];
      v25[16] = v29;
      unsigned int v30 = v23[20];
      v25[20] = v30;
      unsigned int v31 = v23[24];
      v25[24] = v31;
      unsigned int v32 = v23[28];
    }
    v25[28] = v32;
    uint64_t v34 = &v278[v8 + 4];
    v278[v8 + 4] = v24;
    v278[v8 + 8] = v24;
    v278[v8] = 0;
    unsigned int v35 = v24;
    if (v15)
    {
      if (v254) {
        goto LABEL_60;
      }
    }
    else
    {
      if (v26 < v24)
      {
        v278[v8] = 1;
        v278[v8 + 8] = v26;
        unsigned int v35 = v26;
      }
      if (v24 >= v26) {
        int16x8_t v36 = &v278[v8 + 4];
      }
      else {
        int16x8_t v36 = &v274[v8 + 4];
      }
      unsigned int v24 = *v36;
      *uint64_t v34 = v24;
      if (v254)
      {
LABEL_60:
        if (v253) {
          goto LABEL_61;
        }
        goto LABEL_78;
      }
    }
    if (v27 < v35)
    {
      v278[v8] = 2;
      v278[v8 + 8] = v27;
      unsigned int v35 = v27;
    }
    if (v24 >= v27) {
      int16x8_t v37 = &v278[v8 + 4];
    }
    else {
      int16x8_t v37 = &v274[v8 + 8];
    }
    unsigned int v24 = *v37;
    *uint64_t v34 = *v37;
    if (v253)
    {
LABEL_61:
      if (v255) {
        goto LABEL_62;
      }
      goto LABEL_84;
    }
LABEL_78:
    if (v28 < v35)
    {
      v278[v8] = 3;
      v278[v8 + 8] = v28;
      unsigned int v35 = v28;
    }
    if (v24 >= v28) {
      uint64_t v38 = &v278[v8 + 4];
    }
    else {
      uint64_t v38 = &v274[v8 + 12];
    }
    unsigned int v24 = *v38;
    *uint64_t v34 = *v38;
    if (v255)
    {
LABEL_62:
      if (v257) {
        goto LABEL_63;
      }
      goto LABEL_90;
    }
LABEL_84:
    if (v29 < v35)
    {
      v278[v8] = 4;
      v278[v8 + 8] = v29;
      unsigned int v35 = v29;
    }
    if (v24 >= v29) {
      uint64_t v39 = &v278[v8 + 4];
    }
    else {
      uint64_t v39 = &v274[v8 + 16];
    }
    unsigned int v24 = *v39;
    *uint64_t v34 = *v39;
    if (v257)
    {
LABEL_63:
      if (v256) {
        goto LABEL_64;
      }
      goto LABEL_96;
    }
LABEL_90:
    if (v30 < v35)
    {
      v278[v8] = 5;
      v278[v8 + 8] = v30;
      unsigned int v35 = v30;
    }
    if (v24 >= v30) {
      uint32x4_t v40 = &v278[v8 + 4];
    }
    else {
      uint32x4_t v40 = &v274[v8 + 20];
    }
    unsigned int v24 = *v40;
    *uint64_t v34 = *v40;
    if (v256)
    {
LABEL_64:
      if (v258) {
        goto LABEL_106;
      }
LABEL_101:
      if (v32 < v35)
      {
        v278[v8] = 7;
        v278[v8 + 8] = v32;
        unsigned int v35 = v32;
      }
      unsigned int v42 = &v274[v8 + 28];
      if (v24 >= v32) {
        unsigned int v42 = &v278[v8 + 4];
      }
      unsigned int v24 = *v42;
      *uint64_t v34 = *v42;
      goto LABEL_106;
    }
LABEL_96:
    if (v31 < v35)
    {
      v278[v8] = 6;
      v278[v8 + 8] = v31;
      unsigned int v35 = v31;
    }
    uint32x4_t v41 = &v274[v8 + 24];
    if (v24 >= v31) {
      uint32x4_t v41 = &v278[v8 + 4];
    }
    unsigned int v24 = *v41;
    *uint64_t v34 = *v41;
    if (!v258) {
      goto LABEL_101;
    }
LABEL_106:
    unsigned int v43 = __clz(v24 - v35);
    int v44 = 32 - v43;
    if ((int)(32 - v43) <= 1) {
      int v44 = 1;
    }
    unsigned int v45 = v44 - 1;
    if (v24 == 0xFFFF && v43 == 31) {
      unsigned int v45 = 1;
    }
    v275[v8] = v45;
    BOOL v47 = 0;
    if ((a3 | 2) == 3 && v24 >= 0x8000 && !(v35 >> 15)) {
      BOOL v47 = kDQuadParamTable[10 * v45 + 488] == 0;
    }
    if (v45 > 0xC || v47)
    {
      int v16 = kDQuadParamTable[10 * v45 + 484] - v47;
      unsigned int v17 = v16 + 2;
      if (v47) {
        int v18 = 0;
      }
      else {
        int v18 = -2;
      }
      int v19 = v35 & ~(-1 << (14 - v16));
      if (v17 >= 0x10) {
        int v19 = 0;
      }
      int v20 = v19 + v18;
      unsigned int v21 = __clz(v20 + v24 - v35);
      if (v20 >= 1 && v21 < v43) {
        v275[v8] = v45 + 1;
      }
    }
    ++v8;
  }
  while (v8 != 4);
  v271[0] = 0;
  v271[1] = 0;
  v270[0] = 0;
  v270[1] = 0;
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::deriveLossyDQuadBitSharing(v272, v275, v271, v270);
  unint64_t v48 = 0;
  int v49 = 0;
  if (a4) {
    BOOL v50 = a5 == 0;
  }
  else {
    BOOL v50 = 1;
  }
  int v51 = v50;
  while (2)
  {
    uint64_t v53 = v272[v48];
    unsigned int v54 = v275[v48];
    char v55 = &kDQuadParamTable[160 * v53 + 10 * v54];
    int v56 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
          + 4 * v53
          + 2);
    int v57 = v55[5];
    unsigned int v58 = v55[4] + v56;
    *(unsigned int *)((char *)&v266 + v48 * 4) = v58;
    int v59 = v57 + v56;
    *(unsigned int *)((char *)&v262 + v48 * 4) = v59;
    unint64_t v60 = *((void *)v55 + 1);
    int v61 = *(_DWORD *)((char *)v270 + v48 * 4) - *(_DWORD *)((char *)v271 + v48 * 4);
    if (v61 < 0)
    {
      if (kDQuadParamTable[160 * v53 + 7 + 10 * v54] < *(_DWORD *)((char *)v271 + v48 * 4)
                                                                    - *(_DWORD *)((char *)v270 + v48 * 4))
      {
        *(unsigned int *)((char *)&v262 + v48 * 4) = --v59;
        if (!kDQuadParamTable[160 * v53 + 8 + 10 * v54])
        {
          int v62 = -1;
LABEL_134:
          *(unsigned int *)((char *)&v266 + v48 * 4) = v62 + v58;
        }
      }
    }
    else if (v61)
    {
      v59 += v61;
      *(unsigned int *)((char *)&v262 + v48 * 4) = v59;
      int v62 = v61;
      goto LABEL_134;
    }
    if (v53 == 5)
    {
      int v63 = (v61 < 2) | v49;
      if (v54 == 1) {
        int v49 = v63;
      }
    }
    if (a3 == 4)
    {
      if (v53 == 3) {
        int v64 = 31744;
      }
      else {
        int v64 = 0;
      }
      if (v53 == 4) {
        int v65 = 2139095040;
      }
      else {
        int v65 = v64;
      }
      int v66 = 1 << (*(unsigned int *)((char *)&v279 + v48 * 4) - 1);
      if (v51)
      {
        if (v15) {
          goto LABEL_149;
        }
LABEL_163:
        unsigned int v70 = v274[v48 + 4];
        BOOL v72 = (v65 & ~v70) == 0 || v70 == v66;
        v49 |= v72;
        if (!v254) {
          goto LABEL_170;
        }
LABEL_150:
        if (v253) {
          goto LABEL_151;
        }
LABEL_177:
        unsigned int v76 = v274[v48 + 12];
        BOOL v78 = (v65 & ~v76) == 0 || v76 == v66;
        v49 |= v78;
        if (!v255) {
          goto LABEL_184;
        }
LABEL_152:
        if (v257) {
          goto LABEL_153;
        }
LABEL_191:
        unsigned int v82 = v274[v48 + 20];
        BOOL v84 = (v65 & ~v82) == 0 || v82 == v66;
        v49 |= v84;
        if (!v256) {
          goto LABEL_198;
        }
LABEL_154:
        if (!v258) {
          goto LABEL_205;
        }
      }
      else
      {
        unsigned int v67 = v274[v48];
        BOOL v69 = (v65 & ~v67) == 0 || v67 == v66;
        v49 |= v69;
        if (!v15) {
          goto LABEL_163;
        }
LABEL_149:
        if (v254) {
          goto LABEL_150;
        }
LABEL_170:
        unsigned int v73 = v274[v48 + 8];
        BOOL v75 = (v65 & ~v73) == 0 || v73 == v66;
        v49 |= v75;
        if (!v253) {
          goto LABEL_177;
        }
LABEL_151:
        if (v255) {
          goto LABEL_152;
        }
LABEL_184:
        unsigned int v79 = v274[v48 + 16];
        BOOL v81 = (v65 & ~v79) == 0 || v79 == v66;
        v49 |= v81;
        if (!v257) {
          goto LABEL_191;
        }
LABEL_153:
        if (v256) {
          goto LABEL_154;
        }
LABEL_198:
        unsigned int v85 = v274[v48 + 24];
        BOOL v87 = (v65 & ~v85) == 0 || v85 == v66;
        v49 |= v87;
        if (!v258)
        {
LABEL_205:
          unsigned int v88 = v274[v48 + 28];
          BOOL v90 = (v65 & ~v88) == 0 || v88 == v66;
          v49 |= v90;
        }
      }
    }
    if (v60 >> v59 > 1 << *(_DWORD *)((char *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)18,(AGXTextureFootprint)3>::lossyFallBackInfo
                                       + v48 * 4
                                       + 32))
      int v52 = 1;
    else {
      int v52 = v51;
    }
    v49 |= v52;
    if (++v48 != 4) {
      continue;
    }
    break;
  }
  uint64_t v91 = 0;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  memset(v259, 0, sizeof(v259));
  int8x16_t v92 = v274;
  int16x8_t v93 = v273;
  do
  {
    uint64_t v94 = 0;
    unsigned int v95 = 0;
    unsigned int v96 = *(&v279 + v91);
    if (v96 >= *(&v266 + v91)) {
      unsigned int v97 = *(&v266 + v91);
    }
    else {
      unsigned int v97 = *(&v279 + v91);
    }
    *(&v266 + v91) = v97;
    int16x8_t v98 = &kDQuadParamTable[160 * v272[v91] + 10 * v275[v91]];
    unsigned int v99 = *(&v262 + v91);
    if (v98[5]) {
      unsigned int v100 = v96;
    }
    else {
      unsigned int v100 = 0;
    }
    if (v100 < v99) {
      unsigned int v99 = v100;
    }
    int v101 = v278[v91 + 8] & (-1 << (v96 - v97));
    int16x8_t v102 = &v274[v91];
    int v103 = *v102 - v101;
    int16x8_t v104 = &v273[2 * v91];
    if (v51) {
      int v103 = 0;
    }
    int v105 = v102[4] - v101;
    if (v15) {
      int v105 = 0;
    }
    *int16x8_t v104 = v103;
    v104[1] = v105;
    int v106 = v102[8] - v101;
    if (v254) {
      int v106 = 0;
    }
    int v107 = v102[12] - v101;
    if (v253) {
      int v107 = 0;
    }
    v104[2] = v106;
    v104[3] = v107;
    int v108 = v102[16] - v101;
    if (v255) {
      int v108 = 0;
    }
    int v109 = v102[20] - v101;
    if (v257) {
      int v109 = 0;
    }
    v104[4] = v108;
    v104[5] = v109;
    uint64_t v110 = -1 << v96;
    *(&v262 + v91) = v99;
    unint64_t v111 = *((void *)v98 + 1);
    *((_DWORD *)&v260 + v91) = v101;
    unint64_t v112 = v111 >> v99;
    int v113 = v102[24] - v101;
    if (v256) {
      int v113 = 0;
    }
    int v114 = v102[28] - v101;
    if (v258) {
      int v114 = 0;
    }
    v104[6] = v113;
    v104[7] = v114;
    if (v112 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v112;
    }
    uint64_t v116 = 4 * v278[v91];
    int16x8_t v117 = &byte_242EA911D;
    do
    {
      if (v116 != v94)
      {
        if (v99) {
          unint64_t v118 = *(unsigned int *)((char *)v93 + v94) / v115;
        }
        else {
          LODWORD(v118) = 0;
        }
        int8x16_t v119 = (int *)v259 + 7 * v91 + v95;
        *int8x16_t v119 = v118;
        if (v112 >= 2)
        {
          unint64_t v120 = *(unsigned int *)((char *)v93 + v94);
          if (v120)
          {
            if (v120 / v115 * v115 == v120 && ((v120 / v115) & 1) != 0)
            {
              if (v101 || v118 != 1)
              {
                if ((a3 | 2) != 3
                  || (uint64_t v122 = v92[v94], v123 = *((unsigned int *)&v271[2] + v91), v122 != v123)
                  && ((a3 | 2) != 3 || v115 + v123 != v122))
                {
                  LODWORD(v118) = v118 - 1;
                  *int8x16_t v119 = v118;
                }
              }
              else
              {
                LODWORD(v118) = 1;
              }
            }
          }
        }
        if ((unint64_t)v118 >> v99 || v92[v94] == ~v110) {
          *int8x16_t v119 = ~(-1 << v99);
        }
        if (*v117 >= a5 || *(v117 - 1) >= a4) {
          *int8x16_t v119 = 0;
        }
        ++v95;
      }
      v94 += 4;
      v117 += 2;
    }
    while (v94 != 32);
    ++v91;
    v93 += 2;
    ++v92;
  }
  while (v91 != 4);
  int16x8_t v124 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v125 = 8 * (a1 & 7);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (v49)
  {
    uint64_t v126 = 0;
    uint64_t v127 = 0;
    unsigned int v128 = v279;
    unsigned int v129 = v280;
    uint64_t v130 = v279 - 6;
    uint64_t v131 = v280 - 6;
    unsigned int v133 = v281;
    unsigned int v132 = v282;
    uint64_t v134 = v281 - 6;
    uint64_t v135 = v282 - 6;
    uint64_t v136 = 8 * (a1 & 7);
    while (1)
    {
      int16x8_t v137 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v126;
      BOOL v138 = v137[1] >= a5 || *v137 >= a4;
      char v139 = v138;
      if (v138)
      {
        unint64_t v140 = 0;
        if (v130 > 0x100) {
          goto LABEL_290;
        }
      }
      else
      {
        unint64_t v140 = (unint64_t)v274[4 * v126] >> 6;
        if (v130 > 0x100) {
          goto LABEL_290;
        }
      }
      if (v128 != 6 && (unint64_t)(v136 - v125 + (v127 << 6) + v130) <= 0x140)
      {
        uint64_t v141 = 0;
        unint64_t v142 = v128 - 6;
        do
        {
          unint64_t v143 = 64 - v136;
          if (64 - v136 >= v142) {
            unint64_t v143 = v142;
          }
          v124[v127] |= ((v140 >> v141) & ~(-1 << v143)) << v136;
          v141 += v143;
          unint64_t v144 = v143 + v136;
          v127 += v144 >> 6;
          uint64_t v136 = v144 & 0x3F;
          v142 -= v143;
        }
        while (v142);
      }
LABEL_290:
      if (v139)
      {
        unint64_t v145 = 0;
        if (v131 > 0x100) {
          goto LABEL_300;
        }
      }
      else
      {
        unint64_t v145 = (unint64_t)v274[4 * v126 + 1] >> 6;
        if (v131 > 0x100) {
          goto LABEL_300;
        }
      }
      if (v129 != 6 && (unint64_t)(v136 - v125 + (v127 << 6) + v131) <= 0x140)
      {
        uint64_t v146 = 0;
        unint64_t v147 = v129 - 6;
        do
        {
          unint64_t v148 = 64 - v136;
          if (64 - v136 >= v147) {
            unint64_t v148 = v147;
          }
          v124[v127] |= ((v145 >> v146) & ~(-1 << v148)) << v136;
          v146 += v148;
          unint64_t v149 = v148 + v136;
          v127 += v149 >> 6;
          uint64_t v136 = v149 & 0x3F;
          v147 -= v148;
        }
        while (v147);
      }
LABEL_300:
      if (v139)
      {
        unint64_t v150 = 0;
        if (v134 > 0x100) {
          goto LABEL_310;
        }
      }
      else
      {
        unint64_t v150 = (unint64_t)v274[4 * v126 + 2] >> 6;
        if (v134 > 0x100) {
          goto LABEL_310;
        }
      }
      if (v133 != 6 && (unint64_t)(v136 - v125 + (v127 << 6) + v134) <= 0x140)
      {
        uint64_t v151 = 0;
        unint64_t v152 = v133 - 6;
        do
        {
          unint64_t v153 = 64 - v136;
          if (64 - v136 >= v152) {
            unint64_t v153 = v152;
          }
          v124[v127] |= ((v150 >> v151) & ~(-1 << v153)) << v136;
          v151 += v153;
          unint64_t v154 = v153 + v136;
          v127 += v154 >> 6;
          uint64_t v136 = v154 & 0x3F;
          v152 -= v153;
        }
        while (v152);
      }
LABEL_310:
      if (v139)
      {
        unint64_t v155 = 0;
        if (v135 <= 0x100) {
          goto LABEL_314;
        }
      }
      else
      {
        unint64_t v155 = (unint64_t)v274[4 * v126 + 3] >> 6;
        if (v135 <= 0x100)
        {
LABEL_314:
          if (v132 != 6 && (unint64_t)(v136 - v125 + (v127 << 6) + v135) <= 0x140)
          {
            uint64_t v156 = 0;
            unint64_t v157 = v132 - 6;
            do
            {
              unint64_t v158 = 64 - v136;
              if (64 - v136 >= v157) {
                unint64_t v158 = v157;
              }
              v124[v127] |= ((v155 >> v156) & ~(-1 << v158)) << v136;
              v156 += v158;
              unint64_t v159 = v158 + v136;
              v127 += v159 >> 6;
              uint64_t v136 = v159 & 0x3F;
              v157 -= v158;
            }
            while (v157);
          }
        }
      }
      if (++v126 == 8) {
        return v49 & 1;
      }
    }
  }
  unsigned int v160 = v275[0];
  unsigned int v161 = v275[1];
  unint64_t v162 = ((unint64_t)(v275[0] & 0xF) << v125) | *v124;
  *int16x8_t v124 = v162;
  uint64_t v163 = v125 | 4;
  if ((v125 | 4uLL) - v125 - 317 <= 0xFFFFFFFFFFFFFEBELL)
  {
    unint64_t v164 = 0;
    int v165 = v276;
    goto LABEL_324;
  }
  *int16x8_t v124 = ((unint64_t)(v161 & 0xF) << v163) | v162;
  uint64_t v163 = (v125 + 8) & 0x38;
  unint64_t v164 = (unint64_t)(v125 + 8) >> 6;
  uint64_t v166 = (v125 + 8) & 0x40;
  int v165 = v276;
  if (((v163 - v125) | 4uLL) + v166 < 0x141)
  {
    unint64_t v250 = ((unint64_t)(v276 & 0xF) << v163) | v124[v164];
    v124[v164] = v250;
    uint64_t v168 = v163 | 4;
    unint64_t v251 = (v163 | 4) - v125 + v166 + 4;
    int v167 = v277;
    if (v251 <= 0x140)
    {
      v124[v164] = ((unint64_t)(v277 & 0xF) << v168) | v250;
      v164 += (unint64_t)(v163 + 8) >> 6;
      uint64_t v168 = (v163 + 8) & 0x38;
    }
  }
  else
  {
LABEL_324:
    int v167 = v277;
    uint64_t v168 = v163;
  }
  if (v160 || v279 == 2 || v279 >= 0x10)
  {
    unsigned int v169 = v266;
    if (v266 <= 0x100 && v266 && v168 - v125 + (v164 << 6) + v266 <= 0x140)
    {
      uint64_t v170 = 0;
      unint64_t v171 = v260 >> (v279 - v266);
      unint64_t v172 = v266;
      do
      {
        unint64_t v173 = 64 - v168;
        if (64 - v168 >= v172) {
          unint64_t v173 = v172;
        }
        v124[v164] |= ((v171 >> v170) & ~(-1 << v173)) << v168;
        v170 += v173;
        unint64_t v174 = v173 + v168;
        v164 += v174 >> 6;
        uint64_t v168 = v174 & 0x3F;
        v172 -= v173;
      }
      while (v172);
    }
    int v175 = v169 + 16;
    unsigned int v176 = v280;
    if (v161) {
      goto LABEL_334;
    }
LABEL_438:
    if (v176 == 2 || v176 >= 0x10) {
      goto LABEL_334;
    }
  }
  else
  {
    int v175 = 16;
    unsigned int v176 = v280;
    if (!v161) {
      goto LABEL_438;
    }
LABEL_334:
    unsigned int v177 = v267;
    if (v267 <= 0x100 && v267 && v168 - v125 + (v164 << 6) + v267 <= 0x140)
    {
      uint64_t v178 = 0;
      unint64_t v179 = (HIDWORD(v260) >> (v176 - v267));
      unint64_t v180 = v267;
      do
      {
        unint64_t v181 = 64 - v168;
        if (64 - v168 >= v180) {
          unint64_t v181 = v180;
        }
        v124[v164] |= ((v179 >> v178) & ~(-1 << v181)) << v168;
        v178 += v181;
        unint64_t v182 = v181 + v168;
        v164 += v182 >> 6;
        uint64_t v168 = v182 & 0x3F;
        v180 -= v181;
      }
      while (v180);
    }
    v175 += v177;
  }
  if (v165 || v281 == 2 || v281 >= 0x10)
  {
    unsigned int v183 = v268;
    if (v268 <= 0x100 && v268 && v168 - v125 + (v164 << 6) + v268 <= 0x140)
    {
      uint64_t v184 = 0;
      unint64_t v185 = v261 >> (v281 - v268);
      unint64_t v186 = v268;
      do
      {
        unint64_t v187 = 64 - v168;
        if (64 - v168 >= v186) {
          unint64_t v187 = v186;
        }
        v124[v164] |= ((v185 >> v184) & ~(-1 << v187)) << v168;
        v184 += v187;
        unint64_t v188 = v187 + v168;
        v164 += v188 >> 6;
        uint64_t v168 = v188 & 0x3F;
        v186 -= v187;
      }
      while (v186);
    }
    v175 += v183;
  }
  if (v167 || v282 == 2 || v282 >= 0x10)
  {
    unsigned int v189 = v269;
    if (v269 <= 0x100 && v269 && v168 - v125 + (v164 << 6) + v269 <= 0x140)
    {
      uint64_t v190 = 0;
      unint64_t v191 = (HIDWORD(v261) >> (v282 - v269));
      unint64_t v192 = v269;
      do
      {
        unint64_t v193 = 64 - v168;
        if (64 - v168 >= v192) {
          unint64_t v193 = v192;
        }
        v124[v164] |= ((v191 >> v190) & ~(-1 << v193)) << v168;
        v190 += v193;
        unint64_t v194 = v193 + v168;
        v164 += v194 >> 6;
        uint64_t v168 = v194 & 0x3F;
        v192 -= v193;
      }
      while (v192);
    }
    v175 += v189;
  }
  unint64_t v195 = v262;
  if (v262)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x140)
    {
      uint64_t v196 = 0;
      unint64_t v197 = v278[0];
      unint64_t v198 = 3;
      do
      {
        unint64_t v199 = 64 - v168;
        if (64 - v168 >= v198) {
          unint64_t v199 = v198;
        }
        v124[v164] |= ((v197 >> v196) & ~(-1 << v199)) << v168;
        v196 += v199;
        unint64_t v200 = v199 + v168;
        v164 += v200 >> 6;
        uint64_t v168 = v200 & 0x3F;
        v198 -= v199;
      }
      while (v198);
    }
    v175 += 3;
  }
  unint64_t v201 = v263;
  if (v263)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x140)
    {
      uint64_t v202 = 0;
      unint64_t v203 = v278[1];
      unint64_t v204 = 3;
      do
      {
        unint64_t v205 = 64 - v168;
        if (64 - v168 >= v204) {
          unint64_t v205 = v204;
        }
        v124[v164] |= ((v203 >> v202) & ~(-1 << v205)) << v168;
        v202 += v205;
        unint64_t v206 = v205 + v168;
        v164 += v206 >> 6;
        uint64_t v168 = v206 & 0x3F;
        v204 -= v205;
      }
      while (v204);
    }
    v175 += 3;
  }
  unint64_t v207 = v264;
  if (v264)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x140)
    {
      uint64_t v208 = 0;
      unint64_t v209 = v278[2];
      unint64_t v210 = 3;
      do
      {
        unint64_t v211 = 64 - v168;
        if (64 - v168 >= v210) {
          unint64_t v211 = v210;
        }
        v124[v164] |= ((v209 >> v208) & ~(-1 << v211)) << v168;
        v208 += v211;
        unint64_t v212 = v211 + v168;
        v164 += v212 >> 6;
        uint64_t v168 = v212 & 0x3F;
        v210 -= v211;
      }
      while (v210);
    }
    v175 += 3;
  }
  unint64_t v213 = v265;
  if (v265)
  {
    if (v168 - v125 + (v164 << 6) + 3 <= 0x140)
    {
      uint64_t v214 = 0;
      unint64_t v215 = v278[3];
      unint64_t v216 = 3;
      do
      {
        unint64_t v217 = 64 - v168;
        if (64 - v168 >= v216) {
          unint64_t v217 = v216;
        }
        v124[v164] |= ((v215 >> v214) & ~(-1 << v217)) << v168;
        v214 += v217;
        unint64_t v218 = v217 + v168;
        v164 += v218 >> 6;
        uint64_t v168 = v218 & 0x3F;
        v216 -= v217;
      }
      while (v216);
    }
    v175 += 3;
  }
  unsigned int v219 = 320 - v175;
  unsigned int v220 = (320 - v175) / 7u;
  unint64_t v221 = v219 % 7;
  if ((v221 - 257) >= 0xFFFFFF00 && v168 - v125 + (v164 << 6) + v221 <= 0x140)
  {
    do
    {
      unint64_t v222 = 64 - v168;
      if (64 - v168 >= v221) {
        unint64_t v222 = v221;
      }
      unint64_t v223 = v222 + v168;
      v164 += v223 >> 6;
      uint64_t v168 = v223 & 0x3F;
      v221 -= v222;
    }
    while (v221);
  }
  uint64_t v224 = 0;
  while (2)
  {
    if (v195 && v195 <= 0x100 && v168 - v125 + (v164 << 6) + v195 <= 0x140)
    {
      uint64_t v225 = 0;
      unint64_t v226 = *((unsigned int *)v259 + v224);
      unint64_t v227 = v195;
      do
      {
        unint64_t v228 = 64 - v168;
        if (64 - v168 >= v227) {
          unint64_t v228 = v227;
        }
        v124[v164] |= ((v226 >> v225) & ~(-1 << v228)) << v168;
        v225 += v228;
        unint64_t v229 = v228 + v168;
        v164 += v229 >> 6;
        uint64_t v168 = v229 & 0x3F;
        v227 -= v228;
      }
      while (v227);
    }
    if (!v201)
    {
      int v235 = v195;
      if (!v207) {
        goto LABEL_419;
      }
      goto LABEL_412;
    }
    if (v201 <= 0x100 && v168 - v125 + (v164 << 6) + v201 <= 0x140)
    {
      uint64_t v230 = 0;
      unint64_t v231 = *((unsigned int *)&v259[1] + v224 + 3);
      unint64_t v232 = v201;
      do
      {
        unint64_t v233 = 64 - v168;
        if (64 - v168 >= v232) {
          unint64_t v233 = v232;
        }
        v124[v164] |= ((v231 >> v230) & ~(-1 << v233)) << v168;
        v230 += v233;
        unint64_t v234 = v233 + v168;
        v164 += v234 >> 6;
        uint64_t v168 = v234 & 0x3F;
        v232 -= v233;
      }
      while (v232);
    }
    int v235 = v201 + v195;
    if (v207)
    {
LABEL_412:
      if (v207 <= 0x100 && v168 - v125 + (v164 << 6) + v207 <= 0x140)
      {
        uint64_t v236 = 0;
        unint64_t v237 = *((unsigned int *)&v259[3] + v224 + 2);
        unint64_t v238 = v207;
        do
        {
          unint64_t v239 = 64 - v168;
          if (64 - v168 >= v238) {
            unint64_t v239 = v238;
          }
          v124[v164] |= ((v237 >> v236) & ~(-1 << v239)) << v168;
          v236 += v239;
          unint64_t v240 = v239 + v168;
          v164 += v240 >> 6;
          uint64_t v168 = v240 & 0x3F;
          v238 -= v239;
        }
        while (v238);
      }
      v235 += v207;
    }
LABEL_419:
    if (v213)
    {
      if (v213 <= 0x100 && v168 - v125 + (v164 << 6) + v213 <= 0x140)
      {
        uint64_t v241 = 0;
        unint64_t v242 = *((unsigned int *)&v259[5] + v224 + 1);
        unint64_t v243 = v213;
        do
        {
          unint64_t v244 = 64 - v168;
          if (64 - v168 >= v243) {
            unint64_t v244 = v243;
          }
          v124[v164] |= ((v242 >> v241) & ~(-1 << v244)) << v168;
          v241 += v244;
          unint64_t v245 = v244 + v168;
          v164 += v245 >> 6;
          uint64_t v168 = v245 & 0x3F;
          v243 -= v244;
        }
        while (v243);
      }
      v235 += v213;
    }
    unint64_t v246 = v220 - v235;
    if (v246 && v246 <= 0x100 && v168 - v125 + (v164 << 6) + v246 <= 0x140)
    {
      do
      {
        unint64_t v247 = 64 - v168;
        if (64 - v168 >= v246) {
          unint64_t v247 = v246;
        }
        unint64_t v248 = v247 + v168;
        v164 += v248 >> 6;
        uint64_t v168 = v248 & 0x3F;
        v246 -= v247;
      }
      while (v246);
    }
    if (++v224 != 7) {
      continue;
    }
    return v49 & 1;
  }
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(unint64_t result, uint64_t a2, int a3)
{
  unint64_t v3 = result & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = 8 * (result & 7);
  unsigned int v5 = a3 & 0xFFFFFFFD;
  int v6 = ((a3 & 0xFFFFFFFD) == 1) << 15;
  if (a3 == 4)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (result & 7);
    while ((unint64_t)(v9 - v4 + (v8 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
    {
      __int16 v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = 10;
      do
      {
        unint64_t v14 = 64 - v9;
        if (64 - v9 >= v13) {
          unint64_t v14 = v13;
        }
        v11 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v14)) << v12;
        v12 += v14;
        unint64_t v15 = v14 + v9;
        v8 += v15 >> 6;
        uint64_t v9 = v15 & 0x3F;
        v13 -= v14;
      }
      while (v13);
      uint64_t result = 16 * v7;
      *(_DWORD *)(a2 + 16 * v7) = ((v11 & 0x3FF) << 6) ^ v6;
      if ((unint64_t)(v9 - v4 + (v8 << 6) - 311) < 0xFFFFFFFFFFFFFEBFLL) {
        goto LABEL_4;
      }
      __int16 v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 10;
      do
      {
        unint64_t v19 = 64 - v9;
        if (64 - v9 >= v18) {
          unint64_t v19 = v18;
        }
        v16 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v19)) << v17;
        v17 += v19;
        unint64_t v20 = v19 + v9;
        v8 += v20 >> 6;
        uint64_t v9 = v20 & 0x3F;
        v18 -= v19;
      }
      while (v18);
      uint64_t result = a2 + 16 * v7;
      *(_DWORD *)(result + 4) = ((v16 & 0x3FF) << 6) ^ v6;
      if ((unint64_t)(v9 - v4 + (v8 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
      {
        __int16 v21 = 0;
        uint64_t v22 = 0;
        unint64_t v23 = 10;
        do
        {
          unint64_t v24 = 64 - v9;
          if (64 - v9 >= v23) {
            unint64_t v24 = v23;
          }
          v21 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v24)) << v22;
          v22 += v24;
          unint64_t v25 = v24 + v9;
          v8 += v25 >> 6;
          uint64_t v9 = v25 & 0x3F;
          v23 -= v24;
        }
        while (v23);
        uint64_t result = a2 + 16 * v7;
        *(_DWORD *)(result + 8) = ((v21 & 0x3FF) << 6) ^ v6;
        if ((unint64_t)(v9 - v4 + (v8 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
        {
          __int16 v10 = 0;
          uint64_t v26 = 0;
          uint64_t result = 10;
          do
          {
            unint64_t v27 = 64 - v9;
            if (64 - v9 >= result) {
              unint64_t v27 = result;
            }
            v10 |= (unint64_t)((*(void *)(v3 + 8 * v8) >> v9) & ~(-1 << v27)) << v26;
            v26 += v27;
            unint64_t v28 = v27 + v9;
            v8 += v28 >> 6;
            uint64_t v9 = v28 & 0x3F;
            result -= v27;
          }
          while (result);
        }
        else
        {
          __int16 v10 = 0;
        }
        goto LABEL_6;
      }
LABEL_5:
      __int16 v10 = 0;
      *(_DWORD *)(a2 + 16 * v7 + 8) = v6;
LABEL_6:
      *(_DWORD *)(a2 + 16 * v7++ + 12) = ((v10 & 0x3FF) << 6) ^ v6;
      if (v7 == 8) {
        return result;
      }
    }
    *(_DWORD *)(a2 + 16 * v7) = v6;
LABEL_4:
    *(_DWORD *)(a2 + 16 * v7 + 4) = v6;
    goto LABEL_5;
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t result = -1;
  uint64_t v31 = v4;
  do
  {
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
    {
      __int16 v32 = 0;
      uint64_t v33 = 0;
      unint64_t v34 = 10;
      do
      {
        unint64_t v35 = 64 - v31;
        if (64 - v31 >= v34) {
          unint64_t v35 = v34;
        }
        v32 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v35)) << v33;
        v33 += v35;
        unint64_t v36 = v35 + v31;
        v30 += v36 >> 6;
        uint64_t v31 = v36 & 0x3F;
        v34 -= v35;
      }
      while (v34);
    }
    else
    {
      __int16 v32 = 0;
    }
    int v37 = (v32 & 0x3FF) << 6;
    BOOL v38 = v37 == 0x8000 && v5 == 1;
    if (!v38 && v37)
    {
      if (v37 == 65472) {
        int v37 = 0xFFFF;
      }
      else {
        v37 |= 32 - (v32 & 1);
      }
    }
    *(_DWORD *)(a2 + 16 * v29) = v37 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
    {
      __int16 v39 = 0;
      uint64_t v40 = 0;
      unint64_t v41 = 10;
      do
      {
        unint64_t v42 = 64 - v31;
        if (64 - v31 >= v41) {
          unint64_t v42 = v41;
        }
        v39 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v42)) << v40;
        v40 += v42;
        unint64_t v43 = v42 + v31;
        v30 += v43 >> 6;
        uint64_t v31 = v43 & 0x3F;
        v41 -= v42;
      }
      while (v41);
    }
    else
    {
      __int16 v39 = 0;
    }
    int v44 = (v39 & 0x3FF) << 6;
    if ((v44 != 0x8000 || v5 != 1) && v44 != 0)
    {
      int v47 = (32 - (v39 & 1)) | v44;
      if (v44 == 65472) {
        int v44 = 0xFFFF;
      }
      else {
        int v44 = v47;
      }
    }
    *(_DWORD *)(a2 + 16 * v29 + 4) = v44 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
    {
      __int16 v48 = 0;
      uint64_t v49 = 0;
      unint64_t v50 = 10;
      do
      {
        unint64_t v51 = 64 - v31;
        if (64 - v31 >= v50) {
          unint64_t v51 = v50;
        }
        v48 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v51)) << v49;
        v49 += v51;
        unint64_t v52 = v51 + v31;
        v30 += v52 >> 6;
        uint64_t v31 = v52 & 0x3F;
        v50 -= v51;
      }
      while (v50);
    }
    else
    {
      __int16 v48 = 0;
    }
    int v53 = (v48 & 0x3FF) << 6;
    if ((v53 != 0x8000 || v5 != 1) && v53 != 0)
    {
      int v56 = (32 - (v48 & 1)) | v53;
      if (v53 == 65472) {
        int v53 = 0xFFFF;
      }
      else {
        int v53 = v56;
      }
    }
    *(_DWORD *)(a2 + 16 * v29 + 8) = v53 ^ v6;
    if ((unint64_t)(v31 - v4 + (v30 << 6) - 311) >= 0xFFFFFFFFFFFFFEBFLL)
    {
      __int16 v57 = 0;
      uint64_t v58 = 0;
      unint64_t v59 = 10;
      do
      {
        unint64_t v60 = 64 - v31;
        if (64 - v31 >= v59) {
          unint64_t v60 = v59;
        }
        v57 |= (unint64_t)((*(void *)(v3 + 8 * v30) >> v31) & ~(-1 << v60)) << v58;
        v58 += v60;
        unint64_t v61 = v60 + v31;
        v30 += v61 >> 6;
        uint64_t v31 = v61 & 0x3F;
        v59 -= v60;
      }
      while (v59);
    }
    else
    {
      __int16 v57 = 0;
    }
    int v62 = (v57 & 0x3FF) << 6;
    if ((v62 != 0x8000 || v5 != 1) && v62 != 0)
    {
      int v65 = (32 - (v57 & 1)) | v62;
      if (v62 == 65472) {
        int v62 = 0xFFFF;
      }
      else {
        int v62 = v65;
      }
    }
    *(_DWORD *)(a2 + 16 * v29++ + 12) = v62 ^ v6;
  }
  while (v29 != 8);
  return result;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v228 = *MEMORY[0x263EF8340];
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = 8 * (a1 & 7);
  unint64_t v6 = *(void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v6 >> v5;
  uint64_t v8 = (v6 >> v5) & 0xF;
  uint64_t v9 = v5 | 4;
  if ((v5 | 4uLL) - v5 - 317 >= 0xFFFFFFFFFFFFFEBFLL)
  {
    uint64_t v14 = (v5 + 8) & 0x38;
    unint64_t v12 = (unint64_t)(v5 + 8) >> 6;
    uint64_t v11 = (v6 >> v9) & 0xF;
    uint64_t v15 = (v5 + 8) & 0x40;
    if (((v14 - v5) | 4uLL) + v15 <= 0x140)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v12);
      uint64_t v10 = (v16 >> v14) & 0xF;
      uint64_t v9 = v14 | 4;
      if ((v14 | 4uLL) - v5 + v15 + 4 <= 0x140)
      {
        uint64_t v13 = (v16 >> v9) & 0xF;
        unint64_t v17 = v14 + 8;
        v12 += v17 >> 6;
        uint64_t v9 = v17 & 0x38;
      }
      else
      {
        LODWORD(v13) = 0;
      }
    }
    else
    {
      LODWORD(v10) = 0;
      LODWORD(v13) = 0;
      uint64_t v9 = (v5 + 8) & 0x38;
    }
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v11) = 0;
    unint64_t v12 = 0;
    LODWORD(v13) = 0;
  }
  memset_pattern16(&__b, &unk_242EA88A0, 0x10uLL);
  memset_pattern16(&v223, &unk_242EA88B0, 0x10uLL);
  v227[0] = v8;
  v227[1] = v11;
  v227[2] = v10;
  v227[3] = v13;
  uint64_t v217 = 0;
  uint64_t v218 = 0;
  uint64_t v215 = 0;
  uint64_t v216 = 0;
  AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)15,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::deriveLossyDQuadBitSharing(&v223, v227, &v217, &v215);
  LODWORD(v20) = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
                 + 4 * v223
                 + 2);
  unint64_t v19 = (unint64_t)&kDQuadParamTable[160 * v223 + 10 * (v7 & 0xF)];
  int v18 = *(_DWORD *)(v19 + 20);
  LODWORD(v19) = *(_DWORD *)(v19 + 16) + v20;
  LODWORD(v20) = v18 + v20;
  int v21 = v215 - v217;
  if ((int)v215 - (int)v217 < 0)
  {
    if (kDQuadParamTable[160 * v223 + 7 + 10 * (v7 & 0xF)] >= (int)v217 - (int)v215) {
      goto LABEL_14;
    }
    LODWORD(v20) = v20 - 1;
    if (kDQuadParamTable[160 * v223 + 8 + 10 * (v7 & 0xF)]) {
      goto LABEL_14;
    }
    int v21 = -1;
  }
  else
  {
    if (!v21) {
      goto LABEL_14;
    }
    LODWORD(v20) = v21 + v20;
  }
  LODWORD(v19) = v21 + v19;
LABEL_14:
  if (__b >= v19) {
    unint64_t v19 = v19;
  }
  else {
    unint64_t v19 = __b;
  }
  v214[0] = v19;
  if (v18) {
    unsigned int v22 = __b;
  }
  else {
    unsigned int v22 = 0;
  }
  if (v22 >= v20) {
    unint64_t v20 = v20;
  }
  else {
    unint64_t v20 = v22;
  }
  v213[0] = v20;
  int v23 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v224
        + 2);
  unint64_t v24 = &kDQuadParamTable[160 * v224 + 10 * v11];
  int v26 = v24[4];
  int v25 = v24[5];
  unsigned int v27 = v26 + v23;
  LODWORD(v28) = v25 + v23;
  int v29 = HIDWORD(v215) - HIDWORD(v217);
  if (HIDWORD(v215) - HIDWORD(v217) < 0)
  {
    if (kDQuadParamTable[160 * v224 + 7 + 10 * v11] >= HIDWORD(v217) - HIDWORD(v215)) {
      goto LABEL_29;
    }
    LODWORD(v28) = v28 - 1;
    if (kDQuadParamTable[160 * v224 + 8 + 10 * v11]) {
      goto LABEL_29;
    }
    int v29 = -1;
  }
  else
  {
    if (!v29) {
      goto LABEL_29;
    }
    LODWORD(v28) = v29 + v28;
  }
  v27 += v29;
LABEL_29:
  if (v220 >= v27) {
    unint64_t v30 = v27;
  }
  else {
    unint64_t v30 = v220;
  }
  v214[1] = v30;
  if (v25) {
    unsigned int v31 = v220;
  }
  else {
    unsigned int v31 = 0;
  }
  if (v31 >= v28) {
    unint64_t v28 = v28;
  }
  else {
    unint64_t v28 = v31;
  }
  v213[1] = v28;
  int v32 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v225
        + 2);
  uint64_t v33 = &kDQuadParamTable[160 * v225 + 10 * v10];
  int v35 = v33[4];
  int v34 = v33[5];
  unsigned int v36 = v35 + v32;
  LODWORD(v37) = v34 + v32;
  int v38 = v216 - v218;
  if ((int)v216 - (int)v218 < 0)
  {
    if (kDQuadParamTable[160 * v225 + 7 + 10 * v10] >= (int)v218 - (int)v216) {
      goto LABEL_44;
    }
    LODWORD(v37) = v37 - 1;
    if (kDQuadParamTable[160 * v225 + 8 + 10 * v10]) {
      goto LABEL_44;
    }
    int v38 = -1;
  }
  else
  {
    if (!v38) {
      goto LABEL_44;
    }
    LODWORD(v37) = v38 + v37;
  }
  v36 += v38;
LABEL_44:
  if (v221 >= v36) {
    unint64_t v39 = v36;
  }
  else {
    unint64_t v39 = v221;
  }
  v214[2] = v39;
  if (v34) {
    unsigned int v40 = v221;
  }
  else {
    unsigned int v40 = 0;
  }
  if (v40 >= v37) {
    unint64_t v37 = v37;
  }
  else {
    unint64_t v37 = v40;
  }
  v213[2] = v37;
  int v41 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v226
        + 2);
  unint64_t v43 = (unint64_t)&kDQuadParamTable[160 * v226 + 10 * v13];
  int v42 = *(_DWORD *)(v43 + 20);
  LODWORD(v43) = *(_DWORD *)(v43 + 16) + v41;
  LODWORD(v44) = v42 + v41;
  int v45 = HIDWORD(v216) - HIDWORD(v218);
  if (HIDWORD(v216) - HIDWORD(v218) < 0)
  {
    if (kDQuadParamTable[160 * v226 + 7 + 10 * v13] >= HIDWORD(v218) - HIDWORD(v216)) {
      goto LABEL_59;
    }
    LODWORD(v44) = v44 - 1;
    if (kDQuadParamTable[160 * v226 + 8 + 10 * v13]) {
      goto LABEL_59;
    }
    int v45 = -1;
  }
  else
  {
    if (!v45) {
      goto LABEL_59;
    }
    LODWORD(v44) = v45 + v44;
  }
  LODWORD(v43) = v45 + v43;
LABEL_59:
  if (v222 >= v43) {
    unint64_t v43 = v43;
  }
  else {
    unint64_t v43 = v222;
  }
  v214[3] = v43;
  if (v42) {
    unsigned int v46 = v222;
  }
  else {
    unsigned int v46 = 0;
  }
  if (v46 >= v44) {
    unint64_t v44 = v44;
  }
  else {
    unint64_t v44 = v46;
  }
  v213[3] = v44;
  uint64_t v211 = 0;
  uint64_t v212 = 0;
  if (v8 || __b - 8 >= 5)
  {
    if (v19 <= 0x20)
    {
      int v48 = 0;
      if (v19 && v9 - v5 + (v12 << 6) + v19 <= 0x140)
      {
        int v48 = 0;
        uint64_t v49 = 0;
        unint64_t v50 = v19;
        do
        {
          unint64_t v51 = 64 - v9;
          if (64 - v9 >= v50) {
            unint64_t v51 = v50;
          }
          v48 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v51)) << v49;
          v49 += v51;
          v12 += (v51 + v9) >> 6;
          uint64_t v9 = (v51 + v9) & 0x3F;
          v50 -= v51;
        }
        while (v50);
      }
    }
    else
    {
      int v48 = 0;
    }
    LODWORD(v211) = v48 << (__b - v19);
    int v47 = v19 + 16;
    if (v11)
    {
LABEL_84:
      if (v30 <= 0x20)
      {
        int v52 = 0;
        if (v30 && v9 - v5 + (v12 << 6) + v30 <= 0x140)
        {
          int v52 = 0;
          uint64_t v53 = 0;
          unint64_t v54 = v30;
          do
          {
            unint64_t v55 = 64 - v9;
            if (64 - v9 >= v54) {
              unint64_t v55 = v54;
            }
            v52 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v55)) << v53;
            v53 += v55;
            v12 += (v55 + v9) >> 6;
            uint64_t v9 = (v55 + v9) & 0x3F;
            v54 -= v55;
          }
          while (v54);
        }
      }
      else
      {
        int v52 = 0;
      }
      HIDWORD(v211) = v52 << (v220 - v30);
      v47 += v30;
      if (v10) {
        goto LABEL_96;
      }
      goto LABEL_93;
    }
  }
  else
  {
    int v47 = 16;
    if (v11) {
      goto LABEL_84;
    }
  }
  if (v220 - 8 >= 5) {
    goto LABEL_84;
  }
  HIDWORD(v211) = 0;
  if (v10) {
    goto LABEL_96;
  }
LABEL_93:
  if (v221 - 8 < 5)
  {
    LODWORD(v212) = 0;
    if (v13) {
      goto LABEL_108;
    }
    goto LABEL_105;
  }
LABEL_96:
  if (v39 <= 0x20)
  {
    int v56 = 0;
    if (v39 && v9 - v5 + (v12 << 6) + v39 <= 0x140)
    {
      int v56 = 0;
      uint64_t v57 = 0;
      unint64_t v58 = v39;
      do
      {
        unint64_t v59 = 64 - v9;
        if (64 - v9 >= v58) {
          unint64_t v59 = v58;
        }
        v56 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v59)) << v57;
        v57 += v59;
        v12 += (v59 + v9) >> 6;
        uint64_t v9 = (v59 + v9) & 0x3F;
        v58 -= v59;
      }
      while (v58);
    }
  }
  else
  {
    int v56 = 0;
  }
  LODWORD(v212) = v56 << (v221 - v39);
  v47 += v39;
  if (v13)
  {
LABEL_108:
    if (v43 <= 0x20)
    {
      int v61 = 0;
      if (v43)
      {
        uint64_t v60 = a2;
        if (v9 - v5 + (v12 << 6) + v43 <= 0x140)
        {
          int v61 = 0;
          uint64_t v62 = 0;
          unint64_t v63 = v43;
          do
          {
            unint64_t v64 = 64 - v9;
            if (64 - v9 >= v63) {
              unint64_t v64 = v63;
            }
            v61 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v64)) << v62;
            v62 += v64;
            v12 += (v64 + v9) >> 6;
            uint64_t v9 = (v64 + v9) & 0x3F;
            v63 -= v64;
          }
          while (v63);
        }
LABEL_118:
        HIDWORD(v212) = v61 << (v222 - v43);
        v47 += v43;
        uint64_t v209 = 0;
        uint64_t v210 = 0;
        if (v20) {
          goto LABEL_119;
        }
        goto LABEL_126;
      }
    }
    else
    {
      int v61 = 0;
    }
    uint64_t v60 = a2;
    goto LABEL_118;
  }
LABEL_105:
  if (v222 - 8 >= 5) {
    goto LABEL_108;
  }
  HIDWORD(v212) = 0;
  uint64_t v60 = a2;
  uint64_t v209 = 0;
  uint64_t v210 = 0;
  if (v20)
  {
LABEL_119:
    if (v9 - v5 + (v12 << 6) + 3 <= 0x140)
    {
      int v65 = 0;
      uint64_t v66 = 0;
      unint64_t v67 = 3;
      do
      {
        unint64_t v68 = 64 - v9;
        if (64 - v9 >= v67) {
          unint64_t v68 = v67;
        }
        v65 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v68)) << v66;
        v66 += v68;
        v12 += (v68 + v9) >> 6;
        uint64_t v9 = (v68 + v9) & 0x3F;
        v67 -= v68;
      }
      while (v67);
    }
    else
    {
      int v65 = 0;
    }
    LODWORD(v209) = v65;
    v47 += 3;
  }
LABEL_126:
  if (v28)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x140)
    {
      int v69 = 0;
      uint64_t v70 = 0;
      unint64_t v71 = 3;
      do
      {
        unint64_t v72 = 64 - v9;
        if (64 - v9 >= v71) {
          unint64_t v72 = v71;
        }
        v69 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v72)) << v70;
        v70 += v72;
        v12 += (v72 + v9) >> 6;
        uint64_t v9 = (v72 + v9) & 0x3F;
        v71 -= v72;
      }
      while (v71);
    }
    else
    {
      int v69 = 0;
    }
    HIDWORD(v209) = v69;
    v47 += 3;
  }
  if (v37)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x140)
    {
      int v73 = 0;
      uint64_t v74 = 0;
      unint64_t v75 = 3;
      do
      {
        unint64_t v76 = 64 - v9;
        if (64 - v9 >= v75) {
          unint64_t v76 = v75;
        }
        v73 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v76)) << v74;
        v74 += v76;
        v12 += (v76 + v9) >> 6;
        uint64_t v9 = (v76 + v9) & 0x3F;
        v75 -= v76;
      }
      while (v75);
    }
    else
    {
      int v73 = 0;
    }
    LODWORD(v210) = v73;
    v47 += 3;
  }
  if (v44)
  {
    if (v9 - v5 + (v12 << 6) + 3 <= 0x140)
    {
      int v77 = 0;
      uint64_t v78 = 0;
      unint64_t v79 = 3;
      do
      {
        unint64_t v80 = 64 - v9;
        if (64 - v9 >= v79) {
          unint64_t v80 = v79;
        }
        v77 |= (unint64_t)((*(void *)(v4 + 8 * v12) >> v9) & ~(-1 << v80)) << v78;
        v78 += v80;
        v12 += (v80 + v9) >> 6;
        uint64_t v9 = (v80 + v9) & 0x3F;
        v79 -= v80;
      }
      while (v79);
    }
    else
    {
      int v77 = 0;
    }
    HIDWORD(v210) = v77;
    v47 += 3;
  }
  uint64_t v81 = 0;
  unsigned int v82 = a3 & 0xFFFFFFFD;
  unsigned int v83 = 320 - v47;
  unsigned int v84 = (320 - v47) / 7u;
  unint64_t v85 = (v9 | (v12 << 6)) + v83 % 7;
  memset(v208, 0, sizeof(v208));
  do
  {
    unint64_t v88 = v85 >> 6;
    unint64_t v89 = v85 & 0x3F;
    if (v20)
    {
      if (v20 <= 0x20 && v89 - v5 + (v85 & 0xFFFFFFFFFFFFFFC0) + v20 <= 0x140)
      {
        int v90 = 0;
        uint64_t v91 = 0;
        unint64_t v92 = v20;
        do
        {
          unint64_t v93 = 64 - v89;
          if (64 - v89 >= v92) {
            unint64_t v93 = v92;
          }
          v90 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v93)) << v91;
          v91 += v93;
          unint64_t v94 = v93 + v89;
          v88 += v94 >> 6;
          unint64_t v89 = v94 & 0x3F;
          v92 -= v93;
        }
        while (v92);
      }
      else
      {
        int v90 = 0;
      }
      *((_DWORD *)v208 + v81) = v90;
    }
    if (!v28)
    {
      int v87 = v20;
      if (!v37) {
        goto LABEL_182;
      }
LABEL_174:
      if (v37 <= 0x20 && v89 - v5 + (v88 << 6) + v37 <= 0x140)
      {
        int v100 = 0;
        uint64_t v101 = 0;
        unint64_t v102 = v37;
        do
        {
          unint64_t v103 = 64 - v89;
          if (64 - v89 >= v102) {
            unint64_t v103 = v102;
          }
          v100 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v103)) << v101;
          v101 += v103;
          unint64_t v104 = v103 + v89;
          v88 += v104 >> 6;
          unint64_t v89 = v104 & 0x3F;
          v102 -= v103;
        }
        while (v102);
      }
      else
      {
        int v100 = 0;
      }
      *((_DWORD *)&v208[3] + v81 + 2) = v100;
      v87 += v37;
      goto LABEL_182;
    }
    if (v28 <= 0x20 && v89 - v5 + (v88 << 6) + v28 <= 0x140)
    {
      int v95 = 0;
      uint64_t v96 = 0;
      unint64_t v97 = v28;
      do
      {
        unint64_t v98 = 64 - v89;
        if (64 - v89 >= v97) {
          unint64_t v98 = v97;
        }
        v95 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v98)) << v96;
        v96 += v98;
        unint64_t v99 = v98 + v89;
        v88 += v99 >> 6;
        unint64_t v89 = v99 & 0x3F;
        v97 -= v98;
      }
      while (v97);
    }
    else
    {
      int v95 = 0;
    }
    *((_DWORD *)&v208[1] + v81 + 3) = v95;
    int v87 = v28 + v20;
    if (v37) {
      goto LABEL_174;
    }
LABEL_182:
    if (v44)
    {
      if (v44 > 0x20 || v89 - v5 + (v88 << 6) + v44 > 0x140)
      {
        int v86 = 0;
      }
      else
      {
        int v86 = 0;
        uint64_t v105 = 0;
        unint64_t v106 = v44;
        do
        {
          unint64_t v107 = 64 - v89;
          if (64 - v89 >= v106) {
            unint64_t v107 = v106;
          }
          v86 |= (unint64_t)((*(void *)(v4 + 8 * v88) >> v89) & ~(-1 << v107)) << v105;
          v105 += v107;
          unint64_t v108 = v107 + v89;
          v88 += v108 >> 6;
          unint64_t v89 = v108 & 0x3F;
          v106 -= v107;
        }
        while (v106);
      }
      *((_DWORD *)&v208[5] + v81 + 1) = v86;
      v87 += v44;
    }
    unint64_t v85 = (v89 | (v88 << 6)) + v84 - v87;
    ++v81;
  }
  while (v81 != 7);
  unint64_t v109 = 0;
  uint64_t v110 = 0;
  uint64_t v111 = v60 + 112;
  do
  {
    unint64_t v116 = *(void *)&kDQuadParamTable[160 * *(unsigned int *)((char *)&v223 + v109) + 2 + 10 * v227[v109 / 4]];
    int v117 = v213[v109 / 4];
    unint64_t v118 = v116 >> v117;
    if (v116 >> v117 <= 1) {
      unint64_t v118 = 1;
    }
    int v119 = *(unsigned int *)((char *)&__b + v109);
    unint64_t v120 = v118 >> 1;
    unint64_t v121 = (unint64_t)(1 << (v119 - v214[v109 / 4])) >> 1;
    if (v118 >> 1 < v121) {
      unint64_t v121 = v118 >> 1;
    }
    unint64_t v122 = (1 << (v119 - 1));
    unint64_t v123 = *(unsigned int *)((char *)&v211 + v109);
    unint64_t v124 = v122 - v123;
    unint64_t v125 = 1 << v119;
    int v126 = (1 << v119) - 1;
    if (v123) {
      unint64_t v127 = v121;
    }
    else {
      unint64_t v127 = 0;
    }
    BOOL v128 = v123 == v122;
    BOOL v129 = v119 == 16;
    if (v119 == 16) {
      unint64_t result = 31744;
    }
    else {
      unint64_t result = 2139095040;
    }
    if (v119 == 16) {
      unint64_t v131 = 64512;
    }
    else {
      unint64_t v131 = 4286578688;
    }
    unint64_t v132 = 2143289344;
    if (v129) {
      unint64_t v132 = 32256;
    }
    unint64_t v133 = 4290772992;
    if (v129) {
      unint64_t v133 = 65024;
    }
    unint64_t v134 = (v131 - 1);
    if (v117)
    {
      unint64_t v135 = v116 + v123;
      uint64_t v136 = ~(-1 << v117);
      int v137 = *(_DWORD *)((char *)&v209 + v109);
      unint64_t v138 = v124 / v118;
      if (!v137)
      {
        uint64_t v147 = 0;
        unint64_t v141 = v127;
        BOOL v140 = v123 == v122;
        goto LABEL_253;
      }
      uint64_t v139 = *(unsigned int *)((char *)v208 + v110);
      BOOL v140 = v138 == v139;
      if (v123 | v139)
      {
        if (v135 >= v125 && v139 == v136)
        {
          uint64_t v147 = 1;
          unint64_t v141 = v125 - 1;
          goto LABEL_253;
        }
        unint64_t v141 = v120 + v118 * v139;
      }
      else
      {
        unint64_t v141 = 0;
      }
      uint64_t v147 = 1;
LABEL_253:
      unint64_t v148 = v141 + v123;
      unint64_t v149 = v148;
      if (a3 == 4)
      {
        BOOL v150 = v148 < result || v148 >= v132;
        unint64_t v149 = (result - 1);
        if (v150)
        {
          BOOL v151 = v148 < v132 || v148 >= v122;
          unint64_t v149 = v122;
          if (v151)
          {
            if (v148 < v133 && v148 >= v131) {
              unint64_t v149 = (v131 - 1);
            }
            else {
              unint64_t v149 = v148;
            }
          }
        }
      }
      if (v149 >= v125) {
        int v153 = v126;
      }
      else {
        int v153 = v149;
      }
      if (v140) {
        int v154 = 0;
      }
      else {
        int v154 = v153 ^ v122;
      }
      if (v82 != 1) {
        int v154 = v153;
      }
      *(_DWORD *)(v111 + v109 - 112) = v154;
      if (v137 == 1)
      {
        unint64_t v155 = v127;
        BOOL v156 = v123 == v122;
      }
      else
      {
        uint64_t v157 = *(unsigned int *)(((unint64_t)v208 | (4 * v147)) + v110);
        BOOL v156 = v138 == v157;
        if (v123 | v157)
        {
          if (v135 < v125 || (unint64_t v155 = v125 - 1, v157 != v136)) {
            unint64_t v155 = v120 + v118 * v157;
          }
        }
        else
        {
          unint64_t v155 = 0;
        }
        ++v147;
      }
      unint64_t v158 = v155 + v123;
      unint64_t v159 = v158;
      if (a3 == 4)
      {
        BOOL v160 = v158 < result || v158 >= v132;
        unint64_t v159 = (result - 1);
        if (v160)
        {
          if (v158 < v132 || (unint64_t v159 = v122, v158 >= v122))
          {
            if (v158 < v133 && v158 >= v131) {
              unint64_t v159 = (v131 - 1);
            }
            else {
              unint64_t v159 = v158;
            }
          }
        }
      }
      if (v159 >= v125) {
        int v162 = v126;
      }
      else {
        int v162 = v159;
      }
      if (v156) {
        int v163 = 0;
      }
      else {
        int v163 = v162 ^ v122;
      }
      if (v82 != 1) {
        int v163 = v162;
      }
      *(_DWORD *)(v111 + v109 - 96) = v163;
      if (v137 == 2)
      {
        unint64_t v164 = v127;
        BOOL v165 = v123 == v122;
      }
      else
      {
        uint64_t v166 = *(unsigned int *)(((unint64_t)v208 | (4 * v147)) + v110);
        BOOL v165 = v138 == v166;
        if (v123 | v166)
        {
          if (v135 < v125 || (unint64_t v164 = v125 - 1, v166 != v136)) {
            unint64_t v164 = v120 + v118 * v166;
          }
        }
        else
        {
          unint64_t v164 = 0;
        }
        ++v147;
      }
      unint64_t v167 = v164 + v123;
      unint64_t v168 = v167;
      if (a3 == 4)
      {
        if (v167 < result || (unint64_t v168 = (result - 1), v167 >= v132))
        {
          if (v167 < v132 || (unint64_t v168 = v122, v167 >= v122))
          {
            if (v167 < v133 && v167 >= v131) {
              unint64_t v168 = (v131 - 1);
            }
            else {
              unint64_t v168 = v167;
            }
          }
        }
      }
      if (v168 >= v125) {
        int v170 = v126;
      }
      else {
        int v170 = v168;
      }
      if (v165) {
        int v171 = 0;
      }
      else {
        int v171 = v170 ^ v122;
      }
      if (v82 != 1) {
        int v171 = v170;
      }
      *(_DWORD *)(v111 + v109 - 80) = v171;
      if (v137 == 3)
      {
        unint64_t v172 = v127;
        BOOL v173 = v123 == v122;
      }
      else
      {
        uint64_t v174 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v173 = v138 == v174;
        if (v123 | v174)
        {
          if (v135 < v125 || (unint64_t v172 = v125 - 1, v174 != v136)) {
            unint64_t v172 = v120 + v118 * v174;
          }
        }
        else
        {
          unint64_t v172 = 0;
        }
        ++v147;
      }
      unint64_t v175 = v172 + v123;
      unint64_t v176 = v175;
      if (a3 == 4)
      {
        if (v175 < result || (unint64_t v176 = (result - 1), v175 >= v132))
        {
          if (v175 < v132 || (unint64_t v176 = v122, v175 >= v122))
          {
            if (v175 < v133 && v175 >= v131) {
              unint64_t v176 = (v131 - 1);
            }
            else {
              unint64_t v176 = v175;
            }
          }
        }
      }
      if (v176 >= v125) {
        int v178 = v126;
      }
      else {
        int v178 = v176;
      }
      if (v173) {
        int v179 = 0;
      }
      else {
        int v179 = v178 ^ v122;
      }
      if (v82 != 1) {
        int v179 = v178;
      }
      *(_DWORD *)(v111 + v109 - 64) = v179;
      if (v137 == 4)
      {
        unint64_t v180 = v127;
        BOOL v181 = v123 == v122;
      }
      else
      {
        uint64_t v182 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v181 = v138 == v182;
        if (v123 | v182)
        {
          if (v135 < v125 || (unint64_t v180 = v125 - 1, v182 != v136)) {
            unint64_t v180 = v120 + v118 * v182;
          }
        }
        else
        {
          unint64_t v180 = 0;
        }
        ++v147;
      }
      unint64_t v183 = v180 + v123;
      unint64_t v184 = v183;
      if (a3 == 4)
      {
        if (v183 < result || (unint64_t v184 = (result - 1), v183 >= v132))
        {
          if (v183 < v132 || (unint64_t v184 = v122, v183 >= v122))
          {
            if (v183 < v133 && v183 >= v131) {
              unint64_t v184 = (v131 - 1);
            }
            else {
              unint64_t v184 = v183;
            }
          }
        }
      }
      if (v184 >= v125) {
        int v186 = v126;
      }
      else {
        int v186 = v184;
      }
      if (v181) {
        int v187 = 0;
      }
      else {
        int v187 = v186 ^ v122;
      }
      if (v82 != 1) {
        int v187 = v186;
      }
      *(_DWORD *)(v111 + v109 - 48) = v187;
      if (v137 == 5)
      {
        unint64_t v188 = v127;
        BOOL v189 = v123 == v122;
      }
      else
      {
        uint64_t v190 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v189 = v138 == v190;
        if (v123 | v190)
        {
          if (v135 < v125 || (unint64_t v188 = v125 - 1, v190 != v136)) {
            unint64_t v188 = v120 + v118 * v190;
          }
        }
        else
        {
          unint64_t v188 = 0;
        }
        ++v147;
      }
      unint64_t v191 = v188 + v123;
      unint64_t v192 = v191;
      if (a3 == 4)
      {
        if (v191 < result || (unint64_t v192 = (result - 1), v191 >= v132))
        {
          if (v191 < v132 || (unint64_t v192 = v122, v191 >= v122))
          {
            if (v191 < v133 && v191 >= v131) {
              unint64_t v192 = (v131 - 1);
            }
            else {
              unint64_t v192 = v191;
            }
          }
        }
      }
      if (v192 >= v125) {
        int v194 = v126;
      }
      else {
        int v194 = v192;
      }
      if (v189) {
        int v195 = 0;
      }
      else {
        int v195 = v194 ^ v122;
      }
      if (v82 != 1) {
        int v195 = v194;
      }
      *(_DWORD *)(v111 + v109 - 32) = v195;
      if (v137 == 6)
      {
        unint64_t v196 = v127;
        BOOL v197 = v123 == v122;
      }
      else
      {
        uint64_t v198 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v197 = v138 == v198;
        if (v123 | v198)
        {
          if (v135 < v125 || (unint64_t v196 = v125 - 1, v198 != v136)) {
            unint64_t v196 = v120 + v118 * v198;
          }
        }
        else
        {
          unint64_t v196 = 0;
        }
        ++v147;
      }
      unint64_t v199 = v196 + v123;
      unint64_t v200 = v199;
      if (a3 == 4)
      {
        if (v199 < result || (unint64_t v200 = (result - 1), v199 >= v132))
        {
          if (v199 < v132 || (unint64_t v200 = v122, v199 >= v122))
          {
            if (v199 < v133 && v199 >= v131) {
              unint64_t v200 = (v131 - 1);
            }
            else {
              unint64_t v200 = v199;
            }
          }
        }
      }
      if (v200 >= v125) {
        int v202 = v126;
      }
      else {
        int v202 = v200;
      }
      if (v197) {
        int v203 = 0;
      }
      else {
        int v203 = v202 ^ v122;
      }
      if (v82 != 1) {
        int v203 = v202;
      }
      *(_DWORD *)(v111 + v109 - 16) = v203;
      if (v137 != 7)
      {
        uint64_t v204 = *(unsigned int *)((char *)v208 + 4 * v147 + v110);
        BOOL v128 = v138 == v204;
        if (v123 | v204)
        {
          if (v135 >= v125 && v204 == v136) {
            unint64_t v127 = v125 - 1;
          }
          else {
            unint64_t v127 = v120 + v118 * v204;
          }
        }
        else
        {
          unint64_t v127 = 0;
        }
      }
      unint64_t v205 = v127 + v123;
      unint64_t v113 = v127 + v123;
      if (a3 == 4)
      {
        if (v205 < result || (unint64_t v113 = (result - 1), v205 >= v132))
        {
          if (v205 < v132 || (unint64_t v113 = v122, v205 >= v122))
          {
            if (v205 < v133 && v205 >= v131) {
              unint64_t v113 = (v131 - 1);
            }
            else {
              unint64_t v113 = v127 + v123;
            }
          }
        }
      }
      if (v113 >= v125) {
        int v114 = v126;
      }
      else {
        int v114 = v113;
      }
      int v115 = v114 ^ v122;
      if (v128) {
        int v115 = 0;
      }
      if (v82 == 1) {
        int v114 = v115;
      }
      goto LABEL_204;
    }
    BOOL v143 = v132 <= v123 && v123 < v122;
    BOOL v145 = v123 >= v131 && v133 > v123;
    if (a3 == 4)
    {
      if (v123 < result || v132 <= v123)
      {
        if (v143)
        {
          if (v125 <= v122) {
            LODWORD(v146) = v126;
          }
          else {
            LODWORD(v146) = v122;
          }
        }
        else
        {
          if (v145) {
            unint64_t v146 = v134;
          }
          else {
            unint64_t v146 = *(unsigned int *)((char *)&v211 + v109);
          }
          if (v146 >= v125) {
            LODWORD(v146) = v126;
          }
        }
      }
      else if (v125 <= (result - 1))
      {
        LODWORD(v146) = v126;
      }
      else
      {
        LODWORD(v146) = result - 1;
      }
    }
    else if (v125 <= v123)
    {
      LODWORD(v146) = v126;
    }
    else
    {
      LODWORD(v146) = *(_DWORD *)((char *)&v211 + v109);
    }
    if (v118 <= v124) {
      int v114 = v146 ^ v122;
    }
    else {
      int v114 = 0;
    }
    if (v82 != 1) {
      int v114 = v146;
    }
    uint64_t v206 = v111 + v109;
    *(_DWORD *)(v206 - 112) = v114;
    *(_DWORD *)(v206 - 96) = v114;
    *(_DWORD *)(v206 - 80) = v114;
    *(_DWORD *)(v206 - 64) = v114;
    *(_DWORD *)(v206 - 48) = v114;
    *(_DWORD *)(v206 - 32) = v114;
    *(_DWORD *)(v206 - 16) = v114;
LABEL_204:
    *(_DWORD *)(v111 + v109) = v114;
    v110 += 28;
    v109 += 4;
  }
  while (v110 != 112);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v459 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    uint64_t v11 = (_OWORD *)(a1 + a2);
    v11[2] = 0u;
    v11[3] = 0u;
    *uint64_t v11 = 0u;
    v11[1] = 0u;
    unint64_t v12 = (_OWORD *)(a1 + 2 * a2);
    v12[2] = 0u;
    v12[3] = 0u;
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    uint64_t v13 = (_OWORD *)(a1 + a2 + 2 * a2);
    v13[2] = 0u;
    v13[3] = 0u;
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    return result;
  }
  char v7 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v440, a5);
    }
    int32x4_t v434 = (int32x4_t)v442;
    int32x4_t v430 = v440;
    int32x4_t v432 = v443;
    int32x4_t v424 = v445;
    int32x4_t v425 = (int32x4_t)v441;
    unint64_t v18 = a3 + 40;
    int32x4_t v426 = v446;
    int32x4_t v428 = v444;
    int32x4_t v423 = v447;
    if ((v7 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v18, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v18, (uint64_t)&v440, a5);
    }
    int32x4_t v421 = (int32x4_t)v441;
    int32x4_t v422 = v440;
    int32x4_t v419 = v443;
    int32x4_t v420 = (int32x4_t)v442;
    int32x4_t v417 = v445;
    int32x4_t v418 = v444;
    unint64_t v39 = a3 + 80;
    int32x4_t v415 = v447;
    int32x4_t v416 = v446;
    if ((v7 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v39, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v39, (uint64_t)&v440, a5);
    }
    int32x4_t v413 = (int32x4_t)v441;
    int32x4_t v414 = v440;
    int32x4_t v411 = v443;
    int32x4_t v412 = (int32x4_t)v442;
    int32x4_t v409 = v445;
    int32x4_t v410 = v444;
    unint64_t v40 = a3 + 120;
    int32x4_t v407 = v447;
    int32x4_t v408 = v446;
    if ((v7 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v40, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v40, (uint64_t)&v440, a5);
    }
    int32x4_t v41 = v440;
    int32x4_t v42 = (int32x4_t)v441;
    int32x4_t v43 = (int32x4_t)v442;
    int32x4_t v44 = v443;
    int32x4_t v45 = v444;
    int32x4_t v46 = v445;
    int32x4_t v47 = v446;
    int32x4_t v48 = v447;
    *(int16x4_t *)a1 = vmovn_s32(v430);
    *(int16x4_t *)(a1 + 8) = vmovn_s32(v425);
    *(int16x4_t *)(a1 + 16) = vmovn_s32(v428);
    *(int16x4_t *)(a1 + 24) = vmovn_s32(v424);
    *(int16x4_t *)(a1 + 32) = vmovn_s32(v414);
    *(int16x4_t *)(a1 + 40) = vmovn_s32(v413);
    *(int16x4_t *)(a1 + 48) = vmovn_s32(v410);
    *(int16x4_t *)(a1 + 56) = vmovn_s32(v409);
    uint64_t v49 = (int16x4_t *)(a1 + a2);
    *uint64_t v49 = vmovn_s32(v434);
    v49[1] = vmovn_s32(v432);
    v49[2] = vmovn_s32(v426);
    v49[3] = vmovn_s32(v423);
    v49[4] = vmovn_s32(v412);
    v49[5] = vmovn_s32(v411);
    v49[6] = vmovn_s32(v408);
    v49[7] = vmovn_s32(v407);
    unint64_t v50 = (int16x4_t *)(a1 + a2 + a2);
    *unint64_t v50 = vmovn_s32(v422);
    v50[1] = vmovn_s32(v421);
    v50[2] = vmovn_s32(v418);
    v50[3] = vmovn_s32(v417);
    v50[4] = vmovn_s32(v41);
    v50[5] = vmovn_s32(v42);
    v50[6] = vmovn_s32(v45);
    v50[7] = vmovn_s32(v46);
    unint64_t v51 = (int16x4_t *)((char *)v50 + a2);
    *unint64_t v51 = vmovn_s32(v420);
    v51[1] = vmovn_s32(v419);
    v51[2] = vmovn_s32(v416);
    v51[3] = vmovn_s32(v415);
    v51[4] = vmovn_s32(v43);
    v51[5] = vmovn_s32(v44);
    uint64_t result = 160;
    v51[6] = vmovn_s32(v47);
    v51[7] = vmovn_s32(v48);
    return result;
  }
  if (a4 == 7)
  {
    float64x2_t v14 = vld1q_dup_f64((const double *)a3);
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    uint64_t v15 = (float64x2_t *)(a1 + a2);
    *uint64_t v15 = v14;
    v15[1] = v14;
    v15[2] = v14;
    v15[3] = v14;
    unint64_t v16 = (float64x2_t *)(a1 + 2 * a2);
    *unint64_t v16 = v14;
    v16[1] = v14;
    v16[2] = v14;
    v16[3] = v14;
    unint64_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *unint64_t v17 = v14;
    v17[1] = v14;
    uint64_t result = 8;
LABEL_239:
    v17[2] = v14;
    v17[3] = v14;
    return result;
  }
  unsigned __int8 v439 = 0;
  unint64_t v436 = 8 * (a3 & 7);
  unint64_t v437 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v438 = v436 | 0x500;
  uint64_t result = AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)18,AGX::AppleCompressionGen2::Vec<short>>((uint64_t)&v453, (uint64_t)v458, (double *)v452.i64, &v436, a4);
  v20.i64[0] = 0x3000300030003;
  v20.i64[1] = 0x3000300030003;
  int8x16_t v21 = v453;
  int16x8_t v22 = (int16x8_t)vandq_s8(v453, v20);
  int8x16_t v23 = vbicq_s8(v458[0], (int8x16_t)vceqq_s16(v22, (int16x8_t)v20));
  v458[0] = v23;
  int16x8_t v454 = (int16x8_t)v23;
  int16x8_t v455 = (int16x8_t)v23;
  int16x8_t v456 = (int16x8_t)v23;
  int16x8_t v457 = (int16x8_t)v23;
  v24.i64[0] = 0x202020202020202;
  v24.i64[1] = 0x202020202020202;
  int8x16_t v25 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v453.i8, (int16x4_t)0x4000400040004)), v24);
  unint64_t v26 = v436;
  if (vmaxvq_s8(v25) < 1)
  {
    v52.i64[0] = -1;
    v52.i64[1] = -1;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
  }
  else
  {
    int8x16_t v27 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v25, v25));
    int8x16_t v28 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v27, (int16x8_t)v27));
    unint64_t v29 = vpaddq_s32((int32x4_t)v28, (int32x4_t)v28).u64[0];
    v30.i64[0] = v29;
    v30.i64[1] = HIDWORD(v29);
    int64x2_t v31 = v30;
    unint64_t v32 = vaddvq_s64(v30);
    unint64_t v33 = v32;
    unint64_t v34 = v436 + v32;
    if (v438) {
      BOOL v35 = v438 >= v34;
    }
    else {
      BOOL v35 = 1;
    }
    int v36 = !v35;
    if (v32 <= 0x80 && v36 == 0)
    {
      v19.i64[0] = 63;
      int v56 = (int64x2_t *)(v437 + 8 * (v436 >> 6));
      int64x2_t v57 = vaddq_s64(vdupq_lane_s64(vandq_s8((int8x16_t)v436, v19).i64[0], 0), vzip1q_s64((int64x2_t)0, v31));
      int8x16_t v38 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v56, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56->i64[0], 0), (uint64x2_t)vnegq_s64(v57)));
      if ((v436 & 0x3F) + v33 >= 0x81) {
        int8x16_t v38 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v56[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v57))), v38);
      }
      unint64_t v436 = v34;
      unint64_t v26 = v34;
    }
    else
    {
      unsigned __int8 v439 = 1;
      int8x16_t v38 = 0uLL;
    }
    int32x2_t v58 = vzip1_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
    v59.i64[0] = v58.u32[0];
    v59.i64[1] = v58.u32[1];
    int64x2_t v60 = (int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)vnegq_s64(v59));
    *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
    *(int32x2_t *)v60.i8 = vmovn_s64(v60);
    int16x8_t v61 = (int16x8_t)vzip1q_s32((int32x4_t)v38, (int32x4_t)v60);
    int16x8_t v62 = (int16x8_t)vshlq_u32((uint32x4_t)v61, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))));
    *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
    *(int16x4_t *)v62.i8 = vmovn_s32((int32x4_t)v62);
    int8x16_t v63 = (int8x16_t)vzip1q_s16(v61, v62);
    int8x16_t v64 = (int8x16_t)vshlq_u16((uint16x8_t)v63, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))));
    *(int8x8_t *)v63.i8 = vmovn_s16((int16x8_t)v63);
    *(int8x8_t *)v64.i8 = vmovn_s16((int16x8_t)v64);
    int8x16_t v65 = vzip1q_s8(v63, v64);
    v64.i64[0] = 0x101010101010101;
    v64.i64[1] = 0x101010101010101;
    int8x16_t v66 = vshlq_s8(v64, v25);
    v64.i64[0] = -1;
    v64.i64[1] = -1;
    int32x4_t v67 = (int32x4_t)vqtbl1q_s8(vandq_s8(v65, vaddq_s8(v66, v64)), (int8x16_t)xmmword_242EA7560);
    *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 0);
    *(int32x2_t *)v64.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 1);
    int8x8_t v68 = (int8x8_t)vdupq_laneq_s32(v67, 2).u64[0];
    v67.i64[0] = vdupq_laneq_s32(v67, 3).u64[0];
    int16x8_t v454 = vsubw_s8(v454, *(int8x8_t *)v65.i8);
    int16x8_t v455 = vsubw_s8(v455, *(int8x8_t *)v64.i8);
    int16x8_t v456 = vsubw_s8(v456, v68);
    int16x8_t v457 = vsubw_s8(v457, *(int8x8_t *)v67.i8);
    int16x8_t v55 = vmovl_s8(vceqz_s8(*(int8x8_t *)v65.i8));
    int16x8_t v54 = vmovl_s8(vceqz_s8(*(int8x8_t *)v64.i8));
    int16x8_t v53 = vmovl_s8(vceqz_s8(v68));
    int16x8_t v52 = vmovl_s8(vceqz_s8(*(int8x8_t *)v67.i8));
  }
  v69.i64[0] = 0x8000800080008;
  v69.i64[1] = 0x8000800080008;
  int8x16_t v70 = 0uLL;
  int8x16_t v71 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v453, v69), (int8x16_t)0, 8uLL), v23);
  int8x16_t v72 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v71, (int16x8_t)v71));
  unint64_t v73 = vpaddq_s32((int32x4_t)v72, (int32x4_t)v72).u64[0];
  v74.i64[0] = v73;
  v74.i64[1] = HIDWORD(v73);
  int64x2_t v75 = v74;
  unint64_t v76 = vaddvq_s64(v74);
  if (v438) {
    BOOL v77 = v438 >= v26 + v76;
  }
  else {
    BOOL v77 = 1;
  }
  int v78 = !v77;
  if (v76 <= 0x80 && v78 == 0)
  {
    int64x2_t v80 = vaddq_s64(vdupq_n_s64(v26 & 0x3F), vzip1q_s64((int64x2_t)0, v75));
    uint64_t v81 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v81, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81->i64[0], 0), (uint64x2_t)vnegq_s64(v80)));
    if ((v26 & 0x3F) + v76 >= 0x81) {
      int8x16_t v70 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v81[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v80))), v70);
    }
    v26 += v76;
  }
  else
  {
    unsigned __int8 v439 = 1;
  }
  int v82 = v453.i8[0] & 3;
  if (v82 == 2)
  {
    unint64_t v83 = v26 + 8;
    if (v438)
    {
      if (v438 < v83)
      {
        unsigned __int8 v439 = 1;
LABEL_57:
        unsigned __int8 v439 = 1;
        goto LABEL_58;
      }
      unint64_t v84 = v26 + 16;
      v26 += 8;
      if (v438 < v84) {
        goto LABEL_57;
      }
      unint64_t v83 = v26;
    }
    unint64_t v26 = v83 + 8;
  }
LABEL_58:
  int8x16_t v85 = 0uLL;
  int8x16_t v86 = vextq_s8((int8x16_t)0, (int8x16_t)v454, 8uLL);
  int8x16_t v87 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v86, (int16x8_t)v86));
  unint64_t v88 = vpaddq_s32((int32x4_t)v87, (int32x4_t)v87).u64[0];
  v89.i64[0] = v88;
  v89.i64[1] = HIDWORD(v88);
  int64x2_t v90 = v89;
  unint64_t v91 = vaddvq_s64(v89);
  unint64_t v92 = v26 + v91;
  if (v438) {
    BOOL v93 = v438 >= v92;
  }
  else {
    BOOL v93 = 1;
  }
  int v94 = !v93;
  if (v91 > 0x80 || v94)
  {
    int v99 = 1;
    unint64_t v97 = v437;
  }
  else
  {
    unint64_t v95 = v26 & 0x3F;
    int64x2_t v96 = vaddq_s64(vdupq_n_s64(v95), vzip1q_s64((int64x2_t)0, v90));
    unint64_t v97 = v437;
    unint64_t v98 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v85 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v96)));
    if (v95 + v91 >= 0x81) {
      int8x16_t v85 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v96))), v85);
    }
    int v99 = v439;
    unint64_t v26 = v92;
  }
  v100.i64[0] = 0xF000F000F000FLL;
  v100.i64[1] = 0xF000F000F000FLL;
  v101.i64[0] = 0x10001000100010;
  v101.i64[1] = 0x10001000100010;
  int8x16_t v102 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v454, v454));
  unint64_t v103 = vpaddq_s32((int32x4_t)v102, (int32x4_t)v102).u64[0];
  v104.i64[0] = v103;
  v104.i64[1] = HIDWORD(v103);
  int64x2_t v105 = v104;
  unint64_t v106 = vaddvq_s64(v104);
  unint64_t v107 = v106;
  unint64_t v108 = v26 + v106;
  if (v438) {
    BOOL v109 = v438 >= v108;
  }
  else {
    BOOL v109 = 1;
  }
  char v110 = !v109;
  int8x16_t v111 = 0uLL;
  if (v106 > 0x80 || (v110 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v108 = v26;
    int8x16_t v115 = 0uLL;
  }
  else
  {
    unint64_t v112 = v26 & 0x3F;
    int64x2_t v113 = vaddq_s64(vdupq_n_s64(v112), vzip1q_s64((int64x2_t)0, v105));
    int v114 = (int64x2_t *)(v97 + 8 * (v26 >> 6));
    int8x16_t v115 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v114, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114->i64[0], 0), (uint64x2_t)vnegq_s64(v113)));
    if (v112 + v107 >= 0x81) {
      int8x16_t v115 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v114[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v113))), v115);
    }
  }
  int32x2_t v116 = vzip1_s32(*(int32x2_t *)v102.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
  v117.i64[0] = v116.u32[0];
  v117.i64[1] = v116.u32[1];
  uint64x2_t v118 = (uint64x2_t)vnegq_s64(v117);
  int64x2_t v119 = (int64x2_t)vshlq_u64((uint64x2_t)v115, v118);
  *(int32x2_t *)v115.i8 = vmovn_s64((int64x2_t)v115);
  *(int32x2_t *)v119.i8 = vmovn_s64(v119);
  int16x8_t v120 = (int16x8_t)vzip1q_s32((int32x4_t)v115, (int32x4_t)v119);
  uint32x4_t v121 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v454.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v454, (int8x16_t)v454, 8uLL))));
  int16x8_t v122 = (int16x8_t)vshlq_u32((uint32x4_t)v120, v121);
  *(int16x4_t *)v120.i8 = vmovn_s32((int32x4_t)v120);
  *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v122);
  int16x8_t v123 = vzip1q_s16(v120, v122);
  int16x8_t v124 = vaddq_s16(v454, (int16x8_t)v100);
  int16x8_t v125 = vsubq_s16(v101, v454);
  int16x8_t v126 = vshlq_s16(vshlq_s16(v123, v125), v124);
  int16x8_t v441 = v126;
  unint64_t v127 = v108 + v107;
  if (v438) {
    BOOL v128 = v438 >= v127;
  }
  else {
    BOOL v128 = 1;
  }
  char v129 = !v128;
  if (v107 > 0x80 || (v129 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v127 = v108;
  }
  else
  {
    unint64_t v130 = v108 & 0x3F;
    int64x2_t v131 = vaddq_s64(vdupq_n_s64(v130), vzip1q_s64((int64x2_t)0, v105));
    unint64_t v132 = (int64x2_t *)(v97 + 8 * (v108 >> 6));
    int8x16_t v111 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v132, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132->i64[0], 0), (uint64x2_t)vnegq_s64(v131)));
    if (v130 + v107 >= 0x81) {
      int8x16_t v111 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v132[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v131))), v111);
    }
  }
  int64x2_t v133 = (int64x2_t)vshlq_u64((uint64x2_t)v111, v118);
  *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v111);
  *(int32x2_t *)v133.i8 = vmovn_s64(v133);
  int16x8_t v134 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v133);
  int16x8_t v135 = (int16x8_t)vshlq_u32((uint32x4_t)v134, v121);
  *(int16x4_t *)v134.i8 = vmovn_s32((int32x4_t)v134);
  *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
  int16x8_t v136 = vshlq_s16(vshlq_s16(vzip1q_s16(v134, v135), v125), v124);
  int16x8_t v442 = v136;
  unint64_t v137 = v127 + v107;
  if (v438) {
    BOOL v138 = v438 >= v137;
  }
  else {
    BOOL v138 = 1;
  }
  char v139 = !v138;
  int8x16_t v140 = 0uLL;
  if (v107 > 0x80 || (v139 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v137 = v127;
    int8x16_t v144 = 0uLL;
  }
  else
  {
    unint64_t v141 = v127 & 0x3F;
    int64x2_t v142 = vaddq_s64(vdupq_n_s64(v141), vzip1q_s64((int64x2_t)0, v105));
    BOOL v143 = (int64x2_t *)(v97 + 8 * (v127 >> 6));
    int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v143, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143->i64[0], 0), (uint64x2_t)vnegq_s64(v142)));
    if (v141 + v107 >= 0x81) {
      int8x16_t v144 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v143[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v142))), v144);
    }
  }
  int64x2_t v145 = (int64x2_t)vshlq_u64((uint64x2_t)v144, v118);
  *(int32x2_t *)v144.i8 = vmovn_s64((int64x2_t)v144);
  *(int32x2_t *)v145.i8 = vmovn_s64(v145);
  int16x8_t v146 = (int16x8_t)vzip1q_s32((int32x4_t)v144, (int32x4_t)v145);
  int16x8_t v147 = (int16x8_t)vshlq_u32((uint32x4_t)v146, v121);
  *(int16x4_t *)v146.i8 = vmovn_s32((int32x4_t)v146);
  *(int16x4_t *)v147.i8 = vmovn_s32((int32x4_t)v147);
  int16x8_t v148 = vshlq_s16(vshlq_s16(vzip1q_s16(v146, v147), v125), v124);
  int32x4_t v443 = (int32x4_t)v148;
  int8x16_t v149 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v455, v455));
  v146.i64[0] = vpaddq_s32((int32x4_t)v149, (int32x4_t)v149).u64[0];
  v150.i64[0] = v146.u32[0];
  v150.i64[1] = v146.u32[1];
  int64x2_t v151 = v150;
  unint64_t v152 = vaddvq_s64(v150);
  unint64_t v153 = v152;
  unint64_t v154 = v137 + v152;
  if (v438) {
    BOOL v155 = v438 >= v154;
  }
  else {
    BOOL v155 = 1;
  }
  char v156 = !v155;
  if (v152 > 0x80 || (v156 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v154 = v137;
  }
  else
  {
    unint64_t v157 = v137 & 0x3F;
    int64x2_t v158 = vaddq_s64(vdupq_n_s64(v157), vzip1q_s64((int64x2_t)0, v151));
    unint64_t v159 = (int64x2_t *)(v97 + 8 * (v137 >> 6));
    int8x16_t v140 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v159, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159->i64[0], 0), (uint64x2_t)vnegq_s64(v158)));
    if (v157 + v153 >= 0x81) {
      int8x16_t v140 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v159[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v158))), v140);
    }
  }
  unint64_t v160 = v154 + v153;
  if (v438) {
    BOOL v161 = v438 >= v160;
  }
  else {
    BOOL v161 = 1;
  }
  char v162 = !v161;
  int8x16_t v163 = 0uLL;
  if (v153 > 0x80 || (v162 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v160 = v154;
    int8x16_t v167 = 0uLL;
  }
  else
  {
    unint64_t v164 = v154 & 0x3F;
    int64x2_t v165 = vaddq_s64(vdupq_n_s64(v164), vzip1q_s64((int64x2_t)0, v151));
    uint64_t v166 = (int64x2_t *)(v97 + 8 * (v154 >> 6));
    int8x16_t v167 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v166, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166->i64[0], 0), (uint64x2_t)vnegq_s64(v165)));
    if (v164 + v153 >= 0x81) {
      int8x16_t v167 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v166[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v165))), v167);
    }
  }
  unint64_t v168 = v160 + v153;
  if (v438) {
    BOOL v169 = v438 >= v168;
  }
  else {
    BOOL v169 = 1;
  }
  char v170 = !v169;
  int8x16_t v431 = (int8x16_t)v55;
  if (v153 > 0x80 || (v170 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v168 = v160;
  }
  else
  {
    int64x2_t v171 = vaddq_s64(vdupq_n_s64(v160 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    unint64_t v172 = (int64x2_t *)(v97 + 8 * (v160 >> 6));
    int8x16_t v163 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v172, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172->i64[0], 0), (uint64x2_t)vnegq_s64(v171)));
    if ((v160 & 0x3F) + v153 >= 0x81) {
      int8x16_t v163 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v172[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v171))), v163);
    }
  }
  unint64_t v173 = v168 + v153;
  if (v438) {
    BOOL v174 = v438 >= v173;
  }
  else {
    BOOL v174 = 1;
  }
  char v175 = !v174;
  int8x16_t v176 = 0uLL;
  int8x16_t v433 = (int8x16_t)v52;
  int16x8_t v435 = v22;
  int8x16_t v427 = (int8x16_t)v54;
  if (v153 > 0x80 || (v175 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v173 = v168;
    int8x16_t v179 = 0uLL;
  }
  else
  {
    int64x2_t v177 = vaddq_s64(vdupq_n_s64(v168 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int v178 = (int64x2_t *)(v97 + 8 * (v168 >> 6));
    int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v178, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178->i64[0], 0), (uint64x2_t)vnegq_s64(v177)));
    if ((v168 & 0x3F) + v153 >= 0x81) {
      int8x16_t v179 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v178[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v177))), v179);
    }
  }
  int8x16_t v180 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v456, v456));
  unint64_t v181 = vpaddq_s32((int32x4_t)v180, (int32x4_t)v180).u64[0];
  v182.i64[0] = v181;
  v182.i64[1] = HIDWORD(v181);
  int64x2_t v183 = v182;
  unint64_t v184 = vaddvq_s64(v182);
  unint64_t v185 = v184;
  unint64_t v186 = v173 + v184;
  if (v438) {
    BOOL v187 = v438 >= v186;
  }
  else {
    BOOL v187 = 1;
  }
  char v188 = !v187;
  int8x16_t v429 = (int8x16_t)v53;
  if (v184 > 0x80 || (v188 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v186 = v173;
  }
  else
  {
    unint64_t v189 = v173 & 0x3F;
    int64x2_t v190 = vaddq_s64(vdupq_n_s64(v189), vzip1q_s64((int64x2_t)0, v183));
    unint64_t v191 = (int64x2_t *)(v97 + 8 * (v173 >> 6));
    int8x16_t v176 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v191, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191->i64[0], 0), (uint64x2_t)vnegq_s64(v190)));
    if (v189 + v185 >= 0x81) {
      int8x16_t v176 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v191[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v190))), v176);
    }
  }
  unint64_t v192 = v186 + v185;
  if (v438) {
    BOOL v193 = v438 >= v192;
  }
  else {
    BOOL v193 = 1;
  }
  char v194 = !v193;
  int8x16_t v195 = 0uLL;
  if (v185 > 0x80 || (v194 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v192 = v186;
    int8x16_t v199 = 0uLL;
  }
  else
  {
    unint64_t v196 = v186 & 0x3F;
    int64x2_t v197 = vaddq_s64(vdupq_n_s64(v196), vzip1q_s64((int64x2_t)0, v183));
    uint64_t v198 = (int64x2_t *)(v97 + 8 * (v186 >> 6));
    int8x16_t v199 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v198, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198->i64[0], 0), (uint64x2_t)vnegq_s64(v197)));
    if (v196 + v185 >= 0x81) {
      int8x16_t v199 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v198[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v197))), v199);
    }
  }
  unint64_t v200 = v192 + v185;
  if (v438) {
    BOOL v201 = v438 >= v200;
  }
  else {
    BOOL v201 = 1;
  }
  char v202 = !v201;
  if (v185 > 0x80 || (v202 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v200 = v192;
  }
  else
  {
    unint64_t v203 = v192 & 0x3F;
    int64x2_t v204 = vaddq_s64(vdupq_n_s64(v203), vzip1q_s64((int64x2_t)0, v183));
    unint64_t v205 = (int64x2_t *)(v97 + 8 * (v192 >> 6));
    int8x16_t v195 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v205, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205->i64[0], 0), (uint64x2_t)vnegq_s64(v204)));
    if (v203 + v185 >= 0x81) {
      int8x16_t v195 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v205[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v204))), v195);
    }
  }
  unint64_t v206 = v200 + v185;
  if (v438) {
    BOOL v207 = v438 >= v206;
  }
  else {
    BOOL v207 = 1;
  }
  char v208 = !v207;
  int8x16_t v209 = 0uLL;
  if (v185 > 0x80 || (v208 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v206 = v200;
    int8x16_t v213 = 0uLL;
  }
  else
  {
    unint64_t v210 = v200 & 0x3F;
    int64x2_t v211 = vaddq_s64(vdupq_n_s64(v210), vzip1q_s64((int64x2_t)0, v183));
    uint64_t v212 = (int64x2_t *)(v97 + 8 * (v200 >> 6));
    int8x16_t v213 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v212, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212->i64[0], 0), (uint64x2_t)vnegq_s64(v211)));
    if (v210 + v185 >= 0x81) {
      int8x16_t v213 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v212[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v211))), v213);
    }
  }
  int8x16_t v214 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v457, v457));
  unint64_t v215 = vpaddq_s32((int32x4_t)v214, (int32x4_t)v214).u64[0];
  v216.i64[0] = v215;
  v216.i64[1] = HIDWORD(v215);
  int64x2_t v217 = v216;
  unint64_t v218 = vaddvq_s64(v216);
  unint64_t v219 = v218;
  unint64_t v220 = v206 + v218;
  if (v438) {
    BOOL v221 = v438 >= v220;
  }
  else {
    BOOL v221 = 1;
  }
  char v222 = !v221;
  if (v218 > 0x80 || (v222 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v220 = v206;
  }
  else
  {
    unint64_t v223 = v206 & 0x3F;
    int64x2_t v224 = vaddq_s64(vdupq_n_s64(v223), vzip1q_s64((int64x2_t)0, v217));
    unsigned int v225 = (int64x2_t *)(v97 + 8 * (v206 >> 6));
    int8x16_t v209 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v225, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225->i64[0], 0), (uint64x2_t)vnegq_s64(v224)));
    if (v223 + v219 >= 0x81) {
      int8x16_t v209 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v225[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v224))), v209);
    }
  }
  unint64_t v226 = v220 + v219;
  if (v438) {
    BOOL v227 = v438 >= v226;
  }
  else {
    BOOL v227 = 1;
  }
  char v228 = !v227;
  int8x16_t v229 = 0uLL;
  if (v219 > 0x80 || (v228 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v226 = v220;
    int8x16_t v233 = 0uLL;
  }
  else
  {
    unint64_t v230 = v220 & 0x3F;
    int64x2_t v231 = vaddq_s64(vdupq_n_s64(v230), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v232 = (int64x2_t *)(v97 + 8 * (v220 >> 6));
    int64x2_t v100 = vnegq_s64(v231);
    int8x16_t v233 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v232, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232->i64[0], 0), (uint64x2_t)v100));
    if (v230 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v233 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v232[1], 1), (uint64x2_t)vsubq_s64(v100, v231))), v233);
    }
  }
  unint64_t v234 = v226 + v219;
  if (v438) {
    BOOL v235 = v438 >= v234;
  }
  else {
    BOOL v235 = 1;
  }
  char v236 = !v235;
  if (v219 > 0x80 || (v236 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v234 = v226;
  }
  else
  {
    unint64_t v237 = v226 & 0x3F;
    int64x2_t v238 = vaddq_s64(vdupq_n_s64(v237), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v239 = (int64x2_t *)(v97 + 8 * (v226 >> 6));
    int64x2_t v100 = vsubq_s64(vdupq_n_s64(0x40uLL), v238);
    int8x16_t v229 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v239, 1), (uint64x2_t)v100), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239->i64[0], 0), (uint64x2_t)vnegq_s64(v238)));
    if (v237 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v229 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v238)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v239[1], 1), (uint64x2_t)vsubq_s64(v100, v238))), v229);
    }
  }
  unint64_t v240 = v234 + v219;
  if (v438) {
    BOOL v241 = v438 >= v240;
  }
  else {
    BOOL v241 = 1;
  }
  char v242 = !v241;
  int8x16_t v243 = 0uLL;
  if (v219 > 0x80 || (v242 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v240 = v234;
  }
  else
  {
    int64x2_t v244 = vaddq_s64(vdupq_n_s64(v234 & 0x3F), vzip1q_s64((int64x2_t)0, v217));
    unint64_t v245 = (int64x2_t *)(v97 + 8 * (v234 >> 6));
    int64x2_t v100 = vdupq_n_s64(0x40uLL);
    int8x16_t v243 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v245, 1), (uint64x2_t)vsubq_s64(v100, v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245->i64[0], 0), (uint64x2_t)vnegq_s64(v244)));
    if ((v234 & 0x3F) + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v243 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v245[1], 1), (uint64x2_t)vsubq_s64(v100, v244))), v243);
    }
  }
  if (v99 || v438 + 8 * result - v240 - 1280 >= 9 || v82 == 2)
  {
    uint64_t result = 0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    unint64_t v246 = (float64x2_t *)(a1 + a2);
    *unint64_t v246 = v14;
    v246[1] = v14;
    v246[2] = v14;
    v246[3] = v14;
    unint64_t v247 = (float64x2_t *)(a1 + 2 * a2);
    *unint64_t v247 = v14;
    v247[1] = v14;
    v247[2] = v14;
    v247[3] = v14;
    unint64_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *unint64_t v17 = v14;
    v17[1] = v14;
    goto LABEL_239;
  }
  int32x2_t v248 = vzip1_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
  int32x2_t v249 = vzip1_s32(*(int32x2_t *)v87.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  *(int32x2_t *)v72.i8 = vzip1_s32(*(int32x2_t *)v149.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL));
  int32x2_t v250 = vzip1_s32(*(int32x2_t *)v180.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL));
  int32x4_t v251 = (int32x4_t)vextq_s8(v214, v214, 8uLL);
  int32x2_t v252 = vzip1_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v251.i8);
  v253.i64[0] = v248.u32[0];
  v253.i64[1] = v248.u32[1];
  int64x2_t v254 = (int64x2_t)vshlq_u64((uint64x2_t)v70, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v70.i8 = vmovn_s64((int64x2_t)v70);
  *(int32x2_t *)v254.i8 = vmovn_s64(v254);
  int16x8_t v255 = (int16x8_t)vzip1q_s32((int32x4_t)v70, (int32x4_t)v254);
  v253.i64[0] = v249.u32[0];
  v253.i64[1] = v249.u32[1];
  int64x2_t v256 = (int64x2_t)vshlq_u64((uint64x2_t)v85, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v251.i8 = vmovn_s64((int64x2_t)v85);
  *(int32x2_t *)v256.i8 = vmovn_s64(v256);
  int32x4_t v257 = vzip1q_s32(v251, (int32x4_t)v256);
  v253.i64[0] = v72.u32[0];
  v253.i64[1] = v72.u32[1];
  int32x4_t v258 = (int32x4_t)vnegq_s64(v253);
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v140, (uint64x2_t)v258);
  *(int32x2_t *)v100.i8 = vmovn_s64((int64x2_t)v140);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v167, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v167);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v261);
  int64x2_t v263 = (int64x2_t)vshlq_u64((uint64x2_t)v163, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v163);
  *(int32x2_t *)v263.i8 = vmovn_s64(v263);
  int16x8_t v264 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v263);
  v253.i64[0] = v250.u32[0];
  v253.i64[1] = v250.u32[1];
  int64x2_t v265 = v253;
  v253.i64[0] = v252.u32[0];
  v253.i64[1] = v252.u32[1];
  int32x4_t v266 = (int32x4_t)vnegq_s64(v265);
  int64x2_t v267 = (int64x2_t)vshlq_u64((uint64x2_t)v179, (uint64x2_t)v258);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v179);
  *(int32x2_t *)v267.i8 = vmovn_s64(v267);
  int16x8_t v268 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v267);
  int64x2_t v269 = (int64x2_t)vshlq_u64((uint64x2_t)v176, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v176);
  *(int32x2_t *)v269.i8 = vmovn_s64(v269);
  int16x8_t v270 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v269);
  int64x2_t v271 = (int64x2_t)vshlq_u64((uint64x2_t)v199, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v199);
  *(int32x2_t *)v271.i8 = vmovn_s64(v271);
  int16x8_t v272 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v271);
  int64x2_t v273 = (int64x2_t)vshlq_u64((uint64x2_t)v195, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v195);
  *(int32x2_t *)v273.i8 = vmovn_s64(v273);
  int16x8_t v274 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v273);
  uint64x2_t v275 = (uint64x2_t)vnegq_s64(v253);
  int64x2_t v276 = (int64x2_t)vshlq_u64((uint64x2_t)v213, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v213);
  *(int32x2_t *)v276.i8 = vmovn_s64(v276);
  int16x8_t v277 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v276);
  int64x2_t v278 = (int64x2_t)vshlq_u64((uint64x2_t)v209, v275);
  *(int32x2_t *)v266.i8 = vmovn_s64((int64x2_t)v209);
  *(int32x2_t *)v278.i8 = vmovn_s64(v278);
  int16x8_t v279 = (int16x8_t)vzip1q_s32(v266, (int32x4_t)v278);
  int64x2_t v280 = (int64x2_t)vshlq_u64((uint64x2_t)v233, v275);
  *(int32x2_t *)v233.i8 = vmovn_s64((int64x2_t)v233);
  *(int32x2_t *)v280.i8 = vmovn_s64(v280);
  int16x8_t v281 = (int16x8_t)vzip1q_s32((int32x4_t)v233, (int32x4_t)v280);
  int64x2_t v282 = (int64x2_t)vshlq_u64((uint64x2_t)v229, v275);
  *(int32x2_t *)v280.i8 = vmovn_s64((int64x2_t)v229);
  *(int32x2_t *)v282.i8 = vmovn_s64(v282);
  int16x8_t v283 = (int16x8_t)vzip1q_s32((int32x4_t)v280, (int32x4_t)v282);
  int16x8_t v284 = (int16x8_t)vshlq_u32((uint32x4_t)v255, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v71.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)))));
  *(int16x4_t *)v255.i8 = vmovn_s32((int32x4_t)v255);
  *(int16x4_t *)v284.i8 = vmovn_s32((int32x4_t)v284);
  int16x8_t v285 = vzip1q_s16(v255, v284);
  uint32x4_t v286 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v455.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v455, (int8x16_t)v455, 8uLL))));
  int16x8_t v287 = (int16x8_t)vshlq_u32((uint32x4_t)v257, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)))));
  *(int16x4_t *)v179.i8 = vmovn_s32(v257);
  *(int16x4_t *)v287.i8 = vmovn_s32((int32x4_t)v287);
  int16x8_t v288 = vzip1q_s16((int16x8_t)v179, v287);
  int16x8_t v289 = (int16x8_t)vshlq_u32((uint32x4_t)v260, v286);
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v289.i8 = vmovn_s32((int32x4_t)v289);
  int16x8_t v290 = vzip1q_s16(v260, v289);
  int16x8_t v291 = (int16x8_t)vshlq_u32((uint32x4_t)v262, v286);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v291.i8 = vmovn_s32((int32x4_t)v291);
  int16x8_t v292 = vzip1q_s16(v262, v291);
  int16x8_t v293 = (int16x8_t)vshlq_u32((uint32x4_t)v264, v286);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  *(int16x4_t *)v293.i8 = vmovn_s32((int32x4_t)v293);
  int16x8_t v294 = vzip1q_s16(v264, v293);
  uint32x4_t v295 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v456.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v456, (int8x16_t)v456, 8uLL))));
  int16x8_t v296 = (int16x8_t)vshlq_u32((uint32x4_t)v268, v286);
  *(int16x4_t *)v268.i8 = vmovn_s32((int32x4_t)v268);
  *(int16x4_t *)v296.i8 = vmovn_s32((int32x4_t)v296);
  int16x8_t v297 = vzip1q_s16(v268, v296);
  int16x8_t v298 = (int16x8_t)vshlq_u32((uint32x4_t)v270, v295);
  *(int16x4_t *)v270.i8 = vmovn_s32((int32x4_t)v270);
  *(int16x4_t *)v298.i8 = vmovn_s32((int32x4_t)v298);
  int16x8_t v299 = vzip1q_s16(v270, v298);
  int16x8_t v300 = (int16x8_t)vshlq_u32((uint32x4_t)v272, v295);
  *(int16x4_t *)v272.i8 = vmovn_s32((int32x4_t)v272);
  *(int16x4_t *)v300.i8 = vmovn_s32((int32x4_t)v300);
  int16x8_t v301 = vzip1q_s16(v272, v300);
  int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v274, v295);
  *(int16x4_t *)v274.i8 = vmovn_s32((int32x4_t)v274);
  *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
  int16x8_t v303 = vzip1q_s16(v274, v302);
  uint32x4_t v304 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v457.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v457, (int8x16_t)v457, 8uLL))));
  int16x8_t v305 = (int16x8_t)vshlq_u32((uint32x4_t)v277, v295);
  *(int16x4_t *)v277.i8 = vmovn_s32((int32x4_t)v277);
  *(int16x4_t *)v305.i8 = vmovn_s32((int32x4_t)v305);
  int16x8_t v306 = vzip1q_s16(v277, v305);
  int16x8_t v307 = (int16x8_t)vshlq_u32((uint32x4_t)v279, v304);
  *(int16x4_t *)v279.i8 = vmovn_s32((int32x4_t)v279);
  *(int16x4_t *)v307.i8 = vmovn_s32((int32x4_t)v307);
  int16x8_t v308 = vzip1q_s16(v279, v307);
  int16x8_t v309 = (int16x8_t)vshlq_u32((uint32x4_t)v281, v304);
  *(int16x4_t *)v281.i8 = vmovn_s32((int32x4_t)v281);
  *(int16x4_t *)v309.i8 = vmovn_s32((int32x4_t)v309);
  int16x8_t v310 = vzip1q_s16(v281, v309);
  int16x8_t v311 = (int16x8_t)vshlq_u32((uint32x4_t)v283, v304);
  *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
  *(int16x4_t *)v311.i8 = vmovn_s32((int32x4_t)v311);
  int16x8_t v312 = vzip1q_s16(v283, v311);
  v311.i64[0] = 0x10001000100010;
  v311.i64[1] = 0x10001000100010;
  int16x8_t v313 = vsubq_s16(v311, (int16x8_t)v71);
  v314.i64[0] = 0xF000F000F000FLL;
  v314.i64[1] = 0xF000F000F000FLL;
  int16x8_t v315 = vaddq_s16((int16x8_t)v71, v314);
  int16x8_t v316 = vshlq_s16(v285, v313);
  v313.i64[0] = 0x10001000100010;
  v313.i64[1] = 0x10001000100010;
  int16x8_t v317 = vsubq_s16(v313, (int16x8_t)v86);
  int16x8_t v318 = vaddq_s16((int16x8_t)v86, v314);
  v314.i64[0] = 0x10001000100010;
  v314.i64[1] = 0x10001000100010;
  int16x8_t v319 = vshlq_s16(v288, v317);
  v317.i64[0] = 0xF000F000F000FLL;
  v317.i64[1] = 0xF000F000F000FLL;
  int16x8_t v320 = vsubq_s16(v314, v455);
  int16x8_t v321 = vaddq_s16(v455, v317);
  v317.i64[0] = 0x10001000100010;
  v317.i64[1] = 0x10001000100010;
  int16x8_t v322 = vshlq_s16(v290, v320);
  int16x8_t v323 = vshlq_s16(v292, v320);
  int16x8_t v324 = vshlq_s16(v294, v320);
  int16x8_t v325 = vshlq_s16(v297, v320);
  v320.i64[0] = 0xF000F000F000FLL;
  v320.i64[1] = 0xF000F000F000FLL;
  int16x8_t v326 = vsubq_s16(v317, v456);
  int16x8_t v327 = vaddq_s16(v456, v320);
  v320.i64[0] = 0x10001000100010;
  v320.i64[1] = 0x10001000100010;
  int16x8_t v328 = vshlq_s16(v299, v326);
  int16x8_t v329 = vshlq_s16(v301, v326);
  int16x8_t v330 = vshlq_s16(v303, v326);
  int16x8_t v331 = vshlq_s16(v306, v326);
  v326.i64[0] = 0xF000F000F000FLL;
  v326.i64[1] = 0xF000F000F000FLL;
  int16x8_t v332 = vsubq_s16(v320, v457);
  int16x8_t v333 = vaddq_s16(v457, v326);
  int8x16_t v334 = (int8x16_t)vshlq_s16(v316, v315);
  int16x8_t v335 = vshlq_s16(v319, v318);
  int16x8_t v336 = vshlq_s16(v322, v321);
  int16x8_t v337 = vshlq_s16(v323, v321);
  int16x8_t v338 = vshlq_s16(v324, v321);
  int16x8_t v339 = vshlq_s16(v325, v321);
  int16x8_t v340 = vshlq_s16(v328, v327);
  int16x8_t v341 = vshlq_s16(v329, v327);
  int16x8_t v342 = vshlq_s16(v330, v327);
  int16x8_t v343 = vshlq_s16(v331, v327);
  int64x2_t v344 = (int64x2_t)vshlq_u64((uint64x2_t)v243, v275);
  *(int32x2_t *)v243.i8 = vmovn_s64((int64x2_t)v243);
  *(int32x2_t *)v344.i8 = vmovn_s64(v344);
  int16x8_t v345 = (int16x8_t)vzip1q_s32((int32x4_t)v243, (int32x4_t)v344);
  int16x8_t v346 = vshlq_s16(vshlq_s16(v308, v332), v333);
  int16x8_t v347 = vshlq_s16(vshlq_s16(v310, v332), v333);
  int16x8_t v348 = vshlq_s16(vshlq_s16(v312, v332), v333);
  int16x8_t v349 = (int16x8_t)vshlq_u32((uint32x4_t)v345, v304);
  *(int16x4_t *)v345.i8 = vmovn_s32((int32x4_t)v345);
  *(int16x4_t *)v349.i8 = vmovn_s32((int32x4_t)v349);
  int16x8_t v350 = vshlq_s16(vshlq_s16(vzip1q_s16(v345, v349), v332), v333);
  int16x8_t v351 = vaddq_s16((int16x8_t)vandq_s8(v334, v431), v335);
  int8x16_t v352 = (int8x16_t)vdupq_lane_s64(v334.i64[0], 0);
  int16x8_t v353 = (int16x8_t)vandq_s8(v427, v352);
  int16x8_t v354 = vsubq_s16(v336, v353);
  int16x8_t v355 = vsubq_s16(v337, v353);
  int16x8_t v356 = vsubq_s16(v338, v353);
  int16x8_t v357 = vsubq_s16(v339, v353);
  int16x8_t v358 = (int16x8_t)vandq_s8(v429, v352);
  int16x8_t v359 = vsubq_s16(v340, v358);
  int16x8_t v360 = vsubq_s16(v341, v358);
  int16x8_t v361 = (int16x8_t)vandq_s8(v431, v352);
  int16x8_t v362 = vsubq_s16(v342, v358);
  int16x8_t v363 = vsubq_s16(v343, v358);
  v364.i64[0] = 0x1000100010001;
  v364.i64[1] = 0x1000100010001;
  int16x8_t v365 = vsubq_s16(v126, v361);
  int16x8_t v366 = vsubq_s16(v136, v361);
  int16x8_t v367 = (int16x8_t)vandq_s8(v433, v352);
  int16x8_t v368 = vsubq_s16(v346, v367);
  int16x8_t v369 = vsubq_s16(v347, v367);
  int16x8_t v370 = vsubq_s16(v348, v367);
  int16x8_t v371 = vsubq_s16(v350, v367);
  int8x16_t v372 = (int8x16_t)vsubq_s16(v148, v361);
  int8x16_t v373 = (int8x16_t)vsubq_s16(v351, v361);
  int32x4_t v440 = (int32x4_t)v351;
  int8x16_t v448 = (int8x16_t)v368;
  int8x16_t v449 = (int8x16_t)v369;
  int8x16_t v450 = (int8x16_t)v370;
  int8x16_t v451 = (int8x16_t)v371;
  if (vaddvq_s16(vceqq_s16(v435, (int16x8_t)v364)))
  {
    int8x16_t v374 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v453, v364));
    v375.i64[1] = v373.i64[1];
    v375.i64[0] = v372.i64[1];
    v376.i64[0] = v372.i64[0];
    v376.i64[1] = v373.i64[0];
    int16x8_t v377 = (int16x8_t)vbslq_s8(v374, v375, v373);
    int16x8_t v378 = (int16x8_t)vbslq_s8(v374, v376, v372);
    v379.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v379.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    int16x8_t v380 = (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), v379), v374);
    v462.val[0] = (int8x16_t)vaddq_s16(v377, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7710), v374));
    v462.val[1] = (int8x16_t)vaddq_s16(v365, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7720), v374));
    v462.val[2] = (int8x16_t)vaddq_s16(v366, v380);
    v462.val[3] = (int8x16_t)vaddq_s16(v378, v380);
    int16x8_t v381 = (int16x8_t)vandq_s8(vqtbl4q_s8(v462, v379), v374);
    int8x16_t v373 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[0], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7730), v374));
    int16x8_t v365 = vaddq_s16((int16x8_t)v462.val[1], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7740), v374));
    int32x4_t v440 = (int32x4_t)v373;
    int16x8_t v441 = v365;
    int16x8_t v366 = vaddq_s16((int16x8_t)v462.val[2], v381);
    int8x16_t v372 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[3], v381);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7710), v374), v354);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7750), v374), v355);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, v379), v374), v356);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7760), v374), v357);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7730), v374);
    int16x8_t v382 = (int16x8_t)vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v354 = vaddq_s16((int16x8_t)v462.val[3], (int16x8_t)v460.val[0]);
    int16x8_t v355 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v356 = vaddq_s16((int16x8_t)v460.val[2], v382);
    int16x8_t v357 = vaddq_s16((int16x8_t)v460.val[3], v382);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA74D0), v374), v359);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA75A0), v374), v360);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7710), v374), v362);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7720), v374), v363);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v359 = vaddq_s16((int16x8_t)v460.val[0], (int16x8_t)v462.val[3]);
    int16x8_t v360 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v362 = vaddq_s16((int16x8_t)v460.val[2], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA75D0), v374));
    int16x8_t v363 = vaddq_s16((int16x8_t)v460.val[3], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7770), v374));
    v460.val[0] = v448;
    v460.val[1] = v449;
    int8x16_t v21 = v453;
    v460.val[2] = v450;
    v460.val[3] = v451;
    v461.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA74D0), v374), (int16x8_t)v448);
    v461.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7780), v374), (int16x8_t)v449);
    int16x8_t v442 = v366;
    int32x4_t v443 = (int32x4_t)v372;
    v461.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7710), v374), (int16x8_t)v450);
    v461.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7720), v374), (int16x8_t)v451);
    int16x8_t v383 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, v379), v374);
    int16x8_t v384 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA75D0), v374);
    int16x8_t v385 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA7790), v374);
    int16x8_t v368 = vaddq_s16((int16x8_t)v461.val[0], v383);
    int16x8_t v369 = vaddq_s16((int16x8_t)v461.val[1], v383);
    int16x8_t v370 = vaddq_s16((int16x8_t)v461.val[2], v384);
    int16x8_t v371 = vaddq_s16((int16x8_t)v461.val[3], v385);
  }
  int8x16_t v386 = (int8x16_t)vaddq_s16(v452, (int16x8_t)v373);
  int8x16_t v387 = (int8x16_t)vaddq_s16(v365, v452);
  int8x16_t v388 = (int8x16_t)vaddq_s16(v366, v452);
  int8x16_t v389 = (int8x16_t)vaddq_s16((int16x8_t)v372, v452);
  int8x16_t v390 = (int8x16_t)vaddq_s16(v354, v452);
  int8x16_t v391 = (int8x16_t)vaddq_s16(v355, v452);
  int8x16_t v392 = (int8x16_t)vaddq_s16(v356, v452);
  int8x16_t v393 = (int8x16_t)vaddq_s16(v357, v452);
  int8x16_t v394 = (int8x16_t)vaddq_s16(v359, v452);
  int8x16_t v395 = (int8x16_t)vaddq_s16(v360, v452);
  int8x16_t v396 = (int8x16_t)vaddq_s16(v362, v452);
  int8x16_t v397 = (int8x16_t)vaddq_s16(v363, v452);
  int8x16_t v398 = (int8x16_t)vaddq_s16(v368, v452);
  int8x16_t v399 = (int8x16_t)vaddq_s16(v369, v452);
  int8x16_t v400 = (int8x16_t)vaddq_s16(v370, v452);
  int8x16_t v401 = (int8x16_t)vaddq_s16(v371, v452);
  v402.i64[0] = 0x10001000100010;
  v402.i64[1] = 0x10001000100010;
  int8x16_t v403 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v21, v402));
  int32x4_t v404 = (int16x8_t *)(a1 + a2);
  *(int16x8_t *)a1 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v386, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v386);
  *(int16x8_t *)(a1 + 16) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v388, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v388);
  *(int16x8_t *)(a1 + 32) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v394, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v394);
  *(int16x8_t *)(a1 + 48) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v396, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v396);
  int32x4_t v405 = (int16x8_t *)(a1 + 2 * a2);
  *int32x4_t v404 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v387, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v387);
  v404[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v389, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v389);
  v404[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v395, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v395);
  v404[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v397, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v397);
  *int32x4_t v405 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v390, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v390);
  v405[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v392, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v392);
  v405[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v398, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v398);
  v405[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v400, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v400);
  int32x4_t v406 = (int16x8_t *)((char *)v405 + a2);
  *int32x4_t v406 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v391, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v391);
  v406[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v393, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v393);
  v406[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v399, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v399);
  v406[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v401, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v401);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  uint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  unint64_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v16, v13 + 64, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *unint64_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  int8x16_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *int8x16_t v21 = 0;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v25, v13 + v20 + 64, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int8x16_t v25 = 0;
LABEL_35:
  unint64_t v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *unint64_t v26 = 0;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v30, v13 + 8 * a2 + 64, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int64x2_t v30 = 0;
LABEL_49:
  int64x2_t v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    BOOL v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int64x2_t v31 = 0;
    BOOL v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *BOOL v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v35, v13 + 12 * a2 + 64, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(uint64_t a1, unint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1, 128, a2, *a3, a4);
  unint64_t v8 = v7
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 64, 128, v7, a3[1], a4);
  unint64_t v9 = v8
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 512, 128, v8, a3[2], a4);
  unint64_t v10 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 576, 128, v9, a3[3], a4);
  unint64_t v11 = v10
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 1024, 128, v10, a3[4], a4);
  unint64_t v12 = v11
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 1088, 128, v11, a3[5], a4);
  unint64_t v13 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 1536, 128, v12, a3[6], a4);
  unsigned int v14 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 1600, 128, v13, v14, a4);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  unint64_t v7 = (_OWORD *)(a3 + 2 * a4);
  int16x8_t v8 = *(int16x8_t *)(a3 + 48);
  int16x8_t v9 = *(int16x8_t *)(a3 + 32);
  int16x8_t v10 = *(int16x8_t *)(a3 + 16);
  int16x8_t v11 = *(int16x8_t *)(a3 + a4);
  int16x8_t v12 = *(int16x8_t *)(a3 + a4 + 32);
  int16x8_t v13 = *(int16x8_t *)(a3 + a4 + 48);
  int8x16_t v15 = *(int8x16_t *)v7;
  int8x16_t v16 = *((int8x16_t *)v7 + 1);
  int16x8_t v17 = *((int16x8_t *)v7 + 2);
  int16x8_t v18 = *((int16x8_t *)v7 + 3);
  unsigned int v14 = (int16x8_t *)((char *)v7 + a4);
  int16x8_t v444 = *v14;
  int16x8_t v446 = v14[1];
  int16x8_t v447 = v14[2];
  int16x8_t v448 = v14[3];
  int16x8_t v19 = (int16x8_t)vdupq_lane_s64(*(void *)a3, 0);
  int16x8_t v441 = *(int16x8_t *)a3;
  int16x8_t v442 = v11;
  int8x16_t v443 = *(int8x16_t *)(a3 + a4 + 16);
  int8x16_t v449 = (int8x16_t)vsubq_s16(*(int16x8_t *)a3, v19);
  int8x16_t v450 = (int8x16_t)vsubq_s16(v11, v19);
  int8x16_t v451 = (int8x16_t)vsubq_s16(v10, v19);
  int8x16_t v452 = (int8x16_t)vsubq_s16((int16x8_t)v443, v19);
  int16x8_t v20 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v21 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v449, (int16x8_t)v450), (int16x8_t)v451), (int16x8_t)v452), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v22 = vpmaxq_s16(v20, v20);
  int16x8_t v23 = vpminq_s16(v21, v21);
  int16x8_t v24 = vzip1q_s16(v22, v23);
  v25.i64[0] = 0x10001000100010;
  v25.i64[1] = 0x10001000100010;
  int16x8_t v26 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v24)), (int8x16_t)vceqzq_s16(v24));
  int8x16_t v453 = (int8x16_t)vsubq_s16((int16x8_t)v15, v19);
  int8x16_t v454 = (int8x16_t)vsubq_s16(v444, v19);
  int16x8_t v430 = (int16x8_t)v15;
  int16x8_t v432 = (int16x8_t)v16;
  int16x8_t v27 = vsubq_s16((int16x8_t)v16, v19);
  int16x8_t v28 = vminq_s16(vminq_s16((int16x8_t)v453, (int16x8_t)v454), v27);
  int8x16_t v455 = (int8x16_t)v27;
  int8x16_t v456 = (int8x16_t)vsubq_s16(v446, v19);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v22, (int16x8_t)v15);
  v15.i64[0] = 0x8000800080008000;
  v15.i64[1] = 0x8000800080008000;
  int16x8_t v30 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v453, (int16x8_t)v454), v27), (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v31 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v28, (int16x8_t)v456), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v32 = vpmaxq_s16(v30, v30);
  int16x8_t v33 = vpminq_s16(v31, v31);
  int16x8_t v34 = vmaxq_s16(v29, v32);
  int16x8_t v35 = vminq_s16(vminq_s16(v23, (int16x8_t)v15), v33);
  int16x8_t v36 = vzip1q_s16(v32, v33);
  int16x8_t v37 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v36)), (int8x16_t)vceqzq_s16(v36));
  int8x16_t v457 = (int8x16_t)vsubq_s16(v9, v19);
  int8x16_t v458 = (int8x16_t)vsubq_s16(v12, v19);
  int16x8_t v435 = v9;
  int16x8_t v437 = v12;
  int16x8_t v438 = v8;
  int16x8_t v38 = vsubq_s16(v8, v19);
  int16x8_t v39 = vminq_s16(vminq_s16((int16x8_t)v457, (int16x8_t)v458), v38);
  int16x8_t v434 = v13;
  int8x16_t v459 = (int8x16_t)v38;
  int8x16_t v460 = (int8x16_t)vsubq_s16(v13, v19);
  int16x8_t v40 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v457, (int16x8_t)v458), v38), (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v41 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(v39, (int16x8_t)v460), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v42 = vpmaxq_s16(v40, v40);
  int16x8_t v43 = vpminq_s16(v41, v41);
  int16x8_t v44 = vmaxq_s16(v34, v42);
  int16x8_t v45 = vminq_s16(v35, v43);
  int16x8_t v46 = vzip1q_s16(v42, v43);
  int16x8_t v47 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v46)), (int8x16_t)vceqzq_s16(v46));
  int8x16_t v461 = (int8x16_t)vsubq_s16(v17, v19);
  int8x16_t v462 = (int8x16_t)vsubq_s16(v447, v19);
  int8x16_t v465 = (int8x16_t)v19;
  int16x8_t v439 = v17;
  int16x8_t v440 = v18;
  int8x16_t v463 = (int8x16_t)vsubq_s16(v18, v19);
  int8x16_t v464 = (int8x16_t)vsubq_s16(v448, v19);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v461, (int16x8_t)v462), (int16x8_t)v463), (int16x8_t)v464), (int8x16_t)xmmword_242EA77B0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vmaxq_s16(v44, v50);
  int16x8_t v53 = vminq_s16(v45, v51);
  int16x8_t v54 = vzip1q_s16(v50, v51);
  int16x8_t v55 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v54)), (int8x16_t)vceqzq_s16(v54));
  int16x8_t v56 = vpmaxq_s16(v26, v26);
  int16x8_t v57 = vpmaxq_s16(v37, v37);
  int16x8_t v58 = vpmaxq_s16(v47, v47);
  int16x8_t v59 = vpmaxq_s16(v55, v55);
  int8x16_t v60 = (int8x16_t)vmaxq_s16(vmaxq_s16(v56, v57), vmaxq_s16(v58, v59));
  int16x8_t v61 = vclzq_s16(vsubq_s16(v52, v53));
  v9.i64[0] = 0xF000F000F000FLL;
  v9.i64[1] = 0xF000F000F000FLL;
  v62.i64[0] = -1;
  v62.i64[1] = -1;
  int16x8_t v63 = vshlq_s16(v62, vsubq_s16(v9, v61));
  int8x16_t v472 = (int8x16_t)v53;
  int8x16_t v473 = (int8x16_t)v52;
  int8x16_t v64 = (int8x16_t)vsubq_s16((int16x8_t)v25, v61);
  int8x16_t v65 = (int8x16_t)vcgtq_s16((int16x8_t)v60, (int16x8_t)v64);
  int16x8_t v66 = (int16x8_t)vbslq_s8(v65, v64, v60);
  int8x16_t v474 = vandq_s8((int8x16_t)vsubq_s16(v63, v53), v65);
  v15.i64[0] = 0x8000800080008;
  v15.i64[1] = 0x8000800080008;
  int8x16_t v67 = vorrq_s8((int8x16_t)0, vandq_s8(v65, v15));
  v68.i64[0] = 0x3000300030003;
  v68.i64[1] = 0x3000300030003;
  int16x8_t v69 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v57), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v70 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v58), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v468 = vsubq_s16(v66, v69);
  int16x8_t v469 = vsubq_s16(v66, v70);
  int16x8_t v71 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v59), (int16x8_t)v68), (int16x8_t)0);
  int16x8_t v470 = vsubq_s16(v66, v71);
  int8x16_t v471 = (int8x16_t)v66;
  int16x8_t v72 = vmaxq_s16(vminq_s16(vsubq_s16(v66, v56), (int16x8_t)v68), (int16x8_t)0);
  v16.i64[0] = 0x4000400040004;
  v16.i64[1] = 0x4000400040004;
  int8x16_t v73 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16(v66), v68), v67), vbicq_s8(v16, (int8x16_t)vceqq_s16(vaddq_s16(v71, v70), vnegq_s16(vaddq_s16(v72, v69)))));
  int8x16_t v466 = v73;
  int16x8_t v467 = vsubq_s16(v66, v72);
  if (vmaxvq_s16(v66))
  {
    int16x8_t v74 = vsubq_s16((int16x8_t)v449, (int16x8_t)vqtbl1q_s8(v449, (int8x16_t)xmmword_242EA77A0));
    v75.i64[0] = 0x8000800080008000;
    v75.i64[1] = 0x8000800080008000;
    v76.i64[0] = 0x8000800080008000;
    v76.i64[1] = 0x8000800080008000;
    int16x8_t v77 = vsubq_s16((int16x8_t)v450, (int16x8_t)vqtbl1q_s8(v450, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v78 = vsubq_s16((int16x8_t)v451, (int16x8_t)vqtbl1q_s8(v451, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v79 = vsubq_s16((int16x8_t)v452, (int16x8_t)vqtbl1q_s8(v452, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v427 = v67;
    int8x16_t v80 = (int8x16_t)vsubq_s16((int16x8_t)v454, (int16x8_t)vqtbl1q_s8(v454, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v81 = (int8x16_t)vsubq_s16((int16x8_t)v456, (int16x8_t)vqtbl1q_s8(v456, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v82 = (int8x16_t)vsubq_s16((int16x8_t)v457, (int16x8_t)vqtbl1q_s8(v457, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v83 = (int8x16_t)vsubq_s16((int16x8_t)v458, (int16x8_t)vqtbl1q_s8(v458, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v84 = (int8x16_t)vsubq_s16((int16x8_t)v459, (int16x8_t)vqtbl1q_s8(v459, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v460, (int16x8_t)vqtbl1q_s8(v460, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v86 = vsubq_s16((int16x8_t)v462, (int16x8_t)vqtbl1q_s8(v462, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v87 = (int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v74, v77), v78), v79);
    int8x16_t v421 = (int8x16_t)v74;
    int8x16_t v422 = (int8x16_t)v77;
    int16x8_t v88 = vminq_s16(v74, v77);
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v463, (int16x8_t)vqtbl1q_s8(v463, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v455, (int16x8_t)vqtbl1q_s8(v455, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v453, (int16x8_t)vqtbl1q_s8(v453, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v461, (int16x8_t)vqtbl1q_s8(v461, (int8x16_t)xmmword_242EA77A0));
    int8x16_t v423 = (int8x16_t)v79;
    int8x16_t v425 = (int8x16_t)v78;
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8(v87, (int8x16_t)xmmword_242EA77B0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(v88, v78), v79), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vmaxq_s16(v95, v75);
    int16x8_t v98 = vminq_s16(v96, v76);
    int16x8_t v99 = vzip1q_s16(v95, v96);
    int16x8_t v100 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v99)), (int8x16_t)vceqzq_s16(v99));
    int16x8_t v101 = vpmaxq_s16(v100, v100);
    int16x8_t v102 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v103 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v91, (int16x8_t)v80), (int16x8_t)v90), (int16x8_t)v81), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v104 = vpmaxq_s16(v102, v102);
    int16x8_t v105 = vpminq_s16(v103, v103);
    int16x8_t v106 = vmaxq_s16(v97, v104);
    int16x8_t v107 = vminq_s16(v98, v105);
    int16x8_t v108 = vzip1q_s16(v104, v105);
    int16x8_t v109 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v108)), (int8x16_t)vceqzq_s16(v108));
    int16x8_t v110 = vpmaxq_s16(v109, v109);
    int16x8_t v111 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v112 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v82, (int16x8_t)v83), (int16x8_t)v84), (int16x8_t)v85), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v113 = vpmaxq_s16(v111, v111);
    int16x8_t v114 = vpminq_s16(v112, v112);
    int16x8_t v115 = vmaxq_s16(v106, v113);
    int16x8_t v116 = vminq_s16(v107, v114);
    int16x8_t v117 = vzip1q_s16(v113, v114);
    int16x8_t v118 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v117)), (int8x16_t)vceqzq_s16(v117));
    int8x16_t v119 = (int8x16_t)vpmaxq_s16(v118, v118);
    int8x16_t v415 = (int8x16_t)vsubq_s16((int16x8_t)v464, (int16x8_t)vqtbl1q_s8(v464, (int8x16_t)xmmword_242EA77A0));
    int16x8_t v120 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v121 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v92, v86), (int16x8_t)v89), (int16x8_t)v415), (int8x16_t)xmmword_242EA77B0);
    int16x8_t v122 = vpmaxq_s16(v120, v120);
    int16x8_t v123 = vpminq_s16(v121, v121);
    int16x8_t v124 = vmaxq_s16(v115, v122);
    int16x8_t v125 = vminq_s16(v116, v123);
    int16x8_t v126 = vzip1q_s16(v122, v123);
    int16x8_t v127 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v25, vclsq_s16(v126)), (int8x16_t)vceqzq_s16(v126));
    int16x8_t v128 = vpmaxq_s16(v127, v127);
    int8x16_t v129 = (int8x16_t)vmaxq_s16(vmaxq_s16(v101, v110), vmaxq_s16((int16x8_t)v119, v128));
    int8x16_t v419 = (int8x16_t)v86;
    int8x16_t v420 = (int8x16_t)v124;
    int8x16_t v130 = (int8x16_t)v125;
    int16x8_t v131 = vclzq_s16(vsubq_s16(v124, v125));
    int8x16_t v132 = (int8x16_t)vsubq_s16((int16x8_t)v25, v131);
    int8x16_t v133 = (int8x16_t)vcgtq_s16((int16x8_t)v129, (int16x8_t)v132);
    int8x16_t v134 = vbslq_s8(v133, v132, v129);
    int16x8_t v135 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v101), (int16x8_t)v68), (int16x8_t)0);
    int8x16_t v136 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v110), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v137 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, (int16x8_t)v119), (int16x8_t)v68), (int16x8_t)0);
    int16x8_t v138 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v134, v128), (int16x8_t)v68), (int16x8_t)0);
    v119.i64[0] = 0x4000400040004;
    v119.i64[1] = 0x4000400040004;
    int8x16_t v139 = vbicq_s8(v119, (int8x16_t)vceqq_s16(vaddq_s16(v138, v137), vnegq_s16(vaddq_s16(v135, (int16x8_t)v136))));
    v119.i64[0] = 0x18001800180018;
    v119.i64[1] = 0x18001800180018;
    int8x16_t v140 = vbslq_s8(v133, v119, v25);
    int8x16_t v141 = (int8x16_t)vsubq_s16((int16x8_t)v134, v135);
    int8x16_t v416 = (int8x16_t)vsubq_s16((int16x8_t)v134, (int16x8_t)v136);
    int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v134, v137);
    int8x16_t v418 = (int8x16_t)vsubq_s16((int16x8_t)v134, v138);
    v135.i64[0] = 0x7000700070007;
    v135.i64[1] = 0x7000700070007;
    v136.i64[0] = 0x8000800080008;
    v136.i64[1] = 0x8000800080008;
    int16x8_t v142 = (int16x8_t)vandq_s8(v427, v136);
    int16x8_t v143 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v136);
    int16x8_t v144 = (int16x8_t)vandq_s8(v73, v68);
    v145.i64[0] = 0x2000200020002;
    v145.i64[1] = 0x2000200020002;
    int16x8_t v146 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v144, v145), v25);
    int8x16_t v147 = (int8x16_t)vceqzq_s16(v142);
    int8x16_t v148 = v471;
    int16x8_t v149 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v147), v143), v146);
    int16x8_t v150 = v467;
    int16x8_t v151 = v468;
    int16x8_t v153 = v469;
    int16x8_t v152 = v470;
    int8x16_t v154 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(vmlaq_s16(v149, v467, v135), vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v134, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v140 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v139, (int16x8_t)v139)), (int16x8_t)v141, v135), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v417, (int16x8_t)v416), (int16x8_t)v418), 3uLL))).i64[0], 0);
    int v155 = (unsigned __int16)vaddvq_s16((int16x8_t)v154);
    BOOL v157 = a5 < 4 || a6 < 2;
    if (v155)
    {
      v158.i64[0] = 0x3000300030003;
      v158.i64[1] = 0x3000300030003;
      int8x16_t v159 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v134), v158), v140), v139);
      v160.i64[0] = 0xF000F000F000FLL;
      v160.i64[1] = 0xF000F000F000FLL;
      int8x16_t v449 = vbslq_s8(v154, v421, v449);
      int8x16_t v450 = vbslq_s8(v154, v422, v450);
      v161.i64[0] = -1;
      v161.i64[1] = -1;
      int8x16_t v451 = vbslq_s8(v154, v425, v451);
      int8x16_t v452 = vbslq_s8(v154, v423, v452);
      int8x16_t v453 = vbslq_s8(v154, v91, v453);
      int8x16_t v454 = vbslq_s8(v154, v80, v454);
      int8x16_t v455 = vbslq_s8(v154, v90, v455);
      int8x16_t v456 = vbslq_s8(v154, v81, v456);
      int8x16_t v457 = vbslq_s8(v154, v82, v457);
      int8x16_t v458 = vbslq_s8(v154, v83, v458);
      int8x16_t v459 = vbslq_s8(v154, v84, v459);
      int8x16_t v460 = vbslq_s8(v154, v85, v460);
      int8x16_t v461 = vbslq_s8(v154, v92, v461);
      int8x16_t v462 = vbslq_s8(v154, v419, v462);
      int8x16_t v463 = vbslq_s8(v154, v89, v463);
      int8x16_t v464 = vbslq_s8(v154, v415, v464);
      int16x8_t v150 = (int16x8_t)vbslq_s8(v154, v141, (int8x16_t)v467);
      int16x8_t v151 = (int16x8_t)vbslq_s8(v154, v416, (int8x16_t)v468);
      int16x8_t v467 = v150;
      int16x8_t v468 = v151;
      int16x8_t v153 = (int16x8_t)vbslq_s8(v154, v417, (int8x16_t)v469);
      int16x8_t v152 = (int16x8_t)vbslq_s8(v154, v418, (int8x16_t)v470);
      int16x8_t v469 = v153;
      int16x8_t v470 = v152;
      int8x16_t v473 = vbslq_s8(v154, v420, v473);
      int8x16_t v474 = vbslq_s8(v154, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v161, vsubq_s16(v160, v131)), (int16x8_t)v130), v133), v474);
      int8x16_t v148 = vbslq_s8(v154, v134, v471);
      int8x16_t v471 = v148;
      int8x16_t v472 = vbslq_s8(v154, v130, v472);
      int8x16_t v73 = vbslq_s8(v154, v159, v466);
      int8x16_t v465 = vbslq_s8(v154, (int8x16_t)vsubq_s16((int16x8_t)v465, (int16x8_t)vqtbl1q_s8(v465, (int8x16_t)xmmword_242EA77A0)), v465);
      int8x16_t v466 = v73;
    }
    int16x8_t v162 = v441;
    int16x8_t v163 = v442;
    int16x8_t v164 = v10;
    int8x16_t v165 = v443;
    if (!v157)
    {
      int16x8_t v166 = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA77C0);
      int8x16_t v426 = (int8x16_t)vsubq_s16(v10, v166);
      int16x8_t v428 = vsubq_s16(v441, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7710));
      int16x8_t v167 = vsubq_s16((int16x8_t)v443, v166);
      v475.val[0] = (int8x16_t)v430;
      v475.val[1] = (int8x16_t)v444;
      v475.val[2] = (int8x16_t)v432;
      v475.val[3].i64[0] = v446.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int8x16_t v168 = (int8x16_t)vsubq_s16(v430, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v424 = (int8x16_t)vsubq_s16(v444, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7750));
      int16x8_t v169 = vsubq_s16(v432, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77C0));
      int16x8_t v170 = vsubq_s16(v446, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7760));
      v475.val[0] = (int8x16_t)v435;
      v475.val[1] = (int8x16_t)v437;
      v475.val[2] = (int8x16_t)v438;
      v475.val[3].i64[0] = v434.i64[0];
      v475.val[3].i64[1] = v443.i64[1];
      int16x8_t v171 = (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7720);
      int16x8_t v172 = vsubq_s16(v435, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77D0));
      int16x8_t v173 = vsubq_s16(v437, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA77E0));
      int8x16_t v174 = (int8x16_t)vsubq_s16(v438, (int16x8_t)vqtbl4q_s8(v475, (int8x16_t)xmmword_242EA7710));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v442, (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)v162.i8, (int8x16_t)xmmword_242EA7720));
      v475.val[0] = (int8x16_t)vsubq_s16(v434, v171);
      int8x16_t v176 = (int8x16_t)v169;
      v476.val[0] = (int8x16_t)v439;
      v476.val[1] = (int8x16_t)v447;
      v476.val[2] = (int8x16_t)v440;
      v476.val[3].i64[0] = v448.i64[0];
      v476.val[3].i64[1] = v443.i64[1];
      int16x8_t v177 = (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7720);
      int8x16_t v178 = (int8x16_t)vsubq_s16(v439, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA77D0));
      int8x16_t v179 = (int8x16_t)vsubq_s16(v447, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7780));
      v476.val[2] = (int8x16_t)vsubq_s16(v440, (int16x8_t)vqtbl4q_s8(v476, (int8x16_t)xmmword_242EA7710));
      int8x16_t v180 = (int8x16_t)vsubq_s16(v448, v177);
      v181.i64[1] = v428.i64[1];
      v181.i64[0] = v167.i64[1];
      v167.i64[1] = v428.i64[0];
      int8x16_t v436 = (int8x16_t)v167;
      int16x8_t v182 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v183 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v181, (int16x8_t)v175), (int16x8_t)v426), v167), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v184 = vpmaxq_s16(v182, v182);
      int16x8_t v185 = vpminq_s16(v183, v183);
      v186.i64[0] = 0x8000800080008000;
      v186.i64[1] = 0x8000800080008000;
      int16x8_t v187 = vmaxq_s16(v184, v186);
      v188.i64[0] = 0x8000800080008000;
      v188.i64[1] = 0x8000800080008000;
      int16x8_t v189 = vminq_s16(v185, v188);
      int16x8_t v190 = vzip1q_s16(v184, v185);
      v476.val[1].i64[0] = 0x10001000100010;
      v476.val[1].i64[1] = 0x10001000100010;
      int16x8_t v191 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v190)), (int8x16_t)vceqzq_s16(v190));
      int16x8_t v192 = vpmaxq_s16(v191, v191);
      int8x16_t v445 = (int8x16_t)v170;
      int16x8_t v193 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v194 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v168, (int16x8_t)v424), v169), v170), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v195 = vpmaxq_s16(v193, v193);
      int16x8_t v196 = vpminq_s16(v194, v194);
      int16x8_t v197 = vmaxq_s16(v187, v195);
      int16x8_t v198 = vminq_s16(v189, v196);
      int16x8_t v199 = vzip1q_s16(v195, v196);
      int16x8_t v200 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v199)), (int8x16_t)vceqzq_s16(v199));
      int16x8_t v201 = vpmaxq_s16(v200, v200);
      int8x16_t v433 = (int8x16_t)v173;
      int8x16_t v202 = (int8x16_t)v172;
      int8x16_t v429 = v476.val[2];
      int8x16_t v431 = v475.val[0];
      int16x8_t v203 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v204 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16(v172, v173), (int16x8_t)v174), (int16x8_t)v475.val[0]), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v205 = vpmaxq_s16(v203, v203);
      int16x8_t v206 = vpminq_s16(v204, v204);
      int16x8_t v207 = vmaxq_s16(v197, v205);
      int16x8_t v208 = vminq_s16(v198, v206);
      int16x8_t v209 = vzip1q_s16(v205, v206);
      int16x8_t v210 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v209)), (int8x16_t)vceqzq_s16(v209));
      int16x8_t v211 = vpmaxq_s16(v210, v210);
      int16x8_t v212 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16(vmaxq_s16(vmaxq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v213 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16(vminq_s16(vminq_s16((int16x8_t)v178, (int16x8_t)v179), (int16x8_t)v476.val[2]), (int16x8_t)v180), (int8x16_t)xmmword_242EA77B0);
      int16x8_t v214 = vpmaxq_s16(v212, v212);
      v476.val[0] = (int8x16_t)vpminq_s16(v213, v213);
      int16x8_t v215 = vmaxq_s16(v207, v214);
      int8x16_t v216 = (int8x16_t)vminq_s16(v208, (int16x8_t)v476.val[0]);
      int16x8_t v217 = vzip1q_s16(v214, (int16x8_t)v476.val[0]);
      int16x8_t v218 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v476.val[1], vclsq_s16(v217)), (int8x16_t)vceqzq_s16(v217));
      v476.val[0] = (int8x16_t)vpmaxq_s16(v218, v218);
      int8x16_t v219 = (int8x16_t)vmaxq_s16(vmaxq_s16(v192, v201), vmaxq_s16(v211, (int16x8_t)v476.val[0]));
      int16x8_t v220 = vclzq_s16(vsubq_s16(v215, (int16x8_t)v216));
      v476.val[3] = (int8x16_t)vsubq_s16((int16x8_t)v476.val[1], v220);
      int8x16_t v221 = (int8x16_t)vcgtq_s16((int16x8_t)v219, (int16x8_t)v476.val[3]);
      int8x16_t v222 = vbslq_s8(v221, v476.val[3], v219);
      v223.i64[0] = 0x3000300030003;
      v223.i64[1] = 0x3000300030003;
      int16x8_t v224 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v192), v223), (int16x8_t)0);
      int8x16_t v225 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v201), v223), (int16x8_t)0);
      int16x8_t v226 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, v211), v223), (int16x8_t)0);
      int16x8_t v227 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v222, (int16x8_t)v476.val[0]), v223), (int16x8_t)0);
      int8x16_t v228 = (int8x16_t)vsubq_s16((int16x8_t)v222, v224);
      int16x8_t v229 = vsubq_s16((int16x8_t)v222, (int16x8_t)v225);
      int8x16_t v230 = (int8x16_t)vsubq_s16((int16x8_t)v222, v226);
      int8x16_t v231 = (int8x16_t)vsubq_s16((int16x8_t)v222, v227);
      int8x16_t v232 = (int8x16_t)vceqq_s16(vaddq_s16(v227, v226), vnegq_s16(vaddq_s16(v224, (int16x8_t)v225)));
      v225.i64[0] = 0x4000400040004;
      v225.i64[1] = 0x4000400040004;
      int8x16_t v233 = vbicq_s8(v225, v232);
      v169.i64[0] = 0x7000700070007;
      v169.i64[1] = 0x7000700070007;
      v476.val[3] = (int8x16_t)vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v476.val[3], v221), vaddq_s16((int16x8_t)v233, (int16x8_t)v233)), (int16x8_t)v228, v169), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v230, v229), (int16x8_t)v231), 3uLL));
      int8x16_t v73 = v466;
      int16x8_t v150 = v467;
      int16x8_t v234 = (int16x8_t)vandq_s8(v466, (int8x16_t)v223);
      v235.i64[0] = 0x2000200020002;
      v235.i64[1] = 0x2000200020002;
      int16x8_t v236 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v234, (int16x8_t)v235), v476.val[1]);
      v476.val[1].i64[0] = 0x8000800080008;
      v476.val[1].i64[1] = 0x8000800080008;
      int16x8_t v237 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v476.val[1]);
      v475.val[0] = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v466, v476.val[1]));
      int16x8_t v152 = v470;
      int8x16_t v148 = v471;
      int16x8_t v238 = vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v471, v475.val[0]), v237), v236), v467, v169);
      int16x8_t v151 = v468;
      int16x8_t v153 = v469;
      int8x16_t v239 = (int8x16_t)vdupq_lane_s64(vcgtq_s16(vaddq_s16(v238, vshlq_n_s16(vaddq_s16(vaddq_s16(v469, v468), v470), 3uLL)), (int16x8_t)v476.val[3]).i64[0], 0);
      if (vaddvq_s16((int16x8_t)v239))
      {
        int8x16_t v240 = (int8x16_t)v229;
        int8x16_t v241 = v202;
        v242.i64[0] = 0x9000900090009;
        v242.i64[1] = 0x9000900090009;
        int8x16_t v243 = (int8x16_t)v215;
        int8x16_t v244 = vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v222), v235), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v221, v242), (int16x8_t)vmvnq_s8(v221)));
        v242.i64[0] = -1;
        v242.i64[1] = -1;
        v245.i64[0] = 0xF000F000F000FLL;
        v245.i64[1] = 0xF000F000F000FLL;
        int8x16_t v246 = vbslq_s8(v239, v243, v473);
        int16x8_t v150 = (int16x8_t)vbslq_s8(v239, v228, (int8x16_t)v467);
        int16x8_t v151 = (int16x8_t)vbslq_s8(v239, v240, (int8x16_t)v468);
        int16x8_t v153 = (int16x8_t)vbslq_s8(v239, v230, (int8x16_t)v469);
        int16x8_t v152 = (int16x8_t)vbslq_s8(v239, v231, (int8x16_t)v470);
        int8x16_t v148 = vbslq_s8(v239, v222, v471);
        int8x16_t v73 = vbslq_s8(v239, vorrq_s8(v244, v233), v466);
        int8x16_t v464 = vbslq_s8(v239, v180, v464);
        int8x16_t v465 = vbslq_s8(v239, vextq_s8(v443, v443, 8uLL), v465);
        int8x16_t v449 = vbslq_s8(v239, v181, v449);
        int8x16_t v450 = vbslq_s8(v239, v175, v450);
        int8x16_t v451 = vbslq_s8(v239, v426, v451);
        int8x16_t v452 = vbslq_s8(v239, v436, v452);
        int8x16_t v453 = vbslq_s8(v239, v168, v453);
        int8x16_t v454 = vbslq_s8(v239, v424, v454);
        int8x16_t v455 = vbslq_s8(v239, v176, v455);
        int8x16_t v456 = vbslq_s8(v239, v445, v456);
        int8x16_t v457 = vbslq_s8(v239, v241, v457);
        int8x16_t v458 = vbslq_s8(v239, v433, v458);
        int8x16_t v459 = vbslq_s8(v239, v174, v459);
        int8x16_t v460 = vbslq_s8(v239, v431, v460);
        int8x16_t v461 = vbslq_s8(v239, v178, v461);
        int8x16_t v462 = vbslq_s8(v239, v179, v462);
        int8x16_t v463 = vbslq_s8(v239, v429, v463);
        int8x16_t v472 = vbslq_s8(v239, v216, v472);
        int8x16_t v473 = v246;
        int8x16_t v474 = vbslq_s8(v239, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v242, vsubq_s16(v245, v220)), (int16x8_t)v216), v221), v474);
        int16x8_t v467 = v150;
        int16x8_t v468 = v151;
        int16x8_t v469 = v153;
        int16x8_t v470 = v152;
        int8x16_t v471 = v148;
        int8x16_t v466 = v73;
      }
    }
    int16x8_t v247 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v150));
    int8x16_t v449 = (int8x16_t)vaddq_s16(v247, (int16x8_t)v449);
    int8x16_t v450 = (int8x16_t)vaddq_s16((int16x8_t)v450, v247);
    int8x16_t v451 = (int8x16_t)vaddq_s16((int16x8_t)v451, v247);
    int8x16_t v452 = (int8x16_t)vaddq_s16((int16x8_t)v452, v247);
    int16x8_t v248 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v151));
    int8x16_t v453 = (int8x16_t)vaddq_s16((int16x8_t)v453, v248);
    int8x16_t v454 = (int8x16_t)vaddq_s16((int16x8_t)v454, v248);
    int8x16_t v455 = (int8x16_t)vaddq_s16((int16x8_t)v455, v248);
    int8x16_t v456 = (int8x16_t)vaddq_s16((int16x8_t)v456, v248);
    int16x8_t v249 = (int16x8_t)vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v153));
    int8x16_t v457 = (int8x16_t)vaddq_s16((int16x8_t)v457, v249);
    int8x16_t v458 = (int8x16_t)vaddq_s16((int16x8_t)v458, v249);
    int8x16_t v459 = (int8x16_t)vaddq_s16((int16x8_t)v459, v249);
    int8x16_t v460 = (int8x16_t)vaddq_s16((int16x8_t)v460, v249);
    int8x16_t v250 = vandq_s8(v474, (int8x16_t)vceqq_s16((int16x8_t)v148, v152));
    int8x16_t v461 = (int8x16_t)vaddq_s16((int16x8_t)v461, (int16x8_t)v250);
    int8x16_t v462 = (int8x16_t)vaddq_s16((int16x8_t)v462, (int16x8_t)v250);
    int8x16_t v463 = (int8x16_t)vaddq_s16((int16x8_t)v463, (int16x8_t)v250);
    int8x16_t v464 = (int8x16_t)vaddq_s16((int16x8_t)v464, (int16x8_t)v250);
    v250.i64[0] = 0x8000800080008;
    v250.i64[1] = 0x8000800080008;
    v251.i64[0] = 0x3000300030003;
    v251.i64[1] = 0x3000300030003;
    v252.i64[0] = 0x2000200020002;
    v252.i64[1] = 0x2000200020002;
    int8x16_t v253 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v73, v251), v252);
    v252.i64[0] = 0x10001000100010;
    v252.i64[1] = 0x10001000100010;
    int16x8_t v254 = (int16x8_t)vandq_s8(v253, (int8x16_t)v252);
    v252.i64[0] = 0x7000700070007;
    v252.i64[1] = 0x7000700070007;
    int16x8_t v255 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v148, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v73, v250))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v73, (int16x8_t)v73), v250)), v254), v150, v252), vshlq_n_s16(vaddq_s16(v153, vaddq_s16(v151, v152)), 3uLL));
    int16x8_t v256 = vpaddq_s16(v255, v255);
    if ((unint64_t)(vpaddq_s16(v256, v256).i16[0] - 925) < 0xFFFFFFFFFFFFFBF8)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 128;
    }
    else
    {
      int32x4_t v257 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v258 = 8 * (a1 & 7);
      if (v258) {
        uint64_t v259 = *v257 & ~(-1 << v258);
      }
      else {
        uint64_t v259 = 0;
      }
      *a2 = 0;
      uint64_t v261 = ((v148.u16[0] << 20) - 0x100000) & 0xF00000;
      v262.i32[0] = v73.u16[1];
      v262.i32[1] = v73.u16[2];
      int8x8_t v263 = vand_s8((int8x8_t)vshl_u32(v262, (uint32x2_t)0xA00000005), (int8x8_t)0x7C00000003E0);
      __int32 v264 = v263.i32[1];
      __int32 v265 = v263.i32[0] | v73.i8[0] & 0x1F;
      if (!v148.i16[0]) {
        uint64_t v261 = 0;
      }
      unint64_t v266 = (unint64_t)((v148.i8[4] - 1) & 0xF) << 28;
      if (!v148.i16[2]) {
        unint64_t v266 = 0;
      }
      v267.i32[0] = v148.u16[3];
      v267.i32[1] = v148.u16[1];
      int32x2_t v268 = vceqz_s32((int32x2_t)vand_s8(v267, (int8x8_t)0xFFFF0000FFFFLL));
      v269.i64[0] = v268.i32[0];
      v269.i64[1] = v268.i32[1];
      int8x16_t v270 = (int8x16_t)v269;
      v271.i64[0] = -1;
      v271.i64[1] = -1;
      int8x8_t v272 = vand_s8((int8x8_t)vadd_s32((int32x2_t)v267, (int32x2_t)-1), (int8x8_t)0xF0000000FLL);
      v269.i64[0] = v272.u32[0];
      v269.i64[1] = v272.u32[1];
      int8x16_t v273 = vbicq_s8((int8x16_t)vshlq_u64(v269, (uint64x2_t)xmmword_242EA77F0), v270);
      v270.i64[0] = v266;
      v270.i64[1] = v265 | v264 | ((unint64_t)(v73.i8[6] & 0x1F) << 15) | v261;
      int8x16_t v274 = vorrq_s8(v270, v273);
      uint64_t v275 = v465.i64[0];
      unint64_t v276 = vorrq_s8(v274, (int8x16_t)vdupq_laneq_s64((int64x2_t)v274, 1)).u64[0];
      unint64_t v277 = (v276 << v258) | v259;
      if (v258 >= 0x1C)
      {
        void *v257 = v277;
        unint64_t v277 = v276 >> (-8 * (a1 & 7u));
      }
      uint64_t v278 = v275;
      v279.i64[0] = WORD2(v275);
      v279.i64[1] = HIWORD(v275);
      v280.i64[0] = 0xFFFFLL;
      v280.i64[1] = 0xFFFFLL;
      uint64x2_t v281 = vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)v279, v280), (uint64x2_t)xmmword_242EA7800);
      unint64_t v282 = v278 | v281.i64[0] | v281.i64[1];
      char v283 = (v258 + 36) & 0x3C;
      *(void *)((char *)v257 + (((v258 + 36) >> 3) & 8)) = v277 | (v282 << v283);
      unint64_t v284 = v258 + 100;
      int8x16_t v285 = (int8x16_t)vsubq_s16((int16x8_t)v471, v467);
      int8x16_t v286 = (int8x16_t)vsubq_s16((int16x8_t)v471, v468);
      int8x16_t v287 = (int8x16_t)vsubq_s16((int16x8_t)v471, v469);
      int8x16_t v288 = (int8x16_t)vsubq_s16((int16x8_t)v471, v470);
      *(uint8x8_t *)v285.i8 = vqmovn_u16((uint16x8_t)v285);
      *(uint8x8_t *)v286.i8 = vqmovn_u16((uint16x8_t)v286);
      *(uint8x8_t *)v287.i8 = vqmovn_u16((uint16x8_t)v287);
      *(uint8x8_t *)v288.i8 = vqmovn_u16((uint16x8_t)v288);
      int16x8_t v289 = (int16x8_t)vtrn1q_s8(v285, v286);
      int16x8_t v290 = (int16x8_t)vtrn2q_s8(v285, v286);
      int8x16_t v291 = vtrn1q_s8(v287, v288);
      int16x8_t v292 = (int16x8_t)vtrn2q_s8(v287, v288);
      int8x16_t v293 = (int8x16_t)vzip1q_s64((int64x2_t)vzip1q_s32((int32x4_t)vzip1q_s16(v289, (int16x8_t)v291), (int32x4_t)vzip1q_s16(v290, v292)), (int64x2_t)vzip1q_s32((int32x4_t)vtrn2q_s16(v289, (int16x8_t)v291), (int32x4_t)vtrn2q_s16(v290, v292)));
      v291.i64[0] = 0x202020202020202;
      v291.i64[1] = 0x202020202020202;
      int8x16_t v294 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v466.i8, (int16x4_t)0x4000400040004)), v291);
      v291.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v291.i64[1] = 0xF8F8F8F8F8F8F8F8;
      uint8x16_t v295 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8(v271, (uint8x16_t)vorrq_s8(v294, v291)), v293);
      int16x8_t v296 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v294.i8);
      int16x8_t v297 = (int16x8_t)vmovl_high_u8((uint8x16_t)v294);
      uint16x8_t v298 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v295.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v296)), (int16x8_t)vshlq_u16(vmovl_high_u8(v295), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v297)));
      uint16x8_t v299 = (uint16x8_t)vpaddq_s16(v296, v297);
      int32x4_t v300 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v299.i8);
      int32x4_t v301 = (int32x4_t)vmovl_high_u16(v299);
      int32x4_t v302 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v298.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v300)), (int32x4_t)vshlq_u32(vmovl_high_u16(v298), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v301)));
      int32x4_t v303 = vpaddq_s32(v300, v301);
      v279.i64[0] = v302.u32[0];
      v279.i64[1] = v302.u32[1];
      uint64x2_t v304 = (uint64x2_t)v279;
      v279.i64[0] = v302.u32[2];
      v279.i64[1] = v302.u32[3];
      uint64x2_t v305 = (uint64x2_t)v279;
      v279.i64[0] = v303.u32[0];
      v279.i64[1] = v303.u32[1];
      int64x2_t v306 = v279;
      v279.i64[0] = v303.u32[2];
      v279.i64[1] = v303.u32[3];
      int64x2_t v307 = vpaddq_s64((int64x2_t)vshlq_u64(v304, (uint64x2_t)vzip1q_s64((int64x2_t)0, v306)), (int64x2_t)vshlq_u64(v305, (uint64x2_t)vzip1q_s64((int64x2_t)0, v279)));
      int64x2_t v308 = vpaddq_s64(v306, v279);
      uint64_t v309 = (v258 + 100) & 0x3C;
      unint64_t v310 = (v307.i64[0] << v309) | (v282 >> -v283);
      if ((unint64_t)(v308.i64[0] + v309) >= 0x40)
      {
        *(void *)((char *)v257 + ((v284 >> 3) & 0x18)) = v310;
        unint64_t v310 = (unint64_t)v307.i64[0] >> -(char)v309;
      }
      unint64_t v311 = v308.i64[0] + v284;
      unint64_t v312 = v310 | (v307.i64[1] << v311);
      if ((v311 & 0x3F) + v308.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v312;
        unint64_t v312 = (unint64_t)v307.i64[1] >> -(v311 & 0x3F);
        if ((v311 & 0x3F) == 0) {
          unint64_t v312 = 0;
        }
      }
      unint64_t v313 = v311 + v308.i64[1];
      v314.i64[0] = 0x8000800080008;
      v314.i64[1] = 0x8000800080008;
      v315.i64[0] = -1;
      v315.i64[1] = -1;
      int16x8_t v316 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v466, v314), (int8x16_t)0, 8uLL), v471);
      v317.i64[0] = 0xF000F000F000FLL;
      v317.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v318 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v315, (uint16x8_t)vaddq_s16(v316, v317)), v474);
      int32x4_t v319 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v316.i8);
      int32x4_t v320 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v318.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v319)), (int32x4_t)vmovl_high_u16(v318));
      int32x4_t v321 = vpaddq_s32(v319, (int32x4_t)vmovl_high_u16((uint16x8_t)v316));
      v322.i64[0] = v320.u32[0];
      v322.i64[1] = v320.u32[1];
      uint64x2_t v323 = (uint64x2_t)v322;
      v322.i64[0] = v320.u32[2];
      v322.i64[1] = v320.u32[3];
      uint64x2_t v324 = (uint64x2_t)v322;
      v322.i64[0] = v321.u32[0];
      v322.i64[1] = v321.u32[1];
      int64x2_t v325 = v322;
      v322.i64[0] = v321.u32[2];
      v322.i64[1] = v321.u32[3];
      int64x2_t v326 = vpaddq_s64((int64x2_t)vshlq_u64(v323, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)), (int64x2_t)vshlq_u64(v324, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)));
      int64x2_t v327 = vpaddq_s64(v325, v322);
      unint64_t v328 = (v326.i64[0] << v313) | v312;
      if (v327.i64[0] + (v313 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v313 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v328;
        unint64_t v328 = (unint64_t)v326.i64[0] >> -(v313 & 0x3F);
        if ((v313 & 0x3F) == 0) {
          unint64_t v328 = 0;
        }
      }
      unint64_t v329 = v327.i64[0] + v313;
      unint64_t v330 = v328 | (v326.i64[1] << v329);
      if ((v329 & 0x3F) + v327.i64[1] >= 0x40)
      {
        *(void *)((char *)v257 + ((v329 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v330;
        unint64_t v330 = (unint64_t)v326.i64[1] >> -(v329 & 0x3F);
        if ((v329 & 0x3F) == 0) {
          unint64_t v330 = 0;
        }
      }
      unint64_t v331 = v329 + v327.i64[1];
      int16x8_t v332 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v467, 8uLL);
      v333.i64[0] = 0xF000F000F000FLL;
      v333.i64[1] = 0xF000F000F000FLL;
      v334.i64[0] = -1;
      v334.i64[1] = -1;
      uint16x8_t v335 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v334, (uint16x8_t)vaddq_s16(v332, v333)), v449);
      int32x4_t v336 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v332.i8);
      int32x4_t v337 = (int32x4_t)vmovl_high_u16((uint16x8_t)v332);
      int32x4_t v338 = vpaddq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v335.i8), (int32x4_t)vshlq_u32(vmovl_high_u16(v335), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v337)));
      int32x4_t v339 = vpaddq_s32(v336, v337);
      v340.i64[0] = v338.u32[0];
      v340.i64[1] = v338.u32[1];
      uint64x2_t v341 = (uint64x2_t)v340;
      v340.i64[0] = v338.u32[2];
      v340.i64[1] = v338.u32[3];
      uint64x2_t v342 = (uint64x2_t)v340;
      v340.i64[0] = v339.u32[0];
      v340.i64[1] = v339.u32[1];
      int64x2_t v343 = v340;
      v340.i64[0] = v339.u32[2];
      v340.i64[1] = v339.u32[3];
      int64x2_t v344 = vpaddq_s64((int64x2_t)vshlq_u64(v341, (uint64x2_t)vzip1q_s64((int64x2_t)0, v343)), (int64x2_t)vshlq_u64(v342, (uint64x2_t)vzip1q_s64((int64x2_t)0, v340)));
      int64x2_t v345 = vpaddq_s64(v343, v340);
      unint64_t v346 = (v344.i64[0] << v331) | v330;
      if (v345.i64[0] + (v331 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v257 + ((v331 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v346;
        if ((v331 & 0x3F) != 0) {
          unint64_t v346 = (unint64_t)v344.i64[0] >> -(v331 & 0x3F);
        }
        else {
          unint64_t v346 = 0;
        }
      }
      unint64_t v347 = v345.i64[0] + v331;
      uint64_t v348 = (v345.i64[0] + v331) & 0x3F;
      unint64_t v349 = v346 | (v344.i64[1] << v347);
      if ((unint64_t)(v348 + v345.i64[1]) >= 0x40)
      {
        *(void *)((char *)v257 + ((v347 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
        unint64_t v349 = (unint64_t)v344.i64[1] >> -(char)v348;
        if (!v348) {
          unint64_t v349 = 0;
        }
      }
      unint64_t v350 = v347 + v345.i64[1];
      v351.i64[0] = 0xF000F000F000FLL;
      v351.i64[1] = 0xF000F000F000FLL;
      v352.i64[0] = -1;
      v352.i64[1] = -1;
      for (uint64_t i = 16; i != 64; i += 16)
      {
        uint16x8_t v354 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v352, (uint16x8_t)vaddq_s16(v467, v351)), *(int8x16_t *)((char *)&v449 + i));
        int32x4_t v355 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v467.i8);
        int32x4_t v356 = (int32x4_t)vmovl_high_u16((uint16x8_t)v467);
        int32x4_t v357 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v354.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v355)), (int32x4_t)vshlq_u32(vmovl_high_u16(v354), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v356)));
        int32x4_t v358 = vpaddq_s32(v355, v356);
        v359.i64[0] = v357.u32[0];
        v359.i64[1] = v357.u32[1];
        uint64x2_t v360 = (uint64x2_t)v359;
        v359.i64[0] = v357.u32[2];
        v359.i64[1] = v357.u32[3];
        uint64x2_t v361 = (uint64x2_t)v359;
        v359.i64[0] = v358.u32[0];
        v359.i64[1] = v358.u32[1];
        int64x2_t v362 = v359;
        v359.i64[0] = v358.u32[2];
        v359.i64[1] = v358.u32[3];
        int64x2_t v363 = vpaddq_s64((int64x2_t)vshlq_u64(v360, (uint64x2_t)vzip1q_s64((int64x2_t)0, v362)), (int64x2_t)vshlq_u64(v361, (uint64x2_t)vzip1q_s64((int64x2_t)0, v359)));
        int64x2_t v364 = vpaddq_s64(v362, v359);
        unint64_t v365 = (v363.i64[0] << v350) | v349;
        if (v364.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v363.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v364.i64[0] + v350;
        unint64_t v349 = v365 | (v363.i64[1] << v366);
        if ((v366 & 0x3F) + v364.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v363.i64[1] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v366 + v364.i64[1];
      }
      uint64_t v367 = 0;
      v368.i64[0] = 0xF000F000F000FLL;
      v368.i64[1] = 0xF000F000F000FLL;
      v369.i64[0] = -1;
      v369.i64[1] = -1;
      do
      {
        uint16x8_t v370 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v369, (uint16x8_t)vaddq_s16(v468, v368)), *(int8x16_t *)((char *)&v453 + v367));
        int32x4_t v371 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v468.i8);
        int32x4_t v372 = (int32x4_t)vmovl_high_u16((uint16x8_t)v468);
        int32x4_t v373 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v370.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v371)), (int32x4_t)vshlq_u32(vmovl_high_u16(v370), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v372)));
        int32x4_t v374 = vpaddq_s32(v371, v372);
        v375.i64[0] = v373.u32[0];
        v375.i64[1] = v373.u32[1];
        uint64x2_t v376 = (uint64x2_t)v375;
        v375.i64[0] = v373.u32[2];
        v375.i64[1] = v373.u32[3];
        uint64x2_t v377 = (uint64x2_t)v375;
        v375.i64[0] = v374.u32[0];
        v375.i64[1] = v374.u32[1];
        int64x2_t v378 = v375;
        v375.i64[0] = v374.u32[2];
        v375.i64[1] = v374.u32[3];
        int64x2_t v379 = vpaddq_s64((int64x2_t)vshlq_u64(v376, (uint64x2_t)vzip1q_s64((int64x2_t)0, v378)), (int64x2_t)vshlq_u64(v377, (uint64x2_t)vzip1q_s64((int64x2_t)0, v375)));
        int64x2_t v380 = vpaddq_s64(v378, v375);
        unint64_t v381 = (v379.i64[0] << v350) | v349;
        if (v380.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v381;
          unint64_t v381 = (unint64_t)v379.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v381 = 0;
          }
        }
        unint64_t v382 = v380.i64[0] + v350;
        unint64_t v349 = v381 | (v379.i64[1] << v382);
        if ((v382 & 0x3F) + v380.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v382 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v379.i64[1] >> -(v382 & 0x3F);
          if ((v382 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v382 + v380.i64[1];
        v367 += 16;
      }
      while (v367 != 64);
      uint64_t v383 = 0;
      v384.i64[0] = 0xF000F000F000FLL;
      v384.i64[1] = 0xF000F000F000FLL;
      v385.i64[0] = -1;
      v385.i64[1] = -1;
      do
      {
        uint16x8_t v386 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v385, (uint16x8_t)vaddq_s16(v469, v384)), *(int8x16_t *)((char *)&v457 + v383));
        int32x4_t v387 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v469.i8);
        int32x4_t v388 = (int32x4_t)vmovl_high_u16((uint16x8_t)v469);
        int32x4_t v389 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v386.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v387)), (int32x4_t)vshlq_u32(vmovl_high_u16(v386), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v388)));
        int32x4_t v390 = vpaddq_s32(v387, v388);
        v391.i64[0] = v389.u32[0];
        v391.i64[1] = v389.u32[1];
        uint64x2_t v392 = (uint64x2_t)v391;
        v391.i64[0] = v389.u32[2];
        v391.i64[1] = v389.u32[3];
        uint64x2_t v393 = (uint64x2_t)v391;
        v391.i64[0] = v390.u32[0];
        v391.i64[1] = v390.u32[1];
        int64x2_t v394 = v391;
        v391.i64[0] = v390.u32[2];
        v391.i64[1] = v390.u32[3];
        int64x2_t v395 = vpaddq_s64((int64x2_t)vshlq_u64(v392, (uint64x2_t)vzip1q_s64((int64x2_t)0, v394)), (int64x2_t)vshlq_u64(v393, (uint64x2_t)vzip1q_s64((int64x2_t)0, v391)));
        int64x2_t v396 = vpaddq_s64(v394, v391);
        unint64_t v397 = (v395.i64[0] << v350) | v349;
        if (v396.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v397;
          unint64_t v397 = (unint64_t)v395.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v397 = 0;
          }
        }
        unint64_t v398 = v396.i64[0] + v350;
        unint64_t v349 = v397 | (v395.i64[1] << v398);
        if ((v398 & 0x3F) + v396.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v398 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v395.i64[1] >> -(v398 & 0x3F);
          if ((v398 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v398 + v396.i64[1];
        v383 += 16;
      }
      while (v383 != 64);
      uint64_t v399 = 0;
      v400.i64[0] = 0xF000F000F000FLL;
      v400.i64[1] = 0xF000F000F000FLL;
      v401.i64[0] = -1;
      v401.i64[1] = -1;
      do
      {
        uint16x8_t v402 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v401, (uint16x8_t)vaddq_s16(v470, v400)), *(int8x16_t *)((char *)&v461 + v399));
        int32x4_t v403 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v470.i8);
        int32x4_t v404 = (int32x4_t)vmovl_high_u16((uint16x8_t)v470);
        int32x4_t v405 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v402.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v403)), (int32x4_t)vshlq_u32(vmovl_high_u16(v402), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v404)));
        int32x4_t v406 = vpaddq_s32(v403, v404);
        v407.i64[0] = v405.u32[0];
        v407.i64[1] = v405.u32[1];
        uint64x2_t v408 = (uint64x2_t)v407;
        v407.i64[0] = v405.u32[2];
        v407.i64[1] = v405.u32[3];
        uint64x2_t v409 = (uint64x2_t)v407;
        v407.i64[0] = v406.u32[0];
        v407.i64[1] = v406.u32[1];
        int64x2_t v410 = v407;
        v407.i64[0] = v406.u32[2];
        v407.i64[1] = v406.u32[3];
        int64x2_t v411 = vpaddq_s64((int64x2_t)vshlq_u64(v408, (uint64x2_t)vzip1q_s64((int64x2_t)0, v410)), (int64x2_t)vshlq_u64(v409, (uint64x2_t)vzip1q_s64((int64x2_t)0, v407)));
        int64x2_t v412 = vpaddq_s64(v410, v407);
        unint64_t v413 = (v411.i64[0] << v350) | v349;
        if (v412.i64[0] + (v350 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v413;
          unint64_t v413 = (unint64_t)v411.i64[0] >> -(v350 & 0x3F);
          if ((v350 & 0x3F) == 0) {
            unint64_t v413 = 0;
          }
        }
        unint64_t v414 = v412.i64[0] + v350;
        unint64_t v349 = v413 | (v411.i64[1] << v414);
        if ((v414 & 0x3F) + v412.i64[1] >= 0x40)
        {
          *(void *)((char *)v257 + ((v414 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
          unint64_t v349 = (unint64_t)v411.i64[1] >> -(v414 & 0x3F);
          if ((v414 & 0x3F) == 0) {
            unint64_t v349 = 0;
          }
        }
        unint64_t v350 = v414 + v412.i64[1];
        v399 += 16;
      }
      while (v399 != 64);
      if ((v350 & 0x3F) != 0) {
        *(void *)((char *)v257 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v349;
      }
      unint64_t result = (v350 - v258 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(void *)a1 = *(void *)a3;
    *a2 = 7;
    return 8;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v459 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    int16x8_t v11 = (_OWORD *)(a1 + a2);
    v11[2] = 0u;
    v11[3] = 0u;
    *int16x8_t v11 = 0u;
    v11[1] = 0u;
    int16x8_t v12 = (_OWORD *)(a1 + 2 * a2);
    v12[2] = 0u;
    v12[3] = 0u;
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    int16x8_t v13 = (_OWORD *)(a1 + a2 + 2 * a2);
    v13[2] = 0u;
    v13[3] = 0u;
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    return result;
  }
  char v7 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v440, a5);
    }
    int32x4_t v434 = (int32x4_t)v442;
    int32x4_t v430 = v440;
    int32x4_t v432 = v443;
    int32x4_t v424 = v445;
    int32x4_t v425 = (int32x4_t)v441;
    unint64_t v18 = a3 + 32;
    int32x4_t v426 = v446;
    int32x4_t v428 = v444;
    int32x4_t v423 = v447;
    if ((v7 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v18, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v18, (uint64_t)&v440, a5);
    }
    int32x4_t v421 = (int32x4_t)v441;
    int32x4_t v422 = v440;
    int32x4_t v419 = v443;
    int32x4_t v420 = (int32x4_t)v442;
    int32x4_t v417 = v445;
    int32x4_t v418 = v444;
    unint64_t v39 = a3 + 64;
    int32x4_t v415 = v447;
    int32x4_t v416 = v446;
    if ((v7 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v39, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v39, (uint64_t)&v440, a5);
    }
    int32x4_t v413 = (int32x4_t)v441;
    int32x4_t v414 = v440;
    int32x4_t v411 = v443;
    int32x4_t v412 = (int32x4_t)v442;
    int32x4_t v409 = v445;
    int32x4_t v410 = v444;
    unint64_t v40 = a3 + 96;
    int32x4_t v407 = v447;
    int32x4_t v408 = v446;
    if ((v7 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v40, (uint64_t)&v440, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v40, (uint64_t)&v440, a5);
    }
    int32x4_t v41 = v440;
    int32x4_t v42 = (int32x4_t)v441;
    int32x4_t v43 = (int32x4_t)v442;
    int32x4_t v44 = v443;
    int32x4_t v45 = v444;
    int32x4_t v46 = v445;
    int32x4_t v47 = v446;
    int32x4_t v48 = v447;
    *(int16x4_t *)a1 = vmovn_s32(v430);
    *(int16x4_t *)(a1 + 8) = vmovn_s32(v425);
    *(int16x4_t *)(a1 + 16) = vmovn_s32(v428);
    *(int16x4_t *)(a1 + 24) = vmovn_s32(v424);
    *(int16x4_t *)(a1 + 32) = vmovn_s32(v414);
    *(int16x4_t *)(a1 + 40) = vmovn_s32(v413);
    *(int16x4_t *)(a1 + 48) = vmovn_s32(v410);
    *(int16x4_t *)(a1 + 56) = vmovn_s32(v409);
    int16x8_t v49 = (int16x4_t *)(a1 + a2);
    *int16x8_t v49 = vmovn_s32(v434);
    v49[1] = vmovn_s32(v432);
    v49[2] = vmovn_s32(v426);
    v49[3] = vmovn_s32(v423);
    v49[4] = vmovn_s32(v412);
    v49[5] = vmovn_s32(v411);
    v49[6] = vmovn_s32(v408);
    v49[7] = vmovn_s32(v407);
    int16x8_t v50 = (int16x4_t *)(a1 + a2 + a2);
    *int16x8_t v50 = vmovn_s32(v422);
    v50[1] = vmovn_s32(v421);
    v50[2] = vmovn_s32(v418);
    v50[3] = vmovn_s32(v417);
    v50[4] = vmovn_s32(v41);
    v50[5] = vmovn_s32(v42);
    v50[6] = vmovn_s32(v45);
    v50[7] = vmovn_s32(v46);
    int16x8_t v51 = (int16x4_t *)((char *)v50 + a2);
    *int16x8_t v51 = vmovn_s32(v420);
    v51[1] = vmovn_s32(v419);
    v51[2] = vmovn_s32(v416);
    v51[3] = vmovn_s32(v415);
    v51[4] = vmovn_s32(v43);
    v51[5] = vmovn_s32(v44);
    uint64_t result = 128;
    v51[6] = vmovn_s32(v47);
    v51[7] = vmovn_s32(v48);
    return result;
  }
  if (a4 == 7)
  {
    float64x2_t v14 = vld1q_dup_f64((const double *)a3);
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    int8x16_t v15 = (float64x2_t *)(a1 + a2);
    *int8x16_t v15 = v14;
    v15[1] = v14;
    v15[2] = v14;
    v15[3] = v14;
    int8x16_t v16 = (float64x2_t *)(a1 + 2 * a2);
    *int8x16_t v16 = v14;
    v16[1] = v14;
    v16[2] = v14;
    v16[3] = v14;
    int16x8_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *int16x8_t v17 = v14;
    v17[1] = v14;
    uint64_t result = 8;
LABEL_239:
    v17[2] = v14;
    v17[3] = v14;
    return result;
  }
  unsigned __int8 v439 = 0;
  unint64_t v436 = 8 * (a3 & 7);
  unint64_t v437 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v438 = v436 | 0x400;
  uint64_t result = AGX::AppleCompressionGen2::readHeader<(AGX::AppleCompressionGen2::PixelFormat)18,AGX::AppleCompressionGen2::Vec<short>>((uint64_t)&v453, (uint64_t)v458, (double *)v452.i64, &v436, a4);
  v20.i64[0] = 0x3000300030003;
  v20.i64[1] = 0x3000300030003;
  int8x16_t v21 = v453;
  int16x8_t v22 = (int16x8_t)vandq_s8(v453, v20);
  int8x16_t v23 = vbicq_s8(v458[0], (int8x16_t)vceqq_s16(v22, (int16x8_t)v20));
  v458[0] = v23;
  int16x8_t v454 = (int16x8_t)v23;
  int16x8_t v455 = (int16x8_t)v23;
  int16x8_t v456 = (int16x8_t)v23;
  int16x8_t v457 = (int16x8_t)v23;
  v24.i64[0] = 0x202020202020202;
  v24.i64[1] = 0x202020202020202;
  int8x16_t v25 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v453.i8, (int16x4_t)0x4000400040004)), v24);
  unint64_t v26 = v436;
  if (vmaxvq_s8(v25) < 1)
  {
    v52.i64[0] = -1;
    v52.i64[1] = -1;
    v53.i64[0] = -1;
    v53.i64[1] = -1;
    v54.i64[0] = -1;
    v54.i64[1] = -1;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
  }
  else
  {
    int8x16_t v27 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v25, v25));
    int8x16_t v28 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v27, (int16x8_t)v27));
    unint64_t v29 = vpaddq_s32((int32x4_t)v28, (int32x4_t)v28).u64[0];
    v30.i64[0] = v29;
    v30.i64[1] = HIDWORD(v29);
    int64x2_t v31 = v30;
    unint64_t v32 = vaddvq_s64(v30);
    unint64_t v33 = v32;
    unint64_t v34 = v436 + v32;
    if (v438) {
      BOOL v35 = v438 >= v34;
    }
    else {
      BOOL v35 = 1;
    }
    int v36 = !v35;
    if (v32 <= 0x80 && v36 == 0)
    {
      v19.i64[0] = 63;
      int16x8_t v56 = (int64x2_t *)(v437 + 8 * (v436 >> 6));
      int64x2_t v57 = vaddq_s64(vdupq_lane_s64(vandq_s8((int8x16_t)v436, v19).i64[0], 0), vzip1q_s64((int64x2_t)0, v31));
      int8x16_t v38 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v56, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56->i64[0], 0), (uint64x2_t)vnegq_s64(v57)));
      if ((v436 & 0x3F) + v33 >= 0x81) {
        int8x16_t v38 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v56[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v57)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v56[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v57))), v38);
      }
      unint64_t v436 = v34;
      unint64_t v26 = v34;
    }
    else
    {
      unsigned __int8 v439 = 1;
      int8x16_t v38 = 0uLL;
    }
    int32x2_t v58 = vzip1_s32(*(int32x2_t *)v28.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
    v59.i64[0] = v58.u32[0];
    v59.i64[1] = v58.u32[1];
    int64x2_t v60 = (int64x2_t)vshlq_u64((uint64x2_t)v38, (uint64x2_t)vnegq_s64(v59));
    *(int32x2_t *)v38.i8 = vmovn_s64((int64x2_t)v38);
    *(int32x2_t *)v60.i8 = vmovn_s64(v60);
    int16x8_t v61 = (int16x8_t)vzip1q_s32((int32x4_t)v38, (int32x4_t)v60);
    int16x8_t v62 = (int16x8_t)vshlq_u32((uint32x4_t)v61, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v27.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)))));
    *(int16x4_t *)v61.i8 = vmovn_s32((int32x4_t)v61);
    *(int16x4_t *)v62.i8 = vmovn_s32((int32x4_t)v62);
    int8x16_t v63 = (int8x16_t)vzip1q_s16(v61, v62);
    int8x16_t v64 = (int8x16_t)vshlq_u16((uint16x8_t)v63, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)))));
    *(int8x8_t *)v63.i8 = vmovn_s16((int16x8_t)v63);
    *(int8x8_t *)v64.i8 = vmovn_s16((int16x8_t)v64);
    int8x16_t v65 = vzip1q_s8(v63, v64);
    v64.i64[0] = 0x101010101010101;
    v64.i64[1] = 0x101010101010101;
    int8x16_t v66 = vshlq_s8(v64, v25);
    v64.i64[0] = -1;
    v64.i64[1] = -1;
    int32x4_t v67 = (int32x4_t)vqtbl1q_s8(vandq_s8(v65, vaddq_s8(v66, v64)), (int8x16_t)xmmword_242EA7560);
    *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 0);
    *(int32x2_t *)v64.i8 = vdup_lane_s32(*(int32x2_t *)v67.i8, 1);
    int8x8_t v68 = (int8x8_t)vdupq_laneq_s32(v67, 2).u64[0];
    v67.i64[0] = vdupq_laneq_s32(v67, 3).u64[0];
    int16x8_t v454 = vsubw_s8(v454, *(int8x8_t *)v65.i8);
    int16x8_t v455 = vsubw_s8(v455, *(int8x8_t *)v64.i8);
    int16x8_t v456 = vsubw_s8(v456, v68);
    int16x8_t v457 = vsubw_s8(v457, *(int8x8_t *)v67.i8);
    int16x8_t v55 = vmovl_s8(vceqz_s8(*(int8x8_t *)v65.i8));
    int16x8_t v54 = vmovl_s8(vceqz_s8(*(int8x8_t *)v64.i8));
    int16x8_t v53 = vmovl_s8(vceqz_s8(v68));
    int16x8_t v52 = vmovl_s8(vceqz_s8(*(int8x8_t *)v67.i8));
  }
  v69.i64[0] = 0x8000800080008;
  v69.i64[1] = 0x8000800080008;
  int8x16_t v70 = 0uLL;
  int8x16_t v71 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v453, v69), (int8x16_t)0, 8uLL), v23);
  int8x16_t v72 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v71, (int16x8_t)v71));
  unint64_t v73 = vpaddq_s32((int32x4_t)v72, (int32x4_t)v72).u64[0];
  v74.i64[0] = v73;
  v74.i64[1] = HIDWORD(v73);
  int64x2_t v75 = v74;
  unint64_t v76 = vaddvq_s64(v74);
  if (v438) {
    BOOL v77 = v438 >= v26 + v76;
  }
  else {
    BOOL v77 = 1;
  }
  int v78 = !v77;
  if (v76 <= 0x80 && v78 == 0)
  {
    int64x2_t v80 = vaddq_s64(vdupq_n_s64(v26 & 0x3F), vzip1q_s64((int64x2_t)0, v75));
    int8x16_t v81 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v70 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v81, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81->i64[0], 0), (uint64x2_t)vnegq_s64(v80)));
    if ((v26 & 0x3F) + v76 >= 0x81) {
      int8x16_t v70 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v81[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v80)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v81[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v80))), v70);
    }
    v26 += v76;
  }
  else
  {
    unsigned __int8 v439 = 1;
  }
  int v82 = v453.i8[0] & 3;
  if (v82 == 2)
  {
    unint64_t v83 = v26 + 8;
    if (v438)
    {
      if (v438 < v83)
      {
        unsigned __int8 v439 = 1;
LABEL_57:
        unsigned __int8 v439 = 1;
        goto LABEL_58;
      }
      unint64_t v84 = v26 + 16;
      v26 += 8;
      if (v438 < v84) {
        goto LABEL_57;
      }
      unint64_t v83 = v26;
    }
    unint64_t v26 = v83 + 8;
  }
LABEL_58:
  int8x16_t v85 = 0uLL;
  int8x16_t v86 = vextq_s8((int8x16_t)0, (int8x16_t)v454, 8uLL);
  int8x16_t v87 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v86, (int16x8_t)v86));
  unint64_t v88 = vpaddq_s32((int32x4_t)v87, (int32x4_t)v87).u64[0];
  v89.i64[0] = v88;
  v89.i64[1] = HIDWORD(v88);
  int64x2_t v90 = v89;
  unint64_t v91 = vaddvq_s64(v89);
  unint64_t v92 = v26 + v91;
  if (v438) {
    BOOL v93 = v438 >= v92;
  }
  else {
    BOOL v93 = 1;
  }
  int v94 = !v93;
  if (v91 > 0x80 || v94)
  {
    int v99 = 1;
    unint64_t v97 = v437;
  }
  else
  {
    unint64_t v95 = v26 & 0x3F;
    int64x2_t v96 = vaddq_s64(vdupq_n_s64(v95), vzip1q_s64((int64x2_t)0, v90));
    unint64_t v97 = v437;
    int16x8_t v98 = (int64x2_t *)(v437 + 8 * (v26 >> 6));
    int8x16_t v85 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v96)));
    if (v95 + v91 >= 0x81) {
      int8x16_t v85 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v96)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v96))), v85);
    }
    int v99 = v439;
    unint64_t v26 = v92;
  }
  v100.i64[0] = 0xF000F000F000FLL;
  v100.i64[1] = 0xF000F000F000FLL;
  v101.i64[0] = 0x10001000100010;
  v101.i64[1] = 0x10001000100010;
  int8x16_t v102 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v454, v454));
  unint64_t v103 = vpaddq_s32((int32x4_t)v102, (int32x4_t)v102).u64[0];
  v104.i64[0] = v103;
  v104.i64[1] = HIDWORD(v103);
  int64x2_t v105 = v104;
  unint64_t v106 = vaddvq_s64(v104);
  unint64_t v107 = v106;
  unint64_t v108 = v26 + v106;
  if (v438) {
    BOOL v109 = v438 >= v108;
  }
  else {
    BOOL v109 = 1;
  }
  char v110 = !v109;
  int8x16_t v111 = 0uLL;
  if (v106 > 0x80 || (v110 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v108 = v26;
    int8x16_t v115 = 0uLL;
  }
  else
  {
    unint64_t v112 = v26 & 0x3F;
    int64x2_t v113 = vaddq_s64(vdupq_n_s64(v112), vzip1q_s64((int64x2_t)0, v105));
    int16x8_t v114 = (int64x2_t *)(v97 + 8 * (v26 >> 6));
    int8x16_t v115 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v114, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114->i64[0], 0), (uint64x2_t)vnegq_s64(v113)));
    if (v112 + v107 >= 0x81) {
      int8x16_t v115 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v114[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v113)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v114[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v113))), v115);
    }
  }
  int32x2_t v116 = vzip1_s32(*(int32x2_t *)v102.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
  v117.i64[0] = v116.u32[0];
  v117.i64[1] = v116.u32[1];
  uint64x2_t v118 = (uint64x2_t)vnegq_s64(v117);
  int64x2_t v119 = (int64x2_t)vshlq_u64((uint64x2_t)v115, v118);
  *(int32x2_t *)v115.i8 = vmovn_s64((int64x2_t)v115);
  *(int32x2_t *)v119.i8 = vmovn_s64(v119);
  int16x8_t v120 = (int16x8_t)vzip1q_s32((int32x4_t)v115, (int32x4_t)v119);
  uint32x4_t v121 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v454.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v454, (int8x16_t)v454, 8uLL))));
  int16x8_t v122 = (int16x8_t)vshlq_u32((uint32x4_t)v120, v121);
  *(int16x4_t *)v120.i8 = vmovn_s32((int32x4_t)v120);
  *(int16x4_t *)v122.i8 = vmovn_s32((int32x4_t)v122);
  int16x8_t v123 = vzip1q_s16(v120, v122);
  int16x8_t v124 = vaddq_s16(v454, (int16x8_t)v100);
  int16x8_t v125 = vsubq_s16(v101, v454);
  int16x8_t v126 = vshlq_s16(vshlq_s16(v123, v125), v124);
  int16x8_t v441 = v126;
  unint64_t v127 = v108 + v107;
  if (v438) {
    BOOL v128 = v438 >= v127;
  }
  else {
    BOOL v128 = 1;
  }
  char v129 = !v128;
  if (v107 > 0x80 || (v129 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v127 = v108;
  }
  else
  {
    unint64_t v130 = v108 & 0x3F;
    int64x2_t v131 = vaddq_s64(vdupq_n_s64(v130), vzip1q_s64((int64x2_t)0, v105));
    int8x16_t v132 = (int64x2_t *)(v97 + 8 * (v108 >> 6));
    int8x16_t v111 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v132, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132->i64[0], 0), (uint64x2_t)vnegq_s64(v131)));
    if (v130 + v107 >= 0x81) {
      int8x16_t v111 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v132[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v131)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v132[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v131))), v111);
    }
  }
  int64x2_t v133 = (int64x2_t)vshlq_u64((uint64x2_t)v111, v118);
  *(int32x2_t *)v111.i8 = vmovn_s64((int64x2_t)v111);
  *(int32x2_t *)v133.i8 = vmovn_s64(v133);
  int16x8_t v134 = (int16x8_t)vzip1q_s32((int32x4_t)v111, (int32x4_t)v133);
  int16x8_t v135 = (int16x8_t)vshlq_u32((uint32x4_t)v134, v121);
  *(int16x4_t *)v134.i8 = vmovn_s32((int32x4_t)v134);
  *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
  int16x8_t v136 = vshlq_s16(vshlq_s16(vzip1q_s16(v134, v135), v125), v124);
  int16x8_t v442 = v136;
  unint64_t v137 = v127 + v107;
  if (v438) {
    BOOL v138 = v438 >= v137;
  }
  else {
    BOOL v138 = 1;
  }
  char v139 = !v138;
  int8x16_t v140 = 0uLL;
  if (v107 > 0x80 || (v139 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v137 = v127;
    int8x16_t v144 = 0uLL;
  }
  else
  {
    unint64_t v141 = v127 & 0x3F;
    int64x2_t v142 = vaddq_s64(vdupq_n_s64(v141), vzip1q_s64((int64x2_t)0, v105));
    int16x8_t v143 = (int64x2_t *)(v97 + 8 * (v127 >> 6));
    int8x16_t v144 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v143, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143->i64[0], 0), (uint64x2_t)vnegq_s64(v142)));
    if (v141 + v107 >= 0x81) {
      int8x16_t v144 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v143[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v142)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v143[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v142))), v144);
    }
  }
  int64x2_t v145 = (int64x2_t)vshlq_u64((uint64x2_t)v144, v118);
  *(int32x2_t *)v144.i8 = vmovn_s64((int64x2_t)v144);
  *(int32x2_t *)v145.i8 = vmovn_s64(v145);
  int16x8_t v146 = (int16x8_t)vzip1q_s32((int32x4_t)v144, (int32x4_t)v145);
  int16x8_t v147 = (int16x8_t)vshlq_u32((uint32x4_t)v146, v121);
  *(int16x4_t *)v146.i8 = vmovn_s32((int32x4_t)v146);
  *(int16x4_t *)v147.i8 = vmovn_s32((int32x4_t)v147);
  int16x8_t v148 = vshlq_s16(vshlq_s16(vzip1q_s16(v146, v147), v125), v124);
  int32x4_t v443 = (int32x4_t)v148;
  int8x16_t v149 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v455, v455));
  v146.i64[0] = vpaddq_s32((int32x4_t)v149, (int32x4_t)v149).u64[0];
  v150.i64[0] = v146.u32[0];
  v150.i64[1] = v146.u32[1];
  int64x2_t v151 = v150;
  unint64_t v152 = vaddvq_s64(v150);
  unint64_t v153 = v152;
  unint64_t v154 = v137 + v152;
  if (v438) {
    BOOL v155 = v438 >= v154;
  }
  else {
    BOOL v155 = 1;
  }
  char v156 = !v155;
  if (v152 > 0x80 || (v156 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v154 = v137;
  }
  else
  {
    unint64_t v157 = v137 & 0x3F;
    int64x2_t v158 = vaddq_s64(vdupq_n_s64(v157), vzip1q_s64((int64x2_t)0, v151));
    int8x16_t v159 = (int64x2_t *)(v97 + 8 * (v137 >> 6));
    int8x16_t v140 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v159, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159->i64[0], 0), (uint64x2_t)vnegq_s64(v158)));
    if (v157 + v153 >= 0x81) {
      int8x16_t v140 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v159[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v158)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v159[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v158))), v140);
    }
  }
  unint64_t v160 = v154 + v153;
  if (v438) {
    BOOL v161 = v438 >= v160;
  }
  else {
    BOOL v161 = 1;
  }
  char v162 = !v161;
  int8x16_t v163 = 0uLL;
  if (v153 > 0x80 || (v162 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v160 = v154;
    int8x16_t v167 = 0uLL;
  }
  else
  {
    unint64_t v164 = v154 & 0x3F;
    int64x2_t v165 = vaddq_s64(vdupq_n_s64(v164), vzip1q_s64((int64x2_t)0, v151));
    int16x8_t v166 = (int64x2_t *)(v97 + 8 * (v154 >> 6));
    int8x16_t v167 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v166, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166->i64[0], 0), (uint64x2_t)vnegq_s64(v165)));
    if (v164 + v153 >= 0x81) {
      int8x16_t v167 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v166[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v165)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v166[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v165))), v167);
    }
  }
  unint64_t v168 = v160 + v153;
  if (v438) {
    BOOL v169 = v438 >= v168;
  }
  else {
    BOOL v169 = 1;
  }
  char v170 = !v169;
  int8x16_t v431 = (int8x16_t)v55;
  if (v153 > 0x80 || (v170 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v168 = v160;
  }
  else
  {
    int64x2_t v171 = vaddq_s64(vdupq_n_s64(v160 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int16x8_t v172 = (int64x2_t *)(v97 + 8 * (v160 >> 6));
    int8x16_t v163 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v172, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172->i64[0], 0), (uint64x2_t)vnegq_s64(v171)));
    if ((v160 & 0x3F) + v153 >= 0x81) {
      int8x16_t v163 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v172[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v171)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v172[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v171))), v163);
    }
  }
  unint64_t v173 = v168 + v153;
  if (v438) {
    BOOL v174 = v438 >= v173;
  }
  else {
    BOOL v174 = 1;
  }
  char v175 = !v174;
  int8x16_t v176 = 0uLL;
  int8x16_t v433 = (int8x16_t)v52;
  int16x8_t v435 = v22;
  int8x16_t v427 = (int8x16_t)v54;
  if (v153 > 0x80 || (v175 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v173 = v168;
    int8x16_t v179 = 0uLL;
  }
  else
  {
    int64x2_t v177 = vaddq_s64(vdupq_n_s64(v168 & 0x3F), vzip1q_s64((int64x2_t)0, v151));
    int8x16_t v178 = (int64x2_t *)(v97 + 8 * (v168 >> 6));
    int8x16_t v179 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v178, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178->i64[0], 0), (uint64x2_t)vnegq_s64(v177)));
    if ((v168 & 0x3F) + v153 >= 0x81) {
      int8x16_t v179 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v178[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v177)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v178[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v177))), v179);
    }
  }
  int8x16_t v180 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v456, v456));
  unint64_t v181 = vpaddq_s32((int32x4_t)v180, (int32x4_t)v180).u64[0];
  v182.i64[0] = v181;
  v182.i64[1] = HIDWORD(v181);
  int64x2_t v183 = v182;
  unint64_t v184 = vaddvq_s64(v182);
  unint64_t v185 = v184;
  unint64_t v186 = v173 + v184;
  if (v438) {
    BOOL v187 = v438 >= v186;
  }
  else {
    BOOL v187 = 1;
  }
  char v188 = !v187;
  int8x16_t v429 = (int8x16_t)v53;
  if (v184 > 0x80 || (v188 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v186 = v173;
  }
  else
  {
    unint64_t v189 = v173 & 0x3F;
    int64x2_t v190 = vaddq_s64(vdupq_n_s64(v189), vzip1q_s64((int64x2_t)0, v183));
    int16x8_t v191 = (int64x2_t *)(v97 + 8 * (v173 >> 6));
    int8x16_t v176 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v191, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191->i64[0], 0), (uint64x2_t)vnegq_s64(v190)));
    if (v189 + v185 >= 0x81) {
      int8x16_t v176 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v191[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v190)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v191[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v190))), v176);
    }
  }
  unint64_t v192 = v186 + v185;
  if (v438) {
    BOOL v193 = v438 >= v192;
  }
  else {
    BOOL v193 = 1;
  }
  char v194 = !v193;
  int8x16_t v195 = 0uLL;
  if (v185 > 0x80 || (v194 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v192 = v186;
    int8x16_t v199 = 0uLL;
  }
  else
  {
    unint64_t v196 = v186 & 0x3F;
    int64x2_t v197 = vaddq_s64(vdupq_n_s64(v196), vzip1q_s64((int64x2_t)0, v183));
    int16x8_t v198 = (int64x2_t *)(v97 + 8 * (v186 >> 6));
    int8x16_t v199 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v198, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198->i64[0], 0), (uint64x2_t)vnegq_s64(v197)));
    if (v196 + v185 >= 0x81) {
      int8x16_t v199 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v198[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v197)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v198[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v197))), v199);
    }
  }
  unint64_t v200 = v192 + v185;
  if (v438) {
    BOOL v201 = v438 >= v200;
  }
  else {
    BOOL v201 = 1;
  }
  char v202 = !v201;
  if (v185 > 0x80 || (v202 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v200 = v192;
  }
  else
  {
    unint64_t v203 = v192 & 0x3F;
    int64x2_t v204 = vaddq_s64(vdupq_n_s64(v203), vzip1q_s64((int64x2_t)0, v183));
    int16x8_t v205 = (int64x2_t *)(v97 + 8 * (v192 >> 6));
    int8x16_t v195 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v205, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205->i64[0], 0), (uint64x2_t)vnegq_s64(v204)));
    if (v203 + v185 >= 0x81) {
      int8x16_t v195 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v205[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v204)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v205[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v204))), v195);
    }
  }
  unint64_t v206 = v200 + v185;
  if (v438) {
    BOOL v207 = v438 >= v206;
  }
  else {
    BOOL v207 = 1;
  }
  char v208 = !v207;
  int8x16_t v209 = 0uLL;
  if (v185 > 0x80 || (v208 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v206 = v200;
    int8x16_t v213 = 0uLL;
  }
  else
  {
    unint64_t v210 = v200 & 0x3F;
    int64x2_t v211 = vaddq_s64(vdupq_n_s64(v210), vzip1q_s64((int64x2_t)0, v183));
    int16x8_t v212 = (int64x2_t *)(v97 + 8 * (v200 >> 6));
    int8x16_t v213 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v212, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212->i64[0], 0), (uint64x2_t)vnegq_s64(v211)));
    if (v210 + v185 >= 0x81) {
      int8x16_t v213 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v212[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v211)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v212[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v211))), v213);
    }
  }
  int8x16_t v214 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v457, v457));
  unint64_t v215 = vpaddq_s32((int32x4_t)v214, (int32x4_t)v214).u64[0];
  v216.i64[0] = v215;
  v216.i64[1] = HIDWORD(v215);
  int64x2_t v217 = v216;
  unint64_t v218 = vaddvq_s64(v216);
  unint64_t v219 = v218;
  unint64_t v220 = v206 + v218;
  if (v438) {
    BOOL v221 = v438 >= v220;
  }
  else {
    BOOL v221 = 1;
  }
  char v222 = !v221;
  if (v218 > 0x80 || (v222 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v220 = v206;
  }
  else
  {
    unint64_t v223 = v206 & 0x3F;
    int64x2_t v224 = vaddq_s64(vdupq_n_s64(v223), vzip1q_s64((int64x2_t)0, v217));
    int8x16_t v225 = (int64x2_t *)(v97 + 8 * (v206 >> 6));
    int8x16_t v209 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v225, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225->i64[0], 0), (uint64x2_t)vnegq_s64(v224)));
    if (v223 + v219 >= 0x81) {
      int8x16_t v209 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v225[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v224)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v225[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v224))), v209);
    }
  }
  unint64_t v226 = v220 + v219;
  if (v438) {
    BOOL v227 = v438 >= v226;
  }
  else {
    BOOL v227 = 1;
  }
  char v228 = !v227;
  int8x16_t v229 = 0uLL;
  if (v219 > 0x80 || (v228 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v226 = v220;
    int8x16_t v233 = 0uLL;
  }
  else
  {
    unint64_t v230 = v220 & 0x3F;
    int64x2_t v231 = vaddq_s64(vdupq_n_s64(v230), vzip1q_s64((int64x2_t)0, v217));
    int8x16_t v232 = (int64x2_t *)(v97 + 8 * (v220 >> 6));
    int64x2_t v100 = vnegq_s64(v231);
    int8x16_t v233 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v232, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232->i64[0], 0), (uint64x2_t)v100));
    if (v230 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v233 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v232[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v231)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v232[1], 1), (uint64x2_t)vsubq_s64(v100, v231))), v233);
    }
  }
  unint64_t v234 = v226 + v219;
  if (v438) {
    BOOL v235 = v438 >= v234;
  }
  else {
    BOOL v235 = 1;
  }
  char v236 = !v235;
  if (v219 > 0x80 || (v236 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v234 = v226;
  }
  else
  {
    unint64_t v237 = v226 & 0x3F;
    int64x2_t v238 = vaddq_s64(vdupq_n_s64(v237), vzip1q_s64((int64x2_t)0, v217));
    int8x16_t v239 = (int64x2_t *)(v97 + 8 * (v226 >> 6));
    int64x2_t v100 = vsubq_s64(vdupq_n_s64(0x40uLL), v238);
    int8x16_t v229 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v239, 1), (uint64x2_t)v100), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239->i64[0], 0), (uint64x2_t)vnegq_s64(v238)));
    if (v237 + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v229 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v239[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v238)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v239[1], 1), (uint64x2_t)vsubq_s64(v100, v238))), v229);
    }
  }
  unint64_t v240 = v234 + v219;
  if (v438) {
    BOOL v241 = v438 >= v240;
  }
  else {
    BOOL v241 = 1;
  }
  char v242 = !v241;
  int8x16_t v243 = 0uLL;
  if (v219 > 0x80 || (v242 & 1) != 0)
  {
    int v99 = 1;
    unint64_t v240 = v234;
  }
  else
  {
    int64x2_t v244 = vaddq_s64(vdupq_n_s64(v234 & 0x3F), vzip1q_s64((int64x2_t)0, v217));
    int16x8_t v245 = (int64x2_t *)(v97 + 8 * (v234 >> 6));
    int64x2_t v100 = vdupq_n_s64(0x40uLL);
    int8x16_t v243 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v245, 1), (uint64x2_t)vsubq_s64(v100, v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245->i64[0], 0), (uint64x2_t)vnegq_s64(v244)));
    if ((v234 & 0x3F) + v219 >= 0x81)
    {
      int64x2_t v100 = vdupq_n_s64(0xC0uLL);
      int8x16_t v243 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v245[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v244)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v245[1], 1), (uint64x2_t)vsubq_s64(v100, v244))), v243);
    }
  }
  if (v99 || v438 + 8 * result - v240 - 1024 >= 9 || v82 == 2)
  {
    uint64_t result = 0;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    *(float64x2_t *)a1 = v14;
    *(float64x2_t *)(a1 + 16) = v14;
    *(float64x2_t *)(a1 + 32) = v14;
    *(float64x2_t *)(a1 + 48) = v14;
    int8x16_t v246 = (float64x2_t *)(a1 + a2);
    *int8x16_t v246 = v14;
    v246[1] = v14;
    v246[2] = v14;
    v246[3] = v14;
    int16x8_t v247 = (float64x2_t *)(a1 + 2 * a2);
    *int16x8_t v247 = v14;
    v247[1] = v14;
    v247[2] = v14;
    v247[3] = v14;
    int16x8_t v17 = (float64x2_t *)(a1 + a2 + 2 * a2);
    *int16x8_t v17 = v14;
    v17[1] = v14;
    goto LABEL_239;
  }
  int32x2_t v248 = vzip1_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
  int32x2_t v249 = vzip1_s32(*(int32x2_t *)v87.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL));
  *(int32x2_t *)v72.i8 = vzip1_s32(*(int32x2_t *)v149.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL));
  int32x2_t v250 = vzip1_s32(*(int32x2_t *)v180.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL));
  int32x4_t v251 = (int32x4_t)vextq_s8(v214, v214, 8uLL);
  int32x2_t v252 = vzip1_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v251.i8);
  v253.i64[0] = v248.u32[0];
  v253.i64[1] = v248.u32[1];
  int64x2_t v254 = (int64x2_t)vshlq_u64((uint64x2_t)v70, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v70.i8 = vmovn_s64((int64x2_t)v70);
  *(int32x2_t *)v254.i8 = vmovn_s64(v254);
  int16x8_t v255 = (int16x8_t)vzip1q_s32((int32x4_t)v70, (int32x4_t)v254);
  v253.i64[0] = v249.u32[0];
  v253.i64[1] = v249.u32[1];
  int64x2_t v256 = (int64x2_t)vshlq_u64((uint64x2_t)v85, (uint64x2_t)vnegq_s64(v253));
  *(int32x2_t *)v251.i8 = vmovn_s64((int64x2_t)v85);
  *(int32x2_t *)v256.i8 = vmovn_s64(v256);
  int32x4_t v257 = vzip1q_s32(v251, (int32x4_t)v256);
  v253.i64[0] = v72.u32[0];
  v253.i64[1] = v72.u32[1];
  int32x4_t v258 = (int32x4_t)vnegq_s64(v253);
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v140, (uint64x2_t)v258);
  *(int32x2_t *)v100.i8 = vmovn_s64((int64x2_t)v140);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v100, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v167, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v167);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v261);
  int64x2_t v263 = (int64x2_t)vshlq_u64((uint64x2_t)v163, (uint64x2_t)v258);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v163);
  *(int32x2_t *)v263.i8 = vmovn_s64(v263);
  int16x8_t v264 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v263);
  v253.i64[0] = v250.u32[0];
  v253.i64[1] = v250.u32[1];
  int64x2_t v265 = v253;
  v253.i64[0] = v252.u32[0];
  v253.i64[1] = v252.u32[1];
  int32x4_t v266 = (int32x4_t)vnegq_s64(v265);
  int64x2_t v267 = (int64x2_t)vshlq_u64((uint64x2_t)v179, (uint64x2_t)v258);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v179);
  *(int32x2_t *)v267.i8 = vmovn_s64(v267);
  int16x8_t v268 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v267);
  int64x2_t v269 = (int64x2_t)vshlq_u64((uint64x2_t)v176, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v176);
  *(int32x2_t *)v269.i8 = vmovn_s64(v269);
  int16x8_t v270 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v269);
  int64x2_t v271 = (int64x2_t)vshlq_u64((uint64x2_t)v199, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v199);
  *(int32x2_t *)v271.i8 = vmovn_s64(v271);
  int16x8_t v272 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v271);
  int64x2_t v273 = (int64x2_t)vshlq_u64((uint64x2_t)v195, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v195);
  *(int32x2_t *)v273.i8 = vmovn_s64(v273);
  int16x8_t v274 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v273);
  uint64x2_t v275 = (uint64x2_t)vnegq_s64(v253);
  int64x2_t v276 = (int64x2_t)vshlq_u64((uint64x2_t)v213, (uint64x2_t)v266);
  *(int32x2_t *)v258.i8 = vmovn_s64((int64x2_t)v213);
  *(int32x2_t *)v276.i8 = vmovn_s64(v276);
  int16x8_t v277 = (int16x8_t)vzip1q_s32(v258, (int32x4_t)v276);
  int64x2_t v278 = (int64x2_t)vshlq_u64((uint64x2_t)v209, v275);
  *(int32x2_t *)v266.i8 = vmovn_s64((int64x2_t)v209);
  *(int32x2_t *)v278.i8 = vmovn_s64(v278);
  int16x8_t v279 = (int16x8_t)vzip1q_s32(v266, (int32x4_t)v278);
  int64x2_t v280 = (int64x2_t)vshlq_u64((uint64x2_t)v233, v275);
  *(int32x2_t *)v233.i8 = vmovn_s64((int64x2_t)v233);
  *(int32x2_t *)v280.i8 = vmovn_s64(v280);
  int16x8_t v281 = (int16x8_t)vzip1q_s32((int32x4_t)v233, (int32x4_t)v280);
  int64x2_t v282 = (int64x2_t)vshlq_u64((uint64x2_t)v229, v275);
  *(int32x2_t *)v280.i8 = vmovn_s64((int64x2_t)v229);
  *(int32x2_t *)v282.i8 = vmovn_s64(v282);
  int16x8_t v283 = (int16x8_t)vzip1q_s32((int32x4_t)v280, (int32x4_t)v282);
  int16x8_t v284 = (int16x8_t)vshlq_u32((uint32x4_t)v255, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v71.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)))));
  *(int16x4_t *)v255.i8 = vmovn_s32((int32x4_t)v255);
  *(int16x4_t *)v284.i8 = vmovn_s32((int32x4_t)v284);
  int16x8_t v285 = vzip1q_s16(v255, v284);
  uint32x4_t v286 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v455.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v455, (int8x16_t)v455, 8uLL))));
  int16x8_t v287 = (int16x8_t)vshlq_u32((uint32x4_t)v257, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v86.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)))));
  *(int16x4_t *)v179.i8 = vmovn_s32(v257);
  *(int16x4_t *)v287.i8 = vmovn_s32((int32x4_t)v287);
  int16x8_t v288 = vzip1q_s16((int16x8_t)v179, v287);
  int16x8_t v289 = (int16x8_t)vshlq_u32((uint32x4_t)v260, v286);
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v289.i8 = vmovn_s32((int32x4_t)v289);
  int16x8_t v290 = vzip1q_s16(v260, v289);
  int16x8_t v291 = (int16x8_t)vshlq_u32((uint32x4_t)v262, v286);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v291.i8 = vmovn_s32((int32x4_t)v291);
  int16x8_t v292 = vzip1q_s16(v262, v291);
  int16x8_t v293 = (int16x8_t)vshlq_u32((uint32x4_t)v264, v286);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  *(int16x4_t *)v293.i8 = vmovn_s32((int32x4_t)v293);
  int16x8_t v294 = vzip1q_s16(v264, v293);
  uint32x4_t v295 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v456.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v456, (int8x16_t)v456, 8uLL))));
  int16x8_t v296 = (int16x8_t)vshlq_u32((uint32x4_t)v268, v286);
  *(int16x4_t *)v268.i8 = vmovn_s32((int32x4_t)v268);
  *(int16x4_t *)v296.i8 = vmovn_s32((int32x4_t)v296);
  int16x8_t v297 = vzip1q_s16(v268, v296);
  int16x8_t v298 = (int16x8_t)vshlq_u32((uint32x4_t)v270, v295);
  *(int16x4_t *)v270.i8 = vmovn_s32((int32x4_t)v270);
  *(int16x4_t *)v298.i8 = vmovn_s32((int32x4_t)v298);
  int16x8_t v299 = vzip1q_s16(v270, v298);
  int16x8_t v300 = (int16x8_t)vshlq_u32((uint32x4_t)v272, v295);
  *(int16x4_t *)v272.i8 = vmovn_s32((int32x4_t)v272);
  *(int16x4_t *)v300.i8 = vmovn_s32((int32x4_t)v300);
  int16x8_t v301 = vzip1q_s16(v272, v300);
  int16x8_t v302 = (int16x8_t)vshlq_u32((uint32x4_t)v274, v295);
  *(int16x4_t *)v274.i8 = vmovn_s32((int32x4_t)v274);
  *(int16x4_t *)v302.i8 = vmovn_s32((int32x4_t)v302);
  int16x8_t v303 = vzip1q_s16(v274, v302);
  uint32x4_t v304 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v457.i8, (int16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v457, (int8x16_t)v457, 8uLL))));
  int16x8_t v305 = (int16x8_t)vshlq_u32((uint32x4_t)v277, v295);
  *(int16x4_t *)v277.i8 = vmovn_s32((int32x4_t)v277);
  *(int16x4_t *)v305.i8 = vmovn_s32((int32x4_t)v305);
  int16x8_t v306 = vzip1q_s16(v277, v305);
  int16x8_t v307 = (int16x8_t)vshlq_u32((uint32x4_t)v279, v304);
  *(int16x4_t *)v279.i8 = vmovn_s32((int32x4_t)v279);
  *(int16x4_t *)v307.i8 = vmovn_s32((int32x4_t)v307);
  int16x8_t v308 = vzip1q_s16(v279, v307);
  int16x8_t v309 = (int16x8_t)vshlq_u32((uint32x4_t)v281, v304);
  *(int16x4_t *)v281.i8 = vmovn_s32((int32x4_t)v281);
  *(int16x4_t *)v309.i8 = vmovn_s32((int32x4_t)v309);
  int16x8_t v310 = vzip1q_s16(v281, v309);
  int16x8_t v311 = (int16x8_t)vshlq_u32((uint32x4_t)v283, v304);
  *(int16x4_t *)v283.i8 = vmovn_s32((int32x4_t)v283);
  *(int16x4_t *)v311.i8 = vmovn_s32((int32x4_t)v311);
  int16x8_t v312 = vzip1q_s16(v283, v311);
  v311.i64[0] = 0x10001000100010;
  v311.i64[1] = 0x10001000100010;
  int16x8_t v313 = vsubq_s16(v311, (int16x8_t)v71);
  v314.i64[0] = 0xF000F000F000FLL;
  v314.i64[1] = 0xF000F000F000FLL;
  int16x8_t v315 = vaddq_s16((int16x8_t)v71, v314);
  int16x8_t v316 = vshlq_s16(v285, v313);
  v313.i64[0] = 0x10001000100010;
  v313.i64[1] = 0x10001000100010;
  int16x8_t v317 = vsubq_s16(v313, (int16x8_t)v86);
  int16x8_t v318 = vaddq_s16((int16x8_t)v86, v314);
  v314.i64[0] = 0x10001000100010;
  v314.i64[1] = 0x10001000100010;
  int16x8_t v319 = vshlq_s16(v288, v317);
  v317.i64[0] = 0xF000F000F000FLL;
  v317.i64[1] = 0xF000F000F000FLL;
  int16x8_t v320 = vsubq_s16(v314, v455);
  int16x8_t v321 = vaddq_s16(v455, v317);
  v317.i64[0] = 0x10001000100010;
  v317.i64[1] = 0x10001000100010;
  int16x8_t v322 = vshlq_s16(v290, v320);
  int16x8_t v323 = vshlq_s16(v292, v320);
  int16x8_t v324 = vshlq_s16(v294, v320);
  int16x8_t v325 = vshlq_s16(v297, v320);
  v320.i64[0] = 0xF000F000F000FLL;
  v320.i64[1] = 0xF000F000F000FLL;
  int16x8_t v326 = vsubq_s16(v317, v456);
  int16x8_t v327 = vaddq_s16(v456, v320);
  v320.i64[0] = 0x10001000100010;
  v320.i64[1] = 0x10001000100010;
  int16x8_t v328 = vshlq_s16(v299, v326);
  int16x8_t v329 = vshlq_s16(v301, v326);
  int16x8_t v330 = vshlq_s16(v303, v326);
  int16x8_t v331 = vshlq_s16(v306, v326);
  v326.i64[0] = 0xF000F000F000FLL;
  v326.i64[1] = 0xF000F000F000FLL;
  int16x8_t v332 = vsubq_s16(v320, v457);
  int16x8_t v333 = vaddq_s16(v457, v326);
  int8x16_t v334 = (int8x16_t)vshlq_s16(v316, v315);
  int16x8_t v335 = vshlq_s16(v319, v318);
  int16x8_t v336 = vshlq_s16(v322, v321);
  int16x8_t v337 = vshlq_s16(v323, v321);
  int16x8_t v338 = vshlq_s16(v324, v321);
  int16x8_t v339 = vshlq_s16(v325, v321);
  int16x8_t v340 = vshlq_s16(v328, v327);
  int16x8_t v341 = vshlq_s16(v329, v327);
  int16x8_t v342 = vshlq_s16(v330, v327);
  int16x8_t v343 = vshlq_s16(v331, v327);
  int64x2_t v344 = (int64x2_t)vshlq_u64((uint64x2_t)v243, v275);
  *(int32x2_t *)v243.i8 = vmovn_s64((int64x2_t)v243);
  *(int32x2_t *)v344.i8 = vmovn_s64(v344);
  int16x8_t v345 = (int16x8_t)vzip1q_s32((int32x4_t)v243, (int32x4_t)v344);
  int16x8_t v346 = vshlq_s16(vshlq_s16(v308, v332), v333);
  int16x8_t v347 = vshlq_s16(vshlq_s16(v310, v332), v333);
  int16x8_t v348 = vshlq_s16(vshlq_s16(v312, v332), v333);
  int16x8_t v349 = (int16x8_t)vshlq_u32((uint32x4_t)v345, v304);
  *(int16x4_t *)v345.i8 = vmovn_s32((int32x4_t)v345);
  *(int16x4_t *)v349.i8 = vmovn_s32((int32x4_t)v349);
  int16x8_t v350 = vshlq_s16(vshlq_s16(vzip1q_s16(v345, v349), v332), v333);
  int16x8_t v351 = vaddq_s16((int16x8_t)vandq_s8(v334, v431), v335);
  int8x16_t v352 = (int8x16_t)vdupq_lane_s64(v334.i64[0], 0);
  int16x8_t v353 = (int16x8_t)vandq_s8(v427, v352);
  int16x8_t v354 = vsubq_s16(v336, v353);
  int16x8_t v355 = vsubq_s16(v337, v353);
  int16x8_t v356 = vsubq_s16(v338, v353);
  int16x8_t v357 = vsubq_s16(v339, v353);
  int16x8_t v358 = (int16x8_t)vandq_s8(v429, v352);
  int16x8_t v359 = vsubq_s16(v340, v358);
  int16x8_t v360 = vsubq_s16(v341, v358);
  int16x8_t v361 = (int16x8_t)vandq_s8(v431, v352);
  int16x8_t v362 = vsubq_s16(v342, v358);
  int16x8_t v363 = vsubq_s16(v343, v358);
  v364.i64[0] = 0x1000100010001;
  v364.i64[1] = 0x1000100010001;
  int16x8_t v365 = vsubq_s16(v126, v361);
  int16x8_t v366 = vsubq_s16(v136, v361);
  int16x8_t v367 = (int16x8_t)vandq_s8(v433, v352);
  int16x8_t v368 = vsubq_s16(v346, v367);
  int16x8_t v369 = vsubq_s16(v347, v367);
  int16x8_t v370 = vsubq_s16(v348, v367);
  int16x8_t v371 = vsubq_s16(v350, v367);
  int8x16_t v372 = (int8x16_t)vsubq_s16(v148, v361);
  int8x16_t v373 = (int8x16_t)vsubq_s16(v351, v361);
  int32x4_t v440 = (int32x4_t)v351;
  int8x16_t v448 = (int8x16_t)v368;
  int8x16_t v449 = (int8x16_t)v369;
  int8x16_t v450 = (int8x16_t)v370;
  int8x16_t v451 = (int8x16_t)v371;
  if (vaddvq_s16(vceqq_s16(v435, (int16x8_t)v364)))
  {
    int8x16_t v374 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v453, v364));
    v375.i64[1] = v373.i64[1];
    v375.i64[0] = v372.i64[1];
    v376.i64[0] = v372.i64[0];
    v376.i64[1] = v373.i64[0];
    int16x8_t v377 = (int16x8_t)vbslq_s8(v374, v375, v373);
    int16x8_t v378 = (int16x8_t)vbslq_s8(v374, v376, v372);
    v379.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v379.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    int16x8_t v380 = (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), v379), v374);
    v462.val[0] = (int8x16_t)vaddq_s16(v377, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7710), v374));
    v462.val[1] = (int8x16_t)vaddq_s16(v365, (int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)(&v365 - 1), (int8x16_t)xmmword_242EA7720), v374));
    v462.val[2] = (int8x16_t)vaddq_s16(v366, v380);
    v462.val[3] = (int8x16_t)vaddq_s16(v378, v380);
    int16x8_t v381 = (int16x8_t)vandq_s8(vqtbl4q_s8(v462, v379), v374);
    int8x16_t v373 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[0], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7730), v374));
    int16x8_t v365 = vaddq_s16((int16x8_t)v462.val[1], (int16x8_t)vandq_s8(vqtbl4q_s8(v462, (int8x16_t)xmmword_242EA7740), v374));
    int32x4_t v440 = (int32x4_t)v373;
    int16x8_t v441 = v365;
    int16x8_t v366 = vaddq_s16((int16x8_t)v462.val[2], v381);
    int8x16_t v372 = (int8x16_t)vaddq_s16((int16x8_t)v462.val[3], v381);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7710), v374), v354);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7750), v374), v355);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, v379), v374), v356);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v354.i8, (int8x16_t)xmmword_242EA7760), v374), v357);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7730), v374);
    int16x8_t v382 = (int16x8_t)vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v354 = vaddq_s16((int16x8_t)v462.val[3], (int16x8_t)v460.val[0]);
    int16x8_t v355 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v356 = vaddq_s16((int16x8_t)v460.val[2], v382);
    int16x8_t v357 = vaddq_s16((int16x8_t)v460.val[3], v382);
    v460.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA74D0), v374), v359);
    v460.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA75A0), v374), v360);
    v460.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7710), v374), v362);
    v460.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(*(int8x16x4_t *)v359.i8, (int8x16_t)xmmword_242EA7720), v374), v363);
    v462.val[3] = vandq_s8(vqtbl4q_s8(v460, v379), v374);
    int16x8_t v359 = vaddq_s16((int16x8_t)v460.val[0], (int16x8_t)v462.val[3]);
    int16x8_t v360 = vaddq_s16((int16x8_t)v460.val[1], (int16x8_t)v462.val[3]);
    int16x8_t v362 = vaddq_s16((int16x8_t)v460.val[2], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA75D0), v374));
    int16x8_t v363 = vaddq_s16((int16x8_t)v460.val[3], (int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7770), v374));
    v460.val[0] = v448;
    v460.val[1] = v449;
    int8x16_t v21 = v453;
    v460.val[2] = v450;
    v460.val[3] = v451;
    v461.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA74D0), v374), (int16x8_t)v448);
    v461.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7780), v374), (int16x8_t)v449);
    int16x8_t v442 = v366;
    int32x4_t v443 = (int32x4_t)v372;
    v461.val[2] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7710), v374), (int16x8_t)v450);
    v461.val[3] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl4q_s8(v460, (int8x16_t)xmmword_242EA7720), v374), (int16x8_t)v451);
    int16x8_t v383 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, v379), v374);
    int16x8_t v384 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA75D0), v374);
    int16x8_t v385 = (int16x8_t)vandq_s8(vqtbl4q_s8(v461, (int8x16_t)xmmword_242EA7790), v374);
    int16x8_t v368 = vaddq_s16((int16x8_t)v461.val[0], v383);
    int16x8_t v369 = vaddq_s16((int16x8_t)v461.val[1], v383);
    int16x8_t v370 = vaddq_s16((int16x8_t)v461.val[2], v384);
    int16x8_t v371 = vaddq_s16((int16x8_t)v461.val[3], v385);
  }
  int8x16_t v386 = (int8x16_t)vaddq_s16(v452, (int16x8_t)v373);
  int8x16_t v387 = (int8x16_t)vaddq_s16(v365, v452);
  int8x16_t v388 = (int8x16_t)vaddq_s16(v366, v452);
  int8x16_t v389 = (int8x16_t)vaddq_s16((int16x8_t)v372, v452);
  int8x16_t v390 = (int8x16_t)vaddq_s16(v354, v452);
  int8x16_t v391 = (int8x16_t)vaddq_s16(v355, v452);
  int8x16_t v392 = (int8x16_t)vaddq_s16(v356, v452);
  int8x16_t v393 = (int8x16_t)vaddq_s16(v357, v452);
  int8x16_t v394 = (int8x16_t)vaddq_s16(v359, v452);
  int8x16_t v395 = (int8x16_t)vaddq_s16(v360, v452);
  int8x16_t v396 = (int8x16_t)vaddq_s16(v362, v452);
  int8x16_t v397 = (int8x16_t)vaddq_s16(v363, v452);
  int8x16_t v398 = (int8x16_t)vaddq_s16(v368, v452);
  int8x16_t v399 = (int8x16_t)vaddq_s16(v369, v452);
  int8x16_t v400 = (int8x16_t)vaddq_s16(v370, v452);
  int8x16_t v401 = (int8x16_t)vaddq_s16(v371, v452);
  v402.i64[0] = 0x10001000100010;
  v402.i64[1] = 0x10001000100010;
  int8x16_t v403 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v21, v402));
  int32x4_t v404 = (int16x8_t *)(a1 + a2);
  *(int16x8_t *)a1 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v386, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v386);
  *(int16x8_t *)(a1 + 16) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v388, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v388);
  *(int16x8_t *)(a1 + 32) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v394, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v394);
  *(int16x8_t *)(a1 + 48) = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v396, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v396);
  int32x4_t v405 = (int16x8_t *)(a1 + 2 * a2);
  *int32x4_t v404 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v387, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v387);
  v404[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v389, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v389);
  v404[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v395, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v395);
  v404[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v397, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v397);
  *int32x4_t v405 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v390, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v390);
  v405[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v392, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v392);
  v405[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v398, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v398);
  v405[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v400, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v400);
  int32x4_t v406 = (int16x8_t *)((char *)v405 + a2);
  *int32x4_t v406 = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v391, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v391);
  v406[1] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v393, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v393);
  v406[2] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v399, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v399);
  v406[3] = vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v401, (int8x16_t)xmmword_242EA77A0), v403), (int16x8_t)v401);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(uint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  unint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  int8x16_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v16, v13 + 64, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *int8x16_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  int8x16_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *int8x16_t v21 = 0;
    int8x16_t v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v25, v13 + v20 + 64, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int8x16_t v25 = 0;
LABEL_35:
  unint64_t v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *unint64_t v26 = 0;
    int64x2_t v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v30, v13 + 8 * a2 + 64, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int64x2_t v30 = 0;
LABEL_49:
  int64x2_t v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    BOOL v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int64x2_t v31 = 0;
    BOOL v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *BOOL v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v35, v13 + 12 * a2 + 64, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(uint64_t a1, unint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v7 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1, 128, a2, *a3, a4);
  unint64_t v8 = v7
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 64, 128, v7, a3[1], a4);
  unint64_t v9 = v8
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 512, 128, v8, a3[2], a4);
  unint64_t v10 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 576, 128, v9, a3[3], a4);
  unint64_t v11 = v10
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 1024, 128, v10, a3[4], a4);
  unint64_t v12 = v11
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 1088, 128, v11, a3[5], a4);
  unint64_t v13 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 1536, 128, v12, a3[6], a4);
  unsigned int v14 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)18,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 1600, 128, v13, v14, a4);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(int64x2_t *a1, uint64_t a2, int64x2_t *a3, unsigned int a4, int32x4_t a5, int32x4_t a6)
{
  switch(a4)
  {
    case 0x7Fu:
      int64x2_t v11 = *a3;
      int64x2_t v12 = a3[1];
      int64x2_t v13 = a3[2];
      int64x2_t v14 = a3[3];
      int64x2_t v15 = a3[4];
      int64x2_t v16 = a3[5];
      int64x2_t v17 = a3[6];
      int64x2_t v18 = a3[7];
      int v19 = (int64x2_t *)((char *)a1 + a2);
      *a1 = vzip1q_s64(*a3, v12);
      a1[1] = vzip1q_s64(v15, v16);
      uint64_t v20 = (int64x2_t *)((char *)a1 + 2 * a2);
      int64x2_t *v19 = vzip2q_s64(v11, v12);
      v19[1] = vzip2q_s64(v15, v16);
      int64x2_t *v20 = vzip1q_s64(v13, v14);
      v20[1] = vzip1q_s64(v17, v18);
      int8x16_t v21 = (int64x2_t *)((char *)v20 + a2);
      *int8x16_t v21 = vzip2q_s64(v13, v14);
      v21[1] = vzip2q_s64(v17, v18);
      return 128;
    case 3u:
      float32x4_t v22 = vld1q_dup_f32((const float *)a3->i32);
      *a1 = (int64x2_t)v22;
      a1[1] = (int64x2_t)v22;
      unsigned int v23 = (float32x4_t *)&a1->i8[a2];
      *unsigned int v23 = v22;
      v23[1] = v22;
      int v24 = (float32x4_t *)((char *)a1 + 2 * a2);
      float32x4_t *v24 = v22;
      v24[1] = v22;
      int8x16_t v25 = (float32x4_t *)((char *)a1 + 2 * a2 + a2);
      *int8x16_t v25 = v22;
      v25[1] = v22;
      return 4;
    case 0u:
      uint64_t v6 = 0;
      long long v7 = 0uLL;
      *a1 = 0u;
      a1[1] = 0u;
      unint64_t v8 = &a1->i8[a2];
      *(_OWORD *)unint64_t v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      unint64_t v9 = &a1->i8[2 * a2];
      *(_OWORD *)unint64_t v9 = 0u;
      *((_OWORD *)v9 + 1) = 0u;
      unint64_t v10 = &a1->i8[2 * a2 + a2];
LABEL_94:
      *(_OWORD *)unint64_t v10 = v7;
      *((_OWORD *)v10 + 1) = v7;
      return v6;
  }
  unint64_t v26 = 8 * (a3 & 7);
  unint64_t v27 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v26 + 18;
  uint64_t v29 = *(void *)((unint64_t)a3 & 0xFFFFFFFFFFFFFFF8) >> v26;
  if (v26 >= 0x2F) {
    v29 |= *(void *)(v27 + 8) << (-8 * (a3 & 7u));
  }
  a5.i32[0] = v29;
  a5.i32[1] = (unsigned __int16)v29 >> 5;
  *(int8x8_t *)a5.i8 = vand_s8(*(int8x8_t *)a5.i8, (int8x8_t)0x1F0000001FLL);
  *(int16x4_t *)a5.i8 = vmovn_s32(a5);
  a6.i32[0] = (unsigned __int16)v29 >> 10;
  a6.i32[1] = v29 >> 14;
  *(int32x2_t *)a6.i8 = vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)a6.i8, (int8x8_t)0xF0000000FLL), (int32x2_t)0x100000001);
  *(int16x4_t *)a6.i8 = vmovn_s32(a6);
  unint64_t v30 = v26 + 50;
  unint64_t v31 = v28 >> 6;
  unint64_t v32 = v28 & 0x3A;
  uint64_t v33 = *(void *)(v27 + 8 * v31) >> v32;
  if (v32 >= 0x21) {
    v33 |= *(void *)(v27 + 8 * v31 + 8) << -(char)v32;
  }
  int8x16_t v34 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a5.i8, 0);
  int8x16_t v35 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
  unint64_t v36 = (8 * (a3 & 7)) | 0x400;
  v37.i64[0] = 0x3000300030003;
  v37.i64[1] = 0x3000300030003;
  int16x8_t v38 = (int16x8_t)vandq_s8(v34, v37);
  int8x16_t v39 = vbicq_s8(v35, (int8x16_t)vceqq_s16(v38, (int16x8_t)v37));
  v37.i64[0] = 0x202020202020202;
  v37.i64[1] = 0x202020202020202;
  int8x16_t v40 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v34.i8, (int8x8_t)0x4000400040004)))), v37);
  if (vmaxvq_s8(v40) < 1)
  {
    int v50 = 0;
    v51.i64[0] = -1;
    v51.i64[1] = -1;
    int8x16_t v52 = v39;
    int8x16_t v53 = v39;
    int8x16_t v54 = v39;
    v55.i64[0] = -1;
    v55.i64[1] = -1;
    int8x16_t v56 = v39;
    v57.i64[0] = -1;
    v57.i64[1] = -1;
    v58.i64[0] = -1;
    v58.i64[1] = -1;
  }
  else
  {
    int8x16_t v41 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v40, v40));
    int8x16_t v42 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v41, (int16x8_t)v41));
    unint64_t v43 = vpaddq_s32((int32x4_t)v42, (int32x4_t)v42).u64[0];
    v44.i64[0] = v43;
    v44.i64[1] = HIDWORD(v43);
    int64x2_t v45 = v44;
    unint64_t v46 = vaddvq_s64(v44);
    unint64_t v47 = v30 + v46;
    if (v46 <= 0x80 && v36 >= v47)
    {
      unint64_t v59 = v30 & 0x3A;
      int64x2_t v60 = vaddq_s64(vdupq_n_s64(v59), vzip1q_s64((int64x2_t)0, v45));
      int16x8_t v61 = (int64x2_t *)(v27 + ((v30 >> 3) & 8));
      int8x16_t v49 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v61, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v60)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v61->i64[0], 0), (uint64x2_t)vnegq_s64(v60)));
      if (v59 + v46 < 0x81)
      {
        int v50 = 0;
      }
      else
      {
        int v50 = 0;
        int8x16_t v49 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v61[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v60)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v61[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v60))), v49);
      }
      unint64_t v30 = v47;
    }
    else
    {
      int8x16_t v49 = 0uLL;
      int v50 = 1;
    }
    int32x2_t v62 = vzip1_s32(*(int32x2_t *)v42.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
    v63.i64[0] = v62.u32[0];
    v63.i64[1] = v62.u32[1];
    int64x2_t v64 = (int64x2_t)vshlq_u64((uint64x2_t)v49, (uint64x2_t)vnegq_s64(v63));
    *(int32x2_t *)v49.i8 = vmovn_s64((int64x2_t)v49);
    *(int32x2_t *)v64.i8 = vmovn_s64(v64);
    int8x16_t v65 = (int8x16_t)vzip1q_s32((int32x4_t)v49, (int32x4_t)v64);
    int16x8_t v66 = (int16x8_t)vshlq_u32((uint32x4_t)v65, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v41.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)))));
    *(int16x4_t *)v65.i8 = vmovn_s32((int32x4_t)v65);
    *(int16x4_t *)v66.i8 = vmovn_s32((int32x4_t)v66);
    int16x8_t v67 = vzip1q_s16((int16x8_t)v65, v66);
    v65.i64[0] = 0x101010101010101;
    v65.i64[1] = 0x101010101010101;
    *(int8x8_t *)v68.i8 = vand_s8(vzip1_s8(vmovn_s16(v67), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v67, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v40.i8, *(int8x8_t *)v34.i8)))))), vadd_s8((int8x8_t)*(_OWORD *)&vshlq_s8(v65, v40), (int8x8_t)-1));
    v68.i64[1] = v68.i64[0];
    *(int8x8_t *)v68.i8 = vqtbl1_s8(v68, (int8x8_t)0x703060205010400);
    *(int16x4_t *)v67.i8 = vdup_lane_s16(*(int16x4_t *)v68.i8, 0);
    *(int16x4_t *)v65.i8 = vdup_lane_s16(*(int16x4_t *)v68.i8, 1);
    int8x8_t v69 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v68.i8, 2);
    int8x8_t v70 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v68.i8, 3);
    int8x16_t v56 = (int8x16_t)vsubw_s8((int16x8_t)v39, *(int8x8_t *)v67.i8);
    int8x16_t v54 = (int8x16_t)vsubw_s8((int16x8_t)v39, *(int8x8_t *)v65.i8);
    int8x16_t v53 = (int8x16_t)vsubw_s8((int16x8_t)v39, v69);
    int8x16_t v52 = (int8x16_t)vsubw_s8((int16x8_t)v39, v70);
    int8x16_t v58 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v67.i8));
    int8x16_t v57 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v65.i8));
    int8x16_t v55 = (int8x16_t)vmovl_s8(vceqz_s8(v69));
    int8x16_t v51 = (int8x16_t)vmovl_s8(vceqz_s8(v70));
  }
  v71.i64[0] = 0x8000800080008;
  v71.i64[1] = 0x8000800080008;
  int8x16_t v72 = 0uLL;
  int8x16_t v73 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v34, v71), (int8x16_t)0, 0xCuLL), v39);
  int8x16_t v74 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v73, (int16x8_t)v73));
  v71.i64[0] = vpaddq_s32((int32x4_t)v74, (int32x4_t)v74).u64[0];
  v75.i64[0] = v71.u32[0];
  v75.i64[1] = v71.u32[1];
  int64x2_t v76 = v75;
  unint64_t v77 = vaddvq_s64(v75);
  unint64_t v78 = v30 + v77;
  if (v77 <= 0x80 && v36 >= v78)
  {
    unint64_t v80 = v30 & 0x3F;
    int64x2_t v81 = vaddq_s64(vdupq_n_s64(v80), vzip1q_s64((int64x2_t)0, v76));
    int v82 = (int64x2_t *)(v27 + 8 * (v30 >> 6));
    int8x16_t v72 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v82, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v81)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v82->i64[0], 0), (uint64x2_t)vnegq_s64(v81)));
    if (v80 + v77 >= 0x81) {
      int8x16_t v72 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v82[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v81)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v82[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v81))), v72);
    }
    unint64_t v30 = v78;
  }
  else
  {
    int v50 = 1;
  }
  int v83 = v34.i8[0] & 3;
  if (v83 == 2)
  {
    BOOL v84 = v36 < v30 + 8;
    unint64_t v85 = v30 + 16;
    if (v36 >= v30 + 8) {
      v30 += 8;
    }
    if (v85 > v36 || v84) {
      int v50 = 1;
    }
    else {
      v30 += 8;
    }
  }
  int8x16_t v87 = 0uLL;
  int8x16_t v88 = vextq_s8((int8x16_t)0, v56, 0xCuLL);
  int8x16_t v89 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v88, (int16x8_t)v88));
  unint64_t v90 = vpaddq_s32((int32x4_t)v89, (int32x4_t)v89).u64[0];
  v91.i64[0] = v90;
  v91.i64[1] = HIDWORD(v90);
  int64x2_t v92 = v91;
  unint64_t v93 = vaddvq_s64(v91);
  unint64_t v94 = v30 + v93;
  if (v93 <= 0x80 && v36 >= v94)
  {
    unint64_t v97 = v30 & 0x3F;
    int64x2_t v98 = vaddq_s64(vdupq_n_s64(v97), vzip1q_s64((int64x2_t)0, v92));
    int v99 = (int64x2_t *)(v27 + 8 * (v30 >> 6));
    int8x16_t v96 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v99, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v98)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v99->i64[0], 0), (uint64x2_t)vnegq_s64(v98)));
    if (v97 + v93 >= 0x81) {
      int8x16_t v96 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v99[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v98)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v99[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v98))), v96);
    }
    unint64_t v30 = v94;
  }
  else
  {
    int v50 = 1;
    int8x16_t v96 = 0uLL;
  }
  int8x16_t v100 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v56, (int16x8_t)v56));
  unint64_t v101 = vpaddq_s32((int32x4_t)v100, (int32x4_t)v100).u64[0];
  v102.i64[0] = v101;
  v102.i64[1] = HIDWORD(v101);
  int64x2_t v103 = v102;
  unint64_t v104 = vaddvq_s64(v102);
  unint64_t v105 = v30 + v104;
  if (v104 <= 0x80 && v36 >= v105)
  {
    unint64_t v107 = v30 & 0x3F;
    int64x2_t v108 = vaddq_s64(vdupq_n_s64(v107), vzip1q_s64((int64x2_t)0, v103));
    BOOL v109 = (int64x2_t *)(v27 + 8 * (v30 >> 6));
    int8x16_t v87 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v109, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v108)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v109->i64[0], 0), (uint64x2_t)vnegq_s64(v108)));
    if (v107 + v104 >= 0x81) {
      int8x16_t v87 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v109[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v108)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v109[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v108))), v87);
    }
    unint64_t v30 = v105;
  }
  else
  {
    int v50 = 1;
  }
  int8x16_t v110 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v54, (int16x8_t)v54));
  unint64_t v111 = vpaddq_s32((int32x4_t)v110, (int32x4_t)v110).u64[0];
  v112.i64[0] = v111;
  v112.i64[1] = HIDWORD(v111);
  int64x2_t v113 = v112;
  unint64_t v114 = vaddvq_s64(v112);
  unint64_t v115 = v30 + v114;
  int8x16_t v116 = 0uLL;
  if (v114 <= 0x80 && v36 >= v115)
  {
    unint64_t v119 = v30 & 0x3F;
    int64x2_t v120 = vaddq_s64(vdupq_n_s64(v119), vzip1q_s64((int64x2_t)0, v113));
    uint32x4_t v121 = (int64x2_t *)(v27 + 8 * (v30 >> 6));
    int8x16_t v118 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v121, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v120)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v121->i64[0], 0), (uint64x2_t)vnegq_s64(v120)));
    if (v119 + v114 >= 0x81) {
      int8x16_t v118 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v121[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v120)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v121[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v120))), v118);
    }
    unint64_t v30 = v115;
    if (v114 > 0x80) {
      goto LABEL_68;
    }
  }
  else
  {
    int v50 = 1;
    int8x16_t v118 = 0uLL;
    if (v114 > 0x80) {
      goto LABEL_68;
    }
  }
  unint64_t v122 = v30 + v114;
  if (v36 >= v30 + v114)
  {
    unint64_t v123 = v30 & 0x3F;
    int64x2_t v124 = vaddq_s64(vdupq_n_s64(v123), vzip1q_s64((int64x2_t)0, v113));
    int16x8_t v125 = (int64x2_t *)(v27 + 8 * (v30 >> 6));
    int8x16_t v116 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v125, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v124)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v125->i64[0], 0), (uint64x2_t)vnegq_s64(v124)));
    if (v123 + v114 >= 0x81) {
      int8x16_t v116 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v125[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v124)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v125[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v124))), v116);
    }
    goto LABEL_69;
  }
LABEL_68:
  int v50 = 1;
  unint64_t v122 = v30;
LABEL_69:
  int8x16_t v126 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v53, (int16x8_t)v53));
  unint64_t v127 = vpaddq_s32((int32x4_t)v126, (int32x4_t)v126).u64[0];
  v128.i64[0] = v127;
  v128.i64[1] = HIDWORD(v127);
  int64x2_t v129 = v128;
  unint64_t v130 = vaddvq_s64(v128);
  int8x16_t v131 = 0uLL;
  if (v130 > 0x80 || (unint64_t v132 = v122 + v130, v36 < v122 + v130))
  {
    int v50 = 1;
    unint64_t v132 = v122;
    int8x16_t v135 = 0uLL;
  }
  else
  {
    int64x2_t v133 = vaddq_s64(vdupq_n_s64(v122 & 0x3F), vzip1q_s64((int64x2_t)0, v129));
    int16x8_t v134 = (int64x2_t *)(v27 + 8 * (v122 >> 6));
    int8x16_t v135 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v134, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v133)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v134->i64[0], 0), (uint64x2_t)vnegq_s64(v133)));
    if ((v122 & 0x3F) + v130 >= 0x81) {
      int8x16_t v135 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v134[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v133)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v134[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v133))), v135);
    }
  }
  if (v130 > 0x80 || (unint64_t v136 = v132 + v130, v36 < v132 + v130))
  {
    int v50 = 1;
    unint64_t v136 = v132;
  }
  else
  {
    int64x2_t v137 = vaddq_s64(vdupq_n_s64(v132 & 0x3F), vzip1q_s64((int64x2_t)0, v129));
    BOOL v138 = (int64x2_t *)(v27 + 8 * (v132 >> 6));
    int8x16_t v131 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v138, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v137)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v138->i64[0], 0), (uint64x2_t)vnegq_s64(v137)));
    if ((v132 & 0x3F) + v130 >= 0x81) {
      int8x16_t v131 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v138[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v137)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v138[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v137))), v131);
    }
  }
  int8x16_t v139 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v52, (int16x8_t)v52));
  unint64_t v140 = vpaddq_s32((int32x4_t)v139, (int32x4_t)v139).u64[0];
  v141.i64[0] = v140;
  v141.i64[1] = HIDWORD(v140);
  int64x2_t v142 = v141;
  unint64_t v143 = vaddvq_s64(v141);
  if (v143 > 0x80 || (unint64_t v144 = v136 + v143, v36 < v136 + v143))
  {
    int v50 = 1;
    unint64_t v144 = v136;
    int8x16_t v148 = 0uLL;
  }
  else
  {
    unint64_t v145 = v136 & 0x3F;
    int64x2_t v146 = vaddq_s64(vdupq_n_s64(v145), vzip1q_s64((int64x2_t)0, v142));
    int16x8_t v147 = (int64x2_t *)(v27 + 8 * (v136 >> 6));
    int8x16_t v148 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v147, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v146)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v147->i64[0], 0), (uint64x2_t)vnegq_s64(v146)));
    if (v145 + v143 >= 0x81) {
      int8x16_t v148 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v147[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v146)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v147[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v146))), v148);
    }
  }
  if (v143 > 0x80 || v36 < v144 + v143) {
    goto LABEL_92;
  }
  int64x2_t v149 = vaddq_s64(vdupq_n_s64(v144 & 0x3F), vzip1q_s64((int64x2_t)0, v142));
  int64x2_t v150 = (int64x2_t *)(v27 + 8 * (v144 >> 6));
  int8x16_t v151 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v150, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v149)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v150->i64[0], 0), (uint64x2_t)vnegq_s64(v149)));
  if ((v144 & 0x3F) + v143 >= 0x81) {
    int8x16_t v151 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v150[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v149)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v150[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v149))), v151);
  }
  if (v50 || (uint64_t v6 = a4 + 1, v36 + 8 * v6 - (v144 + v143) - 1024 >= 9))
  {
LABEL_92:
    uint64_t v6 = 0;
    unint64_t v152 = (unint64_t)&v264;
LABEL_93:
    *(void *)(v152 & 0xFFFFFFFFFFFFFFF8) |= 0xFFFFLL << ((8 * v152) & 0x20);
    long long v7 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    unint64_t v153 = &a1->i8[a2];
    *(_OWORD *)unint64_t v153 = 0u;
    *((_OWORD *)v153 + 1) = 0u;
    unint64_t v154 = &a1->i8[2 * a2];
    unint64_t v10 = &a1->i8[2 * a2 + a2];
    *(_OWORD *)unint64_t v154 = 0u;
    *((_OWORD *)v154 + 1) = 0u;
    goto LABEL_94;
  }
  if (v83 == 2)
  {
    uint64_t v6 = 0;
    unint64_t v152 = (unint64_t)&v265;
    goto LABEL_93;
  }
  int32x2_t v156 = vzip1_s32(*(int32x2_t *)v74.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
  int32x2_t v157 = vzip1_s32(*(int32x2_t *)v110.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
  v158.i64[0] = v156.u32[0];
  v158.i64[1] = v156.u32[1];
  int64x2_t v159 = v158;
  v158.i64[0] = v157.u32[0];
  v158.i64[1] = v157.u32[1];
  uint64x2_t v160 = (uint64x2_t)vnegq_s64(v159);
  uint64x2_t v161 = (uint64x2_t)vnegq_s64(v158);
  int64x2_t v162 = (int64x2_t)vshlq_u64((uint64x2_t)v72, v160);
  *(int32x2_t *)v72.i8 = vmovn_s64((int64x2_t)v72);
  *(int32x2_t *)v162.i8 = vmovn_s64(v162);
  int16x8_t v163 = (int16x8_t)vzip1q_s32((int32x4_t)v72, (int32x4_t)v162);
  int64x2_t v164 = (int64x2_t)vshlq_u64((uint64x2_t)v118, v161);
  *(int32x2_t *)v118.i8 = vmovn_s64((int64x2_t)v118);
  *(int32x2_t *)v164.i8 = vmovn_s64(v164);
  int16x8_t v165 = (int16x8_t)vzip1q_s32((int32x4_t)v118, (int32x4_t)v164);
  int64x2_t v166 = (int64x2_t)vshlq_u64((uint64x2_t)v116, v161);
  *(int32x2_t *)v116.i8 = vmovn_s64((int64x2_t)v116);
  *(int32x2_t *)v166.i8 = vmovn_s64(v166);
  int16x8_t v167 = (int16x8_t)vzip1q_s32((int32x4_t)v116, (int32x4_t)v166);
  uint32x4_t v168 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v54.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL))));
  int16x8_t v169 = (int16x8_t)vshlq_u32((uint32x4_t)v163, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v73.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)))));
  *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
  *(int16x4_t *)v169.i8 = vmovn_s32((int32x4_t)v169);
  int16x8_t v170 = vzip1q_s16(v163, v169);
  int16x8_t v171 = (int16x8_t)vshlq_u32((uint32x4_t)v165, v168);
  int16x8_t v172 = (int16x8_t)vshlq_u32((uint32x4_t)v167, v168);
  *(int16x4_t *)v165.i8 = vmovn_s32((int32x4_t)v165);
  *(int16x4_t *)v171.i8 = vmovn_s32((int32x4_t)v171);
  *(int16x4_t *)v167.i8 = vmovn_s32((int32x4_t)v167);
  *(int16x4_t *)v172.i8 = vmovn_s32((int32x4_t)v172);
  int16x8_t v173 = vzip1q_s16(v165, v171);
  v171.i64[0] = 0x10001000100010;
  v171.i64[1] = 0x10001000100010;
  int16x8_t v174 = vzip1q_s16(v167, v172);
  v172.i64[0] = 0xF000F000F000FLL;
  v172.i64[1] = 0xF000F000F000FLL;
  int16x8_t v175 = vsubq_s16(v171, (int16x8_t)v73);
  int16x8_t v176 = vaddq_s16((int16x8_t)v73, v172);
  v172.i64[0] = 0x10001000100010;
  v172.i64[1] = 0x10001000100010;
  int16x8_t v177 = vshlq_s16(v170, v175);
  v175.i64[0] = 0xF000F000F000FLL;
  v175.i64[1] = 0xF000F000F000FLL;
  int16x8_t v178 = vsubq_s16(v172, (int16x8_t)v54);
  int16x8_t v179 = vaddq_s16((int16x8_t)v54, v175);
  int16x8_t v180 = vshlq_s16(v174, v178);
  int8x16_t v181 = (int8x16_t)vshlq_s16(v177, v176);
  int16x8_t v182 = vshlq_s16(vshlq_s16(v173, v178), v179);
  int8x16_t v183 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v181.i8, 0);
  int16x8_t v184 = (int16x8_t)vandq_s8(v57, v183);
  int16x8_t v185 = vsubq_s16(v182, v184);
  int16x8_t v186 = vsubq_s16(vshlq_s16(v180, v179), v184);
  *(int32x2_t *)v182.i8 = vzip1_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
  *(int32x2_t *)v180.i8 = vzip1_s32(*(int32x2_t *)v139.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v139, v139, 8uLL));
  v158.i64[0] = v182.u32[0];
  v158.i64[1] = v182.u32[1];
  int64x2_t v187 = v158;
  v158.i64[0] = v180.u32[0];
  v158.i64[1] = v180.u32[1];
  uint64x2_t v188 = (uint64x2_t)vnegq_s64(v187);
  int64x2_t v189 = (int64x2_t)vshlq_u64((uint64x2_t)v135, v188);
  *(int32x2_t *)v184.i8 = vmovn_s64((int64x2_t)v135);
  *(int32x2_t *)v189.i8 = vmovn_s64(v189);
  int16x8_t v190 = (int16x8_t)vzip1q_s32((int32x4_t)v184, (int32x4_t)v189);
  uint64x2_t v191 = (uint64x2_t)vnegq_s64(v158);
  int64x2_t v192 = (int64x2_t)vshlq_u64((uint64x2_t)v131, v188);
  *(int32x2_t *)v131.i8 = vmovn_s64((int64x2_t)v131);
  *(int32x2_t *)v192.i8 = vmovn_s64(v192);
  int16x8_t v193 = (int16x8_t)vzip1q_s32((int32x4_t)v131, (int32x4_t)v192);
  int64x2_t v194 = (int64x2_t)vshlq_u64((uint64x2_t)v148, v191);
  *(int32x2_t *)v135.i8 = vmovn_s64((int64x2_t)v148);
  *(int32x2_t *)v194.i8 = vmovn_s64(v194);
  uint32x4_t v195 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v53.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL))));
  int16x8_t v196 = (int16x8_t)vzip1q_s32((int32x4_t)v135, (int32x4_t)v194);
  int16x8_t v197 = (int16x8_t)vshlq_u32((uint32x4_t)v190, v195);
  int16x8_t v198 = (int16x8_t)vshlq_u32((uint32x4_t)v193, v195);
  *(int16x4_t *)v190.i8 = vmovn_s32((int32x4_t)v190);
  *(int16x4_t *)v197.i8 = vmovn_s32((int32x4_t)v197);
  *(int16x4_t *)v193.i8 = vmovn_s32((int32x4_t)v193);
  *(int16x4_t *)v198.i8 = vmovn_s32((int32x4_t)v198);
  int16x8_t v199 = vzip1q_s16(v190, v197);
  v197.i64[0] = 0x10001000100010;
  v197.i64[1] = 0x10001000100010;
  int16x8_t v200 = vzip1q_s16(v193, v198);
  v198.i64[0] = 0xF000F000F000FLL;
  v198.i64[1] = 0xF000F000F000FLL;
  int16x8_t v201 = vsubq_s16(v197, (int16x8_t)v53);
  int16x8_t v202 = vaddq_s16((int16x8_t)v53, v198);
  uint32x4_t v203 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v52.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL))));
  int16x8_t v204 = vshlq_s16(vshlq_s16(v199, v201), v202);
  int16x8_t v205 = vshlq_s16(vshlq_s16(v200, v201), v202);
  int16x8_t v206 = (int16x8_t)vandq_s8(v55, v183);
  int16x8_t v207 = vsubq_s16(v204, v206);
  int16x8_t v208 = vsubq_s16(v205, v206);
  int16x8_t v209 = (int16x8_t)vshlq_u32((uint32x4_t)v196, v203);
  *(int16x4_t *)v204.i8 = vmovn_s32((int32x4_t)v196);
  *(int16x4_t *)v209.i8 = vmovn_s32((int32x4_t)v209);
  v196.i64[0] = 0x10001000100010;
  v196.i64[1] = 0x10001000100010;
  int16x8_t v210 = vzip1q_s16(v204, v209);
  v204.i64[0] = 0xF000F000F000FLL;
  v204.i64[1] = 0xF000F000F000FLL;
  int16x8_t v211 = vsubq_s16(v196, (int16x8_t)v52);
  int16x8_t v212 = vaddq_s16((int16x8_t)v52, v204);
  int64x2_t v213 = (int64x2_t)vshlq_u64((uint64x2_t)v151, v191);
  *(int32x2_t *)v204.i8 = vmovn_s64((int64x2_t)v151);
  *(int32x2_t *)v213.i8 = vmovn_s64(v213);
  int16x8_t v214 = (int16x8_t)vzip1q_s32((int32x4_t)v204, (int32x4_t)v213);
  int16x8_t v215 = (int16x8_t)vshlq_u32((uint32x4_t)v214, v203);
  *(int16x4_t *)v214.i8 = vmovn_s32((int32x4_t)v214);
  *(int16x4_t *)v215.i8 = vmovn_s32((int32x4_t)v215);
  int16x8_t v216 = vshlq_s16(vshlq_s16(vzip1q_s16(v214, v215), v211), v212);
  int16x8_t v217 = (int16x8_t)vandq_s8(v51, v183);
  int16x8_t v218 = vsubq_s16(vshlq_s16(vshlq_s16(v210, v211), v212), v217);
  int16x8_t v219 = vsubq_s16(v216, v217);
  int32x2_t v220 = vzip1_s32(*(int32x2_t *)v89.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL));
  int32x2_t v221 = vzip1_s32(*(int32x2_t *)v100.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v100, v100, 8uLL));
  v158.i64[0] = v220.u32[0];
  v158.i64[1] = v220.u32[1];
  int64x2_t v222 = v158;
  v158.i64[0] = v221.u32[0];
  v158.i64[1] = v221.u32[1];
  int64x2_t v223 = (int64x2_t)vshlq_u64((uint64x2_t)v96, (uint64x2_t)vnegq_s64(v222));
  *(int32x2_t *)v96.i8 = vmovn_s64((int64x2_t)v96);
  *(int32x2_t *)v223.i8 = vmovn_s64(v223);
  int16x8_t v224 = (int16x8_t)vzip1q_s32((int32x4_t)v96, (int32x4_t)v223);
  int64x2_t v225 = (int64x2_t)vshlq_u64((uint64x2_t)v87, (uint64x2_t)vnegq_s64(v158));
  *(int32x2_t *)v87.i8 = vmovn_s64((int64x2_t)v87);
  *(int32x2_t *)v225.i8 = vmovn_s64(v225);
  int16x8_t v226 = (int16x8_t)vzip1q_s32((int32x4_t)v87, (int32x4_t)v225);
  int16x8_t v227 = (int16x8_t)vshlq_u32((uint32x4_t)v224, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v88.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL)))));
  int16x8_t v228 = (int16x8_t)vshlq_u32((uint32x4_t)v226, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v56.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)))));
  *(int16x4_t *)v224.i8 = vmovn_s32((int32x4_t)v224);
  *(int16x4_t *)v227.i8 = vmovn_s32((int32x4_t)v227);
  *(int16x4_t *)v226.i8 = vmovn_s32((int32x4_t)v226);
  *(int16x4_t *)v228.i8 = vmovn_s32((int32x4_t)v228);
  int16x8_t v229 = vzip1q_s16(v224, v227);
  v227.i64[0] = 0x10001000100010;
  v227.i64[1] = 0x10001000100010;
  int16x8_t v230 = vzip1q_s16(v226, v228);
  v228.i64[0] = 0xF000F000F000FLL;
  v228.i64[1] = 0xF000F000F000FLL;
  int16x8_t v231 = vaddq_s16((int16x8_t)vandq_s8(v181, v58), vshlq_s16(vshlq_s16(v229, vsubq_s16(v227, (int16x8_t)v88)), vaddq_s16((int16x8_t)v88, v228)));
  int16x8_t v232 = (int16x8_t)vandq_s8(v58, v183);
  v233.i64[0] = 0x1000100010001;
  v233.i64[1] = 0x1000100010001;
  int16x8_t v234 = vceqq_s16(v38, (int16x8_t)v233);
  int v235 = (unsigned __int16)vaddvq_s16(v234);
  int8x16_t v236 = (int8x16_t)vsubq_s16(v231, v232);
  int8x16_t v237 = (int8x16_t)vsubq_s16(vshlq_s16(vshlq_s16(v230, vsubq_s16(v227, (int16x8_t)v56)), vaddq_s16((int16x8_t)v56, v228)), v232);
  v234.i32[0] = v33;
  int16x8_t v238 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v234.i8, 0);
  if (v235)
  {
    int8x16_t v239 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v34, v233));
    int8x16_t v240 = v237;
    v240.i32[3] = v236.i32[0];
    int8x16_t v241 = v236;
    v241.i32[0] = v237.i32[3];
    v266.val[0] = vbslq_s8(v239, v241, v236);
    v266.val[1] = vbslq_s8(v239, v240, v237);
    v242.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v242.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v267.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v266, (int8x16_t)xmmword_242EA7570), v239), (int16x8_t)v266.val[0]);
    v267.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v266.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v266, v242), v239));
    int8x16_t v236 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v267, (int8x16_t)xmmword_242EA7580), v239), (int16x8_t)v267.val[0]);
    int8x16_t v237 = (int8x16_t)vaddq_s16((int16x8_t)v267.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v267, v242), v239));
    v267.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v185.i8, (int8x16_t)xmmword_242EA7590), v239), v185);
    v267.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v185.i8, (int8x16_t)xmmword_242EA75A0), v239), v186);
    int16x8_t v185 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v267, (int8x16_t)xmmword_242EA75B0), v239), (int16x8_t)v267.val[0]);
    int16x8_t v186 = vaddq_s16((int16x8_t)v267.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v267, v242), v239));
    v267.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v207.i8, (int8x16_t)xmmword_242EA75C0), v239), v207);
    v267.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v207.i8, (int8x16_t)xmmword_242EA7570), v239), v208);
    int16x8_t v207 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v267, v242), v239), (int16x8_t)v267.val[0]);
    int16x8_t v208 = vaddq_s16((int16x8_t)v267.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v267, (int8x16_t)xmmword_242EA75D0), v239));
    v266.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v218.i8, (int8x16_t)xmmword_242EA75E0), v239), v218);
    v266.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v218.i8, (int8x16_t)xmmword_242EA7570), v239), v219);
    int16x8_t v218 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v266, v242), v239), (int16x8_t)v266.val[0]);
    int16x8_t v219 = vaddq_s16((int16x8_t)v266.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v266, (int8x16_t)xmmword_242EA75F0), v239));
  }
  int8x16_t v243 = (int8x16_t)vaddq_s16((int16x8_t)v236, v238);
  int8x16_t v244 = (int8x16_t)vaddq_s16((int16x8_t)v237, v238);
  int8x16_t v245 = (int8x16_t)vaddq_s16(v185, v238);
  int8x16_t v246 = (int8x16_t)vaddq_s16(v186, v238);
  int8x16_t v247 = (int8x16_t)vaddq_s16(v207, v238);
  int8x16_t v248 = (int8x16_t)vaddq_s16(v208, v238);
  int8x16_t v249 = (int8x16_t)vaddq_s16(v218, v238);
  int8x16_t v250 = (int8x16_t)vaddq_s16(v219, v238);
  v251.i64[0] = 0x10001000100010;
  v251.i64[1] = 0x10001000100010;
  int8x16_t v252 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v34, v251));
  int64x2_t v253 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v243, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v243);
  int64x2_t v254 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v244, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v244);
  int64x2_t v255 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v245, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v245);
  int64x2_t v256 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v246, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v246);
  int64x2_t v257 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v247, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v247);
  int64x2_t v258 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v248, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v248);
  int64x2_t v259 = (int64x2_t *)((char *)a1 + a2);
  *a1 = vzip1q_s64(v253, v254);
  a1[1] = vzip1q_s64(v257, v258);
  int16x8_t v260 = (int64x2_t *)((char *)a1 + 2 * a2);
  int64x2_t v261 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v249, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v249);
  *int64x2_t v259 = vzip2q_s64(v253, v254);
  v259[1] = vzip2q_s64(v257, v258);
  int64x2_t v262 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v250, (int8x16_t)xmmword_242EA76C0), v252), (int16x8_t)v250);
  *int16x8_t v260 = vzip1q_s64(v255, v256);
  v260[1] = vzip1q_s64(v261, v262);
  int64x2_t v263 = (int64x2_t *)((char *)v260 + a2);
  *int64x2_t v263 = vzip2q_s64(v255, v256);
  v263[1] = vzip2q_s64(v261, v262);
  return v6;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressMacroblock(int64x2_t *a1, int64x2_t *a2, unsigned __int8 *a3, int32x4_t a4, int32x4_t a5)
{
  long long v7 = (int64x2_t *)((char *)a2
                   + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1, 64, a2, *a3, a4, a5));
  unint64_t v10 = (int64x2_t *)((char *)v7
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 2, 64, v7, a3[1], v8, v9));
  int64x2_t v13 = (int64x2_t *)((char *)v10
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 16, 64, v10, a3[2], v11, v12));
  int64x2_t v16 = (int64x2_t *)((char *)v13
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 18, 64, v13, a3[3], v14, v15));
  int v19 = (int64x2_t *)((char *)v16
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 32, 64, v16, a3[4], v17, v18));
  float32x4_t v22 = (int64x2_t *)((char *)v19
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 34, 64, v19, a3[5], v20, v21));
  int8x16_t v25 = (int64x2_t *)((char *)v22
                    + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 48, 64, v22, a3[6], v23, v24));
  unsigned int v28 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)1,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::decompressSubblock(a1 + 50, 64, v25, v28, v26, v27);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(int16x8_t *a1, char *a2, int64x2_t *a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  int64x2_t v7 = a3[1];
  uint64_t v6 = (int64x2_t *)((char *)a3 + 2 * a4);
  int64x2_t v8 = *(int64x2_t *)((char *)a3 + a4);
  int64x2_t v9 = *(int64x2_t *)((char *)&a3[1] + a4);
  int16x8_t v10 = (int16x8_t)vzip1q_s64(*a3, v8);
  int8x16_t v11 = (int8x16_t)vzip2q_s64(*a3, v8);
  int16x8_t v12 = (int16x8_t)vzip1q_s64(v7, v9);
  int16x8_t v13 = (int16x8_t)vzip2q_s64(v7, v9);
  int64x2_t v15 = *v6;
  int64x2_t v16 = v6[1];
  int32x4_t v14 = (int64x2_t *)((char *)v6 + a4);
  int64x2_t v17 = v14[1];
  int16x8_t v18 = (int16x8_t)vzip1q_s64(v15, *v14);
  int16x8_t v19 = (int16x8_t)vzip1q_s64(v16, v17);
  int16x8_t v20 = (int16x8_t)vzip2q_s64(v16, v17);
  int16x8_t v21 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 0);
  int8x16_t v391 = (int8x16_t)vsubq_s16(v10, v21);
  int8x16_t v393 = (int8x16_t)vsubq_s16((int16x8_t)v11, v21);
  int16x8_t v389 = (int16x8_t)vzip2q_s64(v15, *v14);
  int8x16_t v395 = (int8x16_t)vsubq_s16(v18, v21);
  int8x16_t v396 = (int8x16_t)vsubq_s16(v389, v21);
  int8x16_t v397 = (int8x16_t)vsubq_s16(v12, v21);
  int8x16_t v398 = (int8x16_t)vsubq_s16(v13, v21);
  int8x16_t v399 = (int8x16_t)vsubq_s16(v19, v21);
  int8x16_t v400 = (int8x16_t)vsubq_s16(v20, v21);
  int16x8_t v22 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v391, (int16x8_t)v393), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v23 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v391, (int16x8_t)v393), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v24 = vpmaxq_s16(v22, v22);
  int16x8_t v25 = vpminq_s16(v23, v23);
  int16x8_t v26 = vpmaxq_s16(v24, v24);
  int16x8_t v27 = vpminq_s16(v25, v25);
  v28.i64[0] = 0x8000800080008000;
  v28.i64[1] = 0x8000800080008000;
  int16x8_t v29 = vmaxq_s16(v26, v28);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  int16x8_t v31 = vminq_s16(v27, v30);
  int16x8_t v32 = vzip1q_s16(v26, v27);
  v33.i64[0] = 0x10001000100010;
  v33.i64[1] = 0x10001000100010;
  int16x8_t v34 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v32)), (int8x16_t)vceqzq_s16(v32));
  int16x8_t v35 = vpmaxq_s16(v34, v34);
  int16x8_t v36 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v395, (int16x8_t)v396), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v37 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v395, (int16x8_t)v396), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v38 = vpmaxq_s16(v36, v36);
  int16x8_t v39 = vpminq_s16(v37, v37);
  int16x8_t v40 = vpmaxq_s16(v38, v38);
  int16x8_t v41 = vpminq_s16(v39, v39);
  int16x8_t v42 = vmaxq_s16(v29, v40);
  int16x8_t v43 = vminq_s16(v31, v41);
  int16x8_t v44 = vzip1q_s16(v40, v41);
  int16x8_t v45 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v44)), (int8x16_t)vceqzq_s16(v44));
  int16x8_t v46 = vpmaxq_s16(v45, v45);
  int16x8_t v47 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v397, (int16x8_t)v398), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v397, (int16x8_t)v398), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v49 = vpmaxq_s16(v47, v47);
  int16x8_t v50 = vpminq_s16(v48, v48);
  int16x8_t v51 = vpmaxq_s16(v49, v49);
  int16x8_t v52 = vpminq_s16(v50, v50);
  int16x8_t v53 = vmaxq_s16(v42, v51);
  int16x8_t v54 = vminq_s16(v43, v52);
  int16x8_t v55 = vzip1q_s16(v51, v52);
  int16x8_t v56 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v55)), (int8x16_t)vceqzq_s16(v55));
  int16x8_t v57 = vpmaxq_s16(v56, v56);
  int16x8_t v58 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v399, (int16x8_t)v400), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v399, (int16x8_t)v400), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v60 = vpmaxq_s16(v58, v58);
  int16x8_t v61 = vpminq_s16(v59, v59);
  int16x8_t v62 = vpmaxq_s16(v60, v60);
  int16x8_t v63 = vpminq_s16(v61, v61);
  int16x8_t v64 = vmaxq_s16(v53, v62);
  int16x8_t v65 = vminq_s16(v54, v63);
  int16x8_t v66 = vzip1q_s16(v62, v63);
  int16x8_t v67 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v66)), (int8x16_t)vceqzq_s16(v66));
  v63.i64[0] = -1;
  v63.i64[1] = -1;
  int16x8_t v68 = vpmaxq_s16(v67, v67);
  int8x16_t v69 = (int8x16_t)vmaxq_s16(vmaxq_s16(v35, v46), vmaxq_s16(v57, v68));
  int16x8_t v70 = vclzq_s16(vsubq_s16(v64, v65));
  v31.i64[0] = 0xF000F000F000FLL;
  v31.i64[1] = 0xF000F000F000FLL;
  int16x8_t v71 = vsubq_s16(v31, v70);
  int8x16_t v72 = (int8x16_t)vsubq_s16((int16x8_t)v33, v70);
  int8x16_t v73 = (int8x16_t)vsubq_s16(vshlq_s16(v63, v71), v65);
  int8x16_t v74 = (int8x16_t)vcgtq_s16((int16x8_t)v69, (int16x8_t)v72);
  int8x16_t v407 = vbslq_s8(v74, v72, v69);
  int8x16_t v408 = (int8x16_t)v65;
  int8x16_t v409 = (int8x16_t)v64;
  int8x16_t v410 = vandq_s8(v73, v74);
  v75.i64[0] = 0x8000800080008;
  v75.i64[1] = 0x8000800080008;
  int8x16_t v76 = vandq_s8(v74, v75);
  v77.i64[0] = 0x3000300030003;
  v77.i64[1] = 0x3000300030003;
  int16x8_t v78 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v407, v35), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v79 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v407, v46), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v80 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v407, v57), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v81 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v407, v68), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v403 = vsubq_s16((int16x8_t)v407, v78);
  int16x8_t v404 = vsubq_s16((int16x8_t)v407, v79);
  int16x8_t v405 = vsubq_s16((int16x8_t)v407, v80);
  int16x8_t v406 = vsubq_s16((int16x8_t)v407, v81);
  v82.i64[0] = 0x4000400040004;
  v82.i64[1] = 0x4000400040004;
  int8x16_t v83 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v407), v77), v76), vbicq_s8(v82, (int8x16_t)vceqq_s16(vaddq_s16(v81, v80), vnegq_s16(vaddq_s16(v78, v79)))));
  int8x16_t v401 = (int8x16_t)v21;
  int8x16_t v402 = v83;
  if (vmaxvq_s16((int16x8_t)v407))
  {
    int16x8_t v390 = v18;
    int16x8_t v385 = v20;
    int16x8_t v387 = v19;
    int16x8_t v386 = v13;
    int16x8_t v388 = v12;
    int8x16_t v84 = (int8x16_t)vsubq_s16((int16x8_t)v391, (int16x8_t)vqtbl1q_s8(v391, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v393, (int16x8_t)vqtbl1q_s8(v393, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v86 = (int8x16_t)vsubq_s16((int16x8_t)v395, (int16x8_t)vqtbl1q_s8(v395, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v87 = (int8x16_t)vsubq_s16((int16x8_t)v396, (int16x8_t)vqtbl1q_s8(v396, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v88 = (int8x16_t)vsubq_s16((int16x8_t)v397, (int16x8_t)vqtbl1q_s8(v397, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v398, (int16x8_t)vqtbl1q_s8(v398, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v399, (int16x8_t)vqtbl1q_s8(v399, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v400, (int16x8_t)vqtbl1q_s8(v400, (int8x16_t)xmmword_242EA76C0));
    int16x8_t v92 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v84, (int16x8_t)v85), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v84, (int16x8_t)v85), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v94 = vpmaxq_s16(v92, v92);
    int16x8_t v95 = vpminq_s16(v93, v93);
    int16x8_t v96 = vpmaxq_s16(v94, v94);
    int16x8_t v97 = vpminq_s16(v95, v95);
    int16x8_t v98 = vmaxq_s16(v96, v28);
    int16x8_t v99 = vminq_s16(v97, v30);
    int16x8_t v100 = vzip1q_s16(v96, v97);
    int16x8_t v101 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v100)), (int8x16_t)vceqzq_s16(v100));
    int16x8_t v102 = vpmaxq_s16(v101, v101);
    int16x8_t v103 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v86, (int16x8_t)v87), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v86, (int16x8_t)v87), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v105 = vpmaxq_s16(v103, v103);
    int16x8_t v106 = vpminq_s16(v104, v104);
    int16x8_t v107 = vpmaxq_s16(v105, v105);
    int16x8_t v108 = vpminq_s16(v106, v106);
    int16x8_t v109 = vmaxq_s16(v98, v107);
    int16x8_t v110 = vminq_s16(v99, v108);
    int16x8_t v111 = vzip1q_s16(v107, v108);
    int16x8_t v112 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v111)), (int8x16_t)vceqzq_s16(v111));
    int16x8_t v113 = vpmaxq_s16(v112, v112);
    int16x8_t v114 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v88, (int16x8_t)v89), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v115 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v88, (int16x8_t)v89), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v116 = vpmaxq_s16(v114, v114);
    int16x8_t v117 = vpminq_s16(v115, v115);
    int16x8_t v118 = vpmaxq_s16(v116, v116);
    int16x8_t v119 = vpminq_s16(v117, v117);
    int16x8_t v120 = vmaxq_s16(v109, v118);
    int16x8_t v121 = vminq_s16(v110, v119);
    int16x8_t v122 = vzip1q_s16(v118, v119);
    int16x8_t v123 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v122)), (int8x16_t)vceqzq_s16(v122));
    int16x8_t v124 = vpmaxq_s16(v123, v123);
    int16x8_t v125 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v90, (int16x8_t)v91), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v126 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v90, (int16x8_t)v91), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v127 = vpmaxq_s16(v125, v125);
    int16x8_t v128 = vpminq_s16(v126, v126);
    int16x8_t v129 = vpmaxq_s16(v127, v127);
    int16x8_t v130 = vpminq_s16(v128, v128);
    int8x16_t v131 = (int8x16_t)vmaxq_s16(v120, v129);
    int8x16_t v132 = (int8x16_t)vminq_s16(v121, v130);
    int16x8_t v133 = vzip1q_s16(v129, v130);
    int16x8_t v134 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v33, vclsq_s16(v133)), (int8x16_t)vceqzq_s16(v133));
    int16x8_t v135 = vpmaxq_s16(v134, v134);
    int8x16_t v136 = (int8x16_t)vmaxq_s16(vmaxq_s16(v102, v113), vmaxq_s16(v124, v135));
    int16x8_t v137 = vclzq_s16(vsubq_s16((int16x8_t)v131, (int16x8_t)v132));
    int8x16_t v138 = (int8x16_t)vsubq_s16((int16x8_t)v33, v137);
    int8x16_t v139 = (int8x16_t)vcgtq_s16((int16x8_t)v136, (int16x8_t)v138);
    int8x16_t v140 = vbslq_s8(v139, v138, v136);
    v136.i64[0] = 0x18001800180018;
    v136.i64[1] = 0x18001800180018;
    int8x16_t v141 = vbslq_s8(v139, v136, v33);
    int16x8_t v142 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v140, v102), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v143 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v140, v113), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v144 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v140, v124), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v145 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v140, v135), (int16x8_t)v77), (int16x8_t)0);
    int8x16_t v146 = (int8x16_t)vsubq_s16((int16x8_t)v140, v142);
    int8x16_t v147 = (int8x16_t)vsubq_s16((int16x8_t)v140, v143);
    int8x16_t v148 = (int8x16_t)vsubq_s16((int16x8_t)v140, v144);
    int8x16_t v149 = (int8x16_t)vsubq_s16((int16x8_t)v140, v145);
    int8x16_t v150 = vbicq_s8(v82, (int8x16_t)vceqq_s16(vaddq_s16(v145, v144), vnegq_s16(vaddq_s16(v142, v143))));
    v151.i64[0] = 0x7000700070007;
    v151.i64[1] = 0x7000700070007;
    int8x16_t v152 = v407;
    int16x8_t v153 = (int16x8_t)vbicq_s8(v407, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v76, v75)));
    int16x8_t v154 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v75);
    int16x8_t v155 = (int16x8_t)vandq_s8(v83, v77);
    v156.i64[0] = 0x2000200020002;
    v156.i64[1] = 0x2000200020002;
    int16x8_t v157 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v155, v156), v33);
    int16x8_t v158 = v403;
    int16x8_t v159 = v404;
    int16x8_t v160 = vaddq_s16(vaddq_s16(v153, v154), v157);
    int16x8_t v162 = v405;
    int16x8_t v161 = v406;
    int8x16_t v163 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v160, v403, v151), vshlq_n_s16(vaddq_s16(vaddq_s16(v405, v404), v406), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v140, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v141 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v150, (int16x8_t)v150)), (int16x8_t)v146, v151), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v148, (int16x8_t)v147), (int16x8_t)v149), 3uLL))), 0);
    int v164 = (unsigned __int16)vaddvq_s16((int16x8_t)v163);
    BOOL v166 = a5 < 4 || a6 < 2;
    if (v164)
    {
      v167.i64[0] = 0x3000300030003;
      v167.i64[1] = 0x3000300030003;
      int8x16_t v391 = vbslq_s8(v163, v84, v391);
      int8x16_t v393 = vbslq_s8(v163, v85, v393);
      int8x16_t v168 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v140), v167), v141), v150);
      v169.i64[0] = 0xF000F000F000FLL;
      v169.i64[1] = 0xF000F000F000FLL;
      v167.i64[0] = -1;
      v167.i64[1] = -1;
      int8x16_t v395 = vbslq_s8(v163, v86, v395);
      int8x16_t v396 = vbslq_s8(v163, v87, v396);
      int8x16_t v397 = vbslq_s8(v163, v88, v397);
      int8x16_t v398 = vbslq_s8(v163, v89, v398);
      int8x16_t v399 = vbslq_s8(v163, v90, v399);
      int8x16_t v400 = vbslq_s8(v163, v91, v400);
      int16x8_t v158 = (int16x8_t)vbslq_s8(v163, v146, (int8x16_t)v403);
      int16x8_t v159 = (int16x8_t)vbslq_s8(v163, v147, (int8x16_t)v404);
      int16x8_t v403 = v158;
      int16x8_t v404 = v159;
      int16x8_t v162 = (int16x8_t)vbslq_s8(v163, v148, (int8x16_t)v405);
      int16x8_t v161 = (int16x8_t)vbslq_s8(v163, v149, (int8x16_t)v406);
      int16x8_t v405 = v162;
      int16x8_t v406 = v161;
      int8x16_t v409 = vbslq_s8(v163, v131, v409);
      int8x16_t v410 = vbslq_s8(v163, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v167, vsubq_s16(v169, v137)), (int16x8_t)v132), v139), v410);
      int8x16_t v152 = vbslq_s8(v163, v140, v407);
      int8x16_t v407 = v152;
      int8x16_t v408 = vbslq_s8(v163, v132, v408);
      int8x16_t v83 = vbslq_s8(v163, v168, v83);
      int8x16_t v401 = vbslq_s8(v163, (int8x16_t)vsubq_s16((int16x8_t)v401, (int16x8_t)vqtbl1q_s8(v401, (int8x16_t)xmmword_242EA76C0)), v401);
      int8x16_t v402 = v83;
    }
    int16x8_t v170 = v390;
    if (!v166)
    {
      int8x16_t v179 = (int8x16_t)vsubq_s16(v10, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v10.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v171 = vsubq_s16((int16x8_t)v11, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v10.i8, (int8x16_t)xmmword_242EA7620));
      int16x8_t v172 = v389;
      v172.i32[3] = v11.i32[3];
      int8x16_t v173 = (int8x16_t)vsubq_s16(v390, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7590));
      int8x16_t v174 = (int8x16_t)vsubq_s16(v389, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7630));
      v412.val[0] = (int8x16_t)v388;
      v412.val[1] = (int8x16_t)v386;
      v412.val[1].i32[3] = v11.i32[3];
      int8x16_t v175 = (int8x16_t)vsubq_s16(v388, (int16x8_t)vqtbl2q_s8(v412, (int8x16_t)xmmword_242EA7640));
      int8x16_t v176 = (int8x16_t)vsubq_s16(v386, (int16x8_t)vqtbl2q_s8(v412, (int8x16_t)xmmword_242EA7570));
      v411.val[0] = (int8x16_t)v387;
      v411.val[1] = (int8x16_t)v385;
      v411.val[1].i32[3] = v11.i32[3];
      int8x16_t v177 = (int8x16_t)vsubq_s16(v387, (int16x8_t)vqtbl2q_s8(v411, (int8x16_t)xmmword_242EA7650));
      int8x16_t v178 = (int8x16_t)v171;
      v178.i32[3] = v179.i32[0];
      v179.i32[0] = v171.i32[3];
      int8x16_t v180 = (int8x16_t)vsubq_s16(v385, (int16x8_t)vqtbl2q_s8(v411, (int8x16_t)xmmword_242EA7570));
      int16x8_t v181 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v179, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v182 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v179, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v183 = vpmaxq_s16(v181, v181);
      int16x8_t v184 = vpminq_s16(v182, v182);
      int16x8_t v185 = vpmaxq_s16(v183, v183);
      int16x8_t v186 = vpminq_s16(v184, v184);
      v187.i64[0] = 0x8000800080008000;
      v187.i64[1] = 0x8000800080008000;
      v411.val[0].i64[0] = 0x8000800080008000;
      v411.val[0].i64[1] = 0x8000800080008000;
      v411.val[0] = (int8x16_t)vminq_s16(v186, (int16x8_t)v411.val[0]);
      int16x8_t v188 = vzip1q_s16(v185, v186);
      v189.i64[0] = 0x10001000100010;
      v189.i64[1] = 0x10001000100010;
      int16x8_t v190 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v189, vclsq_s16(v188)), (int8x16_t)vceqzq_s16(v188));
      int16x8_t v191 = vpmaxq_s16(v190, v190);
      v411.val[1] = vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v173, (int16x8_t)v174), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v192 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v173, (int16x8_t)v174), (int8x16_t)xmmword_242EA76D0);
      v411.val[1] = (int8x16_t)vpmaxq_s16((int16x8_t)v411.val[1], (int16x8_t)v411.val[1]);
      int16x8_t v193 = vpminq_s16(v192, v192);
      v411.val[1] = (int8x16_t)vpmaxq_s16((int16x8_t)v411.val[1], (int16x8_t)v411.val[1]);
      int16x8_t v194 = vpminq_s16(v193, v193);
      int16x8_t v195 = vmaxq_s16(vmaxq_s16(v185, v187), (int16x8_t)v411.val[1]);
      v411.val[0] = (int8x16_t)vminq_s16((int16x8_t)v411.val[0], v194);
      v411.val[1] = (int8x16_t)vzip1q_s16((int16x8_t)v411.val[1], v194);
      v411.val[1] = vbicq_s8((int8x16_t)vsubq_s16(v189, vclsq_s16((int16x8_t)v411.val[1])), (int8x16_t)vceqzq_s16((int16x8_t)v411.val[1]));
      v411.val[1] = (int8x16_t)vpmaxq_s16((int16x8_t)v411.val[1], (int16x8_t)v411.val[1]);
      int16x8_t v196 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v175, (int16x8_t)v176), (int8x16_t)xmmword_242EA76D0);
      v412.val[0] = vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v175, (int16x8_t)v176), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v197 = vpmaxq_s16(v196, v196);
      v412.val[0] = (int8x16_t)vpminq_s16((int16x8_t)v412.val[0], (int16x8_t)v412.val[0]);
      int16x8_t v198 = vpmaxq_s16(v197, v197);
      v412.val[0] = (int8x16_t)vpminq_s16((int16x8_t)v412.val[0], (int16x8_t)v412.val[0]);
      int16x8_t v199 = vmaxq_s16(v195, v198);
      v411.val[0] = (int8x16_t)vminq_s16((int16x8_t)v411.val[0], (int16x8_t)v412.val[0]);
      int16x8_t v200 = vzip1q_s16(v198, (int16x8_t)v412.val[0]);
      int16x8_t v201 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v189, vclsq_s16(v200)), (int8x16_t)vceqzq_s16(v200));
      v412.val[0] = (int8x16_t)vpmaxq_s16(v201, v201);
      int16x8_t v202 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v177, (int16x8_t)v180), (int8x16_t)xmmword_242EA76D0);
      v412.val[1] = vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v177, (int16x8_t)v180), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v203 = vpmaxq_s16(v202, v202);
      v412.val[1] = (int8x16_t)vpminq_s16((int16x8_t)v412.val[1], (int16x8_t)v412.val[1]);
      int16x8_t v204 = vpmaxq_s16(v203, v203);
      v412.val[1] = (int8x16_t)vpminq_s16((int16x8_t)v412.val[1], (int16x8_t)v412.val[1]);
      int8x16_t v205 = (int8x16_t)vmaxq_s16(v199, v204);
      int8x16_t v206 = (int8x16_t)vminq_s16((int16x8_t)v411.val[0], (int16x8_t)v412.val[1]);
      int16x8_t v207 = vzip1q_s16(v204, (int16x8_t)v412.val[1]);
      int16x8_t v208 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v189, vclsq_s16(v207)), (int8x16_t)vceqzq_s16(v207));
      v411.val[0] = (int8x16_t)vpmaxq_s16(v208, v208);
      v412.val[1] = (int8x16_t)vmaxq_s16(vmaxq_s16(v191, (int16x8_t)v411.val[1]), vmaxq_s16((int16x8_t)v412.val[0], (int16x8_t)v411.val[0]));
      int16x8_t v209 = vclzq_s16(vsubq_s16((int16x8_t)v205, (int16x8_t)v206));
      int8x16_t v210 = (int8x16_t)vsubq_s16(v189, v209);
      int8x16_t v211 = (int8x16_t)vcgtq_s16((int16x8_t)v412.val[1], (int16x8_t)v210);
      int8x16_t v212 = vbslq_s8(v211, v210, v412.val[1]);
      v412.val[1].i64[0] = 0x3000300030003;
      v412.val[1].i64[1] = 0x3000300030003;
      int8x16_t v213 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v212, v191), (int16x8_t)v412.val[1]), (int16x8_t)0);
      v411.val[1] = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v212, (int16x8_t)v411.val[1]), (int16x8_t)v412.val[1]), (int16x8_t)0);
      v412.val[0] = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v212, (int16x8_t)v412.val[0]), (int16x8_t)v412.val[1]), (int16x8_t)0);
      int16x8_t v214 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v212, (int16x8_t)v411.val[0]), (int16x8_t)v412.val[1]), (int16x8_t)0);
      int8x16_t v215 = (int8x16_t)vsubq_s16((int16x8_t)v212, (int16x8_t)v213);
      int8x16_t v216 = (int8x16_t)vsubq_s16((int16x8_t)v212, (int16x8_t)v411.val[1]);
      int8x16_t v217 = (int8x16_t)vsubq_s16((int16x8_t)v212, (int16x8_t)v412.val[0]);
      int8x16_t v218 = (int8x16_t)vsubq_s16((int16x8_t)v212, v214);
      int8x16_t v219 = (int8x16_t)vceqq_s16(vaddq_s16(v214, (int16x8_t)v412.val[0]), vnegq_s16(vaddq_s16((int16x8_t)v213, (int16x8_t)v411.val[1])));
      v213.i64[0] = 0x4000400040004;
      v213.i64[1] = 0x4000400040004;
      int8x16_t v220 = vbicq_s8(v213, v219);
      v411.val[1].i64[0] = 0x7000700070007;
      v411.val[1].i64[1] = 0x7000700070007;
      int16x8_t v221 = vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vandq_s8(v210, v211), vaddq_s16((int16x8_t)v220, (int16x8_t)v220)), (int16x8_t)v215, (int16x8_t)v411.val[1]), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v217, (int16x8_t)v216), (int16x8_t)v218), 3uLL));
      v411.val[0].i64[0] = 0x8000800080008;
      v411.val[0].i64[1] = 0x8000800080008;
      int8x16_t v83 = v402;
      int16x8_t v158 = v403;
      v412.val[0] = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v402, v411.val[0]));
      int16x8_t v222 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v411.val[0]);
      v223.i64[0] = 0x2000200020002;
      v223.i64[1] = 0x2000200020002;
      v412.val[1] = vandq_s8((int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v402, v412.val[1]), (int16x8_t)v223), (int8x16_t)v189);
      int16x8_t v161 = v406;
      int8x16_t v152 = v407;
      int16x8_t v159 = v404;
      int16x8_t v162 = v405;
      int8x16_t v224 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v407, v412.val[0]), v222), (int16x8_t)v412.val[1]), v403, (int16x8_t)v411.val[1]), vshlq_n_s16(vaddq_s16(vaddq_s16(v405, v404), v406), 3uLL)), v221), 0);
      if (vaddvq_s16((int16x8_t)v224))
      {
        v225.i64[0] = 0x9000900090009;
        v225.i64[1] = 0x9000900090009;
        int8x16_t v391 = vbslq_s8(v224, v179, v391);
        int8x16_t v393 = vbslq_s8(v224, v178, v393);
        v226.i64[0] = -1;
        v226.i64[1] = -1;
        int8x16_t v227 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v212), v223), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v211, v225), (int16x8_t)vmvnq_s8(v211))), v220);
        int8x16_t v395 = vbslq_s8(v224, v173, v395);
        int8x16_t v396 = vbslq_s8(v224, v174, v396);
        v228.i64[0] = 0xF000F000F000FLL;
        v228.i64[1] = 0xF000F000F000FLL;
        int8x16_t v397 = vbslq_s8(v224, v175, v397);
        int8x16_t v398 = vbslq_s8(v224, v176, v398);
        int8x16_t v399 = vbslq_s8(v224, v177, v399);
        int8x16_t v400 = vbslq_s8(v224, v180, v400);
        int16x8_t v158 = (int16x8_t)vbslq_s8(v224, v215, (int8x16_t)v403);
        int16x8_t v159 = (int16x8_t)vbslq_s8(v224, v216, (int8x16_t)v404);
        int16x8_t v403 = v158;
        int16x8_t v404 = v159;
        int16x8_t v162 = (int16x8_t)vbslq_s8(v224, v217, (int8x16_t)v405);
        int16x8_t v161 = (int16x8_t)vbslq_s8(v224, v218, (int8x16_t)v406);
        int16x8_t v405 = v162;
        int16x8_t v406 = v161;
        int8x16_t v409 = vbslq_s8(v224, v205, v409);
        int8x16_t v410 = vbslq_s8(v224, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v226, vsubq_s16(v228, v209)), (int16x8_t)v206), v211), v410);
        int8x16_t v152 = vbslq_s8(v224, v212, v407);
        int8x16_t v407 = v152;
        int8x16_t v408 = vbslq_s8(v224, v206, v408);
        int8x16_t v83 = vbslq_s8(v224, v227, v402);
        int8x16_t v401 = vbslq_s8(v224, vextq_s8(v11, v11, 0xCuLL), v401);
        int8x16_t v402 = v83;
      }
      int16x8_t v170 = v390;
    }
    int16x8_t v229 = (int16x8_t)vandq_s8(v410, (int8x16_t)vceqq_s16((int16x8_t)v152, v158));
    int8x16_t v392 = (int8x16_t)vaddq_s16(v229, (int16x8_t)v391);
    int8x16_t v394 = (int8x16_t)vaddq_s16((int16x8_t)v393, v229);
    int16x8_t v230 = (int16x8_t)vandq_s8(v410, (int8x16_t)vceqq_s16((int16x8_t)v152, v159));
    int8x16_t v395 = (int8x16_t)vaddq_s16((int16x8_t)v395, v230);
    int8x16_t v396 = (int8x16_t)vaddq_s16((int16x8_t)v396, v230);
    int16x8_t v231 = (int16x8_t)vandq_s8(v410, (int8x16_t)vceqq_s16((int16x8_t)v152, v162));
    int8x16_t v397 = (int8x16_t)vaddq_s16((int16x8_t)v397, v231);
    int8x16_t v398 = (int8x16_t)vaddq_s16((int16x8_t)v398, v231);
    int8x16_t v232 = vandq_s8(v410, (int8x16_t)vceqq_s16((int16x8_t)v152, v161));
    int8x16_t v399 = (int8x16_t)vaddq_s16((int16x8_t)v399, (int16x8_t)v232);
    int8x16_t v400 = (int8x16_t)vaddq_s16((int16x8_t)v400, (int16x8_t)v232);
    v232.i64[0] = 0x8000800080008;
    v232.i64[1] = 0x8000800080008;
    v233.i64[0] = 0x3000300030003;
    v233.i64[1] = 0x3000300030003;
    v234.i64[0] = 0x2000200020002;
    v234.i64[1] = 0x2000200020002;
    int8x16_t v235 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v83, v233), v234);
    v234.i64[0] = 0x10001000100010;
    v234.i64[1] = 0x10001000100010;
    int16x8_t v236 = (int16x8_t)vandq_s8(v235, (int8x16_t)v234);
    v234.i64[0] = 0x7000700070007;
    v234.i64[1] = 0x7000700070007;
    int16x8_t v237 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v152, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v83, v232))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v232)), v236), v158, v234), vshlq_n_s16(vaddq_s16(v162, vaddq_s16(v159, v161)), 3uLL));
    if ((unint64_t)(vpaddq_s16(v237, v237).i16[0] + 57) > 0x3FF)
    {
      *a1 = v10;
      a1[1] = (int16x8_t)v11;
      a1[2] = v170;
      a1[3] = v389;
      a1[4] = v388;
      a1[5] = v386;
      int8x16_t v243 = a1 + 6;
      char v241 = 127;
      unint64_t result = 128;
      *int8x16_t v243 = v387;
      v243[1] = v385;
    }
    else
    {
      int16x8_t v238 = (void *)((unint64_t)a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v239 = 8 * (a1 & 7);
      if (v239) {
        uint64_t v240 = *v238 & ~(-1 << v239);
      }
      else {
        uint64_t v240 = 0;
      }
      *a2 = 0;
      uint64_t v244 = ((v152.i16[0] << 10) + 15360) & 0x3C00;
      if (!v152.i16[0]) {
        uint64_t v244 = 0;
      }
      if (v152.i16[1]) {
        uint64_t v245 = ((v152.u16[1] << 14) + 245760) & 0x3C000;
      }
      else {
        uint64_t v245 = 0;
      }
      unint64_t v246 = v244 | v245 | v83.i8[0] & 0x1F | (32 * (v83.i8[2] & 0x1Fu));
      unint64_t v247 = v401.u32[0];
      uint64_t v248 = (v246 << v239) | v240;
      if (v239 >= 0x2E)
      {
        *int16x8_t v238 = v248;
        uint64_t v248 = v246 >> (-8 * (a1 & 7u));
      }
      unint64_t v249 = (v239 + 18) & 0x3A;
      uint64_t v250 = v248 | (v247 << v249);
      if (v249 >= 0x20)
      {
        *(void *)((char *)v238 + (((v239 + 18) >> 3) & 8)) = v250;
        uint64_t v250 = v247 >> -(char)v249;
      }
      unint64_t v251 = v239 + 50;
      int8x16_t v252 = (int8x16_t)vsubq_s16((int16x8_t)v407, v403);
      int8x16_t v253 = (int8x16_t)vsubq_s16((int16x8_t)v407, v404);
      int8x16_t v254 = (int8x16_t)vsubq_s16((int16x8_t)v407, v405);
      int8x16_t v255 = (int8x16_t)vsubq_s16((int16x8_t)v407, v406);
      *(uint8x8_t *)v252.i8 = vqmovn_u16((uint16x8_t)v252);
      *(uint8x8_t *)v253.i8 = vqmovn_u16((uint16x8_t)v253);
      *(uint8x8_t *)v254.i8 = vqmovn_u16((uint16x8_t)v254);
      *(uint8x8_t *)v255.i8 = vqmovn_u16((uint16x8_t)v255);
      v255.i64[0] = vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)vzip1q_s8(v252, v253), (int16x8_t)vzip1q_s8(v254, v255)), (int32x4_t)vzip1q_s16((int16x8_t)vtrn2q_s8(v252, v253), (int16x8_t)vtrn2q_s8(v254, v255))).u64[0];
      v253.i64[0] = 0x202020202020202;
      v253.i64[1] = 0x202020202020202;
      int8x16_t v256 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v402.i8, (int8x8_t)0x4000400040004)))), v253);
      v253.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v253.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v254.i64[0] = -1;
      v254.i64[1] = -1;
      uint8x16_t v257 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v254, (uint8x16_t)vorrq_s8(v256, v253)), (int8x16_t)v255.u64[0]);
      int16x8_t v258 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v256.i8);
      uint16x8_t v259 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v257.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v258)), (int16x8_t)vmovl_high_u8(v257));
      uint16x8_t v260 = (uint16x8_t)vpaddq_s16(v258, (int16x8_t)vmovl_high_u8((uint8x16_t)v256));
      int32x4_t v261 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v260.i8);
      int32x4_t v262 = (int32x4_t)vmovl_high_u16(v260);
      int32x4_t v263 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v259.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v261)), (int32x4_t)vshlq_u32(vmovl_high_u16(v259), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v262)));
      int32x4_t v264 = vpaddq_s32(v261, v262);
      v265.i64[0] = v263.u32[0];
      v265.i64[1] = v263.u32[1];
      uint64x2_t v266 = (uint64x2_t)v265;
      v265.i64[0] = v263.u32[2];
      v265.i64[1] = v263.u32[3];
      uint64x2_t v267 = (uint64x2_t)v265;
      v265.i64[0] = v264.u32[0];
      v265.i64[1] = v264.u32[1];
      int64x2_t v268 = v265;
      v265.i64[0] = v264.u32[2];
      v265.i64[1] = v264.u32[3];
      int64x2_t v269 = vpaddq_s64((int64x2_t)vshlq_u64(v266, (uint64x2_t)vzip1q_s64((int64x2_t)0, v268)), (int64x2_t)vshlq_u64(v267, (uint64x2_t)vzip1q_s64((int64x2_t)0, v265)));
      int64x2_t v270 = vpaddq_s64(v268, v265);
      uint64_t v271 = (v239 + 50) & 0x3A;
      unint64_t v272 = (v269.i64[0] << v271) | v250;
      if ((unint64_t)(v270.i64[0] + v271) >= 0x40)
      {
        *(void *)((char *)v238 + ((v251 >> 3) & 8)) = v272;
        unint64_t v272 = (unint64_t)v269.i64[0] >> -(char)v271;
      }
      unint64_t v273 = v270.i64[0] + v251;
      unint64_t v274 = v272 | (v269.i64[1] << v273);
      if ((v273 & 0x3F) + v270.i64[1] >= 0x40)
      {
        *(void *)((char *)v238 + ((v273 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v274;
        unint64_t v274 = (unint64_t)v269.i64[1] >> -(v273 & 0x3F);
        if ((v273 & 0x3F) == 0) {
          unint64_t v274 = 0;
        }
      }
      unint64_t v275 = v273 + v270.i64[1];
      v276.i64[0] = 0x8000800080008;
      v276.i64[1] = 0x8000800080008;
      v277.i64[0] = -1;
      v277.i64[1] = -1;
      int16x8_t v278 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v402, v276), (int8x16_t)0, 0xCuLL), v407);
      v279.i64[0] = 0xF000F000F000FLL;
      v279.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v280 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v277, (uint16x8_t)vaddq_s16(v278, v279)), v410);
      int32x4_t v281 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v278.i8);
      int32x4_t v282 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v280.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v281)), (int32x4_t)vmovl_high_u16(v280));
      int32x4_t v283 = vpaddq_s32(v281, (int32x4_t)vmovl_high_u16((uint16x8_t)v278));
      v284.i64[0] = v282.u32[0];
      v284.i64[1] = v282.u32[1];
      uint64x2_t v285 = (uint64x2_t)v284;
      v284.i64[0] = v282.u32[2];
      v284.i64[1] = v282.u32[3];
      uint64x2_t v286 = (uint64x2_t)v284;
      v284.i64[0] = v283.u32[0];
      v284.i64[1] = v283.u32[1];
      int64x2_t v287 = v284;
      v284.i64[0] = v283.u32[2];
      v284.i64[1] = v283.u32[3];
      int64x2_t v288 = vpaddq_s64((int64x2_t)vshlq_u64(v285, (uint64x2_t)vzip1q_s64((int64x2_t)0, v287)), (int64x2_t)vshlq_u64(v286, (uint64x2_t)vzip1q_s64((int64x2_t)0, v284)));
      int64x2_t v289 = vpaddq_s64(v287, v284);
      unint64_t v290 = (v288.i64[0] << v275) | v274;
      if (v289.i64[0] + (v275 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v238 + ((v275 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v290;
        unint64_t v290 = (unint64_t)v288.i64[0] >> -(v275 & 0x3F);
        if ((v275 & 0x3F) == 0) {
          unint64_t v290 = 0;
        }
      }
      unint64_t v291 = v289.i64[0] + v275;
      unint64_t v292 = v290 | (v288.i64[1] << v291);
      if ((v291 & 0x3F) + v289.i64[1] >= 0x40)
      {
        *(void *)((char *)v238 + ((v291 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v292;
        unint64_t v292 = (unint64_t)v288.i64[1] >> -(v291 & 0x3F);
        if ((v291 & 0x3F) == 0) {
          unint64_t v292 = 0;
        }
      }
      unint64_t v293 = v291 + v289.i64[1];
      int16x8_t v294 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v403, 0xCuLL);
      v295.i64[0] = 0xF000F000F000FLL;
      v295.i64[1] = 0xF000F000F000FLL;
      v296.i64[0] = -1;
      v296.i64[1] = -1;
      uint16x8_t v297 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v296, (uint16x8_t)vaddq_s16(v294, v295)), v392);
      int32x4_t v298 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v294.i8);
      int32x4_t v299 = (int32x4_t)vmovl_high_u16((uint16x8_t)v294);
      int32x4_t v300 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v297.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v298)), (int32x4_t)vshlq_u32(vmovl_high_u16(v297), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v299)));
      int32x4_t v301 = vpaddq_s32(v298, v299);
      v302.i64[0] = v300.u32[0];
      v302.i64[1] = v300.u32[1];
      uint64x2_t v303 = (uint64x2_t)v302;
      v302.i64[0] = v300.u32[2];
      v302.i64[1] = v300.u32[3];
      uint64x2_t v304 = (uint64x2_t)v302;
      v302.i64[0] = v301.u32[0];
      v302.i64[1] = v301.u32[1];
      int64x2_t v305 = v302;
      v302.i64[0] = v301.u32[2];
      v302.i64[1] = v301.u32[3];
      int64x2_t v306 = vpaddq_s64((int64x2_t)vshlq_u64(v303, (uint64x2_t)vzip1q_s64((int64x2_t)0, v305)), (int64x2_t)vshlq_u64(v304, (uint64x2_t)vzip1q_s64((int64x2_t)0, v302)));
      int64x2_t v307 = vpaddq_s64(v305, v302);
      unint64_t v308 = (v306.i64[0] << v293) | v292;
      if (v307.i64[0] + (v293 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v238 + ((v293 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v308;
        unint64_t v308 = (unint64_t)v306.i64[0] >> -(v293 & 0x3F);
        if ((v293 & 0x3F) == 0) {
          unint64_t v308 = 0;
        }
      }
      unint64_t v309 = v307.i64[0] + v293;
      unint64_t v310 = v308 | (v306.i64[1] << v309);
      if ((v309 & 0x3F) + v307.i64[1] >= 0x40)
      {
        *(void *)((char *)v238 + ((v309 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v310;
        unint64_t v310 = (unint64_t)v306.i64[1] >> -(v309 & 0x3F);
        if ((v309 & 0x3F) == 0) {
          unint64_t v310 = 0;
        }
      }
      unint64_t v311 = v309 + v307.i64[1];
      v312.i64[0] = 0xF000F000F000FLL;
      v312.i64[1] = 0xF000F000F000FLL;
      v313.i64[0] = -1;
      v313.i64[1] = -1;
      uint16x8_t v314 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v313, (uint16x8_t)vaddq_s16(v403, v312)), v394);
      int32x4_t v315 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v403.i8);
      int32x4_t v316 = (int32x4_t)vmovl_high_u16((uint16x8_t)v403);
      int32x4_t v317 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v314.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v315)), (int32x4_t)vshlq_u32(vmovl_high_u16(v314), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v316)));
      int32x4_t v318 = vpaddq_s32(v315, v316);
      v319.i64[0] = v317.u32[0];
      v319.i64[1] = v317.u32[1];
      uint64x2_t v320 = (uint64x2_t)v319;
      v319.i64[0] = v317.u32[2];
      v319.i64[1] = v317.u32[3];
      uint64x2_t v321 = (uint64x2_t)v319;
      v319.i64[0] = v318.u32[0];
      v319.i64[1] = v318.u32[1];
      int64x2_t v322 = v319;
      v319.i64[0] = v318.u32[2];
      v319.i64[1] = v318.u32[3];
      int64x2_t v323 = vpaddq_s64((int64x2_t)vshlq_u64(v320, (uint64x2_t)vzip1q_s64((int64x2_t)0, v322)), (int64x2_t)vshlq_u64(v321, (uint64x2_t)vzip1q_s64((int64x2_t)0, v319)));
      int64x2_t v324 = vpaddq_s64(v322, v319);
      unint64_t v325 = (v323.i64[0] << v311) | v310;
      if (v324.i64[0] + (v311 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v238 + ((v311 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v325;
        if ((v311 & 0x3F) != 0) {
          unint64_t v325 = (unint64_t)v323.i64[0] >> -(v311 & 0x3F);
        }
        else {
          unint64_t v325 = 0;
        }
      }
      uint64_t v326 = v324.i64[1];
      unint64_t v327 = v324.i64[0] + v311;
      uint64_t v328 = (v324.i64[0] + v311) & 0x3F;
      unint64_t v329 = v325 | (v323.i64[1] << v327);
      if ((unint64_t)(v328 + v324.i64[1]) >= 0x40)
      {
        *(void *)((char *)v238 + ((v327 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
        unint64_t v329 = (unint64_t)v323.i64[1] >> -(char)v328;
        if (!v328) {
          unint64_t v329 = 0;
        }
      }
      uint64_t v330 = 0;
      v331.i64[0] = 0xF000F000F000FLL;
      v331.i64[1] = 0xF000F000F000FLL;
      v332.i64[0] = -1;
      v332.i64[1] = -1;
      unint64_t v333 = v327 + v326;
      char v334 = 1;
      do
      {
        char v335 = v334;
        uint16x8_t v336 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v332, (uint16x8_t)vaddq_s16(v404, v331)), *(&v395 + v330));
        int32x4_t v337 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v404.i8);
        int32x4_t v338 = (int32x4_t)vmovl_high_u16((uint16x8_t)v404);
        int32x4_t v339 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v336.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v337)), (int32x4_t)vshlq_u32(vmovl_high_u16(v336), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v338)));
        int32x4_t v340 = vpaddq_s32(v337, v338);
        v341.i64[0] = v339.u32[0];
        v341.i64[1] = v339.u32[1];
        uint64x2_t v342 = (uint64x2_t)v341;
        v341.i64[0] = v339.u32[2];
        v341.i64[1] = v339.u32[3];
        uint64x2_t v343 = (uint64x2_t)v341;
        v341.i64[0] = v340.u32[0];
        v341.i64[1] = v340.u32[1];
        int64x2_t v344 = v341;
        v341.i64[0] = v340.u32[2];
        v341.i64[1] = v340.u32[3];
        int64x2_t v345 = vpaddq_s64((int64x2_t)vshlq_u64(v342, (uint64x2_t)vzip1q_s64((int64x2_t)0, v344)), (int64x2_t)vshlq_u64(v343, (uint64x2_t)vzip1q_s64((int64x2_t)0, v341)));
        int64x2_t v346 = vpaddq_s64(v344, v341);
        unint64_t v347 = (v345.i64[0] << v333) | v329;
        if (v346.i64[0] + (v333 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v238 + ((v333 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v347;
          unint64_t v347 = (unint64_t)v345.i64[0] >> -(v333 & 0x3F);
          if ((v333 & 0x3F) == 0) {
            unint64_t v347 = 0;
          }
        }
        unint64_t v348 = v346.i64[0] + v333;
        unint64_t v329 = v347 | (v345.i64[1] << v348);
        if ((v348 & 0x3F) + v346.i64[1] >= 0x40)
        {
          *(void *)((char *)v238 + ((v348 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
          unint64_t v329 = (unint64_t)v345.i64[1] >> -(v348 & 0x3F);
          if ((v348 & 0x3F) == 0) {
            unint64_t v329 = 0;
          }
        }
        char v334 = 0;
        unint64_t v333 = v348 + v346.i64[1];
        uint64_t v330 = 1;
      }
      while ((v335 & 1) != 0);
      uint64_t v349 = 0;
      char v350 = 1;
      v351.i64[0] = 0xF000F000F000FLL;
      v351.i64[1] = 0xF000F000F000FLL;
      v352.i64[0] = -1;
      v352.i64[1] = -1;
      do
      {
        char v353 = v350;
        uint16x8_t v354 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v352, (uint16x8_t)vaddq_s16(v405, v351)), *(&v397 + v349));
        int32x4_t v355 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v405.i8);
        int32x4_t v356 = (int32x4_t)vmovl_high_u16((uint16x8_t)v405);
        int32x4_t v357 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v354.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v355)), (int32x4_t)vshlq_u32(vmovl_high_u16(v354), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v356)));
        int32x4_t v358 = vpaddq_s32(v355, v356);
        v359.i64[0] = v357.u32[0];
        v359.i64[1] = v357.u32[1];
        uint64x2_t v360 = (uint64x2_t)v359;
        v359.i64[0] = v357.u32[2];
        v359.i64[1] = v357.u32[3];
        uint64x2_t v361 = (uint64x2_t)v359;
        v359.i64[0] = v358.u32[0];
        v359.i64[1] = v358.u32[1];
        int64x2_t v362 = v359;
        v359.i64[0] = v358.u32[2];
        v359.i64[1] = v358.u32[3];
        int64x2_t v363 = vpaddq_s64((int64x2_t)vshlq_u64(v360, (uint64x2_t)vzip1q_s64((int64x2_t)0, v362)), (int64x2_t)vshlq_u64(v361, (uint64x2_t)vzip1q_s64((int64x2_t)0, v359)));
        int64x2_t v364 = vpaddq_s64(v362, v359);
        unint64_t v365 = (v363.i64[0] << v333) | v329;
        if (v364.i64[0] + (v333 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v238 + ((v333 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v365;
          unint64_t v365 = (unint64_t)v363.i64[0] >> -(v333 & 0x3F);
          if ((v333 & 0x3F) == 0) {
            unint64_t v365 = 0;
          }
        }
        unint64_t v366 = v364.i64[0] + v333;
        unint64_t v329 = v365 | (v363.i64[1] << v366);
        if ((v366 & 0x3F) + v364.i64[1] >= 0x40)
        {
          *(void *)((char *)v238 + ((v366 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
          unint64_t v329 = (unint64_t)v363.i64[1] >> -(v366 & 0x3F);
          if ((v366 & 0x3F) == 0) {
            unint64_t v329 = 0;
          }
        }
        char v350 = 0;
        unint64_t v333 = v366 + v364.i64[1];
        uint64_t v349 = 1;
      }
      while ((v353 & 1) != 0);
      uint64_t v367 = 0;
      char v368 = 1;
      v369.i64[0] = 0xF000F000F000FLL;
      v369.i64[1] = 0xF000F000F000FLL;
      v370.i64[0] = -1;
      v370.i64[1] = -1;
      do
      {
        char v371 = v368;
        uint16x8_t v372 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v370, (uint16x8_t)vaddq_s16(v406, v369)), *(&v399 + v367));
        int32x4_t v373 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v406.i8);
        int32x4_t v374 = (int32x4_t)vmovl_high_u16((uint16x8_t)v406);
        int32x4_t v375 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v372.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v373)), (int32x4_t)vshlq_u32(vmovl_high_u16(v372), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v374)));
        int32x4_t v376 = vpaddq_s32(v373, v374);
        v377.i64[0] = v375.u32[0];
        v377.i64[1] = v375.u32[1];
        uint64x2_t v378 = (uint64x2_t)v377;
        v377.i64[0] = v375.u32[2];
        v377.i64[1] = v375.u32[3];
        uint64x2_t v379 = (uint64x2_t)v377;
        v377.i64[0] = v376.u32[0];
        v377.i64[1] = v376.u32[1];
        int64x2_t v380 = v377;
        v377.i64[0] = v376.u32[2];
        v377.i64[1] = v376.u32[3];
        int64x2_t v381 = vpaddq_s64((int64x2_t)vshlq_u64(v378, (uint64x2_t)vzip1q_s64((int64x2_t)0, v380)), (int64x2_t)vshlq_u64(v379, (uint64x2_t)vzip1q_s64((int64x2_t)0, v377)));
        int64x2_t v382 = vpaddq_s64(v380, v377);
        unint64_t v383 = (v381.i64[0] << v333) | v329;
        if (v382.i64[0] + (v333 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v238 + ((v333 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v383;
          unint64_t v383 = (unint64_t)v381.i64[0] >> -(v333 & 0x3F);
          if ((v333 & 0x3F) == 0) {
            unint64_t v383 = 0;
          }
        }
        unint64_t v384 = v382.i64[0] + v333;
        unint64_t v329 = v383 | (v381.i64[1] << v384);
        if ((v384 & 0x3F) + v382.i64[1] >= 0x40)
        {
          *(void *)((char *)v238 + ((v384 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
          unint64_t v329 = (unint64_t)v381.i64[1] >> -(v384 & 0x3F);
          if ((v384 & 0x3F) == 0) {
            unint64_t v329 = 0;
          }
        }
        char v368 = 0;
        unint64_t v333 = v384 + v382.i64[1];
        uint64_t v367 = 1;
      }
      while ((v371 & 1) != 0);
      if ((v333 & 0x3F) != 0) {
        *(void *)((char *)v238 + ((v333 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v329;
      }
      unint64_t result = (v333 - v239 + 7) >> 3;
      char v241 = *a2 | (result - 1);
    }
  }
  else
  {
    a1->i32[0] = a3->i32[0];
    char v241 = 3;
    unint64_t result = 4;
  }
  *a2 = v241;
  return result;
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressMacroblock(unint64_t result, uint64_t a2, int16x8_t *a3, char *a4, int a5, int a6)
{
  int64x2_t v9 = a3;
  int8x16_t v11 = (int64x2_t *)result;
  if (a5 >= 8) {
    unsigned int v12 = 8;
  }
  else {
    unsigned int v12 = a5;
  }
  if (a6 >= 4) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = a6;
  }
  if (v12 && v13)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(a3, a4, (int64x2_t *)result, a2, v12, v13);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
  }
  else
  {
    *a4 = 0;
  }
  int32x4_t v14 = a4 + 1;
  if (a5 <= 8) {
    int v15 = 8;
  }
  else {
    int v15 = a5;
  }
  unsigned int v16 = v15 - 8;
  if (v16 >= 8) {
    int v17 = 8;
  }
  else {
    int v17 = v16;
  }
  if (v17 && v13)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v14, v11 + 2, a2, v17, v13);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
  }
  else
  {
    char *v14 = 0;
  }
  uint64_t v18 = 4 * a2;
  int16x8_t v19 = a4 + 2;
  if (a6 <= 4) {
    int v20 = 4;
  }
  else {
    int v20 = a6;
  }
  unsigned int v21 = v20 - 4;
  if (v21 >= 4) {
    int v22 = 4;
  }
  else {
    int v22 = v21;
  }
  if (v12 && v22)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v19, (int64x2_t *)((char *)v11 + v18), a2, v12, v22);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
    int16x8_t v23 = a4 + 3;
    if (!v17) {
      goto LABEL_34;
    }
  }
  else
  {
    char *v19 = 0;
    int16x8_t v23 = a4 + 3;
    if (!v17) {
      goto LABEL_34;
    }
  }
  if (v22)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v23, (int64x2_t *)((char *)v11 + v18 + 32), a2, v17, v22);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
    goto LABEL_35;
  }
LABEL_34:
  *int16x8_t v23 = 0;
LABEL_35:
  int16x8_t v24 = a4 + 4;
  if (a6 <= 8) {
    int v25 = 8;
  }
  else {
    int v25 = a6;
  }
  unsigned int v26 = v25 - 8;
  if (v26 >= 4) {
    int v27 = 4;
  }
  else {
    int v27 = v26;
  }
  if (v12 && v27)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v24, (int64x2_t *)((char *)v11 + 8 * a2), a2, v12, v27);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
    int16x8_t v28 = a4 + 5;
    if (!v17) {
      goto LABEL_48;
    }
  }
  else
  {
    char *v24 = 0;
    int16x8_t v28 = a4 + 5;
    if (!v17) {
      goto LABEL_48;
    }
  }
  if (v27)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v28, (int64x2_t *)((char *)v11 + 8 * a2 + 32), a2, v17, v27);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
    goto LABEL_49;
  }
LABEL_48:
  *int16x8_t v28 = 0;
LABEL_49:
  int16x8_t v29 = a4 + 6;
  if (a6 <= 12) {
    int v30 = 12;
  }
  else {
    int v30 = a6;
  }
  unsigned int v31 = v30 - 12;
  if (v31 >= 4) {
    int v32 = 4;
  }
  else {
    int v32 = v31;
  }
  if (v12 && v32)
  {
    unint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v29, (int64x2_t *)((char *)v11 + 12 * a2), a2, v12, v32);
    int64x2_t v9 = (int16x8_t *)((char *)v9 + result);
    int8x16_t v33 = a4 + 7;
    if (!v17) {
      goto LABEL_64;
    }
  }
  else
  {
    *int16x8_t v29 = 0;
    int8x16_t v33 = a4 + 7;
    if (!v17)
    {
LABEL_64:
      *int8x16_t v33 = 0;
      return result;
    }
  }
  if (!v32) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)0>::compressSubblock(v9, v33, (int64x2_t *)((char *)v11 + 12 * a2 + 32), a2, v17, v32);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  int64x2_t v8 = *(int64x2_t *)(a3 + 16);
  int64x2_t v7 = (int64x2_t *)(a3 + 2 * a4);
  int64x2_t v9 = *(int64x2_t *)(a3 + a4);
  int64x2_t v10 = *(int64x2_t *)(a3 + a4 + 16);
  int16x8_t v11 = (int16x8_t)vzip1q_s64(*(int64x2_t *)a3, v9);
  int8x16_t v12 = (int8x16_t)vzip2q_s64(*(int64x2_t *)a3, v9);
  int16x8_t v13 = (int16x8_t)vzip1q_s64(v8, v10);
  int16x8_t v14 = (int16x8_t)vzip2q_s64(v8, v10);
  int64x2_t v16 = *v7;
  int64x2_t v17 = v7[1];
  int v15 = (int64x2_t *)((char *)v7 + a4);
  int64x2_t v18 = v15[1];
  int16x8_t v19 = (int16x8_t)vzip1q_s64(v16, *v15);
  int16x8_t v20 = (int16x8_t)vzip2q_s64(v16, *v15);
  int16x8_t v21 = (int16x8_t)vzip1q_s64(v17, v18);
  int16x8_t v22 = (int16x8_t)vzip2q_s64(v17, v18);
  int16x8_t v23 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
  int8x16_t v415 = (int8x16_t)vsubq_s16(v11, v23);
  int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v12, v23);
  int8x16_t v419 = (int8x16_t)vsubq_s16(v19, v23);
  int8x16_t v420 = (int8x16_t)vsubq_s16(v20, v23);
  int8x16_t v421 = (int8x16_t)vsubq_s16(v13, v23);
  int8x16_t v422 = (int8x16_t)vsubq_s16(v14, v23);
  int8x16_t v423 = (int8x16_t)vsubq_s16(v21, v23);
  int8x16_t v424 = (int8x16_t)vsubq_s16(v22, v23);
  int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v26 = vpmaxq_s16(v24, v24);
  int16x8_t v27 = vpminq_s16(v25, v25);
  int16x8_t v28 = vpmaxq_s16(v26, v26);
  int16x8_t v29 = vpminq_s16(v27, v27);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  v31.i64[0] = 0x8000800080008000;
  v31.i64[1] = 0x8000800080008000;
  int16x8_t v32 = vminq_s16(v29, v31);
  int16x8_t v33 = vzip1q_s16(v28, v29);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v33)), (int8x16_t)vceqzq_s16(v33));
  int16x8_t v36 = vpmaxq_s16(v35, v35);
  int16x8_t v37 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v39 = vpmaxq_s16(v37, v37);
  int16x8_t v40 = vpminq_s16(v38, v38);
  int16x8_t v41 = vpmaxq_s16(v39, v39);
  int16x8_t v42 = vpminq_s16(v40, v40);
  int16x8_t v43 = vmaxq_s16(vmaxq_s16(v28, v30), v41);
  int16x8_t v44 = vminq_s16(v32, v42);
  int16x8_t v45 = vzip1q_s16(v41, v42);
  int16x8_t v46 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v45)), (int8x16_t)vceqzq_s16(v45));
  int16x8_t v47 = vpmaxq_s16(v46, v46);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vpmaxq_s16(v50, v50);
  int16x8_t v53 = vpminq_s16(v51, v51);
  int16x8_t v54 = vmaxq_s16(v43, v52);
  int16x8_t v55 = vminq_s16(v44, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int16x8_t v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v60 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v61 = vpmaxq_s16(v59, v59);
  int16x8_t v62 = vpminq_s16(v60, v60);
  int16x8_t v63 = vpmaxq_s16(v61, v61);
  int16x8_t v64 = vpminq_s16(v62, v62);
  int8x16_t v65 = (int8x16_t)vmaxq_s16(v54, v63);
  int16x8_t v66 = vminq_s16(v55, v64);
  int16x8_t v67 = vzip1q_s16(v63, v64);
  int16x8_t v68 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v67)), (int8x16_t)vceqzq_s16(v67));
  v64.i64[0] = -1;
  v64.i64[1] = -1;
  int16x8_t v69 = vpmaxq_s16(v68, v68);
  int8x16_t v70 = (int8x16_t)vmaxq_s16(vmaxq_s16(v36, v47), vmaxq_s16(v58, v69));
  int16x8_t v71 = vclzq_s16(vsubq_s16((int16x8_t)v65, v66));
  v32.i64[0] = 0xF000F000F000FLL;
  v32.i64[1] = 0xF000F000F000FLL;
  int16x8_t v72 = vsubq_s16(v32, v71);
  int8x16_t v73 = (int8x16_t)vsubq_s16((int16x8_t)v34, v71);
  int8x16_t v74 = (int8x16_t)vsubq_s16(vshlq_s16(v64, v72), v66);
  int8x16_t v75 = (int8x16_t)vcgtq_s16((int16x8_t)v70, (int16x8_t)v73);
  int8x16_t v431 = vbslq_s8(v75, v73, v70);
  int8x16_t v432 = (int8x16_t)v66;
  int8x16_t v433 = v65;
  int8x16_t v434 = vandq_s8(v74, v75);
  v65.i64[0] = 0x8000800080008;
  v65.i64[1] = 0x8000800080008;
  int8x16_t v76 = vandq_s8(v75, v65);
  v77.i64[0] = 0x3000300030003;
  v77.i64[1] = 0x3000300030003;
  int16x8_t v78 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v36), (int16x8_t)v77), (int16x8_t)0);
  int8x16_t v79 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v47), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v80 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v58), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v81 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v69), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v427 = vsubq_s16((int16x8_t)v431, v78);
  int16x8_t v428 = vsubq_s16((int16x8_t)v431, (int16x8_t)v79);
  int16x8_t v429 = vsubq_s16((int16x8_t)v431, v80);
  int16x8_t v430 = vsubq_s16((int16x8_t)v431, v81);
  int8x16_t v82 = (int8x16_t)vceqq_s16(vaddq_s16(v81, v80), vnegq_s16(vaddq_s16(v78, (int16x8_t)v79)));
  v79.i64[0] = 0x4000400040004;
  v79.i64[1] = 0x4000400040004;
  int8x16_t v83 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v431), v77), v76), vbicq_s8(v79, v82));
  int8x16_t v425 = (int8x16_t)v23;
  int8x16_t v426 = v83;
  if (vmaxvq_s16((int16x8_t)v431))
  {
    int16x8_t v410 = v19;
    int16x8_t v411 = v20;
    int16x8_t v412 = v21;
    int16x8_t v413 = v13;
    int16x8_t v414 = v14;
    int16x8_t v408 = v22;
    v84.i64[0] = 0x4000400040004;
    v84.i64[1] = 0x4000400040004;
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v415, (int16x8_t)vqtbl1q_s8(v415, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v86 = (int8x16_t)vsubq_s16((int16x8_t)v417, (int16x8_t)vqtbl1q_s8(v417, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v87 = (int8x16_t)vsubq_s16((int16x8_t)v419, (int16x8_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v88 = (int8x16_t)vsubq_s16((int16x8_t)v420, (int16x8_t)vqtbl1q_s8(v420, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v421, (int16x8_t)vqtbl1q_s8(v421, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v422, (int16x8_t)vqtbl1q_s8(v422, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v423, (int16x8_t)vqtbl1q_s8(v423, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v424, (int16x8_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_242EA76C0));
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vpmaxq_s16(v95, v95);
    int16x8_t v98 = vpminq_s16(v96, v96);
    int16x8_t v99 = vmaxq_s16(v97, v30);
    int16x8_t v100 = vminq_s16(v98, v31);
    int16x8_t v101 = vzip1q_s16(v97, v98);
    int16x8_t v102 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v101)), (int8x16_t)vceqzq_s16(v101));
    int16x8_t v103 = vpmaxq_s16(v102, v102);
    int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v106 = vpmaxq_s16(v104, v104);
    int16x8_t v107 = vpminq_s16(v105, v105);
    int16x8_t v108 = vpmaxq_s16(v106, v106);
    int16x8_t v109 = vpminq_s16(v107, v107);
    int16x8_t v110 = vmaxq_s16(v99, v108);
    int16x8_t v111 = vminq_s16(v100, v109);
    int16x8_t v112 = vzip1q_s16(v108, v109);
    int16x8_t v113 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v112)), (int8x16_t)vceqzq_s16(v112));
    int16x8_t v114 = vpmaxq_s16(v113, v113);
    int16x8_t v115 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v116 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v117 = vpmaxq_s16(v115, v115);
    int16x8_t v118 = vpminq_s16(v116, v116);
    int16x8_t v119 = vpmaxq_s16(v117, v117);
    int16x8_t v120 = vpminq_s16(v118, v118);
    int16x8_t v121 = vmaxq_s16(v110, v119);
    int16x8_t v122 = vminq_s16(v111, v120);
    int16x8_t v123 = vzip1q_s16(v119, v120);
    int16x8_t v124 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v123)), (int8x16_t)vceqzq_s16(v123));
    int16x8_t v125 = vpmaxq_s16(v124, v124);
    int16x8_t v126 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v127 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v128 = vpmaxq_s16(v126, v126);
    int16x8_t v129 = vpminq_s16(v127, v127);
    int16x8_t v130 = vpmaxq_s16(v128, v128);
    int16x8_t v131 = vpminq_s16(v129, v129);
    int16x8_t v132 = vmaxq_s16(v121, v130);
    int8x16_t v133 = (int8x16_t)vminq_s16(v122, v131);
    int16x8_t v134 = vzip1q_s16(v130, v131);
    int16x8_t v135 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v134)), (int8x16_t)vceqzq_s16(v134));
    int16x8_t v136 = vpmaxq_s16(v135, v135);
    int8x16_t v137 = (int8x16_t)vmaxq_s16(vmaxq_s16(v103, v114), vmaxq_s16(v125, v136));
    int8x16_t v409 = (int8x16_t)v132;
    int16x8_t v138 = vclzq_s16(vsubq_s16(v132, (int16x8_t)v133));
    int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v34, v138);
    int8x16_t v140 = (int8x16_t)vcgtq_s16((int16x8_t)v137, (int16x8_t)v139);
    int8x16_t v141 = vbslq_s8(v140, v139, v137);
    v137.i64[0] = 0x18001800180018;
    v137.i64[1] = 0x18001800180018;
    int8x16_t v142 = vbslq_s8(v140, v137, v34);
    int16x8_t v143 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v103), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v144 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v114), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v145 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v125), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v146 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v136), (int16x8_t)v77), (int16x8_t)0);
    int8x16_t v147 = (int8x16_t)vsubq_s16((int16x8_t)v141, v143);
    int8x16_t v148 = (int8x16_t)vsubq_s16((int16x8_t)v141, v144);
    int8x16_t v149 = (int8x16_t)vsubq_s16((int16x8_t)v141, v145);
    int8x16_t v150 = (int8x16_t)vsubq_s16((int16x8_t)v141, v146);
    int8x16_t v151 = vbicq_s8(v84, (int8x16_t)vceqq_s16(vaddq_s16(v146, v145), vnegq_s16(vaddq_s16(v143, v144))));
    v84.i64[0] = 0x7000700070007;
    v84.i64[1] = 0x7000700070007;
    v152.i64[0] = 0x8000800080008;
    v152.i64[1] = 0x8000800080008;
    int8x16_t v153 = v431;
    int16x8_t v154 = (int16x8_t)vandq_s8(v83, v77);
    v155.i64[0] = 0x2000200020002;
    v155.i64[1] = 0x2000200020002;
    int16x8_t v156 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v154, v155), v34);
    int16x8_t v157 = v427;
    int16x8_t v158 = v428;
    int16x8_t v159 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v76, v152))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v152)), v156);
    int16x8_t v161 = v429;
    int16x8_t v160 = v430;
    int8x16_t v162 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v159, v427, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v141, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v142 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v151, (int16x8_t)v151)), (int16x8_t)v147, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v149, (int16x8_t)v148), (int16x8_t)v150), 3uLL))), 0);
    int v163 = (unsigned __int16)vaddvq_s16((int16x8_t)v162);
    BOOL v165 = a5 < 4 || a6 < 2;
    if (v163)
    {
      v166.i64[0] = 0x3000300030003;
      v166.i64[1] = 0x3000300030003;
      int8x16_t v415 = vbslq_s8(v162, v85, v415);
      int8x16_t v417 = vbslq_s8(v162, v86, v417);
      int8x16_t v167 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v141), v166), v142), v151);
      v168.i64[0] = 0xF000F000F000FLL;
      v168.i64[1] = 0xF000F000F000FLL;
      v166.i64[0] = -1;
      v166.i64[1] = -1;
      int8x16_t v419 = vbslq_s8(v162, v87, v419);
      int8x16_t v420 = vbslq_s8(v162, v88, v420);
      int8x16_t v421 = vbslq_s8(v162, v89, v421);
      int8x16_t v422 = vbslq_s8(v162, v90, v422);
      int8x16_t v423 = vbslq_s8(v162, v91, v423);
      int8x16_t v424 = vbslq_s8(v162, v92, v424);
      int16x8_t v157 = (int16x8_t)vbslq_s8(v162, v147, (int8x16_t)v427);
      int16x8_t v158 = (int16x8_t)vbslq_s8(v162, v148, (int8x16_t)v428);
      int16x8_t v427 = v157;
      int16x8_t v428 = v158;
      int16x8_t v161 = (int16x8_t)vbslq_s8(v162, v149, (int8x16_t)v429);
      int16x8_t v160 = (int16x8_t)vbslq_s8(v162, v150, (int8x16_t)v430);
      int16x8_t v429 = v161;
      int16x8_t v430 = v160;
      int8x16_t v433 = vbslq_s8(v162, v409, v433);
      int8x16_t v434 = vbslq_s8(v162, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v166, vsubq_s16(v168, v138)), (int16x8_t)v133), v140), v434);
      int8x16_t v153 = vbslq_s8(v162, v141, v431);
      int8x16_t v431 = v153;
      int8x16_t v432 = vbslq_s8(v162, v133, v432);
      int8x16_t v83 = vbslq_s8(v162, v167, v83);
      int8x16_t v425 = vbslq_s8(v162, (int8x16_t)vsubq_s16((int16x8_t)v425, (int16x8_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_242EA76C0)), v425);
      int8x16_t v426 = v83;
    }
    int16x8_t v169 = v413;
    int16x8_t v170 = v412;
    int16x8_t v171 = v410;
    if (!v165)
    {
      int8x16_t v182 = (int8x16_t)vsubq_s16(v11, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v172 = vsubq_s16((int16x8_t)v12, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7620));
      int16x8_t v173 = v411;
      v173.i32[3] = v12.i32[3];
      int8x16_t v174 = (int8x16_t)vsubq_s16(v410, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7590));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v411, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7630));
      int16x8_t v176 = v414;
      v176.i32[3] = v12.i32[3];
      int8x16_t v177 = (int8x16_t)vsubq_s16(v413, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7640));
      int8x16_t v178 = (int8x16_t)vsubq_s16(v414, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v179 = v408;
      v179.i32[3] = v12.i32[3];
      int8x16_t v180 = (int8x16_t)vsubq_s16(v412, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7650));
      int8x16_t v181 = (int8x16_t)v172;
      v181.i32[3] = v182.i32[0];
      v182.i32[0] = v172.i32[3];
      int8x16_t v183 = (int8x16_t)vsubq_s16(v408, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v184 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v185 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v186 = vpmaxq_s16(v184, v184);
      int16x8_t v187 = vpminq_s16(v185, v185);
      int16x8_t v188 = vpmaxq_s16(v186, v186);
      int16x8_t v189 = vpminq_s16(v187, v187);
      v190.i64[0] = 0x8000800080008000;
      v190.i64[1] = 0x8000800080008000;
      v191.i64[0] = 0x8000800080008000;
      v191.i64[1] = 0x8000800080008000;
      int16x8_t v192 = vminq_s16(v189, v191);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      v191.i64[0] = 0x10001000100010;
      v191.i64[1] = 0x10001000100010;
      int16x8_t v194 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v193)), (int8x16_t)vceqzq_s16(v193));
      int16x8_t v195 = vpmaxq_s16(v194, v194);
      int16x8_t v196 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v197 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v198 = vpmaxq_s16(v196, v196);
      int16x8_t v199 = vpminq_s16(v197, v197);
      int16x8_t v200 = vpmaxq_s16(v198, v198);
      int16x8_t v201 = vpminq_s16(v199, v199);
      int16x8_t v202 = vmaxq_s16(vmaxq_s16(v188, v190), v200);
      int16x8_t v203 = vminq_s16(v192, v201);
      int16x8_t v204 = vzip1q_s16(v200, v201);
      int16x8_t v205 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v204)), (int8x16_t)vceqzq_s16(v204));
      int16x8_t v206 = vpmaxq_s16(v205, v205);
      int16x8_t v207 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v208 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v209 = vpmaxq_s16(v207, v207);
      int16x8_t v210 = vpminq_s16(v208, v208);
      int16x8_t v211 = vpmaxq_s16(v209, v209);
      int16x8_t v212 = vpminq_s16(v210, v210);
      int16x8_t v213 = vmaxq_s16(v202, v211);
      int16x8_t v214 = vminq_s16(v203, v212);
      int16x8_t v215 = vzip1q_s16(v211, v212);
      int16x8_t v216 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v215)), (int8x16_t)vceqzq_s16(v215));
      int16x8_t v217 = vpmaxq_s16(v216, v216);
      int16x8_t v218 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v219 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v220 = vpmaxq_s16(v218, v218);
      int16x8_t v221 = vpminq_s16(v219, v219);
      int16x8_t v222 = vpmaxq_s16(v220, v220);
      int16x8_t v223 = vpminq_s16(v221, v221);
      int8x16_t v224 = (int8x16_t)vmaxq_s16(v213, v222);
      int8x16_t v225 = (int8x16_t)vminq_s16(v214, v223);
      int16x8_t v226 = vzip1q_s16(v222, v223);
      int16x8_t v227 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v226)), (int8x16_t)vceqzq_s16(v226));
      int8x16_t v228 = (int8x16_t)vpmaxq_s16(v227, v227);
      int8x16_t v229 = (int8x16_t)vmaxq_s16(vmaxq_s16(v195, v206), vmaxq_s16(v217, (int16x8_t)v228));
      int16x8_t v230 = vclzq_s16(vsubq_s16((int16x8_t)v224, (int16x8_t)v225));
      int8x16_t v231 = (int8x16_t)vsubq_s16(v191, v230);
      int8x16_t v232 = (int8x16_t)vcgtq_s16((int16x8_t)v229, (int16x8_t)v231);
      int8x16_t v233 = vbslq_s8(v232, v231, v229);
      v234.i64[0] = 0x3000300030003;
      v234.i64[1] = 0x3000300030003;
      int8x16_t v235 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v195), v234), (int16x8_t)0);
      int16x8_t v236 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v206), v234), (int16x8_t)0);
      int16x8_t v237 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v217), v234), (int16x8_t)0);
      int16x8_t v238 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, (int16x8_t)v228), v234), (int16x8_t)0);
      int8x16_t v239 = (int8x16_t)vsubq_s16((int16x8_t)v233, (int16x8_t)v235);
      int8x16_t v240 = (int8x16_t)vsubq_s16((int16x8_t)v233, v236);
      int8x16_t v241 = (int8x16_t)vsubq_s16((int16x8_t)v233, v237);
      int8x16_t v242 = (int8x16_t)vsubq_s16((int16x8_t)v233, v238);
      v228.i64[0] = 0x4000400040004;
      v228.i64[1] = 0x4000400040004;
      int8x16_t v243 = vbicq_s8(v228, (int8x16_t)vceqq_s16(vaddq_s16(v238, v237), vnegq_s16(vaddq_s16((int16x8_t)v235, v236))));
      int16x8_t v244 = (int16x8_t)vandq_s8(v231, v232);
      v231.i64[0] = 0x7000700070007;
      v231.i64[1] = 0x7000700070007;
      int16x8_t v245 = vaddq_s16(vmlaq_s16(vaddq_s16(v244, vaddq_s16((int16x8_t)v243, (int16x8_t)v243)), (int16x8_t)v239, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v241, (int16x8_t)v240), (int16x8_t)v242), 3uLL));
      v235.i64[0] = 0x8000800080008;
      v235.i64[1] = 0x8000800080008;
      int8x16_t v83 = v426;
      int16x8_t v157 = v427;
      int16x8_t v246 = (int16x8_t)vandq_s8(v426, (int8x16_t)v234);
      v247.i64[0] = 0x2000200020002;
      v247.i64[1] = 0x2000200020002;
      int16x8_t v248 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v246, (int16x8_t)v247), (int8x16_t)v191);
      int16x8_t v160 = v430;
      int8x16_t v153 = v431;
      int16x8_t v249 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v426, v235))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v235)), v248);
      int16x8_t v158 = v428;
      int16x8_t v161 = v429;
      int8x16_t v250 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v249, v427, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), v245), 0);
      if (vaddvq_s16((int16x8_t)v250))
      {
        v251.i64[0] = 0x9000900090009;
        v251.i64[1] = 0x9000900090009;
        int8x16_t v415 = vbslq_s8(v250, v182, v415);
        int8x16_t v417 = vbslq_s8(v250, v181, v417);
        v252.i64[0] = -1;
        v252.i64[1] = -1;
        int8x16_t v419 = vbslq_s8(v250, v174, v419);
        int8x16_t v420 = vbslq_s8(v250, v175, v420);
        v253.i64[0] = 0xF000F000F000FLL;
        v253.i64[1] = 0xF000F000F000FLL;
        int8x16_t v421 = vbslq_s8(v250, v177, v421);
        int8x16_t v422 = vbslq_s8(v250, v178, v422);
        int8x16_t v423 = vbslq_s8(v250, v180, v423);
        int8x16_t v424 = vbslq_s8(v250, v183, v424);
        int16x8_t v157 = (int16x8_t)vbslq_s8(v250, v239, (int8x16_t)v427);
        int16x8_t v158 = (int16x8_t)vbslq_s8(v250, v240, (int8x16_t)v428);
        int16x8_t v427 = v157;
        int16x8_t v428 = v158;
        int16x8_t v161 = (int16x8_t)vbslq_s8(v250, v241, (int8x16_t)v429);
        int16x8_t v160 = (int16x8_t)vbslq_s8(v250, v242, (int8x16_t)v430);
        int16x8_t v429 = v161;
        int16x8_t v430 = v160;
        int8x16_t v433 = vbslq_s8(v250, v224, v433);
        int8x16_t v434 = vbslq_s8(v250, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v252, vsubq_s16(v253, v230)), (int16x8_t)v225), v232), v434);
        int8x16_t v153 = vbslq_s8(v250, v233, v431);
        int8x16_t v431 = v153;
        int8x16_t v432 = vbslq_s8(v250, v225, v432);
        int8x16_t v83 = vbslq_s8(v250, vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v233), v247), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v232, v251), (int16x8_t)vmvnq_s8(v232))), v243), v426);
        int8x16_t v425 = vbslq_s8(v250, vextq_s8(v12, v12, 0xCuLL), v425);
        int8x16_t v426 = v83;
      }
    }
    int16x8_t v254 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v157));
    int8x16_t v416 = (int8x16_t)vaddq_s16(v254, (int16x8_t)v415);
    int8x16_t v418 = (int8x16_t)vaddq_s16((int16x8_t)v417, v254);
    int16x8_t v255 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v158));
    int8x16_t v419 = (int8x16_t)vaddq_s16((int16x8_t)v419, v255);
    int8x16_t v420 = (int8x16_t)vaddq_s16((int16x8_t)v420, v255);
    int16x8_t v256 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v161));
    int8x16_t v421 = (int8x16_t)vaddq_s16((int16x8_t)v421, v256);
    int8x16_t v422 = (int8x16_t)vaddq_s16((int16x8_t)v422, v256);
    int8x16_t v257 = vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v160));
    int8x16_t v423 = (int8x16_t)vaddq_s16((int16x8_t)v423, (int16x8_t)v257);
    int8x16_t v424 = (int8x16_t)vaddq_s16((int16x8_t)v424, (int16x8_t)v257);
    v257.i64[0] = 0x8000800080008;
    v257.i64[1] = 0x8000800080008;
    v258.i64[0] = 0x3000300030003;
    v258.i64[1] = 0x3000300030003;
    v259.i64[0] = 0x2000200020002;
    v259.i64[1] = 0x2000200020002;
    int8x16_t v260 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v83, v258), v259);
    v259.i64[0] = 0x10001000100010;
    v259.i64[1] = 0x10001000100010;
    int16x8_t v261 = (int16x8_t)vandq_s8(v260, (int8x16_t)v259);
    v259.i64[0] = 0x7000700070007;
    v259.i64[1] = 0x7000700070007;
    int16x8_t v262 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v153, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v83, v257))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v257)), v261), v157, v259), vshlq_n_s16(vaddq_s16(v161, vaddq_s16(v158, v160)), 3uLL));
    if ((unint64_t)(vpaddq_s16(v262, v262).i16[0] - 719) < 0xFFFFFFFFFFFFFCF8)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 96;
    }
    else
    {
      int32x4_t v263 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v264 = 8 * (a1 & 7);
      if (v264) {
        uint64_t v265 = *v263 & ~(-1 << v264);
      }
      else {
        uint64_t v265 = 0;
      }
      *a2 = 0;
      uint64_t v267 = ((v153.i16[0] << 10) + 15360) & 0x3C00;
      if (!v153.i16[0]) {
        uint64_t v267 = 0;
      }
      if (v153.i16[1]) {
        uint64_t v268 = ((v153.u16[1] << 14) + 245760) & 0x3C000;
      }
      else {
        uint64_t v268 = 0;
      }
      unint64_t v269 = v267 | v268 | v83.i8[0] & 0x1F | (32 * (v83.i8[2] & 0x1Fu));
      unint64_t v270 = v425.u32[0];
      uint64_t v271 = (v269 << v264) | v265;
      if (v264 >= 0x2E)
      {
        *int32x4_t v263 = v271;
        uint64_t v271 = v269 >> (-8 * (a1 & 7u));
      }
      unint64_t v272 = (v264 + 18) & 0x3A;
      uint64_t v273 = v271 | (v270 << v272);
      if (v272 >= 0x20)
      {
        *(void *)((char *)v263 + (((v264 + 18) >> 3) & 8)) = v273;
        uint64_t v273 = v270 >> -(char)v272;
      }
      unint64_t v274 = v264 + 50;
      int8x16_t v275 = (int8x16_t)vsubq_s16((int16x8_t)v431, v427);
      int8x16_t v276 = (int8x16_t)vsubq_s16((int16x8_t)v431, v428);
      int8x16_t v277 = (int8x16_t)vsubq_s16((int16x8_t)v431, v429);
      int8x16_t v278 = (int8x16_t)vsubq_s16((int16x8_t)v431, v430);
      *(uint8x8_t *)v275.i8 = vqmovn_u16((uint16x8_t)v275);
      *(uint8x8_t *)v276.i8 = vqmovn_u16((uint16x8_t)v276);
      *(uint8x8_t *)v277.i8 = vqmovn_u16((uint16x8_t)v277);
      *(uint8x8_t *)v278.i8 = vqmovn_u16((uint16x8_t)v278);
      v278.i64[0] = vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)vzip1q_s8(v275, v276), (int16x8_t)vzip1q_s8(v277, v278)), (int32x4_t)vzip1q_s16((int16x8_t)vtrn2q_s8(v275, v276), (int16x8_t)vtrn2q_s8(v277, v278))).u64[0];
      v276.i64[0] = 0x202020202020202;
      v276.i64[1] = 0x202020202020202;
      int8x16_t v279 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v426.i8, (int8x8_t)0x4000400040004)))), v276);
      v276.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v276.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v277.i64[0] = -1;
      v277.i64[1] = -1;
      uint8x16_t v280 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v277, (uint8x16_t)vorrq_s8(v279, v276)), (int8x16_t)v278.u64[0]);
      int16x8_t v281 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v279.i8);
      uint16x8_t v282 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v280.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v281)), (int16x8_t)vmovl_high_u8(v280));
      uint16x8_t v283 = (uint16x8_t)vpaddq_s16(v281, (int16x8_t)vmovl_high_u8((uint8x16_t)v279));
      int32x4_t v284 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v283.i8);
      int32x4_t v285 = (int32x4_t)vmovl_high_u16(v283);
      int32x4_t v286 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v282.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v284)), (int32x4_t)vshlq_u32(vmovl_high_u16(v282), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v285)));
      int32x4_t v287 = vpaddq_s32(v284, v285);
      v288.i64[0] = v286.u32[0];
      v288.i64[1] = v286.u32[1];
      uint64x2_t v289 = (uint64x2_t)v288;
      v288.i64[0] = v286.u32[2];
      v288.i64[1] = v286.u32[3];
      uint64x2_t v290 = (uint64x2_t)v288;
      v288.i64[0] = v287.u32[0];
      v288.i64[1] = v287.u32[1];
      int64x2_t v291 = v288;
      v288.i64[0] = v287.u32[2];
      v288.i64[1] = v287.u32[3];
      int64x2_t v292 = vpaddq_s64((int64x2_t)vshlq_u64(v289, (uint64x2_t)vzip1q_s64((int64x2_t)0, v291)), (int64x2_t)vshlq_u64(v290, (uint64x2_t)vzip1q_s64((int64x2_t)0, v288)));
      int64x2_t v293 = vpaddq_s64(v291, v288);
      uint64_t v294 = (v264 + 50) & 0x3A;
      unint64_t v295 = (v292.i64[0] << v294) | v273;
      if ((unint64_t)(v293.i64[0] + v294) >= 0x40)
      {
        *(void *)((char *)v263 + ((v274 >> 3) & 8)) = v295;
        unint64_t v295 = (unint64_t)v292.i64[0] >> -(char)v294;
      }
      unint64_t v296 = v293.i64[0] + v274;
      unint64_t v297 = v295 | (v292.i64[1] << v296);
      if ((v296 & 0x3F) + v293.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v296 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v297;
        unint64_t v297 = (unint64_t)v292.i64[1] >> -(v296 & 0x3F);
        if ((v296 & 0x3F) == 0) {
          unint64_t v297 = 0;
        }
      }
      unint64_t v298 = v296 + v293.i64[1];
      v299.i64[0] = 0x8000800080008;
      v299.i64[1] = 0x8000800080008;
      v300.i64[0] = -1;
      v300.i64[1] = -1;
      int16x8_t v301 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v426, v299), (int8x16_t)0, 0xCuLL), v431);
      v302.i64[0] = 0xF000F000F000FLL;
      v302.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v303 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v300, (uint16x8_t)vaddq_s16(v301, v302)), v434);
      int32x4_t v304 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v301.i8);
      int32x4_t v305 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v303.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v304)), (int32x4_t)vmovl_high_u16(v303));
      int32x4_t v306 = vpaddq_s32(v304, (int32x4_t)vmovl_high_u16((uint16x8_t)v301));
      v307.i64[0] = v305.u32[0];
      v307.i64[1] = v305.u32[1];
      uint64x2_t v308 = (uint64x2_t)v307;
      v307.i64[0] = v305.u32[2];
      v307.i64[1] = v305.u32[3];
      uint64x2_t v309 = (uint64x2_t)v307;
      v307.i64[0] = v306.u32[0];
      v307.i64[1] = v306.u32[1];
      int64x2_t v310 = v307;
      v307.i64[0] = v306.u32[2];
      v307.i64[1] = v306.u32[3];
      int64x2_t v311 = vpaddq_s64((int64x2_t)vshlq_u64(v308, (uint64x2_t)vzip1q_s64((int64x2_t)0, v310)), (int64x2_t)vshlq_u64(v309, (uint64x2_t)vzip1q_s64((int64x2_t)0, v307)));
      int64x2_t v312 = vpaddq_s64(v310, v307);
      unint64_t v313 = (v311.i64[0] << v298) | v297;
      if (v312.i64[0] + (v298 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v298 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v313;
        unint64_t v313 = (unint64_t)v311.i64[0] >> -(v298 & 0x3F);
        if ((v298 & 0x3F) == 0) {
          unint64_t v313 = 0;
        }
      }
      unint64_t v314 = v312.i64[0] + v298;
      unint64_t v315 = v313 | (v311.i64[1] << v314);
      if ((v314 & 0x3F) + v312.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v314 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v315;
        unint64_t v315 = (unint64_t)v311.i64[1] >> -(v314 & 0x3F);
        if ((v314 & 0x3F) == 0) {
          unint64_t v315 = 0;
        }
      }
      unint64_t v316 = v314 + v312.i64[1];
      int16x8_t v317 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v427, 0xCuLL);
      v318.i64[0] = 0xF000F000F000FLL;
      v318.i64[1] = 0xF000F000F000FLL;
      v319.i64[0] = -1;
      v319.i64[1] = -1;
      uint16x8_t v320 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v319, (uint16x8_t)vaddq_s16(v317, v318)), v416);
      int32x4_t v321 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v317.i8);
      int32x4_t v322 = (int32x4_t)vmovl_high_u16((uint16x8_t)v317);
      int32x4_t v323 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v320.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v321)), (int32x4_t)vshlq_u32(vmovl_high_u16(v320), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v322)));
      int32x4_t v324 = vpaddq_s32(v321, v322);
      v325.i64[0] = v323.u32[0];
      v325.i64[1] = v323.u32[1];
      uint64x2_t v326 = (uint64x2_t)v325;
      v325.i64[0] = v323.u32[2];
      v325.i64[1] = v323.u32[3];
      uint64x2_t v327 = (uint64x2_t)v325;
      v325.i64[0] = v324.u32[0];
      v325.i64[1] = v324.u32[1];
      int64x2_t v328 = v325;
      v325.i64[0] = v324.u32[2];
      v325.i64[1] = v324.u32[3];
      int64x2_t v329 = vpaddq_s64((int64x2_t)vshlq_u64(v326, (uint64x2_t)vzip1q_s64((int64x2_t)0, v328)), (int64x2_t)vshlq_u64(v327, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)));
      int64x2_t v330 = vpaddq_s64(v328, v325);
      unint64_t v331 = (v329.i64[0] << v316) | v315;
      if (v330.i64[0] + (v316 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v316 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v331;
        unint64_t v331 = (unint64_t)v329.i64[0] >> -(v316 & 0x3F);
        if ((v316 & 0x3F) == 0) {
          unint64_t v331 = 0;
        }
      }
      unint64_t v332 = v330.i64[0] + v316;
      unint64_t v333 = v331 | (v329.i64[1] << v332);
      if ((v332 & 0x3F) + v330.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v332 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v333;
        unint64_t v333 = (unint64_t)v329.i64[1] >> -(v332 & 0x3F);
        if ((v332 & 0x3F) == 0) {
          unint64_t v333 = 0;
        }
      }
      unint64_t v334 = v332 + v330.i64[1];
      v335.i64[0] = 0xF000F000F000FLL;
      v335.i64[1] = 0xF000F000F000FLL;
      v336.i64[0] = -1;
      v336.i64[1] = -1;
      uint16x8_t v337 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v336, (uint16x8_t)vaddq_s16(v427, v335)), v418);
      int32x4_t v338 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v427.i8);
      int32x4_t v339 = (int32x4_t)vmovl_high_u16((uint16x8_t)v427);
      int32x4_t v340 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v337.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v338)), (int32x4_t)vshlq_u32(vmovl_high_u16(v337), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v339)));
      int32x4_t v341 = vpaddq_s32(v338, v339);
      v342.i64[0] = v340.u32[0];
      v342.i64[1] = v340.u32[1];
      uint64x2_t v343 = (uint64x2_t)v342;
      v342.i64[0] = v340.u32[2];
      v342.i64[1] = v340.u32[3];
      uint64x2_t v344 = (uint64x2_t)v342;
      v342.i64[0] = v341.u32[0];
      v342.i64[1] = v341.u32[1];
      int64x2_t v345 = v342;
      v342.i64[0] = v341.u32[2];
      v342.i64[1] = v341.u32[3];
      int64x2_t v346 = vpaddq_s64((int64x2_t)vshlq_u64(v343, (uint64x2_t)vzip1q_s64((int64x2_t)0, v345)), (int64x2_t)vshlq_u64(v344, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)));
      int64x2_t v347 = vpaddq_s64(v345, v342);
      unint64_t v348 = (v346.i64[0] << v334) | v333;
      if (v347.i64[0] + (v334 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v334 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        if ((v334 & 0x3F) != 0) {
          unint64_t v348 = (unint64_t)v346.i64[0] >> -(v334 & 0x3F);
        }
        else {
          unint64_t v348 = 0;
        }
      }
      uint64_t v349 = v347.i64[1];
      unint64_t v350 = v347.i64[0] + v334;
      uint64_t v351 = (v347.i64[0] + v334) & 0x3F;
      unint64_t v352 = v348 | (v346.i64[1] << v350);
      if ((unint64_t)(v351 + v347.i64[1]) >= 0x40)
      {
        *(void *)((char *)v263 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
        unint64_t v352 = (unint64_t)v346.i64[1] >> -(char)v351;
        if (!v351) {
          unint64_t v352 = 0;
        }
      }
      uint64_t v353 = 0;
      v354.i64[0] = 0xF000F000F000FLL;
      v354.i64[1] = 0xF000F000F000FLL;
      v355.i64[0] = -1;
      v355.i64[1] = -1;
      unint64_t v356 = v350 + v349;
      char v357 = 1;
      do
      {
        char v358 = v357;
        uint16x8_t v359 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v355, (uint16x8_t)vaddq_s16(v428, v354)), *(&v419 + v353));
        int32x4_t v360 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v428.i8);
        int32x4_t v361 = (int32x4_t)vmovl_high_u16((uint16x8_t)v428);
        int32x4_t v362 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v359.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v360)), (int32x4_t)vshlq_u32(vmovl_high_u16(v359), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v361)));
        int32x4_t v363 = vpaddq_s32(v360, v361);
        v364.i64[0] = v362.u32[0];
        v364.i64[1] = v362.u32[1];
        uint64x2_t v365 = (uint64x2_t)v364;
        v364.i64[0] = v362.u32[2];
        v364.i64[1] = v362.u32[3];
        uint64x2_t v366 = (uint64x2_t)v364;
        v364.i64[0] = v363.u32[0];
        v364.i64[1] = v363.u32[1];
        int64x2_t v367 = v364;
        v364.i64[0] = v363.u32[2];
        v364.i64[1] = v363.u32[3];
        int64x2_t v368 = vpaddq_s64((int64x2_t)vshlq_u64(v365, (uint64x2_t)vzip1q_s64((int64x2_t)0, v367)), (int64x2_t)vshlq_u64(v366, (uint64x2_t)vzip1q_s64((int64x2_t)0, v364)));
        int64x2_t v369 = vpaddq_s64(v367, v364);
        unint64_t v370 = (v368.i64[0] << v356) | v352;
        if (v369.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v370;
          unint64_t v370 = (unint64_t)v368.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v370 = 0;
          }
        }
        unint64_t v371 = v369.i64[0] + v356;
        unint64_t v352 = v370 | (v368.i64[1] << v371);
        if ((v371 & 0x3F) + v369.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v371 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v368.i64[1] >> -(v371 & 0x3F);
          if ((v371 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v357 = 0;
        unint64_t v356 = v371 + v369.i64[1];
        uint64_t v353 = 1;
      }
      while ((v358 & 1) != 0);
      uint64_t v372 = 0;
      char v373 = 1;
      v374.i64[0] = 0xF000F000F000FLL;
      v374.i64[1] = 0xF000F000F000FLL;
      v375.i64[0] = -1;
      v375.i64[1] = -1;
      do
      {
        char v376 = v373;
        uint16x8_t v377 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v375, (uint16x8_t)vaddq_s16(v429, v374)), *(&v421 + v372));
        int32x4_t v378 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v429.i8);
        int32x4_t v379 = (int32x4_t)vmovl_high_u16((uint16x8_t)v429);
        int32x4_t v380 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v377.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v378)), (int32x4_t)vshlq_u32(vmovl_high_u16(v377), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v379)));
        int32x4_t v381 = vpaddq_s32(v378, v379);
        v382.i64[0] = v380.u32[0];
        v382.i64[1] = v380.u32[1];
        uint64x2_t v383 = (uint64x2_t)v382;
        v382.i64[0] = v380.u32[2];
        v382.i64[1] = v380.u32[3];
        uint64x2_t v384 = (uint64x2_t)v382;
        v382.i64[0] = v381.u32[0];
        v382.i64[1] = v381.u32[1];
        int64x2_t v385 = v382;
        v382.i64[0] = v381.u32[2];
        v382.i64[1] = v381.u32[3];
        int64x2_t v386 = vpaddq_s64((int64x2_t)vshlq_u64(v383, (uint64x2_t)vzip1q_s64((int64x2_t)0, v385)), (int64x2_t)vshlq_u64(v384, (uint64x2_t)vzip1q_s64((int64x2_t)0, v382)));
        int64x2_t v387 = vpaddq_s64(v385, v382);
        unint64_t v388 = (v386.i64[0] << v356) | v352;
        if (v387.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v388;
          unint64_t v388 = (unint64_t)v386.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v388 = 0;
          }
        }
        unint64_t v389 = v387.i64[0] + v356;
        unint64_t v352 = v388 | (v386.i64[1] << v389);
        if ((v389 & 0x3F) + v387.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v389 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v386.i64[1] >> -(v389 & 0x3F);
          if ((v389 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v373 = 0;
        unint64_t v356 = v389 + v387.i64[1];
        uint64_t v372 = 1;
      }
      while ((v376 & 1) != 0);
      uint64_t v390 = 0;
      char v391 = 1;
      v392.i64[0] = 0xF000F000F000FLL;
      v392.i64[1] = 0xF000F000F000FLL;
      v393.i64[0] = -1;
      v393.i64[1] = -1;
      do
      {
        char v394 = v391;
        uint16x8_t v395 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v393, (uint16x8_t)vaddq_s16(v430, v392)), *(&v423 + v390));
        int32x4_t v396 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v430.i8);
        int32x4_t v397 = (int32x4_t)vmovl_high_u16((uint16x8_t)v430);
        int32x4_t v398 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v395.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v396)), (int32x4_t)vshlq_u32(vmovl_high_u16(v395), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v397)));
        int32x4_t v399 = vpaddq_s32(v396, v397);
        v400.i64[0] = v398.u32[0];
        v400.i64[1] = v398.u32[1];
        uint64x2_t v401 = (uint64x2_t)v400;
        v400.i64[0] = v398.u32[2];
        v400.i64[1] = v398.u32[3];
        uint64x2_t v402 = (uint64x2_t)v400;
        v400.i64[0] = v399.u32[0];
        v400.i64[1] = v399.u32[1];
        int64x2_t v403 = v400;
        v400.i64[0] = v399.u32[2];
        v400.i64[1] = v399.u32[3];
        int64x2_t v404 = vpaddq_s64((int64x2_t)vshlq_u64(v401, (uint64x2_t)vzip1q_s64((int64x2_t)0, v403)), (int64x2_t)vshlq_u64(v402, (uint64x2_t)vzip1q_s64((int64x2_t)0, v400)));
        int64x2_t v405 = vpaddq_s64(v403, v400);
        unint64_t v406 = (v404.i64[0] << v356) | v352;
        if (v405.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v406;
          unint64_t v406 = (unint64_t)v404.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v406 = 0;
          }
        }
        unint64_t v407 = v405.i64[0] + v356;
        unint64_t v352 = v406 | (v404.i64[1] << v407);
        if ((v407 & 0x3F) + v405.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v407 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v404.i64[1] >> -(v407 & 0x3F);
          if ((v407 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v391 = 0;
        unint64_t v356 = v407 + v405.i64[1];
        uint64_t v390 = 1;
      }
      while ((v394 & 1) != 0);
      if ((v356 & 0x3F) != 0) {
        *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
      }
      unint64_t result = (v356 - v264 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a3;
    *a2 = 3;
    return 4;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v11 = a6;
  if (a5 > 1)
  {
    uint64_t v21 = a5 & 0xFE;
    if (a5 == v21)
    {
      uint64_t v22 = 0;
      int16x8_t v23 = (int *)(a3 + 4);
      int16x8_t v24 = &v72;
      do
      {
        int16x8_t v25 = v24;
        int16x8_t v26 = v23;
        uint64_t v27 = a5;
        do
        {
          int v28 = *v26;
          *((_DWORD *)v25 - 4) = *(v26 - 1);
          *(_DWORD *)int16x8_t v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 2;
        }
        while (v27);
        ++v22;
        int16x8_t v23 = (int *)((char *)v23 + a4);
        int16x8_t v24 = (long long *)((char *)v24 + 4);
      }
      while (v22 != a6);
    }
    else
    {
      uint64_t v29 = 0;
      int16x8_t v30 = (int *)(a3 + 4);
      int16x8_t v31 = &v72;
      int16x8_t v32 = (char *)&v71 + ((16 * a5) & 0xFE0);
      do
      {
        int16x8_t v33 = v31;
        int8x16_t v34 = v30;
        uint64_t v35 = a5 & 0xFE;
        do
        {
          int v36 = *v34;
          *((_DWORD *)v33 - 4) = *(v34 - 1);
          *(_DWORD *)int16x8_t v33 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 2;
        }
        while (v35);
        int16x8_t v37 = (int *)(a3 + v29 * a4 + 4 * v21);
        int16x8_t v38 = v32;
        uint64_t v39 = a5 - v21;
        do
        {
          int v40 = *v37++;
          *int16x8_t v38 = v40;
          v38 += 4;
          --v39;
        }
        while (v39);
        ++v29;
        int16x8_t v30 = (int *)((char *)v30 + a4);
        int16x8_t v31 = (long long *)((char *)v31 + 4);
        v32 += 4;
      }
      while (v29 != v11);
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v12 = a6 & 0xFE;
    int16x8_t v13 = (int *)(a3 + 1);
    int16x8_t v14 = (_DWORD *)&v71 + 1;
    uint64_t v15 = v12;
    do
    {
      int v16 = *(int *)((char *)v13 - 1);
      int v17 = *v13;
      int16x8_t v13 = (int *)((char *)v13 + 2);
      *(v14 - 1) = v16;
      _DWORD *v14 = v17;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v12 != a6)
    {
LABEL_7:
      uint64_t v18 = a6 - v12;
      int16x8_t v19 = (_DWORD *)&v71 + v12;
      int16x8_t v20 = (_DWORD *)(a3 + v12 * a4);
      do
      {
        *v19++ = *v20;
        int16x8_t v20 = (_DWORD *)((char *)v20 + a4);
        --v18;
      }
      while (v18);
    }
  }
  int v55 = (unsigned __int16)v71;
  int v56 = WORD1(v71);
  int v57 = (unsigned __int16)v72;
  int v58 = WORD1(v72);
  int v59 = WORD2(v71);
  int v60 = WORD3(v71);
  int v61 = WORD2(v72);
  int v62 = WORD3(v72);
  int v63 = (unsigned __int16)v73;
  int v64 = WORD1(v73);
  int v65 = (unsigned __int16)v74;
  int v66 = WORD1(v74);
  int v67 = WORD2(v73);
  int v68 = WORD3(v73);
  if (a5 >= 4) {
    unsigned int v41 = 4;
  }
  else {
    unsigned int v41 = a5;
  }
  if (a5 >= 4) {
    unsigned int v42 = a5 - 4;
  }
  else {
    unsigned int v42 = 0;
  }
  int v69 = WORD2(v74);
  int v70 = WORD3(v74);
  if (a6 >= 2) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = a6;
  }
  if (a6 >= 2) {
    unsigned int v44 = a6 - 2;
  }
  else {
    unsigned int v44 = 0;
  }
  char v45 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1, (uint64_t)&v55, a7, v41, v43);
  int v55 = WORD4(v71);
  int v56 = WORD5(v71);
  int v57 = WORD4(v72);
  int v58 = WORD5(v72);
  int v59 = WORD6(v71);
  int v60 = HIWORD(v71);
  int v61 = WORD6(v72);
  int v62 = HIWORD(v72);
  int v63 = WORD4(v73);
  int v64 = WORD5(v73);
  int v65 = WORD4(v74);
  int v66 = WORD5(v74);
  int v67 = WORD6(v73);
  int v68 = HIWORD(v73);
  int v69 = WORD6(v74);
  int v70 = HIWORD(v74);
  if (a6 >= 4) {
    unsigned int v46 = 2;
  }
  else {
    unsigned int v46 = v44;
  }
  int v47 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 24, (uint64_t)&v55, a7, v41, v46);
  int v55 = (unsigned __int16)v75;
  int v56 = WORD1(v75);
  int v57 = (unsigned __int16)v76;
  int v58 = WORD1(v76);
  int v59 = WORD2(v75);
  int v60 = WORD3(v75);
  int v61 = WORD2(v76);
  int v62 = WORD3(v76);
  int v63 = (unsigned __int16)v77;
  int v64 = WORD1(v77);
  int v65 = (unsigned __int16)v78;
  int v66 = WORD1(v78);
  int v67 = WORD2(v77);
  int v68 = WORD3(v77);
  if (a5 >= 8) {
    unsigned int v48 = 4;
  }
  else {
    unsigned int v48 = v42;
  }
  int v69 = WORD2(v78);
  int v70 = WORD3(v78);
  int v49 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 48, (uint64_t)&v55, a7, v48, v43);
  int v55 = WORD4(v75);
  int v56 = WORD5(v75);
  int v57 = WORD4(v76);
  int v58 = WORD5(v76);
  int v59 = WORD6(v75);
  int v60 = HIWORD(v75);
  int v61 = WORD6(v76);
  int v62 = HIWORD(v76);
  int v63 = WORD4(v77);
  int v64 = WORD5(v77);
  int v65 = WORD4(v78);
  int v66 = WORD5(v78);
  int v67 = WORD6(v77);
  int v68 = HIWORD(v77);
  int v69 = WORD6(v78);
  int v70 = HIWORD(v78);
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(a1 + 72, (uint64_t)&v55, a7, v48, v46);
  if (v49) {
    char v51 = 4;
  }
  else {
    char v51 = 0;
  }
  if (v47) {
    char v52 = 2;
  }
  else {
    char v52 = 0;
  }
  if (result) {
    char v53 = -8;
  }
  else {
    char v53 = -16;
  }
  *a2 = v53 | v51 | v45 | v52;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressLossyCompressedSubblockDQuad(unint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v259 = *MEMORY[0x263EF8340];
  BOOL v7 = a5 < 2;
  BOOL v8 = a4 < 4 || a5 < 2;
  BOOL v224 = v8;
  BOOL v9 = a4 < 4 || a5 == 0;
  BOOL v223 = v9;
  BOOL v10 = a4 < 3 || a5 < 2;
  BOOL v222 = v10;
  BOOL v11 = a4 < 3 || a5 == 0;
  BOOL v221 = v11;
  if (a4) {
    BOOL v12 = a5 < 2;
  }
  else {
    BOOL v12 = 1;
  }
  if (a4 < 2) {
    BOOL v7 = 1;
  }
  BOOL v219 = v7;
  BOOL v220 = v12;
  BOOL v13 = a4 < 2 || a5 == 0;
  BOOL v218 = v13;
  do
  {
    uint64_t v14 = 0;
    char v15 = v5;
    unsigned int v16 = AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)3>::compBits[v6];
    *(&v257 + v6) = v16;
    switch(v16)
    {
      case 2u:
        uint64_t v14 = 5;
        break;
      case 0xAu:
        uint64_t v14 = 1;
        break;
      case 0xCu:
        uint64_t v14 = 2;
        break;
      case 0x10u:
        uint64_t v14 = 3;
        break;
      case 0x20u:
        uint64_t v14 = 4;
        break;
      default:
        break;
    }
    uint64_t v17 = v6;
    *(unsigned int *)((char *)&v235 + v17 * 4) = v14;
    unsigned int v18 = 1 << (v16 - 1);
    v234[v17 + 2] = v18;
    int16x8_t v19 = (unsigned int *)(a2 + 4 * v6);
    if (a3 == 1)
    {
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      if ((*v19 ^ v18) == 1) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = *v19 ^ v18;
      }
      *uint64_t v21 = v20;
      if ((v19[2] ^ v18) == 1) {
        unsigned int v22 = 0;
      }
      else {
        unsigned int v22 = v19[2] ^ v18;
      }
      v21[2] = v22;
      if ((v19[4] ^ v18) == 1) {
        unsigned int v23 = 0;
      }
      else {
        unsigned int v23 = v19[4] ^ v18;
      }
      v21[4] = v23;
      if ((v19[6] ^ v18) == 1) {
        unsigned int v24 = 0;
      }
      else {
        unsigned int v24 = v19[6] ^ v18;
      }
      v21[6] = v24;
      if ((v19[8] ^ v18) == 1) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = v19[8] ^ v18;
      }
      v21[8] = v25;
      if ((v19[10] ^ v18) == 1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v19[10] ^ v18;
      }
      v21[10] = v26;
      unsigned int v27 = v19[12] ^ v18;
      if (v27 == 1) {
        unsigned int v27 = 0;
      }
      v21[12] = v27;
      unsigned int v28 = v19[14] ^ v18;
      if (v28 == 1) {
        unsigned int v28 = 0;
      }
    }
    else if (a3 == 3)
    {
      unsigned int v20 = *v19 ^ v18;
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      *uint64_t v21 = v20;
      unsigned int v22 = v19[2] ^ v18;
      v21[2] = v22;
      unsigned int v23 = v19[4] ^ v18;
      v21[4] = v23;
      unsigned int v24 = v19[6] ^ v18;
      v21[6] = v24;
      unsigned int v25 = v19[8] ^ v18;
      v21[8] = v25;
      unsigned int v26 = v19[10] ^ v18;
      v21[10] = v26;
      unsigned int v27 = v19[12] ^ v18;
      v21[12] = v27;
      unsigned int v28 = v19[14] ^ v18;
    }
    else
    {
      unsigned int v20 = *v19;
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      *uint64_t v21 = *v19;
      unsigned int v22 = v19[2];
      v21[2] = v22;
      unsigned int v23 = v19[4];
      v21[4] = v23;
      unsigned int v24 = v19[6];
      v21[6] = v24;
      unsigned int v25 = v19[8];
      v21[8] = v25;
      unsigned int v26 = v19[10];
      v21[10] = v26;
      unsigned int v27 = v19[12];
      v21[12] = v27;
      unsigned int v28 = v19[14];
    }
    v21[14] = v28;
    uint64_t v29 = &v256[v17 + 2];
    v256[v6 + 2] = v20;
    v256[v6 + 4] = v20;
    v256[v6] = 0;
    if (v218)
    {
      unsigned int v30 = v20;
      if (v220) {
        goto LABEL_58;
      }
    }
    else
    {
      unsigned int v30 = v20;
      if (v22 < v20)
      {
        v256[v6] = 1;
        v256[v6 + 4] = v22;
        unsigned int v30 = v22;
      }
      if (v20 >= v22) {
        int16x8_t v31 = &v256[v17 + 2];
      }
      else {
        int16x8_t v31 = (unsigned int *)(&v240 + v6);
      }
      unsigned int v20 = *v31;
      *uint64_t v29 = *v31;
      if (v220)
      {
LABEL_58:
        if (v219) {
          goto LABEL_59;
        }
        goto LABEL_76;
      }
    }
    if (v23 < v30)
    {
      v256[v6] = 2;
      v256[v6 + 4] = v23;
      unsigned int v30 = v23;
    }
    if (v20 >= v23) {
      int16x8_t v32 = &v256[v17 + 2];
    }
    else {
      int16x8_t v32 = (unsigned int *)(&v242 + v6);
    }
    unsigned int v20 = *v32;
    *uint64_t v29 = *v32;
    if (v219)
    {
LABEL_59:
      if (v221) {
        goto LABEL_60;
      }
      goto LABEL_82;
    }
LABEL_76:
    if (v24 < v30)
    {
      v256[v6] = 3;
      v256[v6 + 4] = v24;
      unsigned int v30 = v24;
    }
    if (v20 >= v24) {
      int16x8_t v33 = &v256[v17 + 2];
    }
    else {
      int16x8_t v33 = (unsigned int *)(&v244 + v6);
    }
    unsigned int v20 = *v33;
    *uint64_t v29 = *v33;
    if (v221)
    {
LABEL_60:
      if (v223) {
        goto LABEL_61;
      }
      goto LABEL_88;
    }
LABEL_82:
    if (v25 < v30)
    {
      v256[v6] = 4;
      v256[v6 + 4] = v25;
      unsigned int v30 = v25;
    }
    if (v20 >= v25) {
      int8x16_t v34 = &v256[v17 + 2];
    }
    else {
      int8x16_t v34 = (unsigned int *)(&v246 + v6);
    }
    unsigned int v20 = *v34;
    *uint64_t v29 = *v34;
    if (v223)
    {
LABEL_61:
      if (v222) {
        goto LABEL_62;
      }
      goto LABEL_94;
    }
LABEL_88:
    if (v26 < v30)
    {
      v256[v6] = 5;
      v256[v6 + 4] = v26;
      unsigned int v30 = v26;
    }
    if (v20 >= v26) {
      uint64_t v35 = &v256[v17 + 2];
    }
    else {
      uint64_t v35 = (unsigned int *)(&v248 + v6);
    }
    unsigned int v20 = *v35;
    *uint64_t v29 = *v35;
    if (v222)
    {
LABEL_62:
      if (v224) {
        goto LABEL_106;
      }
LABEL_100:
      if (v28 < v30)
      {
        v256[v6] = 7;
        v256[v6 + 4] = v28;
        unsigned int v30 = v28;
      }
      if (v20 >= v28) {
        int16x8_t v37 = &v256[v17 + 2];
      }
      else {
        int16x8_t v37 = (unsigned int *)(&v252 + v6);
      }
      unsigned int v20 = *v37;
      *uint64_t v29 = *v37;
      goto LABEL_106;
    }
LABEL_94:
    if (v27 < v30)
    {
      v256[v6] = 6;
      v256[v6 + 4] = v27;
      unsigned int v30 = v27;
    }
    if (v20 >= v27) {
      int v36 = &v256[v17 + 2];
    }
    else {
      int v36 = (unsigned int *)(&v250 + v6);
    }
    unsigned int v20 = *v36;
    *uint64_t v29 = *v36;
    if (!v224) {
      goto LABEL_100;
    }
LABEL_106:
    unsigned int v38 = __clz(v20 - v30);
    unsigned int v39 = 32 - v38;
    int v40 = 1;
    switch(v16)
    {
      case 2u:
        BOOL v41 = v38 == 31;
        goto LABEL_118;
      case 8u:
        break;
      case 0xAu:
        if (v38 - 29 < 3) {
          unsigned int v39 = 3;
        }
        goto LABEL_122;
      case 0xCu:
        if ((v38 & 0x3C) == 0x1C) {
          unsigned int v39 = 4;
        }
        int v40 = -2;
        break;
      case 0x10u:
        BOOL v41 = v20 == 0xFFFF && v38 == 31;
LABEL_118:
        if (v41) {
          unsigned int v39 = 2;
        }
        goto LABEL_122;
      case 0x20u:
        unsigned int v39 = (v39 & 1) + (v39 >> 1);
LABEL_122:
        int v40 = -1;
        break;
      default:
        int v40 = 0;
        break;
    }
    unsigned int v42 = (v39 + v40) & ~((int)(v39 + v40) >> 31);
    if (v20 == v30 && v16 - 8 <= 4 && v42 <= 2)
    {
      if (v30) {
        unsigned int v42 = v30 != ~(-1 << v16) || v16 > 0xB;
      }
      else {
        unsigned int v42 = 0;
      }
    }
    *(&v254 + v6) = v42;
    if ((a3 | 2) == 3)
    {
      BOOL v43 = 0;
      if (v20 >= v18 && v30 < v18) {
        BOOL v43 = kDQuadParamTable[160 * v14 + 8 + 10 * v42] == 0;
      }
    }
    else
    {
      BOOL v43 = 0;
    }
    if (v42 >= kDquadTransition[v14] || v43)
    {
      unsigned int v44 = kDQuadParamTable[160 * v14 + 4 + 10 * v42]
          - v43
          + *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
            + 4 * v14
            + 1);
      if (v43) {
        int v45 = 0;
      }
      else {
        int v45 = -2;
      }
      BOOL v50 = v16 >= v44;
      unsigned int v46 = v16 - v44;
      BOOL v72 = v46 != 0 && v50;
      int v47 = v30 & ~(-1 << v46);
      if (!v72) {
        int v47 = 0;
      }
      int v48 = v47 + v45;
      unsigned int v49 = __clz(v48 + v20 - v30);
      BOOL v50 = v48 < 1 || v49 >= v38;
      if (v50)
      {
        if (v16 != 32) {
          goto LABEL_22;
        }
      }
      else
      {
        *(&v254 + v6) = ++v42;
        if (v16 != 32) {
          goto LABEL_22;
        }
      }
      if (kDquadMaxMode[v14] < v42) {
        unsigned int v42 = kDquadMaxMode[v14];
      }
      *(&v254 + v6) = v42;
    }
LABEL_22:
    char v5 = 1;
    uint64_t v6 = 1u;
  }
  while ((v15 & 1) == 0);
  uint64_t v51 = v235;
  uint64_t v52 = v236;
  unsigned int v54 = v254;
  unsigned int v53 = v255;
  BOOL v56 = v255 >= v254;
  BOOL v57 = v255 < v254;
  int v58 = kDQuadParamTable[160 * v236 + 6 + 10 * v255];
  int v232 = kDQuadParamTable[160 * v235 + 6 + 10 * v254];
  int v55 = v232;
  int v233 = v58;
  v234[0] = v232;
  v234[1] = v58;
  if (*(&v254 + v56) == *(&v254 + v57))
  {
    int v59 = v232;
  }
  else
  {
    int v60 = *(_DWORD *)((unint64_t)v234 | (4 * v57));
    int v59 = v232;
    if (v60 >= 1)
    {
      *(_DWORD *)((unint64_t)&v232 | (4 * v57)) = 0;
      *(_DWORD *)((unint64_t)&v232 | (4 * v56)) += v60;
      int v59 = v232;
    }
  }
  if (a4) {
    BOOL v61 = a5 == 0;
  }
  else {
    BOOL v61 = 1;
  }
  int v62 = v61;
  int v217 = v62;
  int v63 = &kDQuadParamTable[160 * v51 + 10 * v54];
  unint64_t v64 = *((void *)v63 + 1);
  int v65 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v51
        + 1);
  int v66 = v63[4];
  LODWORD(v63) = v63[5];
  unsigned int v67 = v66 + v65;
  unsigned int v230 = v67;
  unsigned int v68 = v63 + v65;
  unsigned int v228 = v68;
  int v69 = v59 - v55;
  if (v69 < 0)
  {
    if (kDQuadParamTable[160 * v51 + 7 + 10 * v54] < -v69)
    {
      unsigned int v228 = --v68;
      if (!kDQuadParamTable[160 * v51 + 8 + 10 * v54])
      {
        int v70 = -1;
LABEL_167:
        unsigned int v230 = v70 + v67;
      }
    }
  }
  else if (v69)
  {
    v68 += v69;
    unsigned int v228 = v68;
    int v70 = v69;
    goto LABEL_167;
  }
  BOOL v72 = v51 == 5 && v54 == 1 && v69 < 2;
  int v73 = v72;
  if (a3 == 4)
  {
    if (v51 == 3) {
      int v74 = 31744;
    }
    else {
      int v74 = 0;
    }
    if (v51 == 4) {
      int v75 = 2139095040;
    }
    else {
      int v75 = v74;
    }
    int v76 = 1 << (v257 - 1);
    if (v217)
    {
      if (v218) {
        goto LABEL_188;
      }
LABEL_336:
      if ((v75 & ~v240) == 0 || v240 == v76) {
        int v73 = 1;
      }
      if (!v220) {
        goto LABEL_343;
      }
LABEL_189:
      if (v219) {
        goto LABEL_190;
      }
LABEL_350:
      if ((v75 & ~v244) == 0 || v244 == v76) {
        int v73 = 1;
      }
      if (!v221) {
        goto LABEL_357;
      }
LABEL_191:
      if (v223) {
        goto LABEL_192;
      }
LABEL_364:
      if ((v75 & ~v248) == 0 || v248 == v76) {
        int v73 = 1;
      }
      if (!v222) {
        goto LABEL_371;
      }
LABEL_193:
      if (!v224) {
        goto LABEL_194;
      }
    }
    else
    {
      if ((v75 & ~v238) == 0 || v238 == v76) {
        int v73 = 1;
      }
      if (!v218) {
        goto LABEL_336;
      }
LABEL_188:
      if (v220) {
        goto LABEL_189;
      }
LABEL_343:
      if ((v75 & ~v242) == 0 || v242 == v76) {
        int v73 = 1;
      }
      if (!v219) {
        goto LABEL_350;
      }
LABEL_190:
      if (v221) {
        goto LABEL_191;
      }
LABEL_357:
      if ((v75 & ~v246) == 0 || v246 == v76) {
        int v73 = 1;
      }
      if (!v223) {
        goto LABEL_364;
      }
LABEL_192:
      if (v222) {
        goto LABEL_193;
      }
LABEL_371:
      if ((v75 & ~v250) == 0 || v250 == v76) {
        int v73 = 1;
      }
      if (!v224)
      {
LABEL_194:
        if ((v75 & ~v252) == 0 || v252 == v76) {
          int v73 = 1;
        }
      }
    }
  }
  BOOL v72 = v64 >> v68 > 0x10;
  int v78 = v217;
  if (v72) {
    int v78 = 1;
  }
  int v79 = v78 | v73;
  int16x8_t v80 = &kDQuadParamTable[160 * v52 + 10 * v53];
  unint64_t v81 = *((void *)v80 + 1);
  int v82 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v52
        + 1);
  int v83 = v80[4];
  LODWORD(v80) = v80[5];
  unsigned int v84 = v83 + v82;
  unsigned int v231 = v84;
  unsigned int v85 = v80 + v82;
  unsigned int v229 = v85;
  int v86 = v233 - v58;
  if (v233 - v58 < 0)
  {
    if (kDQuadParamTable[160 * v52 + 7 + 10 * v53] < v58 - v233)
    {
      unsigned int v229 = --v85;
      if (!kDQuadParamTable[160 * v52 + 8 + 10 * v53])
      {
        int v87 = -1;
LABEL_206:
        unsigned int v231 = v87 + v84;
      }
    }
  }
  else if (v233 != v58)
  {
    v85 += v86;
    unsigned int v229 = v85;
    int v87 = v233 - v58;
    goto LABEL_206;
  }
  if (v52 == 5 && v53 == 1 && v86 < 2) {
    int v79 = 1;
  }
  if (a3 == 4)
  {
    if (v52 == 3) {
      int v88 = 31744;
    }
    else {
      int v88 = 0;
    }
    if (v52 == 4) {
      int v88 = 2139095040;
    }
    int v89 = 1 << (v258 - 1);
    if (v217)
    {
      if (v218) {
        goto LABEL_221;
      }
LABEL_386:
      if ((v88 & ~v241) == 0 || v241 == v89) {
        int v79 = 1;
      }
      if (!v220) {
        goto LABEL_393;
      }
LABEL_222:
      if (v219) {
        goto LABEL_223;
      }
LABEL_400:
      if ((v88 & ~v245) == 0 || v245 == v89) {
        int v79 = 1;
      }
      if (!v221) {
        goto LABEL_407;
      }
LABEL_224:
      if (v223) {
        goto LABEL_225;
      }
LABEL_414:
      if ((v88 & ~v249) == 0 || v249 == v89) {
        int v79 = 1;
      }
      if (!v222) {
        goto LABEL_421;
      }
LABEL_226:
      if (!v224) {
        goto LABEL_227;
      }
    }
    else
    {
      if ((v88 & ~v239) == 0 || v239 == v89) {
        int v79 = 1;
      }
      if (!v218) {
        goto LABEL_386;
      }
LABEL_221:
      if (v220) {
        goto LABEL_222;
      }
LABEL_393:
      if ((v88 & ~v243) == 0 || v243 == v89) {
        int v79 = 1;
      }
      if (!v219) {
        goto LABEL_400;
      }
LABEL_223:
      if (v221) {
        goto LABEL_224;
      }
LABEL_407:
      if ((v88 & ~v247) == 0 || v247 == v89) {
        int v79 = 1;
      }
      if (!v223) {
        goto LABEL_414;
      }
LABEL_225:
      if (v222) {
        goto LABEL_226;
      }
LABEL_421:
      if ((v88 & ~v251) == 0 || v251 == v89) {
        int v79 = 1;
      }
      if (!v224)
      {
LABEL_227:
        if ((v88 & ~v253) == 0 || v253 == v89) {
          int v79 = 1;
        }
      }
    }
  }
  char v91 = 0;
  uint64_t v92 = 0;
  BOOL v72 = v81 >> v85 > 0x10;
  int v93 = v217;
  if (v72) {
    int v93 = 1;
  }
  int v214 = v93;
  int v215 = v79;
  uint64_t v227 = 0;
  uint64_t v226 = 0;
  memset(v225, 0, sizeof(v225));
  do
  {
    uint64_t v94 = 0;
    unsigned int v95 = 0;
    unsigned int v96 = *(&v257 + v92);
    if (v96 >= *(&v230 + v92)) {
      unsigned int v97 = *(&v230 + v92);
    }
    else {
      unsigned int v97 = *(&v257 + v92);
    }
    *(&v230 + v92) = v97;
    int16x8_t v98 = &kDQuadParamTable[160 * *(&v235 + v92) + 10 * *(&v254 + v92)];
    if (v98[5]) {
      unsigned int v99 = v96;
    }
    else {
      unsigned int v99 = 0;
    }
    if (v99 >= *(&v228 + v92)) {
      unsigned int v99 = *(&v228 + v92);
    }
    int v100 = v256[v92 + 4] & (-1 << (v96 - v97));
    int16x8_t v101 = &v238 + v92;
    int v102 = *v101 - v100;
    uint64_t v103 = 32 * v92;
    int16x8_t v104 = &v237[32 * v92];
    if (v217) {
      int v102 = 0;
    }
    int v105 = v101[2] - v100;
    if (v218) {
      int v105 = 0;
    }
    *int16x8_t v104 = v102;
    v104[1] = v105;
    int v106 = v101[4] - v100;
    if (v220) {
      int v106 = 0;
    }
    int v107 = v101[6] - v100;
    if (v219) {
      int v107 = 0;
    }
    v104[2] = v106;
    v104[3] = v107;
    int v108 = v101[8] - v100;
    if (v221) {
      int v108 = 0;
    }
    int v109 = v101[10] - v100;
    if (v223) {
      int v109 = 0;
    }
    v104[4] = v108;
    v104[5] = v109;
    int v110 = v101[12] - v100;
    if (v222) {
      int v110 = 0;
    }
    int v111 = v101[14] - v100;
    if (v224) {
      int v111 = 0;
    }
    v104[6] = v110;
    v104[7] = v111;
    char v112 = v91;
    *(&v228 + v92) = v99;
    unint64_t v113 = *((void *)v98 + 1);
    *((_DWORD *)&v227 + v92) = v100;
    unint64_t v114 = v113 >> v99;
    int v115 = ~(-1 << v96);
    if (v114 <= 1) {
      unint64_t v116 = 1;
    }
    else {
      unint64_t v116 = v114;
    }
    uint64_t v117 = 2 * v256[v92];
    do
    {
      if (v117 != v94)
      {
        if (v99) {
          unint64_t v118 = *(unsigned int *)&v237[v103] / v116;
        }
        else {
          LODWORD(v118) = 0;
        }
        int16x8_t v119 = (int *)v225 + 7 * v92 + v95;
        *int16x8_t v119 = v118;
        if (v114 >= 2)
        {
          unint64_t v120 = *(unsigned int *)&v237[v103];
          if (v120)
          {
            if (v120 / v116 * v116 == v120 && ((v120 / v116) & 1) != 0)
            {
              if (v100 || v118 != 1)
              {
                if ((a3 | 2) != 3
                  || (uint64_t v122 = v101[v94], v123 = v234[v92 + 2], v122 != v123)
                  && ((a3 | 2) != 3 || v116 + v123 != v122))
                {
                  LODWORD(v118) = v118 - 1;
                  *int16x8_t v119 = v118;
                }
              }
              else
              {
                LODWORD(v118) = 1;
              }
            }
          }
        }
        if ((unint64_t)v118 >> v99 || v101[v94] == v115) {
          *int16x8_t v119 = ~(-1 << v99);
        }
        if (*((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v94 + 1) >= a5
          || *((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v94) >= a4)
        {
          *int16x8_t v119 = 0;
        }
        ++v95;
      }
      v103 += 4;
      v94 += 2;
    }
    while (v94 != 16);
    char v91 = 1;
    uint64_t v92 = 1;
  }
  while ((v112 & 1) == 0);
  int16x8_t v125 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v126 = 8 * (a1 & 7);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if ((v214 | v215) == 1)
  {
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    unsigned int v129 = v257;
    unsigned int v130 = v258;
    uint64_t v131 = v257 - 4;
    uint64_t v132 = v258 - 4;
    uint64_t v133 = 8 * (a1 & 7);
    while (1)
    {
      int16x8_t v134 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v127;
      BOOL v135 = v134[1] >= a5 || *v134 >= a4;
      char v136 = v135;
      if (v135)
      {
        unint64_t v137 = 0;
        if (v131 > 0x100) {
          goto LABEL_315;
        }
      }
      else
      {
        unint64_t v137 = (unint64_t)*(&v238 + 2 * v127) >> 4;
        if (v131 > 0x100) {
          goto LABEL_315;
        }
      }
      if (v129 != 4 && (unint64_t)(v133 - v126 + (v128 << 6) + v131) <= 0xC0)
      {
        uint64_t v138 = 0;
        unint64_t v139 = v129 - 4;
        do
        {
          unint64_t v140 = 64 - v133;
          if (64 - v133 >= v139) {
            unint64_t v140 = v139;
          }
          v125[v128] |= ((v137 >> v138) & ~(-1 << v140)) << v133;
          v138 += v140;
          unint64_t v141 = v140 + v133;
          v128 += v141 >> 6;
          uint64_t v133 = v141 & 0x3F;
          v139 -= v140;
        }
        while (v139);
      }
LABEL_315:
      if (v136)
      {
        unint64_t v142 = 0;
        if (v132 <= 0x100) {
          goto LABEL_319;
        }
      }
      else
      {
        unint64_t v142 = (unint64_t)*(&v238 + 2 * v127 + 1) >> 4;
        if (v132 <= 0x100)
        {
LABEL_319:
          if (v130 != 4 && (unint64_t)(v133 - v126 + (v128 << 6) + v132) <= 0xC0)
          {
            uint64_t v143 = 0;
            unint64_t v144 = v130 - 4;
            do
            {
              unint64_t v145 = 64 - v133;
              if (64 - v133 >= v144) {
                unint64_t v145 = v144;
              }
              v125[v128] |= ((v142 >> v143) & ~(-1 << v145)) << v133;
              v143 += v145;
              unint64_t v146 = v145 + v133;
              v128 += v146 >> 6;
              uint64_t v133 = v146 & 0x3F;
              v144 -= v145;
            }
            while (v144);
          }
        }
      }
      if (++v127 == 8) {
        return v214 | v215;
      }
    }
  }
  unsigned int v148 = v254;
  unsigned int v147 = v255;
  unint64_t v149 = ((unint64_t)(v254 & 0xF) << v126) | *v125;
  *int16x8_t v125 = v149;
  uint64_t v150 = v126 | 4;
  if ((v126 | 4uLL) - v126 - 189 < 0xFFFFFFFFFFFFFF3FLL)
  {
    unint64_t v151 = 0;
    unsigned int v152 = v257;
    if (!v148) {
      goto LABEL_430;
    }
    goto LABEL_434;
  }
  *int16x8_t v125 = ((unint64_t)(v147 & 0xF) << v150) | v149;
  unint64_t v151 = (unint64_t)(v126 + 8) >> 6;
  uint64_t v150 = (v126 + 8) & 0x38;
  unsigned int v152 = v257;
  if (v148) {
    goto LABEL_434;
  }
LABEL_430:
  if (v152 == 2 || v152 >= 0x10)
  {
LABEL_434:
    unsigned int v169 = v230;
    if (v230 <= 0x100 && v230 && v150 - v126 + (v151 << 6) + v230 <= 0xC0)
    {
      uint64_t v170 = 0;
      unint64_t v171 = v227 >> (v152 - v230);
      unint64_t v172 = v230;
      do
      {
        unint64_t v173 = 64 - v150;
        if (64 - v150 >= v172) {
          unint64_t v173 = v172;
        }
        v125[v151] |= ((v171 >> v170) & ~(-1 << v173)) << v150;
        v170 += v173;
        unint64_t v174 = v173 + v150;
        v151 += v174 >> 6;
        uint64_t v150 = v174 & 0x3F;
        v172 -= v173;
      }
      while (v172);
    }
    int v167 = v169 + 8;
    unsigned int v168 = v258;
    if (v147) {
      goto LABEL_442;
    }
LABEL_495:
    if (v168 == 2 || v168 >= 0x10) {
      goto LABEL_442;
    }
  }
  else
  {
    int v167 = 8;
    unsigned int v168 = v258;
    if (!v147) {
      goto LABEL_495;
    }
LABEL_442:
    unsigned int v175 = v231;
    if (v231 <= 0x100 && v231 && v150 - v126 + (v151 << 6) + v231 <= 0xC0)
    {
      uint64_t v176 = 0;
      unint64_t v177 = (HIDWORD(v227) >> (v168 - v231));
      unint64_t v178 = v231;
      do
      {
        unint64_t v179 = 64 - v150;
        if (64 - v150 >= v178) {
          unint64_t v179 = v178;
        }
        v125[v151] |= ((v177 >> v176) & ~(-1 << v179)) << v150;
        v176 += v179;
        unint64_t v180 = v179 + v150;
        v151 += v180 >> 6;
        uint64_t v150 = v180 & 0x3F;
        v178 -= v179;
      }
      while (v178);
    }
    v167 += v175;
  }
  unint64_t v181 = v228;
  if (v228)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0xC0)
    {
      uint64_t v182 = 0;
      unint64_t v183 = v256[0];
      unint64_t v184 = 3;
      do
      {
        unint64_t v185 = 64 - v150;
        if (64 - v150 >= v184) {
          unint64_t v185 = v184;
        }
        v125[v151] |= ((v183 >> v182) & ~(-1 << v185)) << v150;
        v182 += v185;
        unint64_t v186 = v185 + v150;
        v151 += v186 >> 6;
        uint64_t v150 = v186 & 0x3F;
        v184 -= v185;
      }
      while (v184);
    }
    v167 += 3;
  }
  unint64_t v187 = v229;
  if (v229)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0xC0)
    {
      uint64_t v188 = 0;
      unint64_t v189 = v256[1];
      unint64_t v190 = 3;
      do
      {
        unint64_t v191 = 64 - v150;
        if (64 - v150 >= v190) {
          unint64_t v191 = v190;
        }
        v125[v151] |= ((v189 >> v188) & ~(-1 << v191)) << v150;
        v188 += v191;
        unint64_t v192 = v191 + v150;
        v151 += v192 >> 6;
        uint64_t v150 = v192 & 0x3F;
        v190 -= v191;
      }
      while (v190);
    }
    v167 += 3;
  }
  unsigned int v193 = 192 - v167;
  unsigned int v194 = (192 - v167) / 7u;
  unint64_t v195 = v193 % 7;
  if ((v195 - 257) >= 0xFFFFFF00 && v150 - v126 + (v151 << 6) + v195 <= 0xC0)
  {
    do
    {
      unint64_t v196 = 64 - v150;
      if (64 - v150 >= v195) {
        unint64_t v196 = v195;
      }
      unint64_t v197 = v196 + v150;
      v151 += v197 >> 6;
      uint64_t v150 = v197 & 0x3F;
      v195 -= v196;
    }
    while (v195);
  }
  uint64_t v198 = 0;
  int v199 = v187 + v181;
  while (2)
  {
    if (v181 && v181 <= 0x100 && v150 - v126 + (v151 << 6) + v181 <= 0xC0)
    {
      uint64_t v200 = 0;
      unint64_t v201 = *((unsigned int *)v225 + v198);
      unint64_t v202 = v181;
      do
      {
        unint64_t v203 = 64 - v150;
        if (64 - v150 >= v202) {
          unint64_t v203 = v202;
        }
        v125[v151] |= ((v201 >> v200) & ~(-1 << v203)) << v150;
        v200 += v203;
        unint64_t v204 = v203 + v150;
        v151 += v204 >> 6;
        uint64_t v150 = v204 & 0x3F;
        v202 -= v203;
      }
      while (v202);
    }
    if (v187)
    {
      if (v187 <= 0x100 && v150 - v126 + (v151 << 6) + v187 <= 0xC0)
      {
        uint64_t v205 = 0;
        unint64_t v206 = *((unsigned int *)&v225[1] + v198 + 3);
        unint64_t v207 = v187;
        do
        {
          unint64_t v208 = 64 - v150;
          if (64 - v150 >= v207) {
            unint64_t v208 = v207;
          }
          v125[v151] |= ((v206 >> v205) & ~(-1 << v208)) << v150;
          v205 += v208;
          unint64_t v209 = v208 + v150;
          v151 += v209 >> 6;
          uint64_t v150 = v209 & 0x3F;
          v207 -= v208;
        }
        while (v207);
      }
      unint64_t v210 = v194 - v199;
      if (v194 != v199)
      {
LABEL_488:
        if (v210 <= 0x100 && v150 - v126 + (v151 << 6) + v210 <= 0xC0)
        {
          do
          {
            unint64_t v211 = 64 - v150;
            if (64 - v150 >= v210) {
              unint64_t v211 = v210;
            }
            unint64_t v212 = v211 + v150;
            v151 += v212 >> 6;
            uint64_t v150 = v212 & 0x3F;
            v210 -= v211;
          }
          while (v210);
        }
      }
    }
    else
    {
      unint64_t v210 = v194 - v181;
      if (v194 != v181) {
        goto LABEL_488;
      }
    }
    if (++v198 != 7) {
      continue;
    }
    return v214 | v215;
  }
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = 8 * (a1 & 7);
  unsigned int v7 = a3 & 0xFFFFFFFD;
  int v8 = ((a3 & 0xFFFFFFFD) == 1) << 15;
  uint64_t result = -1;
  uint64_t v10 = v6;
  do
  {
    if ((unint64_t)(v10 - v6 + (v4 << 6) - 181) >= 0xFFFFFFFFFFFFFF3FLL)
    {
      __int16 v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 12;
      do
      {
        unint64_t v19 = 64 - v10;
        if (64 - v10 >= v18) {
          unint64_t v19 = v18;
        }
        v16 |= (unint64_t)((*(void *)(v5 + 8 * v4) >> v10) & ~(-1 << v19)) << v17;
        v17 += v19;
        unint64_t v20 = v19 + v10;
        v4 += v20 >> 6;
        uint64_t v10 = v20 & 0x3F;
        v18 -= v19;
      }
      while (v18);
    }
    else
    {
      __int16 v16 = 0;
    }
    int v21 = 16 * (v16 & 0xFFF);
    if (a3 != 4)
    {
      BOOL v26 = v21 == 0x8000 && v7 == 1;
      if (!v26 && v21)
      {
        if (v21 == 65520) {
          int v21 = 0xFFFF;
        }
        else {
          v21 |= 8 - (v16 & 1);
        }
      }
    }
    *(_DWORD *)(a2 + 8 * v3) = v21 ^ v8;
    if ((unint64_t)(v10 - v6 + (v4 << 6) - 181) < 0xFFFFFFFFFFFFFF3FLL)
    {
      __int16 v11 = 0;
    }
    else
    {
      __int16 v11 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = 12;
      do
      {
        unint64_t v24 = 64 - v10;
        if (64 - v10 >= v23) {
          unint64_t v24 = v23;
        }
        v11 |= (unint64_t)((*(void *)(v5 + 8 * v4) >> v10) & ~(-1 << v24)) << v22;
        v22 += v24;
        unint64_t v25 = v24 + v10;
        v4 += v25 >> 6;
        uint64_t v10 = v25 & 0x3F;
        v23 -= v24;
      }
      while (v23);
    }
    int v12 = 16 * (v11 & 0xFFF);
    int v13 = (8 - (v11 & 1)) | v12;
    if (v12 == 65520) {
      int v13 = 0xFFFF;
    }
    if (v12 == 0x8000 && v7 == 1 || v12 == 0) {
      int v13 = v12;
    }
    if (a3 == 4) {
      int v13 = v12;
    }
    *(_DWORD *)(a2 + 8 * v3++ + 4) = v13 ^ v8;
  }
  while (v3 != 8);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = 8 * (a1 & 7);
  unint64_t v5 = *(void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = v5 >> v4;
  uint64_t v7 = (v5 >> v4) & 0xF;
  uint64_t v8 = (v5 >> (v4 | 4u)) & 0xF;
  if ((v4 | 4uLL) - v4 - 189 >= 0xFFFFFFFFFFFFFF3FLL) {
    uint64_t v9 = (v4 + 8) & 0x38;
  }
  else {
    uint64_t v9 = (8 * (a1 & 7)) | 4;
  }
  if ((v4 | 4uLL) - v4 - 189 >= 0xFFFFFFFFFFFFFF3FLL) {
    unint64_t v10 = (unint64_t)(v4 + 8) >> 6;
  }
  else {
    unint64_t v10 = 0;
  }
  if ((v4 | 4uLL) - v4 - 189 >= 0xFFFFFFFFFFFFFF3FLL) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v182 = 0x1000000010;
  v184[0] = v7;
  v184[1] = v11;
  uint64_t v183 = 0x300000003;
  int v12 = v6 & 0xF;
  int v13 = dword_242EA9908[10 * (v6 & 0xF) + 6];
  int v14 = v13;
  BOOL v15 = v11 >= v7;
  BOOL v16 = v11 < v7;
  int v17 = dword_242EA9908[10 * v11 + 6];
  int v179 = v13;
  int v180 = v17;
  v181[0] = v13;
  v181[1] = v17;
  if (v184[v15] != v184[v16])
  {
    int v18 = *(_DWORD *)((unint64_t)v181 | (4 * v16));
    if (v18 >= 1)
    {
      *(_DWORD *)((unint64_t)&v179 | (4 * v16)) = 0;
      *(_DWORD *)((unint64_t)&v179 | (4 * v15)) += v18;
      int v14 = v179;
    }
  }
  unint64_t v19 = &kDQuadParamTable[10 * v12];
  LODWORD(v20) = v19[484] + 4;
  int v21 = v19[485];
  unsigned int v22 = v21 + 4;
  int v23 = v14 - v13;
  if (v23 < 0)
  {
    if (kDQuadParamTable[10 * v12 + 487] >= -v23) {
      goto LABEL_19;
    }
    unsigned int v22 = v21 + 3;
    if (kDQuadParamTable[10 * v12 + 488]) {
      goto LABEL_19;
    }
    int v23 = -1;
  }
  else
  {
    if (!v23) {
      goto LABEL_19;
    }
    v22 += v23;
  }
  LODWORD(v20) = v23 + v20;
LABEL_19:
  if (v20 >= 0x10) {
    uint64_t v20 = 16;
  }
  else {
    uint64_t v20 = v20;
  }
  v178[0] = v20;
  LODWORD(v24) = 16 * (v21 != 0);
  if (v24 >= v22) {
    unint64_t v24 = v22;
  }
  else {
    unint64_t v24 = v24;
  }
  v177[0] = v24;
  unint64_t v25 = &kDQuadParamTable[10 * v11];
  unsigned int v26 = v25[484] + 4;
  int v27 = v25[485];
  unsigned int v28 = v27 + 4;
  int v29 = v180 - v17;
  if (v29 < 0)
  {
    if (kDQuadParamTable[10 * v11 + 487] < -v29)
    {
      unsigned int v28 = v27 + 3;
      if (!kDQuadParamTable[10 * v11 + 488])
      {
        int v29 = -1;
        goto LABEL_28;
      }
    }
  }
  else if (v29)
  {
    v28 += v29;
LABEL_28:
    v26 += v29;
  }
  int v30 = 0;
  if (v26 >= 0x10) {
    uint64_t v31 = 16;
  }
  else {
    uint64_t v31 = v26;
  }
  v178[1] = v31;
  LODWORD(v32) = 16 * (v27 != 0);
  if (v32 >= v28) {
    unint64_t v32 = v28;
  }
  else {
    unint64_t v32 = v32;
  }
  v177[1] = v32;
  unint64_t v33 = v9 - v4 + (v10 << 6);
  if (v20 && v33 + v20 <= 0xC0)
  {
    int v30 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = v20;
    do
    {
      unint64_t v36 = 64 - v9;
      if (64 - v9 >= v35) {
        unint64_t v36 = v35;
      }
      v30 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v36)) << v34;
      v34 += v36;
      unint64_t v37 = v36 + v9;
      v10 += v37 >> 6;
      uint64_t v9 = v37 & 0x3F;
      v35 -= v36;
    }
    while (v35);
    unint64_t v33 = v9 - v4 + (v10 << 6);
  }
  int v38 = 0;
  v176[0] = v30 << (16 - v20);
  int v39 = v20 + 8;
  if (v31 && v33 + v31 <= 0xC0)
  {
    int v38 = 0;
    uint64_t v40 = 0;
    unint64_t v41 = v31;
    do
    {
      unint64_t v42 = 64 - v9;
      if (64 - v9 >= v41) {
        unint64_t v42 = v41;
      }
      v38 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v42)) << v40;
      v40 += v42;
      unint64_t v43 = v42 + v9;
      v10 += v43 >> 6;
      uint64_t v9 = v43 & 0x3F;
      v41 -= v42;
    }
    while (v41);
  }
  v176[1] = v38 << (16 - v31);
  int v44 = v31 + v39;
  uint64_t v175 = 0;
  if (v24)
  {
    if (v9 - v4 + (v10 << 6) + 3 <= 0xC0)
    {
      int v45 = 0;
      uint64_t v46 = 0;
      unint64_t v47 = 3;
      do
      {
        unint64_t v48 = 64 - v9;
        if (64 - v9 >= v47) {
          unint64_t v48 = v47;
        }
        v45 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v48)) << v46;
        v46 += v48;
        unint64_t v49 = v48 + v9;
        v10 += v49 >> 6;
        uint64_t v9 = v49 & 0x3F;
        v47 -= v48;
      }
      while (v47);
    }
    else
    {
      int v45 = 0;
    }
    LODWORD(v175) = v45;
    v44 += 3;
  }
  if (v32)
  {
    if (v9 - v4 + (v10 << 6) + 3 <= 0xC0)
    {
      int v50 = 0;
      uint64_t v51 = 0;
      unint64_t v52 = 3;
      do
      {
        unint64_t v53 = 64 - v9;
        if (64 - v9 >= v52) {
          unint64_t v53 = v52;
        }
        v50 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v53)) << v51;
        v51 += v53;
        unint64_t v54 = v53 + v9;
        v10 += v54 >> 6;
        uint64_t v9 = v54 & 0x3F;
        v52 -= v53;
      }
      while (v52);
    }
    else
    {
      int v50 = 0;
    }
    HIDWORD(v175) = v50;
    v44 += 3;
  }
  uint64_t v55 = 0;
  unsigned int v56 = a3 & 0xFFFFFFFD;
  int v57 = 192 - v44;
  unsigned int v58 = (((37 * (-64 - v44)) >> 8)
       + (((-64 - v44 - ((unsigned __int16)(37 * (-64 - v44)) >> 8)) & 0xFE) >> 1)) >> 2;
  unint64_t v59 = (v9 | (v10 << 6)) + -7 * v58 + v57;
  uint64_t v174 = 0;
  memset(v173, 0, sizeof(v173));
  do
  {
    unint64_t v61 = v59 >> 6;
    unint64_t v62 = v59 & 0x3F;
    if (v24)
    {
      if (v62 - v4 + (v59 & 0xFFFFFFFFFFFFFFC0) + v24 <= 0xC0)
      {
        int v63 = 0;
        uint64_t v64 = 0;
        unint64_t v65 = v24;
        do
        {
          unint64_t v66 = 64 - v62;
          if (64 - v62 >= v65) {
            unint64_t v66 = v65;
          }
          v63 |= (unint64_t)((*(void *)(v3 + 8 * v61) >> v62) & ~(-1 << v66)) << v64;
          v64 += v66;
          unint64_t v67 = v66 + v62;
          v61 += v67 >> 6;
          unint64_t v62 = v67 & 0x3F;
          v65 -= v66;
        }
        while (v65);
      }
      else
      {
        int v63 = 0;
      }
      *((_DWORD *)v173 + v55) = v63;
    }
    if (v32)
    {
      if (v62 - v4 + (v61 << 6) + v32 <= 0xC0)
      {
        int v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = v32;
        do
        {
          unint64_t v71 = 64 - v62;
          if (64 - v62 >= v70) {
            unint64_t v71 = v70;
          }
          v68 |= (unint64_t)((*(void *)(v3 + 8 * v61) >> v62) & ~(-1 << v71)) << v69;
          v69 += v71;
          unint64_t v72 = v71 + v62;
          v61 += v72 >> 6;
          unint64_t v62 = v72 & 0x3F;
          v70 -= v71;
        }
        while (v70);
      }
      else
      {
        int v68 = 0;
      }
      *((_DWORD *)&v173[1] + v55 + 3) = v68;
      int v60 = v32 + v24;
    }
    else
    {
      int v60 = v24;
    }
    unint64_t v59 = (v62 | (v61 << 6)) + v58 - v60;
    ++v55;
  }
  while (v55 != 7);
  char v73 = 0;
  uint64_t v74 = 0;
  uint64_t result = 1;
  do
  {
    char v80 = v73;
    unint64_t v81 = *(void *)&kDQuadParamTable[160 * v184[v74 - 2] + 2 + 10 * v184[v74]];
    int v82 = v177[v74];
    if (v81 >> v82 <= 1) {
      unint64_t v83 = 1;
    }
    else {
      unint64_t v83 = v81 >> v82;
    }
    int v84 = *((_DWORD *)&v182 + v74);
    unint64_t v85 = v83 >> 1;
    if (v83 >> 1 >= (unint64_t)(1 << (v84 - v178[v74])) >> 1) {
      unint64_t v86 = (unint64_t)(1 << (v84 - v178[v74])) >> 1;
    }
    else {
      unint64_t v86 = v83 >> 1;
    }
    unint64_t v87 = (1 << (v84 - 1));
    unint64_t v88 = v176[v74];
    unint64_t v89 = v87 - v88;
    unint64_t v90 = 1 << v84;
    int v91 = (1 << v84) - 1;
    if (v88) {
      unint64_t v92 = v86;
    }
    else {
      unint64_t v92 = 0;
    }
    BOOL v93 = v88 == v87;
    BOOL v94 = v84 == 16;
    if (v84 == 16) {
      unint64_t v95 = 31744;
    }
    else {
      unint64_t v95 = 2139095040;
    }
    if (v84 == 16) {
      unint64_t v96 = 64512;
    }
    else {
      unint64_t v96 = 4286578688;
    }
    unint64_t v97 = 2143289344;
    if (v94) {
      unint64_t v97 = 32256;
    }
    unint64_t v98 = 4290772992;
    if (v94) {
      unint64_t v98 = 65024;
    }
    unint64_t v99 = (v96 - 1);
    if (v82)
    {
      unint64_t v100 = v81 + v88;
      uint64_t v101 = ~(-1 << v82);
      int v102 = v176[v74 - 2];
      unint64_t v103 = v89 / v83;
      if (!v102)
      {
        uint64_t v111 = 0;
        unint64_t v106 = v92;
        BOOL v105 = v88 == v87;
        goto LABEL_150;
      }
      uint64_t v104 = *((unsigned int *)v173 + 7 * v74);
      BOOL v105 = v103 == v104;
      if (v88 | v104)
      {
        if (v100 >= v90 && v104 == v101)
        {
          uint64_t v111 = 1;
          unint64_t v106 = v90 - 1;
          goto LABEL_150;
        }
        unint64_t v106 = v85 + v83 * v104;
      }
      else
      {
        unint64_t v106 = 0;
      }
      uint64_t v111 = 1;
LABEL_150:
      unint64_t v112 = v106 + v88;
      unint64_t v113 = v112;
      if (a3 == 4)
      {
        BOOL v114 = v112 < v95 || v112 >= v97;
        unint64_t v113 = (v95 - 1);
        if (v114)
        {
          BOOL v115 = v112 < v97 || v112 >= v87;
          unint64_t v113 = v87;
          if (v115)
          {
            if (v112 < v98 && v112 >= v96) {
              unint64_t v113 = (v96 - 1);
            }
            else {
              unint64_t v113 = v112;
            }
          }
        }
      }
      if (v113 >= v90) {
        int v117 = v91;
      }
      else {
        int v117 = v113;
      }
      if (v105) {
        int v118 = 0;
      }
      else {
        int v118 = v117 ^ v87;
      }
      if (v56 != 1) {
        int v118 = v117;
      }
      *(_DWORD *)(a2 + 4 * v74) = v118;
      if (v102 == 1)
      {
        unint64_t v119 = v92;
        BOOL v120 = v88 == v87;
      }
      else
      {
        uint64_t v121 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v120 = v103 == v121;
        if (v88 | v121)
        {
          if (v100 < v90 || (unint64_t v119 = v90 - 1, v121 != v101)) {
            unint64_t v119 = v85 + v83 * v121;
          }
        }
        else
        {
          unint64_t v119 = 0;
        }
        ++v111;
      }
      unint64_t v122 = v119 + v88;
      unint64_t v123 = v122;
      if (a3 == 4)
      {
        BOOL v124 = v122 < v95 || v122 >= v97;
        unint64_t v123 = (v95 - 1);
        if (v124)
        {
          BOOL v125 = v122 < v97 || v122 >= v87;
          unint64_t v123 = v87;
          if (v125)
          {
            if (v122 < v98 && v122 >= v96) {
              unint64_t v123 = (v96 - 1);
            }
            else {
              unint64_t v123 = v122;
            }
          }
        }
      }
      if (v123 >= v90) {
        int v127 = v91;
      }
      else {
        int v127 = v123;
      }
      if (v120) {
        int v128 = 0;
      }
      else {
        int v128 = v127 ^ v87;
      }
      if (v56 != 1) {
        int v128 = v127;
      }
      *(_DWORD *)(a2 + 4 * v74 + 8) = v128;
      if (v102 == 2)
      {
        unint64_t v129 = v92;
        BOOL v130 = v88 == v87;
      }
      else
      {
        uint64_t v131 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v130 = v103 == v131;
        if (v88 | v131)
        {
          if (v100 < v90 || (unint64_t v129 = v90 - 1, v131 != v101)) {
            unint64_t v129 = v85 + v83 * v131;
          }
        }
        else
        {
          unint64_t v129 = 0;
        }
        ++v111;
      }
      unint64_t v132 = v129 + v88;
      unint64_t v133 = v132;
      if (a3 == 4)
      {
        if (v132 < v95 || (unint64_t v133 = (v95 - 1), v132 >= v97))
        {
          if (v132 < v97 || (unint64_t v133 = v87, v132 >= v87))
          {
            if (v132 < v98 && v132 >= v96) {
              unint64_t v133 = (v96 - 1);
            }
            else {
              unint64_t v133 = v132;
            }
          }
        }
      }
      if (v133 >= v90) {
        int v135 = v91;
      }
      else {
        int v135 = v133;
      }
      if (v130) {
        int v136 = 0;
      }
      else {
        int v136 = v135 ^ v87;
      }
      if (v56 != 1) {
        int v136 = v135;
      }
      *(_DWORD *)(a2 + 4 * v74 + 16) = v136;
      if (v102 == 3)
      {
        unint64_t v137 = v92;
        BOOL v138 = v88 == v87;
      }
      else
      {
        uint64_t v139 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v138 = v103 == v139;
        if (v88 | v139)
        {
          if (v100 < v90 || (unint64_t v137 = v90 - 1, v139 != v101)) {
            unint64_t v137 = v85 + v83 * v139;
          }
        }
        else
        {
          unint64_t v137 = 0;
        }
        ++v111;
      }
      unint64_t v140 = v137 + v88;
      unint64_t v141 = v140;
      if (a3 == 4)
      {
        if (v140 < v95 || (unint64_t v141 = (v95 - 1), v140 >= v97))
        {
          if (v140 < v97 || (unint64_t v141 = v87, v140 >= v87))
          {
            if (v140 < v98 && v140 >= v96) {
              unint64_t v141 = (v96 - 1);
            }
            else {
              unint64_t v141 = v140;
            }
          }
        }
      }
      if (v141 >= v90) {
        int v143 = v91;
      }
      else {
        int v143 = v141;
      }
      if (v138) {
        int v144 = 0;
      }
      else {
        int v144 = v143 ^ v87;
      }
      if (v56 != 1) {
        int v144 = v143;
      }
      *(_DWORD *)(a2 + 4 * v74 + 24) = v144;
      if (v102 == 4)
      {
        unint64_t v145 = v92;
        BOOL v146 = v88 == v87;
      }
      else
      {
        uint64_t v147 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v146 = v103 == v147;
        if (v88 | v147)
        {
          if (v100 < v90 || (unint64_t v145 = v90 - 1, v147 != v101)) {
            unint64_t v145 = v85 + v83 * v147;
          }
        }
        else
        {
          unint64_t v145 = 0;
        }
        ++v111;
      }
      unint64_t v148 = v145 + v88;
      unint64_t v149 = v148;
      if (a3 == 4)
      {
        if (v148 < v95 || (unint64_t v149 = (v95 - 1), v148 >= v97))
        {
          if (v148 < v97 || (unint64_t v149 = v87, v148 >= v87))
          {
            if (v148 < v98 && v148 >= v96) {
              unint64_t v149 = (v96 - 1);
            }
            else {
              unint64_t v149 = v148;
            }
          }
        }
      }
      if (v149 >= v90) {
        int v151 = v91;
      }
      else {
        int v151 = v149;
      }
      if (v146) {
        int v152 = 0;
      }
      else {
        int v152 = v151 ^ v87;
      }
      if (v56 != 1) {
        int v152 = v151;
      }
      *(_DWORD *)(a2 + 4 * v74 + 32) = v152;
      if (v102 == 5)
      {
        unint64_t v153 = v92;
        BOOL v154 = v88 == v87;
      }
      else
      {
        uint64_t v155 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v154 = v103 == v155;
        if (v88 | v155)
        {
          if (v100 < v90 || (unint64_t v153 = v90 - 1, v155 != v101)) {
            unint64_t v153 = v85 + v83 * v155;
          }
        }
        else
        {
          unint64_t v153 = 0;
        }
        ++v111;
      }
      unint64_t v156 = v153 + v88;
      unint64_t v157 = v156;
      if (a3 == 4)
      {
        if (v156 < v95 || (unint64_t v157 = (v95 - 1), v156 >= v97))
        {
          if (v156 < v97 || (unint64_t v157 = v87, v156 >= v87))
          {
            if (v156 < v98 && v156 >= v96) {
              unint64_t v157 = (v96 - 1);
            }
            else {
              unint64_t v157 = v156;
            }
          }
        }
      }
      if (v157 >= v90) {
        int v159 = v91;
      }
      else {
        int v159 = v157;
      }
      if (v154) {
        int v160 = 0;
      }
      else {
        int v160 = v159 ^ v87;
      }
      if (v56 != 1) {
        int v160 = v159;
      }
      *(_DWORD *)(a2 + 4 * v74 + 40) = v160;
      if (v102 == 6)
      {
        unint64_t v161 = v92;
        BOOL v162 = v88 == v87;
      }
      else
      {
        uint64_t v163 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v162 = v103 == v163;
        if (v88 | v163)
        {
          if (v100 < v90 || (unint64_t v161 = v90 - 1, v163 != v101)) {
            unint64_t v161 = v85 + v83 * v163;
          }
        }
        else
        {
          unint64_t v161 = 0;
        }
        ++v111;
      }
      unint64_t v164 = v161 + v88;
      unint64_t v165 = v164;
      if (a3 == 4)
      {
        if (v164 < v95 || (unint64_t v165 = (v95 - 1), v164 >= v97))
        {
          if (v164 < v97 || (unint64_t v165 = v87, v164 >= v87))
          {
            if (v164 < v98 && v164 >= v96) {
              unint64_t v165 = (v96 - 1);
            }
            else {
              unint64_t v165 = v164;
            }
          }
        }
      }
      if (v165 >= v90) {
        int v167 = v91;
      }
      else {
        int v167 = v165;
      }
      if (v162) {
        int v168 = 0;
      }
      else {
        int v168 = v167 ^ v87;
      }
      if (v56 != 1) {
        int v168 = v167;
      }
      *(_DWORD *)(a2 + 4 * v74 + 48) = v168;
      if (v102 != 7)
      {
        uint64_t v169 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v93 = v103 == v169;
        if (v88 | v169)
        {
          if (v100 >= v90 && v169 == v101) {
            unint64_t v92 = v90 - 1;
          }
          else {
            unint64_t v92 = v85 + v83 * v169;
          }
        }
        else
        {
          unint64_t v92 = 0;
        }
      }
      unint64_t v170 = v92 + v88;
      unint64_t v77 = v170;
      if (a3 == 4)
      {
        if (v170 < v95 || (unint64_t v77 = (v95 - 1), v170 >= v97))
        {
          if (v170 < v97 || (unint64_t v77 = v87, v170 >= v87))
          {
            if (v170 < v98 && v170 >= v96) {
              unint64_t v77 = (v96 - 1);
            }
            else {
              unint64_t v77 = v170;
            }
          }
        }
      }
      if (v77 >= v90) {
        int v78 = v91;
      }
      else {
        int v78 = v77;
      }
      int v79 = v78 ^ v87;
      if (v93) {
        int v79 = 0;
      }
      if (v56 == 1) {
        int v78 = v79;
      }
      goto LABEL_99;
    }
    BOOL v108 = v97 <= v88 && v88 < v87;
    BOOL v110 = v88 >= v96 && v98 > v88;
    if (a3 == 4)
    {
      if (v88 < v95 || v97 <= v88)
      {
        if (v108)
        {
          if (v90 <= v87) {
            int v78 = v91;
          }
          else {
            int v78 = v87;
          }
        }
        else
        {
          if (v110) {
            unint64_t v88 = v99;
          }
          if (v88 >= v90) {
            int v78 = v91;
          }
          else {
            int v78 = v88;
          }
        }
      }
      else if (v90 <= (v95 - 1))
      {
        int v78 = v91;
      }
      else
      {
        int v78 = v95 - 1;
      }
    }
    else if (v90 <= v88)
    {
      int v78 = v91;
    }
    else
    {
      int v78 = v176[v74];
    }
    int v171 = v78 ^ v87;
    if (v83 > v89) {
      int v171 = 0;
    }
    if (v56 == 1) {
      int v78 = v171;
    }
    unint64_t v172 = (_DWORD *)(a2 + 4 * v74);
    *unint64_t v172 = v78;
    v172[2] = v78;
    v172[4] = v78;
    v172[6] = v78;
    v172[8] = v78;
    v172[10] = v78;
    v172[12] = v78;
LABEL_99:
    *(_DWORD *)(a2 + 4 * v74 + 56) = v78;
    char v73 = 1;
    uint64_t v74 = 1;
  }
  while ((v80 & 1) == 0);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(float32x4_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int32x4_t a6, int32x4_t a7)
{
  uint64_t v357 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    int v13 = (_OWORD *)((char *)a1->f32 + a2);
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    int v14 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    _OWORD *v14 = 0u;
    v14[1] = 0u;
    BOOL v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
LABEL_107:
    *BOOL v15 = v12;
    v15[1] = v12;
    return result;
  }
  char v8 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v342, a5);
    }
    int v324 = HIDWORD(v342);
    int v325 = (unsigned __int16)v342;
    int v322 = v344;
    int v323 = v343;
    int v338 = v346;
    int v339 = v345;
    int v334 = v348;
    int v335 = v347;
    int v330 = v350;
    int v331 = v349;
    int v328 = v352;
    int v329 = v351;
    int v336 = v354;
    int v337 = v353;
    uint64_t v20 = a3 + 24;
    int v332 = v356;
    int v333 = v355;
    if ((v8 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v20, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v20, (uint64_t)&v342, a5);
    }
    int v326 = HIDWORD(v342);
    int v327 = (unsigned __int16)v342;
    int v320 = v344;
    int v321 = v343;
    int v318 = v346;
    int v319 = v345;
    int v316 = v348;
    int v317 = v347;
    int v314 = v350;
    int v315 = v349;
    int v312 = v352;
    int v313 = v351;
    int v310 = v354;
    int v311 = v353;
    uint64_t v21 = a3 + 48;
    int v308 = v356;
    int v309 = v355;
    int32x4_t v341 = (int *)a1;
    if ((v8 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v21, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v21, (uint64_t)&v342, a5);
    }
    int v306 = HIDWORD(v342);
    int v307 = (unsigned __int16)v342;
    int v304 = v344;
    int v305 = v343;
    int v302 = v346;
    int v303 = v345;
    int v300 = v348;
    int v301 = v347;
    int v22 = v349;
    int v23 = v350;
    int v24 = v351;
    int v25 = v352;
    int v26 = v353;
    int v27 = v354;
    int v28 = v355;
    uint64_t v29 = a3 + 72;
    int v30 = v356;
    if ((v8 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockFallback(v29, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressLossyCompressedSubblockDQuad(v29, (uint64_t)&v342, a5);
    }
    int v31 = v28 | (v30 << 16);
    int v32 = v26 | (v27 << 16);
    v341[4] = v307 | (v306 << 16);
    v341[5] = v305 | (v304 << 16);
    v341[6] = v22 | (v23 << 16);
    v341[7] = v24 | (v25 << 16);
    int v33 = (unsigned __int16)v342;
    int v34 = HIDWORD(v342);
    *int32x4_t v341 = v325 | (v324 << 16);
    v341[1] = v323 | (v322 << 16);
    int v35 = v343;
    int v36 = v344;
    int v37 = v345;
    int v38 = v346;
    v341[2] = v331 | (v330 << 16);
    v341[3] = v329 | (v328 << 16);
    int v39 = v347;
    int v40 = v348;
    int v41 = v349;
    int v42 = v350;
    unint64_t v43 = (int *)((char *)v341 + a2);
    *unint64_t v43 = v339 | (v338 << 16);
    v43[1] = v335 | (v334 << 16);
    int v44 = v351;
    int v45 = v352;
    int v46 = v353;
    int v47 = v354;
    v43[2] = v337 | (v336 << 16);
    v43[3] = v333 | (v332 << 16);
    int v48 = v355;
    int v49 = v356;
    v43[4] = v303 | (v302 << 16);
    v43[5] = v301 | (v300 << 16);
    v43[6] = v32;
    v43[7] = v31;
    int v50 = (int *)((char *)v341 + a2 + a2);
    *int v50 = v327 | (v326 << 16);
    v50[1] = v321 | (v320 << 16);
    v50[2] = v315 | (v314 << 16);
    v50[3] = v313 | (v312 << 16);
    v50[4] = v33 | (v34 << 16);
    v50[5] = v35 | (v36 << 16);
    v50[6] = v41 | (v42 << 16);
    v50[7] = v44 | (v45 << 16);
    uint64_t v51 = (int *)((char *)v50 + a2);
    *uint64_t v51 = v319 | (v318 << 16);
    v51[1] = v317 | (v316 << 16);
    v51[2] = v311 | (v310 << 16);
    v51[3] = v309 | (v308 << 16);
    v51[4] = v37 | (v38 << 16);
    v51[5] = v39 | (v40 << 16);
    v51[6] = v46 | (v47 << 16);
    v51[7] = v48 | (v49 << 16);
    return 96;
  }
  if (a4 == 127)
  {
    int64x2_t v52 = *(int64x2_t *)a3;
    int64x2_t v53 = *(int64x2_t *)(a3 + 16);
    int64x2_t v54 = *(int64x2_t *)(a3 + 32);
    int64x2_t v55 = *(int64x2_t *)(a3 + 48);
    int64x2_t v56 = *(int64x2_t *)(a3 + 64);
    int64x2_t v57 = *(int64x2_t *)(a3 + 80);
    int64x2_t v58 = *(int64x2_t *)(a3 + 96);
    int64x2_t v59 = *(int64x2_t *)(a3 + 112);
    int v60 = (int64x2_t *)((char *)a1 + a2);
    *(int64x2_t *)a1 = vzip1q_s64(*(int64x2_t *)a3, v53);
    a1[1] = (float32x4_t)vzip1q_s64(v56, v57);
    unint64_t v61 = (int64x2_t *)((char *)a1 + 2 * a2);
    *int v60 = vzip2q_s64(v52, v53);
    v60[1] = vzip2q_s64(v56, v57);
    *unint64_t v61 = vzip1q_s64(v54, v55);
    v61[1] = vzip1q_s64(v58, v59);
    unint64_t v62 = (int64x2_t *)((char *)v61 + a2);
    *unint64_t v62 = vzip2q_s64(v54, v55);
    v62[1] = vzip2q_s64(v58, v59);
    return 128;
  }
  if (a4 == 3)
  {
    float32x4_t v16 = vld1q_dup_f32((const float *)a3);
    *a1 = v16;
    a1[1] = v16;
    int v17 = (float32x4_t *)((char *)a1 + a2);
    *int v17 = v16;
    v17[1] = v16;
    int v18 = (float32x4_t *)((char *)a1 + 2 * a2);
    float32x4_t *v18 = v16;
    v18[1] = v16;
    unint64_t v19 = (float32x4_t *)((char *)a1 + 2 * a2 + a2);
    float32x4_t *v19 = v16;
    v19[1] = v16;
    return 4;
  }
  unint64_t v63 = 8 * (a3 & 7);
  unint64_t v64 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = v63 + 18;
  uint64_t v66 = *(void *)(a3 & 0xFFFFFFFFFFFFFFF8) >> v63;
  if (v63 >= 0x2F) {
    v66 |= *(void *)(v64 + 8) << (-8 * (a3 & 7u));
  }
  a6.i32[0] = v66;
  a6.i32[1] = (unsigned __int16)v66 >> 5;
  *(int8x8_t *)a6.i8 = vand_s8(*(int8x8_t *)a6.i8, (int8x8_t)0x1F0000001FLL);
  *(int16x4_t *)a6.i8 = vmovn_s32(a6);
  a7.i32[0] = (unsigned __int16)v66 >> 10;
  a7.i32[1] = v66 >> 14;
  *(int32x2_t *)a7.i8 = vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)a7.i8, (int8x8_t)0xF0000000FLL), (int32x2_t)0x100000001);
  *(int16x4_t *)a7.i8 = vmovn_s32(a7);
  unint64_t v67 = v63 + 50;
  unint64_t v68 = v65 >> 6;
  unint64_t v69 = v65 & 0x3A;
  uint64_t v70 = *(void *)(v64 + 8 * v68) >> v69;
  if (v69 >= 0x21) {
    v70 |= *(void *)(v64 + 8 * v68 + 8) << -(char)v69;
  }
  int8x16_t v71 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
  int8x16_t v72 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
  unint64_t v73 = (8 * (a3 & 7)) | 0x300;
  v74.i64[0] = 0x3000300030003;
  v74.i64[1] = 0x3000300030003;
  int16x8_t v75 = (int16x8_t)vandq_s8(v71, v74);
  int8x16_t v76 = vbicq_s8(v72, (int8x16_t)vceqq_s16(v75, (int16x8_t)v74));
  v74.i64[0] = 0x202020202020202;
  v74.i64[1] = 0x202020202020202;
  int8x16_t v77 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v71.i8, (int8x8_t)0x4000400040004)))), v74);
  if (vmaxvq_s8(v77) < 1)
  {
    int v87 = 0;
    v88.i64[0] = -1;
    v88.i64[1] = -1;
    int8x16_t v89 = v76;
    int8x16_t v90 = v76;
    int8x16_t v91 = v76;
    v92.i64[0] = -1;
    v92.i64[1] = -1;
    int8x16_t v93 = v76;
    v94.i64[0] = -1;
    v94.i64[1] = -1;
    v95.i64[0] = -1;
    v95.i64[1] = -1;
  }
  else
  {
    int8x16_t v78 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v77, v77));
    int8x16_t v79 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v78, (int16x8_t)v78));
    unint64_t v80 = vpaddq_s32((int32x4_t)v79, (int32x4_t)v79).u64[0];
    v81.i64[0] = v80;
    v81.i64[1] = HIDWORD(v80);
    int64x2_t v82 = v81;
    unint64_t v83 = vaddvq_s64(v81);
    unint64_t v84 = v67 + v83;
    if (v83 <= 0x80 && v73 >= v84)
    {
      unint64_t v96 = v67 & 0x3A;
      int64x2_t v97 = vaddq_s64(vdupq_n_s64(v96), vzip1q_s64((int64x2_t)0, v82));
      unint64_t v98 = (int64x2_t *)(v64 + ((v67 >> 3) & 8));
      int8x16_t v86 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v97)));
      if (v96 + v83 < 0x81)
      {
        int v87 = 0;
      }
      else
      {
        int v87 = 0;
        int8x16_t v86 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v97))), v86);
      }
      unint64_t v67 = v84;
    }
    else
    {
      int8x16_t v86 = 0uLL;
      int v87 = 1;
    }
    int32x2_t v99 = vzip1_s32(*(int32x2_t *)v79.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
    v100.i64[0] = v99.u32[0];
    v100.i64[1] = v99.u32[1];
    int64x2_t v101 = (int64x2_t)vshlq_u64((uint64x2_t)v86, (uint64x2_t)vnegq_s64(v100));
    *(int32x2_t *)v86.i8 = vmovn_s64((int64x2_t)v86);
    *(int32x2_t *)v101.i8 = vmovn_s64(v101);
    int8x16_t v102 = (int8x16_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v101);
    int16x8_t v103 = (int16x8_t)vshlq_u32((uint32x4_t)v102, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v78.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)))));
    *(int16x4_t *)v102.i8 = vmovn_s32((int32x4_t)v102);
    *(int16x4_t *)v103.i8 = vmovn_s32((int32x4_t)v103);
    int16x8_t v104 = vzip1q_s16((int16x8_t)v102, v103);
    v102.i64[0] = 0x101010101010101;
    v102.i64[1] = 0x101010101010101;
    *(int8x8_t *)v105.i8 = vand_s8(vzip1_s8(vmovn_s16(v104), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v104, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v77.i8, *(int8x8_t *)v71.i8)))))), vadd_s8((int8x8_t)*(_OWORD *)&vshlq_s8(v102, v77), (int8x8_t)-1));
    v105.i64[1] = v105.i64[0];
    *(int8x8_t *)v105.i8 = vqtbl1_s8(v105, (int8x8_t)0x703060205010400);
    *(int16x4_t *)v104.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 0);
    *(int16x4_t *)v102.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 1);
    int8x8_t v106 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 2);
    int8x8_t v107 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 3);
    int8x16_t v93 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v104.i8);
    int8x16_t v91 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v102.i8);
    int8x16_t v90 = (int8x16_t)vsubw_s8((int16x8_t)v76, v106);
    int8x16_t v89 = (int8x16_t)vsubw_s8((int16x8_t)v76, v107);
    int8x16_t v95 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v104.i8));
    int8x16_t v94 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v102.i8));
    int8x16_t v92 = (int8x16_t)vmovl_s8(vceqz_s8(v106));
    int8x16_t v88 = (int8x16_t)vmovl_s8(vceqz_s8(v107));
  }
  v108.i64[0] = 0x8000800080008;
  v108.i64[1] = 0x8000800080008;
  int8x16_t v109 = 0uLL;
  int8x16_t v110 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v71, v108), (int8x16_t)0, 0xCuLL), v76);
  int8x16_t v111 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v110, (int16x8_t)v110));
  v108.i64[0] = vpaddq_s32((int32x4_t)v111, (int32x4_t)v111).u64[0];
  v112.i64[0] = v108.u32[0];
  v112.i64[1] = v108.u32[1];
  int64x2_t v113 = v112;
  unint64_t v114 = vaddvq_s64(v112);
  unint64_t v115 = v67 + v114;
  if (v114 <= 0x80 && v73 >= v115)
  {
    unint64_t v117 = v67 & 0x3F;
    int64x2_t v118 = vaddq_s64(vdupq_n_s64(v117), vzip1q_s64((int64x2_t)0, v113));
    unint64_t v119 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v109 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v119, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119->i64[0], 0), (uint64x2_t)vnegq_s64(v118)));
    if (v117 + v114 >= 0x81) {
      int8x16_t v109 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v119[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v118))), v109);
    }
    unint64_t v67 = v115;
  }
  else
  {
    int v87 = 1;
  }
  int v120 = v71.i8[0] & 3;
  if (v120 == 2)
  {
    BOOL v121 = v73 < v67 + 8;
    unint64_t v122 = v67 + 16;
    if (v73 >= v67 + 8) {
      v67 += 8;
    }
    if (v122 > v73 || v121) {
      int v87 = 1;
    }
    else {
      v67 += 8;
    }
  }
  int8x16_t v124 = 0uLL;
  int8x16_t v125 = vextq_s8((int8x16_t)0, v93, 0xCuLL);
  int8x16_t v126 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v125, (int16x8_t)v125));
  unint64_t v127 = vpaddq_s32((int32x4_t)v126, (int32x4_t)v126).u64[0];
  v128.i64[0] = v127;
  v128.i64[1] = HIDWORD(v127);
  int64x2_t v129 = v128;
  unint64_t v130 = vaddvq_s64(v128);
  unint64_t v131 = v67 + v130;
  if (v130 <= 0x80 && v73 >= v131)
  {
    unint64_t v134 = v67 & 0x3F;
    int64x2_t v135 = vaddq_s64(vdupq_n_s64(v134), vzip1q_s64((int64x2_t)0, v129));
    int v136 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v133 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v136, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136->i64[0], 0), (uint64x2_t)vnegq_s64(v135)));
    if (v134 + v130 >= 0x81) {
      int8x16_t v133 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v136[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v135))), v133);
    }
    unint64_t v67 = v131;
  }
  else
  {
    int v87 = 1;
    int8x16_t v133 = 0uLL;
  }
  int8x16_t v137 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v93, (int16x8_t)v93));
  unint64_t v138 = vpaddq_s32((int32x4_t)v137, (int32x4_t)v137).u64[0];
  v139.i64[0] = v138;
  v139.i64[1] = HIDWORD(v138);
  int64x2_t v140 = v139;
  unint64_t v141 = vaddvq_s64(v139);
  unint64_t v142 = v67 + v141;
  if (v141 <= 0x80 && v73 >= v142)
  {
    unint64_t v144 = v67 & 0x3F;
    int64x2_t v145 = vaddq_s64(vdupq_n_s64(v144), vzip1q_s64((int64x2_t)0, v140));
    BOOL v146 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v124 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v146, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146->i64[0], 0), (uint64x2_t)vnegq_s64(v145)));
    if (v144 + v141 >= 0x81) {
      int8x16_t v124 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v146[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v145))), v124);
    }
    unint64_t v67 = v142;
  }
  else
  {
    int v87 = 1;
  }
  int8x16_t v147 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v91, (int16x8_t)v91));
  unint64_t v148 = vpaddq_s32((int32x4_t)v147, (int32x4_t)v147).u64[0];
  v149.i64[0] = v148;
  v149.i64[1] = HIDWORD(v148);
  int64x2_t v150 = v149;
  unint64_t v151 = vaddvq_s64(v149);
  unint64_t v152 = v67 + v151;
  int8x16_t v153 = 0uLL;
  if (v151 <= 0x80 && v73 >= v152)
  {
    unint64_t v156 = v67 & 0x3F;
    int64x2_t v157 = vaddq_s64(vdupq_n_s64(v156), vzip1q_s64((int64x2_t)0, v150));
    int16x8_t v158 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v155 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v158, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158->i64[0], 0), (uint64x2_t)vnegq_s64(v157)));
    if (v156 + v151 >= 0x81) {
      int8x16_t v155 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v158[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v157))), v155);
    }
    unint64_t v67 = v152;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  else
  {
    int v87 = 1;
    int8x16_t v155 = 0uLL;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  unint64_t v159 = v67 + v151;
  if (v73 < v67 + v151)
  {
LABEL_82:
    int v87 = 1;
    unint64_t v159 = v67;
    goto LABEL_83;
  }
  unint64_t v160 = v67 & 0x3F;
  int64x2_t v161 = vaddq_s64(vdupq_n_s64(v160), vzip1q_s64((int64x2_t)0, v150));
  BOOL v162 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
  int8x16_t v153 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v162, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162->i64[0], 0), (uint64x2_t)vnegq_s64(v161)));
  if (v160 + v151 >= 0x81) {
    int8x16_t v153 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v162[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v161))), v153);
  }
LABEL_83:
  int8x16_t v163 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v90, (int16x8_t)v90));
  unint64_t v164 = vpaddq_s32((int32x4_t)v163, (int32x4_t)v163).u64[0];
  v165.i64[0] = v164;
  v165.i64[1] = HIDWORD(v164);
  int64x2_t v166 = v165;
  unint64_t v167 = vaddvq_s64(v165);
  int8x16_t v168 = 0uLL;
  if (v167 > 0x80 || (unint64_t v169 = v159 + v167, v73 < v159 + v167))
  {
    int v87 = 1;
    unint64_t v169 = v159;
    int8x16_t v172 = 0uLL;
  }
  else
  {
    int64x2_t v170 = vaddq_s64(vdupq_n_s64(v159 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    int v171 = (int64x2_t *)(v64 + 8 * (v159 >> 6));
    int8x16_t v172 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v171, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171->i64[0], 0), (uint64x2_t)vnegq_s64(v170)));
    if ((v159 & 0x3F) + v167 >= 0x81) {
      int8x16_t v172 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v171[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v170))), v172);
    }
  }
  if (v167 > 0x80 || (unint64_t v173 = v169 + v167, v73 < v169 + v167))
  {
    int v87 = 1;
    unint64_t v173 = v169;
  }
  else
  {
    int64x2_t v174 = vaddq_s64(vdupq_n_s64(v169 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    uint64_t v175 = (int64x2_t *)(v64 + 8 * (v169 >> 6));
    int8x16_t v168 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v175, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175->i64[0], 0), (uint64x2_t)vnegq_s64(v174)));
    if ((v169 & 0x3F) + v167 >= 0x81) {
      int8x16_t v168 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v175[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v174))), v168);
    }
  }
  int8x16_t v176 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v89, (int16x8_t)v89));
  unint64_t v177 = vpaddq_s32((int32x4_t)v176, (int32x4_t)v176).u64[0];
  v178.i64[0] = v177;
  v178.i64[1] = HIDWORD(v177);
  int64x2_t v179 = v178;
  unint64_t v180 = vaddvq_s64(v178);
  int8x16_t v181 = 0uLL;
  if (v180 > 0x80 || (unint64_t v182 = v173 + v180, v73 < v173 + v180))
  {
    int v87 = 1;
    unint64_t v182 = v173;
    int8x16_t v186 = 0uLL;
  }
  else
  {
    unint64_t v183 = v173 & 0x3F;
    int64x2_t v184 = vaddq_s64(vdupq_n_s64(v183), vzip1q_s64((int64x2_t)0, v179));
    uint64_t v185 = (int64x2_t *)(v64 + 8 * (v173 >> 6));
    int8x16_t v186 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v185, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185->i64[0], 0), (uint64x2_t)vnegq_s64(v184)));
    if (v183 + v180 >= 0x81) {
      int8x16_t v186 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v185[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v184))), v186);
    }
  }
  if (v180 > 0x80 || (unint64_t v187 = v182 + v180, v73 < v182 + v180))
  {
    int v87 = 1;
    unint64_t v187 = v182;
  }
  else
  {
    int64x2_t v188 = vaddq_s64(vdupq_n_s64(v182 & 0x3F), vzip1q_s64((int64x2_t)0, v179));
    unint64_t v189 = (int64x2_t *)(v64 + 8 * (v182 >> 6));
    int8x16_t v181 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v189, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189->i64[0], 0), (uint64x2_t)vnegq_s64(v188)));
    if ((v182 & 0x3F) + v180 >= 0x81) {
      int8x16_t v181 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v189[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v188))), v181);
    }
  }
  if (v87 || (uint64_t result = a4 + 1, v73 + 8 * result - v187 - 768 >= 9) || v120 == 2)
  {
    uint64_t result = 0;
    v342 |= 0xFFFFLL << ((8 * &v342) & 0x20);
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    unint64_t v190 = (_OWORD *)((char *)a1->f32 + a2);
    *unint64_t v190 = 0u;
    v190[1] = 0u;
    unint64_t v191 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    BOOL v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
    *unint64_t v191 = 0u;
    v191[1] = 0u;
    goto LABEL_107;
  }
  int32x2_t v192 = vzip1_s32(*(int32x2_t *)v111.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
  int32x2_t v193 = vzip1_s32(*(int32x2_t *)v147.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
  v194.i64[0] = v192.u32[0];
  v194.i64[1] = v192.u32[1];
  int64x2_t v195 = v194;
  v194.i64[0] = v193.u32[0];
  v194.i64[1] = v193.u32[1];
  uint64x2_t v196 = (uint64x2_t)vnegq_s64(v195);
  uint64x2_t v197 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v198 = (int64x2_t)vshlq_u64((uint64x2_t)v109, v196);
  *(int32x2_t *)v109.i8 = vmovn_s64((int64x2_t)v109);
  *(int32x2_t *)v198.i8 = vmovn_s64(v198);
  int16x8_t v199 = (int16x8_t)vzip1q_s32((int32x4_t)v109, (int32x4_t)v198);
  int64x2_t v200 = (int64x2_t)vshlq_u64((uint64x2_t)v155, v197);
  *(int32x2_t *)v155.i8 = vmovn_s64((int64x2_t)v155);
  *(int32x2_t *)v200.i8 = vmovn_s64(v200);
  int16x8_t v201 = (int16x8_t)vzip1q_s32((int32x4_t)v155, (int32x4_t)v200);
  int64x2_t v202 = (int64x2_t)vshlq_u64((uint64x2_t)v153, v197);
  *(int32x2_t *)v153.i8 = vmovn_s64((int64x2_t)v153);
  *(int32x2_t *)v202.i8 = vmovn_s64(v202);
  int16x8_t v203 = (int16x8_t)vzip1q_s32((int32x4_t)v153, (int32x4_t)v202);
  uint32x4_t v204 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v91.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL))));
  int16x8_t v205 = (int16x8_t)vshlq_u32((uint32x4_t)v199, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v110.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)))));
  *(int16x4_t *)v199.i8 = vmovn_s32((int32x4_t)v199);
  *(int16x4_t *)v205.i8 = vmovn_s32((int32x4_t)v205);
  int16x8_t v206 = vzip1q_s16(v199, v205);
  int16x8_t v207 = (int16x8_t)vshlq_u32((uint32x4_t)v201, v204);
  int16x8_t v208 = (int16x8_t)vshlq_u32((uint32x4_t)v203, v204);
  *(int16x4_t *)v201.i8 = vmovn_s32((int32x4_t)v201);
  *(int16x4_t *)v207.i8 = vmovn_s32((int32x4_t)v207);
  *(int16x4_t *)v203.i8 = vmovn_s32((int32x4_t)v203);
  *(int16x4_t *)v208.i8 = vmovn_s32((int32x4_t)v208);
  int16x8_t v209 = vzip1q_s16(v201, v207);
  v207.i64[0] = 0x10001000100010;
  v207.i64[1] = 0x10001000100010;
  int16x8_t v210 = vzip1q_s16(v203, v208);
  v208.i64[0] = 0xF000F000F000FLL;
  v208.i64[1] = 0xF000F000F000FLL;
  int16x8_t v211 = vsubq_s16(v207, (int16x8_t)v110);
  int16x8_t v212 = vaddq_s16((int16x8_t)v110, v208);
  v208.i64[0] = 0x10001000100010;
  v208.i64[1] = 0x10001000100010;
  int16x8_t v213 = vshlq_s16(v206, v211);
  v211.i64[0] = 0xF000F000F000FLL;
  v211.i64[1] = 0xF000F000F000FLL;
  int16x8_t v214 = vsubq_s16(v208, (int16x8_t)v91);
  int16x8_t v215 = vaddq_s16((int16x8_t)v91, v211);
  int16x8_t v216 = vshlq_s16(v210, v214);
  int8x16_t v217 = (int8x16_t)vshlq_s16(v213, v212);
  int16x8_t v218 = vshlq_s16(vshlq_s16(v209, v214), v215);
  int8x16_t v219 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v217.i8, 0);
  int16x8_t v220 = (int16x8_t)vandq_s8(v94, v219);
  int16x8_t v221 = vsubq_s16(v218, v220);
  int16x8_t v222 = vsubq_s16(vshlq_s16(v216, v215), v220);
  *(int32x2_t *)v218.i8 = vzip1_s32(*(int32x2_t *)v163.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
  *(int32x2_t *)v216.i8 = vzip1_s32(*(int32x2_t *)v176.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL));
  v194.i64[0] = v218.u32[0];
  v194.i64[1] = v218.u32[1];
  int64x2_t v223 = v194;
  v194.i64[0] = v216.u32[0];
  v194.i64[1] = v216.u32[1];
  uint64x2_t v224 = (uint64x2_t)vnegq_s64(v223);
  int64x2_t v225 = (int64x2_t)vshlq_u64((uint64x2_t)v172, v224);
  *(int32x2_t *)v220.i8 = vmovn_s64((int64x2_t)v172);
  *(int32x2_t *)v225.i8 = vmovn_s64(v225);
  int16x8_t v226 = (int16x8_t)vzip1q_s32((int32x4_t)v220, (int32x4_t)v225);
  uint64x2_t v227 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v228 = (int64x2_t)vshlq_u64((uint64x2_t)v168, v224);
  *(int32x2_t *)v168.i8 = vmovn_s64((int64x2_t)v168);
  *(int32x2_t *)v228.i8 = vmovn_s64(v228);
  int16x8_t v229 = (int16x8_t)vzip1q_s32((int32x4_t)v168, (int32x4_t)v228);
  int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v186, v227);
  *(int32x2_t *)v172.i8 = vmovn_s64((int64x2_t)v186);
  *(int32x2_t *)v230.i8 = vmovn_s64(v230);
  uint32x4_t v231 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v90.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))));
  int16x8_t v232 = (int16x8_t)vzip1q_s32((int32x4_t)v172, (int32x4_t)v230);
  int16x8_t v233 = (int16x8_t)vshlq_u32((uint32x4_t)v226, v231);
  int16x8_t v234 = (int16x8_t)vshlq_u32((uint32x4_t)v229, v231);
  *(int16x4_t *)v226.i8 = vmovn_s32((int32x4_t)v226);
  *(int16x4_t *)v233.i8 = vmovn_s32((int32x4_t)v233);
  *(int16x4_t *)v229.i8 = vmovn_s32((int32x4_t)v229);
  *(int16x4_t *)v234.i8 = vmovn_s32((int32x4_t)v234);
  int16x8_t v235 = vzip1q_s16(v226, v233);
  v233.i64[0] = 0x10001000100010;
  v233.i64[1] = 0x10001000100010;
  int16x8_t v236 = vzip1q_s16(v229, v234);
  v234.i64[0] = 0xF000F000F000FLL;
  v234.i64[1] = 0xF000F000F000FLL;
  int16x8_t v237 = vsubq_s16(v233, (int16x8_t)v90);
  int16x8_t v238 = vaddq_s16((int16x8_t)v90, v234);
  uint32x4_t v239 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v89.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL))));
  int16x8_t v240 = vshlq_s16(vshlq_s16(v235, v237), v238);
  int16x8_t v241 = vshlq_s16(vshlq_s16(v236, v237), v238);
  int16x8_t v242 = (int16x8_t)vandq_s8(v92, v219);
  int16x8_t v243 = vsubq_s16(v240, v242);
  int16x8_t v244 = vsubq_s16(v241, v242);
  int16x8_t v245 = (int16x8_t)vshlq_u32((uint32x4_t)v232, v239);
  *(int16x4_t *)v240.i8 = vmovn_s32((int32x4_t)v232);
  *(int16x4_t *)v245.i8 = vmovn_s32((int32x4_t)v245);
  v232.i64[0] = 0x10001000100010;
  v232.i64[1] = 0x10001000100010;
  int16x8_t v246 = vzip1q_s16(v240, v245);
  v240.i64[0] = 0xF000F000F000FLL;
  v240.i64[1] = 0xF000F000F000FLL;
  int16x8_t v247 = vsubq_s16(v232, (int16x8_t)v89);
  int16x8_t v248 = vaddq_s16((int16x8_t)v89, v240);
  int64x2_t v249 = (int64x2_t)vshlq_u64((uint64x2_t)v181, v227);
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v181);
  *(int32x2_t *)v249.i8 = vmovn_s64(v249);
  int16x8_t v250 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v249);
  int16x8_t v251 = (int16x8_t)vshlq_u32((uint32x4_t)v250, v239);
  *(int16x4_t *)v250.i8 = vmovn_s32((int32x4_t)v250);
  *(int16x4_t *)v251.i8 = vmovn_s32((int32x4_t)v251);
  int16x8_t v252 = vshlq_s16(vshlq_s16(vzip1q_s16(v250, v251), v247), v248);
  int16x8_t v253 = (int16x8_t)vandq_s8(v88, v219);
  int16x8_t v254 = vsubq_s16(vshlq_s16(vshlq_s16(v246, v247), v248), v253);
  int16x8_t v255 = vsubq_s16(v252, v253);
  int32x2_t v256 = vzip1_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
  int32x2_t v257 = vzip1_s32(*(int32x2_t *)v137.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL));
  v194.i64[0] = v256.u32[0];
  v194.i64[1] = v256.u32[1];
  int64x2_t v258 = v194;
  v194.i64[0] = v257.u32[0];
  v194.i64[1] = v257.u32[1];
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v133, (uint64x2_t)vnegq_s64(v258));
  *(int32x2_t *)v133.i8 = vmovn_s64((int64x2_t)v133);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v133, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v124, (uint64x2_t)vnegq_s64(v194));
  *(int32x2_t *)v124.i8 = vmovn_s64((int64x2_t)v124);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v124, (int32x4_t)v261);
  int16x8_t v263 = (int16x8_t)vshlq_u32((uint32x4_t)v260, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v125.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)))));
  int16x8_t v264 = (int16x8_t)vshlq_u32((uint32x4_t)v262, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v93.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)))));
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v263.i8 = vmovn_s32((int32x4_t)v263);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  int16x8_t v265 = vzip1q_s16(v260, v263);
  v263.i64[0] = 0x10001000100010;
  v263.i64[1] = 0x10001000100010;
  int16x8_t v266 = vzip1q_s16(v262, v264);
  v264.i64[0] = 0xF000F000F000FLL;
  v264.i64[1] = 0xF000F000F000FLL;
  int16x8_t v267 = vaddq_s16((int16x8_t)vandq_s8(v217, v95), vshlq_s16(vshlq_s16(v265, vsubq_s16(v263, (int16x8_t)v125)), vaddq_s16((int16x8_t)v125, v264)));
  int16x8_t v268 = (int16x8_t)vandq_s8(v95, v219);
  v269.i64[0] = 0x1000100010001;
  v269.i64[1] = 0x1000100010001;
  int16x8_t v270 = vceqq_s16(v75, (int16x8_t)v269);
  int v271 = (unsigned __int16)vaddvq_s16(v270);
  int8x16_t v272 = (int8x16_t)vsubq_s16(v267, v268);
  int8x16_t v273 = (int8x16_t)vsubq_s16(vshlq_s16(vshlq_s16(v266, vsubq_s16(v263, (int16x8_t)v93)), vaddq_s16((int16x8_t)v93, v264)), v268);
  v270.i32[0] = v70;
  int16x8_t v274 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v270.i8, 0);
  if (v271)
  {
    int8x16_t v275 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v71, v269));
    int8x16_t v276 = v273;
    v276.i32[3] = v272.i32[0];
    int8x16_t v277 = v272;
    v277.i32[0] = v273.i32[3];
    v358.val[0] = vbslq_s8(v275, v277, v272);
    v358.val[1] = vbslq_s8(v275, v276, v273);
    v278.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v278.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA7570), v275), (int16x8_t)v358.val[0]);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275));
    int8x16_t v272 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA7580), v275), (int16x8_t)v359.val[0]);
    int8x16_t v273 = (int8x16_t)vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA7590), v275), v221);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA75A0), v275), v222);
    int16x8_t v221 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75B0), v275), (int16x8_t)v359.val[0]);
    int16x8_t v222 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA75C0), v275), v243);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA7570), v275), v244);
    int16x8_t v243 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275), (int16x8_t)v359.val[0]);
    int16x8_t v244 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75D0), v275));
    v358.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA75E0), v275), v254);
    v358.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA7570), v275), v255);
    int16x8_t v254 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275), (int16x8_t)v358.val[0]);
    int16x8_t v255 = vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA75F0), v275));
  }
  int8x16_t v279 = (int8x16_t)vaddq_s16((int16x8_t)v272, v274);
  int8x16_t v280 = (int8x16_t)vaddq_s16((int16x8_t)v273, v274);
  int8x16_t v281 = (int8x16_t)vaddq_s16(v221, v274);
  int8x16_t v282 = (int8x16_t)vaddq_s16(v222, v274);
  int8x16_t v283 = (int8x16_t)vaddq_s16(v243, v274);
  int8x16_t v284 = (int8x16_t)vaddq_s16(v244, v274);
  int8x16_t v285 = (int8x16_t)vaddq_s16(v254, v274);
  int8x16_t v286 = (int8x16_t)vaddq_s16(v255, v274);
  v287.i64[0] = 0x10001000100010;
  v287.i64[1] = 0x10001000100010;
  int8x16_t v288 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v71, v287));
  int64x2_t v289 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v279, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v279);
  int64x2_t v290 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v280, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v280);
  int64x2_t v291 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v281, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v281);
  int64x2_t v292 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v282, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v282);
  int64x2_t v293 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v283, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v283);
  int64x2_t v294 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v284, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v284);
  unint64_t v295 = (int64x2_t *)((char *)a1 + a2);
  *(int64x2_t *)a1 = vzip1q_s64(v289, v290);
  a1[1] = (float32x4_t)vzip1q_s64(v293, v294);
  unint64_t v296 = (int64x2_t *)((char *)a1 + 2 * a2);
  int64x2_t v297 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v285, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v285);
  *unint64_t v295 = vzip2q_s64(v289, v290);
  v295[1] = vzip2q_s64(v293, v294);
  int64x2_t v298 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v286, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v286);
  *unint64_t v296 = vzip1q_s64(v291, v292);
  v296[1] = vzip1q_s64(v297, v298);
  int16x8_t v299 = (int64x2_t *)((char *)v296 + a2);
  *int16x8_t v299 = vzip2q_s64(v291, v292);
  v299[1] = vzip2q_s64(v297, v298);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressMacroblock(uint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  unint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  float32x4_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v16, v13 + 32, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *float32x4_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  uint64_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v21 = 0;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v25, v13 + v20 + 32, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int v25 = 0;
LABEL_35:
  int v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *int v26 = 0;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v30, v13 + 8 * a2 + 32, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int v30 = 0;
LABEL_49:
  int v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    int v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v31 = 0;
    int v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *int v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::compressSubblock(v11, v35, v13 + 12 * a2 + 32, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressMacroblock(float32x4_t *a1, uint64_t a2, unsigned __int8 *a3, int a4, int32x4_t a5, int32x4_t a6)
{
  uint64_t v9 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1, 64, a2, *a3, a4, a5, a6);
  uint64_t v12 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 2, 64, v9, a3[1], a4, v10, v11);
  uint64_t v15 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 16, 64, v12, a3[2], a4, v13, v14);
  uint64_t v18 = v15
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 18, 64, v15, a3[3], a4, v16, v17);
  uint64_t v21 = v18
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 32, 64, v18, a3[4], a4, v19, v20);
  uint64_t v24 = v21
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 34, 64, v21, a3[5], a4, v22, v23);
  uint64_t v27 = v24
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 48, 64, v24, a3[6], a4, v25, v26);
  unsigned int v30 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)1>::decompressSubblock(a1 + 50, 64, v27, v30, a4, v28, v29);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  int64x2_t v8 = *(int64x2_t *)(a3 + 16);
  uint64_t v7 = (int64x2_t *)(a3 + 2 * a4);
  int64x2_t v9 = *(int64x2_t *)(a3 + a4);
  int64x2_t v10 = *(int64x2_t *)(a3 + a4 + 16);
  int16x8_t v11 = (int16x8_t)vzip1q_s64(*(int64x2_t *)a3, v9);
  int8x16_t v12 = (int8x16_t)vzip2q_s64(*(int64x2_t *)a3, v9);
  int16x8_t v13 = (int16x8_t)vzip1q_s64(v8, v10);
  int16x8_t v14 = (int16x8_t)vzip2q_s64(v8, v10);
  int64x2_t v16 = *v7;
  int64x2_t v17 = v7[1];
  uint64_t v15 = (int64x2_t *)((char *)v7 + a4);
  int64x2_t v18 = v15[1];
  int16x8_t v19 = (int16x8_t)vzip1q_s64(v16, *v15);
  int16x8_t v20 = (int16x8_t)vzip2q_s64(v16, *v15);
  int16x8_t v21 = (int16x8_t)vzip1q_s64(v17, v18);
  int16x8_t v22 = (int16x8_t)vzip2q_s64(v17, v18);
  int16x8_t v23 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
  int8x16_t v415 = (int8x16_t)vsubq_s16(v11, v23);
  int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v12, v23);
  int8x16_t v419 = (int8x16_t)vsubq_s16(v19, v23);
  int8x16_t v420 = (int8x16_t)vsubq_s16(v20, v23);
  int8x16_t v421 = (int8x16_t)vsubq_s16(v13, v23);
  int8x16_t v422 = (int8x16_t)vsubq_s16(v14, v23);
  int8x16_t v423 = (int8x16_t)vsubq_s16(v21, v23);
  int8x16_t v424 = (int8x16_t)vsubq_s16(v22, v23);
  int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v26 = vpmaxq_s16(v24, v24);
  int16x8_t v27 = vpminq_s16(v25, v25);
  int16x8_t v28 = vpmaxq_s16(v26, v26);
  int16x8_t v29 = vpminq_s16(v27, v27);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  v31.i64[0] = 0x8000800080008000;
  v31.i64[1] = 0x8000800080008000;
  int16x8_t v32 = vminq_s16(v29, v31);
  int16x8_t v33 = vzip1q_s16(v28, v29);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v33)), (int8x16_t)vceqzq_s16(v33));
  int16x8_t v36 = vpmaxq_s16(v35, v35);
  int16x8_t v37 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v39 = vpmaxq_s16(v37, v37);
  int16x8_t v40 = vpminq_s16(v38, v38);
  int16x8_t v41 = vpmaxq_s16(v39, v39);
  int16x8_t v42 = vpminq_s16(v40, v40);
  int16x8_t v43 = vmaxq_s16(vmaxq_s16(v28, v30), v41);
  int16x8_t v44 = vminq_s16(v32, v42);
  int16x8_t v45 = vzip1q_s16(v41, v42);
  int16x8_t v46 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v45)), (int8x16_t)vceqzq_s16(v45));
  int16x8_t v47 = vpmaxq_s16(v46, v46);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vpmaxq_s16(v50, v50);
  int16x8_t v53 = vpminq_s16(v51, v51);
  int16x8_t v54 = vmaxq_s16(v43, v52);
  int16x8_t v55 = vminq_s16(v44, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int16x8_t v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v60 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v61 = vpmaxq_s16(v59, v59);
  int16x8_t v62 = vpminq_s16(v60, v60);
  int16x8_t v63 = vpmaxq_s16(v61, v61);
  int16x8_t v64 = vpminq_s16(v62, v62);
  int8x16_t v65 = (int8x16_t)vmaxq_s16(v54, v63);
  int16x8_t v66 = vminq_s16(v55, v64);
  int16x8_t v67 = vzip1q_s16(v63, v64);
  int16x8_t v68 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v67)), (int8x16_t)vceqzq_s16(v67));
  v64.i64[0] = -1;
  v64.i64[1] = -1;
  int16x8_t v69 = vpmaxq_s16(v68, v68);
  int8x16_t v70 = (int8x16_t)vmaxq_s16(vmaxq_s16(v36, v47), vmaxq_s16(v58, v69));
  int16x8_t v71 = vclzq_s16(vsubq_s16((int16x8_t)v65, v66));
  v32.i64[0] = 0xF000F000F000FLL;
  v32.i64[1] = 0xF000F000F000FLL;
  int16x8_t v72 = vsubq_s16(v32, v71);
  int8x16_t v73 = (int8x16_t)vsubq_s16((int16x8_t)v34, v71);
  int8x16_t v74 = (int8x16_t)vsubq_s16(vshlq_s16(v64, v72), v66);
  int8x16_t v75 = (int8x16_t)vcgtq_s16((int16x8_t)v70, (int16x8_t)v73);
  int8x16_t v431 = vbslq_s8(v75, v73, v70);
  int8x16_t v432 = (int8x16_t)v66;
  int8x16_t v433 = v65;
  int8x16_t v434 = vandq_s8(v74, v75);
  v65.i64[0] = 0x8000800080008;
  v65.i64[1] = 0x8000800080008;
  int8x16_t v76 = vandq_s8(v75, v65);
  v77.i64[0] = 0x3000300030003;
  v77.i64[1] = 0x3000300030003;
  int16x8_t v78 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v36), (int16x8_t)v77), (int16x8_t)0);
  int8x16_t v79 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v47), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v80 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v58), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v81 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v69), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v427 = vsubq_s16((int16x8_t)v431, v78);
  int16x8_t v428 = vsubq_s16((int16x8_t)v431, (int16x8_t)v79);
  int16x8_t v429 = vsubq_s16((int16x8_t)v431, v80);
  int16x8_t v430 = vsubq_s16((int16x8_t)v431, v81);
  int8x16_t v82 = (int8x16_t)vceqq_s16(vaddq_s16(v81, v80), vnegq_s16(vaddq_s16(v78, (int16x8_t)v79)));
  v79.i64[0] = 0x4000400040004;
  v79.i64[1] = 0x4000400040004;
  int8x16_t v83 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v431), v77), v76), vbicq_s8(v79, v82));
  int8x16_t v425 = (int8x16_t)v23;
  int8x16_t v426 = v83;
  if (vmaxvq_s16((int16x8_t)v431))
  {
    int16x8_t v410 = v19;
    int16x8_t v411 = v20;
    int16x8_t v412 = v21;
    int16x8_t v413 = v13;
    int16x8_t v414 = v14;
    int16x8_t v408 = v22;
    v84.i64[0] = 0x4000400040004;
    v84.i64[1] = 0x4000400040004;
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v415, (int16x8_t)vqtbl1q_s8(v415, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v86 = (int8x16_t)vsubq_s16((int16x8_t)v417, (int16x8_t)vqtbl1q_s8(v417, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v87 = (int8x16_t)vsubq_s16((int16x8_t)v419, (int16x8_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v88 = (int8x16_t)vsubq_s16((int16x8_t)v420, (int16x8_t)vqtbl1q_s8(v420, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v421, (int16x8_t)vqtbl1q_s8(v421, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v422, (int16x8_t)vqtbl1q_s8(v422, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v423, (int16x8_t)vqtbl1q_s8(v423, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v424, (int16x8_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_242EA76C0));
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vpmaxq_s16(v95, v95);
    int16x8_t v98 = vpminq_s16(v96, v96);
    int16x8_t v99 = vmaxq_s16(v97, v30);
    int16x8_t v100 = vminq_s16(v98, v31);
    int16x8_t v101 = vzip1q_s16(v97, v98);
    int16x8_t v102 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v101)), (int8x16_t)vceqzq_s16(v101));
    int16x8_t v103 = vpmaxq_s16(v102, v102);
    int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v106 = vpmaxq_s16(v104, v104);
    int16x8_t v107 = vpminq_s16(v105, v105);
    int16x8_t v108 = vpmaxq_s16(v106, v106);
    int16x8_t v109 = vpminq_s16(v107, v107);
    int16x8_t v110 = vmaxq_s16(v99, v108);
    int16x8_t v111 = vminq_s16(v100, v109);
    int16x8_t v112 = vzip1q_s16(v108, v109);
    int16x8_t v113 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v112)), (int8x16_t)vceqzq_s16(v112));
    int16x8_t v114 = vpmaxq_s16(v113, v113);
    int16x8_t v115 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v116 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v117 = vpmaxq_s16(v115, v115);
    int16x8_t v118 = vpminq_s16(v116, v116);
    int16x8_t v119 = vpmaxq_s16(v117, v117);
    int16x8_t v120 = vpminq_s16(v118, v118);
    int16x8_t v121 = vmaxq_s16(v110, v119);
    int16x8_t v122 = vminq_s16(v111, v120);
    int16x8_t v123 = vzip1q_s16(v119, v120);
    int16x8_t v124 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v123)), (int8x16_t)vceqzq_s16(v123));
    int16x8_t v125 = vpmaxq_s16(v124, v124);
    int16x8_t v126 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v127 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v128 = vpmaxq_s16(v126, v126);
    int16x8_t v129 = vpminq_s16(v127, v127);
    int16x8_t v130 = vpmaxq_s16(v128, v128);
    int16x8_t v131 = vpminq_s16(v129, v129);
    int16x8_t v132 = vmaxq_s16(v121, v130);
    int8x16_t v133 = (int8x16_t)vminq_s16(v122, v131);
    int16x8_t v134 = vzip1q_s16(v130, v131);
    int16x8_t v135 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v134)), (int8x16_t)vceqzq_s16(v134));
    int16x8_t v136 = vpmaxq_s16(v135, v135);
    int8x16_t v137 = (int8x16_t)vmaxq_s16(vmaxq_s16(v103, v114), vmaxq_s16(v125, v136));
    int8x16_t v409 = (int8x16_t)v132;
    int16x8_t v138 = vclzq_s16(vsubq_s16(v132, (int16x8_t)v133));
    int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v34, v138);
    int8x16_t v140 = (int8x16_t)vcgtq_s16((int16x8_t)v137, (int16x8_t)v139);
    int8x16_t v141 = vbslq_s8(v140, v139, v137);
    v137.i64[0] = 0x18001800180018;
    v137.i64[1] = 0x18001800180018;
    int8x16_t v142 = vbslq_s8(v140, v137, v34);
    int16x8_t v143 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v103), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v144 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v114), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v145 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v125), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v146 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v136), (int16x8_t)v77), (int16x8_t)0);
    int8x16_t v147 = (int8x16_t)vsubq_s16((int16x8_t)v141, v143);
    int8x16_t v148 = (int8x16_t)vsubq_s16((int16x8_t)v141, v144);
    int8x16_t v149 = (int8x16_t)vsubq_s16((int16x8_t)v141, v145);
    int8x16_t v150 = (int8x16_t)vsubq_s16((int16x8_t)v141, v146);
    int8x16_t v151 = vbicq_s8(v84, (int8x16_t)vceqq_s16(vaddq_s16(v146, v145), vnegq_s16(vaddq_s16(v143, v144))));
    v84.i64[0] = 0x7000700070007;
    v84.i64[1] = 0x7000700070007;
    v152.i64[0] = 0x8000800080008;
    v152.i64[1] = 0x8000800080008;
    int8x16_t v153 = v431;
    int16x8_t v154 = (int16x8_t)vandq_s8(v83, v77);
    v155.i64[0] = 0x2000200020002;
    v155.i64[1] = 0x2000200020002;
    int16x8_t v156 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v154, v155), v34);
    int16x8_t v157 = v427;
    int16x8_t v158 = v428;
    int16x8_t v159 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v76, v152))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v152)), v156);
    int16x8_t v161 = v429;
    int16x8_t v160 = v430;
    int8x16_t v162 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v159, v427, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v141, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v142 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v151, (int16x8_t)v151)), (int16x8_t)v147, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v149, (int16x8_t)v148), (int16x8_t)v150), 3uLL))), 0);
    int v163 = (unsigned __int16)vaddvq_s16((int16x8_t)v162);
    BOOL v165 = a5 < 4 || a6 < 2;
    if (v163)
    {
      v166.i64[0] = 0x3000300030003;
      v166.i64[1] = 0x3000300030003;
      int8x16_t v415 = vbslq_s8(v162, v85, v415);
      int8x16_t v417 = vbslq_s8(v162, v86, v417);
      int8x16_t v167 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v141), v166), v142), v151);
      v168.i64[0] = 0xF000F000F000FLL;
      v168.i64[1] = 0xF000F000F000FLL;
      v166.i64[0] = -1;
      v166.i64[1] = -1;
      int8x16_t v419 = vbslq_s8(v162, v87, v419);
      int8x16_t v420 = vbslq_s8(v162, v88, v420);
      int8x16_t v421 = vbslq_s8(v162, v89, v421);
      int8x16_t v422 = vbslq_s8(v162, v90, v422);
      int8x16_t v423 = vbslq_s8(v162, v91, v423);
      int8x16_t v424 = vbslq_s8(v162, v92, v424);
      int16x8_t v157 = (int16x8_t)vbslq_s8(v162, v147, (int8x16_t)v427);
      int16x8_t v158 = (int16x8_t)vbslq_s8(v162, v148, (int8x16_t)v428);
      int16x8_t v427 = v157;
      int16x8_t v428 = v158;
      int16x8_t v161 = (int16x8_t)vbslq_s8(v162, v149, (int8x16_t)v429);
      int16x8_t v160 = (int16x8_t)vbslq_s8(v162, v150, (int8x16_t)v430);
      int16x8_t v429 = v161;
      int16x8_t v430 = v160;
      int8x16_t v433 = vbslq_s8(v162, v409, v433);
      int8x16_t v434 = vbslq_s8(v162, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v166, vsubq_s16(v168, v138)), (int16x8_t)v133), v140), v434);
      int8x16_t v153 = vbslq_s8(v162, v141, v431);
      int8x16_t v431 = v153;
      int8x16_t v432 = vbslq_s8(v162, v133, v432);
      int8x16_t v83 = vbslq_s8(v162, v167, v83);
      int8x16_t v425 = vbslq_s8(v162, (int8x16_t)vsubq_s16((int16x8_t)v425, (int16x8_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_242EA76C0)), v425);
      int8x16_t v426 = v83;
    }
    int16x8_t v169 = v413;
    int16x8_t v170 = v412;
    int16x8_t v171 = v410;
    if (!v165)
    {
      int8x16_t v182 = (int8x16_t)vsubq_s16(v11, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v172 = vsubq_s16((int16x8_t)v12, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7620));
      int16x8_t v173 = v411;
      v173.i32[3] = v12.i32[3];
      int8x16_t v174 = (int8x16_t)vsubq_s16(v410, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7590));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v411, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7630));
      int16x8_t v176 = v414;
      v176.i32[3] = v12.i32[3];
      int8x16_t v177 = (int8x16_t)vsubq_s16(v413, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7640));
      int8x16_t v178 = (int8x16_t)vsubq_s16(v414, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v179 = v408;
      v179.i32[3] = v12.i32[3];
      int8x16_t v180 = (int8x16_t)vsubq_s16(v412, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7650));
      int8x16_t v181 = (int8x16_t)v172;
      v181.i32[3] = v182.i32[0];
      v182.i32[0] = v172.i32[3];
      int8x16_t v183 = (int8x16_t)vsubq_s16(v408, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v184 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v185 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v186 = vpmaxq_s16(v184, v184);
      int16x8_t v187 = vpminq_s16(v185, v185);
      int16x8_t v188 = vpmaxq_s16(v186, v186);
      int16x8_t v189 = vpminq_s16(v187, v187);
      v190.i64[0] = 0x8000800080008000;
      v190.i64[1] = 0x8000800080008000;
      v191.i64[0] = 0x8000800080008000;
      v191.i64[1] = 0x8000800080008000;
      int16x8_t v192 = vminq_s16(v189, v191);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      v191.i64[0] = 0x10001000100010;
      v191.i64[1] = 0x10001000100010;
      int16x8_t v194 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v193)), (int8x16_t)vceqzq_s16(v193));
      int16x8_t v195 = vpmaxq_s16(v194, v194);
      int16x8_t v196 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v197 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v198 = vpmaxq_s16(v196, v196);
      int16x8_t v199 = vpminq_s16(v197, v197);
      int16x8_t v200 = vpmaxq_s16(v198, v198);
      int16x8_t v201 = vpminq_s16(v199, v199);
      int16x8_t v202 = vmaxq_s16(vmaxq_s16(v188, v190), v200);
      int16x8_t v203 = vminq_s16(v192, v201);
      int16x8_t v204 = vzip1q_s16(v200, v201);
      int16x8_t v205 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v204)), (int8x16_t)vceqzq_s16(v204));
      int16x8_t v206 = vpmaxq_s16(v205, v205);
      int16x8_t v207 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v208 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v209 = vpmaxq_s16(v207, v207);
      int16x8_t v210 = vpminq_s16(v208, v208);
      int16x8_t v211 = vpmaxq_s16(v209, v209);
      int16x8_t v212 = vpminq_s16(v210, v210);
      int16x8_t v213 = vmaxq_s16(v202, v211);
      int16x8_t v214 = vminq_s16(v203, v212);
      int16x8_t v215 = vzip1q_s16(v211, v212);
      int16x8_t v216 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v215)), (int8x16_t)vceqzq_s16(v215));
      int16x8_t v217 = vpmaxq_s16(v216, v216);
      int16x8_t v218 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v219 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v220 = vpmaxq_s16(v218, v218);
      int16x8_t v221 = vpminq_s16(v219, v219);
      int16x8_t v222 = vpmaxq_s16(v220, v220);
      int16x8_t v223 = vpminq_s16(v221, v221);
      int8x16_t v224 = (int8x16_t)vmaxq_s16(v213, v222);
      int8x16_t v225 = (int8x16_t)vminq_s16(v214, v223);
      int16x8_t v226 = vzip1q_s16(v222, v223);
      int16x8_t v227 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v226)), (int8x16_t)vceqzq_s16(v226));
      int8x16_t v228 = (int8x16_t)vpmaxq_s16(v227, v227);
      int8x16_t v229 = (int8x16_t)vmaxq_s16(vmaxq_s16(v195, v206), vmaxq_s16(v217, (int16x8_t)v228));
      int16x8_t v230 = vclzq_s16(vsubq_s16((int16x8_t)v224, (int16x8_t)v225));
      int8x16_t v231 = (int8x16_t)vsubq_s16(v191, v230);
      int8x16_t v232 = (int8x16_t)vcgtq_s16((int16x8_t)v229, (int16x8_t)v231);
      int8x16_t v233 = vbslq_s8(v232, v231, v229);
      v234.i64[0] = 0x3000300030003;
      v234.i64[1] = 0x3000300030003;
      int8x16_t v235 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v195), v234), (int16x8_t)0);
      int16x8_t v236 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v206), v234), (int16x8_t)0);
      int16x8_t v237 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v217), v234), (int16x8_t)0);
      int16x8_t v238 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, (int16x8_t)v228), v234), (int16x8_t)0);
      int8x16_t v239 = (int8x16_t)vsubq_s16((int16x8_t)v233, (int16x8_t)v235);
      int8x16_t v240 = (int8x16_t)vsubq_s16((int16x8_t)v233, v236);
      int8x16_t v241 = (int8x16_t)vsubq_s16((int16x8_t)v233, v237);
      int8x16_t v242 = (int8x16_t)vsubq_s16((int16x8_t)v233, v238);
      v228.i64[0] = 0x4000400040004;
      v228.i64[1] = 0x4000400040004;
      int8x16_t v243 = vbicq_s8(v228, (int8x16_t)vceqq_s16(vaddq_s16(v238, v237), vnegq_s16(vaddq_s16((int16x8_t)v235, v236))));
      int16x8_t v244 = (int16x8_t)vandq_s8(v231, v232);
      v231.i64[0] = 0x7000700070007;
      v231.i64[1] = 0x7000700070007;
      int16x8_t v245 = vaddq_s16(vmlaq_s16(vaddq_s16(v244, vaddq_s16((int16x8_t)v243, (int16x8_t)v243)), (int16x8_t)v239, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v241, (int16x8_t)v240), (int16x8_t)v242), 3uLL));
      v235.i64[0] = 0x8000800080008;
      v235.i64[1] = 0x8000800080008;
      int8x16_t v83 = v426;
      int16x8_t v157 = v427;
      int16x8_t v246 = (int16x8_t)vandq_s8(v426, (int8x16_t)v234);
      v247.i64[0] = 0x2000200020002;
      v247.i64[1] = 0x2000200020002;
      int16x8_t v248 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v246, (int16x8_t)v247), (int8x16_t)v191);
      int16x8_t v160 = v430;
      int8x16_t v153 = v431;
      int16x8_t v249 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v426, v235))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v235)), v248);
      int16x8_t v158 = v428;
      int16x8_t v161 = v429;
      int8x16_t v250 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v249, v427, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), v245), 0);
      if (vaddvq_s16((int16x8_t)v250))
      {
        v251.i64[0] = 0x9000900090009;
        v251.i64[1] = 0x9000900090009;
        int8x16_t v415 = vbslq_s8(v250, v182, v415);
        int8x16_t v417 = vbslq_s8(v250, v181, v417);
        v252.i64[0] = -1;
        v252.i64[1] = -1;
        int8x16_t v419 = vbslq_s8(v250, v174, v419);
        int8x16_t v420 = vbslq_s8(v250, v175, v420);
        v253.i64[0] = 0xF000F000F000FLL;
        v253.i64[1] = 0xF000F000F000FLL;
        int8x16_t v421 = vbslq_s8(v250, v177, v421);
        int8x16_t v422 = vbslq_s8(v250, v178, v422);
        int8x16_t v423 = vbslq_s8(v250, v180, v423);
        int8x16_t v424 = vbslq_s8(v250, v183, v424);
        int16x8_t v157 = (int16x8_t)vbslq_s8(v250, v239, (int8x16_t)v427);
        int16x8_t v158 = (int16x8_t)vbslq_s8(v250, v240, (int8x16_t)v428);
        int16x8_t v427 = v157;
        int16x8_t v428 = v158;
        int16x8_t v161 = (int16x8_t)vbslq_s8(v250, v241, (int8x16_t)v429);
        int16x8_t v160 = (int16x8_t)vbslq_s8(v250, v242, (int8x16_t)v430);
        int16x8_t v429 = v161;
        int16x8_t v430 = v160;
        int8x16_t v433 = vbslq_s8(v250, v224, v433);
        int8x16_t v434 = vbslq_s8(v250, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v252, vsubq_s16(v253, v230)), (int16x8_t)v225), v232), v434);
        int8x16_t v153 = vbslq_s8(v250, v233, v431);
        int8x16_t v431 = v153;
        int8x16_t v432 = vbslq_s8(v250, v225, v432);
        int8x16_t v83 = vbslq_s8(v250, vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v233), v247), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v232, v251), (int16x8_t)vmvnq_s8(v232))), v243), v426);
        int8x16_t v425 = vbslq_s8(v250, vextq_s8(v12, v12, 0xCuLL), v425);
        int8x16_t v426 = v83;
      }
    }
    int16x8_t v254 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v157));
    int8x16_t v416 = (int8x16_t)vaddq_s16(v254, (int16x8_t)v415);
    int8x16_t v418 = (int8x16_t)vaddq_s16((int16x8_t)v417, v254);
    int16x8_t v255 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v158));
    int8x16_t v419 = (int8x16_t)vaddq_s16((int16x8_t)v419, v255);
    int8x16_t v420 = (int8x16_t)vaddq_s16((int16x8_t)v420, v255);
    int16x8_t v256 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v161));
    int8x16_t v421 = (int8x16_t)vaddq_s16((int16x8_t)v421, v256);
    int8x16_t v422 = (int8x16_t)vaddq_s16((int16x8_t)v422, v256);
    int8x16_t v257 = vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v160));
    int8x16_t v423 = (int8x16_t)vaddq_s16((int16x8_t)v423, (int16x8_t)v257);
    int8x16_t v424 = (int8x16_t)vaddq_s16((int16x8_t)v424, (int16x8_t)v257);
    v257.i64[0] = 0x8000800080008;
    v257.i64[1] = 0x8000800080008;
    v258.i64[0] = 0x3000300030003;
    v258.i64[1] = 0x3000300030003;
    v259.i64[0] = 0x2000200020002;
    v259.i64[1] = 0x2000200020002;
    int8x16_t v260 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v83, v258), v259);
    v259.i64[0] = 0x10001000100010;
    v259.i64[1] = 0x10001000100010;
    int16x8_t v261 = (int16x8_t)vandq_s8(v260, (int8x16_t)v259);
    v259.i64[0] = 0x7000700070007;
    v259.i64[1] = 0x7000700070007;
    int16x8_t v262 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v153, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v83, v257))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v257)), v261), v157, v259), vshlq_n_s16(vaddq_s16(v161, vaddq_s16(v158, v160)), 3uLL));
    if ((unint64_t)(vpaddq_s16(v262, v262).i16[0] - 591) < 0xFFFFFFFFFFFFFD78)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 80;
    }
    else
    {
      int16x8_t v263 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v264 = 8 * (a1 & 7);
      if (v264) {
        uint64_t v265 = *v263 & ~(-1 << v264);
      }
      else {
        uint64_t v265 = 0;
      }
      *a2 = 0;
      uint64_t v267 = ((v153.i16[0] << 10) + 15360) & 0x3C00;
      if (!v153.i16[0]) {
        uint64_t v267 = 0;
      }
      if (v153.i16[1]) {
        uint64_t v268 = ((v153.u16[1] << 14) + 245760) & 0x3C000;
      }
      else {
        uint64_t v268 = 0;
      }
      unint64_t v269 = v267 | v268 | v83.i8[0] & 0x1F | (32 * (v83.i8[2] & 0x1Fu));
      unint64_t v270 = v425.u32[0];
      uint64_t v271 = (v269 << v264) | v265;
      if (v264 >= 0x2E)
      {
        *int16x8_t v263 = v271;
        uint64_t v271 = v269 >> (-8 * (a1 & 7u));
      }
      unint64_t v272 = (v264 + 18) & 0x3A;
      uint64_t v273 = v271 | (v270 << v272);
      if (v272 >= 0x20)
      {
        *(void *)((char *)v263 + (((v264 + 18) >> 3) & 8)) = v273;
        uint64_t v273 = v270 >> -(char)v272;
      }
      unint64_t v274 = v264 + 50;
      int8x16_t v275 = (int8x16_t)vsubq_s16((int16x8_t)v431, v427);
      int8x16_t v276 = (int8x16_t)vsubq_s16((int16x8_t)v431, v428);
      int8x16_t v277 = (int8x16_t)vsubq_s16((int16x8_t)v431, v429);
      int8x16_t v278 = (int8x16_t)vsubq_s16((int16x8_t)v431, v430);
      *(uint8x8_t *)v275.i8 = vqmovn_u16((uint16x8_t)v275);
      *(uint8x8_t *)v276.i8 = vqmovn_u16((uint16x8_t)v276);
      *(uint8x8_t *)v277.i8 = vqmovn_u16((uint16x8_t)v277);
      *(uint8x8_t *)v278.i8 = vqmovn_u16((uint16x8_t)v278);
      v278.i64[0] = vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)vzip1q_s8(v275, v276), (int16x8_t)vzip1q_s8(v277, v278)), (int32x4_t)vzip1q_s16((int16x8_t)vtrn2q_s8(v275, v276), (int16x8_t)vtrn2q_s8(v277, v278))).u64[0];
      v276.i64[0] = 0x202020202020202;
      v276.i64[1] = 0x202020202020202;
      int8x16_t v279 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v426.i8, (int8x8_t)0x4000400040004)))), v276);
      v276.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v276.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v277.i64[0] = -1;
      v277.i64[1] = -1;
      uint8x16_t v280 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v277, (uint8x16_t)vorrq_s8(v279, v276)), (int8x16_t)v278.u64[0]);
      int16x8_t v281 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v279.i8);
      uint16x8_t v282 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v280.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v281)), (int16x8_t)vmovl_high_u8(v280));
      uint16x8_t v283 = (uint16x8_t)vpaddq_s16(v281, (int16x8_t)vmovl_high_u8((uint8x16_t)v279));
      int32x4_t v284 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v283.i8);
      int32x4_t v285 = (int32x4_t)vmovl_high_u16(v283);
      int32x4_t v286 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v282.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v284)), (int32x4_t)vshlq_u32(vmovl_high_u16(v282), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v285)));
      int32x4_t v287 = vpaddq_s32(v284, v285);
      v288.i64[0] = v286.u32[0];
      v288.i64[1] = v286.u32[1];
      uint64x2_t v289 = (uint64x2_t)v288;
      v288.i64[0] = v286.u32[2];
      v288.i64[1] = v286.u32[3];
      uint64x2_t v290 = (uint64x2_t)v288;
      v288.i64[0] = v287.u32[0];
      v288.i64[1] = v287.u32[1];
      int64x2_t v291 = v288;
      v288.i64[0] = v287.u32[2];
      v288.i64[1] = v287.u32[3];
      int64x2_t v292 = vpaddq_s64((int64x2_t)vshlq_u64(v289, (uint64x2_t)vzip1q_s64((int64x2_t)0, v291)), (int64x2_t)vshlq_u64(v290, (uint64x2_t)vzip1q_s64((int64x2_t)0, v288)));
      int64x2_t v293 = vpaddq_s64(v291, v288);
      uint64_t v294 = (v264 + 50) & 0x3A;
      unint64_t v295 = (v292.i64[0] << v294) | v273;
      if ((unint64_t)(v293.i64[0] + v294) >= 0x40)
      {
        *(void *)((char *)v263 + ((v274 >> 3) & 8)) = v295;
        unint64_t v295 = (unint64_t)v292.i64[0] >> -(char)v294;
      }
      unint64_t v296 = v293.i64[0] + v274;
      unint64_t v297 = v295 | (v292.i64[1] << v296);
      if ((v296 & 0x3F) + v293.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v296 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v297;
        unint64_t v297 = (unint64_t)v292.i64[1] >> -(v296 & 0x3F);
        if ((v296 & 0x3F) == 0) {
          unint64_t v297 = 0;
        }
      }
      unint64_t v298 = v296 + v293.i64[1];
      v299.i64[0] = 0x8000800080008;
      v299.i64[1] = 0x8000800080008;
      v300.i64[0] = -1;
      v300.i64[1] = -1;
      int16x8_t v301 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v426, v299), (int8x16_t)0, 0xCuLL), v431);
      v302.i64[0] = 0xF000F000F000FLL;
      v302.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v303 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v300, (uint16x8_t)vaddq_s16(v301, v302)), v434);
      int32x4_t v304 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v301.i8);
      int32x4_t v305 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v303.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v304)), (int32x4_t)vmovl_high_u16(v303));
      int32x4_t v306 = vpaddq_s32(v304, (int32x4_t)vmovl_high_u16((uint16x8_t)v301));
      v307.i64[0] = v305.u32[0];
      v307.i64[1] = v305.u32[1];
      uint64x2_t v308 = (uint64x2_t)v307;
      v307.i64[0] = v305.u32[2];
      v307.i64[1] = v305.u32[3];
      uint64x2_t v309 = (uint64x2_t)v307;
      v307.i64[0] = v306.u32[0];
      v307.i64[1] = v306.u32[1];
      int64x2_t v310 = v307;
      v307.i64[0] = v306.u32[2];
      v307.i64[1] = v306.u32[3];
      int64x2_t v311 = vpaddq_s64((int64x2_t)vshlq_u64(v308, (uint64x2_t)vzip1q_s64((int64x2_t)0, v310)), (int64x2_t)vshlq_u64(v309, (uint64x2_t)vzip1q_s64((int64x2_t)0, v307)));
      int64x2_t v312 = vpaddq_s64(v310, v307);
      unint64_t v313 = (v311.i64[0] << v298) | v297;
      if (v312.i64[0] + (v298 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v298 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v313;
        unint64_t v313 = (unint64_t)v311.i64[0] >> -(v298 & 0x3F);
        if ((v298 & 0x3F) == 0) {
          unint64_t v313 = 0;
        }
      }
      unint64_t v314 = v312.i64[0] + v298;
      unint64_t v315 = v313 | (v311.i64[1] << v314);
      if ((v314 & 0x3F) + v312.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v314 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v315;
        unint64_t v315 = (unint64_t)v311.i64[1] >> -(v314 & 0x3F);
        if ((v314 & 0x3F) == 0) {
          unint64_t v315 = 0;
        }
      }
      unint64_t v316 = v314 + v312.i64[1];
      int16x8_t v317 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v427, 0xCuLL);
      v318.i64[0] = 0xF000F000F000FLL;
      v318.i64[1] = 0xF000F000F000FLL;
      v319.i64[0] = -1;
      v319.i64[1] = -1;
      uint16x8_t v320 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v319, (uint16x8_t)vaddq_s16(v317, v318)), v416);
      int32x4_t v321 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v317.i8);
      int32x4_t v322 = (int32x4_t)vmovl_high_u16((uint16x8_t)v317);
      int32x4_t v323 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v320.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v321)), (int32x4_t)vshlq_u32(vmovl_high_u16(v320), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v322)));
      int32x4_t v324 = vpaddq_s32(v321, v322);
      v325.i64[0] = v323.u32[0];
      v325.i64[1] = v323.u32[1];
      uint64x2_t v326 = (uint64x2_t)v325;
      v325.i64[0] = v323.u32[2];
      v325.i64[1] = v323.u32[3];
      uint64x2_t v327 = (uint64x2_t)v325;
      v325.i64[0] = v324.u32[0];
      v325.i64[1] = v324.u32[1];
      int64x2_t v328 = v325;
      v325.i64[0] = v324.u32[2];
      v325.i64[1] = v324.u32[3];
      int64x2_t v329 = vpaddq_s64((int64x2_t)vshlq_u64(v326, (uint64x2_t)vzip1q_s64((int64x2_t)0, v328)), (int64x2_t)vshlq_u64(v327, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)));
      int64x2_t v330 = vpaddq_s64(v328, v325);
      unint64_t v331 = (v329.i64[0] << v316) | v315;
      if (v330.i64[0] + (v316 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v316 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v331;
        unint64_t v331 = (unint64_t)v329.i64[0] >> -(v316 & 0x3F);
        if ((v316 & 0x3F) == 0) {
          unint64_t v331 = 0;
        }
      }
      unint64_t v332 = v330.i64[0] + v316;
      unint64_t v333 = v331 | (v329.i64[1] << v332);
      if ((v332 & 0x3F) + v330.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v332 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v333;
        unint64_t v333 = (unint64_t)v329.i64[1] >> -(v332 & 0x3F);
        if ((v332 & 0x3F) == 0) {
          unint64_t v333 = 0;
        }
      }
      unint64_t v334 = v332 + v330.i64[1];
      v335.i64[0] = 0xF000F000F000FLL;
      v335.i64[1] = 0xF000F000F000FLL;
      v336.i64[0] = -1;
      v336.i64[1] = -1;
      uint16x8_t v337 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v336, (uint16x8_t)vaddq_s16(v427, v335)), v418);
      int32x4_t v338 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v427.i8);
      int32x4_t v339 = (int32x4_t)vmovl_high_u16((uint16x8_t)v427);
      int32x4_t v340 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v337.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v338)), (int32x4_t)vshlq_u32(vmovl_high_u16(v337), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v339)));
      int32x4_t v341 = vpaddq_s32(v338, v339);
      v342.i64[0] = v340.u32[0];
      v342.i64[1] = v340.u32[1];
      uint64x2_t v343 = (uint64x2_t)v342;
      v342.i64[0] = v340.u32[2];
      v342.i64[1] = v340.u32[3];
      uint64x2_t v344 = (uint64x2_t)v342;
      v342.i64[0] = v341.u32[0];
      v342.i64[1] = v341.u32[1];
      int64x2_t v345 = v342;
      v342.i64[0] = v341.u32[2];
      v342.i64[1] = v341.u32[3];
      int64x2_t v346 = vpaddq_s64((int64x2_t)vshlq_u64(v343, (uint64x2_t)vzip1q_s64((int64x2_t)0, v345)), (int64x2_t)vshlq_u64(v344, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)));
      int64x2_t v347 = vpaddq_s64(v345, v342);
      unint64_t v348 = (v346.i64[0] << v334) | v333;
      if (v347.i64[0] + (v334 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v334 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        if ((v334 & 0x3F) != 0) {
          unint64_t v348 = (unint64_t)v346.i64[0] >> -(v334 & 0x3F);
        }
        else {
          unint64_t v348 = 0;
        }
      }
      uint64_t v349 = v347.i64[1];
      unint64_t v350 = v347.i64[0] + v334;
      uint64_t v351 = (v347.i64[0] + v334) & 0x3F;
      unint64_t v352 = v348 | (v346.i64[1] << v350);
      if ((unint64_t)(v351 + v347.i64[1]) >= 0x40)
      {
        *(void *)((char *)v263 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
        unint64_t v352 = (unint64_t)v346.i64[1] >> -(char)v351;
        if (!v351) {
          unint64_t v352 = 0;
        }
      }
      uint64_t v353 = 0;
      v354.i64[0] = 0xF000F000F000FLL;
      v354.i64[1] = 0xF000F000F000FLL;
      v355.i64[0] = -1;
      v355.i64[1] = -1;
      unint64_t v356 = v350 + v349;
      char v357 = 1;
      do
      {
        char v358 = v357;
        uint16x8_t v359 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v355, (uint16x8_t)vaddq_s16(v428, v354)), *(&v419 + v353));
        int32x4_t v360 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v428.i8);
        int32x4_t v361 = (int32x4_t)vmovl_high_u16((uint16x8_t)v428);
        int32x4_t v362 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v359.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v360)), (int32x4_t)vshlq_u32(vmovl_high_u16(v359), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v361)));
        int32x4_t v363 = vpaddq_s32(v360, v361);
        v364.i64[0] = v362.u32[0];
        v364.i64[1] = v362.u32[1];
        uint64x2_t v365 = (uint64x2_t)v364;
        v364.i64[0] = v362.u32[2];
        v364.i64[1] = v362.u32[3];
        uint64x2_t v366 = (uint64x2_t)v364;
        v364.i64[0] = v363.u32[0];
        v364.i64[1] = v363.u32[1];
        int64x2_t v367 = v364;
        v364.i64[0] = v363.u32[2];
        v364.i64[1] = v363.u32[3];
        int64x2_t v368 = vpaddq_s64((int64x2_t)vshlq_u64(v365, (uint64x2_t)vzip1q_s64((int64x2_t)0, v367)), (int64x2_t)vshlq_u64(v366, (uint64x2_t)vzip1q_s64((int64x2_t)0, v364)));
        int64x2_t v369 = vpaddq_s64(v367, v364);
        unint64_t v370 = (v368.i64[0] << v356) | v352;
        if (v369.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v370;
          unint64_t v370 = (unint64_t)v368.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v370 = 0;
          }
        }
        unint64_t v371 = v369.i64[0] + v356;
        unint64_t v352 = v370 | (v368.i64[1] << v371);
        if ((v371 & 0x3F) + v369.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v371 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v368.i64[1] >> -(v371 & 0x3F);
          if ((v371 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v357 = 0;
        unint64_t v356 = v371 + v369.i64[1];
        uint64_t v353 = 1;
      }
      while ((v358 & 1) != 0);
      uint64_t v372 = 0;
      char v373 = 1;
      v374.i64[0] = 0xF000F000F000FLL;
      v374.i64[1] = 0xF000F000F000FLL;
      v375.i64[0] = -1;
      v375.i64[1] = -1;
      do
      {
        char v376 = v373;
        uint16x8_t v377 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v375, (uint16x8_t)vaddq_s16(v429, v374)), *(&v421 + v372));
        int32x4_t v378 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v429.i8);
        int32x4_t v379 = (int32x4_t)vmovl_high_u16((uint16x8_t)v429);
        int32x4_t v380 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v377.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v378)), (int32x4_t)vshlq_u32(vmovl_high_u16(v377), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v379)));
        int32x4_t v381 = vpaddq_s32(v378, v379);
        v382.i64[0] = v380.u32[0];
        v382.i64[1] = v380.u32[1];
        uint64x2_t v383 = (uint64x2_t)v382;
        v382.i64[0] = v380.u32[2];
        v382.i64[1] = v380.u32[3];
        uint64x2_t v384 = (uint64x2_t)v382;
        v382.i64[0] = v381.u32[0];
        v382.i64[1] = v381.u32[1];
        int64x2_t v385 = v382;
        v382.i64[0] = v381.u32[2];
        v382.i64[1] = v381.u32[3];
        int64x2_t v386 = vpaddq_s64((int64x2_t)vshlq_u64(v383, (uint64x2_t)vzip1q_s64((int64x2_t)0, v385)), (int64x2_t)vshlq_u64(v384, (uint64x2_t)vzip1q_s64((int64x2_t)0, v382)));
        int64x2_t v387 = vpaddq_s64(v385, v382);
        unint64_t v388 = (v386.i64[0] << v356) | v352;
        if (v387.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v388;
          unint64_t v388 = (unint64_t)v386.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v388 = 0;
          }
        }
        unint64_t v389 = v387.i64[0] + v356;
        unint64_t v352 = v388 | (v386.i64[1] << v389);
        if ((v389 & 0x3F) + v387.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v389 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v386.i64[1] >> -(v389 & 0x3F);
          if ((v389 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v373 = 0;
        unint64_t v356 = v389 + v387.i64[1];
        uint64_t v372 = 1;
      }
      while ((v376 & 1) != 0);
      uint64_t v390 = 0;
      char v391 = 1;
      v392.i64[0] = 0xF000F000F000FLL;
      v392.i64[1] = 0xF000F000F000FLL;
      v393.i64[0] = -1;
      v393.i64[1] = -1;
      do
      {
        char v394 = v391;
        uint16x8_t v395 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v393, (uint16x8_t)vaddq_s16(v430, v392)), *(&v423 + v390));
        int32x4_t v396 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v430.i8);
        int32x4_t v397 = (int32x4_t)vmovl_high_u16((uint16x8_t)v430);
        int32x4_t v398 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v395.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v396)), (int32x4_t)vshlq_u32(vmovl_high_u16(v395), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v397)));
        int32x4_t v399 = vpaddq_s32(v396, v397);
        v400.i64[0] = v398.u32[0];
        v400.i64[1] = v398.u32[1];
        uint64x2_t v401 = (uint64x2_t)v400;
        v400.i64[0] = v398.u32[2];
        v400.i64[1] = v398.u32[3];
        uint64x2_t v402 = (uint64x2_t)v400;
        v400.i64[0] = v399.u32[0];
        v400.i64[1] = v399.u32[1];
        int64x2_t v403 = v400;
        v400.i64[0] = v399.u32[2];
        v400.i64[1] = v399.u32[3];
        int64x2_t v404 = vpaddq_s64((int64x2_t)vshlq_u64(v401, (uint64x2_t)vzip1q_s64((int64x2_t)0, v403)), (int64x2_t)vshlq_u64(v402, (uint64x2_t)vzip1q_s64((int64x2_t)0, v400)));
        int64x2_t v405 = vpaddq_s64(v403, v400);
        unint64_t v406 = (v404.i64[0] << v356) | v352;
        if (v405.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v406;
          unint64_t v406 = (unint64_t)v404.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v406 = 0;
          }
        }
        unint64_t v407 = v405.i64[0] + v356;
        unint64_t v352 = v406 | (v404.i64[1] << v407);
        if ((v407 & 0x3F) + v405.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v407 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v404.i64[1] >> -(v407 & 0x3F);
          if ((v407 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v391 = 0;
        unint64_t v356 = v407 + v405.i64[1];
        uint64_t v390 = 1;
      }
      while ((v394 & 1) != 0);
      if ((v356 & 0x3F) != 0) {
        *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
      }
      unint64_t result = (v356 - v264 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a3;
    *a2 = 3;
    return 4;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblock(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v11 = a6;
  if (a5 > 1)
  {
    uint64_t v21 = a5 & 0xFE;
    if (a5 == v21)
    {
      uint64_t v22 = 0;
      int16x8_t v23 = (int *)(a3 + 4);
      int16x8_t v24 = &v72;
      do
      {
        int16x8_t v25 = v24;
        int16x8_t v26 = v23;
        uint64_t v27 = a5;
        do
        {
          int v28 = *v26;
          *((_DWORD *)v25 - 4) = *(v26 - 1);
          *(_DWORD *)int16x8_t v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 2;
        }
        while (v27);
        ++v22;
        int16x8_t v23 = (int *)((char *)v23 + a4);
        int16x8_t v24 = (long long *)((char *)v24 + 4);
      }
      while (v22 != a6);
    }
    else
    {
      uint64_t v29 = 0;
      int16x8_t v30 = (int *)(a3 + 4);
      int16x8_t v31 = &v72;
      int16x8_t v32 = (char *)&v71 + ((16 * a5) & 0xFE0);
      do
      {
        int16x8_t v33 = v31;
        int8x16_t v34 = v30;
        uint64_t v35 = a5 & 0xFE;
        do
        {
          int v36 = *v34;
          *((_DWORD *)v33 - 4) = *(v34 - 1);
          *(_DWORD *)int16x8_t v33 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 2;
        }
        while (v35);
        int16x8_t v37 = (int *)(a3 + v29 * a4 + 4 * v21);
        int16x8_t v38 = v32;
        uint64_t v39 = a5 - v21;
        do
        {
          int v40 = *v37++;
          *int16x8_t v38 = v40;
          v38 += 4;
          --v39;
        }
        while (v39);
        ++v29;
        int16x8_t v30 = (int *)((char *)v30 + a4);
        int16x8_t v31 = (long long *)((char *)v31 + 4);
        v32 += 4;
      }
      while (v29 != v11);
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v12 = a6 & 0xFE;
    int16x8_t v13 = (int *)(a3 + 1);
    int16x8_t v14 = (_DWORD *)&v71 + 1;
    uint64_t v15 = v12;
    do
    {
      int v16 = *(int *)((char *)v13 - 1);
      int v17 = *v13;
      int16x8_t v13 = (int *)((char *)v13 + 2);
      *(v14 - 1) = v16;
      _DWORD *v14 = v17;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v12 != a6)
    {
LABEL_7:
      uint64_t v18 = a6 - v12;
      int16x8_t v19 = (_DWORD *)&v71 + v12;
      int16x8_t v20 = (_DWORD *)(a3 + v12 * a4);
      do
      {
        *v19++ = *v20;
        int16x8_t v20 = (_DWORD *)((char *)v20 + a4);
        --v18;
      }
      while (v18);
    }
  }
  int v55 = (unsigned __int16)v71;
  int v56 = WORD1(v71);
  int v57 = (unsigned __int16)v72;
  int v58 = WORD1(v72);
  int v59 = WORD2(v71);
  int v60 = WORD3(v71);
  int v61 = WORD2(v72);
  int v62 = WORD3(v72);
  int v63 = (unsigned __int16)v73;
  int v64 = WORD1(v73);
  int v65 = (unsigned __int16)v74;
  int v66 = WORD1(v74);
  int v67 = WORD2(v73);
  int v68 = WORD3(v73);
  if (a5 >= 4) {
    unsigned int v41 = 4;
  }
  else {
    unsigned int v41 = a5;
  }
  if (a5 >= 4) {
    unsigned int v42 = a5 - 4;
  }
  else {
    unsigned int v42 = 0;
  }
  int v69 = WORD2(v74);
  int v70 = WORD3(v74);
  if (a6 >= 2) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = a6;
  }
  if (a6 >= 2) {
    unsigned int v44 = a6 - 2;
  }
  else {
    unsigned int v44 = 0;
  }
  char v45 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1, (uint64_t)&v55, a7, v41, v43);
  int v55 = WORD4(v71);
  int v56 = WORD5(v71);
  int v57 = WORD4(v72);
  int v58 = WORD5(v72);
  int v59 = WORD6(v71);
  int v60 = HIWORD(v71);
  int v61 = WORD6(v72);
  int v62 = HIWORD(v72);
  int v63 = WORD4(v73);
  int v64 = WORD5(v73);
  int v65 = WORD4(v74);
  int v66 = WORD5(v74);
  int v67 = WORD6(v73);
  int v68 = HIWORD(v73);
  int v69 = WORD6(v74);
  int v70 = HIWORD(v74);
  if (a6 >= 4) {
    unsigned int v46 = 2;
  }
  else {
    unsigned int v46 = v44;
  }
  int v47 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 20, (uint64_t)&v55, a7, v41, v46);
  int v55 = (unsigned __int16)v75;
  int v56 = WORD1(v75);
  int v57 = (unsigned __int16)v76;
  int v58 = WORD1(v76);
  int v59 = WORD2(v75);
  int v60 = WORD3(v75);
  int v61 = WORD2(v76);
  int v62 = WORD3(v76);
  int v63 = (unsigned __int16)v77;
  int v64 = WORD1(v77);
  int v65 = (unsigned __int16)v78;
  int v66 = WORD1(v78);
  int v67 = WORD2(v77);
  int v68 = WORD3(v77);
  if (a5 >= 8) {
    unsigned int v48 = 4;
  }
  else {
    unsigned int v48 = v42;
  }
  int v69 = WORD2(v78);
  int v70 = WORD3(v78);
  int v49 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 40, (uint64_t)&v55, a7, v48, v43);
  int v55 = WORD4(v75);
  int v56 = WORD5(v75);
  int v57 = WORD4(v76);
  int v58 = WORD5(v76);
  int v59 = WORD6(v75);
  int v60 = HIWORD(v75);
  int v61 = WORD6(v76);
  int v62 = HIWORD(v76);
  int v63 = WORD4(v77);
  int v64 = WORD5(v77);
  int v65 = WORD4(v78);
  int v66 = WORD5(v78);
  int v67 = WORD6(v77);
  int v68 = HIWORD(v77);
  int v69 = WORD6(v78);
  int v70 = HIWORD(v78);
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(a1 + 60, (uint64_t)&v55, a7, v48, v46);
  if (v49) {
    char v51 = 4;
  }
  else {
    char v51 = 0;
  }
  if (v47) {
    char v52 = 2;
  }
  else {
    char v52 = 0;
  }
  if (result) {
    char v53 = -8;
  }
  else {
    char v53 = -16;
  }
  *a2 = v53 | v51 | v45 | v52;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v259 = *MEMORY[0x263EF8340];
  BOOL v7 = a5 < 2;
  BOOL v8 = a4 < 4 || a5 < 2;
  BOOL v224 = v8;
  BOOL v9 = a4 < 4 || a5 == 0;
  BOOL v223 = v9;
  BOOL v10 = a4 < 3 || a5 < 2;
  BOOL v222 = v10;
  BOOL v11 = a4 < 3 || a5 == 0;
  BOOL v221 = v11;
  if (a4) {
    BOOL v12 = a5 < 2;
  }
  else {
    BOOL v12 = 1;
  }
  if (a4 < 2) {
    BOOL v7 = 1;
  }
  BOOL v219 = v7;
  BOOL v220 = v12;
  BOOL v13 = a4 < 2 || a5 == 0;
  BOOL v218 = v13;
  do
  {
    uint64_t v14 = 0;
    char v15 = v5;
    unsigned int v16 = AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)3>::compBits[v6];
    *(&v257 + v6) = v16;
    switch(v16)
    {
      case 2u:
        uint64_t v14 = 5;
        break;
      case 0xAu:
        uint64_t v14 = 1;
        break;
      case 0xCu:
        uint64_t v14 = 2;
        break;
      case 0x10u:
        uint64_t v14 = 3;
        break;
      case 0x20u:
        uint64_t v14 = 4;
        break;
      default:
        break;
    }
    uint64_t v17 = v6;
    *(unsigned int *)((char *)&v235 + v17 * 4) = v14;
    unsigned int v18 = 1 << (v16 - 1);
    v234[v17 + 2] = v18;
    int16x8_t v19 = (unsigned int *)(a2 + 4 * v6);
    if (a3 == 1)
    {
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      if ((*v19 ^ v18) == 1) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = *v19 ^ v18;
      }
      *uint64_t v21 = v20;
      if ((v19[2] ^ v18) == 1) {
        unsigned int v22 = 0;
      }
      else {
        unsigned int v22 = v19[2] ^ v18;
      }
      v21[2] = v22;
      if ((v19[4] ^ v18) == 1) {
        unsigned int v23 = 0;
      }
      else {
        unsigned int v23 = v19[4] ^ v18;
      }
      v21[4] = v23;
      if ((v19[6] ^ v18) == 1) {
        unsigned int v24 = 0;
      }
      else {
        unsigned int v24 = v19[6] ^ v18;
      }
      v21[6] = v24;
      if ((v19[8] ^ v18) == 1) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = v19[8] ^ v18;
      }
      v21[8] = v25;
      if ((v19[10] ^ v18) == 1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v19[10] ^ v18;
      }
      v21[10] = v26;
      unsigned int v27 = v19[12] ^ v18;
      if (v27 == 1) {
        unsigned int v27 = 0;
      }
      v21[12] = v27;
      unsigned int v28 = v19[14] ^ v18;
      if (v28 == 1) {
        unsigned int v28 = 0;
      }
    }
    else if (a3 == 3)
    {
      unsigned int v20 = *v19 ^ v18;
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      *uint64_t v21 = v20;
      unsigned int v22 = v19[2] ^ v18;
      v21[2] = v22;
      unsigned int v23 = v19[4] ^ v18;
      v21[4] = v23;
      unsigned int v24 = v19[6] ^ v18;
      v21[6] = v24;
      unsigned int v25 = v19[8] ^ v18;
      v21[8] = v25;
      unsigned int v26 = v19[10] ^ v18;
      v21[10] = v26;
      unsigned int v27 = v19[12] ^ v18;
      v21[12] = v27;
      unsigned int v28 = v19[14] ^ v18;
    }
    else
    {
      unsigned int v20 = *v19;
      uint64_t v21 = (unsigned int *)((char *)&v238 + v17 * 4);
      *uint64_t v21 = *v19;
      unsigned int v22 = v19[2];
      v21[2] = v22;
      unsigned int v23 = v19[4];
      v21[4] = v23;
      unsigned int v24 = v19[6];
      v21[6] = v24;
      unsigned int v25 = v19[8];
      v21[8] = v25;
      unsigned int v26 = v19[10];
      v21[10] = v26;
      unsigned int v27 = v19[12];
      v21[12] = v27;
      unsigned int v28 = v19[14];
    }
    v21[14] = v28;
    uint64_t v29 = &v256[v17 + 2];
    v256[v6 + 2] = v20;
    v256[v6 + 4] = v20;
    v256[v6] = 0;
    if (v218)
    {
      unsigned int v30 = v20;
      if (v220) {
        goto LABEL_58;
      }
    }
    else
    {
      unsigned int v30 = v20;
      if (v22 < v20)
      {
        v256[v6] = 1;
        v256[v6 + 4] = v22;
        unsigned int v30 = v22;
      }
      if (v20 >= v22) {
        int16x8_t v31 = &v256[v17 + 2];
      }
      else {
        int16x8_t v31 = (unsigned int *)(&v240 + v6);
      }
      unsigned int v20 = *v31;
      *uint64_t v29 = *v31;
      if (v220)
      {
LABEL_58:
        if (v219) {
          goto LABEL_59;
        }
        goto LABEL_76;
      }
    }
    if (v23 < v30)
    {
      v256[v6] = 2;
      v256[v6 + 4] = v23;
      unsigned int v30 = v23;
    }
    if (v20 >= v23) {
      int16x8_t v32 = &v256[v17 + 2];
    }
    else {
      int16x8_t v32 = (unsigned int *)(&v242 + v6);
    }
    unsigned int v20 = *v32;
    *uint64_t v29 = *v32;
    if (v219)
    {
LABEL_59:
      if (v221) {
        goto LABEL_60;
      }
      goto LABEL_82;
    }
LABEL_76:
    if (v24 < v30)
    {
      v256[v6] = 3;
      v256[v6 + 4] = v24;
      unsigned int v30 = v24;
    }
    if (v20 >= v24) {
      int16x8_t v33 = &v256[v17 + 2];
    }
    else {
      int16x8_t v33 = (unsigned int *)(&v244 + v6);
    }
    unsigned int v20 = *v33;
    *uint64_t v29 = *v33;
    if (v221)
    {
LABEL_60:
      if (v223) {
        goto LABEL_61;
      }
      goto LABEL_88;
    }
LABEL_82:
    if (v25 < v30)
    {
      v256[v6] = 4;
      v256[v6 + 4] = v25;
      unsigned int v30 = v25;
    }
    if (v20 >= v25) {
      int8x16_t v34 = &v256[v17 + 2];
    }
    else {
      int8x16_t v34 = (unsigned int *)(&v246 + v6);
    }
    unsigned int v20 = *v34;
    *uint64_t v29 = *v34;
    if (v223)
    {
LABEL_61:
      if (v222) {
        goto LABEL_62;
      }
      goto LABEL_94;
    }
LABEL_88:
    if (v26 < v30)
    {
      v256[v6] = 5;
      v256[v6 + 4] = v26;
      unsigned int v30 = v26;
    }
    if (v20 >= v26) {
      uint64_t v35 = &v256[v17 + 2];
    }
    else {
      uint64_t v35 = (unsigned int *)(&v248 + v6);
    }
    unsigned int v20 = *v35;
    *uint64_t v29 = *v35;
    if (v222)
    {
LABEL_62:
      if (v224) {
        goto LABEL_106;
      }
LABEL_100:
      if (v28 < v30)
      {
        v256[v6] = 7;
        v256[v6 + 4] = v28;
        unsigned int v30 = v28;
      }
      if (v20 >= v28) {
        int16x8_t v37 = &v256[v17 + 2];
      }
      else {
        int16x8_t v37 = (unsigned int *)(&v252 + v6);
      }
      unsigned int v20 = *v37;
      *uint64_t v29 = *v37;
      goto LABEL_106;
    }
LABEL_94:
    if (v27 < v30)
    {
      v256[v6] = 6;
      v256[v6 + 4] = v27;
      unsigned int v30 = v27;
    }
    if (v20 >= v27) {
      int v36 = &v256[v17 + 2];
    }
    else {
      int v36 = (unsigned int *)(&v250 + v6);
    }
    unsigned int v20 = *v36;
    *uint64_t v29 = *v36;
    if (!v224) {
      goto LABEL_100;
    }
LABEL_106:
    unsigned int v38 = __clz(v20 - v30);
    unsigned int v39 = 32 - v38;
    int v40 = 1;
    switch(v16)
    {
      case 2u:
        BOOL v41 = v38 == 31;
        goto LABEL_118;
      case 8u:
        break;
      case 0xAu:
        if (v38 - 29 < 3) {
          unsigned int v39 = 3;
        }
        goto LABEL_122;
      case 0xCu:
        if ((v38 & 0x3C) == 0x1C) {
          unsigned int v39 = 4;
        }
        int v40 = -2;
        break;
      case 0x10u:
        BOOL v41 = v20 == 0xFFFF && v38 == 31;
LABEL_118:
        if (v41) {
          unsigned int v39 = 2;
        }
        goto LABEL_122;
      case 0x20u:
        unsigned int v39 = (v39 & 1) + (v39 >> 1);
LABEL_122:
        int v40 = -1;
        break;
      default:
        int v40 = 0;
        break;
    }
    unsigned int v42 = (v39 + v40) & ~((int)(v39 + v40) >> 31);
    if (v20 == v30 && v16 - 8 <= 4 && v42 <= 2)
    {
      if (v30) {
        unsigned int v42 = v30 != ~(-1 << v16) || v16 > 0xB;
      }
      else {
        unsigned int v42 = 0;
      }
    }
    *(&v254 + v6) = v42;
    if ((a3 | 2) == 3)
    {
      BOOL v43 = 0;
      if (v20 >= v18 && v30 < v18) {
        BOOL v43 = kDQuadParamTable[160 * v14 + 8 + 10 * v42] == 0;
      }
    }
    else
    {
      BOOL v43 = 0;
    }
    if (v42 >= kDquadTransition[v14] || v43)
    {
      unsigned int v44 = kDQuadParamTable[160 * v14 + 4 + 10 * v42]
          - v43
          + *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
            + 4 * v14
            + 2);
      if (v43) {
        int v45 = 0;
      }
      else {
        int v45 = -2;
      }
      BOOL v50 = v16 >= v44;
      unsigned int v46 = v16 - v44;
      BOOL v72 = v46 != 0 && v50;
      int v47 = v30 & ~(-1 << v46);
      if (!v72) {
        int v47 = 0;
      }
      int v48 = v47 + v45;
      unsigned int v49 = __clz(v48 + v20 - v30);
      BOOL v50 = v48 < 1 || v49 >= v38;
      if (v50)
      {
        if (v16 != 32) {
          goto LABEL_22;
        }
      }
      else
      {
        *(&v254 + v6) = ++v42;
        if (v16 != 32) {
          goto LABEL_22;
        }
      }
      if (kDquadMaxMode[v14] < v42) {
        unsigned int v42 = kDquadMaxMode[v14];
      }
      *(&v254 + v6) = v42;
    }
LABEL_22:
    char v5 = 1;
    uint64_t v6 = 1u;
  }
  while ((v15 & 1) == 0);
  uint64_t v51 = v235;
  uint64_t v52 = v236;
  unsigned int v54 = v254;
  unsigned int v53 = v255;
  BOOL v56 = v255 >= v254;
  BOOL v57 = v255 < v254;
  int v58 = kDQuadParamTable[160 * v236 + 6 + 10 * v255];
  int v232 = kDQuadParamTable[160 * v235 + 6 + 10 * v254];
  int v55 = v232;
  int v233 = v58;
  v234[0] = v232;
  v234[1] = v58;
  if (*(&v254 + v56) == *(&v254 + v57))
  {
    int v59 = v232;
  }
  else
  {
    int v60 = *(_DWORD *)((unint64_t)v234 | (4 * v57));
    int v59 = v232;
    if (v60 >= 1)
    {
      *(_DWORD *)((unint64_t)&v232 | (4 * v57)) = 0;
      *(_DWORD *)((unint64_t)&v232 | (4 * v56)) += v60;
      int v59 = v232;
    }
  }
  if (a4) {
    BOOL v61 = a5 == 0;
  }
  else {
    BOOL v61 = 1;
  }
  int v62 = v61;
  int v217 = v62;
  int v63 = &kDQuadParamTable[160 * v51 + 10 * v54];
  unint64_t v64 = *((void *)v63 + 1);
  int v65 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v51
        + 2);
  int v66 = v63[4];
  LODWORD(v63) = v63[5];
  unsigned int v67 = v66 + v65;
  unsigned int v230 = v67;
  unsigned int v68 = v63 + v65;
  unsigned int v228 = v68;
  int v69 = v59 - v55;
  if (v69 < 0)
  {
    if (kDQuadParamTable[160 * v51 + 7 + 10 * v54] < -v69)
    {
      unsigned int v228 = --v68;
      if (!kDQuadParamTable[160 * v51 + 8 + 10 * v54])
      {
        int v70 = -1;
LABEL_167:
        unsigned int v230 = v70 + v67;
      }
    }
  }
  else if (v69)
  {
    v68 += v69;
    unsigned int v228 = v68;
    int v70 = v69;
    goto LABEL_167;
  }
  BOOL v72 = v51 == 5 && v54 == 1 && v69 < 2;
  int v73 = v72;
  if (a3 == 4)
  {
    if (v51 == 3) {
      int v74 = 31744;
    }
    else {
      int v74 = 0;
    }
    if (v51 == 4) {
      int v75 = 2139095040;
    }
    else {
      int v75 = v74;
    }
    int v76 = 1 << (v257 - 1);
    if (v217)
    {
      if (v218) {
        goto LABEL_188;
      }
LABEL_336:
      if ((v75 & ~v240) == 0 || v240 == v76) {
        int v73 = 1;
      }
      if (!v220) {
        goto LABEL_343;
      }
LABEL_189:
      if (v219) {
        goto LABEL_190;
      }
LABEL_350:
      if ((v75 & ~v244) == 0 || v244 == v76) {
        int v73 = 1;
      }
      if (!v221) {
        goto LABEL_357;
      }
LABEL_191:
      if (v223) {
        goto LABEL_192;
      }
LABEL_364:
      if ((v75 & ~v248) == 0 || v248 == v76) {
        int v73 = 1;
      }
      if (!v222) {
        goto LABEL_371;
      }
LABEL_193:
      if (!v224) {
        goto LABEL_194;
      }
    }
    else
    {
      if ((v75 & ~v238) == 0 || v238 == v76) {
        int v73 = 1;
      }
      if (!v218) {
        goto LABEL_336;
      }
LABEL_188:
      if (v220) {
        goto LABEL_189;
      }
LABEL_343:
      if ((v75 & ~v242) == 0 || v242 == v76) {
        int v73 = 1;
      }
      if (!v219) {
        goto LABEL_350;
      }
LABEL_190:
      if (v221) {
        goto LABEL_191;
      }
LABEL_357:
      if ((v75 & ~v246) == 0 || v246 == v76) {
        int v73 = 1;
      }
      if (!v223) {
        goto LABEL_364;
      }
LABEL_192:
      if (v222) {
        goto LABEL_193;
      }
LABEL_371:
      if ((v75 & ~v250) == 0 || v250 == v76) {
        int v73 = 1;
      }
      if (!v224)
      {
LABEL_194:
        if ((v75 & ~v252) == 0 || v252 == v76) {
          int v73 = 1;
        }
      }
    }
  }
  BOOL v72 = v64 >> v68 > 0x40;
  int v78 = v217;
  if (v72) {
    int v78 = 1;
  }
  int v79 = v78 | v73;
  int16x8_t v80 = &kDQuadParamTable[160 * v52 + 10 * v53];
  unint64_t v81 = *((void *)v80 + 1);
  int v82 = *((_DWORD *)&AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)2>::getDquadExtraBitScale(AGX::AppleCompressionGen2::DQuadFmtId)::kDQuadBitTable
        + 4 * v52
        + 2);
  int v83 = v80[4];
  LODWORD(v80) = v80[5];
  unsigned int v84 = v83 + v82;
  unsigned int v231 = v84;
  unsigned int v85 = v80 + v82;
  unsigned int v229 = v85;
  int v86 = v233 - v58;
  if (v233 - v58 < 0)
  {
    if (kDQuadParamTable[160 * v52 + 7 + 10 * v53] < v58 - v233)
    {
      unsigned int v229 = --v85;
      if (!kDQuadParamTable[160 * v52 + 8 + 10 * v53])
      {
        int v87 = -1;
LABEL_206:
        unsigned int v231 = v87 + v84;
      }
    }
  }
  else if (v233 != v58)
  {
    v85 += v86;
    unsigned int v229 = v85;
    int v87 = v233 - v58;
    goto LABEL_206;
  }
  if (v52 == 5 && v53 == 1 && v86 < 2) {
    int v79 = 1;
  }
  if (a3 == 4)
  {
    if (v52 == 3) {
      int v88 = 31744;
    }
    else {
      int v88 = 0;
    }
    if (v52 == 4) {
      int v88 = 2139095040;
    }
    int v89 = 1 << (v258 - 1);
    if (v217)
    {
      if (v218) {
        goto LABEL_221;
      }
LABEL_386:
      if ((v88 & ~v241) == 0 || v241 == v89) {
        int v79 = 1;
      }
      if (!v220) {
        goto LABEL_393;
      }
LABEL_222:
      if (v219) {
        goto LABEL_223;
      }
LABEL_400:
      if ((v88 & ~v245) == 0 || v245 == v89) {
        int v79 = 1;
      }
      if (!v221) {
        goto LABEL_407;
      }
LABEL_224:
      if (v223) {
        goto LABEL_225;
      }
LABEL_414:
      if ((v88 & ~v249) == 0 || v249 == v89) {
        int v79 = 1;
      }
      if (!v222) {
        goto LABEL_421;
      }
LABEL_226:
      if (!v224) {
        goto LABEL_227;
      }
    }
    else
    {
      if ((v88 & ~v239) == 0 || v239 == v89) {
        int v79 = 1;
      }
      if (!v218) {
        goto LABEL_386;
      }
LABEL_221:
      if (v220) {
        goto LABEL_222;
      }
LABEL_393:
      if ((v88 & ~v243) == 0 || v243 == v89) {
        int v79 = 1;
      }
      if (!v219) {
        goto LABEL_400;
      }
LABEL_223:
      if (v221) {
        goto LABEL_224;
      }
LABEL_407:
      if ((v88 & ~v247) == 0 || v247 == v89) {
        int v79 = 1;
      }
      if (!v223) {
        goto LABEL_414;
      }
LABEL_225:
      if (v222) {
        goto LABEL_226;
      }
LABEL_421:
      if ((v88 & ~v251) == 0 || v251 == v89) {
        int v79 = 1;
      }
      if (!v224)
      {
LABEL_227:
        if ((v88 & ~v253) == 0 || v253 == v89) {
          int v79 = 1;
        }
      }
    }
  }
  char v91 = 0;
  uint64_t v92 = 0;
  BOOL v72 = v81 >> v85 > 0x40;
  int v93 = v217;
  if (v72) {
    int v93 = 1;
  }
  int v214 = v93;
  int v215 = v79;
  uint64_t v227 = 0;
  uint64_t v226 = 0;
  memset(v225, 0, sizeof(v225));
  do
  {
    uint64_t v94 = 0;
    unsigned int v95 = 0;
    unsigned int v96 = *(&v257 + v92);
    if (v96 >= *(&v230 + v92)) {
      unsigned int v97 = *(&v230 + v92);
    }
    else {
      unsigned int v97 = *(&v257 + v92);
    }
    *(&v230 + v92) = v97;
    int16x8_t v98 = &kDQuadParamTable[160 * *(&v235 + v92) + 10 * *(&v254 + v92)];
    if (v98[5]) {
      unsigned int v99 = v96;
    }
    else {
      unsigned int v99 = 0;
    }
    if (v99 >= *(&v228 + v92)) {
      unsigned int v99 = *(&v228 + v92);
    }
    int v100 = v256[v92 + 4] & (-1 << (v96 - v97));
    int16x8_t v101 = &v238 + v92;
    int v102 = *v101 - v100;
    uint64_t v103 = 32 * v92;
    int16x8_t v104 = &v237[32 * v92];
    if (v217) {
      int v102 = 0;
    }
    int v105 = v101[2] - v100;
    if (v218) {
      int v105 = 0;
    }
    *int16x8_t v104 = v102;
    v104[1] = v105;
    int v106 = v101[4] - v100;
    if (v220) {
      int v106 = 0;
    }
    int v107 = v101[6] - v100;
    if (v219) {
      int v107 = 0;
    }
    v104[2] = v106;
    v104[3] = v107;
    int v108 = v101[8] - v100;
    if (v221) {
      int v108 = 0;
    }
    int v109 = v101[10] - v100;
    if (v223) {
      int v109 = 0;
    }
    v104[4] = v108;
    v104[5] = v109;
    int v110 = v101[12] - v100;
    if (v222) {
      int v110 = 0;
    }
    int v111 = v101[14] - v100;
    if (v224) {
      int v111 = 0;
    }
    v104[6] = v110;
    v104[7] = v111;
    char v112 = v91;
    *(&v228 + v92) = v99;
    unint64_t v113 = *((void *)v98 + 1);
    *((_DWORD *)&v227 + v92) = v100;
    unint64_t v114 = v113 >> v99;
    int v115 = ~(-1 << v96);
    if (v114 <= 1) {
      unint64_t v116 = 1;
    }
    else {
      unint64_t v116 = v114;
    }
    uint64_t v117 = 2 * v256[v92];
    do
    {
      if (v117 != v94)
      {
        if (v99) {
          unint64_t v118 = *(unsigned int *)&v237[v103] / v116;
        }
        else {
          LODWORD(v118) = 0;
        }
        int16x8_t v119 = (int *)v225 + 7 * v92 + v95;
        *int16x8_t v119 = v118;
        if (v114 >= 2)
        {
          unint64_t v120 = *(unsigned int *)&v237[v103];
          if (v120)
          {
            if (v120 / v116 * v116 == v120 && ((v120 / v116) & 1) != 0)
            {
              if (v100 || v118 != 1)
              {
                if ((a3 | 2) != 3
                  || (uint64_t v122 = v101[v94], v123 = v234[v92 + 2], v122 != v123)
                  && ((a3 | 2) != 3 || v116 + v123 != v122))
                {
                  LODWORD(v118) = v118 - 1;
                  *int16x8_t v119 = v118;
                }
              }
              else
              {
                LODWORD(v118) = 1;
              }
            }
          }
        }
        if ((unint64_t)v118 >> v99 || v101[v94] == v115) {
          *int16x8_t v119 = ~(-1 << v99);
        }
        if (*((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v94 + 1) >= a5
          || *((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v94) >= a4)
        {
          *int16x8_t v119 = 0;
        }
        ++v95;
      }
      v103 += 4;
      v94 += 2;
    }
    while (v94 != 16);
    char v91 = 1;
    uint64_t v92 = 1;
  }
  while ((v112 & 1) == 0);
  int16x8_t v125 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v126 = 8 * (a1 & 7);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if ((v214 | v215) == 1)
  {
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    unsigned int v129 = v257;
    unsigned int v130 = v258;
    uint64_t v131 = v257 - 6;
    uint64_t v132 = v258 - 6;
    uint64_t v133 = 8 * (a1 & 7);
    while (1)
    {
      int16x8_t v134 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v127;
      BOOL v135 = v134[1] >= a5 || *v134 >= a4;
      char v136 = v135;
      if (v135)
      {
        unint64_t v137 = 0;
        if (v131 > 0x100) {
          goto LABEL_315;
        }
      }
      else
      {
        unint64_t v137 = (unint64_t)*(&v238 + 2 * v127) >> 6;
        if (v131 > 0x100) {
          goto LABEL_315;
        }
      }
      if (v129 != 6 && (unint64_t)(v133 - v126 + (v128 << 6) + v131) <= 0xA0)
      {
        uint64_t v138 = 0;
        unint64_t v139 = v129 - 6;
        do
        {
          unint64_t v140 = 64 - v133;
          if (64 - v133 >= v139) {
            unint64_t v140 = v139;
          }
          v125[v128] |= ((v137 >> v138) & ~(-1 << v140)) << v133;
          v138 += v140;
          unint64_t v141 = v140 + v133;
          v128 += v141 >> 6;
          uint64_t v133 = v141 & 0x3F;
          v139 -= v140;
        }
        while (v139);
      }
LABEL_315:
      if (v136)
      {
        unint64_t v142 = 0;
        if (v132 <= 0x100) {
          goto LABEL_319;
        }
      }
      else
      {
        unint64_t v142 = (unint64_t)*(&v238 + 2 * v127 + 1) >> 6;
        if (v132 <= 0x100)
        {
LABEL_319:
          if (v130 != 6 && (unint64_t)(v133 - v126 + (v128 << 6) + v132) <= 0xA0)
          {
            uint64_t v143 = 0;
            unint64_t v144 = v130 - 6;
            do
            {
              unint64_t v145 = 64 - v133;
              if (64 - v133 >= v144) {
                unint64_t v145 = v144;
              }
              v125[v128] |= ((v142 >> v143) & ~(-1 << v145)) << v133;
              v143 += v145;
              unint64_t v146 = v145 + v133;
              v128 += v146 >> 6;
              uint64_t v133 = v146 & 0x3F;
              v144 -= v145;
            }
            while (v144);
          }
        }
      }
      if (++v127 == 8) {
        return v214 | v215;
      }
    }
  }
  unsigned int v148 = v254;
  unsigned int v147 = v255;
  unint64_t v149 = ((unint64_t)(v254 & 0xF) << v126) | *v125;
  *int16x8_t v125 = v149;
  uint64_t v150 = v126 | 4;
  if ((v126 | 4uLL) - v126 - 157 < 0xFFFFFFFFFFFFFF5FLL)
  {
    unint64_t v151 = 0;
    unsigned int v152 = v257;
    if (!v148) {
      goto LABEL_430;
    }
    goto LABEL_434;
  }
  *int16x8_t v125 = ((unint64_t)(v147 & 0xF) << v150) | v149;
  unint64_t v151 = (unint64_t)(v126 + 8) >> 6;
  uint64_t v150 = (v126 + 8) & 0x38;
  unsigned int v152 = v257;
  if (v148) {
    goto LABEL_434;
  }
LABEL_430:
  if (v152 == 2 || v152 >= 0x10)
  {
LABEL_434:
    unsigned int v169 = v230;
    if (v230 <= 0x100 && v230 && v150 - v126 + (v151 << 6) + v230 <= 0xA0)
    {
      uint64_t v170 = 0;
      unint64_t v171 = v227 >> (v152 - v230);
      unint64_t v172 = v230;
      do
      {
        unint64_t v173 = 64 - v150;
        if (64 - v150 >= v172) {
          unint64_t v173 = v172;
        }
        v125[v151] |= ((v171 >> v170) & ~(-1 << v173)) << v150;
        v170 += v173;
        unint64_t v174 = v173 + v150;
        v151 += v174 >> 6;
        uint64_t v150 = v174 & 0x3F;
        v172 -= v173;
      }
      while (v172);
    }
    int v167 = v169 + 8;
    unsigned int v168 = v258;
    if (v147) {
      goto LABEL_442;
    }
LABEL_495:
    if (v168 == 2 || v168 >= 0x10) {
      goto LABEL_442;
    }
  }
  else
  {
    int v167 = 8;
    unsigned int v168 = v258;
    if (!v147) {
      goto LABEL_495;
    }
LABEL_442:
    unsigned int v175 = v231;
    if (v231 <= 0x100 && v231 && v150 - v126 + (v151 << 6) + v231 <= 0xA0)
    {
      uint64_t v176 = 0;
      unint64_t v177 = (HIDWORD(v227) >> (v168 - v231));
      unint64_t v178 = v231;
      do
      {
        unint64_t v179 = 64 - v150;
        if (64 - v150 >= v178) {
          unint64_t v179 = v178;
        }
        v125[v151] |= ((v177 >> v176) & ~(-1 << v179)) << v150;
        v176 += v179;
        unint64_t v180 = v179 + v150;
        v151 += v180 >> 6;
        uint64_t v150 = v180 & 0x3F;
        v178 -= v179;
      }
      while (v178);
    }
    v167 += v175;
  }
  unint64_t v181 = v228;
  if (v228)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0xA0)
    {
      uint64_t v182 = 0;
      unint64_t v183 = v256[0];
      unint64_t v184 = 3;
      do
      {
        unint64_t v185 = 64 - v150;
        if (64 - v150 >= v184) {
          unint64_t v185 = v184;
        }
        v125[v151] |= ((v183 >> v182) & ~(-1 << v185)) << v150;
        v182 += v185;
        unint64_t v186 = v185 + v150;
        v151 += v186 >> 6;
        uint64_t v150 = v186 & 0x3F;
        v184 -= v185;
      }
      while (v184);
    }
    v167 += 3;
  }
  unint64_t v187 = v229;
  if (v229)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0xA0)
    {
      uint64_t v188 = 0;
      unint64_t v189 = v256[1];
      unint64_t v190 = 3;
      do
      {
        unint64_t v191 = 64 - v150;
        if (64 - v150 >= v190) {
          unint64_t v191 = v190;
        }
        v125[v151] |= ((v189 >> v188) & ~(-1 << v191)) << v150;
        v188 += v191;
        unint64_t v192 = v191 + v150;
        v151 += v192 >> 6;
        uint64_t v150 = v192 & 0x3F;
        v190 -= v191;
      }
      while (v190);
    }
    v167 += 3;
  }
  unsigned int v193 = 160 - v167;
  unsigned int v194 = (160 - v167) / 7u;
  unint64_t v195 = v193 % 7;
  if ((v195 - 257) >= 0xFFFFFF00 && v150 - v126 + (v151 << 6) + v195 <= 0xA0)
  {
    do
    {
      unint64_t v196 = 64 - v150;
      if (64 - v150 >= v195) {
        unint64_t v196 = v195;
      }
      unint64_t v197 = v196 + v150;
      v151 += v197 >> 6;
      uint64_t v150 = v197 & 0x3F;
      v195 -= v196;
    }
    while (v195);
  }
  uint64_t v198 = 0;
  int v199 = v187 + v181;
  while (2)
  {
    if (v181 && v181 <= 0x100 && v150 - v126 + (v151 << 6) + v181 <= 0xA0)
    {
      uint64_t v200 = 0;
      unint64_t v201 = *((unsigned int *)v225 + v198);
      unint64_t v202 = v181;
      do
      {
        unint64_t v203 = 64 - v150;
        if (64 - v150 >= v202) {
          unint64_t v203 = v202;
        }
        v125[v151] |= ((v201 >> v200) & ~(-1 << v203)) << v150;
        v200 += v203;
        unint64_t v204 = v203 + v150;
        v151 += v204 >> 6;
        uint64_t v150 = v204 & 0x3F;
        v202 -= v203;
      }
      while (v202);
    }
    if (v187)
    {
      if (v187 <= 0x100 && v150 - v126 + (v151 << 6) + v187 <= 0xA0)
      {
        uint64_t v205 = 0;
        unint64_t v206 = *((unsigned int *)&v225[1] + v198 + 3);
        unint64_t v207 = v187;
        do
        {
          unint64_t v208 = 64 - v150;
          if (64 - v150 >= v207) {
            unint64_t v208 = v207;
          }
          v125[v151] |= ((v206 >> v205) & ~(-1 << v208)) << v150;
          v205 += v208;
          unint64_t v209 = v208 + v150;
          v151 += v209 >> 6;
          uint64_t v150 = v209 & 0x3F;
          v207 -= v208;
        }
        while (v207);
      }
      unint64_t v210 = v194 - v199;
      if (v194 != v199)
      {
LABEL_488:
        if (v210 <= 0x100 && v150 - v126 + (v151 << 6) + v210 <= 0xA0)
        {
          do
          {
            unint64_t v211 = 64 - v150;
            if (64 - v150 >= v210) {
              unint64_t v211 = v210;
            }
            unint64_t v212 = v211 + v150;
            v151 += v212 >> 6;
            uint64_t v150 = v212 & 0x3F;
            v210 -= v211;
          }
          while (v210);
        }
      }
    }
    else
    {
      unint64_t v210 = v194 - v181;
      if (v194 != v181) {
        goto LABEL_488;
      }
    }
    if (++v198 != 7) {
      continue;
    }
    return v214 | v215;
  }
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = 8 * (a1 & 7);
  unsigned int v7 = a3 & 0xFFFFFFFD;
  int v8 = ((a3 & 0xFFFFFFFD) == 1) << 15;
  uint64_t result = -1;
  uint64_t v10 = v6;
  do
  {
    if ((unint64_t)(v10 - v6 + (v4 << 6) - 151) >= 0xFFFFFFFFFFFFFF5FLL)
    {
      __int16 v16 = 0;
      uint64_t v17 = 0;
      unint64_t v18 = 10;
      do
      {
        unint64_t v19 = 64 - v10;
        if (64 - v10 >= v18) {
          unint64_t v19 = v18;
        }
        v16 |= (unint64_t)((*(void *)(v5 + 8 * v4) >> v10) & ~(-1 << v19)) << v17;
        v17 += v19;
        unint64_t v20 = v19 + v10;
        v4 += v20 >> 6;
        uint64_t v10 = v20 & 0x3F;
        v18 -= v19;
      }
      while (v18);
    }
    else
    {
      __int16 v16 = 0;
    }
    int v21 = (v16 & 0x3FF) << 6;
    if (a3 != 4)
    {
      BOOL v26 = v21 == 0x8000 && v7 == 1;
      if (!v26 && v21)
      {
        if (v21 == 65472) {
          int v21 = 0xFFFF;
        }
        else {
          v21 |= 32 - (v16 & 1);
        }
      }
    }
    *(_DWORD *)(a2 + 8 * v3) = v21 ^ v8;
    if ((unint64_t)(v10 - v6 + (v4 << 6) - 151) < 0xFFFFFFFFFFFFFF5FLL)
    {
      __int16 v11 = 0;
    }
    else
    {
      __int16 v11 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = 10;
      do
      {
        unint64_t v24 = 64 - v10;
        if (64 - v10 >= v23) {
          unint64_t v24 = v23;
        }
        v11 |= (unint64_t)((*(void *)(v5 + 8 * v4) >> v10) & ~(-1 << v24)) << v22;
        v22 += v24;
        unint64_t v25 = v24 + v10;
        v4 += v25 >> 6;
        uint64_t v10 = v25 & 0x3F;
        v23 -= v24;
      }
      while (v23);
    }
    int v12 = (v11 & 0x3FF) << 6;
    int v13 = (32 - (v11 & 1)) | v12;
    if (v12 == 65472) {
      int v13 = 0xFFFF;
    }
    if (v12 == 0x8000 && v7 == 1 || v12 == 0) {
      int v13 = v12;
    }
    if (a3 == 4) {
      int v13 = v12;
    }
    *(_DWORD *)(a2 + 8 * v3++ + 4) = v13 ^ v8;
  }
  while (v3 != 8);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = 8 * (a1 & 7);
  unint64_t v5 = *(void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = v5 >> v4;
  uint64_t v7 = (v5 >> v4) & 0xF;
  uint64_t v8 = (v5 >> (v4 | 4u)) & 0xF;
  if ((v4 | 4uLL) - v4 - 157 >= 0xFFFFFFFFFFFFFF5FLL) {
    uint64_t v9 = (v4 + 8) & 0x38;
  }
  else {
    uint64_t v9 = (8 * (a1 & 7)) | 4;
  }
  if ((v4 | 4uLL) - v4 - 157 >= 0xFFFFFFFFFFFFFF5FLL) {
    unint64_t v10 = (unint64_t)(v4 + 8) >> 6;
  }
  else {
    unint64_t v10 = 0;
  }
  if ((v4 | 4uLL) - v4 - 157 >= 0xFFFFFFFFFFFFFF5FLL) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v182 = 0x1000000010;
  v184[0] = v7;
  v184[1] = v11;
  uint64_t v183 = 0x300000003;
  int v12 = v6 & 0xF;
  int v13 = dword_242EA9908[10 * (v6 & 0xF) + 6];
  int v14 = v13;
  BOOL v15 = v11 >= v7;
  BOOL v16 = v11 < v7;
  int v17 = dword_242EA9908[10 * v11 + 6];
  int v179 = v13;
  int v180 = v17;
  v181[0] = v13;
  v181[1] = v17;
  if (v184[v15] != v184[v16])
  {
    int v18 = *(_DWORD *)((unint64_t)v181 | (4 * v16));
    if (v18 >= 1)
    {
      *(_DWORD *)((unint64_t)&v179 | (4 * v16)) = 0;
      *(_DWORD *)((unint64_t)&v179 | (4 * v15)) += v18;
      int v14 = v179;
    }
  }
  unint64_t v19 = &kDQuadParamTable[10 * v12];
  LODWORD(v20) = v19[484] + 2;
  int v21 = v19[485];
  unsigned int v22 = v21 + 2;
  int v23 = v14 - v13;
  if (v23 < 0)
  {
    if (kDQuadParamTable[10 * v12 + 487] >= -v23) {
      goto LABEL_19;
    }
    unsigned int v22 = v21 + 1;
    if (kDQuadParamTable[10 * v12 + 488]) {
      goto LABEL_19;
    }
    int v23 = -1;
  }
  else
  {
    if (!v23) {
      goto LABEL_19;
    }
    v22 += v23;
  }
  LODWORD(v20) = v23 + v20;
LABEL_19:
  if (v20 >= 0x10) {
    uint64_t v20 = 16;
  }
  else {
    uint64_t v20 = v20;
  }
  v178[0] = v20;
  LODWORD(v24) = 16 * (v21 != 0);
  if (v24 >= v22) {
    unint64_t v24 = v22;
  }
  else {
    unint64_t v24 = v24;
  }
  v177[0] = v24;
  unint64_t v25 = &kDQuadParamTable[10 * v11];
  unsigned int v26 = v25[484] + 2;
  int v27 = v25[485];
  unsigned int v28 = v27 + 2;
  int v29 = v180 - v17;
  if (v29 < 0)
  {
    if (kDQuadParamTable[10 * v11 + 487] < -v29)
    {
      unsigned int v28 = v27 + 1;
      if (!kDQuadParamTable[10 * v11 + 488])
      {
        int v29 = -1;
        goto LABEL_28;
      }
    }
  }
  else if (v29)
  {
    v28 += v29;
LABEL_28:
    v26 += v29;
  }
  int v30 = 0;
  if (v26 >= 0x10) {
    uint64_t v31 = 16;
  }
  else {
    uint64_t v31 = v26;
  }
  v178[1] = v31;
  LODWORD(v32) = 16 * (v27 != 0);
  if (v32 >= v28) {
    unint64_t v32 = v28;
  }
  else {
    unint64_t v32 = v32;
  }
  v177[1] = v32;
  unint64_t v33 = v9 - v4 + (v10 << 6);
  if (v20 && v33 + v20 <= 0xA0)
  {
    int v30 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = v20;
    do
    {
      unint64_t v36 = 64 - v9;
      if (64 - v9 >= v35) {
        unint64_t v36 = v35;
      }
      v30 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v36)) << v34;
      v34 += v36;
      unint64_t v37 = v36 + v9;
      v10 += v37 >> 6;
      uint64_t v9 = v37 & 0x3F;
      v35 -= v36;
    }
    while (v35);
    unint64_t v33 = v9 - v4 + (v10 << 6);
  }
  int v38 = 0;
  v176[0] = v30 << (16 - v20);
  int v39 = v20 + 8;
  if (v31 && v33 + v31 <= 0xA0)
  {
    int v38 = 0;
    uint64_t v40 = 0;
    unint64_t v41 = v31;
    do
    {
      unint64_t v42 = 64 - v9;
      if (64 - v9 >= v41) {
        unint64_t v42 = v41;
      }
      v38 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v42)) << v40;
      v40 += v42;
      unint64_t v43 = v42 + v9;
      v10 += v43 >> 6;
      uint64_t v9 = v43 & 0x3F;
      v41 -= v42;
    }
    while (v41);
  }
  v176[1] = v38 << (16 - v31);
  int v44 = v31 + v39;
  uint64_t v175 = 0;
  if (v24)
  {
    if (v9 - v4 + (v10 << 6) + 3 <= 0xA0)
    {
      int v45 = 0;
      uint64_t v46 = 0;
      unint64_t v47 = 3;
      do
      {
        unint64_t v48 = 64 - v9;
        if (64 - v9 >= v47) {
          unint64_t v48 = v47;
        }
        v45 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v48)) << v46;
        v46 += v48;
        unint64_t v49 = v48 + v9;
        v10 += v49 >> 6;
        uint64_t v9 = v49 & 0x3F;
        v47 -= v48;
      }
      while (v47);
    }
    else
    {
      int v45 = 0;
    }
    LODWORD(v175) = v45;
    v44 += 3;
  }
  if (v32)
  {
    if (v9 - v4 + (v10 << 6) + 3 <= 0xA0)
    {
      int v50 = 0;
      uint64_t v51 = 0;
      unint64_t v52 = 3;
      do
      {
        unint64_t v53 = 64 - v9;
        if (64 - v9 >= v52) {
          unint64_t v53 = v52;
        }
        v50 |= (unint64_t)((*(void *)(v3 + 8 * v10) >> v9) & ~(-1 << v53)) << v51;
        v51 += v53;
        unint64_t v54 = v53 + v9;
        v10 += v54 >> 6;
        uint64_t v9 = v54 & 0x3F;
        v52 -= v53;
      }
      while (v52);
    }
    else
    {
      int v50 = 0;
    }
    HIDWORD(v175) = v50;
    v44 += 3;
  }
  uint64_t v55 = 0;
  unsigned int v56 = a3 & 0xFFFFFFFD;
  int v57 = 160 - v44;
  unsigned int v58 = (((37 * (-96 - v44)) >> 8)
       + (((-96 - v44 - ((unsigned __int16)(37 * (-96 - v44)) >> 8)) & 0xFE) >> 1)) >> 2;
  unint64_t v59 = (v9 | (v10 << 6)) + -7 * v58 + v57;
  uint64_t v174 = 0;
  memset(v173, 0, sizeof(v173));
  do
  {
    unint64_t v61 = v59 >> 6;
    unint64_t v62 = v59 & 0x3F;
    if (v24)
    {
      if (v62 - v4 + (v59 & 0xFFFFFFFFFFFFFFC0) + v24 <= 0xA0)
      {
        int v63 = 0;
        uint64_t v64 = 0;
        unint64_t v65 = v24;
        do
        {
          unint64_t v66 = 64 - v62;
          if (64 - v62 >= v65) {
            unint64_t v66 = v65;
          }
          v63 |= (unint64_t)((*(void *)(v3 + 8 * v61) >> v62) & ~(-1 << v66)) << v64;
          v64 += v66;
          unint64_t v67 = v66 + v62;
          v61 += v67 >> 6;
          unint64_t v62 = v67 & 0x3F;
          v65 -= v66;
        }
        while (v65);
      }
      else
      {
        int v63 = 0;
      }
      *((_DWORD *)v173 + v55) = v63;
    }
    if (v32)
    {
      if (v62 - v4 + (v61 << 6) + v32 <= 0xA0)
      {
        int v68 = 0;
        uint64_t v69 = 0;
        unint64_t v70 = v32;
        do
        {
          unint64_t v71 = 64 - v62;
          if (64 - v62 >= v70) {
            unint64_t v71 = v70;
          }
          v68 |= (unint64_t)((*(void *)(v3 + 8 * v61) >> v62) & ~(-1 << v71)) << v69;
          v69 += v71;
          unint64_t v72 = v71 + v62;
          v61 += v72 >> 6;
          unint64_t v62 = v72 & 0x3F;
          v70 -= v71;
        }
        while (v70);
      }
      else
      {
        int v68 = 0;
      }
      *((_DWORD *)&v173[1] + v55 + 3) = v68;
      int v60 = v32 + v24;
    }
    else
    {
      int v60 = v24;
    }
    unint64_t v59 = (v62 | (v61 << 6)) + v58 - v60;
    ++v55;
  }
  while (v55 != 7);
  char v73 = 0;
  uint64_t v74 = 0;
  uint64_t result = 1;
  do
  {
    char v80 = v73;
    unint64_t v81 = *(void *)&kDQuadParamTable[160 * v184[v74 - 2] + 2 + 10 * v184[v74]];
    int v82 = v177[v74];
    if (v81 >> v82 <= 1) {
      unint64_t v83 = 1;
    }
    else {
      unint64_t v83 = v81 >> v82;
    }
    int v84 = *((_DWORD *)&v182 + v74);
    unint64_t v85 = v83 >> 1;
    if (v83 >> 1 >= (unint64_t)(1 << (v84 - v178[v74])) >> 1) {
      unint64_t v86 = (unint64_t)(1 << (v84 - v178[v74])) >> 1;
    }
    else {
      unint64_t v86 = v83 >> 1;
    }
    unint64_t v87 = (1 << (v84 - 1));
    unint64_t v88 = v176[v74];
    unint64_t v89 = v87 - v88;
    unint64_t v90 = 1 << v84;
    int v91 = (1 << v84) - 1;
    if (v88) {
      unint64_t v92 = v86;
    }
    else {
      unint64_t v92 = 0;
    }
    BOOL v93 = v88 == v87;
    BOOL v94 = v84 == 16;
    if (v84 == 16) {
      unint64_t v95 = 31744;
    }
    else {
      unint64_t v95 = 2139095040;
    }
    if (v84 == 16) {
      unint64_t v96 = 64512;
    }
    else {
      unint64_t v96 = 4286578688;
    }
    unint64_t v97 = 2143289344;
    if (v94) {
      unint64_t v97 = 32256;
    }
    unint64_t v98 = 4290772992;
    if (v94) {
      unint64_t v98 = 65024;
    }
    unint64_t v99 = (v96 - 1);
    if (v82)
    {
      unint64_t v100 = v81 + v88;
      uint64_t v101 = ~(-1 << v82);
      int v102 = v176[v74 - 2];
      unint64_t v103 = v89 / v83;
      if (!v102)
      {
        uint64_t v111 = 0;
        unint64_t v106 = v92;
        BOOL v105 = v88 == v87;
        goto LABEL_150;
      }
      uint64_t v104 = *((unsigned int *)v173 + 7 * v74);
      BOOL v105 = v103 == v104;
      if (v88 | v104)
      {
        if (v100 >= v90 && v104 == v101)
        {
          uint64_t v111 = 1;
          unint64_t v106 = v90 - 1;
          goto LABEL_150;
        }
        unint64_t v106 = v85 + v83 * v104;
      }
      else
      {
        unint64_t v106 = 0;
      }
      uint64_t v111 = 1;
LABEL_150:
      unint64_t v112 = v106 + v88;
      unint64_t v113 = v112;
      if (a3 == 4)
      {
        BOOL v114 = v112 < v95 || v112 >= v97;
        unint64_t v113 = (v95 - 1);
        if (v114)
        {
          BOOL v115 = v112 < v97 || v112 >= v87;
          unint64_t v113 = v87;
          if (v115)
          {
            if (v112 < v98 && v112 >= v96) {
              unint64_t v113 = (v96 - 1);
            }
            else {
              unint64_t v113 = v112;
            }
          }
        }
      }
      if (v113 >= v90) {
        int v117 = v91;
      }
      else {
        int v117 = v113;
      }
      if (v105) {
        int v118 = 0;
      }
      else {
        int v118 = v117 ^ v87;
      }
      if (v56 != 1) {
        int v118 = v117;
      }
      *(_DWORD *)(a2 + 4 * v74) = v118;
      if (v102 == 1)
      {
        unint64_t v119 = v92;
        BOOL v120 = v88 == v87;
      }
      else
      {
        uint64_t v121 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v120 = v103 == v121;
        if (v88 | v121)
        {
          if (v100 < v90 || (unint64_t v119 = v90 - 1, v121 != v101)) {
            unint64_t v119 = v85 + v83 * v121;
          }
        }
        else
        {
          unint64_t v119 = 0;
        }
        ++v111;
      }
      unint64_t v122 = v119 + v88;
      unint64_t v123 = v122;
      if (a3 == 4)
      {
        BOOL v124 = v122 < v95 || v122 >= v97;
        unint64_t v123 = (v95 - 1);
        if (v124)
        {
          BOOL v125 = v122 < v97 || v122 >= v87;
          unint64_t v123 = v87;
          if (v125)
          {
            if (v122 < v98 && v122 >= v96) {
              unint64_t v123 = (v96 - 1);
            }
            else {
              unint64_t v123 = v122;
            }
          }
        }
      }
      if (v123 >= v90) {
        int v127 = v91;
      }
      else {
        int v127 = v123;
      }
      if (v120) {
        int v128 = 0;
      }
      else {
        int v128 = v127 ^ v87;
      }
      if (v56 != 1) {
        int v128 = v127;
      }
      *(_DWORD *)(a2 + 4 * v74 + 8) = v128;
      if (v102 == 2)
      {
        unint64_t v129 = v92;
        BOOL v130 = v88 == v87;
      }
      else
      {
        uint64_t v131 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v130 = v103 == v131;
        if (v88 | v131)
        {
          if (v100 < v90 || (unint64_t v129 = v90 - 1, v131 != v101)) {
            unint64_t v129 = v85 + v83 * v131;
          }
        }
        else
        {
          unint64_t v129 = 0;
        }
        ++v111;
      }
      unint64_t v132 = v129 + v88;
      unint64_t v133 = v132;
      if (a3 == 4)
      {
        if (v132 < v95 || (unint64_t v133 = (v95 - 1), v132 >= v97))
        {
          if (v132 < v97 || (unint64_t v133 = v87, v132 >= v87))
          {
            if (v132 < v98 && v132 >= v96) {
              unint64_t v133 = (v96 - 1);
            }
            else {
              unint64_t v133 = v132;
            }
          }
        }
      }
      if (v133 >= v90) {
        int v135 = v91;
      }
      else {
        int v135 = v133;
      }
      if (v130) {
        int v136 = 0;
      }
      else {
        int v136 = v135 ^ v87;
      }
      if (v56 != 1) {
        int v136 = v135;
      }
      *(_DWORD *)(a2 + 4 * v74 + 16) = v136;
      if (v102 == 3)
      {
        unint64_t v137 = v92;
        BOOL v138 = v88 == v87;
      }
      else
      {
        uint64_t v139 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v138 = v103 == v139;
        if (v88 | v139)
        {
          if (v100 < v90 || (unint64_t v137 = v90 - 1, v139 != v101)) {
            unint64_t v137 = v85 + v83 * v139;
          }
        }
        else
        {
          unint64_t v137 = 0;
        }
        ++v111;
      }
      unint64_t v140 = v137 + v88;
      unint64_t v141 = v140;
      if (a3 == 4)
      {
        if (v140 < v95 || (unint64_t v141 = (v95 - 1), v140 >= v97))
        {
          if (v140 < v97 || (unint64_t v141 = v87, v140 >= v87))
          {
            if (v140 < v98 && v140 >= v96) {
              unint64_t v141 = (v96 - 1);
            }
            else {
              unint64_t v141 = v140;
            }
          }
        }
      }
      if (v141 >= v90) {
        int v143 = v91;
      }
      else {
        int v143 = v141;
      }
      if (v138) {
        int v144 = 0;
      }
      else {
        int v144 = v143 ^ v87;
      }
      if (v56 != 1) {
        int v144 = v143;
      }
      *(_DWORD *)(a2 + 4 * v74 + 24) = v144;
      if (v102 == 4)
      {
        unint64_t v145 = v92;
        BOOL v146 = v88 == v87;
      }
      else
      {
        uint64_t v147 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v146 = v103 == v147;
        if (v88 | v147)
        {
          if (v100 < v90 || (unint64_t v145 = v90 - 1, v147 != v101)) {
            unint64_t v145 = v85 + v83 * v147;
          }
        }
        else
        {
          unint64_t v145 = 0;
        }
        ++v111;
      }
      unint64_t v148 = v145 + v88;
      unint64_t v149 = v148;
      if (a3 == 4)
      {
        if (v148 < v95 || (unint64_t v149 = (v95 - 1), v148 >= v97))
        {
          if (v148 < v97 || (unint64_t v149 = v87, v148 >= v87))
          {
            if (v148 < v98 && v148 >= v96) {
              unint64_t v149 = (v96 - 1);
            }
            else {
              unint64_t v149 = v148;
            }
          }
        }
      }
      if (v149 >= v90) {
        int v151 = v91;
      }
      else {
        int v151 = v149;
      }
      if (v146) {
        int v152 = 0;
      }
      else {
        int v152 = v151 ^ v87;
      }
      if (v56 != 1) {
        int v152 = v151;
      }
      *(_DWORD *)(a2 + 4 * v74 + 32) = v152;
      if (v102 == 5)
      {
        unint64_t v153 = v92;
        BOOL v154 = v88 == v87;
      }
      else
      {
        uint64_t v155 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v154 = v103 == v155;
        if (v88 | v155)
        {
          if (v100 < v90 || (unint64_t v153 = v90 - 1, v155 != v101)) {
            unint64_t v153 = v85 + v83 * v155;
          }
        }
        else
        {
          unint64_t v153 = 0;
        }
        ++v111;
      }
      unint64_t v156 = v153 + v88;
      unint64_t v157 = v156;
      if (a3 == 4)
      {
        if (v156 < v95 || (unint64_t v157 = (v95 - 1), v156 >= v97))
        {
          if (v156 < v97 || (unint64_t v157 = v87, v156 >= v87))
          {
            if (v156 < v98 && v156 >= v96) {
              unint64_t v157 = (v96 - 1);
            }
            else {
              unint64_t v157 = v156;
            }
          }
        }
      }
      if (v157 >= v90) {
        int v159 = v91;
      }
      else {
        int v159 = v157;
      }
      if (v154) {
        int v160 = 0;
      }
      else {
        int v160 = v159 ^ v87;
      }
      if (v56 != 1) {
        int v160 = v159;
      }
      *(_DWORD *)(a2 + 4 * v74 + 40) = v160;
      if (v102 == 6)
      {
        unint64_t v161 = v92;
        BOOL v162 = v88 == v87;
      }
      else
      {
        uint64_t v163 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v162 = v103 == v163;
        if (v88 | v163)
        {
          if (v100 < v90 || (unint64_t v161 = v90 - 1, v163 != v101)) {
            unint64_t v161 = v85 + v83 * v163;
          }
        }
        else
        {
          unint64_t v161 = 0;
        }
        ++v111;
      }
      unint64_t v164 = v161 + v88;
      unint64_t v165 = v164;
      if (a3 == 4)
      {
        if (v164 < v95 || (unint64_t v165 = (v95 - 1), v164 >= v97))
        {
          if (v164 < v97 || (unint64_t v165 = v87, v164 >= v87))
          {
            if (v164 < v98 && v164 >= v96) {
              unint64_t v165 = (v96 - 1);
            }
            else {
              unint64_t v165 = v164;
            }
          }
        }
      }
      if (v165 >= v90) {
        int v167 = v91;
      }
      else {
        int v167 = v165;
      }
      if (v162) {
        int v168 = 0;
      }
      else {
        int v168 = v167 ^ v87;
      }
      if (v56 != 1) {
        int v168 = v167;
      }
      *(_DWORD *)(a2 + 4 * v74 + 48) = v168;
      if (v102 != 7)
      {
        uint64_t v169 = *((unsigned int *)v173 + 7 * v74 + v111);
        BOOL v93 = v103 == v169;
        if (v88 | v169)
        {
          if (v100 >= v90 && v169 == v101) {
            unint64_t v92 = v90 - 1;
          }
          else {
            unint64_t v92 = v85 + v83 * v169;
          }
        }
        else
        {
          unint64_t v92 = 0;
        }
      }
      unint64_t v170 = v92 + v88;
      unint64_t v77 = v170;
      if (a3 == 4)
      {
        if (v170 < v95 || (unint64_t v77 = (v95 - 1), v170 >= v97))
        {
          if (v170 < v97 || (unint64_t v77 = v87, v170 >= v87))
          {
            if (v170 < v98 && v170 >= v96) {
              unint64_t v77 = (v96 - 1);
            }
            else {
              unint64_t v77 = v170;
            }
          }
        }
      }
      if (v77 >= v90) {
        int v78 = v91;
      }
      else {
        int v78 = v77;
      }
      int v79 = v78 ^ v87;
      if (v93) {
        int v79 = 0;
      }
      if (v56 == 1) {
        int v78 = v79;
      }
      goto LABEL_99;
    }
    BOOL v108 = v97 <= v88 && v88 < v87;
    BOOL v110 = v88 >= v96 && v98 > v88;
    if (a3 == 4)
    {
      if (v88 < v95 || v97 <= v88)
      {
        if (v108)
        {
          if (v90 <= v87) {
            int v78 = v91;
          }
          else {
            int v78 = v87;
          }
        }
        else
        {
          if (v110) {
            unint64_t v88 = v99;
          }
          if (v88 >= v90) {
            int v78 = v91;
          }
          else {
            int v78 = v88;
          }
        }
      }
      else if (v90 <= (v95 - 1))
      {
        int v78 = v91;
      }
      else
      {
        int v78 = v95 - 1;
      }
    }
    else if (v90 <= v88)
    {
      int v78 = v91;
    }
    else
    {
      int v78 = v176[v74];
    }
    int v171 = v78 ^ v87;
    if (v83 > v89) {
      int v171 = 0;
    }
    if (v56 == 1) {
      int v78 = v171;
    }
    unint64_t v172 = (_DWORD *)(a2 + 4 * v74);
    *unint64_t v172 = v78;
    v172[2] = v78;
    v172[4] = v78;
    v172[6] = v78;
    v172[8] = v78;
    v172[10] = v78;
    v172[12] = v78;
LABEL_99:
    *(_DWORD *)(a2 + 4 * v74 + 56) = v78;
    char v73 = 1;
    uint64_t v74 = 1;
  }
  while ((v80 & 1) == 0);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(float32x4_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int32x4_t a6, int32x4_t a7)
{
  uint64_t v357 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    int v13 = (_OWORD *)((char *)a1->f32 + a2);
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    int v14 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    _OWORD *v14 = 0u;
    v14[1] = 0u;
    BOOL v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
LABEL_107:
    *BOOL v15 = v12;
    v15[1] = v12;
    return result;
  }
  char v8 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v342, a5);
    }
    int v324 = HIDWORD(v342);
    int v325 = (unsigned __int16)v342;
    int v322 = v344;
    int v323 = v343;
    int v338 = v346;
    int v339 = v345;
    int v334 = v348;
    int v335 = v347;
    int v330 = v350;
    int v331 = v349;
    int v328 = v352;
    int v329 = v351;
    int v336 = v354;
    int v337 = v353;
    uint64_t v20 = a3 + 20;
    int v332 = v356;
    int v333 = v355;
    if ((v8 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v20, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v20, (uint64_t)&v342, a5);
    }
    int v326 = HIDWORD(v342);
    int v327 = (unsigned __int16)v342;
    int v320 = v344;
    int v321 = v343;
    int v318 = v346;
    int v319 = v345;
    int v316 = v348;
    int v317 = v347;
    int v314 = v350;
    int v315 = v349;
    int v312 = v352;
    int v313 = v351;
    int v310 = v354;
    int v311 = v353;
    uint64_t v21 = a3 + 40;
    int v308 = v356;
    int v309 = v355;
    int32x4_t v341 = (int *)a1;
    if ((v8 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v21, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v21, (uint64_t)&v342, a5);
    }
    int v306 = HIDWORD(v342);
    int v307 = (unsigned __int16)v342;
    int v304 = v344;
    int v305 = v343;
    int v302 = v346;
    int v303 = v345;
    int v300 = v348;
    int v301 = v347;
    int v22 = v349;
    int v23 = v350;
    int v24 = v351;
    int v25 = v352;
    int v26 = v353;
    int v27 = v354;
    int v28 = v355;
    uint64_t v29 = a3 + 60;
    int v30 = v356;
    if ((v8 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockFallback(v29, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressLossyCompressedSubblockDQuad(v29, (uint64_t)&v342, a5);
    }
    int v31 = v28 | (v30 << 16);
    int v32 = v26 | (v27 << 16);
    v341[4] = v307 | (v306 << 16);
    v341[5] = v305 | (v304 << 16);
    v341[6] = v22 | (v23 << 16);
    v341[7] = v24 | (v25 << 16);
    int v33 = (unsigned __int16)v342;
    int v34 = HIDWORD(v342);
    *int32x4_t v341 = v325 | (v324 << 16);
    v341[1] = v323 | (v322 << 16);
    int v35 = v343;
    int v36 = v344;
    int v37 = v345;
    int v38 = v346;
    v341[2] = v331 | (v330 << 16);
    v341[3] = v329 | (v328 << 16);
    int v39 = v347;
    int v40 = v348;
    int v41 = v349;
    int v42 = v350;
    unint64_t v43 = (int *)((char *)v341 + a2);
    *unint64_t v43 = v339 | (v338 << 16);
    v43[1] = v335 | (v334 << 16);
    int v44 = v351;
    int v45 = v352;
    int v46 = v353;
    int v47 = v354;
    v43[2] = v337 | (v336 << 16);
    v43[3] = v333 | (v332 << 16);
    int v48 = v355;
    int v49 = v356;
    v43[4] = v303 | (v302 << 16);
    v43[5] = v301 | (v300 << 16);
    v43[6] = v32;
    v43[7] = v31;
    int v50 = (int *)((char *)v341 + a2 + a2);
    *int v50 = v327 | (v326 << 16);
    v50[1] = v321 | (v320 << 16);
    v50[2] = v315 | (v314 << 16);
    v50[3] = v313 | (v312 << 16);
    v50[4] = v33 | (v34 << 16);
    v50[5] = v35 | (v36 << 16);
    v50[6] = v41 | (v42 << 16);
    v50[7] = v44 | (v45 << 16);
    uint64_t v51 = (int *)((char *)v50 + a2);
    *uint64_t v51 = v319 | (v318 << 16);
    v51[1] = v317 | (v316 << 16);
    v51[2] = v311 | (v310 << 16);
    v51[3] = v309 | (v308 << 16);
    v51[4] = v37 | (v38 << 16);
    v51[5] = v39 | (v40 << 16);
    v51[6] = v46 | (v47 << 16);
    v51[7] = v48 | (v49 << 16);
    return 80;
  }
  if (a4 == 127)
  {
    int64x2_t v52 = *(int64x2_t *)a3;
    int64x2_t v53 = *(int64x2_t *)(a3 + 16);
    int64x2_t v54 = *(int64x2_t *)(a3 + 32);
    int64x2_t v55 = *(int64x2_t *)(a3 + 48);
    int64x2_t v56 = *(int64x2_t *)(a3 + 64);
    int64x2_t v57 = *(int64x2_t *)(a3 + 80);
    int64x2_t v58 = *(int64x2_t *)(a3 + 96);
    int64x2_t v59 = *(int64x2_t *)(a3 + 112);
    int v60 = (int64x2_t *)((char *)a1 + a2);
    *(int64x2_t *)a1 = vzip1q_s64(*(int64x2_t *)a3, v53);
    a1[1] = (float32x4_t)vzip1q_s64(v56, v57);
    unint64_t v61 = (int64x2_t *)((char *)a1 + 2 * a2);
    *int v60 = vzip2q_s64(v52, v53);
    v60[1] = vzip2q_s64(v56, v57);
    *unint64_t v61 = vzip1q_s64(v54, v55);
    v61[1] = vzip1q_s64(v58, v59);
    unint64_t v62 = (int64x2_t *)((char *)v61 + a2);
    *unint64_t v62 = vzip2q_s64(v54, v55);
    v62[1] = vzip2q_s64(v58, v59);
    return 128;
  }
  if (a4 == 3)
  {
    float32x4_t v16 = vld1q_dup_f32((const float *)a3);
    *a1 = v16;
    a1[1] = v16;
    int v17 = (float32x4_t *)((char *)a1 + a2);
    *int v17 = v16;
    v17[1] = v16;
    int v18 = (float32x4_t *)((char *)a1 + 2 * a2);
    float32x4_t *v18 = v16;
    v18[1] = v16;
    unint64_t v19 = (float32x4_t *)((char *)a1 + 2 * a2 + a2);
    float32x4_t *v19 = v16;
    v19[1] = v16;
    return 4;
  }
  unint64_t v63 = 8 * (a3 & 7);
  unint64_t v64 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = v63 + 18;
  uint64_t v66 = *(void *)(a3 & 0xFFFFFFFFFFFFFFF8) >> v63;
  if (v63 >= 0x2F) {
    v66 |= *(void *)(v64 + 8) << (-8 * (a3 & 7u));
  }
  a6.i32[0] = v66;
  a6.i32[1] = (unsigned __int16)v66 >> 5;
  *(int8x8_t *)a6.i8 = vand_s8(*(int8x8_t *)a6.i8, (int8x8_t)0x1F0000001FLL);
  *(int16x4_t *)a6.i8 = vmovn_s32(a6);
  a7.i32[0] = (unsigned __int16)v66 >> 10;
  a7.i32[1] = v66 >> 14;
  *(int32x2_t *)a7.i8 = vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)a7.i8, (int8x8_t)0xF0000000FLL), (int32x2_t)0x100000001);
  *(int16x4_t *)a7.i8 = vmovn_s32(a7);
  unint64_t v67 = v63 + 50;
  unint64_t v68 = v65 >> 6;
  unint64_t v69 = v65 & 0x3A;
  uint64_t v70 = *(void *)(v64 + 8 * v68) >> v69;
  if (v69 >= 0x21) {
    v70 |= *(void *)(v64 + 8 * v68 + 8) << -(char)v69;
  }
  int8x16_t v71 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
  int8x16_t v72 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
  unint64_t v73 = (8 * (a3 & 7)) | 0x280;
  v74.i64[0] = 0x3000300030003;
  v74.i64[1] = 0x3000300030003;
  int16x8_t v75 = (int16x8_t)vandq_s8(v71, v74);
  int8x16_t v76 = vbicq_s8(v72, (int8x16_t)vceqq_s16(v75, (int16x8_t)v74));
  v74.i64[0] = 0x202020202020202;
  v74.i64[1] = 0x202020202020202;
  int8x16_t v77 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v71.i8, (int8x8_t)0x4000400040004)))), v74);
  if (vmaxvq_s8(v77) < 1)
  {
    int v87 = 0;
    v88.i64[0] = -1;
    v88.i64[1] = -1;
    int8x16_t v89 = v76;
    int8x16_t v90 = v76;
    int8x16_t v91 = v76;
    v92.i64[0] = -1;
    v92.i64[1] = -1;
    int8x16_t v93 = v76;
    v94.i64[0] = -1;
    v94.i64[1] = -1;
    v95.i64[0] = -1;
    v95.i64[1] = -1;
  }
  else
  {
    int8x16_t v78 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v77, v77));
    int8x16_t v79 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v78, (int16x8_t)v78));
    unint64_t v80 = vpaddq_s32((int32x4_t)v79, (int32x4_t)v79).u64[0];
    v81.i64[0] = v80;
    v81.i64[1] = HIDWORD(v80);
    int64x2_t v82 = v81;
    unint64_t v83 = vaddvq_s64(v81);
    unint64_t v84 = v67 + v83;
    if (v83 <= 0x80 && v73 >= v84)
    {
      unint64_t v96 = v67 & 0x3A;
      int64x2_t v97 = vaddq_s64(vdupq_n_s64(v96), vzip1q_s64((int64x2_t)0, v82));
      unint64_t v98 = (int64x2_t *)(v64 + ((v67 >> 3) & 8));
      int8x16_t v86 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v97)));
      if (v96 + v83 < 0x81)
      {
        int v87 = 0;
      }
      else
      {
        int v87 = 0;
        int8x16_t v86 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v97))), v86);
      }
      unint64_t v67 = v84;
    }
    else
    {
      int8x16_t v86 = 0uLL;
      int v87 = 1;
    }
    int32x2_t v99 = vzip1_s32(*(int32x2_t *)v79.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
    v100.i64[0] = v99.u32[0];
    v100.i64[1] = v99.u32[1];
    int64x2_t v101 = (int64x2_t)vshlq_u64((uint64x2_t)v86, (uint64x2_t)vnegq_s64(v100));
    *(int32x2_t *)v86.i8 = vmovn_s64((int64x2_t)v86);
    *(int32x2_t *)v101.i8 = vmovn_s64(v101);
    int8x16_t v102 = (int8x16_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v101);
    int16x8_t v103 = (int16x8_t)vshlq_u32((uint32x4_t)v102, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v78.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)))));
    *(int16x4_t *)v102.i8 = vmovn_s32((int32x4_t)v102);
    *(int16x4_t *)v103.i8 = vmovn_s32((int32x4_t)v103);
    int16x8_t v104 = vzip1q_s16((int16x8_t)v102, v103);
    v102.i64[0] = 0x101010101010101;
    v102.i64[1] = 0x101010101010101;
    *(int8x8_t *)v105.i8 = vand_s8(vzip1_s8(vmovn_s16(v104), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v104, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v77.i8, *(int8x8_t *)v71.i8)))))), vadd_s8((int8x8_t)*(_OWORD *)&vshlq_s8(v102, v77), (int8x8_t)-1));
    v105.i64[1] = v105.i64[0];
    *(int8x8_t *)v105.i8 = vqtbl1_s8(v105, (int8x8_t)0x703060205010400);
    *(int16x4_t *)v104.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 0);
    *(int16x4_t *)v102.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 1);
    int8x8_t v106 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 2);
    int8x8_t v107 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 3);
    int8x16_t v93 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v104.i8);
    int8x16_t v91 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v102.i8);
    int8x16_t v90 = (int8x16_t)vsubw_s8((int16x8_t)v76, v106);
    int8x16_t v89 = (int8x16_t)vsubw_s8((int16x8_t)v76, v107);
    int8x16_t v95 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v104.i8));
    int8x16_t v94 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v102.i8));
    int8x16_t v92 = (int8x16_t)vmovl_s8(vceqz_s8(v106));
    int8x16_t v88 = (int8x16_t)vmovl_s8(vceqz_s8(v107));
  }
  v108.i64[0] = 0x8000800080008;
  v108.i64[1] = 0x8000800080008;
  int8x16_t v109 = 0uLL;
  int8x16_t v110 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v71, v108), (int8x16_t)0, 0xCuLL), v76);
  int8x16_t v111 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v110, (int16x8_t)v110));
  v108.i64[0] = vpaddq_s32((int32x4_t)v111, (int32x4_t)v111).u64[0];
  v112.i64[0] = v108.u32[0];
  v112.i64[1] = v108.u32[1];
  int64x2_t v113 = v112;
  unint64_t v114 = vaddvq_s64(v112);
  unint64_t v115 = v67 + v114;
  if (v114 <= 0x80 && v73 >= v115)
  {
    unint64_t v117 = v67 & 0x3F;
    int64x2_t v118 = vaddq_s64(vdupq_n_s64(v117), vzip1q_s64((int64x2_t)0, v113));
    unint64_t v119 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v109 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v119, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119->i64[0], 0), (uint64x2_t)vnegq_s64(v118)));
    if (v117 + v114 >= 0x81) {
      int8x16_t v109 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v119[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v118))), v109);
    }
    unint64_t v67 = v115;
  }
  else
  {
    int v87 = 1;
  }
  int v120 = v71.i8[0] & 3;
  if (v120 == 2)
  {
    BOOL v121 = v73 < v67 + 8;
    unint64_t v122 = v67 + 16;
    if (v73 >= v67 + 8) {
      v67 += 8;
    }
    if (v122 > v73 || v121) {
      int v87 = 1;
    }
    else {
      v67 += 8;
    }
  }
  int8x16_t v124 = 0uLL;
  int8x16_t v125 = vextq_s8((int8x16_t)0, v93, 0xCuLL);
  int8x16_t v126 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v125, (int16x8_t)v125));
  unint64_t v127 = vpaddq_s32((int32x4_t)v126, (int32x4_t)v126).u64[0];
  v128.i64[0] = v127;
  v128.i64[1] = HIDWORD(v127);
  int64x2_t v129 = v128;
  unint64_t v130 = vaddvq_s64(v128);
  unint64_t v131 = v67 + v130;
  if (v130 <= 0x80 && v73 >= v131)
  {
    unint64_t v134 = v67 & 0x3F;
    int64x2_t v135 = vaddq_s64(vdupq_n_s64(v134), vzip1q_s64((int64x2_t)0, v129));
    int v136 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v133 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v136, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136->i64[0], 0), (uint64x2_t)vnegq_s64(v135)));
    if (v134 + v130 >= 0x81) {
      int8x16_t v133 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v136[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v135))), v133);
    }
    unint64_t v67 = v131;
  }
  else
  {
    int v87 = 1;
    int8x16_t v133 = 0uLL;
  }
  int8x16_t v137 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v93, (int16x8_t)v93));
  unint64_t v138 = vpaddq_s32((int32x4_t)v137, (int32x4_t)v137).u64[0];
  v139.i64[0] = v138;
  v139.i64[1] = HIDWORD(v138);
  int64x2_t v140 = v139;
  unint64_t v141 = vaddvq_s64(v139);
  unint64_t v142 = v67 + v141;
  if (v141 <= 0x80 && v73 >= v142)
  {
    unint64_t v144 = v67 & 0x3F;
    int64x2_t v145 = vaddq_s64(vdupq_n_s64(v144), vzip1q_s64((int64x2_t)0, v140));
    BOOL v146 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v124 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v146, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146->i64[0], 0), (uint64x2_t)vnegq_s64(v145)));
    if (v144 + v141 >= 0x81) {
      int8x16_t v124 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v146[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v145))), v124);
    }
    unint64_t v67 = v142;
  }
  else
  {
    int v87 = 1;
  }
  int8x16_t v147 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v91, (int16x8_t)v91));
  unint64_t v148 = vpaddq_s32((int32x4_t)v147, (int32x4_t)v147).u64[0];
  v149.i64[0] = v148;
  v149.i64[1] = HIDWORD(v148);
  int64x2_t v150 = v149;
  unint64_t v151 = vaddvq_s64(v149);
  unint64_t v152 = v67 + v151;
  int8x16_t v153 = 0uLL;
  if (v151 <= 0x80 && v73 >= v152)
  {
    unint64_t v156 = v67 & 0x3F;
    int64x2_t v157 = vaddq_s64(vdupq_n_s64(v156), vzip1q_s64((int64x2_t)0, v150));
    int16x8_t v158 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v155 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v158, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158->i64[0], 0), (uint64x2_t)vnegq_s64(v157)));
    if (v156 + v151 >= 0x81) {
      int8x16_t v155 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v158[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v157))), v155);
    }
    unint64_t v67 = v152;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  else
  {
    int v87 = 1;
    int8x16_t v155 = 0uLL;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  unint64_t v159 = v67 + v151;
  if (v73 < v67 + v151)
  {
LABEL_82:
    int v87 = 1;
    unint64_t v159 = v67;
    goto LABEL_83;
  }
  unint64_t v160 = v67 & 0x3F;
  int64x2_t v161 = vaddq_s64(vdupq_n_s64(v160), vzip1q_s64((int64x2_t)0, v150));
  BOOL v162 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
  int8x16_t v153 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v162, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162->i64[0], 0), (uint64x2_t)vnegq_s64(v161)));
  if (v160 + v151 >= 0x81) {
    int8x16_t v153 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v162[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v161))), v153);
  }
LABEL_83:
  int8x16_t v163 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v90, (int16x8_t)v90));
  unint64_t v164 = vpaddq_s32((int32x4_t)v163, (int32x4_t)v163).u64[0];
  v165.i64[0] = v164;
  v165.i64[1] = HIDWORD(v164);
  int64x2_t v166 = v165;
  unint64_t v167 = vaddvq_s64(v165);
  int8x16_t v168 = 0uLL;
  if (v167 > 0x80 || (unint64_t v169 = v159 + v167, v73 < v159 + v167))
  {
    int v87 = 1;
    unint64_t v169 = v159;
    int8x16_t v172 = 0uLL;
  }
  else
  {
    int64x2_t v170 = vaddq_s64(vdupq_n_s64(v159 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    int v171 = (int64x2_t *)(v64 + 8 * (v159 >> 6));
    int8x16_t v172 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v171, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171->i64[0], 0), (uint64x2_t)vnegq_s64(v170)));
    if ((v159 & 0x3F) + v167 >= 0x81) {
      int8x16_t v172 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v171[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v170))), v172);
    }
  }
  if (v167 > 0x80 || (unint64_t v173 = v169 + v167, v73 < v169 + v167))
  {
    int v87 = 1;
    unint64_t v173 = v169;
  }
  else
  {
    int64x2_t v174 = vaddq_s64(vdupq_n_s64(v169 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    uint64_t v175 = (int64x2_t *)(v64 + 8 * (v169 >> 6));
    int8x16_t v168 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v175, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175->i64[0], 0), (uint64x2_t)vnegq_s64(v174)));
    if ((v169 & 0x3F) + v167 >= 0x81) {
      int8x16_t v168 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v175[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v174))), v168);
    }
  }
  int8x16_t v176 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v89, (int16x8_t)v89));
  unint64_t v177 = vpaddq_s32((int32x4_t)v176, (int32x4_t)v176).u64[0];
  v178.i64[0] = v177;
  v178.i64[1] = HIDWORD(v177);
  int64x2_t v179 = v178;
  unint64_t v180 = vaddvq_s64(v178);
  int8x16_t v181 = 0uLL;
  if (v180 > 0x80 || (unint64_t v182 = v173 + v180, v73 < v173 + v180))
  {
    int v87 = 1;
    unint64_t v182 = v173;
    int8x16_t v186 = 0uLL;
  }
  else
  {
    unint64_t v183 = v173 & 0x3F;
    int64x2_t v184 = vaddq_s64(vdupq_n_s64(v183), vzip1q_s64((int64x2_t)0, v179));
    uint64_t v185 = (int64x2_t *)(v64 + 8 * (v173 >> 6));
    int8x16_t v186 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v185, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185->i64[0], 0), (uint64x2_t)vnegq_s64(v184)));
    if (v183 + v180 >= 0x81) {
      int8x16_t v186 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v185[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v184))), v186);
    }
  }
  if (v180 > 0x80 || (unint64_t v187 = v182 + v180, v73 < v182 + v180))
  {
    int v87 = 1;
    unint64_t v187 = v182;
  }
  else
  {
    int64x2_t v188 = vaddq_s64(vdupq_n_s64(v182 & 0x3F), vzip1q_s64((int64x2_t)0, v179));
    unint64_t v189 = (int64x2_t *)(v64 + 8 * (v182 >> 6));
    int8x16_t v181 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v189, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189->i64[0], 0), (uint64x2_t)vnegq_s64(v188)));
    if ((v182 & 0x3F) + v180 >= 0x81) {
      int8x16_t v181 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v189[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v188))), v181);
    }
  }
  if (v87 || (uint64_t result = a4 + 1, v73 + 8 * result - v187 - 640 >= 9) || v120 == 2)
  {
    uint64_t result = 0;
    v342 |= 0xFFFFLL << ((8 * &v342) & 0x20);
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    unint64_t v190 = (_OWORD *)((char *)a1->f32 + a2);
    *unint64_t v190 = 0u;
    v190[1] = 0u;
    unint64_t v191 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    BOOL v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
    *unint64_t v191 = 0u;
    v191[1] = 0u;
    goto LABEL_107;
  }
  int32x2_t v192 = vzip1_s32(*(int32x2_t *)v111.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
  int32x2_t v193 = vzip1_s32(*(int32x2_t *)v147.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
  v194.i64[0] = v192.u32[0];
  v194.i64[1] = v192.u32[1];
  int64x2_t v195 = v194;
  v194.i64[0] = v193.u32[0];
  v194.i64[1] = v193.u32[1];
  uint64x2_t v196 = (uint64x2_t)vnegq_s64(v195);
  uint64x2_t v197 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v198 = (int64x2_t)vshlq_u64((uint64x2_t)v109, v196);
  *(int32x2_t *)v109.i8 = vmovn_s64((int64x2_t)v109);
  *(int32x2_t *)v198.i8 = vmovn_s64(v198);
  int16x8_t v199 = (int16x8_t)vzip1q_s32((int32x4_t)v109, (int32x4_t)v198);
  int64x2_t v200 = (int64x2_t)vshlq_u64((uint64x2_t)v155, v197);
  *(int32x2_t *)v155.i8 = vmovn_s64((int64x2_t)v155);
  *(int32x2_t *)v200.i8 = vmovn_s64(v200);
  int16x8_t v201 = (int16x8_t)vzip1q_s32((int32x4_t)v155, (int32x4_t)v200);
  int64x2_t v202 = (int64x2_t)vshlq_u64((uint64x2_t)v153, v197);
  *(int32x2_t *)v153.i8 = vmovn_s64((int64x2_t)v153);
  *(int32x2_t *)v202.i8 = vmovn_s64(v202);
  int16x8_t v203 = (int16x8_t)vzip1q_s32((int32x4_t)v153, (int32x4_t)v202);
  uint32x4_t v204 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v91.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL))));
  int16x8_t v205 = (int16x8_t)vshlq_u32((uint32x4_t)v199, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v110.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)))));
  *(int16x4_t *)v199.i8 = vmovn_s32((int32x4_t)v199);
  *(int16x4_t *)v205.i8 = vmovn_s32((int32x4_t)v205);
  int16x8_t v206 = vzip1q_s16(v199, v205);
  int16x8_t v207 = (int16x8_t)vshlq_u32((uint32x4_t)v201, v204);
  int16x8_t v208 = (int16x8_t)vshlq_u32((uint32x4_t)v203, v204);
  *(int16x4_t *)v201.i8 = vmovn_s32((int32x4_t)v201);
  *(int16x4_t *)v207.i8 = vmovn_s32((int32x4_t)v207);
  *(int16x4_t *)v203.i8 = vmovn_s32((int32x4_t)v203);
  *(int16x4_t *)v208.i8 = vmovn_s32((int32x4_t)v208);
  int16x8_t v209 = vzip1q_s16(v201, v207);
  v207.i64[0] = 0x10001000100010;
  v207.i64[1] = 0x10001000100010;
  int16x8_t v210 = vzip1q_s16(v203, v208);
  v208.i64[0] = 0xF000F000F000FLL;
  v208.i64[1] = 0xF000F000F000FLL;
  int16x8_t v211 = vsubq_s16(v207, (int16x8_t)v110);
  int16x8_t v212 = vaddq_s16((int16x8_t)v110, v208);
  v208.i64[0] = 0x10001000100010;
  v208.i64[1] = 0x10001000100010;
  int16x8_t v213 = vshlq_s16(v206, v211);
  v211.i64[0] = 0xF000F000F000FLL;
  v211.i64[1] = 0xF000F000F000FLL;
  int16x8_t v214 = vsubq_s16(v208, (int16x8_t)v91);
  int16x8_t v215 = vaddq_s16((int16x8_t)v91, v211);
  int16x8_t v216 = vshlq_s16(v210, v214);
  int8x16_t v217 = (int8x16_t)vshlq_s16(v213, v212);
  int16x8_t v218 = vshlq_s16(vshlq_s16(v209, v214), v215);
  int8x16_t v219 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v217.i8, 0);
  int16x8_t v220 = (int16x8_t)vandq_s8(v94, v219);
  int16x8_t v221 = vsubq_s16(v218, v220);
  int16x8_t v222 = vsubq_s16(vshlq_s16(v216, v215), v220);
  *(int32x2_t *)v218.i8 = vzip1_s32(*(int32x2_t *)v163.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
  *(int32x2_t *)v216.i8 = vzip1_s32(*(int32x2_t *)v176.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL));
  v194.i64[0] = v218.u32[0];
  v194.i64[1] = v218.u32[1];
  int64x2_t v223 = v194;
  v194.i64[0] = v216.u32[0];
  v194.i64[1] = v216.u32[1];
  uint64x2_t v224 = (uint64x2_t)vnegq_s64(v223);
  int64x2_t v225 = (int64x2_t)vshlq_u64((uint64x2_t)v172, v224);
  *(int32x2_t *)v220.i8 = vmovn_s64((int64x2_t)v172);
  *(int32x2_t *)v225.i8 = vmovn_s64(v225);
  int16x8_t v226 = (int16x8_t)vzip1q_s32((int32x4_t)v220, (int32x4_t)v225);
  uint64x2_t v227 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v228 = (int64x2_t)vshlq_u64((uint64x2_t)v168, v224);
  *(int32x2_t *)v168.i8 = vmovn_s64((int64x2_t)v168);
  *(int32x2_t *)v228.i8 = vmovn_s64(v228);
  int16x8_t v229 = (int16x8_t)vzip1q_s32((int32x4_t)v168, (int32x4_t)v228);
  int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v186, v227);
  *(int32x2_t *)v172.i8 = vmovn_s64((int64x2_t)v186);
  *(int32x2_t *)v230.i8 = vmovn_s64(v230);
  uint32x4_t v231 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v90.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))));
  int16x8_t v232 = (int16x8_t)vzip1q_s32((int32x4_t)v172, (int32x4_t)v230);
  int16x8_t v233 = (int16x8_t)vshlq_u32((uint32x4_t)v226, v231);
  int16x8_t v234 = (int16x8_t)vshlq_u32((uint32x4_t)v229, v231);
  *(int16x4_t *)v226.i8 = vmovn_s32((int32x4_t)v226);
  *(int16x4_t *)v233.i8 = vmovn_s32((int32x4_t)v233);
  *(int16x4_t *)v229.i8 = vmovn_s32((int32x4_t)v229);
  *(int16x4_t *)v234.i8 = vmovn_s32((int32x4_t)v234);
  int16x8_t v235 = vzip1q_s16(v226, v233);
  v233.i64[0] = 0x10001000100010;
  v233.i64[1] = 0x10001000100010;
  int16x8_t v236 = vzip1q_s16(v229, v234);
  v234.i64[0] = 0xF000F000F000FLL;
  v234.i64[1] = 0xF000F000F000FLL;
  int16x8_t v237 = vsubq_s16(v233, (int16x8_t)v90);
  int16x8_t v238 = vaddq_s16((int16x8_t)v90, v234);
  uint32x4_t v239 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v89.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL))));
  int16x8_t v240 = vshlq_s16(vshlq_s16(v235, v237), v238);
  int16x8_t v241 = vshlq_s16(vshlq_s16(v236, v237), v238);
  int16x8_t v242 = (int16x8_t)vandq_s8(v92, v219);
  int16x8_t v243 = vsubq_s16(v240, v242);
  int16x8_t v244 = vsubq_s16(v241, v242);
  int16x8_t v245 = (int16x8_t)vshlq_u32((uint32x4_t)v232, v239);
  *(int16x4_t *)v240.i8 = vmovn_s32((int32x4_t)v232);
  *(int16x4_t *)v245.i8 = vmovn_s32((int32x4_t)v245);
  v232.i64[0] = 0x10001000100010;
  v232.i64[1] = 0x10001000100010;
  int16x8_t v246 = vzip1q_s16(v240, v245);
  v240.i64[0] = 0xF000F000F000FLL;
  v240.i64[1] = 0xF000F000F000FLL;
  int16x8_t v247 = vsubq_s16(v232, (int16x8_t)v89);
  int16x8_t v248 = vaddq_s16((int16x8_t)v89, v240);
  int64x2_t v249 = (int64x2_t)vshlq_u64((uint64x2_t)v181, v227);
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v181);
  *(int32x2_t *)v249.i8 = vmovn_s64(v249);
  int16x8_t v250 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v249);
  int16x8_t v251 = (int16x8_t)vshlq_u32((uint32x4_t)v250, v239);
  *(int16x4_t *)v250.i8 = vmovn_s32((int32x4_t)v250);
  *(int16x4_t *)v251.i8 = vmovn_s32((int32x4_t)v251);
  int16x8_t v252 = vshlq_s16(vshlq_s16(vzip1q_s16(v250, v251), v247), v248);
  int16x8_t v253 = (int16x8_t)vandq_s8(v88, v219);
  int16x8_t v254 = vsubq_s16(vshlq_s16(vshlq_s16(v246, v247), v248), v253);
  int16x8_t v255 = vsubq_s16(v252, v253);
  int32x2_t v256 = vzip1_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
  int32x2_t v257 = vzip1_s32(*(int32x2_t *)v137.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL));
  v194.i64[0] = v256.u32[0];
  v194.i64[1] = v256.u32[1];
  int64x2_t v258 = v194;
  v194.i64[0] = v257.u32[0];
  v194.i64[1] = v257.u32[1];
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v133, (uint64x2_t)vnegq_s64(v258));
  *(int32x2_t *)v133.i8 = vmovn_s64((int64x2_t)v133);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v133, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v124, (uint64x2_t)vnegq_s64(v194));
  *(int32x2_t *)v124.i8 = vmovn_s64((int64x2_t)v124);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v124, (int32x4_t)v261);
  int16x8_t v263 = (int16x8_t)vshlq_u32((uint32x4_t)v260, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v125.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)))));
  int16x8_t v264 = (int16x8_t)vshlq_u32((uint32x4_t)v262, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v93.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)))));
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v263.i8 = vmovn_s32((int32x4_t)v263);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  int16x8_t v265 = vzip1q_s16(v260, v263);
  v263.i64[0] = 0x10001000100010;
  v263.i64[1] = 0x10001000100010;
  int16x8_t v266 = vzip1q_s16(v262, v264);
  v264.i64[0] = 0xF000F000F000FLL;
  v264.i64[1] = 0xF000F000F000FLL;
  int16x8_t v267 = vaddq_s16((int16x8_t)vandq_s8(v217, v95), vshlq_s16(vshlq_s16(v265, vsubq_s16(v263, (int16x8_t)v125)), vaddq_s16((int16x8_t)v125, v264)));
  int16x8_t v268 = (int16x8_t)vandq_s8(v95, v219);
  v269.i64[0] = 0x1000100010001;
  v269.i64[1] = 0x1000100010001;
  int16x8_t v270 = vceqq_s16(v75, (int16x8_t)v269);
  int v271 = (unsigned __int16)vaddvq_s16(v270);
  int8x16_t v272 = (int8x16_t)vsubq_s16(v267, v268);
  int8x16_t v273 = (int8x16_t)vsubq_s16(vshlq_s16(vshlq_s16(v266, vsubq_s16(v263, (int16x8_t)v93)), vaddq_s16((int16x8_t)v93, v264)), v268);
  v270.i32[0] = v70;
  int16x8_t v274 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v270.i8, 0);
  if (v271)
  {
    int8x16_t v275 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v71, v269));
    int8x16_t v276 = v273;
    v276.i32[3] = v272.i32[0];
    int8x16_t v277 = v272;
    v277.i32[0] = v273.i32[3];
    v358.val[0] = vbslq_s8(v275, v277, v272);
    v358.val[1] = vbslq_s8(v275, v276, v273);
    v278.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v278.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA7570), v275), (int16x8_t)v358.val[0]);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275));
    int8x16_t v272 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA7580), v275), (int16x8_t)v359.val[0]);
    int8x16_t v273 = (int8x16_t)vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA7590), v275), v221);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA75A0), v275), v222);
    int16x8_t v221 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75B0), v275), (int16x8_t)v359.val[0]);
    int16x8_t v222 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA75C0), v275), v243);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA7570), v275), v244);
    int16x8_t v243 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275), (int16x8_t)v359.val[0]);
    int16x8_t v244 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75D0), v275));
    v358.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA75E0), v275), v254);
    v358.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA7570), v275), v255);
    int16x8_t v254 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275), (int16x8_t)v358.val[0]);
    int16x8_t v255 = vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA75F0), v275));
  }
  int8x16_t v279 = (int8x16_t)vaddq_s16((int16x8_t)v272, v274);
  int8x16_t v280 = (int8x16_t)vaddq_s16((int16x8_t)v273, v274);
  int8x16_t v281 = (int8x16_t)vaddq_s16(v221, v274);
  int8x16_t v282 = (int8x16_t)vaddq_s16(v222, v274);
  int8x16_t v283 = (int8x16_t)vaddq_s16(v243, v274);
  int8x16_t v284 = (int8x16_t)vaddq_s16(v244, v274);
  int8x16_t v285 = (int8x16_t)vaddq_s16(v254, v274);
  int8x16_t v286 = (int8x16_t)vaddq_s16(v255, v274);
  v287.i64[0] = 0x10001000100010;
  v287.i64[1] = 0x10001000100010;
  int8x16_t v288 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v71, v287));
  int64x2_t v289 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v279, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v279);
  int64x2_t v290 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v280, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v280);
  int64x2_t v291 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v281, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v281);
  int64x2_t v292 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v282, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v282);
  int64x2_t v293 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v283, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v283);
  int64x2_t v294 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v284, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v284);
  unint64_t v295 = (int64x2_t *)((char *)a1 + a2);
  *(int64x2_t *)a1 = vzip1q_s64(v289, v290);
  a1[1] = (float32x4_t)vzip1q_s64(v293, v294);
  unint64_t v296 = (int64x2_t *)((char *)a1 + 2 * a2);
  int64x2_t v297 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v285, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v285);
  *unint64_t v295 = vzip2q_s64(v289, v290);
  v295[1] = vzip2q_s64(v293, v294);
  int64x2_t v298 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v286, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v286);
  *unint64_t v296 = vzip1q_s64(v291, v292);
  v296[1] = vzip1q_s64(v297, v298);
  int16x8_t v299 = (int64x2_t *)((char *)v296 + a2);
  *int16x8_t v299 = vzip2q_s64(v291, v292);
  v299[1] = vzip2q_s64(v297, v298);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressMacroblock(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  uint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  float32x4_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v16, v13 + 32, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *float32x4_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  uint64_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v21 = 0;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v25, v13 + v20 + 32, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int v25 = 0;
LABEL_35:
  int v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *int v26 = 0;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v30, v13 + 8 * a2 + 32, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int v30 = 0;
LABEL_49:
  int v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    int v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v31 = 0;
    int v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *int v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::compressSubblock(v11, v35, v13 + 12 * a2 + 32, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressMacroblock(float32x4_t *a1, uint64_t a2, unsigned __int8 *a3, int a4, int32x4_t a5, int32x4_t a6)
{
  uint64_t v9 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1, 64, a2, *a3, a4, a5, a6);
  uint64_t v12 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 2, 64, v9, a3[1], a4, v10, v11);
  uint64_t v15 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 16, 64, v12, a3[2], a4, v13, v14);
  uint64_t v18 = v15
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 18, 64, v15, a3[3], a4, v16, v17);
  uint64_t v21 = v18
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 32, 64, v18, a3[4], a4, v19, v20);
  uint64_t v24 = v21
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 34, 64, v21, a3[5], a4, v22, v23);
  uint64_t v27 = v24
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 48, 64, v24, a3[6], a4, v25, v26);
  unsigned int v30 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)2>::decompressSubblock(a1 + 50, 64, v27, v30, a4, v28, v29);
}

unint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  int64x2_t v8 = *(int64x2_t *)(a3 + 16);
  uint64_t v7 = (int64x2_t *)(a3 + 2 * a4);
  int64x2_t v9 = *(int64x2_t *)(a3 + a4);
  int64x2_t v10 = *(int64x2_t *)(a3 + a4 + 16);
  int16x8_t v11 = (int16x8_t)vzip1q_s64(*(int64x2_t *)a3, v9);
  int8x16_t v12 = (int8x16_t)vzip2q_s64(*(int64x2_t *)a3, v9);
  int16x8_t v13 = (int16x8_t)vzip1q_s64(v8, v10);
  int16x8_t v14 = (int16x8_t)vzip2q_s64(v8, v10);
  int64x2_t v16 = *v7;
  int64x2_t v17 = v7[1];
  uint64_t v15 = (int64x2_t *)((char *)v7 + a4);
  int64x2_t v18 = v15[1];
  int16x8_t v19 = (int16x8_t)vzip1q_s64(v16, *v15);
  int16x8_t v20 = (int16x8_t)vzip2q_s64(v16, *v15);
  int16x8_t v21 = (int16x8_t)vzip1q_s64(v17, v18);
  int16x8_t v22 = (int16x8_t)vzip2q_s64(v17, v18);
  int16x8_t v23 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 0);
  int8x16_t v415 = (int8x16_t)vsubq_s16(v11, v23);
  int8x16_t v417 = (int8x16_t)vsubq_s16((int16x8_t)v12, v23);
  int8x16_t v419 = (int8x16_t)vsubq_s16(v19, v23);
  int8x16_t v420 = (int8x16_t)vsubq_s16(v20, v23);
  int8x16_t v421 = (int8x16_t)vsubq_s16(v13, v23);
  int8x16_t v422 = (int8x16_t)vsubq_s16(v14, v23);
  int8x16_t v423 = (int8x16_t)vsubq_s16(v21, v23);
  int8x16_t v424 = (int8x16_t)vsubq_s16(v22, v23);
  int16x8_t v24 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v25 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v415, (int16x8_t)v417), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v26 = vpmaxq_s16(v24, v24);
  int16x8_t v27 = vpminq_s16(v25, v25);
  int16x8_t v28 = vpmaxq_s16(v26, v26);
  int16x8_t v29 = vpminq_s16(v27, v27);
  v30.i64[0] = 0x8000800080008000;
  v30.i64[1] = 0x8000800080008000;
  v31.i64[0] = 0x8000800080008000;
  v31.i64[1] = 0x8000800080008000;
  int16x8_t v32 = vminq_s16(v29, v31);
  int16x8_t v33 = vzip1q_s16(v28, v29);
  v34.i64[0] = 0x10001000100010;
  v34.i64[1] = 0x10001000100010;
  int16x8_t v35 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v33)), (int8x16_t)vceqzq_s16(v33));
  int16x8_t v36 = vpmaxq_s16(v35, v35);
  int16x8_t v37 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v38 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v419, (int16x8_t)v420), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v39 = vpmaxq_s16(v37, v37);
  int16x8_t v40 = vpminq_s16(v38, v38);
  int16x8_t v41 = vpmaxq_s16(v39, v39);
  int16x8_t v42 = vpminq_s16(v40, v40);
  int16x8_t v43 = vmaxq_s16(vmaxq_s16(v28, v30), v41);
  int16x8_t v44 = vminq_s16(v32, v42);
  int16x8_t v45 = vzip1q_s16(v41, v42);
  int16x8_t v46 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v45)), (int8x16_t)vceqzq_s16(v45));
  int16x8_t v47 = vpmaxq_s16(v46, v46);
  int16x8_t v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v421, (int16x8_t)v422), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v50 = vpmaxq_s16(v48, v48);
  int16x8_t v51 = vpminq_s16(v49, v49);
  int16x8_t v52 = vpmaxq_s16(v50, v50);
  int16x8_t v53 = vpminq_s16(v51, v51);
  int16x8_t v54 = vmaxq_s16(v43, v52);
  int16x8_t v55 = vminq_s16(v44, v53);
  int16x8_t v56 = vzip1q_s16(v52, v53);
  int16x8_t v57 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v56)), (int8x16_t)vceqzq_s16(v56));
  int16x8_t v58 = vpmaxq_s16(v57, v57);
  int16x8_t v59 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v60 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v423, (int16x8_t)v424), (int8x16_t)xmmword_242EA76D0);
  int16x8_t v61 = vpmaxq_s16(v59, v59);
  int16x8_t v62 = vpminq_s16(v60, v60);
  int16x8_t v63 = vpmaxq_s16(v61, v61);
  int16x8_t v64 = vpminq_s16(v62, v62);
  int8x16_t v65 = (int8x16_t)vmaxq_s16(v54, v63);
  int16x8_t v66 = vminq_s16(v55, v64);
  int16x8_t v67 = vzip1q_s16(v63, v64);
  int16x8_t v68 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v67)), (int8x16_t)vceqzq_s16(v67));
  v64.i64[0] = -1;
  v64.i64[1] = -1;
  int16x8_t v69 = vpmaxq_s16(v68, v68);
  int8x16_t v70 = (int8x16_t)vmaxq_s16(vmaxq_s16(v36, v47), vmaxq_s16(v58, v69));
  int16x8_t v71 = vclzq_s16(vsubq_s16((int16x8_t)v65, v66));
  v32.i64[0] = 0xF000F000F000FLL;
  v32.i64[1] = 0xF000F000F000FLL;
  int16x8_t v72 = vsubq_s16(v32, v71);
  int8x16_t v73 = (int8x16_t)vsubq_s16((int16x8_t)v34, v71);
  int8x16_t v74 = (int8x16_t)vsubq_s16(vshlq_s16(v64, v72), v66);
  int8x16_t v75 = (int8x16_t)vcgtq_s16((int16x8_t)v70, (int16x8_t)v73);
  int8x16_t v431 = vbslq_s8(v75, v73, v70);
  int8x16_t v432 = (int8x16_t)v66;
  int8x16_t v433 = v65;
  int8x16_t v434 = vandq_s8(v74, v75);
  v65.i64[0] = 0x8000800080008;
  v65.i64[1] = 0x8000800080008;
  int8x16_t v76 = vandq_s8(v75, v65);
  v77.i64[0] = 0x3000300030003;
  v77.i64[1] = 0x3000300030003;
  int16x8_t v78 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v36), (int16x8_t)v77), (int16x8_t)0);
  int8x16_t v79 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v47), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v80 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v58), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v81 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v431, v69), (int16x8_t)v77), (int16x8_t)0);
  int16x8_t v427 = vsubq_s16((int16x8_t)v431, v78);
  int16x8_t v428 = vsubq_s16((int16x8_t)v431, (int16x8_t)v79);
  int16x8_t v429 = vsubq_s16((int16x8_t)v431, v80);
  int16x8_t v430 = vsubq_s16((int16x8_t)v431, v81);
  int8x16_t v82 = (int8x16_t)vceqq_s16(vaddq_s16(v81, v80), vnegq_s16(vaddq_s16(v78, (int16x8_t)v79)));
  v79.i64[0] = 0x4000400040004;
  v79.i64[1] = 0x4000400040004;
  int8x16_t v83 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v431), v77), v76), vbicq_s8(v79, v82));
  int8x16_t v425 = (int8x16_t)v23;
  int8x16_t v426 = v83;
  if (vmaxvq_s16((int16x8_t)v431))
  {
    int16x8_t v410 = v19;
    int16x8_t v411 = v20;
    int16x8_t v412 = v21;
    int16x8_t v413 = v13;
    int16x8_t v414 = v14;
    int16x8_t v408 = v22;
    v84.i64[0] = 0x4000400040004;
    v84.i64[1] = 0x4000400040004;
    int8x16_t v85 = (int8x16_t)vsubq_s16((int16x8_t)v415, (int16x8_t)vqtbl1q_s8(v415, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v86 = (int8x16_t)vsubq_s16((int16x8_t)v417, (int16x8_t)vqtbl1q_s8(v417, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v87 = (int8x16_t)vsubq_s16((int16x8_t)v419, (int16x8_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v88 = (int8x16_t)vsubq_s16((int16x8_t)v420, (int16x8_t)vqtbl1q_s8(v420, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v89 = (int8x16_t)vsubq_s16((int16x8_t)v421, (int16x8_t)vqtbl1q_s8(v421, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v90 = (int8x16_t)vsubq_s16((int16x8_t)v422, (int16x8_t)vqtbl1q_s8(v422, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v91 = (int8x16_t)vsubq_s16((int16x8_t)v423, (int16x8_t)vqtbl1q_s8(v423, (int8x16_t)xmmword_242EA76C0));
    int8x16_t v92 = (int8x16_t)vsubq_s16((int16x8_t)v424, (int16x8_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_242EA76C0));
    int16x8_t v93 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v94 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v85, (int16x8_t)v86), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v95 = vpmaxq_s16(v93, v93);
    int16x8_t v96 = vpminq_s16(v94, v94);
    int16x8_t v97 = vpmaxq_s16(v95, v95);
    int16x8_t v98 = vpminq_s16(v96, v96);
    int16x8_t v99 = vmaxq_s16(v97, v30);
    int16x8_t v100 = vminq_s16(v98, v31);
    int16x8_t v101 = vzip1q_s16(v97, v98);
    int16x8_t v102 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v101)), (int8x16_t)vceqzq_s16(v101));
    int16x8_t v103 = vpmaxq_s16(v102, v102);
    int16x8_t v104 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v105 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v87, (int16x8_t)v88), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v106 = vpmaxq_s16(v104, v104);
    int16x8_t v107 = vpminq_s16(v105, v105);
    int16x8_t v108 = vpmaxq_s16(v106, v106);
    int16x8_t v109 = vpminq_s16(v107, v107);
    int16x8_t v110 = vmaxq_s16(v99, v108);
    int16x8_t v111 = vminq_s16(v100, v109);
    int16x8_t v112 = vzip1q_s16(v108, v109);
    int16x8_t v113 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v112)), (int8x16_t)vceqzq_s16(v112));
    int16x8_t v114 = vpmaxq_s16(v113, v113);
    int16x8_t v115 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v116 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v89, (int16x8_t)v90), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v117 = vpmaxq_s16(v115, v115);
    int16x8_t v118 = vpminq_s16(v116, v116);
    int16x8_t v119 = vpmaxq_s16(v117, v117);
    int16x8_t v120 = vpminq_s16(v118, v118);
    int16x8_t v121 = vmaxq_s16(v110, v119);
    int16x8_t v122 = vminq_s16(v111, v120);
    int16x8_t v123 = vzip1q_s16(v119, v120);
    int16x8_t v124 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v123)), (int8x16_t)vceqzq_s16(v123));
    int16x8_t v125 = vpmaxq_s16(v124, v124);
    int16x8_t v126 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v127 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v91, (int16x8_t)v92), (int8x16_t)xmmword_242EA76D0);
    int16x8_t v128 = vpmaxq_s16(v126, v126);
    int16x8_t v129 = vpminq_s16(v127, v127);
    int16x8_t v130 = vpmaxq_s16(v128, v128);
    int16x8_t v131 = vpminq_s16(v129, v129);
    int16x8_t v132 = vmaxq_s16(v121, v130);
    int8x16_t v133 = (int8x16_t)vminq_s16(v122, v131);
    int16x8_t v134 = vzip1q_s16(v130, v131);
    int16x8_t v135 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16((int16x8_t)v34, vclsq_s16(v134)), (int8x16_t)vceqzq_s16(v134));
    int16x8_t v136 = vpmaxq_s16(v135, v135);
    int8x16_t v137 = (int8x16_t)vmaxq_s16(vmaxq_s16(v103, v114), vmaxq_s16(v125, v136));
    int8x16_t v409 = (int8x16_t)v132;
    int16x8_t v138 = vclzq_s16(vsubq_s16(v132, (int16x8_t)v133));
    int8x16_t v139 = (int8x16_t)vsubq_s16((int16x8_t)v34, v138);
    int8x16_t v140 = (int8x16_t)vcgtq_s16((int16x8_t)v137, (int16x8_t)v139);
    int8x16_t v141 = vbslq_s8(v140, v139, v137);
    v137.i64[0] = 0x18001800180018;
    v137.i64[1] = 0x18001800180018;
    int8x16_t v142 = vbslq_s8(v140, v137, v34);
    int16x8_t v143 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v103), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v144 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v114), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v145 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v125), (int16x8_t)v77), (int16x8_t)0);
    int16x8_t v146 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v141, v136), (int16x8_t)v77), (int16x8_t)0);
    int8x16_t v147 = (int8x16_t)vsubq_s16((int16x8_t)v141, v143);
    int8x16_t v148 = (int8x16_t)vsubq_s16((int16x8_t)v141, v144);
    int8x16_t v149 = (int8x16_t)vsubq_s16((int16x8_t)v141, v145);
    int8x16_t v150 = (int8x16_t)vsubq_s16((int16x8_t)v141, v146);
    int8x16_t v151 = vbicq_s8(v84, (int8x16_t)vceqq_s16(vaddq_s16(v146, v145), vnegq_s16(vaddq_s16(v143, v144))));
    v84.i64[0] = 0x7000700070007;
    v84.i64[1] = 0x7000700070007;
    v152.i64[0] = 0x8000800080008;
    v152.i64[1] = 0x8000800080008;
    int8x16_t v153 = v431;
    int16x8_t v154 = (int16x8_t)vandq_s8(v83, v77);
    v155.i64[0] = 0x2000200020002;
    v155.i64[1] = 0x2000200020002;
    int16x8_t v156 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v154, v155), v34);
    int16x8_t v157 = v427;
    int16x8_t v158 = v428;
    int16x8_t v159 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v76, v152))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v152)), v156);
    int16x8_t v161 = v429;
    int16x8_t v160 = v430;
    int8x16_t v162 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v159, v427, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), vaddq_s16(vmlaq_s16(vaddq_s16((int16x8_t)vbicq_s8(v141, (int8x16_t)vceqzq_s16((int16x8_t)(*(_OWORD *)&v142 & __PAIR128__(0xFFEFFFEFFFEFFFEFLL, 0xFFEFFFEFFFEFFFEFLL)))), vaddq_s16((int16x8_t)v151, (int16x8_t)v151)), (int16x8_t)v147, (int16x8_t)v84), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v149, (int16x8_t)v148), (int16x8_t)v150), 3uLL))), 0);
    int v163 = (unsigned __int16)vaddvq_s16((int16x8_t)v162);
    BOOL v165 = a5 < 4 || a6 < 2;
    if (v163)
    {
      v166.i64[0] = 0x3000300030003;
      v166.i64[1] = 0x3000300030003;
      int8x16_t v415 = vbslq_s8(v162, v85, v415);
      int8x16_t v417 = vbslq_s8(v162, v86, v417);
      int8x16_t v167 = vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v141), v166), v142), v151);
      v168.i64[0] = 0xF000F000F000FLL;
      v168.i64[1] = 0xF000F000F000FLL;
      v166.i64[0] = -1;
      v166.i64[1] = -1;
      int8x16_t v419 = vbslq_s8(v162, v87, v419);
      int8x16_t v420 = vbslq_s8(v162, v88, v420);
      int8x16_t v421 = vbslq_s8(v162, v89, v421);
      int8x16_t v422 = vbslq_s8(v162, v90, v422);
      int8x16_t v423 = vbslq_s8(v162, v91, v423);
      int8x16_t v424 = vbslq_s8(v162, v92, v424);
      int16x8_t v157 = (int16x8_t)vbslq_s8(v162, v147, (int8x16_t)v427);
      int16x8_t v158 = (int16x8_t)vbslq_s8(v162, v148, (int8x16_t)v428);
      int16x8_t v427 = v157;
      int16x8_t v428 = v158;
      int16x8_t v161 = (int16x8_t)vbslq_s8(v162, v149, (int8x16_t)v429);
      int16x8_t v160 = (int16x8_t)vbslq_s8(v162, v150, (int8x16_t)v430);
      int16x8_t v429 = v161;
      int16x8_t v430 = v160;
      int8x16_t v433 = vbslq_s8(v162, v409, v433);
      int8x16_t v434 = vbslq_s8(v162, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16((int16x8_t)v166, vsubq_s16(v168, v138)), (int16x8_t)v133), v140), v434);
      int8x16_t v153 = vbslq_s8(v162, v141, v431);
      int8x16_t v431 = v153;
      int8x16_t v432 = vbslq_s8(v162, v133, v432);
      int8x16_t v83 = vbslq_s8(v162, v167, v83);
      int8x16_t v425 = vbslq_s8(v162, (int8x16_t)vsubq_s16((int16x8_t)v425, (int16x8_t)vqtbl1q_s8(v425, (int8x16_t)xmmword_242EA76C0)), v425);
      int8x16_t v426 = v83;
    }
    int16x8_t v169 = v413;
    int16x8_t v170 = v412;
    int16x8_t v171 = v410;
    if (!v165)
    {
      int8x16_t v182 = (int8x16_t)vsubq_s16(v11, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v172 = vsubq_s16((int16x8_t)v12, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v11.i8, (int8x16_t)xmmword_242EA7620));
      int16x8_t v173 = v411;
      v173.i32[3] = v12.i32[3];
      int8x16_t v174 = (int8x16_t)vsubq_s16(v410, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7590));
      int8x16_t v175 = (int8x16_t)vsubq_s16(v411, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v171.i8, (int8x16_t)xmmword_242EA7630));
      int16x8_t v176 = v414;
      v176.i32[3] = v12.i32[3];
      int8x16_t v177 = (int8x16_t)vsubq_s16(v413, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7640));
      int8x16_t v178 = (int8x16_t)vsubq_s16(v414, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v169.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v179 = v408;
      v179.i32[3] = v12.i32[3];
      int8x16_t v180 = (int8x16_t)vsubq_s16(v412, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7650));
      int8x16_t v181 = (int8x16_t)v172;
      v181.i32[3] = v182.i32[0];
      v182.i32[0] = v172.i32[3];
      int8x16_t v183 = (int8x16_t)vsubq_s16(v408, (int16x8_t)vqtbl2q_s8(*(int8x16x2_t *)v170.i8, (int8x16_t)xmmword_242EA7570));
      int16x8_t v184 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v185 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v182, (int16x8_t)v181), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v186 = vpmaxq_s16(v184, v184);
      int16x8_t v187 = vpminq_s16(v185, v185);
      int16x8_t v188 = vpmaxq_s16(v186, v186);
      int16x8_t v189 = vpminq_s16(v187, v187);
      v190.i64[0] = 0x8000800080008000;
      v190.i64[1] = 0x8000800080008000;
      v191.i64[0] = 0x8000800080008000;
      v191.i64[1] = 0x8000800080008000;
      int16x8_t v192 = vminq_s16(v189, v191);
      int16x8_t v193 = vzip1q_s16(v188, v189);
      v191.i64[0] = 0x10001000100010;
      v191.i64[1] = 0x10001000100010;
      int16x8_t v194 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v193)), (int8x16_t)vceqzq_s16(v193));
      int16x8_t v195 = vpmaxq_s16(v194, v194);
      int16x8_t v196 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v197 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v174, (int16x8_t)v175), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v198 = vpmaxq_s16(v196, v196);
      int16x8_t v199 = vpminq_s16(v197, v197);
      int16x8_t v200 = vpmaxq_s16(v198, v198);
      int16x8_t v201 = vpminq_s16(v199, v199);
      int16x8_t v202 = vmaxq_s16(vmaxq_s16(v188, v190), v200);
      int16x8_t v203 = vminq_s16(v192, v201);
      int16x8_t v204 = vzip1q_s16(v200, v201);
      int16x8_t v205 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v204)), (int8x16_t)vceqzq_s16(v204));
      int16x8_t v206 = vpmaxq_s16(v205, v205);
      int16x8_t v207 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v208 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v177, (int16x8_t)v178), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v209 = vpmaxq_s16(v207, v207);
      int16x8_t v210 = vpminq_s16(v208, v208);
      int16x8_t v211 = vpmaxq_s16(v209, v209);
      int16x8_t v212 = vpminq_s16(v210, v210);
      int16x8_t v213 = vmaxq_s16(v202, v211);
      int16x8_t v214 = vminq_s16(v203, v212);
      int16x8_t v215 = vzip1q_s16(v211, v212);
      int16x8_t v216 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v215)), (int8x16_t)vceqzq_s16(v215));
      int16x8_t v217 = vpmaxq_s16(v216, v216);
      int16x8_t v218 = (int16x8_t)vqtbl1q_s8((int8x16_t)vmaxq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v219 = (int16x8_t)vqtbl1q_s8((int8x16_t)vminq_s16((int16x8_t)v180, (int16x8_t)v183), (int8x16_t)xmmword_242EA76D0);
      int16x8_t v220 = vpmaxq_s16(v218, v218);
      int16x8_t v221 = vpminq_s16(v219, v219);
      int16x8_t v222 = vpmaxq_s16(v220, v220);
      int16x8_t v223 = vpminq_s16(v221, v221);
      int8x16_t v224 = (int8x16_t)vmaxq_s16(v213, v222);
      int8x16_t v225 = (int8x16_t)vminq_s16(v214, v223);
      int16x8_t v226 = vzip1q_s16(v222, v223);
      int16x8_t v227 = (int16x8_t)vbicq_s8((int8x16_t)vsubq_s16(v191, vclsq_s16(v226)), (int8x16_t)vceqzq_s16(v226));
      int8x16_t v228 = (int8x16_t)vpmaxq_s16(v227, v227);
      int8x16_t v229 = (int8x16_t)vmaxq_s16(vmaxq_s16(v195, v206), vmaxq_s16(v217, (int16x8_t)v228));
      int16x8_t v230 = vclzq_s16(vsubq_s16((int16x8_t)v224, (int16x8_t)v225));
      int8x16_t v231 = (int8x16_t)vsubq_s16(v191, v230);
      int8x16_t v232 = (int8x16_t)vcgtq_s16((int16x8_t)v229, (int16x8_t)v231);
      int8x16_t v233 = vbslq_s8(v232, v231, v229);
      v234.i64[0] = 0x3000300030003;
      v234.i64[1] = 0x3000300030003;
      int8x16_t v235 = (int8x16_t)vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v195), v234), (int16x8_t)0);
      int16x8_t v236 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v206), v234), (int16x8_t)0);
      int16x8_t v237 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, v217), v234), (int16x8_t)0);
      int16x8_t v238 = vmaxq_s16(vminq_s16(vsubq_s16((int16x8_t)v233, (int16x8_t)v228), v234), (int16x8_t)0);
      int8x16_t v239 = (int8x16_t)vsubq_s16((int16x8_t)v233, (int16x8_t)v235);
      int8x16_t v240 = (int8x16_t)vsubq_s16((int16x8_t)v233, v236);
      int8x16_t v241 = (int8x16_t)vsubq_s16((int16x8_t)v233, v237);
      int8x16_t v242 = (int8x16_t)vsubq_s16((int16x8_t)v233, v238);
      v228.i64[0] = 0x4000400040004;
      v228.i64[1] = 0x4000400040004;
      int8x16_t v243 = vbicq_s8(v228, (int8x16_t)vceqq_s16(vaddq_s16(v238, v237), vnegq_s16(vaddq_s16((int16x8_t)v235, v236))));
      int16x8_t v244 = (int16x8_t)vandq_s8(v231, v232);
      v231.i64[0] = 0x7000700070007;
      v231.i64[1] = 0x7000700070007;
      int16x8_t v245 = vaddq_s16(vmlaq_s16(vaddq_s16(v244, vaddq_s16((int16x8_t)v243, (int16x8_t)v243)), (int16x8_t)v239, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16((int16x8_t)v241, (int16x8_t)v240), (int16x8_t)v242), 3uLL));
      v235.i64[0] = 0x8000800080008;
      v235.i64[1] = 0x8000800080008;
      int8x16_t v83 = v426;
      int16x8_t v157 = v427;
      int16x8_t v246 = (int16x8_t)vandq_s8(v426, (int8x16_t)v234);
      v247.i64[0] = 0x2000200020002;
      v247.i64[1] = 0x2000200020002;
      int16x8_t v248 = (int16x8_t)vandq_s8((int8x16_t)vceqq_s16(v246, (int16x8_t)v247), (int8x16_t)v191);
      int16x8_t v160 = v430;
      int8x16_t v153 = v431;
      int16x8_t v249 = vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v431, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v426, v235))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v235)), v248);
      int16x8_t v158 = v428;
      int16x8_t v161 = v429;
      int8x16_t v250 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_s16(vaddq_s16(vmlaq_s16(v249, v427, (int16x8_t)v231), vshlq_n_s16(vaddq_s16(vaddq_s16(v429, v428), v430), 3uLL)), v245), 0);
      if (vaddvq_s16((int16x8_t)v250))
      {
        v251.i64[0] = 0x9000900090009;
        v251.i64[1] = 0x9000900090009;
        int8x16_t v415 = vbslq_s8(v250, v182, v415);
        int8x16_t v417 = vbslq_s8(v250, v181, v417);
        v252.i64[0] = -1;
        v252.i64[1] = -1;
        int8x16_t v419 = vbslq_s8(v250, v174, v419);
        int8x16_t v420 = vbslq_s8(v250, v175, v420);
        v253.i64[0] = 0xF000F000F000FLL;
        v253.i64[1] = 0xF000F000F000FLL;
        int8x16_t v421 = vbslq_s8(v250, v177, v421);
        int8x16_t v422 = vbslq_s8(v250, v178, v422);
        int8x16_t v423 = vbslq_s8(v250, v180, v423);
        int8x16_t v424 = vbslq_s8(v250, v183, v424);
        int16x8_t v157 = (int16x8_t)vbslq_s8(v250, v239, (int8x16_t)v427);
        int16x8_t v158 = (int16x8_t)vbslq_s8(v250, v240, (int8x16_t)v428);
        int16x8_t v427 = v157;
        int16x8_t v428 = v158;
        int16x8_t v161 = (int16x8_t)vbslq_s8(v250, v241, (int8x16_t)v429);
        int16x8_t v160 = (int16x8_t)vbslq_s8(v250, v242, (int8x16_t)v430);
        int16x8_t v429 = v161;
        int16x8_t v430 = v160;
        int8x16_t v433 = vbslq_s8(v250, v224, v433);
        int8x16_t v434 = vbslq_s8(v250, vandq_s8((int8x16_t)vsubq_s16(vshlq_s16(v252, vsubq_s16(v253, v230)), (int16x8_t)v225), v232), v434);
        int8x16_t v153 = vbslq_s8(v250, v233, v431);
        int8x16_t v431 = v153;
        int8x16_t v432 = vbslq_s8(v250, v225, v432);
        int8x16_t v83 = vbslq_s8(v250, vorrq_s8(vorrq_s8(vandq_s8((int8x16_t)vceqzq_s16((int16x8_t)v233), v247), (int8x16_t)vsubq_s16((int16x8_t)vandq_s8(v232, v251), (int16x8_t)vmvnq_s8(v232))), v243), v426);
        int8x16_t v425 = vbslq_s8(v250, vextq_s8(v12, v12, 0xCuLL), v425);
        int8x16_t v426 = v83;
      }
    }
    int16x8_t v254 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v157));
    int8x16_t v416 = (int8x16_t)vaddq_s16(v254, (int16x8_t)v415);
    int8x16_t v418 = (int8x16_t)vaddq_s16((int16x8_t)v417, v254);
    int16x8_t v255 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v158));
    int8x16_t v419 = (int8x16_t)vaddq_s16((int16x8_t)v419, v255);
    int8x16_t v420 = (int8x16_t)vaddq_s16((int16x8_t)v420, v255);
    int16x8_t v256 = (int16x8_t)vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v161));
    int8x16_t v421 = (int8x16_t)vaddq_s16((int16x8_t)v421, v256);
    int8x16_t v422 = (int8x16_t)vaddq_s16((int16x8_t)v422, v256);
    int8x16_t v257 = vandq_s8(v434, (int8x16_t)vceqq_s16((int16x8_t)v153, v160));
    int8x16_t v423 = (int8x16_t)vaddq_s16((int16x8_t)v423, (int16x8_t)v257);
    int8x16_t v424 = (int8x16_t)vaddq_s16((int16x8_t)v424, (int16x8_t)v257);
    v257.i64[0] = 0x8000800080008;
    v257.i64[1] = 0x8000800080008;
    v258.i64[0] = 0x3000300030003;
    v258.i64[1] = 0x3000300030003;
    v259.i64[0] = 0x2000200020002;
    v259.i64[1] = 0x2000200020002;
    int8x16_t v260 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v83, v258), v259);
    v259.i64[0] = 0x10001000100010;
    v259.i64[1] = 0x10001000100010;
    int16x8_t v261 = (int16x8_t)vandq_s8(v260, (int8x16_t)v259);
    v259.i64[0] = 0x7000700070007;
    v259.i64[1] = 0x7000700070007;
    int16x8_t v262 = vaddq_s16(vmlaq_s16(vaddq_s16(vaddq_s16((int16x8_t)vbicq_s8(v153, (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v83, v257))), (int16x8_t)vandq_s8((int8x16_t)vaddq_s16((int16x8_t)v83, (int16x8_t)v83), v257)), v261), v157, v259), vshlq_n_s16(vaddq_s16(v161, vaddq_s16(v158, v160)), 3uLL));
    if ((unint64_t)(vpaddq_s16(v262, v262).i16[0] - 463) < 0xFFFFFFFFFFFFFDF8)
    {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblock(a1, a2, a3, a4, a5, a6, a7);
      return 64;
    }
    else
    {
      int16x8_t v263 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v264 = 8 * (a1 & 7);
      if (v264) {
        uint64_t v265 = *v263 & ~(-1 << v264);
      }
      else {
        uint64_t v265 = 0;
      }
      *a2 = 0;
      uint64_t v267 = ((v153.i16[0] << 10) + 15360) & 0x3C00;
      if (!v153.i16[0]) {
        uint64_t v267 = 0;
      }
      if (v153.i16[1]) {
        uint64_t v268 = ((v153.u16[1] << 14) + 245760) & 0x3C000;
      }
      else {
        uint64_t v268 = 0;
      }
      unint64_t v269 = v267 | v268 | v83.i8[0] & 0x1F | (32 * (v83.i8[2] & 0x1Fu));
      unint64_t v270 = v425.u32[0];
      uint64_t v271 = (v269 << v264) | v265;
      if (v264 >= 0x2E)
      {
        *int16x8_t v263 = v271;
        uint64_t v271 = v269 >> (-8 * (a1 & 7u));
      }
      unint64_t v272 = (v264 + 18) & 0x3A;
      uint64_t v273 = v271 | (v270 << v272);
      if (v272 >= 0x20)
      {
        *(void *)((char *)v263 + (((v264 + 18) >> 3) & 8)) = v273;
        uint64_t v273 = v270 >> -(char)v272;
      }
      unint64_t v274 = v264 + 50;
      int8x16_t v275 = (int8x16_t)vsubq_s16((int16x8_t)v431, v427);
      int8x16_t v276 = (int8x16_t)vsubq_s16((int16x8_t)v431, v428);
      int8x16_t v277 = (int8x16_t)vsubq_s16((int16x8_t)v431, v429);
      int8x16_t v278 = (int8x16_t)vsubq_s16((int16x8_t)v431, v430);
      *(uint8x8_t *)v275.i8 = vqmovn_u16((uint16x8_t)v275);
      *(uint8x8_t *)v276.i8 = vqmovn_u16((uint16x8_t)v276);
      *(uint8x8_t *)v277.i8 = vqmovn_u16((uint16x8_t)v277);
      *(uint8x8_t *)v278.i8 = vqmovn_u16((uint16x8_t)v278);
      v278.i64[0] = vzip1q_s32((int32x4_t)vzip1q_s16((int16x8_t)vzip1q_s8(v275, v276), (int16x8_t)vzip1q_s8(v277, v278)), (int32x4_t)vzip1q_s16((int16x8_t)vtrn2q_s8(v275, v276), (int16x8_t)vtrn2q_s8(v277, v278))).u64[0];
      v276.i64[0] = 0x202020202020202;
      v276.i64[1] = 0x202020202020202;
      int8x16_t v279 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v426.i8, (int8x8_t)0x4000400040004)))), v276);
      v276.i64[0] = 0xF8F8F8F8F8F8F8F8;
      v276.i64[1] = 0xF8F8F8F8F8F8F8F8;
      v277.i64[0] = -1;
      v277.i64[1] = -1;
      uint8x16_t v280 = (uint8x16_t)vandq_s8((int8x16_t)vshlq_u8((uint8x16_t)v277, (uint8x16_t)vorrq_s8(v279, v276)), (int8x16_t)v278.u64[0]);
      int16x8_t v281 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v279.i8);
      uint16x8_t v282 = (uint16x8_t)vpaddq_s16((int16x8_t)vshlq_u16(vmovl_u8(*(uint8x8_t *)v280.i8), (uint16x8_t)vtrn1q_s16((int16x8_t)0, v281)), (int16x8_t)vmovl_high_u8(v280));
      uint16x8_t v283 = (uint16x8_t)vpaddq_s16(v281, (int16x8_t)vmovl_high_u8((uint8x16_t)v279));
      int32x4_t v284 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v283.i8);
      int32x4_t v285 = (int32x4_t)vmovl_high_u16(v283);
      int32x4_t v286 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v282.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v284)), (int32x4_t)vshlq_u32(vmovl_high_u16(v282), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v285)));
      int32x4_t v287 = vpaddq_s32(v284, v285);
      v288.i64[0] = v286.u32[0];
      v288.i64[1] = v286.u32[1];
      uint64x2_t v289 = (uint64x2_t)v288;
      v288.i64[0] = v286.u32[2];
      v288.i64[1] = v286.u32[3];
      uint64x2_t v290 = (uint64x2_t)v288;
      v288.i64[0] = v287.u32[0];
      v288.i64[1] = v287.u32[1];
      int64x2_t v291 = v288;
      v288.i64[0] = v287.u32[2];
      v288.i64[1] = v287.u32[3];
      int64x2_t v292 = vpaddq_s64((int64x2_t)vshlq_u64(v289, (uint64x2_t)vzip1q_s64((int64x2_t)0, v291)), (int64x2_t)vshlq_u64(v290, (uint64x2_t)vzip1q_s64((int64x2_t)0, v288)));
      int64x2_t v293 = vpaddq_s64(v291, v288);
      uint64_t v294 = (v264 + 50) & 0x3A;
      unint64_t v295 = (v292.i64[0] << v294) | v273;
      if ((unint64_t)(v293.i64[0] + v294) >= 0x40)
      {
        *(void *)((char *)v263 + ((v274 >> 3) & 8)) = v295;
        unint64_t v295 = (unint64_t)v292.i64[0] >> -(char)v294;
      }
      unint64_t v296 = v293.i64[0] + v274;
      unint64_t v297 = v295 | (v292.i64[1] << v296);
      if ((v296 & 0x3F) + v293.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v296 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v297;
        unint64_t v297 = (unint64_t)v292.i64[1] >> -(v296 & 0x3F);
        if ((v296 & 0x3F) == 0) {
          unint64_t v297 = 0;
        }
      }
      unint64_t v298 = v296 + v293.i64[1];
      v299.i64[0] = 0x8000800080008;
      v299.i64[1] = 0x8000800080008;
      v300.i64[0] = -1;
      v300.i64[1] = -1;
      int16x8_t v301 = (int16x8_t)vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v426, v299), (int8x16_t)0, 0xCuLL), v431);
      v302.i64[0] = 0xF000F000F000FLL;
      v302.i64[1] = 0xF000F000F000FLL;
      uint16x8_t v303 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v300, (uint16x8_t)vaddq_s16(v301, v302)), v434);
      int32x4_t v304 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v301.i8);
      int32x4_t v305 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v303.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v304)), (int32x4_t)vmovl_high_u16(v303));
      int32x4_t v306 = vpaddq_s32(v304, (int32x4_t)vmovl_high_u16((uint16x8_t)v301));
      v307.i64[0] = v305.u32[0];
      v307.i64[1] = v305.u32[1];
      uint64x2_t v308 = (uint64x2_t)v307;
      v307.i64[0] = v305.u32[2];
      v307.i64[1] = v305.u32[3];
      uint64x2_t v309 = (uint64x2_t)v307;
      v307.i64[0] = v306.u32[0];
      v307.i64[1] = v306.u32[1];
      int64x2_t v310 = v307;
      v307.i64[0] = v306.u32[2];
      v307.i64[1] = v306.u32[3];
      int64x2_t v311 = vpaddq_s64((int64x2_t)vshlq_u64(v308, (uint64x2_t)vzip1q_s64((int64x2_t)0, v310)), (int64x2_t)vshlq_u64(v309, (uint64x2_t)vzip1q_s64((int64x2_t)0, v307)));
      int64x2_t v312 = vpaddq_s64(v310, v307);
      unint64_t v313 = (v311.i64[0] << v298) | v297;
      if (v312.i64[0] + (v298 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v298 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v313;
        unint64_t v313 = (unint64_t)v311.i64[0] >> -(v298 & 0x3F);
        if ((v298 & 0x3F) == 0) {
          unint64_t v313 = 0;
        }
      }
      unint64_t v314 = v312.i64[0] + v298;
      unint64_t v315 = v313 | (v311.i64[1] << v314);
      if ((v314 & 0x3F) + v312.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v314 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v315;
        unint64_t v315 = (unint64_t)v311.i64[1] >> -(v314 & 0x3F);
        if ((v314 & 0x3F) == 0) {
          unint64_t v315 = 0;
        }
      }
      unint64_t v316 = v314 + v312.i64[1];
      int16x8_t v317 = (int16x8_t)vextq_s8((int8x16_t)0, (int8x16_t)v427, 0xCuLL);
      v318.i64[0] = 0xF000F000F000FLL;
      v318.i64[1] = 0xF000F000F000FLL;
      v319.i64[0] = -1;
      v319.i64[1] = -1;
      uint16x8_t v320 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v319, (uint16x8_t)vaddq_s16(v317, v318)), v416);
      int32x4_t v321 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v317.i8);
      int32x4_t v322 = (int32x4_t)vmovl_high_u16((uint16x8_t)v317);
      int32x4_t v323 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v320.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v321)), (int32x4_t)vshlq_u32(vmovl_high_u16(v320), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v322)));
      int32x4_t v324 = vpaddq_s32(v321, v322);
      v325.i64[0] = v323.u32[0];
      v325.i64[1] = v323.u32[1];
      uint64x2_t v326 = (uint64x2_t)v325;
      v325.i64[0] = v323.u32[2];
      v325.i64[1] = v323.u32[3];
      uint64x2_t v327 = (uint64x2_t)v325;
      v325.i64[0] = v324.u32[0];
      v325.i64[1] = v324.u32[1];
      int64x2_t v328 = v325;
      v325.i64[0] = v324.u32[2];
      v325.i64[1] = v324.u32[3];
      int64x2_t v329 = vpaddq_s64((int64x2_t)vshlq_u64(v326, (uint64x2_t)vzip1q_s64((int64x2_t)0, v328)), (int64x2_t)vshlq_u64(v327, (uint64x2_t)vzip1q_s64((int64x2_t)0, v325)));
      int64x2_t v330 = vpaddq_s64(v328, v325);
      unint64_t v331 = (v329.i64[0] << v316) | v315;
      if (v330.i64[0] + (v316 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v316 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v331;
        unint64_t v331 = (unint64_t)v329.i64[0] >> -(v316 & 0x3F);
        if ((v316 & 0x3F) == 0) {
          unint64_t v331 = 0;
        }
      }
      unint64_t v332 = v330.i64[0] + v316;
      unint64_t v333 = v331 | (v329.i64[1] << v332);
      if ((v332 & 0x3F) + v330.i64[1] >= 0x40)
      {
        *(void *)((char *)v263 + ((v332 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v333;
        unint64_t v333 = (unint64_t)v329.i64[1] >> -(v332 & 0x3F);
        if ((v332 & 0x3F) == 0) {
          unint64_t v333 = 0;
        }
      }
      unint64_t v334 = v332 + v330.i64[1];
      v335.i64[0] = 0xF000F000F000FLL;
      v335.i64[1] = 0xF000F000F000FLL;
      v336.i64[0] = -1;
      v336.i64[1] = -1;
      uint16x8_t v337 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v336, (uint16x8_t)vaddq_s16(v427, v335)), v418);
      int32x4_t v338 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v427.i8);
      int32x4_t v339 = (int32x4_t)vmovl_high_u16((uint16x8_t)v427);
      int32x4_t v340 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v337.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v338)), (int32x4_t)vshlq_u32(vmovl_high_u16(v337), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v339)));
      int32x4_t v341 = vpaddq_s32(v338, v339);
      v342.i64[0] = v340.u32[0];
      v342.i64[1] = v340.u32[1];
      uint64x2_t v343 = (uint64x2_t)v342;
      v342.i64[0] = v340.u32[2];
      v342.i64[1] = v340.u32[3];
      uint64x2_t v344 = (uint64x2_t)v342;
      v342.i64[0] = v341.u32[0];
      v342.i64[1] = v341.u32[1];
      int64x2_t v345 = v342;
      v342.i64[0] = v341.u32[2];
      v342.i64[1] = v341.u32[3];
      int64x2_t v346 = vpaddq_s64((int64x2_t)vshlq_u64(v343, (uint64x2_t)vzip1q_s64((int64x2_t)0, v345)), (int64x2_t)vshlq_u64(v344, (uint64x2_t)vzip1q_s64((int64x2_t)0, v342)));
      int64x2_t v347 = vpaddq_s64(v345, v342);
      unint64_t v348 = (v346.i64[0] << v334) | v333;
      if (v347.i64[0] + (v334 & 0x3F) >= 0x40)
      {
        *(void *)((char *)v263 + ((v334 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v348;
        if ((v334 & 0x3F) != 0) {
          unint64_t v348 = (unint64_t)v346.i64[0] >> -(v334 & 0x3F);
        }
        else {
          unint64_t v348 = 0;
        }
      }
      uint64_t v349 = v347.i64[1];
      unint64_t v350 = v347.i64[0] + v334;
      uint64_t v351 = (v347.i64[0] + v334) & 0x3F;
      unint64_t v352 = v348 | (v346.i64[1] << v350);
      if ((unint64_t)(v351 + v347.i64[1]) >= 0x40)
      {
        *(void *)((char *)v263 + ((v350 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
        unint64_t v352 = (unint64_t)v346.i64[1] >> -(char)v351;
        if (!v351) {
          unint64_t v352 = 0;
        }
      }
      uint64_t v353 = 0;
      v354.i64[0] = 0xF000F000F000FLL;
      v354.i64[1] = 0xF000F000F000FLL;
      v355.i64[0] = -1;
      v355.i64[1] = -1;
      unint64_t v356 = v350 + v349;
      char v357 = 1;
      do
      {
        char v358 = v357;
        uint16x8_t v359 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v355, (uint16x8_t)vaddq_s16(v428, v354)), *(&v419 + v353));
        int32x4_t v360 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v428.i8);
        int32x4_t v361 = (int32x4_t)vmovl_high_u16((uint16x8_t)v428);
        int32x4_t v362 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v359.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v360)), (int32x4_t)vshlq_u32(vmovl_high_u16(v359), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v361)));
        int32x4_t v363 = vpaddq_s32(v360, v361);
        v364.i64[0] = v362.u32[0];
        v364.i64[1] = v362.u32[1];
        uint64x2_t v365 = (uint64x2_t)v364;
        v364.i64[0] = v362.u32[2];
        v364.i64[1] = v362.u32[3];
        uint64x2_t v366 = (uint64x2_t)v364;
        v364.i64[0] = v363.u32[0];
        v364.i64[1] = v363.u32[1];
        int64x2_t v367 = v364;
        v364.i64[0] = v363.u32[2];
        v364.i64[1] = v363.u32[3];
        int64x2_t v368 = vpaddq_s64((int64x2_t)vshlq_u64(v365, (uint64x2_t)vzip1q_s64((int64x2_t)0, v367)), (int64x2_t)vshlq_u64(v366, (uint64x2_t)vzip1q_s64((int64x2_t)0, v364)));
        int64x2_t v369 = vpaddq_s64(v367, v364);
        unint64_t v370 = (v368.i64[0] << v356) | v352;
        if (v369.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v370;
          unint64_t v370 = (unint64_t)v368.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v370 = 0;
          }
        }
        unint64_t v371 = v369.i64[0] + v356;
        unint64_t v352 = v370 | (v368.i64[1] << v371);
        if ((v371 & 0x3F) + v369.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v371 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v368.i64[1] >> -(v371 & 0x3F);
          if ((v371 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v357 = 0;
        unint64_t v356 = v371 + v369.i64[1];
        uint64_t v353 = 1;
      }
      while ((v358 & 1) != 0);
      uint64_t v372 = 0;
      char v373 = 1;
      v374.i64[0] = 0xF000F000F000FLL;
      v374.i64[1] = 0xF000F000F000FLL;
      v375.i64[0] = -1;
      v375.i64[1] = -1;
      do
      {
        char v376 = v373;
        uint16x8_t v377 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v375, (uint16x8_t)vaddq_s16(v429, v374)), *(&v421 + v372));
        int32x4_t v378 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v429.i8);
        int32x4_t v379 = (int32x4_t)vmovl_high_u16((uint16x8_t)v429);
        int32x4_t v380 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v377.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v378)), (int32x4_t)vshlq_u32(vmovl_high_u16(v377), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v379)));
        int32x4_t v381 = vpaddq_s32(v378, v379);
        v382.i64[0] = v380.u32[0];
        v382.i64[1] = v380.u32[1];
        uint64x2_t v383 = (uint64x2_t)v382;
        v382.i64[0] = v380.u32[2];
        v382.i64[1] = v380.u32[3];
        uint64x2_t v384 = (uint64x2_t)v382;
        v382.i64[0] = v381.u32[0];
        v382.i64[1] = v381.u32[1];
        int64x2_t v385 = v382;
        v382.i64[0] = v381.u32[2];
        v382.i64[1] = v381.u32[3];
        int64x2_t v386 = vpaddq_s64((int64x2_t)vshlq_u64(v383, (uint64x2_t)vzip1q_s64((int64x2_t)0, v385)), (int64x2_t)vshlq_u64(v384, (uint64x2_t)vzip1q_s64((int64x2_t)0, v382)));
        int64x2_t v387 = vpaddq_s64(v385, v382);
        unint64_t v388 = (v386.i64[0] << v356) | v352;
        if (v387.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v388;
          unint64_t v388 = (unint64_t)v386.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v388 = 0;
          }
        }
        unint64_t v389 = v387.i64[0] + v356;
        unint64_t v352 = v388 | (v386.i64[1] << v389);
        if ((v389 & 0x3F) + v387.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v389 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v386.i64[1] >> -(v389 & 0x3F);
          if ((v389 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v373 = 0;
        unint64_t v356 = v389 + v387.i64[1];
        uint64_t v372 = 1;
      }
      while ((v376 & 1) != 0);
      uint64_t v390 = 0;
      char v391 = 1;
      v392.i64[0] = 0xF000F000F000FLL;
      v392.i64[1] = 0xF000F000F000FLL;
      v393.i64[0] = -1;
      v393.i64[1] = -1;
      do
      {
        char v394 = v391;
        uint16x8_t v395 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16(v393, (uint16x8_t)vaddq_s16(v430, v392)), *(&v423 + v390));
        int32x4_t v396 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v430.i8);
        int32x4_t v397 = (int32x4_t)vmovl_high_u16((uint16x8_t)v430);
        int32x4_t v398 = vpaddq_s32((int32x4_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v395.i8), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v396)), (int32x4_t)vshlq_u32(vmovl_high_u16(v395), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v397)));
        int32x4_t v399 = vpaddq_s32(v396, v397);
        v400.i64[0] = v398.u32[0];
        v400.i64[1] = v398.u32[1];
        uint64x2_t v401 = (uint64x2_t)v400;
        v400.i64[0] = v398.u32[2];
        v400.i64[1] = v398.u32[3];
        uint64x2_t v402 = (uint64x2_t)v400;
        v400.i64[0] = v399.u32[0];
        v400.i64[1] = v399.u32[1];
        int64x2_t v403 = v400;
        v400.i64[0] = v399.u32[2];
        v400.i64[1] = v399.u32[3];
        int64x2_t v404 = vpaddq_s64((int64x2_t)vshlq_u64(v401, (uint64x2_t)vzip1q_s64((int64x2_t)0, v403)), (int64x2_t)vshlq_u64(v402, (uint64x2_t)vzip1q_s64((int64x2_t)0, v400)));
        int64x2_t v405 = vpaddq_s64(v403, v400);
        unint64_t v406 = (v404.i64[0] << v356) | v352;
        if (v405.i64[0] + (v356 & 0x3F) >= 0x40)
        {
          *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v406;
          unint64_t v406 = (unint64_t)v404.i64[0] >> -(v356 & 0x3F);
          if ((v356 & 0x3F) == 0) {
            unint64_t v406 = 0;
          }
        }
        unint64_t v407 = v405.i64[0] + v356;
        unint64_t v352 = v406 | (v404.i64[1] << v407);
        if ((v407 & 0x3F) + v405.i64[1] >= 0x40)
        {
          *(void *)((char *)v263 + ((v407 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
          unint64_t v352 = (unint64_t)v404.i64[1] >> -(v407 & 0x3F);
          if ((v407 & 0x3F) == 0) {
            unint64_t v352 = 0;
          }
        }
        char v391 = 0;
        unint64_t v356 = v407 + v405.i64[1];
        uint64_t v390 = 1;
      }
      while ((v394 & 1) != 0);
      if ((v356 & 0x3F) != 0) {
        *(void *)((char *)v263 + ((v356 >> 3) & 0x1FFFFFFFFFFFFFF8)) = v352;
      }
      unint64_t result = (v356 - v264 + 7) >> 3;
      *a2 |= (_BYTE)result - 1;
    }
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a3;
    *a2 = 3;
    return 4;
  }
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblock(unint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v11 = a6;
  if (a5 > 1)
  {
    uint64_t v21 = a5 & 0xFE;
    if (a5 == v21)
    {
      uint64_t v22 = 0;
      int16x8_t v23 = (int *)(a3 + 4);
      int16x8_t v24 = &v72;
      do
      {
        int16x8_t v25 = v24;
        int16x8_t v26 = v23;
        uint64_t v27 = a5;
        do
        {
          int v28 = *v26;
          *((_DWORD *)v25 - 4) = *(v26 - 1);
          *(_DWORD *)int16x8_t v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 2;
        }
        while (v27);
        ++v22;
        int16x8_t v23 = (int *)((char *)v23 + a4);
        int16x8_t v24 = (long long *)((char *)v24 + 4);
      }
      while (v22 != a6);
    }
    else
    {
      uint64_t v29 = 0;
      int16x8_t v30 = (int *)(a3 + 4);
      int16x8_t v31 = &v72;
      int16x8_t v32 = (char *)&v71 + ((16 * a5) & 0xFE0);
      do
      {
        int16x8_t v33 = v31;
        int8x16_t v34 = v30;
        uint64_t v35 = a5 & 0xFE;
        do
        {
          int v36 = *v34;
          *((_DWORD *)v33 - 4) = *(v34 - 1);
          *(_DWORD *)int16x8_t v33 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 2;
        }
        while (v35);
        int16x8_t v37 = (int *)(a3 + v29 * a4 + 4 * v21);
        int16x8_t v38 = v32;
        uint64_t v39 = a5 - v21;
        do
        {
          int v40 = *v37++;
          *int16x8_t v38 = v40;
          v38 += 4;
          --v39;
        }
        while (v39);
        ++v29;
        int16x8_t v30 = (int *)((char *)v30 + a4);
        int16x8_t v31 = (long long *)((char *)v31 + 4);
        v32 += 4;
      }
      while (v29 != v11);
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (a6 < 2) {
      goto LABEL_7;
    }
    if (a4 != 1) {
      goto LABEL_7;
    }
    uint64_t v12 = a6 & 0xFE;
    int16x8_t v13 = (int *)(a3 + 1);
    int16x8_t v14 = (_DWORD *)&v71 + 1;
    uint64_t v15 = v12;
    do
    {
      int v16 = *(int *)((char *)v13 - 1);
      int v17 = *v13;
      int16x8_t v13 = (int *)((char *)v13 + 2);
      *(v14 - 1) = v16;
      _DWORD *v14 = v17;
      v14 += 2;
      v15 -= 2;
    }
    while (v15);
    if (v12 != a6)
    {
LABEL_7:
      uint64_t v18 = a6 - v12;
      int16x8_t v19 = (_DWORD *)&v71 + v12;
      int16x8_t v20 = (_DWORD *)(a3 + v12 * a4);
      do
      {
        *v19++ = *v20;
        int16x8_t v20 = (_DWORD *)((char *)v20 + a4);
        --v18;
      }
      while (v18);
    }
  }
  int v55 = (unsigned __int16)v71;
  int v56 = WORD1(v71);
  int v57 = (unsigned __int16)v72;
  int v58 = WORD1(v72);
  int v59 = WORD2(v71);
  int v60 = WORD3(v71);
  int v61 = WORD2(v72);
  int v62 = WORD3(v72);
  int v63 = (unsigned __int16)v73;
  int v64 = WORD1(v73);
  int v65 = (unsigned __int16)v74;
  int v66 = WORD1(v74);
  int v67 = WORD2(v73);
  int v68 = WORD3(v73);
  if (a5 >= 4) {
    unsigned int v41 = 4;
  }
  else {
    unsigned int v41 = a5;
  }
  if (a5 >= 4) {
    unsigned int v42 = a5 - 4;
  }
  else {
    unsigned int v42 = 0;
  }
  int v69 = WORD2(v74);
  int v70 = WORD3(v74);
  if (a6 >= 2) {
    unsigned int v43 = 2;
  }
  else {
    unsigned int v43 = a6;
  }
  if (a6 >= 2) {
    unsigned int v44 = a6 - 2;
  }
  else {
    unsigned int v44 = 0;
  }
  char v45 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblockDQuad(a1, (uint64_t)&v55, a7, v41, v43);
  int v55 = WORD4(v71);
  int v56 = WORD5(v71);
  int v57 = WORD4(v72);
  int v58 = WORD5(v72);
  int v59 = WORD6(v71);
  int v60 = HIWORD(v71);
  int v61 = WORD6(v72);
  int v62 = HIWORD(v72);
  int v63 = WORD4(v73);
  int v64 = WORD5(v73);
  int v65 = WORD4(v74);
  int v66 = WORD5(v74);
  int v67 = WORD6(v73);
  int v68 = HIWORD(v73);
  int v69 = WORD6(v74);
  int v70 = HIWORD(v74);
  if (a6 >= 4) {
    unsigned int v46 = 2;
  }
  else {
    unsigned int v46 = v44;
  }
  int v47 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblockDQuad(a1 + 16, (uint64_t)&v55, a7, v41, v46);
  int v55 = (unsigned __int16)v75;
  int v56 = WORD1(v75);
  int v57 = (unsigned __int16)v76;
  int v58 = WORD1(v76);
  int v59 = WORD2(v75);
  int v60 = WORD3(v75);
  int v61 = WORD2(v76);
  int v62 = WORD3(v76);
  int v63 = (unsigned __int16)v77;
  int v64 = WORD1(v77);
  int v65 = (unsigned __int16)v78;
  int v66 = WORD1(v78);
  int v67 = WORD2(v77);
  int v68 = WORD3(v77);
  if (a5 >= 8) {
    unsigned int v48 = 4;
  }
  else {
    unsigned int v48 = v42;
  }
  int v69 = WORD2(v78);
  int v70 = WORD3(v78);
  int v49 = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblockDQuad(a1 + 32, (uint64_t)&v55, a7, v48, v43);
  int v55 = WORD4(v75);
  int v56 = WORD5(v75);
  int v57 = WORD4(v76);
  int v58 = WORD5(v76);
  int v59 = WORD6(v75);
  int v60 = HIWORD(v75);
  int v61 = WORD6(v76);
  int v62 = HIWORD(v76);
  int v63 = WORD4(v77);
  int v64 = WORD5(v77);
  int v65 = WORD4(v78);
  int v66 = WORD5(v78);
  int v67 = WORD6(v77);
  int v68 = HIWORD(v77);
  int v69 = WORD6(v78);
  int v70 = HIWORD(v78);
  uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblockDQuad(a1 + 48, (uint64_t)&v55, a7, v48, v46);
  if (v49) {
    char v51 = 4;
  }
  else {
    char v51 = 0;
  }
  if (v47) {
    char v52 = 2;
  }
  else {
    char v52 = 0;
  }
  if (result) {
    char v53 = -8;
  }
  else {
    char v53 = -16;
  }
  *a2 = v53 | v51 | v45 | v52;
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressLossyCompressedSubblockDQuad(unint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5)
{
  char v6 = 0;
  uint64_t v7 = 0;
  uint64_t v261 = *MEMORY[0x263EF8340];
  BOOL v8 = a5 < 2;
  BOOL v9 = a4 < 4 || a5 < 2;
  BOOL v225 = v9;
  int v226 = a3;
  BOOL v10 = a4 < 4 || a5 == 0;
  BOOL v224 = v10;
  BOOL v11 = a4 < 3 || a5 < 2;
  BOOL v223 = v11;
  BOOL v12 = a4 < 3 || a5 == 0;
  BOOL v222 = v12;
  if (a4) {
    BOOL v13 = a5 < 2;
  }
  else {
    BOOL v13 = 1;
  }
  if (a4 < 2) {
    BOOL v8 = 1;
  }
  BOOL v220 = v8;
  BOOL v221 = v13;
  BOOL v14 = a4 < 2 || a5 == 0;
  BOOL v219 = v14;
  do
  {
    uint64_t v15 = 0;
    char v16 = v6;
    unsigned int v17 = AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)3>::compBits[v7];
    *(&v259 + v7) = v17;
    switch(v17)
    {
      case 2u:
        uint64_t v15 = 5;
        break;
      case 0xAu:
        uint64_t v15 = 1;
        break;
      case 0xCu:
        uint64_t v15 = 2;
        break;
      case 0x10u:
        uint64_t v15 = 3;
        break;
      case 0x20u:
        uint64_t v15 = 4;
        break;
      default:
        break;
    }
    unint64_t v18 = 4 * v7;
    *(int *)((char *)&v237 + v18) = v15;
    unsigned int v19 = 1 << (v17 - 1);
    v236[v18 / 4 + 2] = v19;
    if (a3 == 1)
    {
      uint64_t v29 = (_DWORD *)(a2 + v18);
      uint64_t v21 = (unsigned int *)((char *)&v240 + v18);
      if ((*(_DWORD *)(a2 + 4 * v7) ^ v19) == 1) {
        unsigned int v20 = 0;
      }
      else {
        unsigned int v20 = *(_DWORD *)(a2 + 4 * v7) ^ v19;
      }
      *uint64_t v21 = v20;
      if ((v29[2] ^ v19) == 1) {
        unsigned int v22 = 0;
      }
      else {
        unsigned int v22 = v29[2] ^ v19;
      }
      v21[2] = v22;
      if ((v29[4] ^ v19) == 1) {
        unsigned int v23 = 0;
      }
      else {
        unsigned int v23 = v29[4] ^ v19;
      }
      v21[4] = v23;
      if ((v29[6] ^ v19) == 1) {
        unsigned int v24 = 0;
      }
      else {
        unsigned int v24 = v29[6] ^ v19;
      }
      v21[6] = v24;
      if ((v29[8] ^ v19) == 1) {
        unsigned int v25 = 0;
      }
      else {
        unsigned int v25 = v29[8] ^ v19;
      }
      v21[8] = v25;
      if ((v29[10] ^ v19) == 1) {
        unsigned int v26 = 0;
      }
      else {
        unsigned int v26 = v29[10] ^ v19;
      }
      v21[10] = v26;
      unsigned int v27 = v29[12] ^ v19;
      if (v27 == 1) {
        unsigned int v27 = 0;
      }
      v21[12] = v27;
      unsigned int v28 = v29[14] ^ v19;
      if (v28 == 1) {
        unsigned int v28 = 0;
      }
    }
    else if (a3 == 3)
    {
      unsigned int v20 = *(_DWORD *)(a2 + 4 * v7) ^ v19;
      uint64_t v21 = (unsigned int *)((char *)&v240 + v18);
      *uint64_t v21 = v20;
      unsigned int v22 = *(_DWORD *)(a2 + v18 + 8) ^ v19;
      v21[2] = v22;
      unsigned int v23 = *(_DWORD *)(a2 + v18 + 16) ^ v19;
      v21[4] = v23;
      unsigned int v24 = *(_DWORD *)(a2 + v18 + 24) ^ v19;
      v21[6] = v24;
      unsigned int v25 = *(_DWORD *)(a2 + v18 + 32) ^ v19;
      v21[8] = v25;
      unsigned int v26 = *(_DWORD *)(a2 + v18 + 40) ^ v19;
      v21[10] = v26;
      unsigned int v27 = *(_DWORD *)(a2 + v18 + 48) ^ v19;
      v21[12] = v27;
      unsigned int v28 = *(_DWORD *)(a2 + v18 + 56) ^ v19;
    }
    else
    {
      unsigned int v20 = *(_DWORD *)(a2 + 4 * v7);
      uint64_t v21 = (unsigned int *)((char *)&v240 + v18);
      *uint64_t v21 = v20;
      unsigned int v22 = *(_DWORD *)(a2 + v18 + 8);
      v21[2] = v22;
      unsigned int v23 = *(_DWORD *)(a2 + v18 + 16);
      v21[4] = v23;
      unsigned int v24 = *(_DWORD *)(a2 + v18 + 24);
      v21[6] = v24;
      unsigned int v25 = *(_DWORD *)(a2 + v18 + 32);
      v21[8] = v25;
      unsigned int v26 = *(_DWORD *)(a2 + v18 + 40);
      v21[10] = v26;
      unsigned int v27 = *(_DWORD *)(a2 + v18 + 48);
      v21[12] = v27;
      unsigned int v28 = *(_DWORD *)(a2 + v18 + 56);
    }
    v21[14] = v28;
    int16x8_t v30 = &v258[v18 / 4 + 2];
    v258[v7 + 2] = v20;
    v258[v7 + 4] = v20;
    v258[v7] = 0;
    if (v219)
    {
      unsigned int v31 = v20;
      if (v221) {
        goto LABEL_58;
      }
    }
    else
    {
      unsigned int v31 = v20;
      if (v22 < v20)
      {
        v258[v7] = 1;
        v258[v7 + 4] = v22;
        unsigned int v31 = v22;
      }
      if (v20 >= v22) {
        int16x8_t v32 = &v258[v18 / 4 + 2];
      }
      else {
        int16x8_t v32 = (unsigned int *)(&v242 + v7);
      }
      unsigned int v20 = *v32;
      *int16x8_t v30 = *v32;
      if (v221)
      {
LABEL_58:
        if (v220) {
          goto LABEL_59;
        }
        goto LABEL_76;
      }
    }
    if (v23 < v31)
    {
      v258[v7] = 2;
      v258[v7 + 4] = v23;
      unsigned int v31 = v23;
    }
    if (v20 >= v23) {
      int16x8_t v33 = &v258[v18 / 4 + 2];
    }
    else {
      int16x8_t v33 = (unsigned int *)(&v244 + v7);
    }
    unsigned int v20 = *v33;
    *int16x8_t v30 = *v33;
    if (v220)
    {
LABEL_59:
      if (v222) {
        goto LABEL_60;
      }
      goto LABEL_82;
    }
LABEL_76:
    if (v24 < v31)
    {
      v258[v7] = 3;
      v258[v7 + 4] = v24;
      unsigned int v31 = v24;
    }
    if (v20 >= v24) {
      int8x16_t v34 = &v258[v18 / 4 + 2];
    }
    else {
      int8x16_t v34 = (unsigned int *)(&v246 + v7);
    }
    unsigned int v20 = *v34;
    *int16x8_t v30 = *v34;
    if (v222)
    {
LABEL_60:
      if (v224) {
        goto LABEL_61;
      }
      goto LABEL_88;
    }
LABEL_82:
    if (v25 < v31)
    {
      v258[v7] = 4;
      v258[v7 + 4] = v25;
      unsigned int v31 = v25;
    }
    if (v20 >= v25) {
      uint64_t v35 = &v258[v18 / 4 + 2];
    }
    else {
      uint64_t v35 = (unsigned int *)(&v248 + v7);
    }
    unsigned int v20 = *v35;
    *int16x8_t v30 = *v35;
    if (v224)
    {
LABEL_61:
      if (v223) {
        goto LABEL_62;
      }
      goto LABEL_94;
    }
LABEL_88:
    if (v26 < v31)
    {
      v258[v7] = 5;
      v258[v7 + 4] = v26;
      unsigned int v31 = v26;
    }
    if (v20 >= v26) {
      int v36 = &v258[v18 / 4 + 2];
    }
    else {
      int v36 = (unsigned int *)(&v250 + v7);
    }
    unsigned int v20 = *v36;
    *int16x8_t v30 = *v36;
    if (v223)
    {
LABEL_62:
      if (v225) {
        goto LABEL_105;
      }
LABEL_100:
      if (v28 < v31)
      {
        v258[v7] = 7;
        v258[v7 + 4] = v28;
        unsigned int v31 = v28;
      }
      int16x8_t v38 = (unsigned int *)(&v254 + v7);
      if (v20 >= v28) {
        int16x8_t v38 = v30;
      }
      unsigned int v20 = *v38;
      *int16x8_t v30 = *v38;
      goto LABEL_105;
    }
LABEL_94:
    if (v27 < v31)
    {
      v258[v7] = 6;
      v258[v7 + 4] = v27;
      unsigned int v31 = v27;
    }
    if (v20 >= v27) {
      int16x8_t v37 = &v258[v18 / 4 + 2];
    }
    else {
      int16x8_t v37 = (unsigned int *)(&v252 + v7);
    }
    unsigned int v20 = *v37;
    *int16x8_t v30 = *v37;
    if (!v225) {
      goto LABEL_100;
    }
LABEL_105:
    unsigned int v39 = __clz(v20 - v31);
    unsigned int v40 = AGX::AppleCompressionGen2::PixelFormatInfo<(AGX::AppleCompressionGen2::PixelFormat)11,(AGXTextureFootprint)3>::computeDquadMode(v17, 32 - v39, v31, v20);
    *(&v256 + v7) = v40;
    a3 = v226;
    if ((v226 | 2) != 3)
    {
      BOOL v41 = 0;
      uint64_t v42 = v15;
LABEL_110:
      unsigned int v43 = a5;
      goto LABEL_111;
    }
    BOOL v41 = 0;
    uint64_t v42 = v15;
    if (v20 < v19) {
      goto LABEL_110;
    }
    unsigned int v43 = a5;
    if (v31 < v19) {
      BOOL v41 = kDQuadParamTable[160 * v42 + 8 + 10 * v40] == 0;
    }
LABEL_111:
    if (v40 >= kDquadTransition[v42] || v41)
    {
      unsigned int v44 = kDQuadParamTable[160 * v42 + 4 + 10 * v40] - v41;
      if (v41) {
        int v45 = 0;
      }
      else {
        int v45 = -2;
      }
      BOOL v50 = v17 >= v44;
      unsigned int v46 = v17 - v44;
      BOOL v71 = v46 != 0 && v50;
      int v47 = v31 & ~(-1 << v46);
      if (!v71) {
        int v47 = 0;
      }
      int v48 = v47 + v45;
      BOOL v71 = v48 < 1;
      unsigned int v49 = __clz(v48 + v20 - v31);
      BOOL v50 = v71 || v49 >= v39;
      if (v50)
      {
        if (v17 != 32) {
          goto LABEL_22;
        }
      }
      else
      {
        *(&v256 + v7) = ++v40;
        if (v17 != 32) {
          goto LABEL_22;
        }
      }
      unsigned int v51 = kDquadMaxMode[v42];
      if (v51 >= v40) {
        unsigned int v51 = v40;
      }
      *(&v256 + v7) = v51;
    }
LABEL_22:
    char v6 = 1;
    uint64_t v7 = 1u;
  }
  while ((v16 & 1) == 0);
  int v53 = v237;
  int v52 = v238;
  unsigned int v54 = v256;
  unsigned int v55 = v257;
  BOOL v57 = v257 >= v256;
  BOOL v58 = v257 < v256;
  int v59 = kDQuadParamTable[160 * v238 + 6 + 10 * v257];
  int v234 = kDQuadParamTable[160 * v237 + 6 + 10 * v256];
  int v56 = v234;
  int v235 = v59;
  v236[0] = v234;
  v236[1] = v59;
  if (*(&v256 + v57) == *(&v256 + v58))
  {
    int v60 = v234;
  }
  else
  {
    int v61 = *(_DWORD *)((unint64_t)v236 | (4 * v58));
    int v60 = v234;
    if (v61 >= 1)
    {
      *(_DWORD *)((unint64_t)&v234 | (4 * v58)) = 0;
      *(_DWORD *)((unint64_t)&v234 | (4 * v57)) += v61;
      int v60 = v234;
    }
  }
  int v62 = &kDQuadParamTable[160 * v53 + 10 * v54];
  unint64_t v63 = *((void *)v62 + 1);
  unsigned int v65 = v62[4];
  unsigned int v64 = v62[5];
  if (a4) {
    BOOL v66 = v43 == 0;
  }
  else {
    BOOL v66 = 1;
  }
  int v67 = v66;
  int v218 = v67;
  unsigned int v232 = v65;
  unsigned int v230 = v64;
  int v68 = v60 - v56;
  if (v68 < 0)
  {
    if (kDQuadParamTable[160 * v53 + 7 + 10 * v54] < -v68)
    {
      unsigned int v230 = --v64;
      if (!kDQuadParamTable[160 * v53 + 8 + 10 * v54])
      {
        int v69 = -1;
LABEL_142:
        unsigned int v232 = v69 + v65;
      }
    }
  }
  else if (v68)
  {
    v64 += v68;
    unsigned int v230 = v64;
    int v69 = v68;
    goto LABEL_142;
  }
  BOOL v71 = v53 == 5 && v54 == 1 && v68 < 2;
  int v72 = v71;
  if (v226 == 4)
  {
    if (v53 == 3) {
      int v73 = 31744;
    }
    else {
      int v73 = 0;
    }
    if (v53 == 4) {
      int v74 = 2139095040;
    }
    else {
      int v74 = v73;
    }
    int v75 = 1 << (v259 - 1);
    if (v67)
    {
      if (v219) {
        goto LABEL_163;
      }
LABEL_310:
      if ((v74 & ~v242) == 0 || v242 == v75) {
        int v72 = 1;
      }
      if (!v221) {
        goto LABEL_317;
      }
LABEL_164:
      if (v220) {
        goto LABEL_165;
      }
LABEL_324:
      if ((v74 & ~v246) == 0 || v246 == v75) {
        int v72 = 1;
      }
      if (!v222) {
        goto LABEL_331;
      }
LABEL_166:
      if (v224) {
        goto LABEL_167;
      }
LABEL_338:
      if ((v74 & ~v250) == 0 || v250 == v75) {
        int v72 = 1;
      }
      if (!v223) {
        goto LABEL_345;
      }
LABEL_168:
      if (!v225) {
        goto LABEL_169;
      }
    }
    else
    {
      if ((v74 & ~v240) == 0 || v240 == v75) {
        int v72 = 1;
      }
      if (!v219) {
        goto LABEL_310;
      }
LABEL_163:
      if (v221) {
        goto LABEL_164;
      }
LABEL_317:
      if ((v74 & ~v244) == 0 || v244 == v75) {
        int v72 = 1;
      }
      if (!v220) {
        goto LABEL_324;
      }
LABEL_165:
      if (v222) {
        goto LABEL_166;
      }
LABEL_331:
      if ((v74 & ~v248) == 0 || v248 == v75) {
        int v72 = 1;
      }
      if (!v224) {
        goto LABEL_338;
      }
LABEL_167:
      if (v223) {
        goto LABEL_168;
      }
LABEL_345:
      if ((v74 & ~v252) == 0 || v252 == v75) {
        int v72 = 1;
      }
      if (!v225)
      {
LABEL_169:
        if ((v74 & ~v254) == 0 || v254 == v75) {
          int v72 = 1;
        }
      }
    }
  }
  BOOL v71 = v63 >> v64 > 0x100;
  int v77 = v67;
  if (v71) {
    int v77 = 1;
  }
  int v78 = v77 | v72;
  uint64_t v79 = &kDQuadParamTable[160 * v52 + 10 * v55];
  unint64_t v80 = *((void *)v79 + 1);
  unsigned int v81 = v79[4];
  unsigned int v82 = v79[5];
  unsigned int v233 = v81;
  unsigned int v231 = v82;
  int v83 = v235 - v59;
  if (v235 - v59 < 0)
  {
    if (kDQuadParamTable[160 * v52 + 7 + 10 * v55] < v59 - v235)
    {
      unsigned int v231 = --v82;
      if (!kDQuadParamTable[160 * v52 + 8 + 10 * v55])
      {
        int v84 = -1;
LABEL_181:
        unsigned int v233 = v84 + v81;
      }
    }
  }
  else if (v235 != v59)
  {
    v82 += v83;
    unsigned int v231 = v82;
    int v84 = v235 - v59;
    goto LABEL_181;
  }
  if (v52 == 5 && v55 == 1 && v83 < 2) {
    int v78 = 1;
  }
  if (v226 == 4)
  {
    if (v52 == 3) {
      int v85 = 31744;
    }
    else {
      int v85 = 0;
    }
    if (v52 == 4) {
      int v85 = 2139095040;
    }
    int v86 = 1 << (v260 - 1);
    if (v67)
    {
      if (v219) {
        goto LABEL_196;
      }
LABEL_360:
      if ((v85 & ~v243) == 0 || v243 == v86) {
        int v78 = 1;
      }
      if (!v221) {
        goto LABEL_367;
      }
LABEL_197:
      if (v220) {
        goto LABEL_198;
      }
LABEL_374:
      if ((v85 & ~v247) == 0 || v247 == v86) {
        int v78 = 1;
      }
      if (!v222) {
        goto LABEL_381;
      }
LABEL_199:
      if (v224) {
        goto LABEL_200;
      }
LABEL_388:
      if ((v85 & ~v251) == 0 || v251 == v86) {
        int v78 = 1;
      }
      if (!v223) {
        goto LABEL_395;
      }
LABEL_201:
      if (!v225) {
        goto LABEL_202;
      }
    }
    else
    {
      if ((v85 & ~v241) == 0 || v241 == v86) {
        int v78 = 1;
      }
      if (!v219) {
        goto LABEL_360;
      }
LABEL_196:
      if (v221) {
        goto LABEL_197;
      }
LABEL_367:
      if ((v85 & ~v245) == 0 || v245 == v86) {
        int v78 = 1;
      }
      if (!v220) {
        goto LABEL_374;
      }
LABEL_198:
      if (v222) {
        goto LABEL_199;
      }
LABEL_381:
      if ((v85 & ~v249) == 0 || v249 == v86) {
        int v78 = 1;
      }
      if (!v224) {
        goto LABEL_388;
      }
LABEL_200:
      if (v223) {
        goto LABEL_201;
      }
LABEL_395:
      if ((v85 & ~v253) == 0 || v253 == v86) {
        int v78 = 1;
      }
      if (!v225)
      {
LABEL_202:
        if ((v85 & ~v255) == 0 || v255 == v86) {
          int v78 = 1;
        }
      }
    }
  }
  char v88 = 0;
  uint64_t v89 = 0;
  int v90 = v67;
  if (v80 >> v82 > 0x100) {
    int v90 = 1;
  }
  int v213 = v90;
  int v214 = v78;
  uint64_t v229 = 0;
  uint64_t v228 = 0;
  memset(v227, 0, sizeof(v227));
  do
  {
    uint64_t v91 = 0;
    unsigned int v92 = 0;
    unsigned int v93 = *(&v259 + v89);
    unsigned int v94 = *(&v232 + v89);
    if (v93 < v94) {
      unsigned int v94 = *(&v259 + v89);
    }
    *(&v232 + v89) = v94;
    int16x8_t v95 = &kDQuadParamTable[160 * *(&v237 + v89) + 10 * *(&v256 + v89)];
    if (v95[5]) {
      unsigned int v96 = v93;
    }
    else {
      unsigned int v96 = 0;
    }
    if (v96 >= *(&v230 + v89)) {
      int v97 = *(&v230 + v89);
    }
    else {
      int v97 = v96;
    }
    int v98 = v258[v89 + 4] & (-1 << (v93 - v94));
    int16x8_t v99 = &v240 + v89;
    int v100 = *v99 - v98;
    uint64_t v101 = 32 * v89;
    int16x8_t v102 = &v239[32 * v89];
    if (v218) {
      int v100 = 0;
    }
    int v103 = v99[2] - v98;
    if (v219) {
      int v103 = 0;
    }
    *int16x8_t v102 = v100;
    v102[1] = v103;
    int v104 = v99[4] - v98;
    if (v221) {
      int v104 = 0;
    }
    int v105 = v99[6] - v98;
    if (v220) {
      int v105 = 0;
    }
    v102[2] = v104;
    v102[3] = v105;
    int v106 = v99[8] - v98;
    if (v222) {
      int v106 = 0;
    }
    int v107 = v99[10] - v98;
    if (v224) {
      int v107 = 0;
    }
    v102[4] = v106;
    v102[5] = v107;
    int v108 = v99[12] - v98;
    if (v223) {
      int v108 = 0;
    }
    int v109 = v99[14] - v98;
    if (v225) {
      int v109 = 0;
    }
    v102[6] = v108;
    v102[7] = v109;
    char v110 = v88;
    uint64_t v111 = -1 << v93;
    *(&v230 + v89) = v97;
    unint64_t v112 = *((void *)v95 + 1);
    *((_DWORD *)&v229 + v89) = v98;
    unint64_t v113 = v112 >> v97;
    int v114 = ~v111;
    if (v113 <= 1) {
      unint64_t v115 = 1;
    }
    else {
      unint64_t v115 = v113;
    }
    uint64_t v116 = 2 * v258[v89];
    do
    {
      if (v116 != v91)
      {
        if (v97) {
          unint64_t v117 = *(unsigned int *)&v239[v101] / v115;
        }
        else {
          LODWORD(v117) = 0;
        }
        int16x8_t v118 = (int *)v227 + 7 * v89 + v92;
        *int16x8_t v118 = v117;
        if (v113 >= 2)
        {
          unint64_t v119 = *(unsigned int *)&v239[v101];
          if (v119)
          {
            if (v119 / v115 * v115 == v119 && ((v119 / v115) & 1) != 0)
            {
              if (v98 || v117 != 1)
              {
                if ((v226 | 2) != 3
                  || (uint64_t v121 = v99[v91], v122 = v236[v89 + 2], v121 != v122)
                  && ((v226 | 2) != 3 || v115 + v122 != v121))
                {
                  LODWORD(v117) = v117 - 1;
                  *int16x8_t v118 = v117;
                }
              }
              else
              {
                LODWORD(v117) = 1;
              }
            }
          }
        }
        if ((unint64_t)v117 >> v97 || v99[v91] == v114) {
          *int16x8_t v118 = ~(-1 << v97);
        }
        if (*((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v91 + 1) >= v43
          || *((unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + v91) >= a4)
        {
          *int16x8_t v118 = 0;
        }
        ++v92;
      }
      v101 += 4;
      v91 += 2;
    }
    while (v91 != 16);
    char v88 = 1;
    uint64_t v89 = 1;
  }
  while ((v110 & 1) == 0);
  uint64_t result = v213 | v214;
  int16x8_t v125 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v126 = 8 * (a1 & 7);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (result == 1)
  {
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    unsigned int v129 = v259;
    unsigned int v130 = v260;
    uint64_t v131 = v259 - 8;
    uint64_t v132 = v260 - 8;
    uint64_t v133 = 8 * (a1 & 7);
    while (1)
    {
      int16x8_t v134 = (unsigned __int8 *)&AGX::AppleCompressionGen2::kSampleOffsets + 2 * v127;
      BOOL v135 = v134[1] >= v43 || *v134 >= a4;
      char v136 = v135;
      if (v135)
      {
        unint64_t v137 = 0;
        if (v131 > 0x100) {
          goto LABEL_289;
        }
      }
      else
      {
        unint64_t v137 = (unint64_t)*(&v240 + 2 * v127) >> 8;
        if (v131 > 0x100) {
          goto LABEL_289;
        }
      }
      if (v129 != 8 && (unint64_t)(v133 - v126 + (v128 << 6) + v131) <= 0x80)
      {
        uint64_t v138 = 0;
        unint64_t v139 = v129 - 8;
        do
        {
          unint64_t v140 = 64 - v133;
          if (64 - v133 >= v139) {
            unint64_t v140 = v139;
          }
          v125[v128] |= ((v137 >> v138) & ~(-1 << v140)) << v133;
          v138 += v140;
          unint64_t v141 = v140 + v133;
          v128 += v141 >> 6;
          uint64_t v133 = v141 & 0x3F;
          v139 -= v140;
        }
        while (v139);
      }
LABEL_289:
      if (v136)
      {
        unint64_t v142 = 0;
        if (v132 <= 0x100) {
          goto LABEL_293;
        }
      }
      else
      {
        unint64_t v142 = (unint64_t)*(&v240 + 2 * v127 + 1) >> 8;
        if (v132 <= 0x100)
        {
LABEL_293:
          if (v130 != 8 && (unint64_t)(v133 - v126 + (v128 << 6) + v132) <= 0x80)
          {
            uint64_t v143 = 0;
            unint64_t v144 = v130 - 8;
            do
            {
              unint64_t v145 = 64 - v133;
              if (64 - v133 >= v144) {
                unint64_t v145 = v144;
              }
              v125[v128] |= ((v142 >> v143) & ~(-1 << v145)) << v133;
              v143 += v145;
              unint64_t v146 = v145 + v133;
              v128 += v146 >> 6;
              uint64_t v133 = v146 & 0x3F;
              v144 -= v145;
            }
            while (v144);
          }
        }
      }
      if (++v127 == 8) {
        return result;
      }
    }
  }
  unsigned int v148 = v256;
  unsigned int v147 = v257;
  unint64_t v149 = ((unint64_t)(v256 & 0xF) << v126) | *v125;
  *int16x8_t v125 = v149;
  uint64_t v150 = v126 | 4;
  if ((v126 | 4uLL) - v126 - 125 < 0xFFFFFFFFFFFFFF7FLL)
  {
    unint64_t v151 = 0;
    unsigned int v152 = v259;
    if (!v148) {
      goto LABEL_404;
    }
    goto LABEL_408;
  }
  *int16x8_t v125 = ((unint64_t)(v147 & 0xF) << v150) | v149;
  unint64_t v151 = (unint64_t)(v126 + 8) >> 6;
  uint64_t v150 = (v126 + 8) & 0x38;
  unsigned int v152 = v259;
  if (v148) {
    goto LABEL_408;
  }
LABEL_404:
  if (v152 == 2 || v152 >= 0x10)
  {
LABEL_408:
    unsigned int v169 = v232;
    if (v232 <= 0x100 && v232 && v150 - v126 + (v151 << 6) + v232 <= 0x80)
    {
      uint64_t v170 = 0;
      unint64_t v171 = v229 >> (v152 - v232);
      unint64_t v172 = v232;
      do
      {
        unint64_t v173 = 64 - v150;
        if (64 - v150 >= v172) {
          unint64_t v173 = v172;
        }
        v125[v151] |= ((v171 >> v170) & ~(-1 << v173)) << v150;
        v170 += v173;
        unint64_t v174 = v173 + v150;
        v151 += v174 >> 6;
        uint64_t v150 = v174 & 0x3F;
        v172 -= v173;
      }
      while (v172);
    }
    int v167 = v169 + 8;
    unsigned int v168 = v260;
    if (v147) {
      goto LABEL_416;
    }
LABEL_469:
    if (v168 == 2 || v168 >= 0x10) {
      goto LABEL_416;
    }
  }
  else
  {
    int v167 = 8;
    unsigned int v168 = v260;
    if (!v147) {
      goto LABEL_469;
    }
LABEL_416:
    unsigned int v175 = v233;
    if (v233 <= 0x100 && v233 && v150 - v126 + (v151 << 6) + v233 <= 0x80)
    {
      uint64_t v176 = 0;
      unint64_t v177 = (HIDWORD(v229) >> (v168 - v233));
      unint64_t v178 = v233;
      do
      {
        unint64_t v179 = 64 - v150;
        if (64 - v150 >= v178) {
          unint64_t v179 = v178;
        }
        v125[v151] |= ((v177 >> v176) & ~(-1 << v179)) << v150;
        v176 += v179;
        unint64_t v180 = v179 + v150;
        v151 += v180 >> 6;
        uint64_t v150 = v180 & 0x3F;
        v178 -= v179;
      }
      while (v178);
    }
    v167 += v175;
  }
  unint64_t v181 = v230;
  if (v230)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0x80)
    {
      uint64_t v182 = 0;
      unint64_t v183 = v258[0];
      unint64_t v184 = 3;
      do
      {
        unint64_t v185 = 64 - v150;
        if (64 - v150 >= v184) {
          unint64_t v185 = v184;
        }
        v125[v151] |= ((v183 >> v182) & ~(-1 << v185)) << v150;
        v182 += v185;
        unint64_t v186 = v185 + v150;
        v151 += v186 >> 6;
        uint64_t v150 = v186 & 0x3F;
        v184 -= v185;
      }
      while (v184);
    }
    v167 += 3;
  }
  unint64_t v187 = v231;
  if (v231)
  {
    if (v150 - v126 + (v151 << 6) + 3 <= 0x80)
    {
      uint64_t v188 = 0;
      unint64_t v189 = v258[1];
      unint64_t v190 = 3;
      do
      {
        unint64_t v191 = 64 - v150;
        if (64 - v150 >= v190) {
          unint64_t v191 = v190;
        }
        v125[v151] |= ((v189 >> v188) & ~(-1 << v191)) << v150;
        v188 += v191;
        unint64_t v192 = v191 + v150;
        v151 += v192 >> 6;
        uint64_t v150 = v192 & 0x3F;
        v190 -= v191;
      }
      while (v190);
    }
    v167 += 3;
  }
  unsigned int v193 = 128 - v167;
  unsigned int v194 = (128 - v167) / 7u;
  unint64_t v195 = v193 % 7;
  if ((v195 - 257) >= 0xFFFFFF00 && v150 - v126 + (v151 << 6) + v195 <= 0x80)
  {
    do
    {
      unint64_t v196 = 64 - v150;
      if (64 - v150 >= v195) {
        unint64_t v196 = v195;
      }
      unint64_t v197 = v196 + v150;
      v151 += v197 >> 6;
      uint64_t v150 = v197 & 0x3F;
      v195 -= v196;
    }
    while (v195);
  }
  uint64_t v198 = 0;
  int v199 = v187 + v181;
  while (2)
  {
    if (v181 && v181 <= 0x100 && v150 - v126 + (v151 << 6) + v181 <= 0x80)
    {
      uint64_t v200 = 0;
      unint64_t v201 = *((unsigned int *)v227 + v198);
      unint64_t v202 = v181;
      do
      {
        unint64_t v203 = 64 - v150;
        if (64 - v150 >= v202) {
          unint64_t v203 = v202;
        }
        v125[v151] |= ((v201 >> v200) & ~(-1 << v203)) << v150;
        v200 += v203;
        unint64_t v204 = v203 + v150;
        v151 += v204 >> 6;
        uint64_t v150 = v204 & 0x3F;
        v202 -= v203;
      }
      while (v202);
    }
    if (v187)
    {
      if (v187 <= 0x100 && v150 - v126 + (v151 << 6) + v187 <= 0x80)
      {
        uint64_t v205 = 0;
        unint64_t v206 = *((unsigned int *)&v227[1] + v198 + 3);
        unint64_t v207 = v187;
        do
        {
          unint64_t v208 = 64 - v150;
          if (64 - v150 >= v207) {
            unint64_t v208 = v207;
          }
          v125[v151] |= ((v206 >> v205) & ~(-1 << v208)) << v150;
          v205 += v208;
          unint64_t v209 = v208 + v150;
          v151 += v209 >> 6;
          uint64_t v150 = v209 & 0x3F;
          v207 -= v208;
        }
        while (v207);
      }
      unint64_t v210 = v194 - v199;
      if (v194 != v199)
      {
LABEL_462:
        if (v210 <= 0x100 && v150 - v126 + (v151 << 6) + v210 <= 0x80)
        {
          do
          {
            unint64_t v211 = 64 - v150;
            if (64 - v150 >= v210) {
              unint64_t v211 = v210;
            }
            unint64_t v212 = v211 + v150;
            v151 += v212 >> 6;
            uint64_t v150 = v212 & 0x3F;
            v210 -= v211;
          }
          while (v210);
        }
      }
    }
    else
    {
      unint64_t v210 = v194 - v181;
      if (v194 != v181) {
        goto LABEL_462;
      }
    }
    if (++v198 != 7) {
      continue;
    }
    return result;
  }
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(float32x4_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, int32x4_t a6, int32x4_t a7)
{
  uint64_t v357 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t result = 0;
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    BOOL v13 = (_OWORD *)((char *)a1->f32 + a2);
    _OWORD *v13 = 0u;
    v13[1] = 0u;
    BOOL v14 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    _OWORD *v14 = 0u;
    v14[1] = 0u;
    uint64_t v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
LABEL_107:
    *uint64_t v15 = v12;
    v15[1] = v12;
    return result;
  }
  char v8 = a4;
  if (a4 >= 0xF0)
  {
    if (a4) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(a3, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(a3, (uint64_t)&v342, a5);
    }
    int v324 = HIDWORD(v342);
    int v325 = (unsigned __int16)v342;
    int v322 = v344;
    int v323 = v343;
    int v338 = v346;
    int v339 = v345;
    int v334 = v348;
    int v335 = v347;
    int v330 = v350;
    int v331 = v349;
    int v328 = v352;
    int v329 = v351;
    int v336 = v354;
    int v337 = v353;
    uint64_t v20 = a3 + 16;
    int v332 = v356;
    int v333 = v355;
    if ((v8 & 2) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v20, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v20, (uint64_t)&v342, a5);
    }
    int v326 = HIDWORD(v342);
    int v327 = (unsigned __int16)v342;
    int v320 = v344;
    int v321 = v343;
    int v318 = v346;
    int v319 = v345;
    int v316 = v348;
    int v317 = v347;
    int v314 = v350;
    int v315 = v349;
    int v312 = v352;
    int v313 = v351;
    int v310 = v354;
    int v311 = v353;
    uint64_t v21 = a3 + 32;
    int v308 = v356;
    int v309 = v355;
    int32x4_t v341 = (int *)a1;
    if ((v8 & 4) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v21, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v21, (uint64_t)&v342, a5);
    }
    int v306 = HIDWORD(v342);
    int v307 = (unsigned __int16)v342;
    int v304 = v344;
    int v305 = v343;
    int v302 = v346;
    int v303 = v345;
    int v300 = v348;
    int v301 = v347;
    int v22 = v349;
    int v23 = v350;
    int v24 = v351;
    int v25 = v352;
    int v26 = v353;
    int v27 = v354;
    int v28 = v355;
    uint64_t v29 = a3 + 48;
    int v30 = v356;
    if ((v8 & 8) != 0) {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockFallback(v29, (uint64_t)&v342, a5);
    }
    else {
      AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)0,(AGXTextureFootprint)3>::decompressLossyCompressedSubblockDQuad(v29, (uint64_t)&v342, a5);
    }
    int v31 = v28 | (v30 << 16);
    int v32 = v26 | (v27 << 16);
    v341[4] = v307 | (v306 << 16);
    v341[5] = v305 | (v304 << 16);
    v341[6] = v22 | (v23 << 16);
    v341[7] = v24 | (v25 << 16);
    int v33 = (unsigned __int16)v342;
    int v34 = HIDWORD(v342);
    *int32x4_t v341 = v325 | (v324 << 16);
    v341[1] = v323 | (v322 << 16);
    int v35 = v343;
    int v36 = v344;
    int v37 = v345;
    int v38 = v346;
    v341[2] = v331 | (v330 << 16);
    v341[3] = v329 | (v328 << 16);
    int v39 = v347;
    int v40 = v348;
    int v41 = v349;
    int v42 = v350;
    unsigned int v43 = (int *)((char *)v341 + a2);
    *unsigned int v43 = v339 | (v338 << 16);
    v43[1] = v335 | (v334 << 16);
    int v44 = v351;
    int v45 = v352;
    int v46 = v353;
    int v47 = v354;
    v43[2] = v337 | (v336 << 16);
    v43[3] = v333 | (v332 << 16);
    int v48 = v355;
    int v49 = v356;
    v43[4] = v303 | (v302 << 16);
    v43[5] = v301 | (v300 << 16);
    v43[6] = v32;
    v43[7] = v31;
    BOOL v50 = (int *)((char *)v341 + a2 + a2);
    *BOOL v50 = v327 | (v326 << 16);
    v50[1] = v321 | (v320 << 16);
    v50[2] = v315 | (v314 << 16);
    v50[3] = v313 | (v312 << 16);
    v50[4] = v33 | (v34 << 16);
    v50[5] = v35 | (v36 << 16);
    v50[6] = v41 | (v42 << 16);
    v50[7] = v44 | (v45 << 16);
    unsigned int v51 = (int *)((char *)v50 + a2);
    *unsigned int v51 = v319 | (v318 << 16);
    v51[1] = v317 | (v316 << 16);
    v51[2] = v311 | (v310 << 16);
    v51[3] = v309 | (v308 << 16);
    v51[4] = v37 | (v38 << 16);
    v51[5] = v39 | (v40 << 16);
    v51[6] = v46 | (v47 << 16);
    v51[7] = v48 | (v49 << 16);
    return 64;
  }
  if (a4 == 127)
  {
    int64x2_t v52 = *(int64x2_t *)a3;
    int64x2_t v53 = *(int64x2_t *)(a3 + 16);
    int64x2_t v54 = *(int64x2_t *)(a3 + 32);
    int64x2_t v55 = *(int64x2_t *)(a3 + 48);
    int64x2_t v56 = *(int64x2_t *)(a3 + 64);
    int64x2_t v57 = *(int64x2_t *)(a3 + 80);
    int64x2_t v58 = *(int64x2_t *)(a3 + 96);
    int64x2_t v59 = *(int64x2_t *)(a3 + 112);
    int v60 = (int64x2_t *)((char *)a1 + a2);
    *(int64x2_t *)a1 = vzip1q_s64(*(int64x2_t *)a3, v53);
    a1[1] = (float32x4_t)vzip1q_s64(v56, v57);
    int v61 = (int64x2_t *)((char *)a1 + 2 * a2);
    *int v60 = vzip2q_s64(v52, v53);
    v60[1] = vzip2q_s64(v56, v57);
    *int v61 = vzip1q_s64(v54, v55);
    v61[1] = vzip1q_s64(v58, v59);
    int v62 = (int64x2_t *)((char *)v61 + a2);
    *int v62 = vzip2q_s64(v54, v55);
    v62[1] = vzip2q_s64(v58, v59);
    return 128;
  }
  if (a4 == 3)
  {
    float32x4_t v16 = vld1q_dup_f32((const float *)a3);
    *a1 = v16;
    a1[1] = v16;
    unsigned int v17 = (float32x4_t *)((char *)a1 + a2);
    *unsigned int v17 = v16;
    v17[1] = v16;
    unint64_t v18 = (float32x4_t *)((char *)a1 + 2 * a2);
    float32x4_t *v18 = v16;
    v18[1] = v16;
    unsigned int v19 = (float32x4_t *)((char *)a1 + 2 * a2 + a2);
    float32x4_t *v19 = v16;
    v19[1] = v16;
    return 4;
  }
  unint64_t v63 = 8 * (a3 & 7);
  unint64_t v64 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = v63 + 18;
  uint64_t v66 = *(void *)(a3 & 0xFFFFFFFFFFFFFFF8) >> v63;
  if (v63 >= 0x2F) {
    v66 |= *(void *)(v64 + 8) << (-8 * (a3 & 7u));
  }
  a6.i32[0] = v66;
  a6.i32[1] = (unsigned __int16)v66 >> 5;
  *(int8x8_t *)a6.i8 = vand_s8(*(int8x8_t *)a6.i8, (int8x8_t)0x1F0000001FLL);
  *(int16x4_t *)a6.i8 = vmovn_s32(a6);
  a7.i32[0] = (unsigned __int16)v66 >> 10;
  a7.i32[1] = v66 >> 14;
  *(int32x2_t *)a7.i8 = vadd_s32((int32x2_t)vand_s8(*(int8x8_t *)a7.i8, (int8x8_t)0xF0000000FLL), (int32x2_t)0x100000001);
  *(int16x4_t *)a7.i8 = vmovn_s32(a7);
  unint64_t v67 = v63 + 50;
  unint64_t v68 = v65 >> 6;
  unint64_t v69 = v65 & 0x3A;
  uint64_t v70 = *(void *)(v64 + 8 * v68) >> v69;
  if (v69 >= 0x21) {
    v70 |= *(void *)(v64 + 8 * v68 + 8) << -(char)v69;
  }
  int8x16_t v71 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a6.i8, 0);
  int8x16_t v72 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a7.i8, 0);
  unint64_t v73 = (8 * (a3 & 7)) | 0x200;
  v74.i64[0] = 0x3000300030003;
  v74.i64[1] = 0x3000300030003;
  int16x8_t v75 = (int16x8_t)vandq_s8(v71, v74);
  int8x16_t v76 = vbicq_s8(v72, (int8x16_t)vceqq_s16(v75, (int16x8_t)v74));
  v74.i64[0] = 0x202020202020202;
  v74.i64[1] = 0x202020202020202;
  int8x16_t v77 = vandq_s8(vbicq_s8((int8x16_t)xmmword_242EA7390, (int8x16_t)vmovl_s16(vceqz_s16((int16x4_t)vand_s8(*(int8x8_t *)v71.i8, (int8x8_t)0x4000400040004)))), v74);
  if (vmaxvq_s8(v77) < 1)
  {
    int v87 = 0;
    v88.i64[0] = -1;
    v88.i64[1] = -1;
    int8x16_t v89 = v76;
    int8x16_t v90 = v76;
    int8x16_t v91 = v76;
    v92.i64[0] = -1;
    v92.i64[1] = -1;
    int8x16_t v93 = v76;
    v94.i64[0] = -1;
    v94.i64[1] = -1;
    v95.i64[0] = -1;
    v95.i64[1] = -1;
  }
  else
  {
    int8x16_t v78 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vpaddq_s8(v77, v77));
    int8x16_t v79 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v78, (int16x8_t)v78));
    unint64_t v80 = vpaddq_s32((int32x4_t)v79, (int32x4_t)v79).u64[0];
    v81.i64[0] = v80;
    v81.i64[1] = HIDWORD(v80);
    int64x2_t v82 = v81;
    unint64_t v83 = vaddvq_s64(v81);
    unint64_t v84 = v67 + v83;
    if (v83 <= 0x80 && v73 >= v84)
    {
      unint64_t v96 = v67 & 0x3A;
      int64x2_t v97 = vaddq_s64(vdupq_n_s64(v96), vzip1q_s64((int64x2_t)0, v82));
      int v98 = (int64x2_t *)(v64 + ((v67 >> 3) & 8));
      int8x16_t v86 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v98, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98->i64[0], 0), (uint64x2_t)vnegq_s64(v97)));
      if (v96 + v83 < 0x81)
      {
        int v87 = 0;
      }
      else
      {
        int v87 = 0;
        int8x16_t v86 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v98[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v97)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v98[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v97))), v86);
      }
      unint64_t v67 = v84;
    }
    else
    {
      int8x16_t v86 = 0uLL;
      int v87 = 1;
    }
    int32x2_t v99 = vzip1_s32(*(int32x2_t *)v79.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
    v100.i64[0] = v99.u32[0];
    v100.i64[1] = v99.u32[1];
    int64x2_t v101 = (int64x2_t)vshlq_u64((uint64x2_t)v86, (uint64x2_t)vnegq_s64(v100));
    *(int32x2_t *)v86.i8 = vmovn_s64((int64x2_t)v86);
    *(int32x2_t *)v101.i8 = vmovn_s64(v101);
    int8x16_t v102 = (int8x16_t)vzip1q_s32((int32x4_t)v86, (int32x4_t)v101);
    int16x8_t v103 = (int16x8_t)vshlq_u32((uint32x4_t)v102, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v78.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v78, v78, 8uLL)))));
    *(int16x4_t *)v102.i8 = vmovn_s32((int32x4_t)v102);
    *(int16x4_t *)v103.i8 = vmovn_s32((int32x4_t)v103);
    int16x8_t v104 = vzip1q_s16((int16x8_t)v102, v103);
    v102.i64[0] = 0x101010101010101;
    v102.i64[1] = 0x101010101010101;
    *(int8x8_t *)v105.i8 = vand_s8(vzip1_s8(vmovn_s16(v104), vmovn_s16((int16x8_t)vshlq_u16((uint16x8_t)v104, (uint16x8_t)vnegq_s16((int16x8_t)vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v77.i8, *(int8x8_t *)v71.i8)))))), vadd_s8((int8x8_t)*(_OWORD *)&vshlq_s8(v102, v77), (int8x8_t)-1));
    v105.i64[1] = v105.i64[0];
    *(int8x8_t *)v105.i8 = vqtbl1_s8(v105, (int8x8_t)0x703060205010400);
    *(int16x4_t *)v104.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 0);
    *(int16x4_t *)v102.i8 = vdup_lane_s16(*(int16x4_t *)v105.i8, 1);
    int8x8_t v106 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 2);
    int8x8_t v107 = (int8x8_t)vdup_lane_s16(*(int16x4_t *)v105.i8, 3);
    int8x16_t v93 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v104.i8);
    int8x16_t v91 = (int8x16_t)vsubw_s8((int16x8_t)v76, *(int8x8_t *)v102.i8);
    int8x16_t v90 = (int8x16_t)vsubw_s8((int16x8_t)v76, v106);
    int8x16_t v89 = (int8x16_t)vsubw_s8((int16x8_t)v76, v107);
    int8x16_t v95 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v104.i8));
    int8x16_t v94 = (int8x16_t)vmovl_s8(vceqz_s8(*(int8x8_t *)v102.i8));
    int8x16_t v92 = (int8x16_t)vmovl_s8(vceqz_s8(v106));
    int8x16_t v88 = (int8x16_t)vmovl_s8(vceqz_s8(v107));
  }
  v108.i64[0] = 0x8000800080008;
  v108.i64[1] = 0x8000800080008;
  int8x16_t v109 = 0uLL;
  int8x16_t v110 = vandq_s8(vextq_s8((int8x16_t)vtstq_s16((int16x8_t)v71, v108), (int8x16_t)0, 0xCuLL), v76);
  int8x16_t v111 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v110, (int16x8_t)v110));
  v108.i64[0] = vpaddq_s32((int32x4_t)v111, (int32x4_t)v111).u64[0];
  v112.i64[0] = v108.u32[0];
  v112.i64[1] = v108.u32[1];
  int64x2_t v113 = v112;
  unint64_t v114 = vaddvq_s64(v112);
  unint64_t v115 = v67 + v114;
  if (v114 <= 0x80 && v73 >= v115)
  {
    unint64_t v117 = v67 & 0x3F;
    int64x2_t v118 = vaddq_s64(vdupq_n_s64(v117), vzip1q_s64((int64x2_t)0, v113));
    unint64_t v119 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v109 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v119, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119->i64[0], 0), (uint64x2_t)vnegq_s64(v118)));
    if (v117 + v114 >= 0x81) {
      int8x16_t v109 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v119[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v118)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v119[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v118))), v109);
    }
    unint64_t v67 = v115;
  }
  else
  {
    int v87 = 1;
  }
  int v120 = v71.i8[0] & 3;
  if (v120 == 2)
  {
    BOOL v121 = v73 < v67 + 8;
    unint64_t v122 = v67 + 16;
    if (v73 >= v67 + 8) {
      v67 += 8;
    }
    if (v122 > v73 || v121) {
      int v87 = 1;
    }
    else {
      v67 += 8;
    }
  }
  int8x16_t v124 = 0uLL;
  int8x16_t v125 = vextq_s8((int8x16_t)0, v93, 0xCuLL);
  int8x16_t v126 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v125, (int16x8_t)v125));
  unint64_t v127 = vpaddq_s32((int32x4_t)v126, (int32x4_t)v126).u64[0];
  v128.i64[0] = v127;
  v128.i64[1] = HIDWORD(v127);
  int64x2_t v129 = v128;
  unint64_t v130 = vaddvq_s64(v128);
  unint64_t v131 = v67 + v130;
  if (v130 <= 0x80 && v73 >= v131)
  {
    unint64_t v134 = v67 & 0x3F;
    int64x2_t v135 = vaddq_s64(vdupq_n_s64(v134), vzip1q_s64((int64x2_t)0, v129));
    char v136 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v133 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v136, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136->i64[0], 0), (uint64x2_t)vnegq_s64(v135)));
    if (v134 + v130 >= 0x81) {
      int8x16_t v133 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v136[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v135)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v136[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v135))), v133);
    }
    unint64_t v67 = v131;
  }
  else
  {
    int v87 = 1;
    int8x16_t v133 = 0uLL;
  }
  int8x16_t v137 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v93, (int16x8_t)v93));
  unint64_t v138 = vpaddq_s32((int32x4_t)v137, (int32x4_t)v137).u64[0];
  v139.i64[0] = v138;
  v139.i64[1] = HIDWORD(v138);
  int64x2_t v140 = v139;
  unint64_t v141 = vaddvq_s64(v139);
  unint64_t v142 = v67 + v141;
  if (v141 <= 0x80 && v73 >= v142)
  {
    unint64_t v144 = v67 & 0x3F;
    int64x2_t v145 = vaddq_s64(vdupq_n_s64(v144), vzip1q_s64((int64x2_t)0, v140));
    unint64_t v146 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v124 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v146, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146->i64[0], 0), (uint64x2_t)vnegq_s64(v145)));
    if (v144 + v141 >= 0x81) {
      int8x16_t v124 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v146[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v145)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v146[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v145))), v124);
    }
    unint64_t v67 = v142;
  }
  else
  {
    int v87 = 1;
  }
  int8x16_t v147 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v91, (int16x8_t)v91));
  unint64_t v148 = vpaddq_s32((int32x4_t)v147, (int32x4_t)v147).u64[0];
  v149.i64[0] = v148;
  v149.i64[1] = HIDWORD(v148);
  int64x2_t v150 = v149;
  unint64_t v151 = vaddvq_s64(v149);
  unint64_t v152 = v67 + v151;
  int8x16_t v153 = 0uLL;
  if (v151 <= 0x80 && v73 >= v152)
  {
    unint64_t v156 = v67 & 0x3F;
    int64x2_t v157 = vaddq_s64(vdupq_n_s64(v156), vzip1q_s64((int64x2_t)0, v150));
    int16x8_t v158 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
    int8x16_t v155 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v158, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158->i64[0], 0), (uint64x2_t)vnegq_s64(v157)));
    if (v156 + v151 >= 0x81) {
      int8x16_t v155 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v158[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v157)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v158[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v157))), v155);
    }
    unint64_t v67 = v152;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  else
  {
    int v87 = 1;
    int8x16_t v155 = 0uLL;
    if (v151 > 0x80) {
      goto LABEL_82;
    }
  }
  unint64_t v159 = v67 + v151;
  if (v73 < v67 + v151)
  {
LABEL_82:
    int v87 = 1;
    unint64_t v159 = v67;
    goto LABEL_83;
  }
  unint64_t v160 = v67 & 0x3F;
  int64x2_t v161 = vaddq_s64(vdupq_n_s64(v160), vzip1q_s64((int64x2_t)0, v150));
  int8x16_t v162 = (int64x2_t *)(v64 + 8 * (v67 >> 6));
  int8x16_t v153 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v162, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162->i64[0], 0), (uint64x2_t)vnegq_s64(v161)));
  if (v160 + v151 >= 0x81) {
    int8x16_t v153 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v162[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v161)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v162[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v161))), v153);
  }
LABEL_83:
  int8x16_t v163 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v90, (int16x8_t)v90));
  unint64_t v164 = vpaddq_s32((int32x4_t)v163, (int32x4_t)v163).u64[0];
  v165.i64[0] = v164;
  v165.i64[1] = HIDWORD(v164);
  int64x2_t v166 = v165;
  unint64_t v167 = vaddvq_s64(v165);
  int8x16_t v168 = 0uLL;
  if (v167 > 0x80 || (unint64_t v169 = v159 + v167, v73 < v159 + v167))
  {
    int v87 = 1;
    unint64_t v169 = v159;
    int8x16_t v172 = 0uLL;
  }
  else
  {
    int64x2_t v170 = vaddq_s64(vdupq_n_s64(v159 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    unint64_t v171 = (int64x2_t *)(v64 + 8 * (v159 >> 6));
    int8x16_t v172 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v171, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171->i64[0], 0), (uint64x2_t)vnegq_s64(v170)));
    if ((v159 & 0x3F) + v167 >= 0x81) {
      int8x16_t v172 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v171[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v170)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v171[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v170))), v172);
    }
  }
  if (v167 > 0x80 || (unint64_t v173 = v169 + v167, v73 < v169 + v167))
  {
    int v87 = 1;
    unint64_t v173 = v169;
  }
  else
  {
    int64x2_t v174 = vaddq_s64(vdupq_n_s64(v169 & 0x3F), vzip1q_s64((int64x2_t)0, v166));
    unsigned int v175 = (int64x2_t *)(v64 + 8 * (v169 >> 6));
    int8x16_t v168 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v175, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175->i64[0], 0), (uint64x2_t)vnegq_s64(v174)));
    if ((v169 & 0x3F) + v167 >= 0x81) {
      int8x16_t v168 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v175[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v174)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v175[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v174))), v168);
    }
  }
  int8x16_t v176 = (int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16((int16x8_t)v89, (int16x8_t)v89));
  unint64_t v177 = vpaddq_s32((int32x4_t)v176, (int32x4_t)v176).u64[0];
  v178.i64[0] = v177;
  v178.i64[1] = HIDWORD(v177);
  int64x2_t v179 = v178;
  unint64_t v180 = vaddvq_s64(v178);
  int8x16_t v181 = 0uLL;
  if (v180 > 0x80 || (unint64_t v182 = v173 + v180, v73 < v173 + v180))
  {
    int v87 = 1;
    unint64_t v182 = v173;
    int8x16_t v186 = 0uLL;
  }
  else
  {
    unint64_t v183 = v173 & 0x3F;
    int64x2_t v184 = vaddq_s64(vdupq_n_s64(v183), vzip1q_s64((int64x2_t)0, v179));
    unint64_t v185 = (int64x2_t *)(v64 + 8 * (v173 >> 6));
    int8x16_t v186 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v185, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185->i64[0], 0), (uint64x2_t)vnegq_s64(v184)));
    if (v183 + v180 >= 0x81) {
      int8x16_t v186 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v185[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v184)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v185[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v184))), v186);
    }
  }
  if (v180 > 0x80 || (unint64_t v187 = v182 + v180, v73 < v182 + v180))
  {
    int v87 = 1;
    unint64_t v187 = v182;
  }
  else
  {
    int64x2_t v188 = vaddq_s64(vdupq_n_s64(v182 & 0x3F), vzip1q_s64((int64x2_t)0, v179));
    unint64_t v189 = (int64x2_t *)(v64 + 8 * (v182 >> 6));
    int8x16_t v181 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(*v189, 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x40uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189->i64[0], 0), (uint64x2_t)vnegq_s64(v188)));
    if ((v182 & 0x3F) + v180 >= 0x81) {
      int8x16_t v181 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(v189[1].i64[0], 0), (uint64x2_t)vsubq_s64(vdupq_n_s64(0x80uLL), v188)), (int8x16_t)vshlq_u64((uint64x2_t)vdupq_laneq_s64(v189[1], 1), (uint64x2_t)vsubq_s64(vdupq_n_s64(0xC0uLL), v188))), v181);
    }
  }
  if (v87 || (uint64_t result = a4 + 1, v73 + 8 * result - v187 - 512 >= 9) || v120 == 2)
  {
    uint64_t result = 0;
    v342 |= 0xFFFFLL << ((8 * &v342) & 0x20);
    long long v12 = 0uLL;
    *a1 = 0u;
    a1[1] = 0u;
    unint64_t v190 = (_OWORD *)((char *)a1->f32 + a2);
    *unint64_t v190 = 0u;
    v190[1] = 0u;
    unint64_t v191 = (_OWORD *)((char *)a1->f32 + 2 * a2);
    uint64_t v15 = (_OWORD *)((char *)a1->f32 + 2 * a2 + a2);
    *unint64_t v191 = 0u;
    v191[1] = 0u;
    goto LABEL_107;
  }
  int32x2_t v192 = vzip1_s32(*(int32x2_t *)v111.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL));
  int32x2_t v193 = vzip1_s32(*(int32x2_t *)v147.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
  v194.i64[0] = v192.u32[0];
  v194.i64[1] = v192.u32[1];
  int64x2_t v195 = v194;
  v194.i64[0] = v193.u32[0];
  v194.i64[1] = v193.u32[1];
  uint64x2_t v196 = (uint64x2_t)vnegq_s64(v195);
  uint64x2_t v197 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v198 = (int64x2_t)vshlq_u64((uint64x2_t)v109, v196);
  *(int32x2_t *)v109.i8 = vmovn_s64((int64x2_t)v109);
  *(int32x2_t *)v198.i8 = vmovn_s64(v198);
  int16x8_t v199 = (int16x8_t)vzip1q_s32((int32x4_t)v109, (int32x4_t)v198);
  int64x2_t v200 = (int64x2_t)vshlq_u64((uint64x2_t)v155, v197);
  *(int32x2_t *)v155.i8 = vmovn_s64((int64x2_t)v155);
  *(int32x2_t *)v200.i8 = vmovn_s64(v200);
  int16x8_t v201 = (int16x8_t)vzip1q_s32((int32x4_t)v155, (int32x4_t)v200);
  int64x2_t v202 = (int64x2_t)vshlq_u64((uint64x2_t)v153, v197);
  *(int32x2_t *)v153.i8 = vmovn_s64((int64x2_t)v153);
  *(int32x2_t *)v202.i8 = vmovn_s64(v202);
  int16x8_t v203 = (int16x8_t)vzip1q_s32((int32x4_t)v153, (int32x4_t)v202);
  uint32x4_t v204 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v91.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v91, v91, 8uLL))));
  int16x8_t v205 = (int16x8_t)vshlq_u32((uint32x4_t)v199, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v110.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL)))));
  *(int16x4_t *)v199.i8 = vmovn_s32((int32x4_t)v199);
  *(int16x4_t *)v205.i8 = vmovn_s32((int32x4_t)v205);
  int16x8_t v206 = vzip1q_s16(v199, v205);
  int16x8_t v207 = (int16x8_t)vshlq_u32((uint32x4_t)v201, v204);
  int16x8_t v208 = (int16x8_t)vshlq_u32((uint32x4_t)v203, v204);
  *(int16x4_t *)v201.i8 = vmovn_s32((int32x4_t)v201);
  *(int16x4_t *)v207.i8 = vmovn_s32((int32x4_t)v207);
  *(int16x4_t *)v203.i8 = vmovn_s32((int32x4_t)v203);
  *(int16x4_t *)v208.i8 = vmovn_s32((int32x4_t)v208);
  int16x8_t v209 = vzip1q_s16(v201, v207);
  v207.i64[0] = 0x10001000100010;
  v207.i64[1] = 0x10001000100010;
  int16x8_t v210 = vzip1q_s16(v203, v208);
  v208.i64[0] = 0xF000F000F000FLL;
  v208.i64[1] = 0xF000F000F000FLL;
  int16x8_t v211 = vsubq_s16(v207, (int16x8_t)v110);
  int16x8_t v212 = vaddq_s16((int16x8_t)v110, v208);
  v208.i64[0] = 0x10001000100010;
  v208.i64[1] = 0x10001000100010;
  int16x8_t v213 = vshlq_s16(v206, v211);
  v211.i64[0] = 0xF000F000F000FLL;
  v211.i64[1] = 0xF000F000F000FLL;
  int16x8_t v214 = vsubq_s16(v208, (int16x8_t)v91);
  int16x8_t v215 = vaddq_s16((int16x8_t)v91, v211);
  int16x8_t v216 = vshlq_s16(v210, v214);
  int8x16_t v217 = (int8x16_t)vshlq_s16(v213, v212);
  int16x8_t v218 = vshlq_s16(vshlq_s16(v209, v214), v215);
  int8x16_t v219 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v217.i8, 0);
  int16x8_t v220 = (int16x8_t)vandq_s8(v94, v219);
  int16x8_t v221 = vsubq_s16(v218, v220);
  int16x8_t v222 = vsubq_s16(vshlq_s16(v216, v215), v220);
  *(int32x2_t *)v218.i8 = vzip1_s32(*(int32x2_t *)v163.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v163, v163, 8uLL));
  *(int32x2_t *)v216.i8 = vzip1_s32(*(int32x2_t *)v176.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v176, v176, 8uLL));
  v194.i64[0] = v218.u32[0];
  v194.i64[1] = v218.u32[1];
  int64x2_t v223 = v194;
  v194.i64[0] = v216.u32[0];
  v194.i64[1] = v216.u32[1];
  uint64x2_t v224 = (uint64x2_t)vnegq_s64(v223);
  int64x2_t v225 = (int64x2_t)vshlq_u64((uint64x2_t)v172, v224);
  *(int32x2_t *)v220.i8 = vmovn_s64((int64x2_t)v172);
  *(int32x2_t *)v225.i8 = vmovn_s64(v225);
  int16x8_t v226 = (int16x8_t)vzip1q_s32((int32x4_t)v220, (int32x4_t)v225);
  uint64x2_t v227 = (uint64x2_t)vnegq_s64(v194);
  int64x2_t v228 = (int64x2_t)vshlq_u64((uint64x2_t)v168, v224);
  *(int32x2_t *)v168.i8 = vmovn_s64((int64x2_t)v168);
  *(int32x2_t *)v228.i8 = vmovn_s64(v228);
  int16x8_t v229 = (int16x8_t)vzip1q_s32((int32x4_t)v168, (int32x4_t)v228);
  int64x2_t v230 = (int64x2_t)vshlq_u64((uint64x2_t)v186, v227);
  *(int32x2_t *)v172.i8 = vmovn_s64((int64x2_t)v186);
  *(int32x2_t *)v230.i8 = vmovn_s64(v230);
  uint32x4_t v231 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v90.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL))));
  int16x8_t v232 = (int16x8_t)vzip1q_s32((int32x4_t)v172, (int32x4_t)v230);
  int16x8_t v233 = (int16x8_t)vshlq_u32((uint32x4_t)v226, v231);
  int16x8_t v234 = (int16x8_t)vshlq_u32((uint32x4_t)v229, v231);
  *(int16x4_t *)v226.i8 = vmovn_s32((int32x4_t)v226);
  *(int16x4_t *)v233.i8 = vmovn_s32((int32x4_t)v233);
  *(int16x4_t *)v229.i8 = vmovn_s32((int32x4_t)v229);
  *(int16x4_t *)v234.i8 = vmovn_s32((int32x4_t)v234);
  int16x8_t v235 = vzip1q_s16(v226, v233);
  v233.i64[0] = 0x10001000100010;
  v233.i64[1] = 0x10001000100010;
  int16x8_t v236 = vzip1q_s16(v229, v234);
  v234.i64[0] = 0xF000F000F000FLL;
  v234.i64[1] = 0xF000F000F000FLL;
  int16x8_t v237 = vsubq_s16(v233, (int16x8_t)v90);
  int16x8_t v238 = vaddq_s16((int16x8_t)v90, v234);
  uint32x4_t v239 = (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v89.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL))));
  int16x8_t v240 = vshlq_s16(vshlq_s16(v235, v237), v238);
  int16x8_t v241 = vshlq_s16(vshlq_s16(v236, v237), v238);
  int16x8_t v242 = (int16x8_t)vandq_s8(v92, v219);
  int16x8_t v243 = vsubq_s16(v240, v242);
  int16x8_t v244 = vsubq_s16(v241, v242);
  int16x8_t v245 = (int16x8_t)vshlq_u32((uint32x4_t)v232, v239);
  *(int16x4_t *)v240.i8 = vmovn_s32((int32x4_t)v232);
  *(int16x4_t *)v245.i8 = vmovn_s32((int32x4_t)v245);
  v232.i64[0] = 0x10001000100010;
  v232.i64[1] = 0x10001000100010;
  int16x8_t v246 = vzip1q_s16(v240, v245);
  v240.i64[0] = 0xF000F000F000FLL;
  v240.i64[1] = 0xF000F000F000FLL;
  int16x8_t v247 = vsubq_s16(v232, (int16x8_t)v89);
  int16x8_t v248 = vaddq_s16((int16x8_t)v89, v240);
  int64x2_t v249 = (int64x2_t)vshlq_u64((uint64x2_t)v181, v227);
  *(int32x2_t *)v240.i8 = vmovn_s64((int64x2_t)v181);
  *(int32x2_t *)v249.i8 = vmovn_s64(v249);
  int16x8_t v250 = (int16x8_t)vzip1q_s32((int32x4_t)v240, (int32x4_t)v249);
  int16x8_t v251 = (int16x8_t)vshlq_u32((uint32x4_t)v250, v239);
  *(int16x4_t *)v250.i8 = vmovn_s32((int32x4_t)v250);
  *(int16x4_t *)v251.i8 = vmovn_s32((int32x4_t)v251);
  int16x8_t v252 = vshlq_s16(vshlq_s16(vzip1q_s16(v250, v251), v247), v248);
  int16x8_t v253 = (int16x8_t)vandq_s8(v88, v219);
  int16x8_t v254 = vsubq_s16(vshlq_s16(vshlq_s16(v246, v247), v248), v253);
  int16x8_t v255 = vsubq_s16(v252, v253);
  int32x2_t v256 = vzip1_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
  int32x2_t v257 = vzip1_s32(*(int32x2_t *)v137.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL));
  v194.i64[0] = v256.u32[0];
  v194.i64[1] = v256.u32[1];
  int64x2_t v258 = v194;
  v194.i64[0] = v257.u32[0];
  v194.i64[1] = v257.u32[1];
  int64x2_t v259 = (int64x2_t)vshlq_u64((uint64x2_t)v133, (uint64x2_t)vnegq_s64(v258));
  *(int32x2_t *)v133.i8 = vmovn_s64((int64x2_t)v133);
  *(int32x2_t *)v259.i8 = vmovn_s64(v259);
  int16x8_t v260 = (int16x8_t)vzip1q_s32((int32x4_t)v133, (int32x4_t)v259);
  int64x2_t v261 = (int64x2_t)vshlq_u64((uint64x2_t)v124, (uint64x2_t)vnegq_s64(v194));
  *(int32x2_t *)v124.i8 = vmovn_s64((int64x2_t)v124);
  *(int32x2_t *)v261.i8 = vmovn_s64(v261);
  int16x8_t v262 = (int16x8_t)vzip1q_s32((int32x4_t)v124, (int32x4_t)v261);
  int16x8_t v263 = (int16x8_t)vshlq_u32((uint32x4_t)v260, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v125.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)))));
  int16x8_t v264 = (int16x8_t)vshlq_u32((uint32x4_t)v262, (uint32x4_t)vnegq_s32((int32x4_t)vmovl_u16((uint16x4_t)vuzp1_s16(*(int16x4_t *)v93.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)))));
  *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
  *(int16x4_t *)v263.i8 = vmovn_s32((int32x4_t)v263);
  *(int16x4_t *)v262.i8 = vmovn_s32((int32x4_t)v262);
  *(int16x4_t *)v264.i8 = vmovn_s32((int32x4_t)v264);
  int16x8_t v265 = vzip1q_s16(v260, v263);
  v263.i64[0] = 0x10001000100010;
  v263.i64[1] = 0x10001000100010;
  int16x8_t v266 = vzip1q_s16(v262, v264);
  v264.i64[0] = 0xF000F000F000FLL;
  v264.i64[1] = 0xF000F000F000FLL;
  int16x8_t v267 = vaddq_s16((int16x8_t)vandq_s8(v217, v95), vshlq_s16(vshlq_s16(v265, vsubq_s16(v263, (int16x8_t)v125)), vaddq_s16((int16x8_t)v125, v264)));
  int16x8_t v268 = (int16x8_t)vandq_s8(v95, v219);
  v269.i64[0] = 0x1000100010001;
  v269.i64[1] = 0x1000100010001;
  int16x8_t v270 = vceqq_s16(v75, (int16x8_t)v269);
  int v271 = (unsigned __int16)vaddvq_s16(v270);
  int8x16_t v272 = (int8x16_t)vsubq_s16(v267, v268);
  int8x16_t v273 = (int8x16_t)vsubq_s16(vshlq_s16(vshlq_s16(v266, vsubq_s16(v263, (int16x8_t)v93)), vaddq_s16((int16x8_t)v93, v264)), v268);
  v270.i32[0] = v70;
  int16x8_t v274 = (int16x8_t)vdupq_lane_s32(*(int32x2_t *)v270.i8, 0);
  if (v271)
  {
    int8x16_t v275 = (int8x16_t)vnegq_s16((int16x8_t)vandq_s8(v71, v269));
    int8x16_t v276 = v273;
    v276.i32[3] = v272.i32[0];
    int8x16_t v277 = v272;
    v277.i32[0] = v273.i32[3];
    v358.val[0] = vbslq_s8(v275, v277, v272);
    v358.val[1] = vbslq_s8(v275, v276, v273);
    v278.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v278.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA7570), v275), (int16x8_t)v358.val[0]);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275));
    int8x16_t v272 = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA7580), v275), (int16x8_t)v359.val[0]);
    int8x16_t v273 = (int8x16_t)vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA7590), v275), v221);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v221.i8, (int8x16_t)xmmword_242EA75A0), v275), v222);
    int16x8_t v221 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75B0), v275), (int16x8_t)v359.val[0]);
    int16x8_t v222 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275));
    v359.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA75C0), v275), v243);
    v359.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v243.i8, (int8x16_t)xmmword_242EA7570), v275), v244);
    int16x8_t v243 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v359, v278), v275), (int16x8_t)v359.val[0]);
    int16x8_t v244 = vaddq_s16((int16x8_t)v359.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v359, (int8x16_t)xmmword_242EA75D0), v275));
    v358.val[0] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA75E0), v275), v254);
    v358.val[1] = (int8x16_t)vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(*(int8x16x2_t *)v254.i8, (int8x16_t)xmmword_242EA7570), v275), v255);
    int16x8_t v254 = vaddq_s16((int16x8_t)vandq_s8(vqtbl2q_s8(v358, v278), v275), (int16x8_t)v358.val[0]);
    int16x8_t v255 = vaddq_s16((int16x8_t)v358.val[1], (int16x8_t)vandq_s8(vqtbl2q_s8(v358, (int8x16_t)xmmword_242EA75F0), v275));
  }
  int8x16_t v279 = (int8x16_t)vaddq_s16((int16x8_t)v272, v274);
  int8x16_t v280 = (int8x16_t)vaddq_s16((int16x8_t)v273, v274);
  int8x16_t v281 = (int8x16_t)vaddq_s16(v221, v274);
  int8x16_t v282 = (int8x16_t)vaddq_s16(v222, v274);
  int8x16_t v283 = (int8x16_t)vaddq_s16(v243, v274);
  int8x16_t v284 = (int8x16_t)vaddq_s16(v244, v274);
  int8x16_t v285 = (int8x16_t)vaddq_s16(v254, v274);
  int8x16_t v286 = (int8x16_t)vaddq_s16(v255, v274);
  v287.i64[0] = 0x10001000100010;
  v287.i64[1] = 0x10001000100010;
  int8x16_t v288 = (int8x16_t)vceqzq_s16((int16x8_t)vandq_s8(v71, v287));
  int64x2_t v289 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v279, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v279);
  int64x2_t v290 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v280, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v280);
  int64x2_t v291 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v281, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v281);
  int64x2_t v292 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v282, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v282);
  int64x2_t v293 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v283, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v283);
  int64x2_t v294 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v284, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v284);
  unint64_t v295 = (int64x2_t *)((char *)a1 + a2);
  *(int64x2_t *)a1 = vzip1q_s64(v289, v290);
  a1[1] = (float32x4_t)vzip1q_s64(v293, v294);
  unint64_t v296 = (int64x2_t *)((char *)a1 + 2 * a2);
  int64x2_t v297 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v285, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v285);
  *unint64_t v295 = vzip2q_s64(v289, v290);
  v295[1] = vzip2q_s64(v293, v294);
  int64x2_t v298 = (int64x2_t)vaddq_s16((int16x8_t)vbicq_s8(vqtbl1q_s8(v286, (int8x16_t)xmmword_242EA76C0), v288), (int16x8_t)v286);
  *unint64_t v296 = vzip1q_s64(v291, v292);
  v296[1] = vzip1q_s64(v297, v298);
  int16x8_t v299 = (int64x2_t *)((char *)v296 + a2);
  *int16x8_t v299 = vzip2q_s64(v291, v292);
  v299[1] = vzip2q_s64(v297, v298);
  return result;
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressMacroblock(uint64_t result, uint64_t a2, unint64_t a3, unsigned char *a4, int a5, int a6, int a7)
{
  unint64_t v11 = a3;
  uint64_t v13 = result;
  if (a5 >= 8) {
    unsigned int v14 = 8;
  }
  else {
    unsigned int v14 = a5;
  }
  if (a6 >= 4) {
    unsigned int v15 = 4;
  }
  else {
    unsigned int v15 = a6;
  }
  if (v14 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(a3, a4, result, a2, v14, v15, a7);
    v11 += result;
  }
  else
  {
    *a4 = 0;
  }
  float32x4_t v16 = a4 + 1;
  if (a5 <= 8) {
    int v17 = 8;
  }
  else {
    int v17 = a5;
  }
  unsigned int v18 = v17 - 8;
  if (v18 >= 8) {
    int v19 = 8;
  }
  else {
    int v19 = v18;
  }
  if (v19 && v15)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v16, v13 + 32, a2, v19, v15, a7);
    v11 += result;
  }
  else
  {
    *float32x4_t v16 = 0;
  }
  uint64_t v20 = 4 * a2;
  uint64_t v21 = a4 + 2;
  if (a6 <= 4) {
    int v22 = 4;
  }
  else {
    int v22 = a6;
  }
  unsigned int v23 = v22 - 4;
  if (v23 >= 4) {
    int v24 = 4;
  }
  else {
    int v24 = v23;
  }
  if (v14 && v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v21, v13 + v20, a2, v14, v24, a7);
    v11 += result;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  else
  {
    *uint64_t v21 = 0;
    int v25 = a4 + 3;
    if (!v19) {
      goto LABEL_34;
    }
  }
  if (v24)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v25, v13 + v20 + 32, a2, v19, v24, a7);
    v11 += result;
    goto LABEL_35;
  }
LABEL_34:
  *int v25 = 0;
LABEL_35:
  int v26 = a4 + 4;
  if (a6 <= 8) {
    int v27 = 8;
  }
  else {
    int v27 = a6;
  }
  unsigned int v28 = v27 - 8;
  if (v28 >= 4) {
    int v29 = 4;
  }
  else {
    int v29 = v28;
  }
  if (v14 && v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v26, v13 + 8 * a2, a2, v14, v29, a7);
    v11 += result;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  else
  {
    *int v26 = 0;
    int v30 = a4 + 5;
    if (!v19) {
      goto LABEL_48;
    }
  }
  if (v29)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v30, v13 + 8 * a2 + 32, a2, v19, v29, a7);
    v11 += result;
    goto LABEL_49;
  }
LABEL_48:
  *int v30 = 0;
LABEL_49:
  int v31 = a4 + 6;
  if (a6 <= 12) {
    int v32 = 12;
  }
  else {
    int v32 = a6;
  }
  unsigned int v33 = v32 - 12;
  if (v33 >= 4) {
    int v34 = 4;
  }
  else {
    int v34 = v33;
  }
  if (v14 && v34)
  {
    uint64_t result = AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v31, v13 + 12 * a2, a2, v14, v34, a7);
    v11 += result;
    int v35 = a4 + 7;
    if (!v19) {
      goto LABEL_64;
    }
  }
  else
  {
    *int v31 = 0;
    int v35 = a4 + 7;
    if (!v19)
    {
LABEL_64:
      *int v35 = 0;
      return result;
    }
  }
  if (!v34) {
    goto LABEL_64;
  }

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::compressSubblock(v11, v35, v13 + 12 * a2 + 32, a2, v19, v34, a7);
}

uint64_t AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressMacroblock(float32x4_t *a1, uint64_t a2, unsigned __int8 *a3, int a4, int32x4_t a5, int32x4_t a6)
{
  uint64_t v9 = a2
     + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1, 64, a2, *a3, a4, a5, a6);
  uint64_t v12 = v9
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 2, 64, v9, a3[1], a4, v10, v11);
  uint64_t v15 = v12
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 16, 64, v12, a3[2], a4, v13, v14);
  uint64_t v18 = v15
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 18, 64, v15, a3[3], a4, v16, v17);
  uint64_t v21 = v18
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 32, 64, v18, a3[4], a4, v19, v20);
  uint64_t v24 = v21
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 34, 64, v21, a3[5], a4, v22, v23);
  uint64_t v27 = v24
      + AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 48, 64, v24, a3[6], a4, v25, v26);
  unsigned int v30 = a3[7];

  return AGX::AppleCompressionGen2::Compressor<(AGX::AppleCompressionGen2::PixelFormat)11,1u,(unsigned char)0,(AGX::AppleCompressionGen2::SubblockOrder)1,(AGXTextureFootprint)3>::decompressSubblock(a1 + 50, 64, v27, v30, a4, v28, v29);
}

void bvhPrintDebugBufferContents(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  v1045[2] = *MEMORY[0x263EF8340];
  if (v1)
  {
    int v3 = *(_DWORD *)(v1 + 8);
    int v4 = *(_DWORD *)(v1 + 12);
    BOOL v204 = (v3 & v4) != -1;
    int16x8_t v209 = (_DWORD *)v1;
    if ((v3 & v4) == 0xFFFFFFFF)
    {
      int v210 = 0;
      int v211 = 0;
      goto LABEL_29;
    }
    unint64_t v5 = v2;
    uint64_t v6 = v1;
    uint64_t v7 = (FILE **)MEMORY[0x263EF8348];
    char v8 = (FILE *)*MEMORY[0x263EF8348];
    uint64_t v9 = v6 + 16;
    if (v2)
    {
      fprintf(v8, "**** BVH ASSERTION FAILED FOR \"%s\" ON FILE %s LINE %d or %d *** \n", v2, (const char *)(v6 + 16), v3, v4);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v200 = v209[2];
        int v201 = v209[3];
        LODWORD(v619[0]) = 136315906;
        *(void *)((char *)v619 + 4) = v5;
        WORD2(v619[1]) = 2080;
        *(void *)((char *)&v619[1] + 6) = v9;
        HIWORD(v619[2]) = 1024;
        LODWORD(v619[3]) = v200;
        WORD2(v619[3]) = 1024;
        *(_DWORD *)((char *)&v619[3] + 6) = v201;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: **** BVH ASSERTION FAILED FOR \"%s\" ON FILE %s LINE %d or %d *** \n", (uint8_t *)v619, 0x22u);
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
        goto LABEL_18;
      }
      int v10 = v209[2];
      int v11 = v209[3];
      LODWORD(v619[0]) = 136315906;
      *(void *)((char *)v619 + 4) = v5;
      WORD2(v619[1]) = 2080;
      *(void *)((char *)&v619[1] + 6) = v9;
      HIWORD(v619[2]) = 1024;
      LODWORD(v619[3]) = v10;
      WORD2(v619[3]) = 1024;
      *(_DWORD *)((char *)&v619[3] + 6) = v11;
      uint64_t v12 = &_os_log_internal;
      int32x4_t v13 = "AGX: **** BVH ASSERTION FAILED FOR \"%s\" ON FILE %s LINE %d or %d *** \n";
      uint32_t v14 = 34;
    }
    else
    {
      fprintf(v8, "**** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (const char *)(v6 + 16), v3, v4);
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v202 = v209[2];
        int v203 = v209[3];
        LODWORD(v619[0]) = 136315650;
        *(void *)((char *)v619 + 4) = v9;
        WORD2(v619[1]) = 1024;
        *(_DWORD *)((char *)&v619[1] + 6) = v202;
        WORD1(v619[2]) = 1024;
        HIDWORD(v619[2]) = v203;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v619, 0x18u);
      }
      if (!os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO)) {
        goto LABEL_18;
      }
      int v15 = v209[2];
      int v16 = v209[3];
      LODWORD(v619[0]) = 136315650;
      *(void *)((char *)v619 + 4) = v9;
      WORD2(v619[1]) = 1024;
      *(_DWORD *)((char *)&v619[1] + 6) = v15;
      WORD1(v619[2]) = 1024;
      HIDWORD(v619[2]) = v16;
      uint64_t v12 = &_os_log_internal;
      int32x4_t v13 = "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n";
      uint32_t v14 = 24;
    }
    _os_log_impl(&dword_2427AD000, v12, OS_LOG_TYPE_INFO, v13, (uint8_t *)v619, v14);
LABEL_18:
    fprintf(*v7, "Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", v209[68], v209[69], v209[70], v209[71], v209[72], v209[73], v209[74], v209[75]);
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      int v188 = v209[68];
      int v189 = v209[69];
      int v190 = v209[70];
      int v191 = v209[71];
      int v192 = v209[72];
      int v193 = v209[73];
      int v194 = v209[74];
      int v195 = v209[75];
      LODWORD(v619[0]) = 67110912;
      HIDWORD(v619[0]) = v188;
      LOWORD(v619[1]) = 1024;
      *(_DWORD *)((char *)&v619[1] + 2) = v189;
      HIWORD(v619[1]) = 1024;
      LODWORD(v619[2]) = v190;
      WORD2(v619[2]) = 1024;
      *(_DWORD *)((char *)&v619[2] + 6) = v191;
      WORD1(v619[3]) = 1024;
      HIDWORD(v619[3]) = v192;
      LOWORD(v619[4]) = 1024;
      *(_DWORD *)((char *)&v619[4] + 2) = v193;
      HIWORD(v619[4]) = 1024;
      LODWORD(v619[5]) = v194;
      WORD2(v619[5]) = 1024;
      *(_DWORD *)((char *)&v619[5] + 6) = v195;
      _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", (uint8_t *)v619, 0x32u);
    }
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      int v17 = v209[68];
      int v18 = v209[69];
      int v19 = v209[70];
      int v20 = v209[71];
      int v21 = v209[72];
      int v22 = v209[73];
      int v23 = v209[74];
      int v24 = v209[75];
      LODWORD(v619[0]) = 67110912;
      HIDWORD(v619[0]) = v17;
      LOWORD(v619[1]) = 1024;
      *(_DWORD *)((char *)&v619[1] + 2) = v18;
      HIWORD(v619[1]) = 1024;
      LODWORD(v619[2]) = v19;
      WORD2(v619[2]) = 1024;
      *(_DWORD *)((char *)&v619[2] + 6) = v20;
      WORD1(v619[3]) = 1024;
      HIDWORD(v619[3]) = v21;
      LOWORD(v619[4]) = 1024;
      *(_DWORD *)((char *)&v619[4] + 2) = v22;
      HIWORD(v619[4]) = 1024;
      LODWORD(v619[5]) = v23;
      WORD2(v619[5]) = 1024;
      *(_DWORD *)((char *)&v619[5] + 6) = v24;
      _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: Dispatch %d, TG {%d, %d, %d}, Thread In TG {%d, %d, %d}, Simd In TG %d\n", (uint8_t *)v619, 0x32u);
    }
    uint64_t v25 = 0;
    int32x4_t v26 = v209 + 76;
    uint64_t v27 = &_os_log_internal;
    do
    {
      fprintf(*v7, "ctx %d: 0x%16llx, %llu, %lld, %f\n", v25, *(void *)&v26[2 * v25], *(void *)&v26[2 * v25], *(void *)&v26[2 * v25], COERCE_FLOAT(*(void *)&v26[2 * v25]));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(void *)((char *)&v619[1] + 2) = *(void *)&v26[2 * v25];
        *(void *)((char *)&v619[2] + 4) = *(void *)((char *)&v619[1] + 2);
        *(void *)((char *)&v619[3] + 6) = *(void *)((char *)&v619[1] + 2);
        LODWORD(v619[0]) = 67110144;
        HIDWORD(v619[0]) = v25;
        LOWORD(v619[1]) = 2048;
        WORD1(v619[2]) = 2048;
        WORD2(v619[3]) = 2048;
        HIWORD(v619[4]) = 2048;
        *(double *)&v619[5] = *(float *)((char *)&v619[1] + 2);
        _os_log_error_impl(&dword_2427AD000, v27, OS_LOG_TYPE_ERROR, "AGX: ctx %d: 0x%16llx, %llu, %lld, %f\n", (uint8_t *)v619, 0x30u);
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(void *)((char *)&v619[1] + 2) = *(void *)&v26[2 * v25];
        *(void *)((char *)&v619[2] + 4) = *(void *)((char *)&v619[1] + 2);
        *(void *)((char *)&v619[3] + 6) = *(void *)((char *)&v619[1] + 2);
        LODWORD(v619[0]) = 67110144;
        HIDWORD(v619[0]) = v25;
        LOWORD(v619[1]) = 2048;
        WORD1(v619[2]) = 2048;
        WORD2(v619[3]) = 2048;
        HIWORD(v619[4]) = 2048;
        *(double *)&v619[5] = *(float *)((char *)&v619[1] + 2);
        _os_log_impl(&dword_2427AD000, v27, OS_LOG_TYPE_INFO, "AGX: ctx %d: 0x%16llx, %llu, %lld, %f\n", (uint8_t *)v619, 0x30u);
      }
      ++v25;
    }
    while (v25 != 10);
    int v211 = v209[69];
    int v210 = v209[68];
LABEL_29:
    HIBYTE(v222) = 13;
    strcpy((char *)&v221, "UNINITIALIZED");
    v223[0] = &unk_26F851778;
    v223[1] = nothingFormatter;
    uint64x2_t v224 = v223;
    LODWORD(v619[0]) = 0;
    *(_OWORD *)&v619[1] = v221;
    v619[3] = v222;
    v619[7] = &v619[4];
    v619[4] = &unk_26F851778;
    v619[5] = nothingFormatter;
    HIBYTE(v218[2]) = 19;
    strcpy((char *)v218, "span AssertInBounds");
    v219[0] = &unk_26F851778;
    v219[1] = int32x2Formatter;
    int16x8_t v220 = v219;
    LODWORD(v619[8]) = 2;
    *(_OWORD *)&v619[9] = *(_OWORD *)"span AssertInBounds";
    v619[11] = v218[2];
    v619[15] = &v619[12];
    v619[12] = &unk_26F851778;
    v619[13] = int32x2Formatter;
    *((unsigned char *)&v615.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&v615, "array AssertInBounds");
    int16x8_t v616 = (void (**)(void **))&unk_26F851778;
    v617 = int32x2Formatter;
    uint64_t v618 = (void **)&v616;
    LODWORD(v619[16]) = 3;
    *(_OWORD *)&v619[17] = *(_OWORD *)"array AssertInBounds";
    v619[19] = *((void *)&v615.__r_.__value_.__l + 2);
    v619[23] = &v619[20];
    v619[20] = &unk_26F851778;
    v619[21] = int32x2Formatter;
    int32x4_t v28 = (char *)operator new(0x28uLL);
    v612.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
    *(_OWORD *)&v612.__r_.__value_.__r.__words[1] = xmmword_242EA7BA0;
    strcpy(v28, "Start w/ PrimCount, WideNodeCount");
    v613[0] = &unk_26F851778;
    v613[1] = int32x2Formatter;
    int16x8_t v614 = v613;
    LODWORD(v619[24]) = 256;
    std::string::__init_copy_ctor_external((std::string *)&v619[25], v28, 0x21uLL);
    uint64_t v29 = (uint64_t)v614;
    if (v614)
    {
      if (v614 == v613)
      {
        v619[31] = &v619[28];
        (*(void (**)(void *))(v613[0] + 24))(v613);
LABEL_34:
        v609[23] = 15;
        strcpy(v609, "WriteNullHeader");
        v610[0] = &unk_26F851778;
        v610[1] = nothingFormatter;
        int16x8_t v611 = v610;
        LODWORD(v619[32]) = 257;
        *(_OWORD *)&v619[33] = *(_OWORD *)v609;
        v619[35] = *(void *)&v609[16];
        v620[3] = v620;
        v620[0] = &unk_26F851778;
        v620[1] = nothingFormatter;
        HIBYTE(v606) = 8;
        strcpy((char *)v605, "EarlyOut");
        v607[0] = &unk_26F851778;
        v607[1] = nothingFormatter;
        int8x16_t v608 = v607;
        int v621 = 258;
        long long v622 = *(_OWORD *)v605;
        uint64_t v623 = v606;
        v624[3] = v624;
        v624[0] = &unk_26F851778;
        v624[1] = nothingFormatter;
        HIBYTE(v602) = 13;
        strcpy((char *)&v601, "WideTreeDepth");
        v603[0] = &unk_26F851778;
        v603[1] = intFormatter;
        v604 = v603;
        int v625 = 259;
        long long v626 = v601;
        uint64_t v627 = v602;
        v628[3] = v628;
        v628[0] = &unk_26F851778;
        v628[1] = intFormatter;
        HIBYTE(v598) = 9;
        strcpy((char *)v597, "BVHOutPtr");
        v599[0] = &unk_26F851778;
        v599[1] = hex64Formatter;
        int16x8_t v600 = v599;
        int v629 = 272;
        long long v630 = *(_OWORD *)v597;
        uint64_t v631 = v598;
        v632[3] = v632;
        v632[0] = &unk_26F851778;
        v632[1] = hex64Formatter;
        HIBYTE(v594) = 10;
        strcpy((char *)&v593, "BVHOutSize");
        v595[0] = &unk_26F851778;
        v595[1] = hex64Formatter;
        int32x4_t v596 = v595;
        int v633 = 273;
        long long v634 = v593;
        uint64_t v635 = v594;
        v636[3] = v636;
        v636[0] = &unk_26F851778;
        v636[1] = hex64Formatter;
        HIBYTE(v590[2]) = 18;
        strcpy((char *)v590, "Complete LoadLeafs");
        v591[0] = &unk_26F851778;
        v591[1] = nothingFormatter;
        int32x4_t v592 = v591;
        int v637 = 1792;
        long long v638 = *(_OWORD *)"Complete LoadLeafs";
        v639 = v590[2];
        v640[3] = v640;
        v640[0] = &unk_26F851778;
        v640[1] = nothingFormatter;
        unsigned int v30 = operator new(0x20uLL);
        int8x16_t v586 = v30;
        long long v587 = xmmword_242EA7BB0;
        strcpy((char *)v30, "Complete GenerateMortonCodes");
        v588[0] = &unk_26F851778;
        v588[1] = nothingFormatter;
        int16x8_t v589 = v588;
        int v641 = 1793;
        std::string::__init_copy_ctor_external(&v642, (const std::string::value_type *)v30, 0x1CuLL);
        uint64_t v31 = (uint64_t)v589;
        if (v589)
        {
          if (v589 == v588)
          {
            v644 = &v643;
            (*(void (**)(void *))(v588[0] + 24))(v588);
LABEL_39:
            HIBYTE(v583[2]) = 18;
            strcpy((char *)v583, "Complete RadixSort");
            v584[0] = &unk_26F851778;
            v584[1] = nothingFormatter;
            int8x16_t v585 = v584;
            int v645 = 1794;
            long long v646 = *(_OWORD *)"Complete RadixSort";
            v647 = v583[2];
            v648[3] = v648;
            v648[0] = &unk_26F851778;
            v648[1] = nothingFormatter;
            HIBYTE(v580) = 13;
            strcpy((char *)&v579, "Complete PLOC");
            v581[0] = &unk_26F851778;
            v581[1] = nothingFormatter;
            v582 = v581;
            int v649 = 1795;
            long long v650 = v579;
            uint64_t v651 = v580;
            v652[3] = v652;
            v652[0] = &unk_26F851778;
            v652[1] = nothingFormatter;
            HIBYTE(v576[2]) = 18;
            strcpy((char *)v576, "Complete WideBuild");
            v577[0] = &unk_26F851778;
            v577[1] = nothingFormatter;
            int8x16_t v578 = v577;
            int v653 = 1796;
            long long v654 = *(_OWORD *)"Complete WideBuild";
            v655 = v576[2];
            v656[3] = v656;
            v656[0] = &unk_26F851778;
            v656[1] = nothingFormatter;
            strcpy((char *)v573, "Complete AllocRIASpace");
            HIBYTE(v573[2]) = 22;
            v574[0] = &unk_26F851778;
            v574[1] = nothingFormatter;
            int8x16_t v575 = v574;
            int v657 = 1797;
            long long v658 = *(_OWORD *)"Complete AllocRIASpace";
            v659 = v573[2];
            v660[3] = v660;
            v660[0] = &unk_26F851778;
            v660[1] = nothingFormatter;
            int v32 = operator new(0x20uLL);
            int8x16_t v569 = v32;
            long long v570 = xmmword_242EA7BC0;
            strcpy((char *)v32, "Complete AssignBVHOffset");
            v571[0] = &unk_26F851778;
            v571[1] = nothingFormatter;
            int8x16_t v572 = v571;
            int v661 = 1798;
            std::string::__init_copy_ctor_external(&v662, (const std::string::value_type *)v32, 0x18uLL);
            uint64_t v33 = (uint64_t)v572;
            if (v572)
            {
              if (v572 == v571)
              {
                v664 = &v663;
                (*(void (**)(void *))(v571[0] + 24))(v571);
LABEL_44:
                HIBYTE(v566[2]) = 19;
                strcpy((char *)v566, "Complete EncodeLeaf");
                v567[0] = &unk_26F851778;
                v567[1] = nothingFormatter;
                int8x16_t v568 = v567;
                int v665 = 1799;
                long long v666 = *(_OWORD *)"Complete EncodeLeaf";
                v667 = v566[2];
                v668[3] = v668;
                v668[0] = &unk_26F851778;
                v668[1] = nothingFormatter;
                int v34 = operator new(0x20uLL);
                int16x8_t v562 = v34;
                long long v563 = xmmword_242EA7BC0;
                strcpy((char *)v34, "Complete InnerNodeBounds");
                v564[0] = &unk_26F851778;
                v564[1] = nothingFormatter;
                int8x16_t v565 = v564;
                int v669 = 1800;
                std::string::__init_copy_ctor_external(&v670, (const std::string::value_type *)v34, 0x18uLL);
                uint64_t v35 = (uint64_t)v565;
                if (v565)
                {
                  if (v565 == v564)
                  {
                    v672 = &v671;
                    (*(void (**)(void *))(v564[0] + 24))(v564);
LABEL_49:
                    HIBYTE(v559[2]) = 19;
                    strcpy((char *)v559, "Complete EncodeNode");
                    v560[0] = &unk_26F851778;
                    v560[1] = nothingFormatter;
                    int16x8_t v561 = v560;
                    int v673 = 1801;
                    long long v674 = *(_OWORD *)"Complete EncodeNode";
                    v675 = v559[2];
                    v676[3] = v676;
                    v676[0] = &unk_26F851778;
                    v676[1] = nothingFormatter;
                    HIBYTE(v556[2]) = 20;
                    strcpy((char *)v556, "Sort(PassCount,Mask)");
                    v557[0] = &unk_26F851778;
                    v557[1] = int32_hex32_Formatter;
                    int16x8_t v558 = v557;
                    int v677 = 512;
                    long long v678 = *(_OWORD *)"Sort(PassCount,Mask)";
                    v679 = v556[2];
                    v680[3] = v680;
                    v680[0] = &unk_26F851778;
                    v680[1] = int32_hex32_Formatter;
                    int v36 = operator new(0x28uLL);
                    int8x16_t v552 = v36;
                    long long v553 = xmmword_242EA7BD0;
                    strcpy((char *)v36, "SimdMatchPass I->O (PassIndex,Mask)");
                    v554[0] = &unk_26F851778;
                    v554[1] = int32_hex32_Formatter;
                    int16x8_t v555 = v554;
                    int v681 = 513;
                    std::string::__init_copy_ctor_external(&v682, (const std::string::value_type *)v36, 0x23uLL);
                    uint64_t v37 = (uint64_t)v555;
                    if (v555)
                    {
                      if (v555 == v554)
                      {
                        v684 = &v683;
                        (*(void (**)(void *))(v554[0] + 24))(v554);
LABEL_54:
                        int v38 = operator new(0x28uLL);
                        int16x8_t v548 = v38;
                        long long v549 = xmmword_242EA7BD0;
                        strcpy((char *)v38, "SimdMatchPass O->T (PassIndex,Mask)");
                        v550[0] = &unk_26F851778;
                        v550[1] = int32_hex32_Formatter;
                        int8x16_t v551 = v550;
                        int v685 = 514;
                        std::string::__init_copy_ctor_external(&v686, (const std::string::value_type *)v38, 0x23uLL);
                        uint64_t v39 = (uint64_t)v551;
                        if (v551)
                        {
                          if (v551 == v550)
                          {
                            v688 = &v687;
                            (*(void (**)(void *))(v550[0] + 24))(v550);
LABEL_59:
                            int v40 = operator new(0x28uLL);
                            int16x8_t v544 = v40;
                            long long v545 = xmmword_242EA7BD0;
                            strcpy((char *)v40, "SimdMatchPass T->O (PassIndex,Mask)");
                            v546[0] = &unk_26F851778;
                            v546[1] = int32_hex32_Formatter;
                            int16x8_t v547 = v546;
                            int v689 = 515;
                            std::string::__init_copy_ctor_external(&v690, (const std::string::value_type *)v40, 0x23uLL);
                            uint64_t v41 = (uint64_t)v547;
                            if (v547)
                            {
                              if (v547 == v546)
                              {
                                v692 = &v691;
                                (*(void (**)(void *))(v546[0] + 24))(v546);
LABEL_64:
                                int v42 = operator new(0x28uLL);
                                int16x8_t v540 = v42;
                                long long v541 = xmmword_242EA7BE0;
                                strcpy((char *)v42, "SimdMatchCopyback T->O (index,value)");
                                v542[0] = &unk_26F851778;
                                v542[1] = int32x2Formatter;
                                int16x8_t v543 = v542;
                                int v693 = 516;
                                std::string::__init_copy_ctor_external(&v694, (const std::string::value_type *)v42, 0x24uLL);
                                uint64_t v43 = (uint64_t)v543;
                                if (v543)
                                {
                                  if (v543 == v542)
                                  {
                                    v696 = &v695;
                                    (*(void (**)(void *))(v542[0] + 24))(v542);
LABEL_69:
                                    int v44 = operator new(0x30uLL);
                                    int16x8_t v536 = v44;
                                    long long v537 = xmmword_242EA7BF0;
                                    strcpy((char *)v44, "startElementThisSimd, elementsPerFullSimd");
                                    v538[0] = &unk_26F851778;
                                    v538[1] = int32x2Formatter;
                                    int16x8_t v539 = v538;
                                    int v697 = 528;
                                    std::string::__init_copy_ctor_external(&v698, (const std::string::value_type *)v44, 0x29uLL);
                                    uint64_t v45 = (uint64_t)v539;
                                    if (v539)
                                    {
                                      if (v539 == v538)
                                      {
                                        v700 = &v699;
                                        (*(void (**)(void *))(v538[0] + 24))(v538);
LABEL_74:
                                        HIBYTE(v533) = 12;
                                        strcpy((char *)v532, "simdInBounds");
                                        v534[0] = &unk_26F851778;
                                        v534[1] = intFormatter;
                                        int16x8_t v535 = v534;
                                        int v701 = 529;
                                        long long v702 = *(_OWORD *)v532;
                                        uint64_t v703 = v533;
                                        v704[3] = v704;
                                        v704[0] = &unk_26F851778;
                                        v704[1] = intFormatter;
                                        int v46 = operator new(0x20uLL);
                                        int16x8_t v528 = v46;
                                        long long v529 = xmmword_242EA7C00;
                                        strcpy((char *)v46, "SIMDInBounds: start,count");
                                        v530[0] = &unk_26F851778;
                                        v530[1] = int32x2Formatter;
                                        int16x8_t v531 = v530;
                                        int v705 = 530;
                                        std::string::__init_copy_ctor_external(&v706, (const std::string::value_type *)v46, 0x19uLL);
                                        uint64_t v47 = (uint64_t)v531;
                                        if (v531)
                                        {
                                          if (v531 == v530)
                                          {
                                            v708 = &v707;
                                            (*(void (**)(void *))(v530[0] + 24))(v530);
LABEL_79:
                                            int v48 = operator new(0x20uLL);
                                            int16x8_t v524 = v48;
                                            long long v525 = xmmword_242EA7C10;
                                            strcpy((char *)v48, "OutputIndex,currentKeyValue");
                                            v526[0] = &unk_26F851778;
                                            v526[1] = int32x2Formatter;
                                            int16x8_t v527 = v526;
                                            int v709 = 645;
                                            std::string::__init_copy_ctor_external(&v710, (const std::string::value_type *)v48, 0x1BuLL);
                                            uint64_t v49 = (uint64_t)v527;
                                            if (v527)
                                            {
                                              if (v527 == v526)
                                              {
                                                v712 = &v711;
                                                (*(void (**)(void *))(v526[0] + 24))(v526);
LABEL_84:
                                                BOOL v50 = operator new(0x28uLL);
                                                int16x8_t v520 = v50;
                                                long long v521 = xmmword_242EA7BA0;
                                                strcpy((char *)v50, "numMatchesInSIMD, matchingTHreads");
                                                v522[0] = &unk_26F851778;
                                                v522[1] = int32_hex32_Formatter;
                                                int16x8_t v523 = v522;
                                                int v713 = 643;
                                                std::string::__init_copy_ctor_external(&v714, (const std::string::value_type *)v50, 0x21uLL);
                                                uint64_t v51 = (uint64_t)v523;
                                                if (v523)
                                                {
                                                  if (v523 == v522)
                                                  {
                                                    v716 = &v715;
                                                    (*(void (**)(void *))(v522[0] + 24))(v522);
LABEL_89:
                                                    HIBYTE(v517[2]) = 17;
                                                    strcpy((char *)v517, "digit, digitCount");
                                                    v518[0] = &unk_26F851778;
                                                    v518[1] = int32x2Formatter;
                                                    int16x8_t v519 = v518;
                                                    int v717 = 644;
                                                    long long v718 = *(_OWORD *)"digit, digitCount";
                                                    v719 = v517[2];
                                                    v720[3] = v720;
                                                    v720[0] = &unk_26F851778;
                                                    v720[1] = int32x2Formatter;
                                                    HIBYTE(v514) = 9;
                                                    strcpy((char *)&v513, "StartBVH2");
                                                    v515[0] = &unk_26F851778;
                                                    v515[1] = nothingFormatter;
                                                    int16x8_t v516 = v515;
                                                    int v721 = 768;
                                                    long long v722 = v513;
                                                    uint64_t v723 = v514;
                                                    v724[3] = v724;
                                                    v724[0] = &unk_26F851778;
                                                    v724[1] = nothingFormatter;
                                                    HIBYTE(v510[2]) = 18;
                                                    strcpy((char *)v510, "StartPLOCIteration");
                                                    v511[0] = &unk_26F851778;
                                                    v511[1] = intFormatter;
                                                    int8x16_t v512 = v511;
                                                    int v725 = 770;
                                                    long long v726 = *(_OWORD *)"StartPLOCIteration";
                                                    v727 = v510[2];
                                                    v728[3] = v728;
                                                    v728[0] = &unk_26F851778;
                                                    v728[1] = intFormatter;
                                                    HIBYTE(v507[2]) = 20;
                                                    strcpy((char *)v507, "Candidate,NodeCounts");
                                                    v508[0] = &unk_26F851778;
                                                    v508[1] = int32x2Formatter;
                                                    int16x8_t v509 = v508;
                                                    int v729 = 771;
                                                    long long v730 = *(_OWORD *)"Candidate,NodeCounts";
                                                    v731 = v507[2];
                                                    v732[3] = v732;
                                                    v732[0] = &unk_26F851778;
                                                    v732[1] = int32x2Formatter;
                                                    int64x2_t v52 = operator new(0x19uLL);
                                                    int16x8_t v503 = v52;
                                                    long long v504 = xmmword_242EA7C20;
                                                    strcpy((char *)v52, "NeighborIndexComparison");
                                                    v505[0] = &unk_26F851778;
                                                    v505[1] = int32x2Formatter;
                                                    int16x8_t v506 = v505;
                                                    int v733 = 784;
                                                    std::string::__init_copy_ctor_external(&v734, (const std::string::value_type *)v52, 0x17uLL);
                                                    uint64_t v53 = (uint64_t)v506;
                                                    if (v506)
                                                    {
                                                      if (v506 == v505)
                                                      {
                                                        v736 = &v735;
                                                        (*(void (**)(void *))(v505[0] + 24))(v505);
LABEL_94:
                                                        int64x2_t v54 = operator new(0x20uLL);
                                                        int16x8_t v499 = v54;
                                                        long long v500 = xmmword_242EA7BC0;
                                                        strcpy((char *)v54, "IsPassthru,IsMutualMatch");
                                                        v501[0] = &unk_26F851778;
                                                        v501[1] = int32x2Formatter;
                                                        int16x8_t v502 = v501;
                                                        int v737 = 786;
                                                        std::string::__init_copy_ctor_external(&v738, (const std::string::value_type *)v54, 0x18uLL);
                                                        uint64_t v55 = (uint64_t)v502;
                                                        if (v502)
                                                        {
                                                          if (v502 == v501)
                                                          {
                                                            v740 = &v739;
                                                            (*(void (**)(void *))(v501[0] + 24))(v501);
LABEL_99:
                                                            int64x2_t v56 = operator new(0x19uLL);
                                                            int16x8_t v495 = v56;
                                                            long long v496 = xmmword_242EA7C20;
                                                            strcpy((char *)v56, "PassthruPrefixSum,Total");
                                                            v497[0] = &unk_26F851778;
                                                            v497[1] = int32x2Formatter;
                                                            int16x8_t v498 = v497;
                                                            int v741 = 787;
                                                            std::string::__init_copy_ctor_external(&v742, (const std::string::value_type *)v56, 0x17uLL);
                                                            uint64_t v57 = (uint64_t)v498;
                                                            if (v498)
                                                            {
                                                              if (v498 == v497)
                                                              {
                                                                v744 = &v743;
                                                                (*(void (**)(void *))(v497[0] + 24))(v497);
LABEL_104:
                                                                strcpy((char *)v492, "NewNodePrefixSum,Total");
                                                                HIBYTE(v492[2]) = 22;
                                                                v493[0] = &unk_26F851778;
                                                                v493[1] = int32x2Formatter;
                                                                int16x8_t v494 = v493;
                                                                int v745 = 788;
                                                                long long v746 = *(_OWORD *)"NewNodePrefixSum,Total";
                                                                v747 = v492[2];
                                                                v748[3] = v748;
                                                                v748[0] = &unk_26F851778;
                                                                v748[1] = int32x2Formatter;
                                                                int64x2_t v58 = operator new(0x20uLL);
                                                                int8x16_t v488 = v58;
                                                                long long v489 = xmmword_242EA7BB0;
                                                                strcpy((char *)v58, "MutualMatch: Left,RightChild");
                                                                v490[0] = &unk_26F851778;
                                                                v490[1] = int32x2Formatter;
                                                                int16x8_t v491 = v490;
                                                                int v749 = 790;
                                                                std::string::__init_copy_ctor_external(&v750, (const std::string::value_type *)v58, 0x1CuLL);
                                                                uint64_t v59 = (uint64_t)v491;
                                                                if (v491)
                                                                {
                                                                  if (v491 == v490)
                                                                  {
                                                                    v752 = &v751;
                                                                    (*(void (**)(void *))(v490[0] + 24))(v490);
LABEL_109:
                                                                    int v60 = operator new(0x20uLL);
                                                                    int16x8_t v484 = v60;
                                                                    long long v485 = xmmword_242EA7C30;
                                                                    strcpy((char *)v60, "WriteCandidate: CandIdx,NodeIdx");
                                                                    v486[0] = &unk_26F851778;
                                                                    v486[1] = int32x2Formatter;
                                                                    int8x16_t v487 = v486;
                                                                    int v753 = 792;
                                                                    std::string::__init_copy_ctor_external(&v754, (const std::string::value_type *)v60, 0x1FuLL);
                                                                    uint64_t v61 = (uint64_t)v487;
                                                                    if (v487)
                                                                    {
                                                                      if (v487 == v486)
                                                                      {
                                                                        v756 = &v755;
                                                                        (*(void (**)(void *))(v486[0] + 24))(v486);
LABEL_114:
                                                                        HIBYTE(v481[2]) = 19;
                                                                        strcpy((char *)v481, "PLOCCount,NodeCount");
                                                                        v482[0] = &unk_26F851778;
                                                                        v482[1] = int32x2Formatter;
                                                                        int16x8_t v483 = v482;
                                                                        int v757 = 800;
                                                                        long long v758 = *(_OWORD *)"PLOCCount,NodeCount";
                                                                        v759 = v481[2];
                                                                        v760[3] = v760;
                                                                        v760[0] = &unk_26F851778;
                                                                        v760[1] = int32x2Formatter;
                                                                        HIBYTE(v478[2]) = 20;
                                                                        strcpy((char *)v478, "BVH8 Level,NodeCount");
                                                                        v479[0] = &unk_26F851778;
                                                                        v479[1] = int32x2Formatter;
                                                                        int8x16_t v480 = v479;
                                                                        int v761 = 1024;
                                                                        long long v762 = *(_OWORD *)"BVH8 Level,NodeCount";
                                                                        v763 = v478[2];
                                                                        v764[3] = v764;
                                                                        v764[0] = &unk_26F851778;
                                                                        v764[1] = int32x2Formatter;
                                                                        HIBYTE(v475[2]) = 19;
                                                                        strcpy((char *)v475, "BVH8 Node Start,End");
                                                                        v476[0] = &unk_26F851778;
                                                                        v476[1] = int32x2Formatter;
                                                                        int8x16_t v477 = v476;
                                                                        int v765 = 1025;
                                                                        long long v766 = *(_OWORD *)"BVH8 Node Start,End";
                                                                        v767 = v475[2];
                                                                        v768[3] = v768;
                                                                        v768[0] = &unk_26F851778;
                                                                        v768[1] = int32x2Formatter;
                                                                        HIBYTE(v472[2]) = 20;
                                                                        strcpy((char *)v472, "BVH2,BVH8 Node Index");
                                                                        v473[0] = &unk_26F851778;
                                                                        v473[1] = int32x2Formatter;
                                                                        int8x16_t v474 = v473;
                                                                        int v769 = 1026;
                                                                        long long v770 = *(_OWORD *)"BVH2,BVH8 Node Index";
                                                                        v771 = v472[2];
                                                                        v772[3] = v772;
                                                                        v772[0] = &unk_26F851778;
                                                                        v772[1] = int32x2Formatter;
                                                                        int v62 = operator new(0x20uLL);
                                                                        int16x8_t v468 = v62;
                                                                        long long v469 = xmmword_242EA7C00;
                                                                        strcpy((char *)v62, "EmitLeaf BVH2Index,PrimID");
                                                                        v470[0] = &unk_26F851778;
                                                                        v470[1] = int32x2Formatter;
                                                                        int8x16_t v471 = v470;
                                                                        int v773 = 1031;
                                                                        std::string::__init_copy_ctor_external(&v774, (const std::string::value_type *)v62, 0x19uLL);
                                                                        uint64_t v63 = (uint64_t)v471;
                                                                        if (v471)
                                                                        {
                                                                          if (v471 == v470)
                                                                          {
                                                                            v776 = &v775;
                                                                            (*(void (**)(void *))(v470[0] + 24))(v470);
LABEL_119:
                                                                            unint64_t v64 = operator new(0x20uLL);
                                                                            int8x16_t v464 = v64;
                                                                            long long v465 = xmmword_242EA7BB0;
                                                                            strcpy((char *)v64, "EmitNode WideIndex,BVH2Index");
                                                                            v466[0] = &unk_26F851778;
                                                                            v466[1] = int32x2Formatter;
                                                                            int16x8_t v467 = v466;
                                                                            int v777 = 1032;
                                                                            std::string::__init_copy_ctor_external(&v778, (const std::string::value_type *)v64, 0x1CuLL);
                                                                            uint64_t v65 = (uint64_t)v467;
                                                                            if (v467)
                                                                            {
                                                                              if (v467 == v466)
                                                                              {
                                                                                v780 = &v779;
                                                                                (*(void (**)(void *))(v466[0] + 24))(v466);
LABEL_124:
                                                                                uint64_t v66 = operator new(0x20uLL);
                                                                                int8x16x4_t v460 = v66;
                                                                                long long v461 = xmmword_242EA7C40;
                                                                                strcpy((char *)v66, "Emitting InnerCount,LeafCount");
                                                                                v462[0] = &unk_26F851778;
                                                                                v462[1] = int32x2Formatter;
                                                                                int8x16_t v463 = v462;
                                                                                int v781 = 1033;
                                                                                std::string::__init_copy_ctor_external(&v782, (const std::string::value_type *)v66, 0x1DuLL);
                                                                                uint64_t v67 = (uint64_t)v463;
                                                                                if (v463)
                                                                                {
                                                                                  if (v463 == v462)
                                                                                  {
                                                                                    v784 = &v783;
                                                                                    (*(void (**)(void *))(v462[0] + 24))(v462);
LABEL_129:
                                                                                    unint64_t v68 = operator new(0x20uLL);
                                                                                    int16x8_t v456 = v68;
                                                                                    long long v457 = xmmword_242EA7C50;
                                                                                    strcpy((char *)v68, "Final LevelCount,NodeCount");
                                                                                    v458[0] = &unk_26F851778;
                                                                                    v458[1] = int32x2Formatter;
                                                                                    uint64_t v459 = v458;
                                                                                    int v785 = 1040;
                                                                                    std::string::__init_copy_ctor_external(&v786, (const std::string::value_type *)v68, 0x1AuLL);
                                                                                    uint64_t v69 = (uint64_t)v459;
                                                                                    if (v459)
                                                                                    {
                                                                                      if (v459 == v458)
                                                                                      {
                                                                                        v788 = &v787;
                                                                                        (*(void (**)(void *))(v458[0] + 24))(v458);
LABEL_134:
                                                                                        HIBYTE(v453) = 15;
                                                                                        strcpy((char *)&v452, "Final LeafCount");
                                                                                        v454[0] = &unk_26F851778;
                                                                                        v454[1] = intFormatter;
                                                                                        int16x8_t v455 = v454;
                                                                                        int v789 = 1041;
                                                                                        long long v790 = v452;
                                                                                        uint64_t v791 = v453;
                                                                                        v792[3] = v792;
                                                                                        v792[0] = &unk_26F851778;
                                                                                        v792[1] = intFormatter;
                                                                                        HIBYTE(v449[2]) = 20;
                                                                                        strcpy((char *)v449, "BVH8 Level,NodeCount");
                                                                                        v450[0] = &unk_26F851778;
                                                                                        v450[1] = int32x2Formatter;
                                                                                        int8x16_t v451 = v450;
                                                                                        int v793 = 1280;
                                                                                        long long v794 = *(_OWORD *)"BVH8 Level,NodeCount";
                                                                                        v795 = v449[2];
                                                                                        v796[3] = v796;
                                                                                        v796[0] = &unk_26F851778;
                                                                                        v796[1] = int32x2Formatter;
                                                                                        HIBYTE(v446[2]) = 19;
                                                                                        strcpy((char *)v446, "BVH8 Node Start,End");
                                                                                        v447[0] = &unk_26F851778;
                                                                                        v447[1] = int32x2Formatter;
                                                                                        int8x16_t v448 = v447;
                                                                                        int v797 = 1281;
                                                                                        long long v798 = *(_OWORD *)"BVH8 Node Start,End";
                                                                                        v799 = v446[2];
                                                                                        v800[3] = v800;
                                                                                        v800[0] = &unk_26F851778;
                                                                                        v800[1] = int32x2Formatter;
                                                                                        HIBYTE(v443[2]) = 17;
                                                                                        strcpy((char *)v443, "BVH2Node,BVH8Node");
                                                                                        v444[0] = &unk_26F851778;
                                                                                        v444[1] = int32x2Formatter;
                                                                                        int32x4_t v445 = v444;
                                                                                        int v801 = 1282;
                                                                                        long long v802 = *(_OWORD *)"BVH2Node,BVH8Node";
                                                                                        v803 = v443[2];
                                                                                        v804[3] = v804;
                                                                                        v804[0] = &unk_26F851778;
                                                                                        v804[1] = int32x2Formatter;
                                                                                        HIBYTE(v440) = 15;
                                                                                        strcpy((char *)&v439, "InitialPathRank");
                                                                                        v441[0] = &unk_26F851778;
                                                                                        v441[1] = intFormatter;
                                                                                        int16x8_t v442 = v441;
                                                                                        int v805 = 1284;
                                                                                        long long v806 = v439;
                                                                                        uint64_t v807 = v440;
                                                                                        v808[3] = v808;
                                                                                        v808[0] = &unk_26F851778;
                                                                                        v808[1] = intFormatter;
                                                                                        uint64_t v70 = operator new(0x28uLL);
                                                                                        int16x8_t v435 = v70;
                                                                                        long long v436 = xmmword_242EA7C60;
                                                                                        strcpy((char *)v70, "Descending BVH2Node,SubtreeCount");
                                                                                        v437[0] = &unk_26F851778;
                                                                                        v437[1] = int32x2Formatter;
                                                                                        unint64_t v438 = v437;
                                                                                        int v809 = 1286;
                                                                                        std::string::__init_copy_ctor_external(&v810, (const std::string::value_type *)v70, 0x20uLL);
                                                                                        uint64_t v71 = (uint64_t)v438;
                                                                                        if (v438)
                                                                                        {
                                                                                          if (v438 == v437)
                                                                                          {
                                                                                            v812 = &v811;
                                                                                            (*(void (**)(void *))(v437[0] + 24))(v437);
LABEL_139:
                                                                                            strcpy((char *)v432, "Choosing SAHScoreIndex");
                                                                                            HIBYTE(v432[2]) = 22;
                                                                                            v433[0] = &unk_26F851778;
                                                                                            v433[1] = intFormatter;
                                                                                            int8x16_t v434 = v433;
                                                                                            int v813 = 1288;
                                                                                            long long v814 = *(_OWORD *)"Choosing SAHScoreIndex";
                                                                                            v815 = v432[2];
                                                                                            v816[3] = v816;
                                                                                            v816[0] = &unk_26F851778;
                                                                                            v816[1] = intFormatter;
                                                                                            int8x16_t v72 = operator new(0x20uLL);
                                                                                            int16x8_t v428 = v72;
                                                                                            long long v429 = xmmword_242EA7C00;
                                                                                            strcpy((char *)v72, "PathRank,LeftSubtreeCount");
                                                                                            v430[0] = &unk_26F851778;
                                                                                            v430[1] = int32x2Formatter;
                                                                                            int8x16_t v431 = v430;
                                                                                            int v817 = 1296;
                                                                                            std::string::__init_copy_ctor_external(&v818, (const std::string::value_type *)v72, 0x19uLL);
                                                                                            uint64_t v73 = (uint64_t)v431;
                                                                                            if (v431)
                                                                                            {
                                                                                              if (v431 == v430)
                                                                                              {
                                                                                                v820 = &v819;
                                                                                                (*(void (**)(void *))(v430[0] + 24))(v430);
LABEL_144:
                                                                                                v425[23] = 21;
                                                                                                strcpy(v425, "NewChild IsLeaf,Index");
                                                                                                v426[0] = &unk_26F851778;
                                                                                                v426[1] = int32x2Formatter;
                                                                                                int16x8_t v427 = v426;
                                                                                                int v821 = 1297;
                                                                                                long long v822 = *(_OWORD *)v425;
                                                                                                uint64_t v823 = *(void *)&v425[16];
                                                                                                v824[3] = v824;
                                                                                                v824[0] = &unk_26F851778;
                                                                                                v824[1] = int32x2Formatter;
                                                                                                int8x16_t v74 = operator new(0x20uLL);
                                                                                                int8x16_t v421 = v74;
                                                                                                long long v422 = xmmword_242EA7BB0;
                                                                                                strcpy((char *)v74, "UpdatedPathRank,SubtreeCount");
                                                                                                v423[0] = &unk_26F851778;
                                                                                                v423[1] = int32x2Formatter;
                                                                                                int8x16_t v424 = v423;
                                                                                                int v825 = 1298;
                                                                                                std::string::__init_copy_ctor_external(&v826, (const std::string::value_type *)v74, 0x1CuLL);
                                                                                                uint64_t v75 = (uint64_t)v424;
                                                                                                if (v424)
                                                                                                {
                                                                                                  if (v424 == v423)
                                                                                                  {
                                                                                                    v828 = &v827;
                                                                                                    (*(void (**)(void *))(v423[0] + 24))(v423);
LABEL_149:
                                                                                                    int8x16_t v76 = operator new(0x28uLL);
                                                                                                    int8x16_t v417 = v76;
                                                                                                    long long v418 = xmmword_242EA7C60;
                                                                                                    strcpy((char *)v76, "EmitLeaf BVH2Index,BVH8LeafIndex");
                                                                                                    v419[0] = &unk_26F851778;
                                                                                                    v419[1] = int32x2Formatter;
                                                                                                    int8x16_t v420 = v419;
                                                                                                    int v829 = 1302;
                                                                                                    std::string::__init_copy_ctor_external(&v830, (const std::string::value_type *)v76, 0x20uLL);
                                                                                                    uint64_t v77 = (uint64_t)v420;
                                                                                                    if (v420)
                                                                                                    {
                                                                                                      if (v420 == v419)
                                                                                                      {
                                                                                                        v832 = &v831;
                                                                                                        (*(void (**)(void *))(v419[0] + 24))(v419);
LABEL_154:
                                                                                                        int8x16_t v78 = operator new(0x28uLL);
                                                                                                        int16x8_t v413 = v78;
                                                                                                        long long v414 = xmmword_242EA7C60;
                                                                                                        strcpy((char *)v78, "EmitNode BVH2Index,BVH8NodeIndex");
                                                                                                        v415[0] = &unk_26F851778;
                                                                                                        v415[1] = int32x2Formatter;
                                                                                                        int8x16_t v416 = v415;
                                                                                                        int v833 = 1304;
                                                                                                        std::string::__init_copy_ctor_external(&v834, (const std::string::value_type *)v78, 0x20uLL);
                                                                                                        uint64_t v79 = (uint64_t)v416;
                                                                                                        if (v416)
                                                                                                        {
                                                                                                          if (v416 == v415)
                                                                                                          {
                                                                                                            v836 = &v835;
                                                                                                            (*(void (**)(void *))(v415[0] + 24))(v415);
LABEL_159:
                                                                                                            HIBYTE(v410[2]) = 16;
                                                                                                            strcpy((char *)v410, "Final LevelCount");
                                                                                                            v411[0] = &unk_26F851778;
                                                                                                            v411[1] = intFormatter;
                                                                                                            int16x8_t v412 = v411;
                                                                                                            int v837 = 1312;
                                                                                                            long long v838 = *(_OWORD *)"Final LevelCount";
                                                                                                            v839 = v410[2];
                                                                                                            v840[3] = v840;
                                                                                                            v840[0] = &unk_26F851778;
                                                                                                            v840[1] = intFormatter;
                                                                                                            unint64_t v80 = operator new(0x20uLL);
                                                                                                            unint64_t v406 = v80;
                                                                                                            long long v407 = xmmword_242EA7C00;
                                                                                                            strcpy((char *)v80, "Final NodeCount,LeafCount");
                                                                                                            v408[0] = &unk_26F851778;
                                                                                                            v408[1] = int32x2Formatter;
                                                                                                            int8x16_t v409 = v408;
                                                                                                            int v841 = 1313;
                                                                                                            std::string::__init_copy_ctor_external(&v842, (const std::string::value_type *)v80, 0x19uLL);
                                                                                                            uint64_t v81 = (uint64_t)v409;
                                                                                                            if (v409)
                                                                                                            {
                                                                                                              if (v409 == v408)
                                                                                                              {
                                                                                                                v844 = &v843;
                                                                                                                (*(void (**)(void *))(v408[0] + 24))(v408);
LABEL_164:
                                                                                                                int64x2_t v82 = operator new(0x20uLL);
                                                                                                                uint64x2_t v402 = v82;
                                                                                                                long long v403 = xmmword_242EA7C70;
                                                                                                                strcpy((char *)v82, "ForceBalanced,CurrentWideLevel");
                                                                                                                v404[0] = &unk_26F851778;
                                                                                                                v404[1] = int32x2Formatter;
                                                                                                                int64x2_t v405 = v404;
                                                                                                                int v845 = 1315;
                                                                                                                std::string::__init_copy_ctor_external(&v846, (const std::string::value_type *)v82, 0x1EuLL);
                                                                                                                uint64_t v83 = (uint64_t)v405;
                                                                                                                if (v405)
                                                                                                                {
                                                                                                                  if (v405 == v404)
                                                                                                                  {
                                                                                                                    v848 = &v847;
                                                                                                                    (*(void (**)(void *))(v404[0] + 24))(v404);
LABEL_169:
                                                                                                                    unint64_t v84 = operator new(0x28uLL);
                                                                                                                    int32x4_t v398 = v84;
                                                                                                                    long long v399 = xmmword_242EA7BE0;
                                                                                                                    strcpy((char *)v84, "BalancedPrimCount,BalancedPrimOffset");
                                                                                                                    v400[0] = &unk_26F851778;
                                                                                                                    v400[1] = int32x2Formatter;
                                                                                                                    uint64x2_t v401 = v400;
                                                                                                                    int v849 = 1316;
                                                                                                                    std::string::__init_copy_ctor_external(&v850, (const std::string::value_type *)v84, 0x24uLL);
                                                                                                                    uint64_t v85 = (uint64_t)v401;
                                                                                                                    if (v401)
                                                                                                                    {
                                                                                                                      if (v401 == v400)
                                                                                                                      {
                                                                                                                        v852 = &v851;
                                                                                                                        (*(void (**)(void *))(v400[0] + 24))(v400);
LABEL_174:
                                                                                                                        int8x16_t v86 = operator new(0x40uLL);
                                                                                                                        char v394 = v86;
                                                                                                                        long long v395 = xmmword_242EA7C80;
                                                                                                                        strcpy((char *)v86, "Exceeded Inner Node Count: attempedNodeIndex, availableSize");
                                                                                                                        v396[0] = &unk_26F851778;
                                                                                                                        v396[1] = int32x2Formatter;
                                                                                                                        int32x4_t v397 = v396;
                                                                                                                        int v853 = 1317;
                                                                                                                        std::string::__init_copy_ctor_external(&v854, (const std::string::value_type *)v86, 0x3BuLL);
                                                                                                                        uint64_t v87 = (uint64_t)v397;
                                                                                                                        if (v397)
                                                                                                                        {
                                                                                                                          if (v397 == v396)
                                                                                                                          {
                                                                                                                            v856 = &v855;
                                                                                                                            (*(void (**)(void *))(v396[0] + 24))(v396);
LABEL_179:
                                                                                                                            int8x16_t v88 = operator new(0x40uLL);
                                                                                                                            uint64_t v390 = v88;
                                                                                                                            long long v391 = xmmword_242EA7C90;
                                                                                                                            strcpy((char *)v88, "Exceeded Inner Node Count: required node count, available count");
                                                                                                                            v392[0] = &unk_26F851778;
                                                                                                                            v392[1] = int32x2Formatter;
                                                                                                                            uint16x8_t v393 = v392;
                                                                                                                            int v857 = 1318;
                                                                                                                            std::string::__init_copy_ctor_external(&v858, (const std::string::value_type *)v88, 0x3FuLL);
                                                                                                                            uint64_t v89 = (uint64_t)v393;
                                                                                                                            if (v393)
                                                                                                                            {
                                                                                                                              if (v393 == v392)
                                                                                                                              {
                                                                                                                                v860 = &v859;
                                                                                                                                (*(void (**)(void *))(v392[0] + 24))(v392);
LABEL_184:
                                                                                                                                int8x16_t v90 = operator new(0x30uLL);
                                                                                                                                int64x2_t v386 = v90;
                                                                                                                                long long v387 = xmmword_242EA7CA0;
                                                                                                                                strcpy((char *)v90, "Balanced Build: Required Depth, Prim Count");
                                                                                                                                v388[0] = &unk_26F851778;
                                                                                                                                v388[1] = int32x2Formatter;
                                                                                                                                unint64_t v389 = v388;
                                                                                                                                int v861 = 1319;
                                                                                                                                std::string::__init_copy_ctor_external(&v862, (const std::string::value_type *)v90, 0x2AuLL);
                                                                                                                                uint64_t v91 = (uint64_t)v389;
                                                                                                                                if (v389)
                                                                                                                                {
                                                                                                                                  if (v389 == v388)
                                                                                                                                  {
                                                                                                                                    v864 = &v863;
                                                                                                                                    (*(void (**)(void *))(v388[0] + 24))(v388);
LABEL_189:
                                                                                                                                    int8x16_t v92 = operator new(0x50uLL);
                                                                                                                                    int64x2_t v382 = v92;
                                                                                                                                    long long v383 = xmmword_242EA7CB0;
                                                                                                                                    strcpy((char *)v92, "Balanced Build: BalancedPrimOffset (before remainder), BalancedPrimCount");
                                                                                                                                    v384[0] = &unk_26F851778;
                                                                                                                                    v384[1] = int32x2Formatter;
                                                                                                                                    int64x2_t v385 = v384;
                                                                                                                                    int v865 = 1320;
                                                                                                                                    std::string::__init_copy_ctor_external(&v866, (const std::string::value_type *)v92, 0x48uLL);
                                                                                                                                    uint64_t v93 = (uint64_t)v385;
                                                                                                                                    if (v385)
                                                                                                                                    {
                                                                                                                                      if (v385 == v384)
                                                                                                                                      {
                                                                                                                                        v868 = &v867;
                                                                                                                                        (*(void (**)(void *))(v384[0] + 24))(v384);
LABEL_194:
                                                                                                                                        int8x16_t v94 = operator new(0x38uLL);
                                                                                                                                        int32x4_t v378 = v94;
                                                                                                                                        long long v379 = xmmword_242EA7CC0;
                                                                                                                                        strcpy((char *)v94, "Complete/Balanced Build: NewNodeCount, NewLeafCount");
                                                                                                                                        v380[0] = &unk_26F851778;
                                                                                                                                        v380[1] = int32x2Formatter;
                                                                                                                                        int32x4_t v381 = v380;
                                                                                                                                        int v869 = 1330;
                                                                                                                                        std::string::__init_copy_ctor_external(&v870, (const std::string::value_type *)v94, 0x33uLL);
                                                                                                                                        uint64_t v95 = (uint64_t)v381;
                                                                                                                                        if (v381)
                                                                                                                                        {
                                                                                                                                          if (v381 == v380)
                                                                                                                                          {
                                                                                                                                            v872 = &v871;
                                                                                                                                            (*(void (**)(void *))(v380[0] + 24))(v380);
LABEL_199:
                                                                                                                                            unint64_t v96 = operator new(0x48uLL);
                                                                                                                                            int16x8_t v374 = v96;
                                                                                                                                            long long v375 = xmmword_242EA7CD0;
                                                                                                                                            strcpy((char *)v96, "Complete/Balanced Build: NewBalancedPrimOffset, NewBalancedPrimCount");
                                                                                                                                            v376[0] = &unk_26F851778;
                                                                                                                                            v376[1] = int32x2Formatter;
                                                                                                                                            uint16x8_t v377 = v376;
                                                                                                                                            int v873 = 1331;
                                                                                                                                            std::string::__init_copy_ctor_external(&v874, (const std::string::value_type *)v96, 0x44uLL);
                                                                                                                                            uint64_t v97 = (uint64_t)v377;
                                                                                                                                            if (v377)
                                                                                                                                            {
                                                                                                                                              if (v377 == v376)
                                                                                                                                              {
                                                                                                                                                v876 = &v875;
                                                                                                                                                (*(void (**)(void *))(v376[0] + 24))(v376);
LABEL_204:
                                                                                                                                                HIBYTE(v371) = 14;
                                                                                                                                                strcpy((char *)v370, "PrintBVH8Level");
                                                                                                                                                v372[0] = &unk_26F851778;
                                                                                                                                                v372[1] = intFormatter;
                                                                                                                                                char v373 = v372;
                                                                                                                                                int v877 = 1536;
                                                                                                                                                long long v878 = *(_OWORD *)v370;
                                                                                                                                                uint64_t v879 = v371;
                                                                                                                                                v880[3] = v880;
                                                                                                                                                v880[0] = &unk_26F851778;
                                                                                                                                                v880[1] = intFormatter;
                                                                                                                                                HIBYTE(v367[2]) = 17;
                                                                                                                                                strcpy((char *)v367, "StartNode,EndNode");
                                                                                                                                                v368[0] = &unk_26F851778;
                                                                                                                                                v368[1] = int32x2Formatter;
                                                                                                                                                int64x2_t v369 = v368;
                                                                                                                                                int v881 = 1537;
                                                                                                                                                long long v882 = *(_OWORD *)"StartNode,EndNode";
                                                                                                                                                v883 = v367[2];
                                                                                                                                                v884[3] = v884;
                                                                                                                                                v884[0] = &unk_26F851778;
                                                                                                                                                v884[1] = int32x2Formatter;
                                                                                                                                                int v98 = operator new(0x20uLL);
                                                                                                                                                int32x4_t v363 = v98;
                                                                                                                                                long long v364 = xmmword_242EA7C00;
                                                                                                                                                strcpy((char *)v98, "WideNode,InnerChildOffset");
                                                                                                                                                v365[0] = &unk_26F851778;
                                                                                                                                                v365[1] = int32x2Formatter;
                                                                                                                                                uint64x2_t v366 = v365;
                                                                                                                                                int v885 = 1538;
                                                                                                                                                std::string::__init_copy_ctor_external(&v886, (const std::string::value_type *)v98, 0x19uLL);
                                                                                                                                                uint64_t v99 = (uint64_t)v366;
                                                                                                                                                if (v366)
                                                                                                                                                {
                                                                                                                                                  if (v366 == v365)
                                                                                                                                                  {
                                                                                                                                                    v888 = &v887;
                                                                                                                                                    (*(void (**)(void *))(v365[0] + 24))(v365);
LABEL_209:
                                                                                                                                                    int64x2_t v100 = operator new(0x20uLL);
                                                                                                                                                    int8x16x2_t v359 = v100;
                                                                                                                                                    long long v360 = xmmword_242EA7BC0;
                                                                                                                                                    strcpy((char *)v100, "WideNode,InnerChildCount");
                                                                                                                                                    v361[0] = &unk_26F851778;
                                                                                                                                                    v361[1] = int32x2Formatter;
                                                                                                                                                    int32x4_t v362 = v361;
                                                                                                                                                    int v889 = 1539;
                                                                                                                                                    std::string::__init_copy_ctor_external(&v890, (const std::string::value_type *)v100, 0x18uLL);
                                                                                                                                                    uint64_t v101 = (uint64_t)v362;
                                                                                                                                                    if (v362)
                                                                                                                                                    {
                                                                                                                                                      if (v362 == v361)
                                                                                                                                                      {
                                                                                                                                                        v892 = &v891;
                                                                                                                                                        (*(void (**)(void *))(v361[0] + 24))(v361);
LABEL_214:
                                                                                                                                                        HIBYTE(v356[2]) = 19;
                                                                                                                                                        strcpy((char *)v356, "WideNode,LeafOffset");
                                                                                                                                                        v357[0] = &unk_26F851778;
                                                                                                                                                        v357[1] = int32x2Formatter;
                                                                                                                                                        int8x16x2_t v358 = v357;
                                                                                                                                                        int v893 = 1540;
                                                                                                                                                        long long v894 = *(_OWORD *)"WideNode,LeafOffset";
                                                                                                                                                        v895 = v356[2];
                                                                                                                                                        v896[3] = v896;
                                                                                                                                                        v896[0] = &unk_26F851778;
                                                                                                                                                        v896[1] = int32x2Formatter;
                                                                                                                                                        HIBYTE(v353[2]) = 18;
                                                                                                                                                        strcpy((char *)v353, "WideNode,LeafCount");
                                                                                                                                                        v354[0] = &unk_26F851778;
                                                                                                                                                        v354[1] = int32x2Formatter;
                                                                                                                                                        unsigned __int16 v355 = v354;
                                                                                                                                                        int v897 = 1541;
                                                                                                                                                        long long v898 = *(_OWORD *)"WideNode,LeafCount";
                                                                                                                                                        v899 = v353[2];
                                                                                                                                                        v900[3] = v900;
                                                                                                                                                        v900[0] = &unk_26F851778;
                                                                                                                                                        v900[1] = int32x2Formatter;
                                                                                                                                                        HIBYTE(v350[2]) = 17;
                                                                                                                                                        strcpy((char *)v350, "WideNode,LeafPair");
                                                                                                                                                        v351[0] = &unk_26F851778;
                                                                                                                                                        v351[1] = int32_hex32_Formatter;
                                                                                                                                                        int v352 = v351;
                                                                                                                                                        int v901 = 1542;
                                                                                                                                                        long long v902 = *(_OWORD *)"WideNode,LeafPair";
                                                                                                                                                        v903 = v350[2];
                                                                                                                                                        v904[3] = v904;
                                                                                                                                                        v904[0] = &unk_26F851778;
                                                                                                                                                        v904[1] = int32_hex32_Formatter;
                                                                                                                                                        HIBYTE(v347[2]) = 19;
                                                                                                                                                        strcpy((char *)v347, "LeafIndex,PrimIndex");
                                                                                                                                                        v348[0] = &unk_26F851778;
                                                                                                                                                        v348[1] = int32x2Formatter;
                                                                                                                                                        unsigned __int16 v349 = v348;
                                                                                                                                                        int v905 = 1543;
                                                                                                                                                        long long v906 = *(_OWORD *)"LeafIndex,PrimIndex";
                                                                                                                                                        v907 = v347[2];
                                                                                                                                                        v908[3] = v908;
                                                                                                                                                        v908[0] = &unk_26F851778;
                                                                                                                                                        v908[1] = int32x2Formatter;
                                                                                                                                                        HIBYTE(v344[2]) = 19;
                                                                                                                                                        strcpy((char *)v344, "LeafIndex,GeomIndex");
                                                                                                                                                        v345[0] = &unk_26F851778;
                                                                                                                                                        v345[1] = int32x2Formatter;
                                                                                                                                                        int v346 = v345;
                                                                                                                                                        int v909 = 1544;
                                                                                                                                                        long long v910 = *(_OWORD *)"LeafIndex,GeomIndex";
                                                                                                                                                        v911 = v344[2];
                                                                                                                                                        v912[3] = v912;
                                                                                                                                                        v912[0] = &unk_26F851778;
                                                                                                                                                        v912[1] = int32x2Formatter;
                                                                                                                                                        HIBYTE(v341) = 14;
                                                                                                                                                        strcpy((char *)&v340, "Load InnerNode");
                                                                                                                                                        v342[0] = &unk_26F851778;
                                                                                                                                                        v342[1] = intFormatter;
                                                                                                                                                        unsigned __int16 v343 = v342;
                                                                                                                                                        int v913 = 2048;
                                                                                                                                                        long long v914 = v340;
                                                                                                                                                        uint64_t v915 = v341;
                                                                                                                                                        v916[3] = v916;
                                                                                                                                                        v916[0] = &unk_26F851778;
                                                                                                                                                        v916[1] = intFormatter;
                                                                                                                                                        int8x16_t v102 = operator new(0x20uLL);
                                                                                                                                                        int v336 = v102;
                                                                                                                                                        long long v337 = xmmword_242EA7C30;
                                                                                                                                                        strcpy((char *)v102, "InnerChildCount,NodeLeafSpaeReq");
                                                                                                                                                        v338[0] = &unk_26F851778;
                                                                                                                                                        v338[1] = int32x2Formatter;
                                                                                                                                                        int v339 = v338;
                                                                                                                                                        int v917 = 2049;
                                                                                                                                                        std::string::__init_copy_ctor_external(&v918, (const std::string::value_type *)v102, 0x1FuLL);
                                                                                                                                                        uint64_t v103 = (uint64_t)v339;
                                                                                                                                                        if (v339)
                                                                                                                                                        {
                                                                                                                                                          if (v339 == v338)
                                                                                                                                                          {
                                                                                                                                                            v920 = &v919;
                                                                                                                                                            (*(void (**)(void *))(v338[0] + 24))(v338);
LABEL_219:
                                                                                                                                                            HIBYTE(v333[2]) = 16;
                                                                                                                                                            strcpy((char *)v333, "PreClampQTBCount");
                                                                                                                                                            v334[0] = &unk_26F851778;
                                                                                                                                                            v334[1] = intFormatter;
                                                                                                                                                            int v335 = v334;
                                                                                                                                                            int v921 = 2050;
                                                                                                                                                            long long v922 = *(_OWORD *)"PreClampQTBCount";
                                                                                                                                                            v923 = v333[2];
                                                                                                                                                            v924[3] = v924;
                                                                                                                                                            v924[0] = &unk_26F851778;
                                                                                                                                                            v924[1] = intFormatter;
                                                                                                                                                            int16x8_t v104 = operator new(0x20uLL);
                                                                                                                                                            int v329 = v104;
                                                                                                                                                            long long v330 = xmmword_242EA7BB0;
                                                                                                                                                            strcpy((char *)v104, "NodeID, Child Offset Pre QTB");
                                                                                                                                                            v331[0] = &unk_26F851778;
                                                                                                                                                            v331[1] = int32x2Formatter;
                                                                                                                                                            int v332 = v331;
                                                                                                                                                            int v925 = 2051;
                                                                                                                                                            std::string::__init_copy_ctor_external(&v926, (const std::string::value_type *)v104, 0x1CuLL);
                                                                                                                                                            uint64_t v105 = (uint64_t)v332;
                                                                                                                                                            if (v332)
                                                                                                                                                            {
                                                                                                                                                              if (v332 == v331)
                                                                                                                                                              {
                                                                                                                                                                v928 = &v927;
                                                                                                                                                                (*(void (**)(void *))(v331[0] + 24))(v331);
LABEL_224:
                                                                                                                                                                int8x8_t v106 = operator new(0x20uLL);
                                                                                                                                                                int v325 = v106;
                                                                                                                                                                long long v326 = xmmword_242EA7C70;
                                                                                                                                                                strcpy((char *)v106, "NodeID, Child Offset Relocated");
                                                                                                                                                                v327[0] = &unk_26F851778;
                                                                                                                                                                v327[1] = int32x2Formatter;
                                                                                                                                                                int v328 = v327;
                                                                                                                                                                int v929 = 2052;
                                                                                                                                                                std::string::__init_copy_ctor_external(&v930, (const std::string::value_type *)v106, 0x1EuLL);
                                                                                                                                                                uint64_t v107 = (uint64_t)v328;
                                                                                                                                                                if (v328)
                                                                                                                                                                {
                                                                                                                                                                  if (v328 == v327)
                                                                                                                                                                  {
                                                                                                                                                                    v932 = &v931;
                                                                                                                                                                    (*(void (**)(void *))(v327[0] + 24))(v327);
LABEL_229:
                                                                                                                                                                    int16x8_t v108 = operator new(0x20uLL);
                                                                                                                                                                    int v321 = v108;
                                                                                                                                                                    long long v322 = xmmword_242EA7C40;
                                                                                                                                                                    strcpy((char *)v108, "NodeID, Child Offset Post QTB");
                                                                                                                                                                    v323[0] = &unk_26F851778;
                                                                                                                                                                    v323[1] = int32x2Formatter;
                                                                                                                                                                    int v324 = v323;
                                                                                                                                                                    int v933 = 2053;
                                                                                                                                                                    std::string::__init_copy_ctor_external(&v934, (const std::string::value_type *)v108, 0x1DuLL);
                                                                                                                                                                    uint64_t v109 = (uint64_t)v324;
                                                                                                                                                                    if (v324)
                                                                                                                                                                    {
                                                                                                                                                                      if (v324 == v323)
                                                                                                                                                                      {
                                                                                                                                                                        v936 = &v935;
                                                                                                                                                                        (*(void (**)(void *))(v323[0] + 24))(v323);
LABEL_234:
                                                                                                                                                                        int8x16_t v110 = operator new(0x20uLL);
                                                                                                                                                                        int v317 = v110;
                                                                                                                                                                        long long v318 = xmmword_242EA7C30;
                                                                                                                                                                        strcpy((char *)v110, "QTBExclusiveSum,ClampedQTBCount");
                                                                                                                                                                        v319[0] = &unk_26F851778;
                                                                                                                                                                        v319[1] = int32x2Formatter;
                                                                                                                                                                        int v320 = v319;
                                                                                                                                                                        int v937 = 2054;
                                                                                                                                                                        std::string::__init_copy_ctor_external(&v938, (const std::string::value_type *)v110, 0x1FuLL);
                                                                                                                                                                        uint64_t v111 = (uint64_t)v320;
                                                                                                                                                                        if (v320)
                                                                                                                                                                        {
                                                                                                                                                                          if (v320 == v319)
                                                                                                                                                                          {
                                                                                                                                                                            v940 = &v939;
                                                                                                                                                                            (*(void (**)(void *))(v319[0] + 24))(v319);
LABEL_239:
                                                                                                                                                                            HIBYTE(v314) = 10;
                                                                                                                                                                            strcpy((char *)&v313, "QTBNodeEnd");
                                                                                                                                                                            v315[0] = &unk_26F851778;
                                                                                                                                                                            v315[1] = intFormatter;
                                                                                                                                                                            int v316 = v315;
                                                                                                                                                                            int v941 = 2055;
                                                                                                                                                                            long long v942 = v313;
                                                                                                                                                                            uint64_t v943 = v314;
                                                                                                                                                                            v944[3] = v944;
                                                                                                                                                                            v944[0] = &unk_26F851778;
                                                                                                                                                                            v944[1] = intFormatter;
                                                                                                                                                                            int64x2_t v112 = operator new(0x28uLL);
                                                                                                                                                                            int v309 = v112;
                                                                                                                                                                            long long v310 = xmmword_242EA7BA0;
                                                                                                                                                                            strcpy((char *)v112, "AssignOffset: InnerNode,ChildNode");
                                                                                                                                                                            v311[0] = &unk_26F851778;
                                                                                                                                                                            v311[1] = int32x2Formatter;
                                                                                                                                                                            int v312 = v311;
                                                                                                                                                                            int v945 = 2064;
                                                                                                                                                                            std::string::__init_copy_ctor_external(&v946, (const std::string::value_type *)v112, 0x21uLL);
                                                                                                                                                                            uint64_t v113 = (uint64_t)v312;
                                                                                                                                                                            if (v312)
                                                                                                                                                                            {
                                                                                                                                                                              if (v312 == v311)
                                                                                                                                                                              {
                                                                                                                                                                                v948 = &v947;
                                                                                                                                                                                (*(void (**)(void *))(v311[0] + 24))(v311);
LABEL_244:
                                                                                                                                                                                unint64_t v114 = operator new(0x20uLL);
                                                                                                                                                                                int v305 = v114;
                                                                                                                                                                                long long v306 = xmmword_242EA7C50;
                                                                                                                                                                                strcpy((char *)v114, "InnerNode,FirstChildOffset");
                                                                                                                                                                                v307[0] = &unk_26F851778;
                                                                                                                                                                                v307[1] = int32x2Formatter;
                                                                                                                                                                                int v308 = v307;
                                                                                                                                                                                int v949 = 2096;
                                                                                                                                                                                std::string::__init_copy_ctor_external(&v950, (const std::string::value_type *)v114, 0x1AuLL);
                                                                                                                                                                                uint64_t v115 = (uint64_t)v308;
                                                                                                                                                                                if (v308)
                                                                                                                                                                                {
                                                                                                                                                                                  if (v308 == v307)
                                                                                                                                                                                  {
                                                                                                                                                                                    v952 = &v951;
                                                                                                                                                                                    (*(void (**)(void *))(v307[0] + 24))(v307);
LABEL_249:
                                                                                                                                                                                    strcpy((char *)v302, "ChildInnerNode,BOffset");
                                                                                                                                                                                    HIBYTE(v302[2]) = 22;
                                                                                                                                                                                    v303[0] = &unk_26F851778;
                                                                                                                                                                                    v303[1] = int32x2Formatter;
                                                                                                                                                                                    int v304 = v303;
                                                                                                                                                                                    int v953 = 2097;
                                                                                                                                                                                    long long v954 = *(_OWORD *)"ChildInnerNode,BOffset";
                                                                                                                                                                                    v955 = v302[2];
                                                                                                                                                                                    v956[3] = v956;
                                                                                                                                                                                    v956[0] = &unk_26F851778;
                                                                                                                                                                                    v956[1] = int32x2Formatter;
                                                                                                                                                                                    strcpy((char *)v299, "ChildLeafIndex,BOffset");
                                                                                                                                                                                    HIBYTE(v299[2]) = 22;
                                                                                                                                                                                    v300[0] = &unk_26F851778;
                                                                                                                                                                                    v300[1] = int32x2Formatter;
                                                                                                                                                                                    int v301 = v300;
                                                                                                                                                                                    int v957 = 2098;
                                                                                                                                                                                    long long v958 = *(_OWORD *)"ChildLeafIndex,BOffset";
                                                                                                                                                                                    v959 = v299[2];
                                                                                                                                                                                    v960[3] = v960;
                                                                                                                                                                                    v960[0] = &unk_26F851778;
                                                                                                                                                                                    v960[1] = int32x2Formatter;
                                                                                                                                                                                    uint64_t v116 = operator new(0x20uLL);
                                                                                                                                                                                    unint64_t v295 = v116;
                                                                                                                                                                                    long long v296 = xmmword_242EA7C70;
                                                                                                                                                                                    strcpy((char *)v116, "ChildLeafOffset,ChildLeafCount");
                                                                                                                                                                                    v297[0] = &unk_26F851778;
                                                                                                                                                                                    v297[1] = int32x2Formatter;
                                                                                                                                                                                    int64x2_t v298 = v297;
                                                                                                                                                                                    int v961 = 2099;
                                                                                                                                                                                    std::string::__init_copy_ctor_external(&v962, (const std::string::value_type *)v116, 0x1EuLL);
                                                                                                                                                                                    uint64_t v117 = (uint64_t)v298;
                                                                                                                                                                                    if (v298)
                                                                                                                                                                                    {
                                                                                                                                                                                      if (v298 == v297)
                                                                                                                                                                                      {
                                                                                                                                                                                        v964 = &v963;
                                                                                                                                                                                        (*(void (**)(void *))(v297[0] + 24))(v297);
LABEL_254:
                                                                                                                                                                                        HIBYTE(v292[2]) = 20;
                                                                                                                                                                                        strcpy((char *)v292, "Lower Subtree offset");
                                                                                                                                                                                        v293[0] = &unk_26F851778;
                                                                                                                                                                                        v293[1] = hex64Formatter;
                                                                                                                                                                                        int64x2_t v294 = v293;
                                                                                                                                                                                        int v965 = 2560;
                                                                                                                                                                                        long long v966 = *(_OWORD *)"Lower Subtree offset";
                                                                                                                                                                                        v967 = v292[2];
                                                                                                                                                                                        v968[3] = v968;
                                                                                                                                                                                        v968[0] = &unk_26F851778;
                                                                                                                                                                                        v968[1] = hex64Formatter;
                                                                                                                                                                                        HIBYTE(v289[2]) = 20;
                                                                                                                                                                                        strcpy((char *)v289, "Upper Subtree offset");
                                                                                                                                                                                        v290[0] = &unk_26F851778;
                                                                                                                                                                                        v290[1] = hex64Formatter;
                                                                                                                                                                                        int64x2_t v291 = v290;
                                                                                                                                                                                        int v969 = 2561;
                                                                                                                                                                                        long long v970 = *(_OWORD *)"Upper Subtree offset";
                                                                                                                                                                                        v971 = v289[2];
                                                                                                                                                                                        v972[3] = v972;
                                                                                                                                                                                        v972[0] = &unk_26F851778;
                                                                                                                                                                                        v972[1] = hex64Formatter;
                                                                                                                                                                                        strcpy((char *)v286, "LeafCount,MaxSpanCount");
                                                                                                                                                                                        HIBYTE(v286[2]) = 22;
                                                                                                                                                                                        v287[0] = &unk_26F851778;
                                                                                                                                                                                        v287[1] = int32x2Formatter;
                                                                                                                                                                                        int8x16_t v288 = v287;
                                                                                                                                                                                        int v973 = 2816;
                                                                                                                                                                                        long long v974 = *(_OWORD *)"LeafCount,MaxSpanCount";
                                                                                                                                                                                        v975 = v286[2];
                                                                                                                                                                                        v976[3] = v976;
                                                                                                                                                                                        v976[0] = &unk_26F851778;
                                                                                                                                                                                        v976[1] = int32x2Formatter;
                                                                                                                                                                                        HIBYTE(v283[2]) = 19;
                                                                                                                                                                                        strcpy((char *)v283, "LeafIndex,PrimIndex");
                                                                                                                                                                                        v284[0] = &unk_26F851778;
                                                                                                                                                                                        v284[1] = int32x2Formatter;
                                                                                                                                                                                        int8x16_t v285 = v284;
                                                                                                                                                                                        int v977 = 3072;
                                                                                                                                                                                        long long v978 = *(_OWORD *)"LeafIndex,PrimIndex";
                                                                                                                                                                                        v979 = v283[2];
                                                                                                                                                                                        v980[3] = v980;
                                                                                                                                                                                        v980[0] = &unk_26F851778;
                                                                                                                                                                                        v980[1] = int32x2Formatter;
                                                                                                                                                                                        HIBYTE(v280[2]) = 19;
                                                                                                                                                                                        strcpy((char *)v280, "LeafIndex,GeomIndex");
                                                                                                                                                                                        v281[0] = &unk_26F851778;
                                                                                                                                                                                        v281[1] = int32x2Formatter;
                                                                                                                                                                                        int8x16_t v282 = v281;
                                                                                                                                                                                        int v981 = 3073;
                                                                                                                                                                                        long long v982 = *(_OWORD *)"LeafIndex,GeomIndex";
                                                                                                                                                                                        v983 = v280[2];
                                                                                                                                                                                        v984[3] = v984;
                                                                                                                                                                                        v984[0] = &unk_26F851778;
                                                                                                                                                                                        v984[1] = int32x2Formatter;
                                                                                                                                                                                        HIBYTE(v277[2]) = 17;
                                                                                                                                                                                        strcpy((char *)v277, "LeafIndex,Invalid");
                                                                                                                                                                                        v278[0] = &unk_26F851778;
                                                                                                                                                                                        v278[1] = int32x2Formatter;
                                                                                                                                                                                        int8x16_t v279 = v278;
                                                                                                                                                                                        int v985 = 3074;
                                                                                                                                                                                        long long v986 = *(_OWORD *)"LeafIndex,Invalid";
                                                                                                                                                                                        v987 = v277[2];
                                                                                                                                                                                        v988[3] = v988;
                                                                                                                                                                                        v988[0] = &unk_26F851778;
                                                                                                                                                                                        v988[1] = int32x2Formatter;
                                                                                                                                                                                        int64x2_t v118 = operator new(0x20uLL);
                                                                                                                                                                                        int8x16_t v273 = v118;
                                                                                                                                                                                        long long v274 = xmmword_242EA7C10;
                                                                                                                                                                                        strcpy((char *)v118, "WorkQueueCount, OutputCount");
                                                                                                                                                                                        v275[0] = &unk_26F851778;
                                                                                                                                                                                        v275[1] = int32x2Formatter;
                                                                                                                                                                                        int8x16_t v276 = v275;
                                                                                                                                                                                        int v989 = 3328;
                                                                                                                                                                                        std::string::__init_copy_ctor_external(&v990, (const std::string::value_type *)v118, 0x1BuLL);
                                                                                                                                                                                        uint64_t v119 = (uint64_t)v276;
                                                                                                                                                                                        if (v276)
                                                                                                                                                                                        {
                                                                                                                                                                                          if (v276 == v275)
                                                                                                                                                                                          {
                                                                                                                                                                                            v992 = &v991;
                                                                                                                                                                                            (*(void (**)(void *))(v275[0] + 24))(v275);
LABEL_259:
                                                                                                                                                                                            HIBYTE(v270[2]) = 19;
                                                                                                                                                                                            strcpy((char *)v270, "InRange Start,Count");
                                                                                                                                                                                            v271[0] = &unk_26F851778;
                                                                                                                                                                                            v271[1] = int32x2Formatter;
                                                                                                                                                                                            int8x16_t v272 = v271;
                                                                                                                                                                                            int v993 = 3329;
                                                                                                                                                                                            long long v994 = *(_OWORD *)"InRange Start,Count";
                                                                                                                                                                                            v995 = v270[2];
                                                                                                                                                                                            v996[3] = v996;
                                                                                                                                                                                            v996[0] = &unk_26F851778;
                                                                                                                                                                                            v996[1] = int32x2Formatter;
                                                                                                                                                                                            HIBYTE(v267[2]) = 21;
                                                                                                                                                                                            strcpy((char *)v267, "LeftRange Start,Count");
                                                                                                                                                                                            v268[0] = &unk_26F851778;
                                                                                                                                                                                            v268[1] = int32x2Formatter;
                                                                                                                                                                                            int8x16_t v269 = v268;
                                                                                                                                                                                            int v997 = 3330;
                                                                                                                                                                                            long long v998 = *(_OWORD *)"LeftRange Start,Count";
                                                                                                                                                                                            v999 = v267[2];
                                                                                                                                                                                            v1000[3] = v1000;
                                                                                                                                                                                            v1000[0] = &unk_26F851778;
                                                                                                                                                                                            v1000[1] = int32x2Formatter;
                                                                                                                                                                                            strcpy((char *)v264, "RightRange Start,Count");
                                                                                                                                                                                            HIBYTE(v264[2]) = 22;
                                                                                                                                                                                            v265[0] = &unk_26F851778;
                                                                                                                                                                                            v265[1] = int32x2Formatter;
                                                                                                                                                                                            int16x8_t v266 = v265;
                                                                                                                                                                                            int v1001 = 3331;
                                                                                                                                                                                            long long v1002 = *(_OWORD *)"RightRange Start,Count";
                                                                                                                                                                                            v1003 = v264[2];
                                                                                                                                                                                            v1004[3] = v1004;
                                                                                                                                                                                            v1004[0] = &unk_26F851778;
                                                                                                                                                                                            v1004[1] = int32x2Formatter;
                                                                                                                                                                                            int v120 = operator new(0x20uLL);
                                                                                                                                                                                            int16x8_t v260 = v120;
                                                                                                                                                                                            long long v261 = xmmword_242EA7C00;
                                                                                                                                                                                            strcpy((char *)v120, "newOutCount, newWorkCount");
                                                                                                                                                                                            v262[0] = &unk_26F851778;
                                                                                                                                                                                            v262[1] = int32x2Formatter;
                                                                                                                                                                                            int16x8_t v263 = v262;
                                                                                                                                                                                            int v1005 = 3332;
                                                                                                                                                                                            std::string::__init_copy_ctor_external(&v1006, (const std::string::value_type *)v120, 0x19uLL);
                                                                                                                                                                                            uint64_t v121 = (uint64_t)v263;
                                                                                                                                                                                            if (v263)
                                                                                                                                                                                            {
                                                                                                                                                                                              if (v263 == v262)
                                                                                                                                                                                              {
                                                                                                                                                                                                v1008 = &v1007;
                                                                                                                                                                                                (*(void (**)(void *))(v262[0] + 24))(v262);
LABEL_264:
                                                                                                                                                                                                unint64_t v122 = operator new(0x20uLL);
                                                                                                                                                                                                int32x2_t v256 = v122;
                                                                                                                                                                                                long long v257 = xmmword_242EA7C00;
                                                                                                                                                                                                strcpy((char *)v122, "newOutIndex, newWorkIndex");
                                                                                                                                                                                                v258[0] = &unk_26F851778;
                                                                                                                                                                                                v258[1] = int32x2Formatter;
                                                                                                                                                                                                int64x2_t v259 = v258;
                                                                                                                                                                                                int v1009 = 3333;
                                                                                                                                                                                                std::string::__init_copy_ctor_external(&v1010, (const std::string::value_type *)v122, 0x19uLL);
                                                                                                                                                                                                uint64_t v123 = (uint64_t)v259;
                                                                                                                                                                                                if (v259)
                                                                                                                                                                                                {
                                                                                                                                                                                                  if (v259 == v258)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    v1012 = &v1011;
                                                                                                                                                                                                    (*(void (**)(void *))(v258[0] + 24))(v258);
LABEL_269:
                                                                                                                                                                                                    int8x16_t v124 = operator new(0x28uLL);
                                                                                                                                                                                                    int16x8_t v252 = v124;
                                                                                                                                                                                                    long long v253 = xmmword_242EA7C60;
                                                                                                                                                                                                    strcpy((char *)v124, "Partitions: LeftCount,RightCount");
                                                                                                                                                                                                    v254[0] = &unk_26F851778;
                                                                                                                                                                                                    v254[1] = int32x2Formatter;
                                                                                                                                                                                                    int16x8_t v255 = v254;
                                                                                                                                                                                                    int v1013 = 3334;
                                                                                                                                                                                                    std::string::__init_copy_ctor_external(&v1014, (const std::string::value_type *)v124, 0x20uLL);
                                                                                                                                                                                                    uint64_t v125 = (uint64_t)v255;
                                                                                                                                                                                                    if (v255)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      if (v255 == v254)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        v1016 = &v1015;
                                                                                                                                                                                                        (*(void (**)(void *))(v254[0] + 24))(v254);
LABEL_274:
                                                                                                                                                                                                        int8x16_t v126 = operator new(0x28uLL);
                                                                                                                                                                                                        int16x8_t v248 = v126;
                                                                                                                                                                                                        long long v249 = xmmword_242EA7CE0;
                                                                                                                                                                                                        strcpy((char *)v126, "PartitionsTooSmall: NextPartitionValue");
                                                                                                                                                                                                        v250[0] = &unk_26F851778;
                                                                                                                                                                                                        v250[1] = hex32Formatter;
                                                                                                                                                                                                        int16x8_t v251 = v250;
                                                                                                                                                                                                        int v1017 = 3335;
                                                                                                                                                                                                        std::string::__init_copy_ctor_external(&v1018, (const std::string::value_type *)v126, 0x26uLL);
                                                                                                                                                                                                        uint64_t v127 = (uint64_t)v251;
                                                                                                                                                                                                        if (v251)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          if (v251 == v250)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            v1020 = &v1019;
                                                                                                                                                                                                            (*(void (**)(void *))(v250[0] + 24))(v250);
LABEL_279:
                                                                                                                                                                                                            HIBYTE(v245[2]) = 18;
                                                                                                                                                                                                            strcpy((char *)v245, "NextPartitionValue");
                                                                                                                                                                                                            v246[0] = &unk_26F851778;
                                                                                                                                                                                                            v246[1] = hex32Formatter;
                                                                                                                                                                                                            int16x8_t v247 = v246;
                                                                                                                                                                                                            int v1021 = 3336;
                                                                                                                                                                                                            long long v1022 = *(_OWORD *)"NextPartitionValue";
                                                                                                                                                                                                            v1023 = v245[2];
                                                                                                                                                                                                            v1024[3] = v1024;
                                                                                                                                                                                                            v1024[0] = &unk_26F851778;
                                                                                                                                                                                                            v1024[1] = hex32Formatter;
                                                                                                                                                                                                            HIBYTE(v242) = 13;
                                                                                                                                                                                                            strcpy((char *)&v241, "FinalOutCount");
                                                                                                                                                                                                            v243[0] = &unk_26F851778;
                                                                                                                                                                                                            v243[1] = intFormatter;
                                                                                                                                                                                                            int16x8_t v244 = v243;
                                                                                                                                                                                                            int v1025 = 3344;
                                                                                                                                                                                                            long long v1026 = v241;
                                                                                                                                                                                                            uint64_t v1027 = v242;
                                                                                                                                                                                                            v1028[3] = v1028;
                                                                                                                                                                                                            v1028[0] = &unk_26F851778;
                                                                                                                                                                                                            v1028[1] = intFormatter;
                                                                                                                                                                                                            HIBYTE(v238[2]) = 21;
                                                                                                                                                                                                            strcpy((char *)v238, "InputStart,InputCount");
                                                                                                                                                                                                            v239[0] = &unk_26F851778;
                                                                                                                                                                                                            v239[1] = int32x2Formatter;
                                                                                                                                                                                                            int16x8_t v240 = v239;
                                                                                                                                                                                                            int v1029 = 3840;
                                                                                                                                                                                                            long long v1030 = *(_OWORD *)"InputStart,InputCount";
                                                                                                                                                                                                            v1031 = v238[2];
                                                                                                                                                                                                            v1032[3] = v1032;
                                                                                                                                                                                                            v1032[0] = &unk_26F851778;
                                                                                                                                                                                                            v1032[1] = int32x2Formatter;
                                                                                                                                                                                                            int64x2_t v128 = operator new(0x20uLL);
                                                                                                                                                                                                            int16x8_t v234 = v128;
                                                                                                                                                                                                            long long v235 = xmmword_242EA7C00;
                                                                                                                                                                                                            strcpy((char *)v128, "Local,Lower Subtree Index");
                                                                                                                                                                                                            v236[0] = &unk_26F851778;
                                                                                                                                                                                                            v236[1] = int32x2Formatter;
                                                                                                                                                                                                            int16x8_t v237 = v236;
                                                                                                                                                                                                            int v1033 = 3841;
                                                                                                                                                                                                            std::string::__init_copy_ctor_external(&v1034, (const std::string::value_type *)v128, 0x19uLL);
                                                                                                                                                                                                            uint64_t v129 = (uint64_t)v237;
                                                                                                                                                                                                            if (v237)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if (v237 == v236)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                v1036 = &v1035;
                                                                                                                                                                                                                (*(void (**)(void *))(v236[0] + 24))(v236);
                                                                                                                                                                                                                goto LABEL_284;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              uint64_t v129 = (*(uint64_t (**)(void))(*v237 + 16))();
                                                                                                                                                                                                            }
                                                                                                                                                                                                            v1036 = (uint64_t *)v129;
LABEL_284:
                                                                                                                                                                                                            unint64_t v130 = 0;
                                                                                                                                                                                                            uint64_t v131 = 0;
                                                                                                                                                                                                            HIBYTE(v231[2]) = 19;
                                                                                                                                                                                                            strcpy((char *)v231, "LeafStart,LeafCount");
                                                                                                                                                                                                            v232[0] = &unk_26F851778;
                                                                                                                                                                                                            v232[1] = int32x2Formatter;
                                                                                                                                                                                                            int16x8_t v233 = v232;
                                                                                                                                                                                                            int v1037 = 3842;
                                                                                                                                                                                                            long long v1038 = *(_OWORD *)"LeafStart,LeafCount";
                                                                                                                                                                                                            v1039 = v231[2];
                                                                                                                                                                                                            v1040[3] = v1040;
                                                                                                                                                                                                            v1040[0] = &unk_26F851778;
                                                                                                                                                                                                            v1040[1] = int32x2Formatter;
                                                                                                                                                                                                            __p[23] = 17;
                                                                                                                                                                                                            strcpy(__p, "LowerSubtreeCount");
                                                                                                                                                                                                            v229[0] = &unk_26F851778;
                                                                                                                                                                                                            v229[1] = intFormatter;
                                                                                                                                                                                                            int64x2_t v230 = v229;
                                                                                                                                                                                                            int v1041 = 3843;
                                                                                                                                                                                                            long long v1042 = *(_OWORD *)"LowerSubtreeCount";
                                                                                                                                                                                                            uint64_t v1043 = *(void *)&__p[16];
                                                                                                                                                                                                            v1045[0] = v1044;
                                                                                                                                                                                                            v1044[0] = &unk_26F851778;
                                                                                                                                                                                                            v1044[1] = intFormatter;
                                                                                                                                                                                                            uint64_t v214 = 0;
                                                                                                                                                                                                            int16x8_t v213 = 0;
                                                                                                                                                                                                            int16x8_t v212 = &v213;
                                                                                                                                                                                                            for (uint64_t i = (uint64_t **)&v213;
                                                                                                                                                                                                                  ;
                                                                                                                                                                                                                  uint64_t i = (uint64_t **)v212)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              int8x16_t v133 = &v619[8 * v131];
                                                                                                                                                                                                              unint64_t v134 = &v213;
                                                                                                                                                                                                              if (i == (uint64_t **)&v213) {
                                                                                                                                                                                                                goto LABEL_291;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              int64x2_t v135 = v130;
                                                                                                                                                                                                              char v136 = &v213;
                                                                                                                                                                                                              if (v130)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                do
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  unint64_t v134 = (char **)v135;
                                                                                                                                                                                                                  int64x2_t v135 = (char *)*((void *)v135 + 1);
                                                                                                                                                                                                                }
                                                                                                                                                                                                                while (v135);
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else
                                                                                                                                                                                                              {
                                                                                                                                                                                                                do
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  unint64_t v134 = (char **)v136[2];
                                                                                                                                                                                                                  BOOL v156 = *v134 == (char *)v136;
                                                                                                                                                                                                                  char v136 = v134;
                                                                                                                                                                                                                }
                                                                                                                                                                                                                while (v156);
                                                                                                                                                                                                              }
                                                                                                                                                                                                              unsigned int v137 = *(_DWORD *)v133;
                                                                                                                                                                                                              if (*((_DWORD *)v134 + 8) < *(_DWORD *)v133)
                                                                                                                                                                                                              {
LABEL_291:
                                                                                                                                                                                                                unint64_t v138 = (uint64_t **)(v130 ? v134 : &v213);
                                                                                                                                                                                                                int64x2_t v139 = (uint64_t **)(v130 ? v134 + 1 : &v213);
                                                                                                                                                                                                              }
                                                                                                                                                                                                              else
                                                                                                                                                                                                              {
                                                                                                                                                                                                                unint64_t v138 = (uint64_t **)&v213;
                                                                                                                                                                                                                int64x2_t v139 = (uint64_t **)&v213;
                                                                                                                                                                                                                if (v130)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  int64x2_t v139 = (uint64_t **)&v213;
                                                                                                                                                                                                                  while (1)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    while (1)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      unint64_t v138 = (uint64_t **)v130;
                                                                                                                                                                                                                      unsigned int v144 = *((_DWORD *)v130 + 8);
                                                                                                                                                                                                                      if (v137 >= v144) {
                                                                                                                                                                                                                        break;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      unint64_t v130 = (char *)*v138;
                                                                                                                                                                                                                      int64x2_t v139 = v138;
                                                                                                                                                                                                                      if (!*v138) {
                                                                                                                                                                                                                        goto LABEL_298;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    if (v144 >= v137) {
                                                                                                                                                                                                                      break;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    int64x2_t v139 = v138 + 1;
                                                                                                                                                                                                                    unint64_t v130 = (char *)v138[1];
                                                                                                                                                                                                                    if (!v130) {
                                                                                                                                                                                                                      goto LABEL_298;
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                              }
                                                                                                                                                                                                              if (!*v139) {
                                                                                                                                                                                                                break;
                                                                                                                                                                                                              }
LABEL_316:
                                                                                                                                                                                                              if (++v131 == 111)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                for (uint64_t j = 0;
                                                                                                                                                                                                                      j != -888;
                                                                                                                                                                                                                      j -= 8)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  int64x2_t v149 = &v619[j];
                                                                                                                                                                                                                  int64x2_t v150 = (void *)v1045[j];
                                                                                                                                                                                                                  if (&v1044[j] == v150)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    (*(void (**)(void *))(v149[884] + 32))(&v1044[j]);
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  else if (v150)
                                                                                                                                                                                                                  {
                                                                                                                                                                                                                    (*(void (**)(void *))(*v150 + 40))(v150);
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if (*((char *)&v1043 + j * 8 + 7) < 0) {
                                                                                                                                                                                                                    operator delete((void *)v149[881]);
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                unint64_t v151 = (const char *)v209;
                                                                                                                                                                                                                if (v230 == v229)
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  (*(void (**)(void *))(v229[0] + 32))(v229);
                                                                                                                                                                                                                  if ((__p[23] & 0x80000000) == 0) {
                                                                                                                                                                                                                    goto LABEL_330;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                else
                                                                                                                                                                                                                {
                                                                                                                                                                                                                  if (v230) {
                                                                                                                                                                                                                    (*(void (**)(void))(*v230 + 40))();
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                  if ((__p[23] & 0x80000000) == 0)
                                                                                                                                                                                                                  {
LABEL_330:
                                                                                                                                                                                                                    if (v233 == v232)
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      (*(void (**)(void *))(v232[0] + 32))(v232);
                                                                                                                                                                                                                      if ((SHIBYTE(v231[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                        goto LABEL_334;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    else
                                                                                                                                                                                                                    {
                                                                                                                                                                                                                      if (v233) {
                                                                                                                                                                                                                        (*(void (**)(void))(*v233 + 40))();
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      if ((SHIBYTE(v231[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                      {
LABEL_334:
                                                                                                                                                                                                                        if (v237 == v236)
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          (*(void (**)(void *))(v236[0] + 32))(v236);
                                                                                                                                                                                                                          if ((SHIBYTE(v235) & 0x80000000) == 0) {
                                                                                                                                                                                                                            goto LABEL_338;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        else
                                                                                                                                                                                                                        {
                                                                                                                                                                                                                          if (v237) {
                                                                                                                                                                                                                            (*(void (**)(void))(*v237 + 40))();
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                          if ((SHIBYTE(v235) & 0x80000000) == 0)
                                                                                                                                                                                                                          {
LABEL_338:
                                                                                                                                                                                                                            if (v240 == v239)
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              (*(void (**)(void *))(v239[0] + 32))(v239);
                                                                                                                                                                                                                              if ((SHIBYTE(v238[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                goto LABEL_342;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            else
                                                                                                                                                                                                                            {
                                                                                                                                                                                                                              if (v240) {
                                                                                                                                                                                                                                (*(void (**)(void))(*v240 + 40))();
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                              if ((SHIBYTE(v238[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                              {
LABEL_342:
                                                                                                                                                                                                                                if (v244 == v243)
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  (*(void (**)(void *))(v243[0] + 32))(v243);
                                                                                                                                                                                                                                  if ((SHIBYTE(v242) & 0x80000000) == 0) {
                                                                                                                                                                                                                                    goto LABEL_346;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                  if (v244) {
                                                                                                                                                                                                                                    (*(void (**)(void))(*v244 + 40))();
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                  if ((SHIBYTE(v242) & 0x80000000) == 0)
                                                                                                                                                                                                                                  {
LABEL_346:
                                                                                                                                                                                                                                    if (v247 == v246)
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      (*(void (**)(void *))(v246[0] + 32))(v246);
                                                                                                                                                                                                                                      if ((SHIBYTE(v245[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                        goto LABEL_350;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                      if (v247) {
                                                                                                                                                                                                                                        (*(void (**)(void))(*v247 + 40))();
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                      if ((SHIBYTE(v245[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                      {
LABEL_350:
                                                                                                                                                                                                                                        if (v251 == v250)
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          (*(void (**)(void *))(v250[0] + 32))(v250);
                                                                                                                                                                                                                                          if ((SHIBYTE(v249) & 0x80000000) == 0) {
                                                                                                                                                                                                                                            goto LABEL_354;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                          if (v251) {
                                                                                                                                                                                                                                            (*(void (**)(void))(*v251 + 40))();
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          if ((SHIBYTE(v249) & 0x80000000) == 0)
                                                                                                                                                                                                                                          {
LABEL_354:
                                                                                                                                                                                                                                            if (v255 == v254)
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              (*(void (**)(void *))(v254[0] + 32))(v254);
                                                                                                                                                                                                                                              if ((SHIBYTE(v253) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                goto LABEL_358;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                              if (v255) {
                                                                                                                                                                                                                                                (*(void (**)(void))(*v255 + 40))();
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                              if ((SHIBYTE(v253) & 0x80000000) == 0)
                                                                                                                                                                                                                                              {
LABEL_358:
                                                                                                                                                                                                                                                if (v259 == v258)
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  (*(void (**)(void *))(v258[0] + 32))(v258);
                                                                                                                                                                                                                                                  if ((SHIBYTE(v257) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                    goto LABEL_362;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                  if (v259) {
                                                                                                                                                                                                                                                    (*(void (**)(void))(*v259 + 40))();
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                  if ((SHIBYTE(v257) & 0x80000000) == 0)
                                                                                                                                                                                                                                                  {
LABEL_362:
                                                                                                                                                                                                                                                    if (v263 == v262)
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      (*(void (**)(void *))(v262[0] + 32))(v262);
                                                                                                                                                                                                                                                      if ((SHIBYTE(v261) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                        goto LABEL_366;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                      if (v263) {
                                                                                                                                                                                                                                                        (*(void (**)(void))(*v263 + 40))();
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                      if ((SHIBYTE(v261) & 0x80000000) == 0)
                                                                                                                                                                                                                                                      {
LABEL_366:
                                                                                                                                                                                                                                                        if (v266 == v265)
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          (*(void (**)(void *))(v265[0] + 32))(v265);
                                                                                                                                                                                                                                                          if ((SHIBYTE(v264[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                            goto LABEL_370;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                          if (v266) {
                                                                                                                                                                                                                                                            (*(void (**)(void))(*v266 + 40))();
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                          if ((SHIBYTE(v264[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                          {
LABEL_370:
                                                                                                                                                                                                                                                            if (v269 == v268)
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              (*(void (**)(void *))(v268[0] + 32))(v268);
                                                                                                                                                                                                                                                              if ((SHIBYTE(v267[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                goto LABEL_374;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                              if (v269) {
                                                                                                                                                                                                                                                                (*(void (**)(void))(*v269 + 40))();
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              if ((SHIBYTE(v267[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                              {
LABEL_374:
                                                                                                                                                                                                                                                                if (v272 == v271)
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v271[0] + 32))(v271);
                                                                                                                                                                                                                                                                  if ((SHIBYTE(v270[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                    goto LABEL_378;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                  if (v272) {
                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v272 + 40))();
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                  if ((SHIBYTE(v270[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                  {
LABEL_378:
                                                                                                                                                                                                                                                                    if (v276 == v275)
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v275[0] + 32))(v275);
                                                                                                                                                                                                                                                                      if ((SHIBYTE(v274) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                        goto LABEL_382;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                      if (v276) {
                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v276 + 40))();
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                      if ((SHIBYTE(v274) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                      {
LABEL_382:
                                                                                                                                                                                                                                                                        if (v279 == v278)
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v278[0] + 32))(v278);
                                                                                                                                                                                                                                                                          if ((SHIBYTE(v277[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                            goto LABEL_386;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                          if (v279) {
                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v279 + 40))();
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                          if ((SHIBYTE(v277[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                          {
LABEL_386:
                                                                                                                                                                                                                                                                            if (v282 == v281)
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v281[0] + 32))(v281);
                                                                                                                                                                                                                                                                              if ((SHIBYTE(v280[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                goto LABEL_390;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                              if (v282) {
                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v282 + 40))();
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                              if ((SHIBYTE(v280[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                              {
LABEL_390:
                                                                                                                                                                                                                                                                                if (v285 == v284)
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v284[0] + 32))(v284);
                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v283[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                    goto LABEL_394;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                  if (v285) {
                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v285 + 40))();
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v283[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                  {
LABEL_394:
                                                                                                                                                                                                                                                                                    if (v288 == v287)
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v287[0] + 32))(v287);
                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v286[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                        goto LABEL_398;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                      if (v288) {
                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v288 + 40))();
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v286[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                      {
LABEL_398:
                                                                                                                                                                                                                                                                                        if (v291 == v290)
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v290[0] + 32))(v290);
                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v289[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                            goto LABEL_402;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                          if (v291) {
                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v291 + 40))();
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v289[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                          {
LABEL_402:
                                                                                                                                                                                                                                                                                            if (v294 == v293)
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v293[0] + 32))(v293);
                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v292[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                goto LABEL_406;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                              if (v294) {
                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v294 + 40))();
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v292[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                              {
LABEL_406:
                                                                                                                                                                                                                                                                                                if (v298 == v297)
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v297[0] + 32))(v297);
                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v296) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                    goto LABEL_410;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                  if (v298) {
                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v298 + 40))();
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v296) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                  {
LABEL_410:
                                                                                                                                                                                                                                                                                                    if (v301 == v300)
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v300[0] + 32))(v300);
                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v299[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                        goto LABEL_414;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                      if (v301) {
                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v301 + 40))();
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v299[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                      {
LABEL_414:
                                                                                                                                                                                                                                                                                                        if (v304 == v303)
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v303[0] + 32))(v303);
                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v302[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                            goto LABEL_418;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                          if (v304) {
                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v304 + 40))();
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v302[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                          {
LABEL_418:
                                                                                                                                                                                                                                                                                                            if (v308 == v307)
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v307[0] + 32))(v307);
                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v306) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                goto LABEL_422;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                              if (v308) {
                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v308 + 40))();
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v306) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                              {
LABEL_422:
                                                                                                                                                                                                                                                                                                                if (v312 == v311)
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v311[0] + 32))(v311);
                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v310) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                    goto LABEL_426;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                  if (v312) {
                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v312 + 40))();
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v310) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                  {
LABEL_426:
                                                                                                                                                                                                                                                                                                                    if (v316 == v315)
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v315[0] + 32))(v315);
                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v314) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                        goto LABEL_430;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                      if (v316) {
                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v316 + 40))();
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v314) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                      {
LABEL_430:
                                                                                                                                                                                                                                                                                                                        if (v320 == v319)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v319[0] + 32))(v319);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v320)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v320 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v318) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v317);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v324 == v323)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v323[0] + 32))(v323);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v324)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v324 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v322) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v321);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v328 == v327)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v327[0] + 32))(v327);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v328)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v328 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v326) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v325);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v332 == v331)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v331[0] + 32))(v331);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v332)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v332 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v330) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v329);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v335 == v334)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v334[0] + 32))(v334);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v335)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v335 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v333[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v333[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v339 == v338)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v338[0] + 32))(v338);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v339)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v339 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v337) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v336);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v343 == v342)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v342[0] + 32))(v342);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v343)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v343 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v341) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete((void *)v340);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v346 == v345)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v345[0] + 32))(v345);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v346)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v346 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v344[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v344[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v349 == v348)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v348[0] + 32))(v348);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v349)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v349 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v347[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v347[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v352 == v351)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v351[0] + 32))(v351);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v352)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v352 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v350[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v350[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v355 == v354)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v354[0] + 32))(v354);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v355)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v355 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v353[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v353[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v358 == v357)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v357[0] + 32))(v357);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v358)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v358 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v356[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v356[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v362 == v361)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v361[0] + 32))(v361);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v362)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v362 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v360) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v359);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v366 == v365)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v365[0] + 32))(v365);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v366)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v366 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v364) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v363);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v369 == v368)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v368[0] + 32))(v368);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v369)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v369 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v367[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v367[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v373 == v372)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v372[0] + 32))(v372);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v373)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v373 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v371) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v370[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v377 == v376)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v376[0] + 32))(v376);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v377)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v377 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v375) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v374);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v381 == v380)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v380[0] + 32))(v380);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v381)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v381 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v379) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v378);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v385 == v384)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v384[0] + 32))(v384);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v385)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v385 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v383) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v382);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v389 == v388)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v388[0] + 32))(v388);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v389)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v389 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v387) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v386);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v393 == v392)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v392[0] + 32))(v392);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v393)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v393 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v391) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v390);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v397 == v396)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v396[0] + 32))(v396);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v397)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v397 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v395) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v394);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v401 == v400)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v400[0] + 32))(v400);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v401)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v401 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v399) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v398);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v405 == v404)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v404[0] + 32))(v404);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v405)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v405 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v403) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v402);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v409 == v408)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v408[0] + 32))(v408);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v409)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v409 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v407) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v406);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v412 == v411)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v411[0] + 32))(v411);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v412)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v412 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v410[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v410[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v416 == v415)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v415[0] + 32))(v415);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v416)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v416 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v414) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v413);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v420 == v419)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v419[0] + 32))(v419);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v420)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v420 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v418) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v417);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v424 == v423)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v423[0] + 32))(v423);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v424)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v424 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v422) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v421);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v427 == v426)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v426[0] + 32))(v426);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v427)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v427 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if ((v425[23] & 0x80000000) != 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(*(void **)v425);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v431 == v430)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v430[0] + 32))(v430);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v431)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v431 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v429) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v428);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v434 == v433)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v433[0] + 32))(v433);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v434)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v434 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v432[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v432[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v438 == v437)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v437[0] + 32))(v437);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v438)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v438 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v436) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v435);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v442 == v441)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v441[0] + 32))(v441);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v442)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v442 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v440) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete((void *)v439);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v445 == v444)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v444[0] + 32))(v444);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v445)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v445 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v443[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v443[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v448 == v447)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v447[0] + 32))(v447);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v448)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v448 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v446[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v446[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v451 == v450)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v450[0] + 32))(v450);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v451)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v451 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v449[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v449[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v455 == v454)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v454[0] + 32))(v454);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v455)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v455 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v453) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete((void *)v452);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v459 == v458)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v458[0] + 32))(v458);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v459)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v459 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v457) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v456);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v463 == v462)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v462[0] + 32))(v462);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v463)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v463 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v461) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v460);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v467 == v466)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v466[0] + 32))(v466);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v467)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v467 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v465) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v464);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v471 == v470)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v470[0] + 32))(v470);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v471)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v471 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v469) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v468);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v474 == v473)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v473[0] + 32))(v473);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v474)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v474 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v472[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v472[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v477 == v476)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v476[0] + 32))(v476);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v477)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v477 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v475[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v475[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v480 == v479)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v479[0] + 32))(v479);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v480)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v480 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v478[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v478[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v483 == v482)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v482[0] + 32))(v482);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v483)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v483 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v481[2]) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v481[0]);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v487 == v486)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v486[0] + 32))(v486);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else if (v487)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void))(*v487 + 40))();
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (SHIBYTE(v485) < 0) {
                                                                                                                                                                                                                                                                                                                          operator delete(v484);
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        if (v491 == v490)
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v490[0] + 32))(v490);
                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v489) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                            goto LABEL_768;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                          if (v491) {
                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v491 + 40))();
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v489) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                          {
LABEL_768:
                                                                                                                                                                                                                                                                                                                            if (v494 == v493)
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v493[0] + 32))(v493);
                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v492[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                goto LABEL_772;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                              if (v494) {
                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v494 + 40))();
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v492[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                              {
LABEL_772:
                                                                                                                                                                                                                                                                                                                                if (v498 == v497)
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v497[0] + 32))(v497);
                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v496) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                    goto LABEL_776;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                  if (v498) {
                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v498 + 40))();
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v496) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                  {
LABEL_776:
                                                                                                                                                                                                                                                                                                                                    if (v502 == v501)
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v501[0] + 32))(v501);
                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v500) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                        goto LABEL_780;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                      if (v502) {
                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v502 + 40))();
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v500) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                      {
LABEL_780:
                                                                                                                                                                                                                                                                                                                                        if (v506 == v505)
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v505[0] + 32))(v505);
                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v504) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                            goto LABEL_784;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                          if (v506) {
                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v506 + 40))();
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v504) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                          {
LABEL_784:
                                                                                                                                                                                                                                                                                                                                            if (v509 == v508)
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v508[0] + 32))(v508);
                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v507[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                goto LABEL_788;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                              if (v509) {
                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v509 + 40))();
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v507[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                              {
LABEL_788:
                                                                                                                                                                                                                                                                                                                                                if (v512 == v511)
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v511[0] + 32))(v511);
                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v510[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                    goto LABEL_792;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                  if (v512) {
                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v512 + 40))();
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v510[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                  {
LABEL_792:
                                                                                                                                                                                                                                                                                                                                                    if (v516 == v515)
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v515[0] + 32))(v515);
                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v514) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                        goto LABEL_796;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                      if (v516) {
                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v516 + 40))();
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v514) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                      {
LABEL_796:
                                                                                                                                                                                                                                                                                                                                                        if (v519 == v518)
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v518[0] + 32))(v518);
                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v517[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                            goto LABEL_800;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                          if (v519) {
                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v519 + 40))();
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v517[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                          {
LABEL_800:
                                                                                                                                                                                                                                                                                                                                                            if (v523 == v522)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v522[0] + 32))(v522);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v523)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v523 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v521) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v520);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v527 == v526)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v526[0] + 32))(v526);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v527)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v527 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v525) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v524);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v531 == v530)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v530[0] + 32))(v530);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v531)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v531 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v529) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v528);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v535 == v534)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v534[0] + 32))(v534);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v535)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v535 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v533) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v532[0]);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v539 == v538)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v538[0] + 32))(v538);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v539)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v539 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v537) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v536);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v543 == v542)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v542[0] + 32))(v542);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v543)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v543 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v541) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v540);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v547 == v546)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v546[0] + 32))(v546);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v547)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v547 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v545) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v544);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v551 == v550)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v550[0] + 32))(v550);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v551)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v551 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v549) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v548);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v555 == v554)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v554[0] + 32))(v554);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v555)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v555 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v553) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v552);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v558 == v557)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v557[0] + 32))(v557);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else if (v558)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*v558 + 40))();
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v556[2]) < 0) {
                                                                                                                                                                                                                                                                                                                                                              operator delete(v556[0]);
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            if (v561 == v560)
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v560[0] + 32))(v560);
                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v559[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                goto LABEL_882;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                              if (v561) {
                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v561 + 40))();
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v559[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                              {
LABEL_882:
                                                                                                                                                                                                                                                                                                                                                                if (v565 == v564)
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v564[0] + 32))(v564);
                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v563) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_886;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                  if (v565) {
                                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v565 + 40))();
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v563) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                  {
LABEL_886:
                                                                                                                                                                                                                                                                                                                                                                    if (v568 == v567)
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v567[0] + 32))(v567);
                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v566[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_890;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                      if (v568) {
                                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v568 + 40))();
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v566[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                      {
LABEL_890:
                                                                                                                                                                                                                                                                                                                                                                        if (v572 == v571)
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v571[0] + 32))(v571);
                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v570) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_894;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                          if (v572) {
                                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v572 + 40))();
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v570) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                          {
LABEL_894:
                                                                                                                                                                                                                                                                                                                                                                            if (v575 == v574)
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v574[0] + 32))(v574);
                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v573[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_898;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                              if (v575) {
                                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v575 + 40))();
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v573[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                              {
LABEL_898:
                                                                                                                                                                                                                                                                                                                                                                                if (v578 == v577)
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v577[0] + 32))(v577);
                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v576[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_902;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  if (v578) {
                                                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v578 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v576[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                  {
LABEL_902:
                                                                                                                                                                                                                                                                                                                                                                                    if (v582 == v581)
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v581[0] + 32))(v581);
                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v580) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_906;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                      if (v582) {
                                                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v582 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v580) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                      {
LABEL_906:
                                                                                                                                                                                                                                                                                                                                                                                        if (v585 == v584)
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v584[0] + 32))(v584);
                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v583[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_910;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                          if (v585) {
                                                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v585 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v583[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                          {
LABEL_910:
                                                                                                                                                                                                                                                                                                                                                                                            if (v589 == v588)
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v588[0] + 32))(v588);
                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v587) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_914;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                              if (v589) {
                                                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v589 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v587) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                              {
LABEL_914:
                                                                                                                                                                                                                                                                                                                                                                                                if (v592 == v591)
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v591[0] + 32))(v591);
                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v590[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_918;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                  if (v592) {
                                                                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v592 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v590[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                  {
LABEL_918:
                                                                                                                                                                                                                                                                                                                                                                                                    if (v596 == v595)
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v595[0] + 32))(v595);
                                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v594) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_922;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                      if (v596) {
                                                                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v596 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v594) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                      {
LABEL_922:
                                                                                                                                                                                                                                                                                                                                                                                                        if (v600 == v599)
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v599[0] + 32))(v599);
                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v598) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_926;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                          if (v600) {
                                                                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v600 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v598) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                          {
LABEL_926:
                                                                                                                                                                                                                                                                                                                                                                                                            if (v604 == v603)
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void *))(v603[0] + 32))(v603);
                                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v602) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_930;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                              if (v604) {
                                                                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v604 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v602) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                              {
LABEL_930:
                                                                                                                                                                                                                                                                                                                                                                                                                if (v608 == v607)
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v607[0] + 32))(v607);
                                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v606) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_934;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                  if (v608) {
                                                                                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v608 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v606) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                  {
LABEL_934:
                                                                                                                                                                                                                                                                                                                                                                                                                    if (v611 == v610)
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v610[0] + 32))(v610);
                                                                                                                                                                                                                                                                                                                                                                                                                      if ((v609[23] & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_938;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                      if (v611) {
                                                                                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v611 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                      if ((v609[23] & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                      {
LABEL_938:
                                                                                                                                                                                                                                                                                                                                                                                                                        if (v614 == v613)
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          (*(void (**)(void *))(v613[0] + 32))(v613);
                                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v612.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_942;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                          if (v614) {
                                                                                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void))(*v614 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v612.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                          {
LABEL_942:
                                                                                                                                                                                                                                                                                                                                                                                                                            if (v618 == (void **)&v616)
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              v616[4]((void **)&v616);
                                                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v615.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_946;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                              if (v618) {
                                                                                                                                                                                                                                                                                                                                                                                                                                (*((void (**)(void))*v618 + 5))();
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v615.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                              {
LABEL_946:
                                                                                                                                                                                                                                                                                                                                                                                                                                if (v220 == v219)
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                  (*(void (**)(void *))(v219[0] + 32))(v219);
                                                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v218[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_950;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                else
                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                  if (v220) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    (*(void (**)(void))(*v220 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                  if ((SHIBYTE(v218[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                  {
LABEL_950:
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (v224 == v223)
                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                      (*(void (**)(void *))(v223[0] + 32))(v223);
                                                                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v222) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_954;
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    else
                                                                                                                                                                                                                                                                                                                                                                                                                                    {
                                                                                                                                                                                                                                                                                                                                                                                                                                      if (v224) {
                                                                                                                                                                                                                                                                                                                                                                                                                                        (*(void (**)(void))(*v224 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                      if ((SHIBYTE(v222) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                      {
LABEL_954:
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!v204) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          goto LABEL_1100;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
LABEL_994:
                                                                                                                                                                                                                                                                                                                                                                                                                                        *((unsigned char *)&v615.__r_.__value_.__s + 23) = 7;
                                                                                                                                                                                                                                                                                                                                                                                                                                        strcpy((char *)&v615, "Unknown");
                                                                                                                                                                                                                                                                                                                                                                                                                                        int16x8_t v616 = (void (**)(void **))&unk_26F851778;
                                                                                                                                                                                                                                                                                                                                                                                                                                        v617 = hex64Formatter;
                                                                                                                                                                                                                                                                                                                                                                                                                                        uint64_t v618 = (void **)&v616;
                                                                                                                                                                                                                                                                                                                                                                                                                                        fwrite("*** Debug Log ***\n", 0x12uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          LOWORD(v619[0]) = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: *** Debug Log ***\n", (uint8_t *)v619, 2u);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          LOWORD(v619[0]) = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: *** Debug Log ***\n", (uint8_t *)v619, 2u);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        fprintf((FILE *)*MEMORY[0x263EF8348], "%d entries (%d nontemporal)\n", v209[96], v209[97]);
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v196 = v209[96];
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v197 = v209[97];
                                                                                                                                                                                                                                                                                                                                                                                                                                          LODWORD(v619[0]) = 67109376;
                                                                                                                                                                                                                                                                                                                                                                                                                                          HIDWORD(v619[0]) = v196;
                                                                                                                                                                                                                                                                                                                                                                                                                                          LOWORD(v619[1]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(_DWORD *)((char *)&v619[1] + 2) = v197;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: %d entries (%d nontemporal)\n", (uint8_t *)v619, 0xEu);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v152 = v209[96];
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v153 = v209[97];
                                                                                                                                                                                                                                                                                                                                                                                                                                          LODWORD(v619[0]) = 67109376;
                                                                                                                                                                                                                                                                                                                                                                                                                                          HIDWORD(v619[0]) = v152;
                                                                                                                                                                                                                                                                                                                                                                                                                                          LOWORD(v619[1]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(_DWORD *)((char *)&v619[1] + 2) = v153;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: %d entries (%d nontemporal)\n", (uint8_t *)v619, 0xEu);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        int v154 = v209[96];
                                                                                                                                                                                                                                                                                                                                                                                                                                        unsigned int v155 = v209[97];
                                                                                                                                                                                                                                                                                                                                                                                                                                        BOOL v156 = v154 == v155;
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v154 <= v155) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v154 = v209[97];
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (!v156) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          v154 += 4;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v154 >= 0x4000) {
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v157 = 0x4000;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        else {
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v157 = v154;
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v157)
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v158 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v207 = *MEMORY[0x263F8C2B8];
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v206 = *(void *)(MEMORY[0x263F8C2B8] + 64);
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v205 = *(void *)(MEMORY[0x263F8C2B8] + 72);
                                                                                                                                                                                                                                                                                                                                                                                                                                          uint64_t v208 = v157;
                                                                                                                                                                                                                                                                                                                                                                                                                                          do
                                                                                                                                                                                                                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                                                                                                                                                                                                                            memcpy(v619, &v151[288 * v158 + 392], sizeof(v619));
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (HIDWORD(v619[0]) != v211 || LODWORD(v619[0]) != v210) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              goto LABEL_1012;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            unsigned int v160 = HIDWORD(v619[2]);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (HIDWORD(v619[2]) == 1) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              goto LABEL_1012;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            int64x2_t v161 = v213;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (!v213) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              goto LABEL_1029;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            int8x16_t v162 = (uint64_t **)&v213;
                                                                                                                                                                                                                                                                                                                                                                                                                                            do
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              int8x16_t v163 = v161;
                                                                                                                                                                                                                                                                                                                                                                                                                                              unint64_t v164 = v162;
                                                                                                                                                                                                                                                                                                                                                                                                                                              unsigned int v165 = *((_DWORD *)v161 + 8);
                                                                                                                                                                                                                                                                                                                                                                                                                                              int64x2_t v166 = (char **)(v161 + 8);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v165 >= HIDWORD(v619[2]))
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                int64x2_t v166 = (char **)v163;
                                                                                                                                                                                                                                                                                                                                                                                                                                                int8x16_t v162 = (uint64_t **)v163;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              int64x2_t v161 = *v166;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            while (v161);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v162 != (uint64_t **)&v213 && (v165 >= HIDWORD(v619[2]) ? (unint64_t v167 = v163) : (unint64_t v167 = v164), HIDWORD(v619[2]) >= v167[8]))
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              memset(&v612, 0, sizeof(v612));
                                                                                                                                                                                                                                                                                                                                                                                                                                              int16x8_t v614 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v165 >= HIDWORD(v619[2])) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                int8x16_t v181 = (const std::string *)(v163 + 40);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                int8x16_t v181 = (const std::string *)(v164 + 5);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              std::string::operator=(&v612, v181);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v165 >= v160) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v182 = v163;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v182 = v164;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v165 >= v160) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v183 = v163 + 64;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v183 = (char *)(v164 + 8);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              int64x2_t v184 = (char *)v182[11];
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!v184)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t v168 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_1032;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v184 != v183)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t v168 = (*(uint64_t (**)(char *))(*(void *)v184 + 16))(v184);
                                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_1032;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              v223[0] = &v221;
                                                                                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(v182[8] + 24))();
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            else
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
LABEL_1029:
                                                                                                                                                                                                                                                                                                                                                                                                                                              memset(&v612, 0, sizeof(v612));
                                                                                                                                                                                                                                                                                                                                                                                                                                              int16x8_t v614 = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                              std::string::operator=(&v612, &v615);
                                                                                                                                                                                                                                                                                                                                                                                                                                              uint64_t v168 = (uint64_t)v618;
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (!v618) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_1032;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v618 != (void **)&v616)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                uint64_t v168 = (*((uint64_t (**)(void))*v618 + 2))();
LABEL_1032:
                                                                                                                                                                                                                                                                                                                                                                                                                                                v223[0] = v168;
                                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_1033;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              v223[0] = &v221;
                                                                                                                                                                                                                                                                                                                                                                                                                                              ((void (*)(void (***)(void **), long long *))v616[3])(&v616, &v221);
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
LABEL_1033:
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::__function::__value_func<std::string ()(unsigned long long)>::swap[abi:nn180100](&v221, v613);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if ((long long *)v223[0] == &v221)
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(long long *))(v221 + 32))(&v221);
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            else if (v223[0])
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              (*(void (**)(void))(*(void *)v223[0] + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&v221);
                                                                                                                                                                                                                                                                                                                                                                                                                                            unint64_t v169 = &v612;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if ((v612.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              unint64_t v169 = (std::string *)v612.__r_.__value_.__r.__words[0];
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            unsigned int v170 = v619[3];
                                                                                                                                                                                                                                                                                                                                                                                                                                            snprintf((char *)v218, 0x100uLL, "%s, logID 0x%08x, logSlot %d, Dispatch[%u], TG[%u,%u,%u], Wave%u, Mask%#010x\n", (const char *)v169, HIDWORD(v619[2]), v158, LODWORD(v619[0]), HIDWORD(v619[0]), LODWORD(v619[1]), HIDWORD(v619[1]), LODWORD(v619[2]), LODWORD(v619[3]));
                                                                                                                                                                                                                                                                                                                                                                                                                                            size_t v171 = strlen((const char *)v218);
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v222, (uint64_t)v218, v171);
                                                                                                                                                                                                                                                                                                                                                                                                                                            for (uint64_t k = 0;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  k != 32;
                                                                                                                                                                                                                                                                                                                                                                                                                                                  ++k)
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((v170 >> k))
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                *(void *)((char *)&v223[2] + *(void *)(v222 - 24)) = 19;
                                                                                                                                                                                                                                                                                                                                                                                                                                                v605[0] = (void *)v619[k + 4];
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (!v614)
                                                                                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  std::__throw_bad_function_call[abi:nn180100]();
                                                                                                                                                                                                                                                                                                                                                                                                                                                  __break(1u);
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(unsigned char *__return_ptr))(*v614 + 48))(v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v609[23] >= 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  unint64_t v173 = v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  unint64_t v173 = *(unsigned char **)v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                if (v609[23] >= 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t v174 = v609[23];
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                else {
                                                                                                                                                                                                                                                                                                                                                                                                                                                  uint64_t v174 = *(void *)&v609[8];
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v222, (uint64_t)v173, v174);
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v222, (uint64_t)"; ", 2);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              else
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                v609[23] = 19;
                                                                                                                                                                                                                                                                                                                                                                                                                                                strcpy(v609, "                   ");
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v222, (uint64_t)v609, 19);
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v222, (uint64_t)"; ", 2);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((v609[23] & 0x80000000) != 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                operator delete(*(void **)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((~k & 7) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::ios_base::getloc((const std::ios_base *)((char *)&v223[-1] + *(void *)(v222 - 24)));
                                                                                                                                                                                                                                                                                                                                                                                                                                                unsigned int v175 = std::locale::use_facet((const std::locale *)v609, MEMORY[0x263F8C108]);
                                                                                                                                                                                                                                                                                                                                                                                                                                                ((void (*)(const std::locale::facet *, uint64_t))v175->__vftable[2].~facet_0)(v175, 10);
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::locale::~locale((std::locale *)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::ostream::put();
                                                                                                                                                                                                                                                                                                                                                                                                                                                std::ostream::flush();
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::ios_base::getloc((const std::ios_base *)((char *)&v223[-1] + *(void *)(v222 - 24)));
                                                                                                                                                                                                                                                                                                                                                                                                                                            int8x16_t v176 = &_os_log_internal;
                                                                                                                                                                                                                                                                                                                                                                                                                                            unint64_t v177 = std::locale::use_facet((const std::locale *)v609, MEMORY[0x263F8C108]);
                                                                                                                                                                                                                                                                                                                                                                                                                                            ((void (*)(const std::locale::facet *, uint64_t))v177->__vftable[2].~facet_0)(v177, 10);
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::locale::~locale((std::locale *)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::ostream::put();
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::ostream::flush();
                                                                                                                                                                                                                                                                                                                                                                                                                                            int64x2_t v178 = (FILE *)*MEMORY[0x263EF8348];
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::stringbuf::str();
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v609[23] >= 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              int64x2_t v179 = v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            else {
                                                                                                                                                                                                                                                                                                                                                                                                                                              int64x2_t v179 = *(const char **)v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            fputs(v179, v178);
                                                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t v157 = v208;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if ((v609[23] & 0x80000000) != 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              operator delete(*(void **)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            unint64_t v151 = (const char *)v209;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              std::stringbuf::str();
                                                                                                                                                                                                                                                                                                                                                                                                                                              unint64_t v185 = v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v609[23] < 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v185 = *(unsigned char **)v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              LODWORD(v605[0]) = 136315138;
                                                                                                                                                                                                                                                                                                                                                                                                                                              *(void **)((char *)v605 + 4) = v185;
                                                                                                                                                                                                                                                                                                                                                                                                                                              _os_log_error_impl(&dword_2427AD000, v176, OS_LOG_TYPE_ERROR, "AGX: %s", (uint8_t *)v605, 0xCu);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((v609[23] & 0x80000000) != 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                operator delete(*(void **)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              std::stringbuf::str();
                                                                                                                                                                                                                                                                                                                                                                                                                                              unint64_t v180 = v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v609[23] < 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                unint64_t v180 = *(unsigned char **)v609;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              LODWORD(v605[0]) = 136315138;
                                                                                                                                                                                                                                                                                                                                                                                                                                              *(void **)((char *)v605 + 4) = v180;
                                                                                                                                                                                                                                                                                                                                                                                                                                              _os_log_impl(&dword_2427AD000, v176, OS_LOG_TYPE_INFO, "AGX: %s", (uint8_t *)v605, 0xCu);
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((v609[23] & 0x80000000) != 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                operator delete(*(void **)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            *(void *)&long long v221 = v207;
                                                                                                                                                                                                                                                                                                                                                                                                                                            *(void *)((char *)&v221 + *(void *)(v207 - 24)) = v206;
                                                                                                                                                                                                                                                                                                                                                                                                                                            uint64_t v222 = v205;
                                                                                                                                                                                                                                                                                                                                                                                                                                            v223[0] = MEMORY[0x263F8C318] + 16;
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v226 < 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              operator delete(v225);
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::streambuf::~streambuf();
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::iostream::~basic_iostream();
                                                                                                                                                                                                                                                                                                                                                                                                                                            MEMORY[0x24566ED30](&v227);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (v614 != v613)
                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                              if (v614) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                (*(void (**)(void))(*v614 + 40))();
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                              if ((SHIBYTE(v612.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_1012;
                                                                                                                                                                                                                                                                                                                                                                                                                                              }
LABEL_1072:
                                                                                                                                                                                                                                                                                                                                                                                                                                              operator delete(v612.__r_.__value_.__l.__data_);
                                                                                                                                                                                                                                                                                                                                                                                                                                              goto LABEL_1012;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                            (*(void (**)(void *))(v613[0] + 32))(v613);
                                                                                                                                                                                                                                                                                                                                                                                                                                            if (SHIBYTE(v612.__r_.__value_.__r.__words[2]) < 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                              goto LABEL_1072;
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
LABEL_1012:
                                                                                                                                                                                                                                                                                                                                                                                                                                            ++v158;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                          while (v158 != v157);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        fprintf((FILE *)*MEMORY[0x263EF8348], "**** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", v151 + 16, *((_DWORD *)v151 + 2), *((_DWORD *)v151 + 3));
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v198 = *((_DWORD *)v151 + 2);
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v199 = *((_DWORD *)v151 + 3);
                                                                                                                                                                                                                                                                                                                                                                                                                                          LODWORD(v619[0]) = 136315650;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(void *)((char *)v619 + 4) = v151 + 16;
                                                                                                                                                                                                                                                                                                                                                                                                                                          WORD2(v619[1]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(_DWORD *)((char *)&v619[1] + 6) = v198;
                                                                                                                                                                                                                                                                                                                                                                                                                                          WORD1(v619[2]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          HIDWORD(v619[2]) = v199;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v619, 0x18u);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v186 = *((_DWORD *)v151 + 2);
                                                                                                                                                                                                                                                                                                                                                                                                                                          int v187 = *((_DWORD *)v151 + 3);
                                                                                                                                                                                                                                                                                                                                                                                                                                          LODWORD(v619[0]) = 136315650;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(void *)((char *)v619 + 4) = v151 + 16;
                                                                                                                                                                                                                                                                                                                                                                                                                                          WORD2(v619[1]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          *(_DWORD *)((char *)&v619[1] + 6) = v186;
                                                                                                                                                                                                                                                                                                                                                                                                                                          WORD1(v619[2]) = 1024;
                                                                                                                                                                                                                                                                                                                                                                                                                                          HIDWORD(v619[2]) = v187;
                                                                                                                                                                                                                                                                                                                                                                                                                                          _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: **** BVH ASSERTION FAILED ON FILE %s LINE %d or %d *** \n", (uint8_t *)v619, 0x18u);
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        if (v618 == (void **)&v616)
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          v616[4]((void **)&v616);
                                                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v615.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_1100;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        else
                                                                                                                                                                                                                                                                                                                                                                                                                                        {
                                                                                                                                                                                                                                                                                                                                                                                                                                          if (v618) {
                                                                                                                                                                                                                                                                                                                                                                                                                                            (*((void (**)(void))*v618 + 5))();
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                          if ((SHIBYTE(v615.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                                                                                                                                                                                                                                                                                                                                                                                                          {
LABEL_1100:
                                                                                                                                                                                                                                                                                                                                                                                                                                            std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(v213);
                                                                                                                                                                                                                                                                                                                                                                                                                                            return;
                                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                        operator delete(v615.__r_.__value_.__l.__data_);
                                                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_1100;
                                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    operator delete((void *)v221);
                                                                                                                                                                                                                                                                                                                                                                                                                                    if (!v204) {
                                                                                                                                                                                                                                                                                                                                                                                                                                      goto LABEL_1100;
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_994;
                                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                operator delete(v218[0]);
                                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_950;
                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                            operator delete(v615.__r_.__value_.__l.__data_);
                                                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_946;
                                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                        operator delete(v612.__r_.__value_.__l.__data_);
                                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_942;
                                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                    operator delete(*(void **)v609);
                                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_938;
                                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                operator delete(v605[0]);
                                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_934;
                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                            operator delete((void *)v601);
                                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_930;
                                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                        operator delete(v597[0]);
                                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_926;
                                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                    operator delete((void *)v593);
                                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_922;
                                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                operator delete(v590[0]);
                                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_918;
                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                            operator delete(v586);
                                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_914;
                                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                        operator delete(v583[0]);
                                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_910;
                                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                    operator delete((void *)v579);
                                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_906;
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                operator delete(v576[0]);
                                                                                                                                                                                                                                                                                                                                                                                goto LABEL_902;
                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                            operator delete(v573[0]);
                                                                                                                                                                                                                                                                                                                                                                            goto LABEL_898;
                                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                        operator delete(v569);
                                                                                                                                                                                                                                                                                                                                                                        goto LABEL_894;
                                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                    operator delete(v566[0]);
                                                                                                                                                                                                                                                                                                                                                                    goto LABEL_890;
                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                operator delete(v562);
                                                                                                                                                                                                                                                                                                                                                                goto LABEL_886;
                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                            operator delete(v559[0]);
                                                                                                                                                                                                                                                                                                                                                            goto LABEL_882;
                                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                        operator delete(v517[0]);
                                                                                                                                                                                                                                                                                                                                                        goto LABEL_800;
                                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                    operator delete((void *)v513);
                                                                                                                                                                                                                                                                                                                                                    goto LABEL_796;
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                operator delete(v510[0]);
                                                                                                                                                                                                                                                                                                                                                goto LABEL_792;
                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                            operator delete(v507[0]);
                                                                                                                                                                                                                                                                                                                                            goto LABEL_788;
                                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                        operator delete(v503);
                                                                                                                                                                                                                                                                                                                                        goto LABEL_784;
                                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                    operator delete(v499);
                                                                                                                                                                                                                                                                                                                                    goto LABEL_780;
                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                operator delete(v495);
                                                                                                                                                                                                                                                                                                                                goto LABEL_776;
                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                            operator delete(v492[0]);
                                                                                                                                                                                                                                                                                                                            goto LABEL_772;
                                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                        operator delete(v488);
                                                                                                                                                                                                                                                                                                                        goto LABEL_768;
                                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                    operator delete((void *)v313);
                                                                                                                                                                                                                                                                                                                    goto LABEL_430;
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                operator delete(v309);
                                                                                                                                                                                                                                                                                                                goto LABEL_426;
                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                            operator delete(v305);
                                                                                                                                                                                                                                                                                                            goto LABEL_422;
                                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                        operator delete(v302[0]);
                                                                                                                                                                                                                                                                                                        goto LABEL_418;
                                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                    operator delete(v299[0]);
                                                                                                                                                                                                                                                                                                    goto LABEL_414;
                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                operator delete(v295);
                                                                                                                                                                                                                                                                                                goto LABEL_410;
                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                            operator delete(v292[0]);
                                                                                                                                                                                                                                                                                            goto LABEL_406;
                                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                        operator delete(v289[0]);
                                                                                                                                                                                                                                                                                        goto LABEL_402;
                                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                    operator delete(v286[0]);
                                                                                                                                                                                                                                                                                    goto LABEL_398;
                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                operator delete(v283[0]);
                                                                                                                                                                                                                                                                                goto LABEL_394;
                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                            operator delete(v280[0]);
                                                                                                                                                                                                                                                                            goto LABEL_390;
                                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                        operator delete(v277[0]);
                                                                                                                                                                                                                                                                        goto LABEL_386;
                                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                    operator delete(v273);
                                                                                                                                                                                                                                                                    goto LABEL_382;
                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                operator delete(v270[0]);
                                                                                                                                                                                                                                                                goto LABEL_378;
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                            operator delete(v267[0]);
                                                                                                                                                                                                                                                            goto LABEL_374;
                                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                        operator delete(v264[0]);
                                                                                                                                                                                                                                                        goto LABEL_370;
                                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                    operator delete(v260);
                                                                                                                                                                                                                                                    goto LABEL_366;
                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                operator delete(v256);
                                                                                                                                                                                                                                                goto LABEL_362;
                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                            operator delete(v252);
                                                                                                                                                                                                                                            goto LABEL_358;
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                        operator delete(v248);
                                                                                                                                                                                                                                        goto LABEL_354;
                                                                                                                                                                                                                                      }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                    operator delete(v245[0]);
                                                                                                                                                                                                                                    goto LABEL_350;
                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                operator delete((void *)v241);
                                                                                                                                                                                                                                goto LABEL_346;
                                                                                                                                                                                                                              }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                            operator delete(v238[0]);
                                                                                                                                                                                                                            goto LABEL_342;
                                                                                                                                                                                                                          }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                        operator delete(v234);
                                                                                                                                                                                                                        goto LABEL_338;
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                    operator delete(v231[0]);
                                                                                                                                                                                                                    goto LABEL_334;
                                                                                                                                                                                                                  }
                                                                                                                                                                                                                }
                                                                                                                                                                                                                operator delete(*(void **)__p);
                                                                                                                                                                                                                goto LABEL_330;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              unint64_t v130 = v213;
                                                                                                                                                                                                            }
LABEL_298:
                                                                                                                                                                                                            int64x2_t v140 = (char *)operator new(0x60uLL);
                                                                                                                                                                                                            unint64_t v141 = v140;
                                                                                                                                                                                                            int16x8_t v215 = (uint64_t *)v140;
                                                                                                                                                                                                            int16x8_t v216 = &v213;
                                                                                                                                                                                                            char v217 = 0;
                                                                                                                                                                                                            *((_DWORD *)v140 + 8) = *(_DWORD *)v133;
                                                                                                                                                                                                            unint64_t v142 = &v619[8 * v131];
                                                                                                                                                                                                            uint64_t v143 = (const std::string::value_type **)(v142 + 1);
                                                                                                                                                                                                            if (*((char *)v133 + 31) < 0)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              std::string::__init_copy_ctor_external((std::string *)(v140 + 40), *v143, v142[2]);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            else
                                                                                                                                                                                                            {
                                                                                                                                                                                                              *(_OWORD *)(v140 + 40) = *(_OWORD *)v143;
                                                                                                                                                                                                              *((void *)v140 + 7) = v142[3];
                                                                                                                                                                                                            }
                                                                                                                                                                                                            int64x2_t v145 = &v619[8 * v131];
                                                                                                                                                                                                            uint64_t v146 = v145[7];
                                                                                                                                                                                                            if (v146)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              if ((void *)v146 == v145 + 4)
                                                                                                                                                                                                              {
                                                                                                                                                                                                                *((void *)v141 + 11) = v141 + 64;
                                                                                                                                                                                                                (*(void (**)(uint64_t))(*(void *)v146 + 24))(v146);
                                                                                                                                                                                                                goto LABEL_313;
                                                                                                                                                                                                              }
                                                                                                                                                                                                              uint64_t v146 = (*(uint64_t (**)(uint64_t))(*(void *)v146 + 16))(v146);
                                                                                                                                                                                                            }
                                                                                                                                                                                                            *((void *)v141 + 11) = v146;
LABEL_313:
                                                                                                                                                                                                            char v217 = 1;
                                                                                                                                                                                                            int8x16_t v147 = v215;
                                                                                                                                                                                                            *int16x8_t v215 = 0;
                                                                                                                                                                                                            v147[1] = 0;
                                                                                                                                                                                                            v147[2] = (uint64_t)v138;
                                                                                                                                                                                                            *int64x2_t v139 = v147;
                                                                                                                                                                                                            if (*v212)
                                                                                                                                                                                                            {
                                                                                                                                                                                                              int16x8_t v212 = (char **)*v212;
                                                                                                                                                                                                              int8x16_t v147 = *v139;
                                                                                                                                                                                                            }
                                                                                                                                                                                                            std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v213, v147);
                                                                                                                                                                                                            ++v214;
                                                                                                                                                                                                            goto LABEL_316;
                                                                                                                                                                                                          }
                                                                                                                                                                                                          uint64_t v127 = (*(uint64_t (**)(void))(*v251 + 16))();
                                                                                                                                                                                                        }
                                                                                                                                                                                                        v1020 = (uint64_t *)v127;
                                                                                                                                                                                                        goto LABEL_279;
                                                                                                                                                                                                      }
                                                                                                                                                                                                      uint64_t v125 = (*(uint64_t (**)(void))(*v255 + 16))();
                                                                                                                                                                                                    }
                                                                                                                                                                                                    v1016 = (uint64_t *)v125;
                                                                                                                                                                                                    goto LABEL_274;
                                                                                                                                                                                                  }
                                                                                                                                                                                                  uint64_t v123 = (*(uint64_t (**)(void))(*v259 + 16))();
                                                                                                                                                                                                }
                                                                                                                                                                                                v1012 = (uint64_t *)v123;
                                                                                                                                                                                                goto LABEL_269;
                                                                                                                                                                                              }
                                                                                                                                                                                              uint64_t v121 = (*(uint64_t (**)(void))(*v263 + 16))();
                                                                                                                                                                                            }
                                                                                                                                                                                            v1008 = (uint64_t *)v121;
                                                                                                                                                                                            goto LABEL_264;
                                                                                                                                                                                          }
                                                                                                                                                                                          uint64_t v119 = (*(uint64_t (**)(void))(*v276 + 16))();
                                                                                                                                                                                        }
                                                                                                                                                                                        v992 = (uint64_t *)v119;
                                                                                                                                                                                        goto LABEL_259;
                                                                                                                                                                                      }
                                                                                                                                                                                      uint64_t v117 = (*(uint64_t (**)(void))(*v298 + 16))();
                                                                                                                                                                                    }
                                                                                                                                                                                    v964 = (uint64_t *)v117;
                                                                                                                                                                                    goto LABEL_254;
                                                                                                                                                                                  }
                                                                                                                                                                                  uint64_t v115 = (*(uint64_t (**)(void))(*v308 + 16))();
                                                                                                                                                                                }
                                                                                                                                                                                v952 = (uint64_t *)v115;
                                                                                                                                                                                goto LABEL_249;
                                                                                                                                                                              }
                                                                                                                                                                              uint64_t v113 = (*(uint64_t (**)(void))(*v312 + 16))();
                                                                                                                                                                            }
                                                                                                                                                                            v948 = (uint64_t *)v113;
                                                                                                                                                                            goto LABEL_244;
                                                                                                                                                                          }
                                                                                                                                                                          uint64_t v111 = (*(uint64_t (**)(void))(*v320 + 16))();
                                                                                                                                                                        }
                                                                                                                                                                        v940 = (uint64_t *)v111;
                                                                                                                                                                        goto LABEL_239;
                                                                                                                                                                      }
                                                                                                                                                                      uint64_t v109 = (*(uint64_t (**)(void))(*v324 + 16))();
                                                                                                                                                                    }
                                                                                                                                                                    v936 = (uint64_t *)v109;
                                                                                                                                                                    goto LABEL_234;
                                                                                                                                                                  }
                                                                                                                                                                  uint64_t v107 = (*(uint64_t (**)(void))(*v328 + 16))();
                                                                                                                                                                }
                                                                                                                                                                v932 = (uint64_t *)v107;
                                                                                                                                                                goto LABEL_229;
                                                                                                                                                              }
                                                                                                                                                              uint64_t v105 = (*(uint64_t (**)(void))(*v332 + 16))();
                                                                                                                                                            }
                                                                                                                                                            v928 = (uint64_t *)v105;
                                                                                                                                                            goto LABEL_224;
                                                                                                                                                          }
                                                                                                                                                          uint64_t v103 = (*(uint64_t (**)(void))(*v339 + 16))();
                                                                                                                                                        }
                                                                                                                                                        v920 = (uint64_t *)v103;
                                                                                                                                                        goto LABEL_219;
                                                                                                                                                      }
                                                                                                                                                      uint64_t v101 = (*(uint64_t (**)(void))(*v362 + 16))();
                                                                                                                                                    }
                                                                                                                                                    v892 = (uint64_t *)v101;
                                                                                                                                                    goto LABEL_214;
                                                                                                                                                  }
                                                                                                                                                  uint64_t v99 = (*(uint64_t (**)(void))(*v366 + 16))();
                                                                                                                                                }
                                                                                                                                                v888 = (uint64_t *)v99;
                                                                                                                                                goto LABEL_209;
                                                                                                                                              }
                                                                                                                                              uint64_t v97 = (*(uint64_t (**)(void))(*v377 + 16))();
                                                                                                                                            }
                                                                                                                                            v876 = (uint64_t *)v97;
                                                                                                                                            goto LABEL_204;
                                                                                                                                          }
                                                                                                                                          uint64_t v95 = (*(uint64_t (**)(void))(*v381 + 16))();
                                                                                                                                        }
                                                                                                                                        v872 = (uint64_t *)v95;
                                                                                                                                        goto LABEL_199;
                                                                                                                                      }
                                                                                                                                      uint64_t v93 = (*(uint64_t (**)(void))(*v385 + 16))();
                                                                                                                                    }
                                                                                                                                    v868 = (uint64_t *)v93;
                                                                                                                                    goto LABEL_194;
                                                                                                                                  }
                                                                                                                                  uint64_t v91 = (*(uint64_t (**)(void))(*v389 + 16))();
                                                                                                                                }
                                                                                                                                v864 = (uint64_t *)v91;
                                                                                                                                goto LABEL_189;
                                                                                                                              }
                                                                                                                              uint64_t v89 = (*(uint64_t (**)(void))(*v393 + 16))();
                                                                                                                            }
                                                                                                                            v860 = (uint64_t *)v89;
                                                                                                                            goto LABEL_184;
                                                                                                                          }
                                                                                                                          uint64_t v87 = (*(uint64_t (**)(void))(*v397 + 16))();
                                                                                                                        }
                                                                                                                        v856 = (uint64_t *)v87;
                                                                                                                        goto LABEL_179;
                                                                                                                      }
                                                                                                                      uint64_t v85 = (*(uint64_t (**)(void))(*v401 + 16))();
                                                                                                                    }
                                                                                                                    v852 = (uint64_t *)v85;
                                                                                                                    goto LABEL_174;
                                                                                                                  }
                                                                                                                  uint64_t v83 = (*(uint64_t (**)(void))(*v405 + 16))();
                                                                                                                }
                                                                                                                v848 = (uint64_t *)v83;
                                                                                                                goto LABEL_169;
                                                                                                              }
                                                                                                              uint64_t v81 = (*(uint64_t (**)(void))(*v409 + 16))();
                                                                                                            }
                                                                                                            v844 = (uint64_t *)v81;
                                                                                                            goto LABEL_164;
                                                                                                          }
                                                                                                          uint64_t v79 = (*(uint64_t (**)(void))(*v416 + 16))();
                                                                                                        }
                                                                                                        v836 = (uint64_t *)v79;
                                                                                                        goto LABEL_159;
                                                                                                      }
                                                                                                      uint64_t v77 = (*(uint64_t (**)(void))(*v420 + 16))();
                                                                                                    }
                                                                                                    v832 = (uint64_t *)v77;
                                                                                                    goto LABEL_154;
                                                                                                  }
                                                                                                  uint64_t v75 = (*(uint64_t (**)(void))(*v424 + 16))();
                                                                                                }
                                                                                                v828 = (uint64_t *)v75;
                                                                                                goto LABEL_149;
                                                                                              }
                                                                                              uint64_t v73 = (*(uint64_t (**)(void))(*v431 + 16))();
                                                                                            }
                                                                                            v820 = (uint64_t *)v73;
                                                                                            goto LABEL_144;
                                                                                          }
                                                                                          uint64_t v71 = (*(uint64_t (**)(void))(*v438 + 16))();
                                                                                        }
                                                                                        v812 = (uint64_t *)v71;
                                                                                        goto LABEL_139;
                                                                                      }
                                                                                      uint64_t v69 = (*(uint64_t (**)(void))(*v459 + 16))();
                                                                                    }
                                                                                    v788 = (uint64_t *)v69;
                                                                                    goto LABEL_134;
                                                                                  }
                                                                                  uint64_t v67 = (*(uint64_t (**)(void))(*v463 + 16))();
                                                                                }
                                                                                v784 = (uint64_t *)v67;
                                                                                goto LABEL_129;
                                                                              }
                                                                              uint64_t v65 = (*(uint64_t (**)(void))(*v467 + 16))();
                                                                            }
                                                                            v780 = (uint64_t *)v65;
                                                                            goto LABEL_124;
                                                                          }
                                                                          uint64_t v63 = (*(uint64_t (**)(void))(*v471 + 16))();
                                                                        }
                                                                        v776 = (uint64_t *)v63;
                                                                        goto LABEL_119;
                                                                      }
                                                                      uint64_t v61 = (*(uint64_t (**)(void))(*v487 + 16))();
                                                                    }
                                                                    v756 = (uint64_t *)v61;
                                                                    goto LABEL_114;
                                                                  }
                                                                  uint64_t v59 = (*(uint64_t (**)(void))(*v491 + 16))();
                                                                }
                                                                v752 = (uint64_t *)v59;
                                                                goto LABEL_109;
                                                              }
                                                              uint64_t v57 = (*(uint64_t (**)(void))(*v498 + 16))();
                                                            }
                                                            v744 = (uint64_t *)v57;
                                                            goto LABEL_104;
                                                          }
                                                          uint64_t v55 = (*(uint64_t (**)(void))(*v502 + 16))();
                                                        }
                                                        v740 = (uint64_t *)v55;
                                                        goto LABEL_99;
                                                      }
                                                      uint64_t v53 = (*(uint64_t (**)(void))(*v506 + 16))();
                                                    }
                                                    v736 = (uint64_t *)v53;
                                                    goto LABEL_94;
                                                  }
                                                  uint64_t v51 = (*(uint64_t (**)(void))(*v523 + 16))();
                                                }
                                                v716 = (uint64_t *)v51;
                                                goto LABEL_89;
                                              }
                                              uint64_t v49 = (*(uint64_t (**)(void))(*v527 + 16))();
                                            }
                                            v712 = (uint64_t *)v49;
                                            goto LABEL_84;
                                          }
                                          uint64_t v47 = (*(uint64_t (**)(void))(*v531 + 16))();
                                        }
                                        v708 = (uint64_t *)v47;
                                        goto LABEL_79;
                                      }
                                      uint64_t v45 = (*(uint64_t (**)(void))(*v539 + 16))();
                                    }
                                    v700 = (uint64_t *)v45;
                                    goto LABEL_74;
                                  }
                                  uint64_t v43 = (*(uint64_t (**)(void))(*v543 + 16))();
                                }
                                v696 = (uint64_t *)v43;
                                goto LABEL_69;
                              }
                              uint64_t v41 = (*(uint64_t (**)(void))(*v547 + 16))();
                            }
                            v692 = (uint64_t *)v41;
                            goto LABEL_64;
                          }
                          uint64_t v39 = (*(uint64_t (**)(void))(*v551 + 16))();
                        }
                        v688 = (uint64_t *)v39;
                        goto LABEL_59;
                      }
                      uint64_t v37 = (*(uint64_t (**)(void))(*v555 + 16))();
                    }
                    v684 = (uint64_t *)v37;
                    goto LABEL_54;
                  }
                  uint64_t v35 = (*(uint64_t (**)(void))(*v565 + 16))();
                }
                v672 = (uint64_t *)v35;
                goto LABEL_49;
              }
              uint64_t v33 = (*(uint64_t (**)(void))(*v572 + 16))();
            }
            v664 = (uint64_t *)v33;
            goto LABEL_44;
          }
          uint64_t v31 = (*(uint64_t (**)(void))(*v589 + 16))();
        }
        v644 = (uint64_t *)v31;
        goto LABEL_39;
      }
      uint64_t v29 = (*(uint64_t (**)(void))(*v614 + 16))();
    }
    v619[31] = v29;
    goto LABEL_34;
  }
  fwrite("*** BVH Build Debug Log == nil ***\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v619[0]) = 0;
    _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: *** BVH Build Debug Log == nil ***\n", (uint8_t *)v619, 2u);
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
  {
    LOWORD(v619[0]) = 0;
    _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: *** BVH Build Debug Log == nil ***\n", (uint8_t *)v619, 2u);
  }
}

void sub_2429AEEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t a53)
{
  if (*(char *)(v53 + 2816) < 0) {
    operator delete((void *)STACK[0x3DE8]);
  }
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xA98]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xAD0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xB08]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xB40]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xB80]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xBB8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xBF0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xC28]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xC60]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xCA0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xCE0]);
  STACK[0x770] = a53;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD18]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD50]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xD90]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xDD0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE10]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE50]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xE90]);
  STACK[0x218] = STACK[0x770];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xEC8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF00]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF40]);
  STACK[0x228] = STACK[0x218];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xF78]);
  STACK[0x250] = STACK[0x228];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xFB0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0xFE8]);
  STACK[0x288] = STACK[0x250];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1020]);
  STACK[0x290] = STACK[0x288];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1058]);
  STACK[0x298] = STACK[0x290];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1090]);
  STACK[0x2A0] = STACK[0x298];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x10C8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1100]);
  STACK[0x2A8] = STACK[0x2A0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1140]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1178]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x11B0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x11F0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1230]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1270]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x12B0]);
  STACK[0x2B0] = STACK[0x2A8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x12F0]);
  STACK[0x2B8] = STACK[0x2B0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1328]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1360]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x13A0]);
  STACK[0x2C0] = STACK[0x2B8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x13D8]);
  STACK[0x2C8] = STACK[0x2C0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1410]);
  STACK[0x2D0] = STACK[0x2C8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1448]);
  STACK[0x2D8] = STACK[0x2D0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1480]);
  STACK[0x2E0] = STACK[0x2D8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x14B8]);
  STACK[0x2E8] = STACK[0x2E0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x14F0]);
  STACK[0x2F0] = STACK[0x2E8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1528]);
  STACK[0x2F8] = STACK[0x2F0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1560]);
  STACK[0x300] = STACK[0x2F8];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1598]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x15D0]);
  STACK[0x308] = STACK[0x300];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1608]);
  STACK[0x310] = STACK[0x308];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1640]);
  STACK[0x318] = STACK[0x310];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1678]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x16B0]);
  unint64_t v55 = STACK[0x318];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x16E8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1720]);
  STACK[0x320] = v55;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1760]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1798]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x17D0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1810]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1850]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1888]);
  STACK[0x328] = STACK[0x320];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x18C0]);
  STACK[0x330] = STACK[0x328];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x18F8]);
  STACK[0x338] = STACK[0x330];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1930]);
  STACK[0x340] = STACK[0x338];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1968]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x19A0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x19E0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1A20]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1A60]);
  unint64_t v56 = STACK[0x340];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1AA0]);
  STACK[0x348] = v56;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1AD8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1B10]);
  STACK[0x350] = STACK[0x348];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1B48]);
  unint64_t v57 = STACK[0x350];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1B80]);
  STACK[0x358] = v57;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1BB8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1BF0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1C30]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1C68]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1CA0]);
  STACK[0x360] = STACK[0x358];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1CD8]);
  STACK[0x368] = STACK[0x360];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1D10]);
  STACK[0x370] = STACK[0x368];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1D48]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1D80]);
  unint64_t v58 = STACK[0x370];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1DB8]);
  STACK[0x378] = v58;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1DF0]);
  STACK[0x380] = STACK[0x378];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E28]);
  unint64_t v59 = STACK[0x380];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E60]);
  STACK[0x388] = v59;
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1E98]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1ED0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1F10]);
  STACK[0x390] = STACK[0x388];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1F48]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1F80]);
  STACK[0x398] = STACK[0x390];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1FB8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x1FF0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2030]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2068]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x20A0]);
  STACK[0x3A0] = STACK[0x398];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x20D8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2110]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2148]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2180]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x21B8]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x21F0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2230]);
  int v60 = (unint64_t *)STACK[0x3A0];
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x2268]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x22A0]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x800]);
  DebugLogEntryMetadata::~DebugLogEntryMetadata((DebugLogEntryMetadata *)&STACK[0x908]);
  while (v60 != &STACK[0x22E0])
  {
    v60 -= 8;
    std::pair<unsigned int const,DebugLogEntryMetadata>::~pair((uint64_t)v60);
  }
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  unint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    char v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    unint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t std::pair<unsigned int const,DebugLogEntryMetadata>::~pair(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
LABEL_7:
    operator delete(*(void **)(a1 + 8));
    return a1;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    goto LABEL_7;
  }
  return a1;
}

void DebugLogEntryMetadata::~DebugLogEntryMetadata(DebugLogEntryMetadata *this)
{
  uint64_t v2 = (char *)this + 24;
  uint64_t v3 = (char *)*((void *)this + 6);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_7:
    operator delete(*(void **)this);
    return;
  }
  if (v3) {
    (*(void (**)(char *))(*(void *)v3 + 40))(v3);
  }
  if (*((char *)this + 23) < 0) {
    goto LABEL_7;
  }
}

void *std::__function::__value_func<std::string ()(unsigned long long)>::swap[abi:nn180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  unint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  char v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2429B0BE4(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x24566ED30](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x24566EBF0](v24, a1);
  if (v24[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v26 = v16;
        int64_t v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      if (v27 >= 0) {
        locale = &__b;
      }
      else {
        locale = __b.__locale_;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v7 + 96))(v7, locale, v16);
      uint64_t v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x24566EC00](v24);
  return a1;
}

void sub_2429B0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x24566EC00](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v0);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x24566ED30](a1 + 128);
  return a1;
}

void std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(char *a1)
{
  if (!a1) {
    return;
  }
  std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(*(void *)a1);
  std::__tree<std::__value_type<unsigned int,DebugLogEntryMetadata>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,DebugLogEntryMetadata>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,DebugLogEntryMetadata>>>::destroy(*((void *)a1 + 1));
  uint64_t v2 = (char *)*((void *)a1 + 11);
  if (v2 != a1 + 64)
  {
    if (v2) {
      (*(void (**)(char *))(*(void *)v2 + 40))(v2);
    }
    if ((a1[63] & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  (*(void (**)(char *))(*((void *)a1 + 8) + 32))(a1 + 64);
  if (a1[63] < 0) {
LABEL_11:
  }
    operator delete(*((void **)a1 + 5));
LABEL_6:

  operator delete(a1);
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      uint64_t v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            int v9 = (uint64_t *)a2[2];
          }
          else
          {
            int v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              uint64_t v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            *int v9 = v2;
            *(void *)(v2 + 16) = v9;
            uint64_t v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          *uint64_t v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), unint64_t v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        uint64_t *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,DebugLogEntryMetadata>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,DebugLogEntryMetadata>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 88);
      if (v3 != v2 + 64)
      {
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
        }
        if ((*(char *)(v2 + 63) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      (*(void (**)(uint64_t))(*(void *)(v2 + 64) + 32))(v2 + 64);
      if (*(char *)(v2 + 63) < 0) {
LABEL_10:
      }
        operator delete(*(void **)(v2 + 40));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t hex32Formatter()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  uint64_t v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (char *)v6 + *(void *)(v0 - 24);
  if (*((_DWORD *)v1 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v0 - 24)));
    uint64_t v2 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
  }
  *((_DWORD *)v1 + 36) = 48;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"0x", 2);
  *(void *)((char *)&v6[3] + *(void *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24566ED30](&v8);
}

void sub_2429B15D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t int32_hex32_Formatter()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  *(void *)((char *)&v6[3] + *(void *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  uint64_t v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFFB5 | 8;
  uint64_t v1 = (char *)v6 + *(void *)(v0 - 24);
  if (*((_DWORD *)v1 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v0 - 24)));
    uint64_t v2 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
  }
  *((_DWORD *)v1 + 36) = 48;
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)",0x", 3);
  *(void *)((char *)&v6[3] + *(void *)(v6[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24566ED30](&v8);
}

void sub_2429B1894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t hex64Formatter()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v5);
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"0x", 2);
  uint64_t v0 = v6[0];
  uint64_t v1 = (char *)v6 + *(void *)(v6[0] - 24);
  if (*((_DWORD *)v1 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(v6[0] - 24)));
    uint64_t v2 = std::locale::use_facet(&v9, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 32);
    std::locale::~locale(&v9);
    uint64_t v0 = v6[0];
  }
  *((_DWORD *)v1 + 36) = 48;
  *(void *)((char *)&v6[3] + *(void *)(v0 - 24)) = 16;
  *(_DWORD *)((char *)&v6[1] + *(void *)(v0 - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v0 - 24)) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x263F8C2B8];
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v5 + *(void *)(v5[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x263F8C318] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24566ED30](&v8);
}

void sub_2429B1B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t int32x2Formatter()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)v3);
  *(void *)((char *)&v4[3] + *(void *)(v4[0] - 24)) = 8;
  uint64_t v0 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v0, (uint64_t)",", 1);
  *(void *)((char *)&v4[3] + *(void *)(v4[0] - 24)) = 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2B8];
  uint64_t v1 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v4[0] = v1;
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x24566ED30](&v6);
}

void sub_2429B1D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::operator()(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F851778;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F851778;
  result[1] = v3;
  return result;
}

void std::__function::__func<std::string (*)(unsigned long long),std::allocator<std::string (*)(unsigned long long)>,std::string ()(unsigned long long)>::~__func()
{
}

void nothingFormatter(unsigned char *a1@<X8>)
{
  a1[23] = 0;
  *a1 = 0;
}

void AGX::Mempool<16u,0u,true,unsigned long long>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*(void *)a1 length:8 * a2 options:0];
  char v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = (int *)MEMORY[0x263F4B188];
  if (v6)
  {
    memcpy(*(void **)&v4[*MEMORY[0x263F4B188] + 24], *(const void **)(v6 + (int)*MEMORY[0x263F4B188] + 24), 8 * *(unsigned int *)(a1 + 16));
  }
  *(void *)(a1 + 8) = v5;
  LODWORD(v8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  if (v8 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v8;
  }
  uint64_t v9 = a2 - 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v8 < v9)
  {
    uint64_t v11 = 8 * v8;
    uint64_t v12 = v8;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v11) = ++v12;
      v11 += 8;
    }
    while (v9 != v12);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = 8 * v9;
  *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v14) = v13;
  uint64_t v15 = v13;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v15, (v13 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
  if (v15 != v13)
  {
    uint64_t v16 = v15;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + *v7 + 24) + v14) = v15;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v16, (v15 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
      BOOL v17 = v16 == v15;
      uint64_t v15 = v16;
    }
    while (!v17);
  }
  uint64_t v18 = *(atomic_uint **)(a1 + 56);
  atomic_uint v19 = *v18;
  if ((*v18 + 1) > 1) {
    unsigned int v20 = v19 + 1;
  }
  else {
    unsigned int v20 = 1;
  }
  atomic_uint v21 = *v18;
  atomic_compare_exchange_strong(v18, (unsigned int *)&v21, v20);
  if (v21 != v19)
  {
    atomic_uint v22 = v21;
    do
    {
      if ((v21 + 1) > 1) {
        unsigned int v23 = v21 + 1;
      }
      else {
        unsigned int v23 = 1;
      }
      atomic_compare_exchange_strong(v18, (unsigned int *)&v22, v23);
      BOOL v17 = v22 == v21;
      atomic_uint v21 = v22;
    }
    while (!v17);
  }
}

uint64_t AGX::Mempool<16u,0u,true,unsigned long long>::Allocation::Allocation(uint64_t a1, os_unfair_lock_s *a2, unsigned int a3)
{
  *(_DWORD *)a1 = a3;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = a3 != 0;
  if (!a3)
  {
    uint64_t v4 = a2 + 10;
    os_unfair_lock_lock(a2 + 10);
    uint64_t v5 = *(void *)(a1 + 8);
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(v5 + 32), memory_order_acquire);
    char v7 = (int *)MEMORY[0x263F4B188];
    if (explicit)
    {
      uint64_t v8 = explicit;
      while (1)
      {
        unint64_t v9 = explicit & 0xFFFFFFFF00000000;
        unint64_t v10 = (v9 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v5 + 24) + 8) + *v7 + 24) + 8 * v8))
            + 0x100000000;
        unint64_t explicit = v9 | v8;
        unint64_t v11 = explicit;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v5 + 32), &explicit, v10);
        if (explicit == v11) {
          break;
        }
        uint64_t v8 = explicit;
        if (!explicit) {
          goto LABEL_6;
        }
      }
    }
    else
    {
LABEL_6:
      *(_DWORD *)a1 = 0;
      uint64_t v12 = *(void *)(a1 + 8);
      int v13 = *(_DWORD *)(v12 + 16);
      if (v13)
      {
        if (!*(void *)(v12 + 32)) {
          AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 2 * v13);
        }
      }
      else
      {
        AGX::Mempool<16u,0u,true,unsigned long long>::grow(v12, 0x10u);
      }
      uint64_t v14 = *(void *)(a1 + 8);
      unint64_t v15 = atomic_load_explicit((atomic_ullong *volatile)(v14 + 32), memory_order_acquire);
      if (v15)
      {
        uint64_t v8 = v15;
        while (1)
        {
          unint64_t v16 = v15 & 0xFFFFFFFF00000000;
          unint64_t v17 = (v16 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(v14 + 24) + 8) + *v7 + 24) + 8 * v8))
              + 0x100000000;
          unint64_t v15 = v16 | v8;
          unint64_t v18 = v15;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v14 + 32), &v15, v17);
          if (v15 == v18) {
            break;
          }
          uint64_t v8 = v15;
          if (!v15) {
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        LODWORD(v8) = 0;
      }
    }
    *(_DWORD *)a1 = v8;
    os_unfair_lock_unlock(v4);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
    a3 = *(_DWORD *)a1;
  }
  uint32_t os_unfair_lock_opaque = a2[11]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque < a3)
  {
    uint32_t v20 = a2[11]._os_unfair_lock_opaque;
    do
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(*(void *)(a1 + 8) + 44), &v20, a3, memory_order_relaxed, memory_order_relaxed);
      if (v20 == os_unfair_lock_opaque) {
        break;
      }
      a3 = *(_DWORD *)a1;
      uint32_t os_unfair_lock_opaque = v20;
    }
    while (v20 < *(_DWORD *)a1);
    a2 = *(os_unfair_lock_s **)(a1 + 8);
  }
  atomic_fetch_add((atomic_uint *volatile)&a2[12], 1u);
  return a1;
}

void sub_2429B212C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX14FenceGroupPool17releaseFenceGroupEPNS_10FenceGroupE_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 32);
  **(void **)(result + 40) = *v1;
  *uint64_t v1 = *(void *)(result + 40);
  return result;
}

uint64_t AGX::FenceList::copyFences(uint64_t this, unsigned __int16 *a2)
{
  for (unint64_t i = *(void *)(this + 512); i; i &= i - 1)
  {
    unint64_t v3 = __clz(__rbit64(i));
    uint64_t v4 = *(void **)(this + 8 * v3);
    __int16 v5 = (_WORD)v3 << 10;
    for (unint64_t j = v4[1]; j; j &= j - 1)
      *a2++ = v5 | __clz(__rbit64(j));
    for (unint64_t k = v4[2]; k; k &= k - 1)
      *a2++ = v5 | __clz(__rbit64(k)) | 0x40;
    for (unint64_t m = v4[3]; m; m &= m - 1)
      *a2++ = v5 | __clz(__rbit64(m)) | 0x80;
    for (unint64_t n = v4[4]; n; n &= n - 1)
      *a2++ = v5 | __clz(__rbit64(n)) | 0xC0;
    for (iunint64_t i = v4[5]; ii; ii &= ii - 1)
      *a2++ = v5 | __clz(__rbit64(ii)) | 0x100;
    for (junint64_t j = v4[6]; jj; jj &= jj - 1)
      *a2++ = v5 | 0x140 | __clz(__rbit64(jj));
    for (kunint64_t k = v4[7]; kk; kk &= kk - 1)
      *a2++ = v5 | __clz(__rbit64(kk)) | 0x180;
    for (munint64_t m = v4[8]; mm; mm &= mm - 1)
      *a2++ = v5 | __clz(__rbit64(mm)) | 0x1C0;
    for (nunint64_t n = v4[9]; nn; nn &= nn - 1)
      *a2++ = v5 | __clz(__rbit64(nn)) | 0x200;
    for (unint64_t i1 = v4[10]; i1; i1 &= i1 - 1)
      *a2++ = v5 | 0x240 | __clz(__rbit64(i1));
    for (unint64_t i2 = v4[11]; i2; i2 &= i2 - 1)
      *a2++ = v5 | 0x280 | __clz(__rbit64(i2));
    for (unint64_t i3 = v4[12]; i3; i3 &= i3 - 1)
      *a2++ = v5 | 0x2C0 | __clz(__rbit64(i3));
    for (unint64_t i4 = v4[13]; i4; i4 &= i4 - 1)
      *a2++ = v5 | __clz(__rbit64(i4)) | 0x300;
    for (unint64_t i5 = v4[14]; i5; i5 &= i5 - 1)
      *a2++ = v5 | 0x340 | __clz(__rbit64(i5));
    for (unint64_t i6 = v4[15]; i6; i6 &= i6 - 1)
      *a2++ = v5 | __clz(__rbit64(i6)) | 0x380;
    for (unint64_t i7 = v4[16]; i7; i7 &= i7 - 1)
      *a2++ = v5 | __clz(__rbit64(i7)) | 0x3C0;
  }
  return this;
}

void AGX::FenceList::insertFence(AGX::FenceList *this, unsigned int a2)
{
  uint64_t v3 = a2 >> 10;
  unsigned int v4 = (a2 >> 6) & 0xF;
  char v5 = a2 & 0x3F;
  uint64_t v6 = *((void *)this + v3);
  if (!v6)
  {
    uint64_t v7 = *((void *)this + 65);
    uint64_t v14 = 0;
    unint64_t v15 = &v14;
    uint64_t v16 = 0x2020000000;
    uint64_t v17 = 0;
    uint64_t v8 = *(NSObject **)(v7 + 16);
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 3221225472;
    v13[2] = ___ZN3AGX14FenceGroupPool13getFenceGroupEv_block_invoke;
    v13[3] = &unk_26516F2D8;
    v13[4] = &v14;
    v13[5] = v7;
    dispatch_sync(v8, v13);
    bzero((void *)(v15[3] + 8), 0x80uLL);
    uint64_t v6 = v15[3];
    _Block_object_dispose(&v14, 8);
    *((void *)this + v3) = v6;
    *((void *)this + 64) |= 1 << v3;
  }
  uint64_t v9 = v6 + 8 * v4;
  uint64_t v12 = *(void *)(v9 + 8);
  unint64_t v10 = (uint64_t *)(v9 + 8);
  uint64_t v11 = v12;
  if ((v12 & (1 << v5)) == 0)
  {
    *unint64_t v10 = v11 | (1 << v5);
    ++*((_DWORD *)this + 132);
  }
}

int8x16_t *___ZN3AGX14FenceGroupPool13getFenceGroupEv_block_invoke(int8x16_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (int8x16_t *)result[2].i64[1];
  uint64_t v3 = (int8x16_t *)v2->i64[0];
  if (!v2->i64[0])
  {
    uint64_t result = (int8x16_t *)malloc_type_malloc(0x448uLL, 0x10200409324277FuLL);
    int8x16_t v4 = *v2;
    v2->i64[1] = (uint64_t)result;
    *uint64_t result = vextq_s8(v4, v4, 8uLL);
    result[9].i64[0] = (uint64_t)&result->i64[1];
    result[17].i64[1] = (uint64_t)result[9].i64;
    result[26].i64[0] = (uint64_t)&result[17].i64[1];
    result[34].i64[1] = (uint64_t)result[26].i64;
    result[43].i64[0] = (uint64_t)&result[34].i64[1];
    result[51].i64[1] = (uint64_t)result[43].i64;
    uint64_t v3 = result + 60;
    result[60].i64[0] = (uint64_t)&result[51].i64[1];
    v2->i64[0] = (uint64_t)result[60].i64;
  }
  *(void *)(*(void *)(v1[2].i64[0] + 8) + 24) = v3;
  v2->i64[0] = *(void *)v2->i64[0];
  return result;
}

void AGX::FenceList::merge(AGX::FenceList *this, AGX::FenceList *a2)
{
  for (unint64_t i = *((void *)a2 + 64); i; i &= i - 1)
  {
    unint64_t v16 = __clz(__rbit64(i));
    if ((*((void *)this + 64) & (1 << v16)) != 0)
    {
      uint64_t v17 = *((void *)this + v16);
      unint64_t v18 = (void *)*((void *)a2 + v16);
      int8x16_t v19 = *(int8x16_t *)(v17 + 72);
      int8x16_t v20 = *(int8x16_t *)(v17 + 88);
      int8x16_t v21 = *(int8x16_t *)(v17 + 104);
      int8x16_t v22 = *(int8x16_t *)(v17 + 120);
      int8x16_t v23 = *(int8x16_t *)(v17 + 56);
      int8x16_t v24 = *(int8x16_t *)(v17 + 40);
      int8x16_t v25 = *(int8x16_t *)(v17 + 24);
      uint64_t v26 = *(void *)(v17 + 16);
      uint8x16_t v27 = (uint8x16_t)vcntq_s8(*(int8x16_t *)(v17 + 8));
      uint64_t v28 = v18[1] | *(void *)(v17 + 8);
      *(void *)(v17 + 8) = v28;
      uint64_t v29 = v18[2] | v26;
      *(void *)(v17 + 16) = v29;
      uint64_t v30 = v18[3] | v25.i64[0];
      *(void *)(v17 + 24) = v30;
      uint64_t v31 = v18[4] | v25.i64[1];
      *(void *)(v17 + 32) = v31;
      uint64_t v32 = v24.i64[1];
      uint64_t v33 = v18[5] | v24.i64[0];
      *(void *)(v17 + 40) = v33;
      int8x16_t v34 = (int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v24))));
      int32x4_t v35 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v19)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20)))));
      int32x4_t v36 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8(v27))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v25)))));
      int32x4_t v37 = vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v21)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v22)))));
      int32x4_t v38 = vuzp1q_s32((int32x4_t)v34, (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23)))));
      uint64_t v39 = v18[6] | v32;
      *(void *)(v17 + 48) = v39;
      uint64_t v40 = v18[7] | v23.i64[0];
      *(void *)(v17 + 56) = v40;
      uint64_t v41 = v18[8] | v23.i64[1];
      v23.i64[0] = v30;
      v23.i64[1] = v31;
      v42.i64[0] = v28;
      v42.i64[1] = v29;
      v34.i64[0] = v40;
      v34.i64[1] = v41;
      v43.i64[0] = v33;
      v43.i64[1] = v39;
      *(void *)(v17 + 64) = v41;
      uint64_t v44 = v18[9] | v19.i64[0];
      *(void *)(v17 + 72) = v44;
      uint64_t v45 = v18[10] | v19.i64[1];
      *(void *)(v17 + 80) = v45;
      uint64_t v46 = v18[11] | v20.i64[0];
      *(void *)(v17 + 88) = v46;
      v20.i64[0] = v46;
      v20.i64[1] |= v18[12];
      v19.i64[0] = v44;
      v19.i64[1] = v45;
      *(void *)(v17 + 96) = v20.i64[1];
      int8x8_t v47 = (int8x8_t)(v18[13] | v21.i64[0]);
      *(int8x8_t *)(v17 + 104) = v47;
      *(int8x8_t *)v21.i8 = vcnt_s8(v47);
      v21.i16[0] = vaddlv_u8(*(uint8x8_t *)v21.i8);
      v47.i32[0] = v21.i32[0];
      int8x8_t v48 = (int8x8_t)(v18[14] | v21.i64[1]);
      *(int8x8_t *)(v17 + 112) = v48;
      *(int8x8_t *)v21.i8 = vcnt_s8(v48);
      v21.i16[0] = vaddlv_u8(*(uint8x8_t *)v21.i8);
      int8x8_t v49 = (int8x8_t)(v18[15] | v22.i64[0]);
      *(int8x8_t *)(v17 + 120) = v49;
      *(int8x8_t *)v22.i8 = vcnt_s8(v49);
      v22.i16[0] = vaddlv_u8(*(uint8x8_t *)v22.i8);
      v49.i32[0] = v22.i32[0];
      int8x8_t v50 = (int8x8_t)(v18[16] | v22.i64[1]);
      *(int8x8_t *)(v17 + 128) = v50;
      *(int8x8_t *)v22.i8 = vcnt_s8(v50);
      v22.i16[0] = vaddlv_u8(*(uint8x8_t *)v22.i8);
      int v15 = *((_DWORD *)this + 132)
          + v22.i32[0]
          + vaddvq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v42)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v23))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v43)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v34)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v19)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v20)))))))+ v47.i32[0]+ v21.i32[0]+ v49.i32[0]- vaddvq_s32(vaddq_s32(vaddq_s32(v36, v35), vaddq_s32(v38, v37)));
    }
    else
    {
      uint64_t v5 = *((void *)this + 65);
      uint64_t v52 = 0;
      uint64_t v53 = &v52;
      uint64_t v54 = 0x2020000000;
      uint64_t v55 = 0;
      uint64_t v6 = *(NSObject **)(v5 + 16);
      v51[0] = MEMORY[0x263EF8330];
      v51[1] = 3221225472;
      v51[2] = ___ZN3AGX14FenceGroupPool13getFenceGroupEv_block_invoke;
      v51[3] = &unk_26516F2D8;
      v51[4] = &v52;
      v51[5] = v5;
      dispatch_sync(v6, v51);
      bzero((void *)(v53[3] + 8), 0x80uLL);
      uint64_t v7 = v53[3];
      _Block_object_dispose(&v52, 8);
      *((void *)this + v16) = v7;
      *((void *)this + 64) |= 1 << v16;
      uint64_t v8 = *((void *)a2 + v16);
      long long v9 = *(_OWORD *)(v8 + 8);
      long long v10 = *(_OWORD *)(v8 + 24);
      long long v11 = *(_OWORD *)(v8 + 40);
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
      *(_OWORD *)(v7 + 40) = v11;
      *(_OWORD *)(v7 + 24) = v10;
      *(_OWORD *)(v7 + 8) = v9;
      long long v12 = *(_OWORD *)(v8 + 72);
      long long v13 = *(_OWORD *)(v8 + 88);
      long long v14 = *(_OWORD *)(v8 + 104);
      *(_OWORD *)(v7 + 120) = *(_OWORD *)(v8 + 120);
      *(_OWORD *)(v7 + 104) = v14;
      *(_OWORD *)(v7 + 88) = v13;
      *(_OWORD *)(v7 + 72) = v12;
      int v15 = vaddvq_s32(vaddq_s32(vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 8))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 24)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 72))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 88))))))), vaddq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 40))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 56)))))), vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 104))))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v7 + 120)))))))))+ *((_DWORD *)this + 132);
    }
    *((_DWORD *)this + 132) = v15;
  }
}

void *___ZN3AGX14FenceGroupPoolD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  for (uint64_t result = *(void **)(v1 + 8); result; uint64_t result = *(void **)(v1 + 8))
  {
    *(void *)(v1 + 8) = *result;
    free(result);
  }
  return result;
}

void AGX::FenceGroupPool::~FenceGroupPool(AGX::FenceGroupPool *this)
{
  uint64_t v2 = *((void *)this + 2);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX14FenceGroupPoolD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_release(*((dispatch_object_t *)this + 2));
}

void sub_2429B4074(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long long>::__insert_with_size[abi:nn180100]<unsigned long long *,unsigned long long *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  unint64_t v10 = *a1;
  long long v9 = (char *)a1[1];
  uint64_t v11 = (uint64_t)a2 - *a1;
  uint64_t v12 = v11 >> 3;
  long long v13 = (unsigned char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v14 = a1[2];
  if (a5 > (uint64_t)(v14 - (void)v9) >> 3)
  {
    __srca = (char *)(*a1 + (v11 & 0xFFFFFFFFFFFFFFF8));
    unint64_t v15 = a5 + ((uint64_t)&v9[-v10] >> 3);
    if (v15 >> 61) {
      abort();
    }
    uint64_t v16 = v14 - v10;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v18 = operator new(8 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    size_t v41 = 8 * a5;
    uint64_t v56 = v11 >> 3;
    int8x16_t v42 = &v18[8 * v12];
    memcpy(v42, __src, v41);
    if ((void *)v10 == a2)
    {
      int8x16_t v43 = v42;
    }
    else
    {
      unint64_t v44 = v11 - 8;
      if ((unint64_t)(v11 - 8) >= 0x68)
      {
        unint64_t v46 = (v11 & 0xFFFFFFFFFFFFFFF8) + v10 - (void)&v18[v11 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = __srca;
        int8x16_t v43 = v42;
        if (v46 >= 0x20)
        {
          uint64_t v47 = (v44 >> 3) + 1;
          uint64_t v45 = &__srca[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          uint64_t v48 = 8 * v56 - 16;
          int8x8_t v49 = (long long *)(v10 + v48);
          int8x8_t v50 = &v18[v48];
          uint64_t v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v52 = *v49;
            *(v50 - 1) = *(v49 - 1);
            *int8x8_t v50 = v52;
            v49 -= 2;
            v50 -= 2;
            v51 -= 4;
          }
          while (v51);
          int8x16_t v43 = &v42[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
          if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v45 = __srca;
        int8x16_t v43 = v42;
      }
      do
      {
        uint64_t v53 = *((void *)v45 - 1);
        v45 -= 8;
        *((void *)v43 - 1) = v53;
        v43 -= 8;
      }
      while (v45 != (char *)v10);
    }
LABEL_46:
    uint64_t v54 = &v18[8 * v17];
    size_t v55 = v9 - __srca;
    if (v55) {
      memmove(&v42[v41], __srca, v55);
    }
    *a1 = (unint64_t)v43;
    a1[1] = (unint64_t)&v42[v41 + v55];
    a1[2] = (unint64_t)v54;
    if (v10)
    {
      operator delete((void *)v10);
    }
    return;
  }
  uint64_t v19 = (v9 - v13) >> 3;
  if (v19 >= a5)
  {
    int8x16_t v20 = &__src[8 * a5];
    int8x16_t v22 = (char *)a1[1];
    goto LABEL_18;
  }
  int8x16_t v20 = &__src[8 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(v9, &__src[8 * v19], a4 - v20);
  }
  int8x16_t v22 = &v9[v21];
  a1[1] = (unint64_t)&v9[v21];
  if (v9 - v13 >= 1)
  {
    uint64_t v12 = v11 >> 3;
LABEL_18:
    int8x16_t v23 = &v13[8 * a5];
    size_t v24 = v22 - v23;
    uint64_t v25 = (v22 - v23) >> 3;
    uint64_t v26 = &v22[-8 * a5];
    uint8x16_t v27 = v22;
    if (v26 < v9)
    {
      unint64_t v28 = (v11 & 0xFFFFFFFFFFFFFFF8) + v24;
      uint64_t v29 = (char *)(v28 + v10);
      unint64_t v30 = v28 + v10 + 8;
      if ((unint64_t)v9 > v30) {
        unint64_t v30 = (unint64_t)v9;
      }
      unint64_t v31 = v30 + ~v10 - v28;
      unint64_t v32 = v22 - v29;
      BOOL v33 = v31 >= 0x58 && v32 > 0x1F;
      uint8x16_t v27 = v22;
      if (!v33) {
        goto LABEL_57;
      }
      uint64_t v34 = (v31 >> 3) + 1;
      uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
      v26 += v35;
      int32x4_t v36 = v22 + 16;
      int32x4_t v37 = (long long *)(8 * v25 + 8 * v12 + v10 + 16);
      uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *int32x4_t v36 = v39;
        v36 += 2;
        v37 += 2;
        v38 -= 4;
      }
      while (v38);
      uint8x16_t v27 = &v22[v35];
      if (v34 != (v34 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          uint64_t v40 = *(void *)v26;
          v26 += 8;
          *(void *)uint8x16_t v27 = v40;
          v27 += 8;
        }
        while (v26 < v9);
      }
    }
    a1[1] = (unint64_t)v27;
    if (v22 != v23) {
      memmove(&v22[-8 * v25], v13, v24);
    }
    if (v20 != __src)
    {
      memmove(v13, __src, v20 - __src);
    }
  }
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

dispatch_queue_t ___ZL20resource_group_queuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.Metal.ResourceGroupQueue", 0);
  resource_group_queue(void)::_resourceGroupQueue = (uint64_t)result;
  return result;
}

void sub_2429B7204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  a59 = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)&a59 + *(void *)(a59 - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x24566EBA0](a15);
  std::istream::~istream();
  MEMORY[0x24566ED30](a18);
  os_unfair_lock_unlock(&stru_268D58D84);
  MEMORY[0x24566ED70](a21, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void sub_2429B73C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if ((a42 & 0x80000000) == 0) {
    JUMPOUT(0x2429B73D4);
  }
  JUMPOUT(0x2429B7388);
}

uint64_t ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE9getBundleEv_block_invoke()
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v0 = (void *)[MEMORY[0x263F086E0] allBundles];
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t result = [v0 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)v7;
    while (2)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v0);
        }
        uint64_t v5 = *(void **)(*((void *)&v6 + 1) + 8 * v4);
        uint64_t result = objc_msgSend((id)objc_msgSend(v5, "bundleIdentifier"), "containsString:", @"AGXMetal");
        if (result)
        {
          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBundle(void)::bundle = (uint64_t)v5;
          return result;
        }
        ++v4;
      }
      while (v2 != v4);
      uint64_t result = [v0 countByEnumeratingWithState:&v6 objects:v10 count:16];
      uint64_t v2 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createDynamicLibrary(void ***a1, uint64_t a2, void *a3, uint64_t a4, int a5, void *a6)
{
  uint64_t v26 = 0;
  uint8x16_t v27 = &v26;
  uint64_t v28 = 0x3052000000;
  uint64_t v29 = __Block_byref_object_copy_;
  unint64_t v30 = __Block_byref_object_dispose_;
  uint64_t v31 = 0;
  if (a6) {
    *a6 = 0;
  }
  int v21 = 8;
  int8x16_t v23 = 0;
  uint64_t v24 = 0;
  __p = 0;
  int8x16_t v20 = (void (**)(void **, const void **, size_t *))&unk_26F851C08;
  uint64_t v11 = (void *)[a3 driverCompilerOptions];
  if (objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v12 = 4; {
  else
  }
    int v12 = 0;
  unsigned int v25 = v12 & 0xFC0001FF | 0x200 | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v11, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v13 = 134218240; {
  else
  }
    int v13 = 512;
  unsigned int v25 = ((*(_DWORD *)(*(void *)(a4 + 808) + 7288) << 29) & 0x40000000 | v25 & 0x83FFFC7F | v13 | (*(unsigned __int8 *)(*(void *)(a4 + 808) + 7440) << 26)) ^ 0x40000000;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unint64_t v14 = *a1;
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 3221225472;
  v19[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createDynamicLibraryEPU21objcproto10MTLLibrary11objc_objectP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP7NSErrorU13block_pointerFvPU28objcproto17MTLDynamicLibrary11objc_objectSD_E_block_invoke;
  v19[3] = &unk_26516EDB0;
  v19[4] = a2;
  v19[5] = a4;
  v19[8] = a1;
  v19[9] = a6;
  v19[6] = 0;
  v19[7] = &v26;
  size_t v38 = 0;
  long long v39 = 0;
  v20[2]((void **)&v20, &v39, &v38);
  unint64_t v15 = dispatch_data_create(v39, v38, 0, 0);
  memset(&v32[1], 0, 7);
  uint64_t v16 = *v14;
  v32[0] = 1;
  uint64_t v33 = a2;
  int v34 = a5;
  int v35 = 0;
  uint64_t v36 = 0;
  int32x4_t v37 = v15;
  [v16 compileLibraryRequest:v32 completionHandler:v19];
  dispatch_release(v15);
  uint64_t v17 = v27[5];
  int8x16_t v20 = (void (**)(void **, const void **, size_t *))&unk_26F851C48;
  if (__p)
  {
    int8x16_t v23 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v26, 8);
  return v17;
}

void sub_2429B7DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createDynamicLibraryEPU21objcproto10MTLLibrary11objc_objectP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP7NSErrorU13block_pointerFvPU28objcproto17MTLDynamicLibrary11objc_objectSD_E_block_invoke(void *a1, unint64_t *a2)
{
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unint64_t v4 = *a2;
  uint64_t v5 = (__CFString *)a2[1];
  if (*a2) {
    goto LABEL_11;
  }
  if (!a2[3]
    || (*(void *)(*(void *)(a1[7] + 8) + 40) = [[AGXG17FamilyDynamicLibrary alloc] initWithLibrary:a1[4] binaryData:a2[3] device:a1[5] error:a1[9]]) == 0)
  {
    unint64_t v4 = 2;
LABEL_11:
    if (v5) {
      long long v9 = v5;
    }
    else {
      long long v9 = @"Internal error during function compilation";
    }
    uint64_t v13 = MEMORY[0x263EF8330];
    uint64_t v14 = 3221225472;
    unint64_t v15 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createDynamicLibraryEPU21objcproto10MTLLibrary11objc_objectP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP7NSErrorU13block_pointerFvPU28objcproto17MTLDynamicLibrary11objc_objectSD_E_block_invoke_2;
    uint64_t v16 = &unk_26516ECF0;
    uint64_t v10 = a1[9];
    uint64_t v17 = a1[6];
    uint64_t v18 = v10;
    if (v4 > 3) {
      uint64_t v11 = 5;
    }
    else {
      uint64_t v11 = qword_242EAA188[v4];
    }
    uint64_t v12 = objc_msgSend(NSDictionary, "dictionaryWithObject:forKey:", v9, *MEMORY[0x263F08320], v13, v14);
    v15((uint64_t)&v13, 0, 0, (uint64_t)(id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v11 userInfo:v12]);
    return;
  }
  long long v6 = (atomic_ullong *)(a1[5] + 816);
  atomic_fetch_or(v6, 0x4000000000uLL);
  atomic_fetch_or(v6 + 1, 0);
  if (a2[13])
  {
    long long v7 = (void *)[objc_alloc(MEMORY[0x263F12890]) initWithData:a2[13]];
    [*(id *)(*(void *)(a1[7] + 8) + 40) setDebugInstrumentationData:v7];
  }
  uint64_t v8 = a1[6];
  if (v8)
  {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, *(void *)(*(void *)(a1[7] + 8) + 40), 0);

    *(void *)(*(void *)(a1[7] + 8) + 40) = 0;
  }
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createDynamicLibraryEPU21objcproto10MTLLibrary11objc_objectP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP7NSErrorU13block_pointerFvPU28objcproto17MTLDynamicLibrary11objc_objectSD_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, a4);
  }
  **(void **)(a1 + 40) = a4;
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  long long v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *unint64_t v15 = v7;
    long long v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *long long v6 = v7;
    long long v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(void *a1)
{
  uint64_t v3 = (char *)a1[3];
  unint64_t v2 = a1[4];
  unint64_t v4 = v3;
  if ((unint64_t)v3 >= v2)
  {
    long long v6 = (char *)a1[2];
    uint64_t v7 = (v3 - v6) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      abort();
    }
    uint64_t v9 = v2 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v11 = operator new(4 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    BOOL v12 = &v11[4 * v7];
    unint64_t v13 = &v11[4 * v10];
    _DWORD *v12 = 96;
    uint64_t v5 = v12 + 1;
    if (v3 != v6)
    {
      unint64_t v14 = v3 - v6 - 4;
      if (v14 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v11) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v15 = (v14 >> 2) + 1;
      unint64_t v4 = &v3[-4 * (v15 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v16 = &v11[4 * v7 - 16];
      uint64_t v17 = v3 - 16;
      uint64_t v18 = v15 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v19 = *(_OWORD *)v17;
        *(v16 - 1) = *((_OWORD *)v17 - 1);
        *uint64_t v16 = v19;
        v16 -= 2;
        v17 -= 32;
        v18 -= 8;
      }
      while (v18);
      v12 -= v15 & 0x7FFFFFFFFFFFFFF8;
      if (v15 != (v15 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v20 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *--BOOL v12 = v20;
        }
        while (v4 != v6);
      }
    }
    a1[2] = v12;
    a1[3] = v5;
    a1[4] = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v3 = 96;
    uint64_t v5 = v3 + 4;
  }
  a1[3] = v5;
}

uint64_t ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void AGX::DynamicLibraryKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    unint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    unint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiunint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  long long v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x4F;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  long long v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      long long v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begiunint64_t n = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      BOOL v13 = operator new(4 * v12);
    }
    else
    {
      BOOL v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    uint64_t v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      long long v6 = &end[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      int v20 = &v13[4 * v9 - 16];
      int v21 = (long long *)(end - 4);
      uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v24 = *--v6;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void sub_2429B8930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE29addIntersectionFnSetToArchiveEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(void *result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (void *)result[5];
    if (v2 > 3) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = qword_242EAA188[v2];
    }
    uint64_t v5 = [NSDictionary dictionaryWithObject:a2[1] forKey:*MEMORY[0x263F08320]];
    uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v4 userInfo:v5];
    if (v3) {
      *uint64_t v3 = result;
    }
  }
  return result;
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBinaryLinkedIntersectionProgramVariants<true>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  v25[0] = a3;
  v25[1] = [a2 options];
  v25[2] = [a2 pipelineOptions];
  v25[3] = 0;
  v25[4] = a4;
  v25[5] = a5;
  __int16 v26 = 0;
  uint64_t v27 = 0;
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x3052000000;
  uint64_t v22 = __Block_byref_object_copy_;
  long long v23 = __Block_byref_object_dispose_;
  uint64_t v24 = 0;
  unint64_t v14 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke;
  block[3] = &unk_26516F130;
  block[4] = a3;
  void block[5] = &v19;
  dispatch_sync(v14, block);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 3221225472;
  v16[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2;
  v16[3] = &unk_26516ECA0;
  v16[7] = 0;
  v16[8] = a1;
  char v17 = a6;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a5;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 3221225472;
  v15[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_4;
  v15[3] = &unk_26516ECC8;
  v15[4] = a7;
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionProgramVariants_impl<true>(a1, (uint64_t)v25, a6, (os_unfair_lock_s *)v20[5], (uint64_t)v16, (uint64_t)v15);
  _Block_object_dispose(&v19, 8);
}

void sub_2429B8BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27addVisibleFunctionToArchiveEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivePP7NSError_block_invoke(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!*(void *)(a2 + 24))
  {
    uint64_t v4 = result;
    uint64_t v5 = (void *)result[6];
    if (a3 > 3) {
      uint64_t v6 = 5;
    }
    else {
      uint64_t v6 = qword_242EAA188[a3];
    }
    uint64_t v7 = [NSDictionary dictionaryWithObject:a4 forKey:*MEMORY[0x263F08320]];
    uint64_t result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v6 userInfo:v7];
    if (v5) {
      *uint64_t v5 = result;
    }
    *(unsigned char *)(*(void *)(v4[4] + 8) + 24) = 0;
  }
  return result;
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileVisibleFunction(id **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v22 = 8;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  __p = 0;
  uint64_t v21 = (void (**)(void **, const void **, size_t *))&unk_26F851C08;
  unint64_t v14 = (void *)[0 driverCompilerOptions];
  if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v15 = 4; {
  else
  }
    int v15 = 0;
  unsigned int v26 = v15 & 0xFC0001FF | 0x200 | ((unsigned __int16)objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue") << 10);
  if (objc_msgSend((id)objc_msgSend(v14, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v16 = 134218240; {
  else
  }
    int v16 = 512;
  unsigned int v26 = ((*(_DWORD *)(*(void *)(a4 + 808) + 7288) << 29) & 0x40000000 | v26 & 0x83FFFC7F | v16 | (*(unsigned __int8 *)(*(void *)(a4 + 808) + 7440) << 26)) ^ 0x40000000;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  char v17 = (void *)[MEMORY[0x263F12828] newVisibleRequestWithFunction:a3 descriptor:a2];
  [v17 setSync:a6 ^ 1u];
  [v17 setDestinationBinaryArchive:a5];
  unint64_t v18 = *a1;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 3221225472;
  v20[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22compileVisibleFunctionEP21MTLFunctionDescriptorP12_MTLFunctionP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebU13block_pointerFvPK21MTLBinaryRequestReply16MTLCompilerErrorP8NSStringE_block_invoke;
  v20[3] = &unk_26516ED40;
  v20[5] = a7;
  v20[6] = a1;
  v20[4] = a3;
  size_t v27 = 0;
  uint64_t v28 = 0;
  v21[2]((void **)&v21, &v28, &v27);
  uint64_t v19 = dispatch_data_create(v28, v27, 0, 0);
  [v17 setDriverKeyData:v19];
  memset(v29, 0, sizeof(v29));
  [v17 setVendorPluginFunctionId:v29];
  [*v18 compileFunctionRequest:v17 completionHandler:v20];
  dispatch_release(v19);

  uint64_t v21 = (void (**)(void **, const void **, size_t *))&unk_26F851C48;
  if (__p)
  {
    uint64_t v24 = __p;
    operator delete(__p);
  }
}

void sub_2429B8F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22compileVisibleFunctionEP21MTLFunctionDescriptorP12_MTLFunctionP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebU13block_pointerFvPK21MTLBinaryRequestReply16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (*(void *)(a2 + 104))
  {
    uint64_t v4 = (void *)[objc_alloc(MEMORY[0x263F12890]) initWithData:*(void *)(a2 + 104)];
    [*(id *)(a1 + 32) setDebugInstrumentationData:v4];
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v5();
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) vendorPrivate];
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = objc_alloc_init(AGXG17FamilyIntersectionProgram);
    [*(id *)(a1 + 32) setVendorPrivate:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
    [*(id *)(a1 + 32) setPrecompiledOutput:MEMORY[0x263EF8388]];
    unint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  }
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void ****)(a1 + 64);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  objc_msgSend(*(id *)(a1 + 32), "setOptions:", objc_msgSend(*(id *)(a1 + 32), "options") | 1);
  uint64_t v9 = (void *)[MEMORY[0x263F12828] newVisibleRequestWithFunction:*(void *)(a1 + 40) descriptor:*(void *)(a1 + 32)];
  [v9 setSync:*(unsigned char *)(a1 + 72) == 0];
  [v9 setDestinationBinaryArchive:*(void *)(a1 + 48)];
  [v9 setGpuCompilerSPIOptions:*(void *)(a1 + 56)];
  unint64_t v10 = *v8;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_3;
  v23[3] = &unk_26516EC78;
  v23[5] = v8;
  v23[6] = a3;
  v23[4] = a4;
  size_t v24 = 0;
  uint64_t v25 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v25, &v24);
  uint64_t v11 = dispatch_data_create(v25, v24, 0, 0);
  [v9 setDriverKeyData:v11];
  if ([v9 airScript])
  {
    unint64_t v12 = [v9 airScript];
    long long v33 = 0uLL;
    v34[0] = 0;
    *(void *)&long long v33 = dispatch_data_create_map(v12, (const void **)&v33 + 1, v34);
    uint64_t v13 = *((void *)&v33 + 1);
    uint64_t v14 = **((_DWORD **)&v33 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      char v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v33);
    long long v33 = *(_OWORD *)md;
    *(_OWORD *)int v34 = v30;
    [v9 setVendorPluginFunctionId:&v33];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v9;
  *(void *)c.wbuf = v23;
  if ([v9 function])
  {
    uint64_t v18 = mach_absolute_time();
    uint64_t v19 = *v10;
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v30 = ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v30 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v32 = v18;
    [v19 compileFunctionRequest:v9 completionHandler:md];
  }
  else
  {
    if ([v9 frameworkData] || objc_msgSend(v9, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v30 = ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v30 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(v9, "binaryArchives"), "count") == 0;
    uint64_t v21 = *v10;
    uint64_t v22 = [v9 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(v9, "pipelineCache"), objc_msgSend(v9, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(v9, "binaryArchives"), 0, objc_msgSend(v9, "pipelineCache"), objc_msgSend(v9, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429B9594(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionProgramVariants_impl<true>(uint64_t a1, uint64_t a2, int a3, os_unfair_lock_s *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  unint64_t v12 = *(void **)a2;
  uint64_t v41 = 0;
  int8x16_t v42 = &v41;
  uint64_t v43 = 0x8012000000;
  unint64_t v44 = __Block_byref_object_copy__1807;
  long long v50 = 0u;
  long long v51 = 0u;
  uint64_t v45 = __Block_byref_object_dispose__1808;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  dispatch_object_t object = dispatch_group_create();
  uint64_t v53 = a4;
  id v54 = v12;
  dispatch_group_enter((dispatch_group_t)v42[13]);
  BOOL v13 = (*(void *)(a2 + 8) & 1 | *(void *)(a2 + 40)) == 0;
  v38[0] = MEMORY[0x263EF8330];
  int v14 = !v13;
  v38[1] = 3221225472;
  v38[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke;
  v38[3] = &__block_descriptor_43_e411__UserIntersectionProgramKey____i_vector_unsigned_int__std::allocator_unsigned_int____I_I___compressed_pair_unsigned_int____std::allocator_unsigned_int____I____AGCUserIntersectionState_______b2b1b1b1b3b1b3b3b1b1b1b1b1b12_I___ProgramKeyDynamicLibrariesImpl_true___vector_MTLUINT256_t__std::allocator_MTLUINT256_t______________compressed_pair_MTLUINT256_t____std::allocator_MTLUINT256_t__________Q____32C___12__0i8l;
  char v39 = v14;
  v38[4] = a2;
  __int16 v40 = 0;
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2020000000;
  int v37 = 0;
  AGX::UserIntersectionProgramKey::UserIntersectionProgramKey((uint64_t)&v79, 0, v14, *(void **)(a2 + 24), *(void *)(a2 + 16), *(void **)(a2 + 56));
  unsigned int v83 = v83 & 0xFFFDFFFF | (v40 << 17);
  uint64_t v15 = *(void *)(a2 + 16);
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)v89, *(void **)(a2 + 56));
  uint64_t v30 = a6;
  int v16 = a4 + 2;
  long long v77 = v89[0];
  long long v78 = v89[1];
  BOOL v17 = *(void *)(a2 + 40) != 0;
  LOBYTE(v89[0]) = 0;
  uint64_t VariantEntry = AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a4 + 2, (uint64_t)&v79, v89, v15 & 0xFFCCFFFC, v17);
  uint64_t v19 = (NSObject **)VariantEntry;
  if (LOBYTE(v89[0]))
  {
    v74[0] = MEMORY[0x263EF8330];
    v74[1] = 3221225472;
    v74[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2;
    v74[3] = &unk_26516EFC8;
    v74[7] = a1;
    v74[8] = v16;
    v74[9] = v15 & 0xFFFFFFFFFFCCFFFCLL;
    long long v75 = v77;
    long long v76 = v78;
    v74[10] = a2;
    v74[11] = VariantEntry;
    v74[5] = v36;
    v74[6] = &v41;
    v74[4] = v38;
    (*(void (**)(uint64_t, void **, uint64_t, void *))(a5 + 16))(a5, &v79, VariantEntry, v74);
  }
  queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  uint64_t v56 = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_4;
  unint64_t v57 = &unk_26F851CB8;
  unint64_t v58 = v38;
  unint64_t v59 = &v41;
  int v60 = v16;
  uint64_t v61 = v19;
  int v62 = &unk_26F852F88;
  int v63 = v80;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v64 = 0;
  BOOL v20 = v81;
  int64_t v21 = v82 - (unsigned char *)v81;
  if (v82 != v81)
  {
    if (v21 < 0) {
      abort();
    }
    unint64_t v64 = operator new(v82 - (unsigned char *)v81);
    uint64_t v65 = v64;
    uint64_t v22 = (char *)v64 + 4 * (v21 >> 2);
    uint64_t v66 = v22;
    memcpy(v64, v20, v21);
    uint64_t v65 = v22;
  }
  int v62 = &unk_26F852F48;
  unsigned int v67 = v83;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  __p = 0;
  long long v23 = v84;
  int64_t v24 = v85 - (unsigned char *)v84;
  if (v85 != v84)
  {
    if (v24 < 0) {
      abort();
    }
    int v25 = a3;
    __p = operator new(v85 - (unsigned char *)v84);
    uint64_t v69 = __p;
    unsigned int v26 = (char *)__p + 32 * (v24 >> 5);
    uint64_t v70 = v26;
    memcpy(__p, v23, v24);
    uint64_t v69 = v26;
    a3 = v25;
  }
  long long v71 = v86;
  long long v72 = v87;
  int v62 = &unk_26F852FC8;
  uint64_t v73 = v88;
  size_t v27 = *v19;
  if (a3)
  {
    dispatch_group_notify(v27, queue, block);
  }
  else
  {
    dispatch_group_wait(v27, 0xFFFFFFFFFFFFFFFFLL);
    v56(block);
  }
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 3221225472;
  uint64_t v32 = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_1813;
  long long v33 = &unk_26516EFF0;
  uint64_t v34 = v30;
  uint64_t v35 = &v41;
  uint64_t v28 = v42[13];
  if (a3)
  {
    dispatch_group_notify(v28, queue, v31);
  }
  else
  {
    dispatch_group_wait(v28, 0xFFFFFFFFFFFFFFFFLL);
    v32((uint64_t)v31);
  }
  int v62 = &unk_26F852F48;
  if (__p)
  {
    uint64_t v69 = __p;
    operator delete(__p);
  }
  int v62 = &unk_26F852F88;
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
  uint64_t v79 = &unk_26F852F48;
  if (v84)
  {
    uint64_t v85 = v84;
    operator delete(v84);
  }
  uint64_t v79 = &unk_26F852F88;
  if (v81)
  {
    int64x2_t v82 = v81;
    operator delete(v81);
  }
  _Block_object_dispose(v36, 8);
  _Block_object_dispose(&v41, 8);
  dispatch_release(object);

  uint64_t v53 = 0;
}

void sub_2429B9B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey(v33);
  AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey((AGX::UserIntersectionProgramKey *)&STACK[0x268]);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a27, 8);
  AGX::HAL200::IntersectionFunctionVariantSet::~IntersectionFunctionVariantSet((AGX::HAL200::IntersectionFunctionVariantSet *)&a33);
  _Unwind_Resume(a1);
}

dispatch_group_t __Block_byref_object_copy__1807(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v4;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  dispatch_group_t result = dispatch_group_create();
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v6 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = a2[9];
  a2[9] = v6;
  uint64_t v7 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = a2[10];
  a2[10] = v7;
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = a2[11];
  a2[11] = v8;
  uint64_t v9 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = a2[12];
  *(void *)(a1 + 104) = result;
  a2[12] = v9;
  uint64_t v10 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = a2[13];
  a2[13] = v10;
  uint64_t v11 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = a2[14];
  a2[14] = v11;
  uint64_t v12 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = a2[15];
  a2[15] = v12;
  return result;
}

void __Block_byref_object_dispose__1808(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = AGX::UserIntersectionProgramKey::UserIntersectionProgramKey(a3, a2, *(unsigned __int8 *)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 24), *(void *)(*(void *)(a1 + 32) + 16), *(void **)(*(void *)(a1 + 32) + 56));
  *(_DWORD *)(result + 40) = *(_DWORD *)(result + 40) & 0xFFFDFFFF | (*(unsigned __int8 *)(a1 + 41) << 17);
  return result;
}

uint64_t AGX::UserIntersectionProgramKey::UserIntersectionProgramKey(uint64_t a1, char a2, int a3, void *a4, int a5, void *a6)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 8) = 7;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F852F48;
  *(_DWORD *)(a1 + 40) = 0;
  uint64_t v12 = (char **)(a1 + 48);
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 48), 0);
  if (a3) {
    int v13 = 0x40000;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 40) = v13 & 0xFFFFFFFC | a2 & 3 | *(_DWORD *)(a1 + 40) & 0xFFFBFFFC;
  *(void *)a1 = &unk_26F852FC8;
  *(void *)(a1 + 72) = a5 & 0xC0040000;
  CC_SHA256_Init(&c);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  int v14 = objc_msgSend((id)objc_msgSend(a6, "allKeys"), "sortedArrayUsingSelector:", sel_compare_);
  uint64_t v15 = [v14 countByEnumeratingWithState:&v22 objects:&v29 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v23 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        bzero(v21, 0x10uLL);
        v21[1] = objc_msgSend((id)objc_msgSend(a6, "objectForKeyedSubscript:", v18, objc_msgSend(v18, "hash")), "hash");
        CC_SHA256_Update(&c, v21, 0x10u);
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v22 objects:&v29 count:16];
    }
    while (v15);
  }
  *(_OWORD *)md = 0u;
  long long v28 = 0u;
  CC_SHA256_Final(md, &c);
  long long v19 = v28;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)md;
  *(_OWORD *)(a1 + 96) = v19;
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl(&v29, a4);
  if (v12 != &v29) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v12, v29, v30, (v30 - v29) >> 5);
  }
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  return a1;
}

void sub_2429B9F50(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 - 216);
  if (v4)
  {
    *(void *)(v2 - 208) = v4;
    operator delete(v4);
  }
  AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey(v1);
  _Unwind_Resume(a1);
}

double ReflectionKey::initGPUCompilerSPIOptionsHash(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a2)
  {
    CC_SHA256_Init(&c);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v4 = objc_msgSend((id)objc_msgSend(a2, "allKeys"), "sortedArrayUsingSelector:", sel_compare_);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v17 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v13 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          bzero(v11, 0x10uLL);
          v11[1] = objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", v9, objc_msgSend(v9, "hash")), "hash");
          CC_SHA256_Update(&c, v11, 0x10u);
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v17 count:16];
      }
      while (v6);
    }
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    CC_SHA256_Final((unsigned __int8 *)a1, &c);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  *a3 = 0;
  if ((a4 & 4) != 0 || a5) {
    operator new();
  }
  uint64_t v9 = a1 + 246;
  os_unfair_lock_lock(a1 + 246);
  uint64_t v10 = VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (!*(void *)v10)
  {
    long long v12 = dispatch_group_create();
    *(void *)uint64_t v10 = v12;
LABEL_10:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v10 + 40))
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;

    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(unsigned char *)(v10 + 40) = 0;
    long long v12 = *(NSObject **)v10;
    goto LABEL_10;
  }
  if ((*(void *)&a4 & 0x330003) != 0) {
    dispatch_group_enter(*(dispatch_group_t *)v10);
  }
LABEL_11:
  os_unfair_lock_unlock(v9);
  return v10;
}

void sub_2429BA280(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(a1[8], a1[9], *(NSObject **)(a3 + 8), (uint64_t)(a1 + 12), *(void **)(a1[10] + 32), *(void *)(a3 + 24));
  uint64_t v6 = a1[11];
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(__CFString **)(a3 + 32);
  long long v13 = v8;
  uint64_t v14 = v7;
  if (v7)
  {
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v9 = (*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
    if ((int)v9 >= 1)
    {
      AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v12);
      uint64_t v10 = *(void *)(a2 + 24);
      if (*(void *)(a2 + 32) != v10
        && AGCDeserializedReply::deserialize((AGCDeserializedReply *)v12, *(_DWORD **)v10, *(void *)(v10 + 8)))
      {
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newIntersectionProgramVariant();
      }
      long long v13 = @"Internal error during function compilation.";
      uint64_t v14 = 2;
      AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v12);
    }
    uint64_t v8 = v13;
    uint64_t v7 = v14;
  }
  uint64_t v11 = *(void **)(a3 + 16);
  *(void *)(v6 + 8) = 0;
  *(void *)(v6 + 16) = v7;

  *(void *)(v6 + 24) = [(__CFString *)v8 copy];
  if (*(void *)(v6 + 8))
  {

    *(void *)(v6 + 32) = v11;
  }
  else
  {
    *(unsigned char *)(v6 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = v9;
}

void sub_2429BA60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  uint64_t v14 = *(void **)(v11 - 224);
  uint64_t v13 = *(void *)(v11 - 216);
  uint64_t v15 = *(void **)(v9 + 16);
  *(void *)(v10 + 8) = 0;
  *(void *)(v10 + 16) = v13;

  *(void *)(v10 + 24) = [v14 copy];
  if (*(void *)(v10 + 8))
  {

    *(void *)(v10 + 32) = v15;
  }
  else
  {
    *(unsigned char *)(v10 + 40) = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)v10);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_4(void *a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  (*(void (**)(unsigned char *__return_ptr))(a1[4] + 16))(v27);
  uint64_t v2 = (os_unfair_lock_s *)a1[6];
  os_unfair_lock_lock(v2 + 246);
  uint64_t v3 = *(void *)(VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[]((uint64_t)v2, (uint64_t)v27)+ 8);
  os_unfair_lock_unlock(v2 + 246);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1[5] + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 64));
    *(void *)(v4 + 80) = v3;
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 64));
  }
  *(void *)size_t v27 = &unk_26F852F48;
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  *(void *)size_t v27 = &unk_26F852F88;
  if (*(void *)&v27[16])
  {
    *(void *)&v27[24] = *(void *)&v27[16];
    operator delete(*(void **)&v27[16]);
  }
  (*(void (**)(unsigned char *__return_ptr))(a1[4] + 16))(v27);
  uint64_t v5 = (os_unfair_lock_s *)a1[6];
  uint64_t v6 = v5 + 246;
  os_unfair_lock_lock(v5 + 246);
  uint64_t v7 = *(void *)(VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[]((uint64_t)v5, (uint64_t)v27)+ 8);
  os_unfair_lock_unlock(v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1[5] + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v8 + 64));
    *(void *)(v8 + 88) = v7;
    os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 64));
  }
  *(void *)size_t v27 = &unk_26F852F48;
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  *(void *)size_t v27 = &unk_26F852F88;
  if (*(void *)&v27[16])
  {
    *(void *)&v27[24] = *(void *)&v27[16];
    operator delete(*(void **)&v27[16]);
  }
  (*(void (**)(unsigned char *__return_ptr))(a1[4] + 16))(v27);
  uint64_t v9 = (os_unfair_lock_s *)a1[6];
  uint64_t v10 = v9 + 246;
  os_unfair_lock_lock(v9 + 246);
  uint64_t v11 = *(void *)(VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[]((uint64_t)v9, (uint64_t)v27)+ 8);
  os_unfair_lock_unlock(v10);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1[5] + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 64));
    *(void *)(v12 + 96) = v11;
    os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 64));
  }
  *(void *)size_t v27 = &unk_26F852F48;
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  *(void *)size_t v27 = &unk_26F852F88;
  if (*(void *)&v27[16])
  {
    *(void *)&v27[24] = *(void *)&v27[16];
    operator delete(*(void **)&v27[16]);
  }
  memset(v27, 0, 42);
  uint64_t v13 = a1[7];
  if (!*(unsigned char *)(v13 + 41))
  {
    BOOL v17 = 0;
    uint64_t v16 = (unsigned char *)a1[7];
    goto LABEL_35;
  }
  if (!*(void *)(v13 + 8))
  {
    BOOL v17 = *(void **)(v13 + 24);
    *(void *)&v27[16] = *(void *)(v13 + 16);
    *(void *)&v27[24] = v17;
    *(void *)(v13 + 24) = 0;
    uint64_t v16 = v27;
    uint64_t v18 = *(NSObject **)v13;
    if (!*(void *)v13) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
  uint64_t v14 = (os_unfair_lock_s *)a1[6];
  uint64_t v15 = v14 + 246;
  os_unfair_lock_lock(v14 + 246);
  uint64_t v16 = (unsigned char *)VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[]((uint64_t)v14, (uint64_t)(a1 + 8));
  if (*(void *)v16)
  {
    os_unfair_lock_unlock(v15);
    dispatch_group_wait(*(dispatch_group_t *)v16, 0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    long long v19 = dispatch_group_create();
    *(void *)uint64_t v16 = v19;
    dispatch_group_enter(v19);
    uint64_t v20 = *(void *)(v13 + 16);
    int64_t v21 = *(void **)(v13 + 24);
    *((void *)v16 + 1) = *(void *)(v13 + 8);
    *((void *)v16 + 2) = v20;

    *((void *)v16 + 3) = objc_msgSend(v21, "copy", *(_OWORD *)v27, *(void *)&v27[16], *(void *)&v27[24], *(void *)&v27[32], *(void *)&v27[40]);
    if (*((void *)v16 + 1))
    {

      *((void *)v16 + 4) = 0;
    }
    else
    {
      v16[40] = 0;
    }
    dispatch_group_leave(*(dispatch_group_t *)v16);
    *(void *)(v13 + 8) = 0;
    os_unfair_lock_unlock(v15);
  }
  BOOL v17 = 0;
  uint64_t v18 = *(NSObject **)v13;
  if (*(void *)v13) {
LABEL_31:
  }
    dispatch_release(v18);
LABEL_32:
  uint64_t v22 = *(void *)(v13 + 8);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }

  MEMORY[0x24566ED90](v13, 0x10A0C405D73F519);
LABEL_35:
  uint64_t v23 = *(void *)(a1[5] + 8);
  uint64_t v25 = *((void *)v16 + 1);
  uint64_t v24 = *((void *)v16 + 2);
  uint64_t v26 = *((void *)v16 + 3);
  os_unfair_lock_lock((os_unfair_lock_t)(v23 + 64));
  if (v24)
  {
    *(void *)(v23 + 48) = v24;
    *(void *)(v23 + 56) = v26;
  }
  else
  {
    *(void *)(v23 + 72) = v25;
  }
  dispatch_group_leave(*(dispatch_group_t *)(v23 + 104));
  os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 64));
}

void sub_2429BAAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2429BAB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey((AGX::UserIntersectionProgramKey *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createIntersectionProgramVariants_implILb1EEENSt3__19enable_ifIXT_EvE4typeERKNS5_29IntersectionDescriptorContextEbP31AGXG17FamilyIntersectionProgramU13block_pointerFvRKNS_26UserIntersectionProgramKeyEPKNS_19ProgramVariantEntryINS1_26IntersectionProgramVariantEEEU13block_pointerFvRK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEEEU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_1813(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, *(void *)(*(void *)(a1 + 40) + 8) + 48);
  }
  return result;
}

void AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey(AGX::UserIntersectionProgramKey *this)
{
  *(void *)this = &unk_26F852F48;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26F852F88;
  uint64_t v3 = (void *)*((void *)this + 2);
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void AGX::HAL200::IntersectionFunctionVariantSet::~IntersectionFunctionVariantSet(AGX::HAL200::IntersectionFunctionVariantSet *this)
{
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void AGX::Impl::UserIntersectionProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiunint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  long long v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x54;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)7,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *uint64_t v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void __destroy_helper_block_e8_64c38_ZTSN3AGX26UserIntersectionProgramKeyE(void *a1)
{
  a1[8] = &unk_26F852F48;
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  a1[8] = &unk_26F852F88;
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
}

__n128 __copy_helper_block_e8_64c38_ZTSN3AGX26UserIntersectionProgramKeyE(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = &unk_26F852F88;
  *(_DWORD *)(a1 + 72) = v4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v6 = *(unsigned char **)(a2 + 80);
  uint64_t v5 = *(unsigned char **)(a2 + 88);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      abort();
    }
    unint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 80) = v8;
    *(void *)(a1 + 88) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 96) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 88) = v9;
  }
  *(void *)(a1 + 64) = &unk_26F852F48;
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v11 = *(unsigned char **)(a2 + 112);
  uint64_t v10 = *(unsigned char **)(a2 + 120);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      abort();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 112) = v13;
    *(void *)(a1 + 120) = v13;
    uint64_t v14 = &v13[32 * (v12 >> 5)];
    *(void *)(a1 + 128) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 120) = v14;
  }
  *(void *)(a1 + 64) = &unk_26F852FC8;
  __n128 result = *(__n128 *)(a2 + 136);
  long long v16 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v16;
  *(__n128 *)(a1 + 136) = result;
  return result;
}

void sub_2429BB034(_Unwind_Exception *exception_object)
{
  *uint64_t v3 = v2;
  uint64_t v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 88) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 656);
  uint64_t v5 = *(void *)(a1 + 648);
  if (v4)
  {
    int v6 = *(_DWORD *)(a2 + 40);
    unint64_t v8 = *(unsigned char **)(a2 + 48);
    int64_t v7 = *(unsigned char **)(a2 + 56);
    uint64_t v9 = *(void *)(a2 + 72);
    uint64_t v10 = 0;
    size_t v11 = v7 - v8;
    if (v7 == v8)
    {
      int64_t v12 = (void *)(v5 + 80);
      while (1)
      {
        if (v6 == *((_DWORD *)v12 - 10) && v9 == *(v12 - 1))
        {
          BOOL v13 = *(void *)(a2 + 80) == *v12 && *(void *)(a2 + 88) == v12[1];
          BOOL v14 = v13 && *(void *)(a2 + 96) == v12[2];
          if (v14 && *(void *)(a2 + 104) == v12[3]) {
            break;
          }
        }
        ++v10;
        v12 += 14;
        if (v4 == v10) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      uint64_t v17 = (void *)(v5 + 80);
      while (1)
      {
        if (v6 == *((_DWORD *)v17 - 10))
        {
          uint64_t v18 = (const void *)*(v17 - 4);
          if (v11 == *(v17 - 3) - (void)v18 && !memcmp(v8, v18, v11) && v9 == *(v17 - 1))
          {
            BOOL v19 = *(void *)(a2 + 80) == *v17 && *(void *)(a2 + 88) == v17[1];
            BOOL v20 = v19 && *(void *)(a2 + 96) == v17[2];
            if (v20 && *(void *)(a2 + 104) == v17[3]) {
              break;
            }
          }
        }
        ++v10;
        v17 += 14;
        if (v4 == v10) {
          goto LABEL_37;
        }
      }
    }
    uint64_t v16 = v5 + 48 * v10;
  }
  else
  {
LABEL_37:
    uint64_t v22 = *(void *)(v5 + 640);
    if (v22)
    {
      int v23 = *(_DWORD *)(a2 + 40);
      uint64_t v25 = *(unsigned char **)(a2 + 48);
      uint64_t v24 = *(unsigned char **)(a2 + 56);
      uint64_t v26 = *(void *)(a2 + 72);
      unsigned int v27 = 1;
      size_t v28 = v24 - v25;
      if (v24 == v25)
      {
        while (1)
        {
          if (v23 == *(_DWORD *)(v22 + 40) && v26 == *(void *)(v22 + 72))
          {
            BOOL v45 = *(void *)(a2 + 80) == *(void *)(v22 + 80) && *(void *)(a2 + 88) == *(void *)(v22 + 88);
            BOOL v46 = v45 && *(void *)(a2 + 96) == *(void *)(v22 + 96);
            if (v46 && *(void *)(a2 + 104) == *(void *)(v22 + 104)) {
              break;
            }
          }
          if (v23 == *(_DWORD *)(v22 + 152) && v26 == *(void *)(v22 + 184))
          {
            BOOL v48 = *(void *)(a2 + 80) == *(void *)(v22 + 192) && *(void *)(a2 + 88) == *(void *)(v22 + 200);
            BOOL v49 = v48 && *(void *)(a2 + 96) == *(void *)(v22 + 208);
            if (v49 && *(void *)(a2 + 104) == *(void *)(v22 + 216)) {
              goto LABEL_157;
            }
          }
          if (v23 == *(_DWORD *)(v22 + 264) && v26 == *(void *)(v22 + 296))
          {
            BOOL v51 = *(void *)(a2 + 80) == *(void *)(v22 + 304) && *(void *)(a2 + 88) == *(void *)(v22 + 312);
            BOOL v52 = v51 && *(void *)(a2 + 96) == *(void *)(v22 + 320);
            if (v52 && *(void *)(a2 + 104) == *(void *)(v22 + 328))
            {
LABEL_156:
              unsigned int v27 = 2;
              goto LABEL_157;
            }
          }
          if (v23 == *(_DWORD *)(v22 + 376) && v26 == *(void *)(v22 + 408))
          {
            BOOL v54 = *(void *)(a2 + 80) == *(void *)(v22 + 416) && *(void *)(a2 + 88) == *(void *)(v22 + 424);
            BOOL v55 = v54 && *(void *)(a2 + 96) == *(void *)(v22 + 432);
            if (v55 && *(void *)(a2 + 104) == *(void *)(v22 + 440))
            {
LABEL_149:
              unsigned int v27 = 3;
              goto LABEL_157;
            }
          }
          uint64_t v22 = *(void *)(v22 + 640);
          if (!v22) {
            goto LABEL_150;
          }
        }
      }
      else
      {
        while (1)
        {
          if (v23 == *(_DWORD *)(v22 + 40))
          {
            uint64_t v29 = *(const void **)(v22 + 48);
            if (v28 == *(void *)(v22 + 56) - (void)v29 && !memcmp(v25, v29, v28) && v26 == *(void *)(v22 + 72))
            {
              BOOL v30 = *(void *)(a2 + 80) == *(void *)(v22 + 80) && *(void *)(a2 + 88) == *(void *)(v22 + 88);
              BOOL v31 = v30 && *(void *)(a2 + 96) == *(void *)(v22 + 96);
              if (v31 && *(void *)(a2 + 104) == *(void *)(v22 + 104)) {
                break;
              }
            }
          }
          if (v23 == *(_DWORD *)(v22 + 152))
          {
            long long v33 = *(const void **)(v22 + 160);
            if (v28 == *(void *)(v22 + 168) - (void)v33 && !memcmp(v25, v33, v28) && v26 == *(void *)(v22 + 184))
            {
              BOOL v34 = *(void *)(a2 + 80) == *(void *)(v22 + 192) && *(void *)(a2 + 88) == *(void *)(v22 + 200);
              BOOL v35 = v34 && *(void *)(a2 + 96) == *(void *)(v22 + 208);
              if (v35 && *(void *)(a2 + 104) == *(void *)(v22 + 216)) {
                goto LABEL_157;
              }
            }
          }
          if (v23 == *(_DWORD *)(v22 + 264))
          {
            int v37 = *(const void **)(v22 + 272);
            if (v28 == *(void *)(v22 + 280) - (void)v37 && !memcmp(v25, v37, v28) && v26 == *(void *)(v22 + 296))
            {
              BOOL v38 = *(void *)(a2 + 80) == *(void *)(v22 + 304) && *(void *)(a2 + 88) == *(void *)(v22 + 312);
              BOOL v39 = v38 && *(void *)(a2 + 96) == *(void *)(v22 + 320);
              if (v39 && *(void *)(a2 + 104) == *(void *)(v22 + 328)) {
                goto LABEL_156;
              }
            }
          }
          if (v23 == *(_DWORD *)(v22 + 376))
          {
            uint64_t v41 = *(const void **)(v22 + 384);
            if (v28 == *(void *)(v22 + 392) - (void)v41 && !memcmp(v25, v41, v28) && v26 == *(void *)(v22 + 408))
            {
              BOOL v42 = *(void *)(a2 + 80) == *(void *)(v22 + 416) && *(void *)(a2 + 88) == *(void *)(v22 + 424);
              BOOL v43 = v42 && *(void *)(a2 + 96) == *(void *)(v22 + 432);
              if (v43 && *(void *)(a2 + 104) == *(void *)(v22 + 440)) {
                goto LABEL_149;
              }
            }
          }
          uint64_t v22 = *(void *)(v22 + 640);
          if (!v22) {
            goto LABEL_150;
          }
        }
      }
      unsigned int v27 = 0;
LABEL_157:
      uint64_t v16 = v22 + 48 * v27;
    }
    else
    {
LABEL_150:
      if (v4 == 4) {
        operator new();
      }
      uint64_t v57 = v5 + 112 * v4;
      *(_DWORD *)(v57 + 8) = *(_DWORD *)(a2 + 8);
      if (v57 != a2)
      {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v57 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
        *(_DWORD *)(v57 + 40) = *(_DWORD *)(a2 + 40);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v57 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
      }
      uint64_t v58 = v5 + 112 * v4;
      long long v59 = *(_OWORD *)(a2 + 72);
      long long v60 = *(_OWORD *)(a2 + 88);
      *(void *)(v58 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(v58 + 88) = v60;
      *(_OWORD *)(v58 + 72) = v59;
      uint64_t v61 = *(void *)(a1 + 648);
      unsigned int v62 = *(_DWORD *)(a1 + 656);
      *(_DWORD *)(a1 + 656) = v62 + 1;
      uint64_t v16 = v61 + 48 * v62;
    }
  }
  return v16 + 448;
}

void sub_2429BB50C(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B0C4051A67AE5);
  _Unwind_Resume(a1);
}

uint64_t AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>::~ProgramVariantEntry(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return a1;
}

uint64_t VectorMap<AGX::UserIntersectionProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::IntersectionProgramVariant>,4u>::Chunk::Chunk(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_26F852F48;
  *(_DWORD *)(a1 + 40) = 0;
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 48), 0);
  *(void *)a1 = &unk_26F852FC8;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 120) = 7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 112) = &unk_26F852F48;
  *(_DWORD *)(a1 + 152) = 0;
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 160), 0);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 112) = &unk_26F852FC8;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 232) = 7;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 224) = &unk_26F852F48;
  *(_DWORD *)(a1 + 264) = 0;
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 272), 0);
  *(void *)(a1 + 224) = &unk_26F852FC8;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 344) = 7;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = &unk_26F852F48;
  *(_DWORD *)(a1 + 376) = 0;
  ProgramKeyDynamicLibrariesImpl<true>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 384), 0);
  *(void *)(a1 + 336) = &unk_26F852FC8;
  *(void *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 522) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 570) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 618) = 0u;
  return a1;
}

void sub_2429BB7AC(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v2 = &unk_26F852F88;
  int v6 = *v3;
  if (*v3)
  {
    *((void *)v2 + 3) = v6;
    operator delete(v6);
  }
  if ((v4 & 1) == 0)
  {
    do
    {
      uint64_t v2 = (AGX::UserIntersectionProgramKey *)((char *)v2 - 112);
      AGX::UserIntersectionProgramKey::~UserIntersectionProgramKey(v2);
    }
    while (v2 != v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  int64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      abort();
    uint64_t v13 = 4 * v12;
    __n128 result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    *int64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    BOOL v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    BOOL v19 = v9;
    __srCC_SHA256_CTX c = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void *std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  int64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 5)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 59) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 59) {
LABEL_22:
    }
      abort();
    uint64_t v13 = 4 * v12;
    __n128 result = operator new(32 * v12);
    uint64_t v9 = (char *)result;
    *int64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 5;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    BOOL v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[32 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    BOOL v19 = v9;
    __srCC_SHA256_CTX c = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    locunint64_t k = (os_unfair_lock_s *)(a1 + 984);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 984));
    uint64_t v13 = *(void **)(a1 + 944);
    uint64_t v14 = *(unsigned int *)(a1 + 952);
    uint64_t v15 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v13, *(_DWORD *)(a1 + 952), (void *)a4);
    uint64_t v16 = (void *)v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *uint64_t v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v14 == 4) {
        operator new();
      }
      uint64_t v18 = &v13[4 * v14];
      long long v19 = *(_OWORD *)(a4 + 16);
      _OWORD *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      uint64_t v20 = *(void *)(a1 + 944);
      unsigned int v21 = *(_DWORD *)(a1 + 952);
      *(_DWORD *)(a1 + 952) = v21 + 1;
      uint64_t v16 = (void *)(v20 + 24 * v21 + 128);
      uint64_t v17 = *(void *)(v20 + 24 * v21 + 136);
      if (a6) {
        goto LABEL_4;
      }
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v22 = v16[2];
      if (v22) {
        dispatch_release(v22);
      }
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2016))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      BOOL v30 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:6 options:a2 | 0x8000];
      int v23 = (void *)[v30 arguments];
      uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v33 != v25) {
              objc_enumerationMutation(v23);
            }
            unsigned int v27 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (![v27 type]
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              size_t v28 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              uint64_t v29 = v28[2];
              v28[2] = 0;
              *(void *)(a1 + 8 * [v27 index] + 992) = v29;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v24);
      }

      *(unsigned char *)(a1 + 2016) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429BBD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

uint64_t VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(void *a1, int a2, void *a3)
{
  if (a2)
  {
    uint64_t v3 = 0;
    char v4 = a1;
    while (1)
    {
      BOOL v5 = *a3 == *v4 && a3[1] == v4[1];
      BOOL v6 = v5 && a3[2] == v4[2];
      if (v6 && a3[3] == v4[3]) {
        return (uint64_t)&a1[3 * v3 + 16];
      }
      ++v3;
      v4 += 4;
      if (a2 == v3) {
        goto LABEL_14;
      }
    }
  }
  else
  {
LABEL_14:
    uint64_t v8 = (void *)a1[28];
    if (v8)
    {
      unsigned int v9 = 1;
      while (1)
      {
        if (*a3 == *v8 && a3[1] == v8[1] && a3[2] == v8[2] && a3[3] == v8[3])
        {
          unsigned int v9 = 0;
          return (uint64_t)&v8[3 * v9 + 16];
        }
        if (*a3 == v8[4] && a3[1] == v8[5] && a3[2] == v8[6] && a3[3] == v8[7]) {
          return (uint64_t)&v8[3 * v9 + 16];
        }
        if (*a3 == v8[8] && a3[1] == v8[9] && a3[2] == v8[10] && a3[3] == v8[11])
        {
          unsigned int v9 = 2;
          return (uint64_t)&v8[3 * v9 + 16];
        }
        BOOL v19 = *a3 == v8[12] && a3[1] == v8[13];
        BOOL v20 = v19 && a3[2] == v8[14];
        if (v20 && a3[3] == v8[15]) {
          break;
        }
        uint64_t v8 = (void *)v8[28];
        if (!v8) {
          return 0;
        }
      }
      unsigned int v9 = 3;
      return (uint64_t)&v8[3 * v9 + 16];
    }
    else
    {
      return 0;
    }
  }
}

void AGCDeserializedReply::AGCDeserializedReply(AGCDeserializedReply *this)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  *((void *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((unsigned char *)this + 80) = 0;
  *((void *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((unsigned char *)this + 160) = 0;
  *((void *)this + 26) = 0;
  *((_DWORD *)this + 54) = 0;
  *((unsigned char *)this + 200) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  *((unsigned char *)this + 240) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 36) = 0;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 41) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((unsigned char *)this + 320) = 0;
  *((void *)this + 46) = 0;
  *((_DWORD *)this + 94) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((unsigned char *)this + 360) = 0;
  *((void *)this + 51) = 0;
  *((_DWORD *)this + 104) = 0;
  *((_OWORD *)this + 24) = 0u;
  *((unsigned char *)this + 400) = 0;
  *((void *)this + 56) = 0;
  *((_DWORD *)this + 114) = 0;
  *((unsigned char *)this + 440) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((void *)this + 61) = 0;
  *((_DWORD *)this + 124) = 0;
  *((unsigned char *)this + 480) = 0;
  *((_OWORD *)this + 29) = 0u;
  *((void *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((unsigned char *)this + 520) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((void *)this + 71) = 0;
  *((_DWORD *)this + 144) = 0;
  *((unsigned char *)this + 560) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((void *)this + 76) = 0;
  *((_DWORD *)this + 154) = 0;
  *((unsigned char *)this + 600) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((void *)this + 81) = 0;
  *((_DWORD *)this + 164) = 0;
  *((unsigned char *)this + 640) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((void *)this + 86) = 0;
  *((_DWORD *)this + 174) = 0;
  *((unsigned char *)this + 680) = 0;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((void *)this + 91) = 0;
  *((_DWORD *)this + 184) = 0;
  *((unsigned char *)this + 720) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((void *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((unsigned char *)this + 760) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((void *)this + 101) = 0;
  *((_DWORD *)this + 204) = 0;
  *((unsigned char *)this + 800) = 0;
  *((_OWORD *)this + 49) = 0u;
  *((void *)this + 106) = 0;
  *((_DWORD *)this + 214) = 0;
  *((unsigned char *)this + 840) = 0;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((void *)this + 111) = 0;
  *((_DWORD *)this + 224) = 0;
  *((unsigned char *)this + 880) = 0;
  *((_OWORD *)this + 54) = 0u;
  *((void *)this + 116) = 0;
  *((_DWORD *)this + 234) = 0;
  *((unsigned char *)this + 920) = 0;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((void *)this + 121) = 0;
  *((_DWORD *)this + 244) = 0;
  *((unsigned char *)this + 960) = 0;
  *((_OWORD *)this + 59) = 0u;
  *((void *)this + 126) = 0;
  *((_DWORD *)this + 254) = 0;
  *((unsigned char *)this + 1000) = 0;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((void *)this + 131) = 0;
  *((_DWORD *)this + 264) = 0;
  *((unsigned char *)this + 1040) = 0;
  *((_OWORD *)this + 64) = 0u;
  *((void *)this + 136) = 0;
  *((_DWORD *)this + 274) = 0;
  *((unsigned char *)this + 1080) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((void *)this + 141) = 0;
  *((_DWORD *)this + 284) = 0;
  *((unsigned char *)this + 1120) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((unsigned char *)this + 1144) = 0;
  *((void *)this + 147) = 0;
  *((_DWORD *)this + 296) = 0;
  *((unsigned char *)this + 1168) = 0;
  *((_OWORD *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 306) = 1065353216;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_DWORD *)this + 316) = 1065353216;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_DWORD *)this + 326) = 1065353216;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_DWORD *)this + 336) = 1065353216;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_DWORD *)this + 346) = 1065353216;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_DWORD *)this + 356) = 1065353216;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *((_DWORD *)this + 366) = 1065353216;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_DWORD *)this + 376) = 1065353216;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *((_DWORD *)this + 386) = 1065353216;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_DWORD *)this + 396) = 1065353216;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *((_DWORD *)this + 406) = 1065353216;
  *((_OWORD *)this + 103) = 0u;
  *((_OWORD *)this + 102) = 0u;
  *((_DWORD *)this + 416) = 1065353216;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *((_DWORD *)this + 426) = 1065353216;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *((_DWORD *)this + 436) = 1065353216;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *((_DWORD *)this + 446) = 1065353216;
  *((_DWORD *)this + 452) = 0;
  *((_OWORD *)this + 112) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1848) = xmmword_26516EA98;
  *(_OWORD *)((char *)this + 1864) = *(_OWORD *)&off_26516EAA8;
  *(_OWORD *)((char *)this + 1928) = xmmword_26516EAE8;
  *(_OWORD *)((char *)this + 1944) = *(_OWORD *)off_26516EAF8;
  *(_OWORD *)((char *)this + 1896) = *(_OWORD *)&off_26516EAC8;
  *(_OWORD *)((char *)this + 1912) = xmmword_26516EAD8;
  *(_OWORD *)((char *)this + 1880) = xmmword_26516EAB8;
  char v75 = 6;
  strcpy((char *)v74, "__TEXT");
  int v76 = 0;
  char v78 = 12;
  strcpy((char *)v77, "__TEXT_CONST");
  int v79 = 1;
  uint64_t v2 = (const char *)*((void *)this + 233);
  size_t v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  char v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    BOOL v5 = operator new(v6 + 1);
    v80[1] = v4;
    unint64_t v81 = v7 | 0x8000000000000000;
    v80[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v81) = v3;
  BOOL v5 = v80;
  if (v3) {
LABEL_8:
  }
    memmove(v5, v2, (size_t)v4);
  *((unsigned char *)v4 + (void)v5) = 0;
  int v82 = 2;
  uint64_t v8 = v83;
  unsigned int v9 = (const char *)*((void *)this + 234);
  size_t v10 = strlen(v9);
  if (v10 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  BOOL v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    uint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17) {
      uint64_t v12 = v10 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v8 = operator new(v12 + 1);
    v83[1] = v11;
    unint64_t v84 = v13 | 0x8000000000000000;
    v83[0] = v8;
    goto LABEL_16;
  }
  HIBYTE(v84) = v10;
  if (v10) {
LABEL_16:
  }
    memmove(v8, v9, (size_t)v11);
  *((unsigned char *)v11 + (void)v8) = 0;
  int v85 = 3;
  uint64_t v14 = v86;
  uint64_t v15 = (const char *)*((void *)this + 235);
  size_t v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17) {
      uint64_t v18 = v16 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v14 = operator new(v18 + 1);
    v86[1] = v17;
    unint64_t v87 = v19 | 0x8000000000000000;
    v86[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v87) = v16;
  if (v16) {
LABEL_24:
  }
    memmove(v14, v15, (size_t)v17);
  *((unsigned char *)v17 + (void)v14) = 0;
  int v88 = 4;
  BOOL v20 = v89;
  unsigned int v21 = (const char *)*((void *)this + 236);
  size_t v22 = strlen(v21);
  if (v22 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  int v23 = (void *)v22;
  if (v22 >= 0x17)
  {
    uint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v24 = v22 | 7;
    }
    uint64_t v25 = v24 + 1;
    BOOL v20 = operator new(v24 + 1);
    v89[1] = v23;
    unint64_t v90 = v25 | 0x8000000000000000;
    v89[0] = v20;
    goto LABEL_32;
  }
  HIBYTE(v90) = v22;
  if (v22) {
LABEL_32:
  }
    memmove(v20, v21, (size_t)v23);
  *((unsigned char *)v23 + (void)v20) = 0;
  int v91 = 5;
  uint64_t v26 = v92;
  unsigned int v27 = (const char *)*((void *)this + 237);
  size_t v28 = strlen(v27);
  if (v28 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    uint64_t v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v30 = v28 | 7;
    }
    uint64_t v31 = v30 + 1;
    uint64_t v26 = operator new(v30 + 1);
    v92[1] = v29;
    unint64_t v93 = v31 | 0x8000000000000000;
    v92[0] = v26;
    goto LABEL_40;
  }
  HIBYTE(v93) = v28;
  if (v28) {
LABEL_40:
  }
    memmove(v26, v27, (size_t)v29);
  *((unsigned char *)v29 + (void)v26) = 0;
  int v94 = 6;
  long long v32 = v95;
  long long v33 = (const char *)*((void *)this + 238);
  size_t v34 = strlen(v33);
  if (v34 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  long long v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    uint64_t v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17) {
      uint64_t v36 = v34 | 7;
    }
    uint64_t v37 = v36 + 1;
    long long v32 = operator new(v36 + 1);
    v95[1] = v35;
    unint64_t v96 = v37 | 0x8000000000000000;
    v95[0] = v32;
    goto LABEL_48;
  }
  HIBYTE(v96) = v34;
  if (v34) {
LABEL_48:
  }
    memmove(v32, v33, (size_t)v35);
  *((unsigned char *)v35 + (void)v32) = 0;
  int v97 = 7;
  BOOL v38 = v98;
  BOOL v39 = (const char *)*((void *)this + 239);
  size_t v40 = strlen(v39);
  if (v40 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    uint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17) {
      uint64_t v42 = v40 | 7;
    }
    uint64_t v43 = v42 + 1;
    BOOL v38 = operator new(v42 + 1);
    v98[1] = v41;
    unint64_t v99 = v43 | 0x8000000000000000;
    v98[0] = v38;
    goto LABEL_56;
  }
  HIBYTE(v99) = v40;
  if (v40) {
LABEL_56:
  }
    memmove(v38, v39, (size_t)v41);
  *((unsigned char *)v41 + (void)v38) = 0;
  int v100 = 8;
  unint64_t v44 = v101;
  BOOL v45 = (const char *)*((void *)this + 240);
  size_t v46 = strlen(v45);
  if (v46 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    uint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v48 = v46 | 7;
    }
    uint64_t v49 = v48 + 1;
    unint64_t v44 = operator new(v48 + 1);
    v101[1] = v47;
    unint64_t v102 = v49 | 0x8000000000000000;
    v101[0] = v44;
    goto LABEL_64;
  }
  HIBYTE(v102) = v46;
  if (v46) {
LABEL_64:
  }
    memmove(v44, v45, (size_t)v47);
  *((unsigned char *)v47 + (void)v44) = 0;
  int v103 = 9;
  long long v50 = v104;
  BOOL v51 = (const char *)*((void *)this + 241);
  size_t v52 = strlen(v51);
  if (v52 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v53 = (void *)v52;
  if (v52 >= 0x17)
  {
    uint64_t v54 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17) {
      uint64_t v54 = v52 | 7;
    }
    uint64_t v55 = v54 + 1;
    long long v50 = operator new(v54 + 1);
    v104[1] = v53;
    unint64_t v105 = v55 | 0x8000000000000000;
    v104[0] = v50;
    goto LABEL_72;
  }
  HIBYTE(v105) = v52;
  if (v52) {
LABEL_72:
  }
    memmove(v50, v51, (size_t)v53);
  *((unsigned char *)v53 + (void)v50) = 0;
  int v106 = 10;
  uint64_t v56 = (const char *)*((void *)this + 242);
  size_t v57 = strlen(v56);
  if (v57 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    uint64_t v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17) {
      uint64_t v60 = v57 | 7;
    }
    uint64_t v61 = v60 + 1;
    long long v59 = operator new(v60 + 1);
    v107[1] = v58;
    unint64_t v108 = v61 | 0x8000000000000000;
    v107[0] = v59;
    goto LABEL_80;
  }
  HIBYTE(v108) = v57;
  long long v59 = v107;
  if (v57) {
LABEL_80:
  }
    memmove(v59, v56, (size_t)v58);
  *((unsigned char *)v58 + (void)v59) = 0;
  int v109 = 11;
  unsigned int v62 = (const char *)*((void *)this + 243);
  size_t v63 = strlen(v62);
  if (v63 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  unint64_t v64 = (void *)v63;
  if (v63 >= 0x17)
  {
    uint64_t v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17) {
      uint64_t v66 = v63 | 7;
    }
    uint64_t v67 = v66 + 1;
    uint64_t v65 = operator new(v66 + 1);
    v110[1] = v64;
    unint64_t v111 = v67 | 0x8000000000000000;
    v110[0] = v65;
    goto LABEL_88;
  }
  HIBYTE(v111) = v63;
  uint64_t v65 = v110;
  if (v63) {
LABEL_88:
  }
    memmove(v65, v62, (size_t)v64);
  *((unsigned char *)v64 + (void)v65) = 0;
  int v112 = 12;
  unint64_t v68 = (const char *)*((void *)this + 244);
  size_t v69 = strlen(v68);
  if (v69 > 0x7FFFFFFFFFFFFFF7) {
    abort();
  }
  uint64_t v70 = (void *)v69;
  if (v69 >= 0x17)
  {
    uint64_t v72 = (v69 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v69 | 7) != 0x17) {
      uint64_t v72 = v69 | 7;
    }
    uint64_t v73 = v72 + 1;
    long long v71 = operator new(v72 + 1);
    unint64_t v114 = v73 | 0x8000000000000000;
    __p[0] = v71;
    __p[1] = v70;
    goto LABEL_96;
  }
  HIBYTE(v114) = v69;
  long long v71 = __p;
  if (v69) {
LABEL_96:
  }
    memmove(v71, v68, (size_t)v70);
  *((unsigned char *)v70 + (void)v71) = 0;
  int v115 = 13;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1976) = 0u;
  *((_DWORD *)this + 498) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v74, (uint64_t)v74);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v77, (uint64_t)v77);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v80, (uint64_t)v80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v83, (uint64_t)v83);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v86, (uint64_t)v86);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v89, (uint64_t)v89);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v92, (uint64_t)v92);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v95, (uint64_t)v95);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v98, (uint64_t)v98);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v101, (uint64_t)v101);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v104, (uint64_t)v104);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v107, (uint64_t)v107);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)v110, (uint64_t)v110);
  std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>((uint64_t)this + 1960, (uint64_t)__p, (uint64_t)__p);
  if (SHIBYTE(v114) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
LABEL_99:
      if ((SHIBYTE(v108) & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_114;
    }
  }
  else if ((SHIBYTE(v111) & 0x80000000) == 0)
  {
    goto LABEL_99;
  }
  operator delete(v110[0]);
  if ((SHIBYTE(v108) & 0x80000000) == 0)
  {
LABEL_100:
    if ((SHIBYTE(v105) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_115;
  }
LABEL_114:
  operator delete(v107[0]);
  if ((SHIBYTE(v105) & 0x80000000) == 0)
  {
LABEL_101:
    if ((SHIBYTE(v102) & 0x80000000) == 0) {
      goto LABEL_102;
    }
    goto LABEL_116;
  }
LABEL_115:
  operator delete(v104[0]);
  if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
LABEL_102:
    if ((SHIBYTE(v99) & 0x80000000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_117;
  }
LABEL_116:
  operator delete(v101[0]);
  if ((SHIBYTE(v99) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v96) & 0x80000000) == 0) {
      goto LABEL_104;
    }
    goto LABEL_118;
  }
LABEL_117:
  operator delete(v98[0]);
  if ((SHIBYTE(v96) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v93) & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_119;
  }
LABEL_118:
  operator delete(v95[0]);
  if ((SHIBYTE(v93) & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v90) & 0x80000000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_120;
  }
LABEL_119:
  operator delete(v92[0]);
  if ((SHIBYTE(v90) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v87) & 0x80000000) == 0) {
      goto LABEL_107;
    }
    goto LABEL_121;
  }
LABEL_120:
  operator delete(v89[0]);
  if ((SHIBYTE(v87) & 0x80000000) == 0)
  {
LABEL_107:
    if ((SHIBYTE(v84) & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v86[0]);
  if ((SHIBYTE(v84) & 0x80000000) == 0)
  {
LABEL_108:
    if ((SHIBYTE(v81) & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_123;
  }
LABEL_122:
  operator delete(v83[0]);
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_109:
    if ((v78 & 0x80000000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_124;
  }
LABEL_123:
  operator delete(v80[0]);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_110:
    if ((v75 & 0x80000000) == 0) {
      return;
    }
LABEL_125:
    operator delete(v74[0]);
    return;
  }
LABEL_124:
  operator delete(v77[0]);
  if (v75 < 0) {
    goto LABEL_125;
  }
}

void sub_2429BCB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  uint64_t v26 = v25;
  while (1)
  {
    if (*((char *)v26 - 9) < 0) {
      operator delete(*(v26 - 4));
    }
    v26 -= 4;
    if (v26 == &__p)
    {
      unsigned int v27 = *(void **)(v23 + 1824);
      if (v27)
      {
        *(void *)(v23 + 1832) = v27;
        operator delete(v27);
      }
      std::unordered_map<unsigned int,std::string>::~unordered_map[abi:nn180100](a11);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1712);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 480);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1632);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 400);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1552);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24 + 320);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1472);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a12);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1392);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a13);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1312);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a14);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v23 + 1232);
      std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v24);
      _Unwind_Resume(a1);
    }
  }
}

BOOL AGCDeserializedReply::deserialize(AGCDeserializedReply *this, _DWORD *a2, uint64_t a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  if (*a2 != -17958193) {
    return 0;
  }
  int v172 = a2[4];
  if (v172)
  {
    int v4 = 0;
    BOOL v5 = a2 + 8;
    unint64_t v182 = (std::vector<unsigned int> *)((char *)this + 1824);
    int64x2_t v166 = (char *)this + 1880;
    unint64_t v167 = (char *)this + 1864;
    uint64_t v168 = (char *)this + 1856;
    unint64_t v173 = (char *)this + 1912;
    unint64_t v177 = (char *)this + 1904;
    unint64_t v180 = (void *)((char *)this + 1960);
    int8x16_t v181 = (void *)((char *)this + 1768);
    std::string::size_type v176 = *MEMORY[0x263F8C2B8];
    std::string::size_type v174 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    std::string::size_type v175 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v6 = (uint64_t *)MEMORY[0x263F8C0F8];
    while (1)
    {
      int v7 = *v5;
      int v178 = v4;
      int64x2_t v179 = v5;
      if (*v5 == 2)
      {
        int v12 = v5[3];
        uint64_t v13 = *(void *)this + v5[4];
        uint64_t v14 = (unsigned int *)(*(void *)this + v5[2]);
        *((void *)this + 224) = v14;
        *((void *)this + 225) = v13;
        *((_DWORD *)this + 452) = v12;
        int v15 = v5[3];
        if (!v15) {
          goto LABEL_5;
        }
        int v16 = 0;
        uint64_t v186 = v13 + 1;
LABEL_14:
        int8x8_t v17 = *(int8x8_t *)((char *)this + 1760);
        if (!*(void *)&v17) {
          goto LABEL_13;
        }
        unint64_t v18 = *((unsigned __int8 *)v14 + 5);
        uint8x8_t v19 = (uint8x8_t)vcnt_s8(v17);
        v19.i16[0] = vaddlv_u8(v19);
        if (v19.u32[0] > 1uLL)
        {
          unint64_t v20 = *((unsigned __int8 *)v14 + 5);
          if (*(void *)&v17 <= v18) {
            unint64_t v20 = v18 % *(void *)&v17;
          }
        }
        else
        {
          unint64_t v20 = (v17.i32[0] - 1) & v18;
        }
        unsigned int v21 = *(uint64_t ***)(*((void *)this + 219) + 8 * v20);
        if (!v21) {
          goto LABEL_13;
        }
        size_t v22 = *v21;
        if (!v22) {
          goto LABEL_13;
        }
        uint64_t v23 = *v14;
        if (v19.u32[0] < 2uLL)
        {
          uint64_t v24 = *(void *)&v17 - 1;
          while (1)
          {
            uint64_t v26 = v22[1];
            if (v26 == v18)
            {
              if (*((_DWORD *)v22 + 4) == v18) {
                goto LABEL_35;
              }
            }
            else if ((v26 & v24) != v20)
            {
              goto LABEL_13;
            }
            size_t v22 = (uint64_t *)*v22;
            if (!v22) {
              goto LABEL_13;
            }
          }
        }
        while (1)
        {
          unint64_t v25 = v22[1];
          if (v25 == v18)
          {
            if (*((_DWORD *)v22 + 4) == v18)
            {
LABEL_35:
              if ((~*((unsigned __int8 *)v14 + 4) & 0xE) != 0) {
                goto LABEL_13;
              }
              unsigned int v27 = (const char *)(v22 + 3);
              if (*((char *)v22 + 47) < 0) {
                unsigned int v27 = *(const char **)v27;
              }
              size_t v28 = strlen(v27);
              if (v28 > 0x7FFFFFFFFFFFFFF7) {
                goto LABEL_329;
              }
              std::string::size_type v29 = v28;
              uint64_t v187 = *((void *)v14 + 1);
              if (v28 >= 0x17)
              {
                uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v28 | 7) != 0x17) {
                  uint64_t v31 = v28 | 7;
                }
                uint64_t v32 = v31 + 1;
                p_dst = (std::string *)operator new(v31 + 1);
                __dst.__r_.__value_.__l.__size_ = v29;
                __dst.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28;
                p_dst = &__dst;
                if (!v28)
                {
LABEL_46:
                  p_dst->__r_.__value_.__s.__data_[v29] = 0;
                  long long v33 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v180, (uint64_t)&__dst);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  size_t v34 = (const void *)(v186 + v23);
                  size_t v35 = strlen((const char *)(v186 + v23));
                  if (v35 <= 0x7FFFFFFFFFFFFFF7)
                  {
                    std::string::size_type v36 = v35;
                    if (v35 >= 0x17)
                    {
                      uint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v35 | 7) != 0x17) {
                        uint64_t v39 = v35 | 7;
                      }
                      uint64_t v40 = v39 + 1;
                      uint64_t v37 = (std::string *)operator new(v39 + 1);
                      v189.__r_.__value_.__l.__size_ = v36;
                      v189.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                      v189.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
                      int v38 = v187;
                    }
                    else
                    {
                      *((unsigned char *)&v189.__r_.__value_.__s + 23) = v35;
                      uint64_t v37 = &v189;
                      int v38 = v187;
                      if (!v35) {
                        goto LABEL_56;
                      }
                    }
                    memmove(v37, v34, v36);
LABEL_56:
                    v37->__r_.__value_.__s.__data_[v36] = 0;
                    unsigned int v41 = *((_DWORD *)v33 + 10);
                    int v183 = SHIBYTE(v189.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0) {
                      std::string::__init_copy_ctor_external(&__dst, v189.__r_.__value_.__l.__data_, v189.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string __dst = v189;
                    }
                    LODWORD(v191) = v38;
                    uint64_t v42 = (char *)this + 40 * v41;
                    uint64_t v43 = (uint64_t)(v42 + 1192);
                    int v165 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    __p = (void *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      unint64_t v44 = &__dst;
                    }
                    else {
                      unint64_t v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    }
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
                    }
                    std::string::size_type v169 = size;
                    unint64_t v46 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v44, size);
                    unint64_t v47 = v46;
                    unint64_t v48 = *((void *)v42 + 150);
                    if (v48)
                    {
                      uint8x8_t v49 = (uint8x8_t)vcnt_s8((int8x8_t)v48);
                      v49.i16[0] = vaddlv_u8(v49);
                      if (v49.u32[0] > 1uLL)
                      {
                        uint64_t v42 = (char *)v46;
                        if (v46 >= v48) {
                          uint64_t v42 = (char *)(v46 % v48);
                        }
                      }
                      else
                      {
                        uint64_t v42 = (char *)((v48 - 1) & v46);
                      }
                      long long v50 = *(uint64_t ***)(*(void *)v43 + 8 * (void)v42);
                      if (v50)
                      {
                        __s2 = v44;
                        BOOL v51 = *v50;
                        if (*v50)
                        {
                          if (v49.u32[0] < 2uLL)
                          {
                            unint64_t v52 = v48 - 1;
                            while (1)
                            {
                              uint64_t v58 = v51[1];
                              if (v58 == v47)
                              {
                                uint64_t v59 = *((unsigned __int8 *)v51 + 39);
                                if ((v59 & 0x80u) == 0) {
                                  uint64_t v60 = *((unsigned __int8 *)v51 + 39);
                                }
                                else {
                                  uint64_t v60 = v51[3];
                                }
                                if (v60 == v169)
                                {
                                  uint64_t v61 = (const void **)(v51 + 2);
                                  if ((v59 & 0x80) != 0)
                                  {
                                    unint64_t v162 = v52;
                                    int v63 = memcmp(*v61, __s2, v51[3]);
                                    unint64_t v52 = v162;
                                    if (!v63) {
                                      goto LABEL_105;
                                    }
                                  }
                                  else
                                  {
                                    if (!*((unsigned char *)v51 + 39)) {
                                      goto LABEL_105;
                                    }
                                    unsigned int v62 = __s2;
                                    while (*(unsigned __int8 *)v61 == v62->__r_.__value_.__s.__data_[0])
                                    {
                                      uint64_t v61 = (const void **)((char *)v61 + 1);
                                      unsigned int v62 = (std::string *)((char *)v62 + 1);
                                      if (!--v59) {
                                        goto LABEL_105;
                                      }
                                    }
                                  }
                                }
                              }
                              else if ((char *)(v58 & v52) != v42)
                              {
                                goto LABEL_107;
                              }
                              BOOL v51 = (uint64_t *)*v51;
                              if (!v51) {
                                goto LABEL_107;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v53 = v51[1];
                            if (v53 == v47)
                            {
                              uint64_t v54 = *((unsigned __int8 *)v51 + 39);
                              if ((v54 & 0x80u) == 0) {
                                uint64_t v55 = *((unsigned __int8 *)v51 + 39);
                              }
                              else {
                                uint64_t v55 = v51[3];
                              }
                              if (v55 == v169)
                              {
                                uint64_t v56 = (const void **)(v51 + 2);
                                if ((v54 & 0x80) != 0)
                                {
                                  if (!memcmp(*v56, __s2, v51[3]))
                                  {
LABEL_105:
                                    int v64 = v183;
                                    if (v165 < 0) {
                                      operator delete(__p);
                                    }
LABEL_145:
                                    if (v64 < 0) {
                                      operator delete(v189.__r_.__value_.__l.__data_);
                                    }
LABEL_13:
                                    v14 += 4;
                                    if (++v16 != v15) {
                                      goto LABEL_14;
                                    }
                                    goto LABEL_5;
                                  }
                                }
                                else
                                {
                                  if (!*((unsigned char *)v51 + 39)) {
                                    goto LABEL_105;
                                  }
                                  size_t v57 = __s2;
                                  while (*(unsigned __int8 *)v56 == v57->__r_.__value_.__s.__data_[0])
                                  {
                                    uint64_t v56 = (const void **)((char *)v56 + 1);
                                    size_t v57 = (std::string *)((char *)v57 + 1);
                                    if (!--v54) {
                                      goto LABEL_105;
                                    }
                                  }
                                }
                              }
                            }
                            else
                            {
                              if (v53 >= v48) {
                                v53 %= v48;
                              }
                              if ((char *)v53 != v42) {
                                break;
                              }
                            }
                            BOOL v51 = (uint64_t *)*v51;
                          }
                          while (v51);
                        }
                      }
                    }
LABEL_107:
                    uint64_t v65 = (char *)operator new(0x30uLL);
                    v195.__locale_ = (std::locale::__imp *)v65;
                    int v196 = (void *)(v43 + 16);
                    unsigned int v170 = (void *)(v43 + 16);
                    *(void *)uint64_t v65 = 0;
                    *((void *)v65 + 1) = v47;
                    *(std::string *)(v65 + 16) = __dst;
                    *((_DWORD *)v65 + 10) = v187;
                    char v197 = 1;
                    float v66 = (float)(unint64_t)(*(void *)(v43 + 24) + 1);
                    float v67 = *(float *)(v43 + 32);
                    if (!v48 || (float)(v67 * (float)v48) < v66)
                    {
                      BOOL v68 = (v48 & (v48 - 1)) != 0;
                      if (v48 < 3) {
                        BOOL v68 = 1;
                      }
                      unint64_t v69 = v68 | (2 * v48);
                      unint64_t v70 = vcvtps_u32_f32(v66 / v67);
                      if (v69 <= v70) {
                        size_t prime = v70;
                      }
                      else {
                        size_t prime = v69;
                      }
                      if (prime == 1)
                      {
                        size_t prime = 2;
                      }
                      else if ((prime & (prime - 1)) != 0)
                      {
                        size_t prime = std::__next_prime(prime);
                        unint64_t v48 = *(void *)(v43 + 8);
                      }
                      if (prime > v48) {
                        goto LABEL_119;
                      }
                      if (prime < v48)
                      {
                        unint64_t v72 = vcvtps_u32_f32((float)*(unint64_t *)(v43 + 24) / *(float *)(v43 + 32));
                        if (v48 < 3
                          || (uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v48), v73.i16[0] = vaddlv_u8(v73), v73.u32[0] > 1uLL))
                        {
                          unint64_t v72 = std::__next_prime(v72);
                        }
                        else
                        {
                          uint64_t v74 = 1 << -(char)__clz(v72 - 1);
                          if (v72 >= 2) {
                            unint64_t v72 = v74;
                          }
                        }
                        if (prime <= v72) {
                          size_t prime = v72;
                        }
                        if (prime < v48) {
LABEL_119:
                        }
                          std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v43, prime);
                      }
                      unint64_t v48 = *(void *)(v43 + 8);
                      if ((v48 & (v48 - 1)) != 0)
                      {
                        if (v47 >= v48) {
                          uint64_t v42 = (char *)(v47 % v48);
                        }
                        else {
                          uint64_t v42 = (char *)v47;
                        }
                      }
                      else
                      {
                        uint64_t v42 = (char *)((v48 - 1) & v47);
                      }
                    }
                    uint64_t v75 = *(void *)v43;
                    int v76 = *(void **)(*(void *)v43 + 8 * (void)v42);
                    if (v76)
                    {
                      *(void *)uint64_t v65 = *v76;
                      int v64 = v183;
                      goto LABEL_143;
                    }
                    *(void *)uint64_t v65 = *v170;
                    *unsigned int v170 = v65;
                    *(void *)(v75 + 8 * (void)v42) = v170;
                    int v64 = v183;
                    if (*(void *)v65)
                    {
                      unint64_t v77 = *(void *)(*(void *)v65 + 8);
                      if ((v48 & (v48 - 1)) != 0)
                      {
                        if (v77 >= v48) {
                          v77 %= v48;
                        }
                      }
                      else
                      {
                        v77 &= v48 - 1;
                      }
                      int v76 = (void *)(*(void *)v43 + 8 * v77);
LABEL_143:
                      *int v76 = v65;
                    }
                    ++*(void *)(v43 + 24);
                    goto LABEL_145;
                  }
LABEL_329:
                  abort();
                }
              }
              memmove(p_dst, v27, v29);
              goto LABEL_46;
            }
          }
          else
          {
            if (v25 >= *(void *)&v17) {
              v25 %= *(void *)&v17;
            }
            if (v25 != v20) {
              goto LABEL_13;
            }
          }
          size_t v22 = (uint64_t *)*v22;
          if (!v22) {
            goto LABEL_13;
          }
        }
      }
      if (v7 == 11)
      {
        *((void *)this + 227) = *((void *)v5 + 2);
        goto LABEL_5;
      }
      if (v7 == 25)
      {
        *((void *)this + 2) = v5;
        int v185 = v5[30];
        int v8 = v5[16];
        unint64_t v9 = (v8 + 1);
        uint64_t v10 = *((void *)this + 228);
        unint64_t v11 = (*((void *)this + 229) - v10) >> 2;
        if (v9 <= v11)
        {
          if (v9 < v11) {
            *((void *)this + 229) = v10 + 4 * v9;
          }
        }
        else
        {
          std::vector<unsigned int>::__append(v182, v9 - v11);
          LOBYTE(v8) = *(unsigned char *)(*((void *)this + 2) + 64);
        }
        unsigned int v184 = v8;
        if ((_BYTE)v8) {
          break;
        }
      }
LABEL_5:
      BOOL v5 = (_DWORD *)((char *)v179 + v179[1]);
      int v4 = v178 + 1;
      if (v178 + 1 == v172) {
        goto LABEL_309;
      }
    }
    unsigned int v188 = 0;
    char v171 = 0;
    char v78 = v179 + 18;
    int v79 = 1;
    unsigned __int8 v80 = 1;
    while (1)
    {
      *((unsigned char *)&v189.__r_.__value_.__s + 23) = 16;
      *(_OWORD *)&v189.__r_.__value_.__l.__data_ = *((_OWORD *)v78 + 1);
      v189.__r_.__value_.__s.__data_[16] = 0;
      begiunint64_t n = v182->__begin_;
      v182->__begin_[v80] = v78[12] - v185;
      if (!strncmp((const char *)v78 + 16, "__GPU_STATS", 0x10uLL)) {
        break;
      }
      if (!strncmp((const char *)v78 + 16, "__DWARF", 0x10uLL)) {
        goto LABEL_204;
      }
      if (strncmp((const char *)v78 + 16, "__GPU_METADATA", 0x10uLL))
      {
LABEL_154:
        if (!strncmp((const char *)v78 + 16, "__TEXT", 0x10uLL))
        {
          int v90 = strncmp((const char *)v78, "__const", 0x10uLL);
          int v82 = v168;
          if (!v90) {
            goto LABEL_170;
          }
          int v91 = strncmp((const char *)v78, "__cstring", 0x10uLL);
          int v82 = v167;
          if (!v91) {
            goto LABEL_170;
          }
        }
        if (!strncmp((const char *)v78 + 16, "__DATA", 0x10uLL) && !strncmp((const char *)v78, "__common", 0x10uLL))
        {
          begin[v80] = *((void *)v78 + 4);
          int v82 = v166;
          goto LABEL_170;
        }
        goto LABEL_171;
      }
      if (!strncmp((const char *)v78, "__helpers", 0x10uLL) && *((void *)this + 28) && *((void *)this + 29))
      {
        char v92 = 1;
      }
      else
      {
        if (!strncmp((const char *)v78, "__helpers", 0x10uLL)) {
          goto LABEL_154;
        }
        if (v171)
        {
          uint64_t v85 = *((void *)v78 + 5);
          uint64_t v86 = *(void *)this;
          unint64_t v87 = v78;
          if (v85) {
            unint64_t v87 = (_DWORD *)(v86 + v78[12]);
          }
          uint64_t v88 = v78[14];
          int v89 = v78[15];
          *((void *)this + 144) = v87;
          *((void *)this + 145) = v85;
          *((unsigned char *)this + 1168) = v80;
          *((void *)this + 147) = v86 + v88;
          *((_DWORD *)this + 296) = v89;
          char v171 = 1;
          *((unsigned char *)this + 1144) = 1;
          if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_205;
          }
          goto LABEL_299;
        }
        char v92 = 0;
        char v171 = 1;
      }
LABEL_172:
      if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v93 = (std::string::size_type)&v189;
      }
      else {
        std::string::size_type v93 = v189.__r_.__value_.__r.__words[0];
      }
      size_t v94 = strlen((const char *)v93);
      if (v94 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      std::string::size_type v95 = v94;
      if (v94 >= 0x17)
      {
        uint64_t v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v94 | 7) != 0x17) {
          uint64_t v97 = v94 | 7;
        }
        uint64_t v98 = v97 + 1;
        unint64_t v96 = (std::string *)operator new(v97 + 1);
        __dst.__r_.__value_.__l.__size_ = v95;
        __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
LABEL_182:
        memmove(v96, (const void *)v93, v95);
        goto LABEL_183;
      }
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v94;
      unint64_t v96 = &__dst;
      if (v94) {
        goto LABEL_182;
      }
LABEL_183:
      v96->__r_.__value_.__s.__data_[v95] = 0;
      unint64_t v99 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(v180, (uint64_t)&__dst);
      int v100 = v99;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (!v100)
        {
LABEL_194:
          uint64_t v109 = *((void *)this + 1);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:nn180100]((uint64_t)&__dst);
          if (v109)
          {
            for (uint64_t i = 0; i != v109; ++i)
            {
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v6, (uint64_t)"", 0);
              uint64_t v111 = *v6;
              uint64_t v112 = *v6;
              *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
              uint64_t v113 = (const std::ios_base *)((char *)v6 + *(void *)(v112 - 24));
              if (v113[1].__fmtflags_ == -1)
              {
                std::ios_base::getloc(v113);
                unint64_t v114 = std::locale::use_facet(&v195, MEMORY[0x263F8C108]);
                std::ios_base::fmtflags v115 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 32);
                std::locale::~locale(&v195);
                v113[1].__fmtflags_ = v115;
                uint64_t v111 = *v6;
              }
              v113[1].__fmtflags_ = 48;
              *(_DWORD *)((char *)v6 + *(void *)(v111 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v111 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
              uint64_t v116 = (void *)std::ostream::operator<<();
              std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(v116, (uint64_t)" ", 1);
              if ((~(_BYTE)i & 0x1F) == 0)
              {
                std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
                uint64_t v117 = std::locale::use_facet(&v195, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v117->__vftable[2].~facet_0)(v117, 10);
                std::locale::~locale(&v195);
                std::ostream::put();
                std::ostream::flush();
              }
            }
          }
          std::ostream::flush();
          __dst.__r_.__value_.__r.__words[0] = v176;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(void *)(v176 - 24)) = v175;
          __dst.__r_.__value_.__r.__words[2] = v174;
          unint64_t v191 = MEMORY[0x263F8C318] + 16;
          if (v193 < 0) {
            operator delete(v192);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x24566ED30](&v194);
LABEL_204:
          if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_205;
          }
          goto LABEL_299;
        }
      }
      else if (!v99)
      {
        goto LABEL_194;
      }
      uint64_t v101 = *((void *)v78 + 5);
      unint64_t v102 = v78;
      if (v101) {
        unint64_t v102 = (_DWORD *)(*(void *)this + v78[12]);
      }
      if ((v92 & 1) == 0)
      {
        int v103 = v78[15];
        uint64_t v104 = *(void *)this + v78[14];
        unint64_t v105 = (char *)this + 40 * *((unsigned int *)v100 + 10);
        *((void *)v105 + 3) = v102;
        *((void *)v105 + 4) = v101;
        v105[40] = v80;
        *((void *)v105 + 6) = v104;
        *((_DWORD *)v105 + 14) = v103;
      }
      LODWORD(__dst.__r_.__value_.__l.__data_) = v79;
      size_t v106 = strlen((const char *)v93);
      if (v106 > 0x7FFFFFFFFFFFFFF7) {
        abort();
      }
      size_t v107 = v106;
      if (v106 >= 0x17)
      {
        uint64_t v118 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v106 | 7) != 0x17) {
          uint64_t v118 = v106 | 7;
        }
        uint64_t v119 = v118 + 1;
        p_std::string::size_type size = (std::string::size_type *)operator new(v118 + 1);
        __dst.__r_.__value_.__r.__words[2] = v107;
        unint64_t v191 = v119 | 0x8000000000000000;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)p_size;
      }
      else
      {
        HIBYTE(v191) = v106;
        p_std::string::size_type size = &__dst.__r_.__value_.__l.__size_;
        if (!v106) {
          goto LABEL_212;
        }
      }
      memmove(p_size, (const void *)v93, v107);
LABEL_212:
      *((unsigned char *)p_size + v107) = 0;
      unint64_t data_low = LODWORD(__dst.__r_.__value_.__l.__data_);
      unint64_t v121 = *((void *)this + 220);
      if (v121)
      {
        uint8x8_t v122 = (uint8x8_t)vcnt_s8((int8x8_t)v121);
        v122.i16[0] = vaddlv_u8(v122);
        if (v122.u32[0] > 1uLL)
        {
          std::string::size_type v93 = LODWORD(__dst.__r_.__value_.__l.__data_);
          if (v121 <= LODWORD(__dst.__r_.__value_.__l.__data_)) {
            std::string::size_type v93 = LODWORD(__dst.__r_.__value_.__l.__data_) % v121;
          }
        }
        else
        {
          std::string::size_type v93 = (v121 - 1) & (uint64_t)__dst.__r_.__value_.__l.__data_;
        }
        uint64_t v123 = *(uint64_t ***)(*((void *)this + 219) + 8 * v93);
        if (v123)
        {
          int8x16_t v124 = *v123;
          if (v124)
          {
            if (v122.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v126 = v124[1];
                if (v126 == LODWORD(__dst.__r_.__value_.__l.__data_))
                {
                  if (*((_DWORD *)v124 + 4) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
                    goto LABEL_296;
                  }
                }
                else if ((v126 & (v121 - 1)) != v93)
                {
                  goto LABEL_232;
                }
                int8x16_t v124 = (uint64_t *)*v124;
                if (!v124) {
                  goto LABEL_232;
                }
              }
            }
            do
            {
              unint64_t v125 = v124[1];
              if (v125 == LODWORD(__dst.__r_.__value_.__l.__data_))
              {
                if (*((_DWORD *)v124 + 4) == LODWORD(__dst.__r_.__value_.__l.__data_)) {
                  goto LABEL_296;
                }
              }
              else
              {
                if (v125 >= v121) {
                  v125 %= v121;
                }
                if (v125 != v93) {
                  break;
                }
              }
              int8x16_t v124 = (uint64_t *)*v124;
            }
            while (v124);
          }
        }
      }
LABEL_232:
      uint64_t v127 = (char *)operator new(0x30uLL);
      v195.__locale_ = (std::locale::__imp *)v127;
      int v196 = v181;
      *(void *)uint64_t v127 = 0;
      *((void *)v127 + 1) = data_low;
      *((_DWORD *)v127 + 4) = data_low;
      *(_OWORD *)(v127 + 24) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
      *((void *)v127 + 5) = v191;
      *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = 0uLL;
      unint64_t v191 = 0;
      char v197 = 1;
      float v128 = (float)(unint64_t)(*((void *)this + 222) + 1);
      float v129 = *((float *)this + 446);
      if (v121 && (float)(v129 * (float)v121) >= v128)
      {
        unint64_t data_low = v93;
        goto LABEL_286;
      }
      BOOL v130 = (v121 & (v121 - 1)) != 0;
      if (v121 < 3) {
        BOOL v130 = 1;
      }
      unint64_t v131 = v130 | (2 * v121);
      unint64_t v132 = vcvtps_u32_f32(v128 / v129);
      if (v131 <= v132) {
        size_t v133 = v132;
      }
      else {
        size_t v133 = v131;
      }
      if (v133 == 1)
      {
        size_t v133 = 2;
      }
      else if ((v133 & (v133 - 1)) != 0)
      {
        size_t v133 = std::__next_prime(v133);
        unint64_t v121 = *((void *)this + 220);
      }
      if (v133 > v121) {
        goto LABEL_245;
      }
      if (v133 >= v121) {
        goto LABEL_274;
      }
      unint64_t v145 = vcvtps_u32_f32((float)*((unint64_t *)this + 222) / *((float *)this + 446));
      if (v121 < 3 || (uint8x8_t v146 = (uint8x8_t)vcnt_s8((int8x8_t)v121), v146.i16[0] = vaddlv_u8(v146), v146.u32[0] > 1uLL))
      {
        unint64_t v145 = std::__next_prime(v145);
      }
      else
      {
        uint64_t v147 = 1 << -(char)__clz(v145 - 1);
        if (v145 >= 2) {
          unint64_t v145 = v147;
        }
      }
      if (v133 <= v145) {
        size_t v133 = v145;
      }
      if (v133 < v121)
      {
        if (!v133)
        {
          unsigned int v155 = (void *)*((void *)this + 219);
          *((void *)this + 219) = 0;
          if (v155) {
            operator delete(v155);
          }
          unint64_t v121 = 0;
          *((void *)this + 220) = 0;
          goto LABEL_274;
        }
LABEL_245:
        if (v133 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v134 = operator new(8 * v133);
        int64x2_t v135 = (void *)*((void *)this + 219);
        *((void *)this + 219) = v134;
        if (v135) {
          operator delete(v135);
        }
        uint64_t v136 = 0;
        *((void *)this + 220) = v133;
        do
          *(void *)(*((void *)this + 219) + 8 * v136++) = 0;
        while (v133 != v136);
        unsigned int v137 = (void *)*v181;
        if (!*v181)
        {
LABEL_273:
          unint64_t v121 = v133;
          goto LABEL_274;
        }
        size_t v138 = v137[1];
        size_t v139 = v133 - 1;
        if ((v133 & (v133 - 1)) == 0)
        {
          size_t v140 = v138 & v139;
          *(void *)(*((void *)this + 219) + 8 * v140) = v181;
          for (unint64_t j = (void *)*v137; *v137; unint64_t j = (void *)*v137)
          {
            size_t v142 = j[1] & v139;
            if (v142 == v140)
            {
              unsigned int v137 = j;
            }
            else
            {
              uint64_t v143 = *((void *)this + 219);
              if (*(void *)(v143 + 8 * v142))
              {
                *unsigned int v137 = *j;
                uint64_t v144 = 8 * v142;
                *unint64_t j = **(void **)(*((void *)this + 219) + v144);
                **(void **)(*((void *)this + 219) + v144) = j;
              }
              else
              {
                *(void *)(v143 + 8 * v142) = v137;
                unsigned int v137 = j;
                size_t v140 = v142;
              }
            }
          }
          goto LABEL_273;
        }
        if (v138 >= v133) {
          v138 %= v133;
        }
        *(void *)(*((void *)this + 219) + 8 * v138) = v181;
        unint64_t v148 = (void *)*v137;
        if (!*v137) {
          goto LABEL_273;
        }
        while (2)
        {
          size_t v150 = v148[1];
          if (v150 >= v133) {
            v150 %= v133;
          }
          if (v150 != v138)
          {
            uint64_t v151 = *((void *)this + 219);
            if (!*(void *)(v151 + 8 * v150))
            {
              *(void *)(v151 + 8 * v150) = v137;
LABEL_278:
              unsigned int v137 = v148;
              unint64_t v148 = (void *)*v148;
              size_t v138 = v150;
              if (!v148) {
                goto LABEL_273;
              }
              continue;
            }
            *unsigned int v137 = *v148;
            uint64_t v149 = 8 * v150;
            *unint64_t v148 = **(void **)(*((void *)this + 219) + v149);
            **(void **)(*((void *)this + 219) + v149) = v148;
            unint64_t v148 = v137;
          }
          break;
        }
        size_t v150 = v138;
        goto LABEL_278;
      }
      unint64_t v121 = *((void *)this + 220);
LABEL_274:
      if ((v121 & (v121 - 1)) != 0)
      {
        if (v121 <= data_low) {
          data_low %= v121;
        }
      }
      else
      {
        unint64_t data_low = (v121 - 1) & data_low;
      }
LABEL_286:
      uint64_t v152 = *((void *)this + 219);
      int v153 = *(void **)(v152 + 8 * data_low);
      if (v153)
      {
        *(void *)uint64_t v127 = *v153;
LABEL_294:
        *int v153 = v127;
        goto LABEL_295;
      }
      *(void *)uint64_t v127 = *v181;
      *int8x16_t v181 = v127;
      *(void *)(v152 + 8 * data_low) = v181;
      if (*(void *)v127)
      {
        unint64_t v154 = *(void *)(*(void *)v127 + 8);
        if ((v121 & (v121 - 1)) != 0)
        {
          if (v154 >= v121) {
            v154 %= v121;
          }
        }
        else
        {
          v154 &= v121 - 1;
        }
        int v153 = (void *)(*((void *)this + 219) + 8 * v154);
        goto LABEL_294;
      }
LABEL_295:
      ++*((void *)this + 222);
LABEL_296:
      if (SHIBYTE(v191) < 0) {
        operator delete((void *)__dst.__r_.__value_.__l.__size_);
      }
      ++v188;
      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_205;
      }
LABEL_299:
      operator delete(v189.__r_.__value_.__l.__data_);
LABEL_205:
      int v79 = ++v80;
      if (v184 >= v80)
      {
        v78 += 20;
        if (v188 <= 0xE) {
          continue;
        }
      }
      goto LABEL_5;
    }
    int v83 = strncmp((const char *)v78, "__counters", 0x10uLL);
    int v82 = v177;
    if (!v83 || (v84 = strncmp((const char *)v78, "__telemetry", 0x10uLL), int v82 = v173, !v84)) {
LABEL_170:
    }
      MEMORY[0x24566EB20](&v189, *v82);
LABEL_171:
    char v92 = 0;
    goto LABEL_172;
  }
LABEL_309:
  BOOL v156 = (char *)this + 24;
  if (*((void *)this + 3))
  {
    if (!*((void *)this + 4)) {
      BOOL v156 = (char *)this + 584;
    }
    if (!*(void *)v156) {
      return 0;
    }
  }
  else if (!*((void *)this + 73))
  {
    return 0;
  }
  uint64_t v157 = (char *)this + 224;
  if (*((void *)this + 28))
  {
    if (!*((void *)this + 29)) {
      uint64_t v157 = (char *)this + 784;
    }
  }
  else
  {
    uint64_t v157 = (char *)this + 784;
  }
  uint64_t v159 = *(void *)v157;
  uint64_t v158 = *((void *)v157 + 1);
  if (v159) {
    BOOL v160 = v158 == 0;
  }
  else {
    BOOL v160 = 1;
  }
  if (!v160) {
    return *((void *)this + 152) != 0;
  }
  return 0;
}

void sub_2429BE1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,int a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newIntersectionProgramVariant()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_2429BE5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v16, 0x10F3C40785589F5);
  _Unwind_Resume(a1);
}

void AGCDeserializedReply::~AGCDeserializedReply(AGCDeserializedReply *this)
{
  uint64_t v2 = (void **)*((void *)this + 247);
  if (v2)
  {
    do
    {
      int v12 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v12;
    }
    while (v12);
  }
  size_t v3 = (void *)*((void *)this + 245);
  *((void *)this + 245) = 0;
  if (v3) {
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 228);
  if (v4)
  {
    *((void *)this + 229) = v4;
    operator delete(v4);
  }
  BOOL v5 = (AGCDeserializedReply *)((char *)this + 1752);
  uint64_t v6 = (void **)*((void *)this + 221);
  if (v6)
  {
    do
    {
      uint64_t v13 = (void **)*v6;
      if (*((char *)v6 + 47) < 0) {
        operator delete(v6[3]);
      }
      operator delete(v6);
      uint64_t v6 = v13;
    }
    while (v13);
  }
  int v7 = *(void **)v5;
  *(void *)BOOL v5 = 0;
  if (v7) {
    operator delete(v7);
  }
  do
  {
    int v8 = (void **)*((void *)v5 - 3);
    if (v8)
    {
      do
      {
        unint64_t v11 = (void **)*v8;
        if (*((char *)v8 + 39) < 0) {
          operator delete(v8[2]);
        }
        operator delete(v8);
        int v8 = v11;
      }
      while (v11);
    }
    uint64_t v10 = (void *)*((void *)v5 - 5);
    BOOL v5 = (AGCDeserializedReply *)((char *)v5 - 40);
    unint64_t v9 = v10;
    *(void *)BOOL v5 = 0;
    if (v10) {
      operator delete(v9);
    }
  }
  while (v5 != (AGCDeserializedReply *)((char *)this + 1192));
}

uint64_t AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 392);
  if (v2)
  {
    *(void *)(a1 + 400) = v2;
    operator delete(v2);
  }
  size_t v3 = *(void **)(a1 + 368);
  if (v3)
  {
    *(void *)(a1 + 376) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    operator delete(v4);
  }
  BOOL v5 = *(void **)(a1 + 320);
  if (v5)
  {
    *(void *)(a1 + 328) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  int v7 = *(void **)(a1 + 264);
  if (v7)
  {
    *(void *)(a1 + 272) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 240);
  if (v8)
  {
    *(void *)(a1 + 248) = v8;
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 216);
  if (v9)
  {
    *(void *)(a1 + 224) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(void *)(a1 + 104) = v10;
    operator delete(v10);
  }
  unint64_t v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(void *)(a1 + 80) = v11;
    operator delete(v11);
  }
  int v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(void *)(a1 + 56) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 24);
  if (v13)
  {
    *(void *)(a1 + 32) = v13;
    operator delete(v13);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AGX::HAL200::IntersectionProgramVariant::~IntersectionProgramVariant(AGX::HAL200::IntersectionProgramVariant *this)
{
  *(void *)this = &unk_26F852A18;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 236);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F852A18;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState((uint64_t *)this + 236);

  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,false>::~ProgramVariant((unint64_t)this);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(void *a1, uint64_t a2)
{
  int v3 = *(char *)(a2 + 23);
  if (v3 >= 0) {
    int v4 = (uint64_t *)a2;
  }
  else {
    int v4 = *(uint64_t **)a2;
  }
  if (v3 >= 0) {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  unint64_t v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v10 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v6;
    }
    unint64_t v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      int v12 = *v11;
      if (*v11)
      {
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v13 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v19 = v12[1];
            if (v8 == v19)
            {
              uint64_t v20 = *((unsigned __int8 *)v12 + 39);
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v21 = v12[3];
              }
              if (v21 == v5)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v4, v12[3])) {
                    return v12;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return v12;
                  }
                  uint64_t v22 = 0;
                  while (*((unsigned __int8 *)v12 + v22 + 16) == *((unsigned __int8 *)v4 + v22))
                  {
                    if (v20 == ++v22) {
                      return v12;
                    }
                  }
                }
              }
            }
            else if ((v19 & v13) != v10)
            {
              return 0;
            }
            __n128 result = 0;
            int v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v15 = v12[1];
          if (v8 == v15)
          {
            uint64_t v16 = *((unsigned __int8 *)v12 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v17 = v12[3];
            }
            if (v17 == v5)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v4, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v18 = 0;
                while (*((unsigned __int8 *)v12 + v18 + 16) == *((unsigned __int8 *)v4 + v18))
                {
                  if (v16 == ++v18) {
                    return v12;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= *(void *)&v7) {
              v15 %= *(void *)&v7;
            }
            if (v15 != v10) {
              return 0;
            }
          }
          __n128 result = 0;
          int v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      uint64_t v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      uint64_t v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      uint64_t v8 = a1[2];
      uint64_t v7 = a1[3];
      uint64_t v9 = __ROR8__(v6 + v7, 52);
      uint64_t v10 = v6 + a1[1];
      uint64_t v11 = __ROR8__(v10, 7);
      uint64_t v12 = v10 + v8;
      uint64_t v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      uint64_t v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      uint64_t v15 = __ROR8__(v14 + v13, 52);
      uint64_t v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      uint64_t v17 = __ROR8__(v13, 37);
      uint64_t v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      uint64_t v19 = __ROR8__(v18, 7);
      uint64_t v20 = v16 + __ROR8__(v12, 31);
      uint64_t v21 = v18 + v5;
      uint64_t v22 = v21 + v14;
      unint64_t v23 = 0x9AE16A3B2F90404FLL;
      unint64_t v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      unint64_t v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    unint64_t v32 = 0x9DDFEA08EB382D69;
    uint64_t v33 = *(uint64_t *)((char *)a1 + a2 - 48);
    uint64_t v34 = *(uint64_t *)((char *)a1 + a2 - 40);
    uint64_t v35 = *(uint64_t *)((char *)a1 + a2 - 24);
    uint64_t v37 = *(uint64_t *)((char *)a1 + a2 - 64);
    uint64_t v36 = *(uint64_t *)((char *)a1 + a2 - 56);
    uint64_t v38 = *(uint64_t *)((char *)a1 + a2 - 16);
    uint64_t v39 = *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v40 = v36 + v38;
    unint64_t v41 = 0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ (v33 + a2))));
    unint64_t v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    unint64_t v43 = v37 + a2 + v36 + v33;
    uint64_t v44 = v43 + v34;
    unint64_t v45 = __ROR8__(v43, 44) + v37 + a2 + __ROR8__(v34 + v37 + a2 - 0x622015F714C7D297 * (v41 ^ (v41 >> 47)), 21);
    uint64_t v46 = v36 + v38 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v47 = v46 + v35 + v38;
    uint64_t v48 = __ROR8__(v47, 44);
    uint64_t v49 = v47 + v39;
    uint64_t v50 = v48 + v46 + __ROR8__(v46 + v34 + v39, 21);
    uint64_t v52 = *a1;
    BOOL v51 = a1 + 4;
    unint64_t v53 = v52 - 0x4B6D499041670D8DLL * v34;
    uint64_t v54 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v55 = *(v51 - 3);
      uint64_t v56 = v53 + v44 + v40 + v55;
      uint64_t v57 = v51[2];
      uint64_t v58 = v51[3];
      uint64_t v59 = v51[1];
      unint64_t v40 = v59 + v44 - 0x4B6D499041670D8DLL * __ROR8__(v40 + v45 + v57, 42);
      uint64_t v60 = v42 + v49;
      uint64_t v61 = *(v51 - 2);
      uint64_t v62 = *(v51 - 1);
      uint64_t v63 = *(v51 - 4) - 0x4B6D499041670D8DLL * v45;
      uint64_t v64 = v63 + v49 + v62;
      uint64_t v65 = v63 + v55 + v61;
      uint64_t v44 = v65 + v62;
      uint64_t v66 = __ROR8__(v65, 44) + v63;
      unint64_t v67 = (0xB492B66FBE98F273 * __ROR8__(v56, 37)) ^ v50;
      unint64_t v53 = 0xB492B66FBE98F273 * __ROR8__(v60, 33);
      unint64_t v45 = v66 + __ROR8__(v64 + v67, 21);
      unint64_t v68 = v53 + v50 + *v51;
      uint64_t v49 = v68 + v59 + v57 + v58;
      uint64_t v50 = __ROR8__(v68 + v59 + v57, 44) + v68 + __ROR8__(v40 + v61 + v68 + v58, 21);
      v51 += 8;
      unint64_t v42 = v67;
      v54 += 64;
    }
    while (v54);
    unint64_t v69 = v53
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v50 ^ ((0x9DDFEA08EB382D69 * (v50 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v50 ^ v45)))) >> 47));
    unint64_t v70 = 0x9DDFEA08EB382D69
        * (v69 ^ (v67
                - 0x4B6D499041670D8DLL * (v40 ^ (v40 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47))));
    unint64_t v71 = 0x9DDFEA08EB382D69 * (v69 ^ (v70 >> 47) ^ v70);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xB492B66FBE98F273 * *a1;
    uint64_t v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    unint64_t v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v30 = 0x9DDFEA08EB382D69 * ((v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)) ^ v29);
    unint64_t v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    unint64_t v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 >= 9)
  {
    uint64_t v2 = *(uint64_t *)((char *)a1 + a2 - 8);
    uint64_t v3 = __ROR8__(v2 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
  }
  if (a2 >= 4)
  {
    uint64_t v72 = *(unsigned int *)((char *)a1 + a2 - 4);
    unint64_t v23 = 0x9DDFEA08EB382D69;
    unint64_t v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
    unint64_t v31 = v72 ^ (v73 >> 47) ^ v73;
    goto LABEL_8;
  }
  unint64_t v32 = 0x9AE16A3B2F90404FLL;
  if (a2)
  {
    unint64_t v71 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v32 *= v71 ^ (v71 >> 47);
  }
  return v32;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    uint64_t v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  int v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *uint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    uint64_t v16 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v18))
          {
            *(void *)(*(void *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *uint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *uint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          uint64_t v16 = v7;
        }
        unint64_t v18 = v9;
LABEL_26:
        uint64_t v7 = v16;
        uint64_t v16 = (void *)*v16;
        unint64_t v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (uint64_t *)a2;
  }
  else {
    uint64_t v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v20 = v14[1];
            if (v20 == v10)
            {
              uint64_t v21 = *((unsigned __int8 *)v14 + 39);
              if ((v21 & 0x80u) == 0) {
                uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v22 = v14[3];
              }
              if (v22 == v8)
              {
                unint64_t v23 = (const void **)(v14 + 2);
                if ((v21 & 0x80) != 0)
                {
                  if (!memcmp(*v23, v7, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (uint64_t i = v7; *(unsigned __int8 *)v23 == *(unsigned __int8 *)i; uint64_t i = (uint64_t *)((char *)i + 1))
                  {
                    unint64_t v23 = (const void **)((char *)v23 + 1);
                    if (!--v21) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v20 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v10)
          {
            uint64_t v16 = *((unsigned __int8 *)v14 + 39);
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v17 = v14[3];
            }
            if (v17 == v8)
            {
              unint64_t v18 = (const void **)(v14 + 2);
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v18, v7, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (unint64_t j = v7; *(unsigned __int8 *)v18 == *(unsigned __int8 *)j; unint64_t j = (uint64_t *)((char *)j + 1))
                {
                  unint64_t v18 = (const void **)((char *)v18 + 1);
                  if (!--v16) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  unint64_t v25 = (char *)operator new(0x30uLL);
  uint64_t v39 = v25;
  *(void *)unint64_t v25 = 0;
  *((void *)v25 + 1) = v10;
  uint64_t v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v25 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v25 + 10) = *(_DWORD *)(a3 + 24);
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    BOOL v29 = 1;
    if (v11 >= 3) {
      BOOL v29 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v11);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_64;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_64:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v3);
  if (v37)
  {
    *(void *)uint64_t v39 = *v37;
    *uint64_t v37 = v39;
  }
  else
  {
    *(void *)uint64_t v39 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v39;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v39)
    {
      unint64_t v38 = *(void *)(*(void *)v39 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v38 >= v11) {
          v38 %= v11;
        }
      }
      else
      {
        v38 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v39;
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_2429BF50C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned int,std::string>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE45createBinaryLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP7NSArrayP18AGXG17FamilyDeviceP25AGXG17FamilyBinaryArchivebbbP12NSDictionaryU13block_pointerFvRNS1_30IntersectionFunctionVariantSetEE_block_invoke_3(uint64_t a1)
{
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  unint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  unint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

void AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]()
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_26UserIntersectionProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)unint64_t v8 = 0u;
  *(_OWORD *)__p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (int v4 = a1[5]) == 0)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v5 = (void **)v8[0];
  int v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429BF9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

BOOL AGCReplyArray::deserialize(AGCReplyArray *this, _DWORD *a2)
{
  if (*a2 != -17958193) {
    return 0;
  }
  int v4 = a2[4];
  if (v4)
  {
    *(_DWORD *)&v55[8] = 0;
    uint64_t v58 = 0;
    int v59 = 0;
    int v5 = 0;
    int v6 = a2 + 8;
    *(void *)uint64_t v55 = a2[4];
    do
    {
      if (*v6 == 2)
      {
        int v59 = v6[3];
        uint64_t v58 = (char *)a2 + v6[2];
        *(void *)&v55[4] = (char *)a2 + v6[4];
      }
      else
      {
        if (*v6 != 25) {
          return 0;
        }
        unsigned int v7 = v6[16];
        if (v7)
        {
          int v57 = v5;
          uint64_t v56 = v6;
          unint64_t v8 = v6 + 18;
          unint64_t v9 = (char *)*((void *)this + 4);
          unsigned int v10 = 1;
          unsigned int v60 = v6[16];
          do
          {
            uint64_t v12 = (char *)a2 + v8[12];
            uint64_t v13 = *((void *)v8 + 5);
            unint64_t v14 = *((void *)this + 5);
            if ((unint64_t)v9 < v14)
            {
              *(void *)unint64_t v9 = v12;
              *((void *)v9 + 1) = v13;
              uint64_t v11 = v9 + 16;
            }
            else
            {
              unint64_t v15 = (char *)*((void *)this + 3);
              uint64_t v16 = (v9 - v15) >> 4;
              unint64_t v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 60) {
LABEL_83:
              }
                abort();
              uint64_t v18 = v14 - (void)v15;
              if (v18 >> 3 > v17) {
                unint64_t v17 = v18 >> 3;
              }
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v19 = v17;
              }
              if (v19)
              {
                if (v19 >> 60) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v20 = (char *)operator new(16 * v19);
              }
              else
              {
                uint64_t v20 = 0;
              }
              uint64_t v21 = &v20[16 * v16];
              *(void *)uint64_t v21 = v12;
              *((void *)v21 + 1) = v13;
              uint64_t v22 = v21;
              if (v9 != v15)
              {
                do
                {
                  *((_OWORD *)v22 - 1) = *((_OWORD *)v9 - 1);
                  v22 -= 16;
                  v9 -= 16;
                }
                while (v9 != v15);
                unint64_t v9 = (char *)*((void *)this + 3);
              }
              uint64_t v11 = v21 + 16;
              *((void *)this + 3) = v22;
              *((void *)this + 4) = v21 + 16;
              *((void *)this + 5) = &v20[16 * v19];
              if (v9) {
                operator delete(v9);
              }
              unsigned int v7 = v60;
            }
            *((void *)this + 4) = v11;
            ++v10;
            v8 += 20;
            unint64_t v9 = v11;
          }
          while (v10 <= v7);
          int v4 = *(_DWORD *)v55;
          int v5 = v57;
          int v6 = v56;
        }
      }
      int v6 = (_DWORD *)((char *)v6 + v6[1]);
      ++v5;
    }
    while (v5 != v4);
    if (v59)
    {
      uint64_t v23 = 0;
      uint64_t v61 = (void *)((char *)this + 64);
      while (1)
      {
        uint64_t v24 = &v58[16 * v23];
        if (v24[4] != 2 || v24[5] != 0) {
          return 0;
        }
        uint64_t v26 = *((void *)v24 + 1);
        float v27 = (const char *)(*(void *)&v55[4] + 1 + *(unsigned int *)v24);
        size_t v28 = strlen(v27);
        if (v28 >= 0x7FFFFFFFFFFFFFF8) {
          goto LABEL_83;
        }
        size_t v29 = v28;
        if (v28 >= 0x17) {
          break;
        }
        HIBYTE(v63) = v28;
        p_dst = &__dst;
        if (v28) {
          goto LABEL_44;
        }
LABEL_45:
        int v33 = 0;
        *((unsigned char *)p_dst + v29) = 0;
        unint64_t v34 = (v26 - 1);
        if (v34 < (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 4)
        {
          uint8x8_t v35 = (void *)((char *)this + 64);
          uint64_t v36 = (void *)*v61;
          uint64_t v37 = (void *)((char *)this + 64);
          if (*v61)
          {
            if (v63 >= 0) {
              size_t v38 = HIBYTE(v63);
            }
            else {
              size_t v38 = *((void *)&__dst + 1);
            }
            if (v63 >= 0) {
              uint64_t v39 = &__dst;
            }
            else {
              uint64_t v39 = (long long *)__dst;
            }
            while (1)
            {
              while (1)
              {
                uint8x8_t v35 = v36;
                unint64_t v42 = (const void *)v36[4];
                unint64_t v40 = v36 + 4;
                unint64_t v41 = v42;
                int v43 = *((char *)v40 + 23);
                if (v43 >= 0) {
                  size_t v44 = *((unsigned __int8 *)v40 + 23);
                }
                else {
                  size_t v44 = v40[1];
                }
                if (v43 >= 0) {
                  unint64_t v45 = v40;
                }
                else {
                  unint64_t v45 = v41;
                }
                if (v44 >= v38) {
                  size_t v46 = v38;
                }
                else {
                  size_t v46 = v44;
                }
                int v47 = memcmp(v39, v45, v46);
                BOOL v48 = v38 < v44;
                if (v47) {
                  BOOL v48 = v47 < 0;
                }
                if (!v48) {
                  break;
                }
                uint64_t v36 = (void *)*v35;
                uint64_t v37 = v35;
                if (!*v35) {
                  goto LABEL_71;
                }
              }
              int v49 = memcmp(v45, v39, v46);
              BOOL v50 = v44 < v38;
              if (v49) {
                BOOL v50 = v49 < 0;
              }
              if (!v50) {
                break;
              }
              uint64_t v36 = (void *)v35[1];
              if (!v36)
              {
                uint64_t v37 = v35 + 1;
                goto LABEL_71;
              }
            }
            int v33 = 0;
            if ((SHIBYTE(v63) & 0x80000000) == 0) {
              goto LABEL_76;
            }
LABEL_75:
            operator delete((void *)__dst);
            goto LABEL_76;
          }
LABEL_71:
          BOOL v51 = operator new(0x40uLL);
          void v51[6] = v63;
          *((_OWORD *)v51 + 2) = __dst;
          int64_t v63 = 0;
          long long __dst = 0uLL;
          *((_DWORD *)v51 + 14) = v34;
          *BOOL v51 = 0;
          v51[1] = 0;
          v51[2] = v35;
          *uint64_t v37 = v51;
          uint64_t v52 = **((void **)this + 7);
          if (v52)
          {
            *((void *)this + 7) = v52;
            BOOL v51 = (void *)*v37;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 8), v51);
          ++*((void *)this + 9);
          int v33 = 1;
        }
        if (SHIBYTE(v63) < 0) {
          goto LABEL_75;
        }
LABEL_76:
        if (!v33) {
          return 0;
        }
        int v53 = v23 + 1;
        uint64_t v23 = (v23 + 1);
        if (v59 == v53) {
          return *((void *)this + 4) != *((void *)this + 3);
        }
      }
      uint64_t v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v28 | 7) != 0x17) {
        uint64_t v31 = v28 | 7;
      }
      uint64_t v32 = v31 + 1;
      p_dst = (long long *)operator new(v31 + 1);
      *((void *)&__dst + 1) = v29;
      int64_t v63 = v32 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_44:
      memmove(p_dst, v27, v29);
      goto LABEL_45;
    }
  }
  return *((void *)this + 4) != *((void *)this + 3);
}

void sub_2429BFDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AGCReplyArray::~AGCReplyArray(AGCReplyArray *this)
{
  uint64_t v2 = *(void ***)this;
  unint64_t v3 = (void **)*((void *)this + 1);
  if (*(void ***)this != v3)
  {
    do
    {
      int v4 = *v2;
      v2 += 2;
      free(v4);
    }
    while (v2 != v3);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((char **)this + 8));
  int v5 = (void *)*((void *)this + 3);
  if (v5)
  {
    *((void *)this + 4) = v5;
    operator delete(v5);
  }
  int v6 = *(void ***)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v6;
    operator delete(v6);
  }
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_2429C0074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE23createIntersectionFnSetEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    if (v3 > 3) {
      uint64_t v5 = 5;
    }
    else {
      uint64_t v5 = qword_242EAA188[v3];
    }
    uint64_t v6 = [NSDictionary dictionaryWithObject:a2[1] forKey:*MEMORY[0x263F08320]];
    *(void *)(v4 + 40) = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v5 userInfo:v6];
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    unint64_t v8 = *(uint64_t (**)(void))(result + 16);
    return v8();
  }
  return result;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    uint64_t v6 = -[AGXG17FamilyDynamicLibrary initWithBinaryData:name:device:]([AGXG17FamilyDynamicLibrary alloc], "initWithBinaryData:name:device:", v5, [*(id *)(a1 + 32) name], *(void *)(a1 + 40));
    [*(id *)(a1 + 48) setVendorPrivate:v6];

    [*(id *)(a1 + 48) setPrecompiledOutput:MEMORY[0x263EF8388]];
    unsigned int v7 = (atomic_ullong *)(*(void *)(a1 + 40) + 816);
    atomic_fetch_or(v7, 0x4000000000uLL);
    atomic_fetch_or(v7 + 1, 0);
    uint64_t result = *(void *)(a1 + 56);
    if (result)
    {
      unint64_t v9 = *(uint64_t (**)(void))(result + 16);
      return v9();
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x263EF8330];
    uint64_t v14 = 3221225472;
    unint64_t v15 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke_2;
    uint64_t v16 = &unk_26516ECF0;
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = v10;
    if (a3 > 3) {
      uint64_t v11 = 5;
    }
    else {
      uint64_t v11 = qword_242EAA188[a3];
    }
    uint64_t v12 = objc_msgSend(NSDictionary, "dictionaryWithObject:forKey:", a4, *MEMORY[0x263F08320], v13, v14);
    return v15((uint64_t)&v13, 0, 0, (uint64_t)(id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v11 userInfo:v12]);
  }
  return result;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE31createDynamicLibraryForFunctionEP21MTLFunctionDescriptorPU22objcproto11MTLFunction11objc_objectP18AGXG17FamilyDevicePP7NSErrorU13block_pointerFvSD_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a4);
  }
  uint64_t v6 = *(void **)(a1 + 40);
  if (v6) {
    *uint64_t v6 = a4;
  }
  return result;
}

void sub_2429C04EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id AGX::UserTileShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createTileRenderPipeline(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, id a7)
{
  uint64_t v14 = mach_absolute_time();
  if (_MTLCompilePerformanceStatisticsEnabled()) {
    uint64_t v15 = a4 | 0x400000;
  }
  else {
    uint64_t v15 = a4;
  }
  if (!a6)
  {
    if (a2)
    {
      id v38 = 0;
      if ([a2 validateWithDevice:a3 error:&v38])
      {
LABEL_11:
        if (a7) {
          a2 = (void *)[a2 copy];
        }
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v49, a3, [a2 tileFunction], objc_msgSend(a2, "linkedFunctions"), objc_msgSend(a2, "preloadedLibraries"), (uint64_t)a6);
        uint64_t v20 = v49;
        if (v49)
        {
          uint64_t v21 = [a2 tileFunction];
          uint64_t v45 = 0;
          size_t v46 = &v45;
          uint64_t v47 = 0x2020000000;
          uint64_t v48 = 0;
          uint64_t v22 = *(NSObject **)(a1 + 16);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          void block[2] = ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileRenderPipelineEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSB_SE_E_block_invoke;
          block[3] = &unk_26516F130;
          block[4] = v21;
          void block[5] = &v45;
          dispatch_sync(v22, block);
          id v38 = 0;
          uint64_t v39 = &v38;
          uint64_t v40 = 0x3052000000;
          unint64_t v41 = __Block_byref_object_copy_;
          unint64_t v42 = __Block_byref_object_dispose_;
          uint64_t v43 = 0;
          uint64_t v30 = v46[3];
          v31[0] = MEMORY[0x263EF8330];
          v31[1] = 3321888768;
          void v31[2] = ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileRenderPipelineEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSB_SE_E_block_invoke_2;
          v31[3] = &unk_26F851BC8;
          v31[10] = a1;
          v31[4] = a3;
          v31[5] = a2;
          v31[8] = &v38;
          v31[6] = v21;
          uint64_t v32 = v20;
          int v33 = a6;
          BOOL v37 = a7 != 0;
          uint64_t v34 = v15;
          uint64_t v35 = v14;
          uint64_t v36 = a5;
          v31[7] = a7;
          v31[9] = &v45;
          AGX::UserTileShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createTileProgramVariant((void ***)a1, a2, a3, v15, 0, v20, v30, a7 != 0, (uint64_t)v31);
          if (a7) {

          }
          a7 = v39[5];
          _Block_object_dispose(&v38, 8);
          _Block_object_dispose(&v45, 8);
        }
        else
        {
          a7 = 0;
        }
        return a7;
      }
      uint64_t v27 = [v38 localizedDescription];
      uint64_t v28 = [NSDictionary dictionaryWithObject:v27 forKey:*MEMORY[0x263F08320]];
      id v26 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v28];
      if (!a7) {
        return 0;
      }
    }
    else
    {
      uint64_t v25 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
      id v26 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v25];
      if (!a7) {
        return a7;
      }
    }
    id v19 = v26;
    goto LABEL_23;
  }
  *a6 = 0;
  if (a2)
  {
    id v38 = 0;
    if (![a2 validateWithDevice:a3 error:&v38])
    {
      uint64_t v16 = [v38 localizedDescription];
      uint64_t v17 = [NSDictionary dictionaryWithObject:v16 forKey:*MEMORY[0x263F08320]];
      id v18 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v17];
      id v19 = v18;
      if (!a7)
      {
        *a6 = v18;
        return 0;
      }
LABEL_23:
      (*((void (**)(id, void, void, id))a7 + 2))(a7, 0, 0, v19);
      return 0;
    }
    goto LABEL_11;
  }
  uint64_t v23 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
  id v24 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v23];
  id v19 = v24;
  if (a7) {
    goto LABEL_23;
  }
  *a6 = v24;
  return a7;
}

void sub_2429C0A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v32 - 128), 8);

  _Unwind_Resume(a1);
}

void *AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(void *result, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v6 = result;
  id v21 = a5;
  uint64_t v22 = a2;
  uint64_t v20 = a6;
  if (a3)
  {
    v18[0] = &v21;
    v18[1] = &v20;
    v18[2] = &v22;
    v18[3] = &v19;
    id v19 = (id)objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(a5, "count"));
    uint64_t v12 = (void *)[a2 loadDynamicLibrariesForFunction:a3 insertLibraries:a5 error:a6];
    if ([v12 count])
    {
      unint64_t v13 = 0;
      do
      {
        if ((objc_msgSend(v19, "containsObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", v13)) & 1) == 0) {
          objc_msgSend(v19, "addObject:", objc_msgSend(v12, "objectAtIndexedSubscript:", v13));
        }
        ++v13;
      }
      while ([v12 count] > v13);
    }

    uint64_t v17 = (void **)v18;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(AGXG17FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)[a4 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(AGXG17FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)[a4 binaryFunctions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(AGXG17FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(&v17, (void *)[a4 privateFunctions]);
    uint64_t v14 = objc_msgSend(MEMORY[0x263EFF980], "arrayWithCapacity:", objc_msgSend(v19, "count"));
    if ([v21 count])
    {
      unint64_t v15 = 0;
      do
      {
        if (objc_msgSend(v19, "containsObject:", objc_msgSend(v21, "objectAtIndexedSubscript:", v15))) {
          objc_msgSend(v14, "addObject:", objc_msgSend(v21, "objectAtIndexedSubscript:", v15));
        }
        ++v15;
      }
      while ([v21 count] > v15);
    }
    if ([v19 count])
    {
      unint64_t v16 = 0;
      do
      {
        if ((objc_msgSend(v14, "containsObject:", objc_msgSend(v19, "objectAtIndexedSubscript:", v16)) & 1) == 0) {
          objc_msgSend(v14, "addObject:", objc_msgSend(v19, "objectAtIndexedSubscript:", v16));
        }
        ++v16;
      }
      while ([v19 count] > v16);
    }
    uint64_t result = (void *)[v14 copy];
    *uint64_t v6 = result;
  }
  else
  {
    *uint64_t result = MEMORY[0x263EFFA68];
  }
  return result;
}

AGXG17FamilyTileProgram *___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileRenderPipelineEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSB_SE_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) vendorPrivate];
  unint64_t v3 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v2;
  if (!v2)
  {
    unint64_t v3 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
    [*(id *)(a1 + 32) setVendorPrivate:v3];

    uint64_t result = (AGXG17FamilyTileProgram *)v3->_tile;
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t result = objc_alloc_init(AGXG17FamilyTileProgram);
    v3->_tile = result;
    goto LABEL_3;
  }
  uint64_t result = *(AGXG17FamilyTileProgram **)(v2 + 24);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &result->_impl;
  return result;
}

id ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileRenderPipelineEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSB_SE_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a2)
  {
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) = [[AGXG17FamilyTileRenderPipeline alloc] initWithDeviceAndTileDesc:*(void *)(a1 + 32) tilePipelineStateDescriptor:*(void *)(a1 + 40)];
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setTileVariant(*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) + 144, a2, *(_DWORD *)([*(id *)(a1 + 40) _descriptorPrivate] + 112));
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionPipelineSets<true>(&v20, *(void **)(a1 + 32), (void *)(a2 + 552), objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "linkedFunctions"), "binaryFunctions"), objc_msgSend(*(id *)(a1 + 40), "maxCallStackDepth"));
    unint64_t v8 = v20;
    if (!*v20)
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) + 144;
      uint64_t v14 = v21;
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(v13 + 2944) = v8;
      unint64_t v15 = *(std::__shared_weak_count **)(v13 + 2952);
      *(void *)(v13 + 2952) = v14;
      if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    unint64_t v9 = v21;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    uint64_t v10 = (void *)[*(id *)(a1 + 40) linkedFunctions];
    [v10 functions];
    [v10 privateFunctions];
    [v10 binaryFunctions];
    if ([*(id *)(a1 + 48) relocations]) {
      objc_msgSend((id)objc_msgSend(*(id *)(a1 + 48), "relocations"), "count");
    }
    operator new();
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (a5 > 3) {
    uint64_t v12 = 5;
  }
  else {
    uint64_t v12 = qword_242EAA188[a5];
  }
  unint64_t v16 = *(void **)(a1 + 96);
  uint64_t v17 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
  id result = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v12 userInfo:v17];
  if (v11)
  {
    id v19 = *(uint64_t (**)(uint64_t, void, void, id))(v11 + 16);
    return (id)v19(v11, 0, 0, result);
  }
  else if (v16)
  {
    *unint64_t v16 = result;
  }
  return result;
}

void sub_2429C2888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  os_unfair_lock_unlock(v62);
  std::unique_ptr<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter,std::default_delete<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter>>::~unique_ptr[abi:nn180100](&a41);
  _Unwind_Resume(a1);
}

void AGX::UserTileShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createTileProgramVariant(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, NSArray *a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v171 = *MEMORY[0x263EF8340];
  v103[0] = 0;
  v103[1] = v103;
  v103[2] = 0x3052000000;
  v103[3] = __Block_byref_object_copy_;
  v103[4] = __Block_byref_object_dispose_;
  v103[5] = 0;
  uint64_t v96 = [a2 tileFunction];
  dispatch_object_t object = [a2 newSerializedTileDataWithFlags:540 options:0 error:0];
  {
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLTileRenderPipelineDescriptor>(MTLTileRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLTileRenderPipelineDescriptor>(MTLTileRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    [a2 newPipelineScript];
    operator new();
  }
  AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)&v102, (MTLLinkedFunctions *)[a2 linkedFunctions], a6);
  long long v155 = 0u;
  memset(v156, 0, 31);
  long long __p = 0u;
  long long v154 = 0u;
  LODWORD(v157) = 1;
  WORD2(v157) = 0;
  int v158 = 0;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  bzero(&__p, 0x28uLL);
  uint64_t v13 = [a2 _descriptorPrivate];
  id v14 = *(id *)v13;
  uint64_t v15 = objc_msgSend((id)objc_msgSend(*(id *)v13, "objectAtIndexedSubscript:", 0), "pixelFormat");
  if (v15)
  {
    if ((v15 - 1) > 0x284) {
      unint64_t v16 = &texFormatUnsupported;
    }
    else {
      unint64_t v16 = (uint64_t *)*(&off_26516F8A0 + (v15 - 1));
    }
    *(void *)&long long v159 = v16;
    DWORD2(v155) |= 1u;
  }
  uint64_t v17 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 1), "pixelFormat");
  if (v17)
  {
    if ((v17 - 1) > 0x284) {
      id v18 = &texFormatUnsupported;
    }
    else {
      id v18 = (uint64_t *)*(&off_26516F8A0 + (v17 - 1));
    }
    *((void *)&v159 + 1) = v18;
    DWORD2(v155) |= 2u;
  }
  uint64_t v19 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 2), "pixelFormat");
  if (v19)
  {
    if ((v19 - 1) > 0x284) {
      uint64_t v20 = &texFormatUnsupported;
    }
    else {
      uint64_t v20 = (uint64_t *)*(&off_26516F8A0 + (v19 - 1));
    }
    *(void *)&long long v160 = v20;
    DWORD2(v155) |= 4u;
  }
  uint64_t v21 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 3), "pixelFormat");
  if (v21)
  {
    if ((v21 - 1) > 0x284) {
      uint64_t v22 = &texFormatUnsupported;
    }
    else {
      uint64_t v22 = (uint64_t *)*(&off_26516F8A0 + (v21 - 1));
    }
    *((void *)&v160 + 1) = v22;
    DWORD2(v155) |= 8u;
  }
  uint64_t v23 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 4), "pixelFormat");
  if (v23)
  {
    if ((v23 - 1) > 0x284) {
      id v24 = &texFormatUnsupported;
    }
    else {
      id v24 = (uint64_t *)*(&off_26516F8A0 + (v23 - 1));
    }
    *(void *)&long long v161 = v24;
    DWORD2(v155) |= 0x10u;
  }
  uint64_t v25 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 5), "pixelFormat");
  if (v25)
  {
    if ((v25 - 1) > 0x284) {
      id v26 = &texFormatUnsupported;
    }
    else {
      id v26 = (uint64_t *)*(&off_26516F8A0 + (v25 - 1));
    }
    *((void *)&v161 + 1) = v26;
    DWORD2(v155) |= 0x20u;
  }
  uint64_t v27 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 6), "pixelFormat");
  if (v27)
  {
    if ((v27 - 1) > 0x284) {
      uint64_t v28 = &texFormatUnsupported;
    }
    else {
      uint64_t v28 = (uint64_t *)*(&off_26516F8A0 + (v27 - 1));
    }
    *(void *)&long long v162 = v28;
    DWORD2(v155) |= 0x40u;
  }
  uint64_t v29 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 7), "pixelFormat");
  if (v29)
  {
    if ((v29 - 1) > 0x284) {
      uint64_t v30 = &texFormatUnsupported;
    }
    else {
      uint64_t v30 = (uint64_t *)*(&off_26516F8A0 + (v29 - 1));
    }
    *((void *)&v162 + 1) = v30;
    DWORD2(v155) |= 0x80u;
  }
  uint64_t v31 = *(void *)(v13 + 8);
  if (!v31) {
    LOBYTE(v31) = [a2 sampleCount];
  }
  BYTE4(v157) = v31;
  uint64_t v32 = *(void *)(v13 + 48);
  if (!v32) {
    uint64_t v32 = [a2 sampleCount];
  }
  BYTE5(v157) = v32;
  if (objc_msgSend((id)objc_msgSend(a2, "tileFunction"), "functionType") == 3) {
    BYTE4(v157) = v32;
  }
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&__p, 0);
  *(_OWORD *)&v102.ds.encoded.__elems_[0].var0 = __p;
  *(_OWORD *)&v102.ds.encoded.__elems_[4].var0 = v154;
  *(void *)&v102.ds.var0.var0 = v155;
  uint64_t v33 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count");
  int v34 = [a2 supportAddingBinaryFunctions];
  if (objc_msgSend((id)objc_msgSend(0, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v35 = 4; {
  else
  }
    int v35 = 0;
  v102.cs.common.unsigned int key = v102.cs.common.key & 0xFFFFFFFB | v35;
  unsigned __int16 v36 = objc_msgSend((id)objc_msgSend(0, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
  v102.cs.common.unsigned int key = v102.cs.common.key & 0xFC0003FF | (v36 << 10);
  if (objc_msgSend((id)objc_msgSend(0, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v37 = 0x8000000; {
  else
  }
    int v37 = 0;
  if (v33) {
    int v38 = 1;
  }
  else {
    int v38 = v34;
  }
  if (v38) {
    int v39 = 512;
  }
  else {
    int v39 = 0;
  }
  v102.cs.common.unsigned int key = v37 | v102.cs.common.key & 0xF7FFFDFF | v39;
  uint64_t v40 = *(void **)[a2 _descriptorPrivate];
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 0), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x1010101u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 1), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x2020202u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 2), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x4040404u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 3), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x8080808u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 4), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x10101010u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 5), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x20202020u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 6), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x40404040u;
  }
  if (objc_msgSend((id)objc_msgSend(v40, "objectAtIndexedSubscript:", 7), "pixelFormat")) {
    v102.cs.colorMaskState.key |= 0x80808080;
  }
  int v41 = [a2 threadgroupSizeMatchesTileSize];
  v102.ts.var0.unsigned int key = v102.ts.var0.key & 0xFFFFFFFE | v41;
  v102.ts.maxTotalThreadsPerThreadgroup = [a2 maxTotalThreadsPerThreadgroup];
  unint64_t v42 = (void *)[a2 tileBuffers];
  unint64_t v43 = 0;
  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v45 = objc_msgSend((id)objc_msgSend(v42, "_descriptorAtIndex:", i), "mutability");
    uint64_t v46 = 1 << i;
    if (v45 != 1) {
      uint64_t v46 = 0;
    }
    v43 |= v46;
  }
  v102.cs.mutableBuffers = v43;
  uint64_t v47 = [a2 textureWriteRoundingMode];
  int v48 = 16 * (v47 == 1);
  if (v47 == 2) {
    int v48 = 32;
  }
  v102.cs.var0.unsigned int key = v48 | v102.cs.var0.key & 0xFFFFFFCF;
  if ([a2 supportAddingBinaryFunctions]) {
    int v49 = 64;
  }
  else {
    int v49 = (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count") != 0) << 6;
  }
  unsigned int v50 = v102.cs.var0.key & 0xFFFFFDBF | v49;
  v51.unsigned int key = ((*(_DWORD *)(a3[101] + 7288) << 29) & 0x40000000 | v102.cs.common.key & 0x8BFFFE7F | (*(unsigned __int8 *)(a3[101] + 7440) << 26)) ^ 0x40000000;
  unsigned int key = v50 & 0xFFFFF7F7;
  v102.cs.commounint64_t n = v51;
  v102.cs.var0.unsigned int key = key;
  v102.unint64_t non_reflection_pipeline_options = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v53 = 1;
    v51.var0 = ($CBEC0DC0C06941078BCF76921B43C9FE)v102.cs.common;
    unsigned int key = v102.cs.var0.key;
  }
  else
  {
    int v53 = 0;
  }
  v102.cs.common.unsigned int key = v53 | (a4 >> 21) & 8 | v51.key & 0xFFFFFFF4;
  v102.cs.var0.unsigned int key = key & 0xFFFFFF7F;
  if (objc_msgSend((id)objc_msgSend(a2, "tileFunction"), "functionType") == 3) {
    v102.ds.var0.unsigned int key = v102.ds.var0.key & 0xFFFFF0FF | (*(_WORD *)&v102.ds.var0.var0 >> 12 << 8);
  }
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&__p, (void *)[a2 gpuCompilerSPIOptions]);
  long long v151 = __p;
  long long v152 = v154;
  uint64_t v54 = (os_unfair_lock_s *)(a7 + 1400);
  os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1400));
  uint64_t v55 = *(void **)(a7 + 1360);
  uint64_t v56 = *(unsigned int *)(a7 + 1368);
  int v57 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v55, v56, &v151);
  if (!v57)
  {
    if (v56 == 4) {
      operator new();
    }
    uint64_t v58 = (long long *)&v55[4 * v56];
    long long v59 = v152;
    *uint64_t v58 = v151;
    v58[1] = v59;
    uint64_t v60 = *(void *)(a7 + 1360);
    unsigned int v61 = *(_DWORD *)(a7 + 1368);
    *(_DWORD *)(a7 + 136_Block_object_dispose(&a9, 8) = v61 + 1;
    int v57 = (void *)(v60 + 24 * v61 + 128);
  }
  std::string::size_type v95 = a6;
  uint64_t v62 = a4 & 0x330000 | 3;
  if ((v62 & ~v57[1]) != 0)
  {
    uint64_t v63 = *v57 | v62;
    *int v57 = v63;
  }
  else
  {
    uint64_t v63 = 0;
  }
  os_unfair_lock_unlock(v54);
  unint64_t v64 = v63 | a4 & 0xFFFFFFFFFFCCFFFCLL;
  if (v63 & 4 | a4 & 4 || a5) {
    operator new();
  }
  os_unfair_lock_lock(v54);
  uint64_t v65 = VectorMap<AGX::TileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>,4u>::operator[](a7, (uint64_t)&v102);
  if (*(void *)v65)
  {
    if (!*(unsigned char *)(v65 + 40))
    {
      if ((v63 & 0x330003) != 0)
      {
        dispatch_group_enter(*(dispatch_group_t *)v65);
        os_unfair_lock_unlock(v54);
        std::string::size_type v93 = *a1;
        uint64_t v127 = MEMORY[0x263EF8330];
        uint64_t v128 = 3221225472;
        long long v136 = v151;
        float v129 = ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_1972;
        BOOL v130 = &unk_26516F180;
        uint64_t v133 = a7;
        unint64_t v134 = v63 | a4 & 0xFFFFFFFFFFCCFFFCLL;
        long long v137 = v152;
        unint64_t v131 = a3;
        uint64_t v132 = v96;
        uint64_t v135 = v65;
        objc_msgSend(*v93, "reflectionWithFunction:options:sync:completionHandler:");
      }
      else
      {
        os_unfair_lock_unlock(v54);
      }
      goto LABEL_136;
    }
    uint64_t v66 = *(void *)(v65 + 8);
    if (v66) {
      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
    }
    *(void *)(v65 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(v65 + 16) = 0;

    *(void *)(v65 + 24) = 0;
    *(void *)(v65 + 32) = 0;
    *(unsigned char *)(v65 + 40) = 0;
    unint64_t v67 = *(NSObject **)v65;
  }
  else
  {
    unint64_t v67 = dispatch_group_create();
    *(void *)uint64_t v65 = v67;
  }
  dispatch_group_enter(v67);
  os_unfair_lock_unlock(v54);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  BOOL v68 = objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0;
  unint64_t v69 = objc_opt_new();
  [v69 setSync:a8 ^ 1u];
  [v69 setFunction:v96];
  [v69 setFrameworkData:object];
  [v69 setDestinationBinaryArchive:0];
  objc_msgSend(v69, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
  [v69 setPipelineOptions:a4 | 3];
  if ((a4 & 0x330003) == 0) {
    objc_msgSend(v69, "setPipelineOptions:", objc_msgSend(v69, "pipelineOptions") | 0x8000);
  }
  unint64_t v70 = [a2 newPipelineScript];
  if (v70)
  {
    [v69 setAirScript:v70];
    dispatch_release(v70);
  }
  objc_msgSend(v69, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
  unint64_t v71 = (void *)[a2 linkedFunctions];
  objc_msgSend(v69, "setVisibleFunctions:", objc_msgSend(v71, "functions"));
  objc_msgSend(v69, "setVisibleFunctionGroups:", objc_msgSend(v71, "groups"));
  objc_msgSend(v69, "setPrivateVisibleFunctions:", objc_msgSend(v71, "privateFunctions"));
  BOOL v72 = v68;
  unint64_t v73 = v64;
  uint64_t v94 = [a2 maxCallStackDepth];
  uint64_t v74 = (void *)[a2 linkedFunctions];
  char v75 = [a2 supportAddingBinaryFunctions];
  uint64_t v76 = [a2 gpuCompilerSPIOptions];
  char v77 = [a3 requiresRaytracingEmulation];
  v138[0] = MEMORY[0x263EF8330];
  v138[1] = 3321888768;
  v138[2] = ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke;
  v138[3] = &unk_26F851EB8;
  v138[8] = a1;
  v138[7] = v103;
  char v147 = a8;
  v138[9] = v65;
  v138[10] = a7;
  v138[11] = v73;
  long long v148 = v151;
  long long v149 = v152;
  v138[4] = v96;
  v138[5] = a3;
  AGX::Impl::TileProgramKey::TileProgramKey((AGX::Impl::TileProgramKey *)&v139, &v102);
  unint64_t non_reflection_pipeline_options = v102.non_reflection_pipeline_options;
  size_t v139 = (uint64_t (**)())&unk_26F852A78;
  v138[6] = a2;
  char v150 = v72 & (a4 >> 2);
  if ((v77 & 1) == 0
    && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v74))
  {
    LOBYTE(__p) = v77;
    *((void *)&__p + 1) = v94;
    long long v154 = (unint64_t)v74;
    *(void *)&long long v155 = 0;
    *((void *)&v155 + 1) = a4;
    v156[0] = v95;
    v156[1] = a3;
    v156[2] = 0;
    LOBYTE(v156[3]) = 0;
    BYTE1(v156[3]) = v75;
    uint64_t v157 = v76;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::TileProgramKey,true>(a1, (uint64_t)&v102, v69, &__p, (uint64_t)v138);
  }
  else
  {
    char v78 = *a1;
    v104[0] = MEMORY[0x263EF8330];
    v104[1] = 3221225472;
    v104[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14TileProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
    v104[3] = &unk_26516F018;
    v104[4] = v138;
    v105[0] = MEMORY[0x263EF8330];
    v105[1] = 3221225472;
    v105[2] = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    v105[3] = &unk_26516F7C0;
    v105[4] = v104;
    size_t v106 = 0;
    size_t v107 = 0;
    (*((void (**)(TileProgramKey *, const void **, size_t *))v102._vptr$ProgramKey + 2))(&v102, &v107, &v106);
    int v79 = dispatch_data_create(v107, v106, 0, 0);
    [v69 setDriverKeyData:v79];
    if ([v69 airScript])
    {
      unsigned __int8 v80 = [v69 airScript];
      long long v169 = 0uLL;
      *(void *)&long long v170 = 0;
      *(void *)&long long v169 = dispatch_data_create_map(v80, (const void **)&v169 + 1, (size_t *)&v170);
      uint64_t v81 = *((void *)&v169 + 1);
      uint64_t v82 = **((_DWORD **)&v169 + 1);
      CC_SHA256_Init((CC_SHA256_CTX *)&__p);
      ((void (*)(TileProgramKey *, long long *))*v102._vptr$ProgramKey)(&v102, &__p);
      *(void *)leunint64_t n = 0;
      data = 0;
      if (AGX::GetSerializedVertexFormat((AGX *)(v81 + v82), &data, (size_t *)len, v83, v84))
      {
        uint64_t v85 = data;
        CC_SHA256_Update((CC_SHA256_CTX *)&__p, data, len[0]);
        free(v85);
      }
      CC_SHA256_Final((unsigned __int8 *)&md, (CC_SHA256_CTX *)&__p);
      dispatch_release((dispatch_object_t)v169);
      long long v169 = md;
      long long v170 = v166;
      [v69 setVendorPluginFunctionId:&v169];
    }
    *(void *)&long long __p = MEMORY[0x263EF8330];
    *((void *)&__p + 1) = 3221225472;
    *(void *)&long long v154 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
    *((void *)&v154 + 1) = &unk_26516F810;
    *((void *)&v155 + 1) = v105;
    *(void *)&long long v155 = v69;
    if ([v69 function])
    {
      uint64_t v86 = mach_absolute_time();
      unint64_t v87 = *v78;
      *(void *)&long long md = MEMORY[0x263EF8330];
      *((void *)&md + 1) = 3221225472;
      *(void *)&long long v166 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
      *((void *)&v166 + 1) = &unk_26516F860;
      p_p = &__p;
      uint64_t v168 = v86;
      [v87 compileFunctionRequest:v69 completionHandler:&md];
    }
    else
    {
      if ([v69 frameworkData] || objc_msgSend(v69, "pipelineOptions")) {
        AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
      }
      *(void *)&long long md = MEMORY[0x263EF8330];
      *((void *)&md + 1) = 3221225472;
      *(void *)&long long v166 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
      *((void *)&v166 + 1) = &unk_26516F838;
      p_p = &__p;
      uint64_t v88 = objc_msgSend((id)objc_msgSend(v69, "binaryArchives"), "count");
      int v89 = *v78;
      uint64_t v90 = [v69 driverKeyData];
      if (v88) {
        objc_msgSend(v89, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v90, objc_msgSend(v69, "binaryArchives"), 0, objc_msgSend(v69, "pipelineCache"), objc_msgSend(v69, "sync"), &md);
      }
      else {
        objc_msgSend(v89, "compileRequest:pipelineCache:sync:completionHandler:", v90, objc_msgSend(v69, "pipelineCache"), objc_msgSend(v69, "sync"), &md);
      }
    }
    dispatch_release(v79);
  }

  size_t v139 = (uint64_t (**)())&unk_26F854090;
  if (v144)
  {
    unint64_t v145 = v144;
    operator delete(v144);
  }
  if (v142)
  {
    uint64_t v143 = v142;
    operator delete(v142);
  }
  size_t v139 = off_26F852A38;
  if (v140)
  {
    unint64_t v141 = v140;
    operator delete(v140);
  }
LABEL_136:
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  uint64_t v111 = ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2;
  uint64_t v112 = &unk_26F851EF0;
  uint64_t v115 = a7;
  uint64_t v116 = v65;
  AGX::Impl::TileProgramKey::TileProgramKey((AGX::Impl::TileProgramKey *)&v117, &v102);
  uint64_t v117 = (uint64_t (**)())&unk_26F852A78;
  unint64_t v124 = v102.non_reflection_pipeline_options;
  long long v125 = v151;
  long long v126 = v152;
  uint64_t v113 = a9;
  unint64_t v114 = v103;
  int v91 = *(NSObject **)v65;
  if (a8)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v91, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v91, 0xFFFFFFFFFFFFFFFFLL);
    v111(block);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v117 = (uint64_t (**)())&unk_26F854090;
  if (v122)
  {
    uint64_t v123 = v122;
    operator delete(v122);
  }
  if (v120)
  {
    unint64_t v121 = v120;
    operator delete(v120);
  }
  uint64_t v117 = off_26F852A38;
  if (v118)
  {
    uint64_t v119 = v118;
    operator delete(v118);
  }
  v102._vptr$ProgramKey = (void **)&unk_26F854090;
  if (v102.visible_functions.visible_functions_hash.__begin_)
  {
    v102.visible_functions.visible_functions_hash.__end_ = v102.visible_functions.visible_functions_hash.__begin_;
    operator delete(v102.visible_functions.visible_functions_hash.__begin_);
  }
  if (v102.dynamic_libraries.dynamic_libraries_hash.__begin_)
  {
    v102.dynamic_libraries.dynamic_libraries_hash.__end_ = v102.dynamic_libraries.dynamic_libraries_hash.__begin_;
    operator delete(v102.dynamic_libraries.dynamic_libraries_hash.__begin_);
  }
  v102._vptr$ProgramKey = (void **)off_26F852A38;
  if (v102.stream.__begin_)
  {
    v102.stream.__end_ = v102.stream.__begin_;
    operator delete(v102.stream.__begin_);
  }
  _Block_object_dispose(v103, 8);
}

void sub_2429C3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  os_unfair_lock_unlock(v45);
  AGX::TileProgramKey::~TileProgramKey((AGX::TileProgramKey *)&a18);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 312));
  uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v5)
  {
    uint64_t v6 = (void *)[v5 objectForKey:*MEMORY[0x263F12630]];
    if (v6) {
      [v6 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v13 = a3;
  id v14 = *(void **)(a3 + 48);
  AGX::Program<AGX::HAL200::TileProgramVariant,AGX::TileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 80), *(void *)(a1 + 88), *(NSObject **)(a3 + 16), a1 + 313, *(void **)(a1 + 40), [*(id *)(a1 + 32) functionType], v7);
  if (!v7)
  {
    unint64_t v8 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v8)
    {
      unint64_t v9 = v8;
      [v8 uscCliqueTraceLevel];
      [v9 uscEmitPosition];
      [v9 uscEmitThreadControlFlow];
    }
    operator new();
  }
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v11 = *(void **)(v13 + 32);
  char v12 = *(unsigned char *)(a1 + 345);
  *(void *)(v10 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(v10 + 16) = v7;

  *(void *)(v10 + 24) = [v14 copy];
  if (*(void *)(v10 + 8))
  {

    *(void *)(v10 + 32) = v11;
  }
  else
  {
    *(unsigned char *)(v10 + 40) = v12;
  }
  dispatch_group_leave(*(dispatch_group_t *)v10);
}

void sub_2429C49B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::mutex *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, AGX::HAL200::FragmentProgramVariantESLState *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  std::mutex::~mutex(a6);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a9);
  AGX::HAL200::FragmentProgramVariantESLState::~FragmentProgramVariantESLState(a12);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v16);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  MEMORY[0x24566ED90](v16, 0x10F3C4040ED8C3DLL);
  _Unwind_Resume(a1);
}

AGX::Impl::TileProgramKey *AGX::Impl::TileProgramKey::TileProgramKey(AGX::Impl::TileProgramKey *this, const TileProgramKey *a2)
{
  *(void *)this = off_26F852A38;
  *((_DWORD *)this + 2) = a2->streamType;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  begiunint64_t n = a2->stream.__begin_;
  std::vector<unsigned int>::pointer end = a2->stream.__end_;
  int64_t v6 = (char *)end - (char *)begin;
  if (end != begin)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new((char *)end - (char *)begin);
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)this + 4) = v8;
    memcpy(v7, begin, v6);
    *((void *)this + 3) = v8;
  }
  *(void *)this = &unk_26F854090;
  long long v9 = *(_OWORD *)&a2->cs.var0.var0;
  long long v10 = *(_OWORD *)&a2->ds.encoded.__elems_[2].var0;
  long long v11 = *(_OWORD *)&a2->ds.encoded.__elems_[6].var0;
  _AGCTileState ts = a2->ts;
  long long v13 = *(_OWORD *)&a2->cs.fragmentState.var0;
  long long v14 = *(_OWORD *)&a2->cs.mutableBuffers;
  long long v15 = *(_OWORD *)&a2->cs.blendState[2].var0;
  long long v16 = *(_OWORD *)&a2->cs.blendState[6].var0;
  *((void *)this + 20) = 0;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&a9, 8) = v16;
  *(_OWORD *)((char *)this + 72) = v15;
  *(_OWORD *)((char *)this + 56) = v14;
  *(_OWORD *)((char *)this + 40) = v13;
  *((_AGCTileState *)this + 19) = ts;
  *(_OWORD *)((char *)this + 136) = v11;
  *(_OWORD *)((char *)this + 120) = v10;
  *(_OWORD *)((char *)this + 104) = v9;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  id v18 = a2->dynamic_libraries.dynamic_libraries_hash.__begin_;
  uint64_t v17 = a2->dynamic_libraries.dynamic_libraries_hash.__end_;
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    uint64_t v20 = (char *)operator new(v17 - v18);
    *((void *)this + 20) = v20;
    *((void *)this + 21) = v20;
    uint64_t v21 = &v20[32 * (v19 >> 5)];
    *((void *)this + 22) = v21;
    memcpy(v20, v18, v19);
    *((void *)this + 21) = v21;
  }
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  uint64_t v23 = a2->visible_functions.visible_functions_hash.__begin_;
  uint64_t v22 = a2->visible_functions.visible_functions_hash.__end_;
  int64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0) {
      abort();
    }
    uint64_t v25 = (char *)operator new(v22 - v23);
    *((void *)this + 23) = v25;
    *((void *)this + 24) = v25;
    id v26 = &v25[32 * (v24 >> 5)];
    *((void *)this + 25) = v26;
    memcpy(v25, v23, v24);
    *((void *)this + 24) = v26;
  }
  return this;
}

void sub_2429C4BFC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  *uint64_t v1 = v2;
  int64_t v6 = (void *)v1[2];
  if (v6)
  {
    v1[3] = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(void *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = (void *)[a1 functions];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v13;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v13 != v5) {
        objc_enumerationMutation(v2);
      }
      if ([*(id *)(*((void *)&v12 + 1) + 8 * v6) functionType] == 6) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v7 = (void *)[a1 privateFunctions];
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t result = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)v13;
LABEL_11:
    uint64_t v11 = 0;
    while (1)
    {
      if (*(void *)v13 != v10) {
        objc_enumerationMutation(v7);
      }
      if ([*(id *)(*((void *)&v12 + 1) + 8 * v11) functionType] == 6) {
        break;
      }
      if (v9 == ++v11)
      {
        uint64_t result = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
        uint64_t v9 = result;
        if (result) {
          goto LABEL_11;
        }
        return result;
      }
    }
  }
  return 1;
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::TileProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_14TileProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  uint64_t v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  uint64_t v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    long long v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      uint64_t v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)int v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    int64_t v19 = *v7;
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    uint64_t v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429C51B8(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_14TileProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429C5270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void AGX::TileProgramKey::~TileProgramKey(AGX::TileProgramKey *this)
{
  *(void *)this = &unk_26F854090;
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  *(void *)this = off_26F852A38;
  uint64_t v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

void ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_1972(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::TileProgramVariant,AGX::TileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 48), *(void *)(a1 + 56), a3, a1 + 72, *(void **)(a1 + 32), [*(id *)(a1 + 40) functionType], a2);
  uint64_t v4 = **(NSObject ***)(a1 + 64);

  dispatch_group_leave(v4);
}

void ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileProgramVariantEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_11TileProgramEbU13block_pointerFvPNS1_18TileProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2(void *a1)
{
  memset(v12, 0, 26);
  uint64_t v2 = a1[7];
  if (!*(unsigned char *)(v2 + 41))
  {
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  if (*(void *)(v2 + 8))
  {
    uint64_t v3 = (os_unfair_lock_s *)a1[6];
    uint64_t v4 = v3 + 350;
    os_unfair_lock_lock(v3 + 350);
    uint64_t v5 = VectorMap<AGX::TileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>,4u>::operator[]((uint64_t)v3, (uint64_t)(a1 + 8));
    if (*(void *)v5)
    {
      os_unfair_lock_unlock(v4);
      dispatch_group_wait(*(dispatch_group_t *)v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      long long v8 = dispatch_group_create();
      *(void *)uint64_t v5 = v8;
      dispatch_group_enter(v8);
      uint64_t v9 = *(void *)(v2 + 16);
      uint64_t v10 = *(void **)(v2 + 24);
      *(void *)(v5 + _Block_object_dispose(&a9, 8) = *(void *)(v2 + 8);
      *(void *)(v5 + 16) = v9;

      *(void *)(v5 + 24) = objc_msgSend(v10, "copy", (unsigned __int128)0, 0, *(_OWORD *)&v12[8], *(void *)&v12[24]);
      if (*(void *)(v5 + 8))
      {

        *(void *)(v5 + 32) = 0;
      }
      else
      {
        *(unsigned char *)(v5 + 40) = 0;
      }
      dispatch_group_leave(*(dispatch_group_t *)v5);
      *(void *)(v2 + _Block_object_dispose(&a9, 8) = 0;
      os_unfair_lock_unlock(v4);
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v6 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  dispatch_release(v7);
LABEL_14:
  uint64_t v11 = *(void *)(v2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](v2, 0x10A0C405D73F519);
LABEL_17:
  (*(void (**)(void))(a1[4] + 16))();
}

void sub_2429C55DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_64c26_ZTSN3AGX14TileProgramKeyE(void *a1)
{
  a1[8] = &unk_26F854090;
  uint64_t v2 = (void *)a1[31];
  if (v2)
  {
    a1[32] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[28];
  if (v3)
  {
    a1[29] = v3;
    operator delete(v3);
  }
  a1[8] = off_26F852A38;
  uint64_t v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
}

AGX::Impl::TileProgramKey *__copy_helper_block_e8_64c26_ZTSN3AGX14TileProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGX::Impl::TileProgramKey::TileProgramKey((AGX::Impl::TileProgramKey *)(a1 + 64), (const TileProgramKey *)(a2 + 64));
  *(void *)(a1 + 64) = &unk_26F852A78;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  return result;
}

uint64_t AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>::~ProgramVariantEntry(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return a1;
}

uint64_t VectorMap<AGX::TileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 1072);
  uint64_t v5 = *(void *)(a1 + 1064);
  int v6 = *(_DWORD *)(a2 + 48);
  unsigned int v8 = *(_DWORD *)(a2 + 100);
  int v7 = *(_DWORD *)(a2 + 104);
  if (!v4)
  {
    int v9 = *(_DWORD *)(a2 + 144);
    int v11 = *(_DWORD *)(a2 + 152);
    int v10 = *(_DWORD *)(a2 + 156);
    uint64_t v13 = *(void *)(a2 + 160);
    uint64_t v12 = *(void *)(a2 + 168);
    uint64_t v16 = *(void *)(a2 + 184);
    uint64_t v15 = *(void *)(a2 + 192);
    uint64_t v18 = *(void *)(a2 + 208);
LABEL_11:
    BOOL v24 = v12 != v13;
    BOOL v25 = v15 != v16;
    uint64_t v26 = *(void *)(v5 + 1056);
    if ((_BYTE)v9)
    {
      if (v26)
      {
        uint64_t v27 = a2 + 112;
        unsigned int v28 = 1;
        while (1)
        {
          uint64_t v29 = *(_DWORD *)(v26 + 104) ^ v7 | *(_DWORD *)(v26 + 48) ^ v6 | *(_DWORD *)(v26 + 100) ^ v8;
          unsigned int v30 = v9;
          do
          {
            unsigned int v31 = __clz(__rbit32(v30));
            v29 |= (*(_DWORD *)(v26 + 112 + 4 * v31) ^ *(_DWORD *)(v27 + 4 * v31));
            v30 &= ~(1 << v31);
          }
          while (v30);
          if (!(v29 | *(_DWORD *)(v26 + 156) ^ v10 | *(_DWORD *)(v26 + 144) ^ v9 | *(_DWORD *)(v26 + 152) ^ v11 | v24 | v25)
            && v18 == *(void *)(v26 + 208))
          {
            break;
          }
          uint64_t v32 = *(_DWORD *)(v26 + 320) ^ v7 | *(_DWORD *)(v26 + 264) ^ v6 | *(_DWORD *)(v26 + 316) ^ v8;
          unsigned int v33 = v9;
          do
          {
            unsigned int v34 = __clz(__rbit32(v33));
            v32 |= (*(_DWORD *)(v26 + 328 + 4 * v34) ^ *(_DWORD *)(v27 + 4 * v34));
            v33 &= ~(1 << v34);
          }
          while (v33);
          if (!(v32 | *(_DWORD *)(v26 + 372) ^ v10 | *(_DWORD *)(v26 + 360) ^ v9 | *(_DWORD *)(v26 + 368) ^ v11 | v24 | v25)
            && v18 == *(void *)(v26 + 424))
          {
            goto LABEL_56;
          }
          uint64_t v35 = *(_DWORD *)(v26 + 536) ^ v7 | *(_DWORD *)(v26 + 480) ^ v6 | *(_DWORD *)(v26 + 532) ^ v8;
          unsigned int v36 = v9;
          do
          {
            unsigned int v37 = __clz(__rbit32(v36));
            v35 |= (*(_DWORD *)(v26 + 544 + 4 * v37) ^ *(_DWORD *)(v27 + 4 * v37));
            v36 &= ~(1 << v37);
          }
          while (v36);
          if (!(v35 | *(_DWORD *)(v26 + 588) ^ v10 | *(_DWORD *)(v26 + 576) ^ v9 | *(_DWORD *)(v26 + 584) ^ v11 | v24 | v25)
            && v18 == *(void *)(v26 + 640))
          {
            goto LABEL_55;
          }
          uint64_t v38 = *(_DWORD *)(v26 + 752) ^ v7 | *(_DWORD *)(v26 + 696) ^ v6 | *(_DWORD *)(v26 + 748) ^ v8;
          unsigned int v39 = v9;
          do
          {
            unsigned int v40 = __clz(__rbit32(v39));
            v38 |= (*(_DWORD *)(v26 + 760 + 4 * v40) ^ *(_DWORD *)(v27 + 4 * v40));
            v39 &= ~(1 << v40);
          }
          while (v39);
          if (!(v38 | *(_DWORD *)(v26 + 804) ^ v10 | *(_DWORD *)(v26 + 792) ^ v9 | *(_DWORD *)(v26 + 800) ^ v11 | v24 | v25)
            && v18 == *(void *)(v26 + 856))
          {
            goto LABEL_43;
          }
          uint64_t v26 = *(void *)(v26 + 1056);
          if (!v26) {
            goto LABEL_44;
          }
        }
LABEL_54:
        unsigned int v28 = 0;
LABEL_56:
        uint64_t v51 = v26 + 48 * v28;
        return v51 + 864;
      }
    }
    else if (v26)
    {
      unsigned int v28 = 1;
      while (*(_DWORD *)(v26 + 156) ^ v10 | *(_DWORD *)(v26 + 144) ^ v9 | *(_DWORD *)(v26 + 152) ^ v11 | *(_DWORD *)(v26 + 104) ^ v7 | *(_DWORD *)(v26 + 48) ^ v6 | *(_DWORD *)(v26 + 100) ^ v8 | (v24 || v25)
           || v18 != *(void *)(v26 + 208))
      {
        if (!(*(_DWORD *)(v26 + 372) ^ v10 | *(_DWORD *)(v26 + 360) ^ v9 | *(_DWORD *)(v26 + 368) ^ v11 | *(_DWORD *)(v26 + 320) ^ v7 | *(_DWORD *)(v26 + 264) ^ v6 | *(_DWORD *)(v26 + 316) ^ v8 | (v24 || v25))
          && v18 == *(void *)(v26 + 424))
        {
          goto LABEL_56;
        }
        if (!(*(_DWORD *)(v26 + 588) ^ v10 | *(_DWORD *)(v26 + 576) ^ v9 | *(_DWORD *)(v26 + 584) ^ v11 | *(_DWORD *)(v26 + 536) ^ v7 | *(_DWORD *)(v26 + 480) ^ v6 | *(_DWORD *)(v26 + 532) ^ v8 | (v24 || v25))
          && v18 == *(void *)(v26 + 640))
        {
LABEL_55:
          unsigned int v28 = 2;
          goto LABEL_56;
        }
        if (!(*(_DWORD *)(v26 + 804) ^ v10 | *(_DWORD *)(v26 + 792) ^ v9 | *(_DWORD *)(v26 + 800) ^ v11 | *(_DWORD *)(v26 + 752) ^ v7 | *(_DWORD *)(v26 + 696) ^ v6 | *(_DWORD *)(v26 + 748) ^ v8 | (v24 || v25))
          && v18 == *(void *)(v26 + 856))
        {
LABEL_43:
          unsigned int v28 = 3;
          goto LABEL_56;
        }
        uint64_t v26 = *(void *)(v26 + 1056);
        if (!v26) {
          goto LABEL_44;
        }
      }
      goto LABEL_54;
    }
LABEL_44:
    if (v4 == 4) {
      operator new();
    }
    unsigned int v41 = v4;
    uint64_t v42 = v5 + 216 * v4;
    *(_DWORD *)(v42 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 8);
    unsigned int v43 = v4;
    uint64_t v44 = v5;
    if (v42 != a2)
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v42 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
      long long v45 = *(_OWORD *)(a2 + 40);
      long long v46 = *(_OWORD *)(a2 + 56);
      long long v47 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(v42 + 8_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(v42 + 72) = v47;
      *(_OWORD *)(v42 + 56) = v46;
      *(_OWORD *)(v42 + 40) = v45;
      long long v48 = *(_OWORD *)(a2 + 104);
      long long v49 = *(_OWORD *)(a2 + 120);
      long long v50 = *(_OWORD *)(a2 + 136);
      *(void *)(v42 + 152) = *(void *)(a2 + 152);
      *(_OWORD *)(v42 + 136) = v50;
      *(_OWORD *)(v42 + 120) = v49;
      *(_OWORD *)(v42 + 104) = v48;
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v42 + 160), *(char **)(a2 + 160), *(char **)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v42 + 184), *(char **)(a2 + 184), *(char **)(a2 + 192), (uint64_t)(*(void *)(a2 + 192) - *(void *)(a2 + 184)) >> 5);
      uint64_t v44 = *(void *)(a1 + 1064);
      unsigned int v43 = *(_DWORD *)(a1 + 1072);
      LODWORD(v4) = v43;
    }
    *(void *)(v5 + 216 * v41 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
    *(_DWORD *)(a1 + 1072) = v4 + 1;
    uint64_t v51 = v44 + 48 * v43;
    return v51 + 864;
  }
  int v9 = *(_DWORD *)(a2 + 144);
  int v11 = *(_DWORD *)(a2 + 152);
  int v10 = *(_DWORD *)(a2 + 156);
  uint64_t v13 = *(void *)(a2 + 160);
  uint64_t v12 = *(void *)(a2 + 168);
  BOOL v14 = v12 != v13;
  uint64_t v16 = *(void *)(a2 + 184);
  uint64_t v15 = *(void *)(a2 + 192);
  BOOL v17 = v15 != v16;
  uint64_t v18 = *(void *)(a2 + 208);
  uint64_t v19 = 0;
  if ((_BYTE)v9)
  {
    while (1)
    {
      BOOL v20 = (_DWORD *)(v5 + 216 * v19);
      uint64_t v21 = v20[26] ^ v7 | v20[12] ^ v6 | v20[25] ^ v8;
      unsigned int v22 = v9;
      do
      {
        unsigned int v23 = __clz(__rbit32(v22));
        v21 |= (v20[v23 + 28] ^ *(_DWORD *)(a2 + 112 + 4 * v23));
        v22 &= ~(1 << v23);
      }
      while (v22);
      if (!(v21 | v20[39] ^ v10 | v20[36] ^ v9 | v20[38] ^ v11 | v14 | v17)
        && v18 == *(void *)(v5 + 216 * v19 + 208))
      {
        break;
      }
      if (++v19 == v4) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    uint64_t v52 = v5 + 104;
    while (*(_DWORD *)(v52 + 52) ^ v10 | *(_DWORD *)(v52 + 40) ^ v9 | *(_DWORD *)(v52 + 48) ^ v11 | *(_DWORD *)v52 ^ v7 | *(_DWORD *)(v52 - 56) ^ v6 | *(_DWORD *)(v52 - 4) ^ v8 | (v14 || v17)
         || v18 != *(void *)(v52 + 104))
    {
      ++v19;
      v52 += 216;
      if (v4 == v19) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v51 = v5 + 48 * v19;
  return v51 + 864;
}

void sub_2429C5E28(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B0C40CCF2C5B9);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::TileProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::TileProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v2 = AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)a1, 0, 0);
  AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)((char *)v2 + 216), 0, 0);
  AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)(a1 + 27), 0, 0);
  AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)((char *)a1 + 648), 0, 0);
  a1[54] = 0u;
  a1[55] = 0u;
  *(_OWORD *)((char *)a1 + 890) = 0u;
  a1[57] = 0u;
  a1[58] = 0u;
  *(_OWORD *)((char *)a1 + 93_Block_object_dispose(&a9, 8) = 0u;
  a1[60] = 0u;
  a1[61] = 0u;
  *(_OWORD *)((char *)a1 + 986) = 0u;
  a1[63] = 0u;
  a1[64] = 0u;
  *(_OWORD *)((char *)a1 + 1034) = 0u;
  return a1;
}

void sub_2429C5EF0(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2 - 216;
  uint64_t v5 = v2;
  while (1)
  {
    *(void *)(v5 - 216) = &unk_26F854090;
    v5 -= 216;
    int v6 = *(void **)(v5 + 184);
    if (v6)
    {
      *(void *)(v2 - 24) = v6;
      operator delete(v6);
    }
    int v7 = *(void **)(v2 - 56);
    if (v7)
    {
      *(void *)(v2 - 4_Block_object_dispose(&a9, 8) = v7;
      operator delete(v7);
    }
    *(void *)(v2 - 216) = off_26F852A38;
    unsigned int v8 = *(void **)(v2 - 200);
    if (v8)
    {
      *(void *)(v2 - 192) = v8;
      operator delete(v8);
    }
    v4 -= 216;
    uint64_t v2 = v5;
    if (v5 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

AGX::TileProgramKey *AGX::TileProgramKey::TileProgramKey(AGX::TileProgramKey *this, MTLLinkedFunctions *a2, NSArray *a3)
{
  *((_DWORD *)this + 2) = 5;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26F854090;
  int v6 = (void **)((char *)this + 160);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)this + 20, 0);
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 23, (void *)[0 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 23, (void *)[0 privateFunctions], 1u);
  *(void *)this = &unk_26F852A78;
  *((void *)this + 26) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&__p, a3);
  if (v6 != &__p) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v6, (char *)__p, v9, (v9 - (unsigned char *)__p) >> 5);
  }
  if (__p)
  {
    int v9 = (char *)__p;
    operator delete(__p);
  }
  long long __p = 0;
  int v9 = 0;
  uint64_t v10 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, [(MTLLinkedFunctions *)a2 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__p, [(MTLLinkedFunctions *)a2 privateFunctions], 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)this + 23, (char *)__p, v9, (v9 - (unsigned char *)__p) >> 5);
  if (__p)
  {
    int v9 = (char *)__p;
    operator delete(__p);
  }
  return this;
}

void sub_2429C613C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::TileProgramKey::~TileProgramKey(v11);
  _Unwind_Resume(a1);
}

void sub_2429C6184(_Unwind_Exception *a1)
{
  int v6 = *v2;
  if (*v2)
  {
    v1[24] = v6;
    operator delete(v6);
  }
  int v7 = *v4;
  if (*v4)
  {
    v1[21] = v7;
    operator delete(v7);
  }
  *uint64_t v1 = v3;
  unsigned int v8 = (void *)v1[2];
  if (v8)
  {
    v1[3] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void AGX::Program<AGX::HAL200::TileProgramVariant,AGX::TileProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v7 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    locunint64_t k = (os_unfair_lock_s *)(a1 + 1400);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
    BOOL v14 = *(void **)(a1 + 1360);
    uint64_t v15 = *(unsigned int *)(a1 + 1368);
    uint64_t v16 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v14, *(_DWORD *)(a1 + 1368), (void *)a4);
    BOOL v17 = (void *)v16;
    if (v16)
    {
      uint64_t v18 = *(void *)(v16 + 8);
      if (a7)
      {
LABEL_4:
        *BOOL v17 = v18;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v15 == 4) {
        operator new();
      }
      uint64_t v19 = &v14[4 * v15];
      long long v20 = *(_OWORD *)(a4 + 16);
      _OWORD *v19 = *(_OWORD *)a4;
      v19[1] = v20;
      uint64_t v21 = *(void *)(a1 + 1360);
      unsigned int v22 = *(_DWORD *)(a1 + 1368);
      *(_DWORD *)(a1 + 136_Block_object_dispose(&a9, 8) = v22 + 1;
      BOOL v17 = (void *)(v21 + 24 * v22 + 128);
      uint64_t v18 = *(void *)(v21 + 24 * v22 + 136);
      if (a7) {
        goto LABEL_4;
      }
    }
    if ((v7 & ~v18) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      unsigned int v23 = v17[2];
      if (v23) {
        dispatch_release(v23);
      }
      v17[1] = v7;
      v17[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2432))
    {
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      uint64_t v32 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:a6 options:a2 | 0x8000];
      BOOL v24 = (void *)[v32 arguments];
      uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v38 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v35;
        do
        {
          for (uint64_t i = 0; i != v25; ++i)
          {
            if (*(void *)v35 != v26) {
              objc_enumerationMutation(v24);
            }
            unsigned int v28 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            if (![v28 type]
              && (objc_msgSend((id)objc_msgSend(v28, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              uint64_t v29 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v28, "bufferStructType"));
              uint64_t v30 = v29[2];
              _OWORD v29[2] = 0;
              *(void *)(a1 + 8 * [v28 index] + 140_Block_object_dispose(&a9, 8) = v30;
            }
          }
          uint64_t v25 = [v24 countByEnumeratingWithState:&v34 objects:v38 count:16];
        }
        while (v25);
      }

      *(unsigned char *)(a1 + 2432) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429C6468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  int v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *uint64_t v15 = v7;
    int v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v7;
    int v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)5,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429C6820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v3 - 24));

        *(void *)(v3 - 16) = 0;
        *(void *)(v3 - _Block_object_dispose(&a9, 8) = 0;
        v3 -= 80;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  return a1;
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_14TileProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  unint64_t v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  long long v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    uint64_t v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      unint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  uint64_t v39 = v37;
  long long v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    uint64_t v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - _Block_object_dispose(&a9, 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    uint64_t v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - _Block_object_dispose(&a9, 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429C6CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14TileProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)unint64_t v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429C704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = (long long **)a1;
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v52 = *(void *)(a1 + 24);
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v70 objects:v78 count:16];
  uint64_t v4 = result;
  if (result)
  {
    uint64_t v5 = *(void *)v71;
    long long v49 = v77;
    long long v50 = v56;
    long long v48 = v75;
    uint64_t v51 = v2;
    uint64_t v47 = *(void *)v71;
    do
    {
      uint64_t v6 = 0;
      uint64_t v53 = v4;
      do
      {
        if (*(void *)v71 != v5) {
          objc_enumerationMutation(a2);
        }
        uint64_t v7 = *(void **)(*((void *)&v70 + 1) + 8 * v6);
        if (objc_msgSend(v7, "functionType", v47, v48, v49, v50) == 6)
        {
          unint64_t v8 = v2[1];
          long long v9 = (*v2)[1];
          long long v10 = (__CFString *)*((void *)*v2 + 4);
          long long v67 = **v2;
          long long v68 = v9;
          unint64_t v69 = v10;
          v66[0] = 0;
          v66[1] = 0;
          *(_OWORD *)unsigned int v61 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v63 = 0u;
          uint64_t v64 = 0;
          uint64_t v65 = v66;
          uint64_t v11 = (const char *)objc_msgSend((id)objc_msgSend(v7, "name"), "UTF8String");
          size_t v12 = strlen(v11);
          if (v12 >= 0x7FFFFFFFFFFFFFF8) {
            abort();
          }
          size_t v13 = v12;
          if (v12 >= 0x17)
          {
            uint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v12 | 7) != 0x17) {
              uint64_t v15 = v12 | 7;
            }
            uint64_t v16 = v15 + 1;
            p_dst = (long long *)operator new(v15 + 1);
            *((void *)&__dst + 1) = v13;
            *(void *)&long long v58 = v16 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            BYTE7(v5_Block_object_dispose(&a9, 8) = v12;
            p_dst = &__dst;
            if (!v12)
            {
LABEL_16:
              *((unsigned char *)p_dst + v13) = 0;
              uint64_t v18 = v8 + 4;
              uint64_t v17 = *((void *)v8 + 8);
              char v19 = BYTE7(v58);
              if (!v17) {
                goto LABEL_55;
              }
              size_t v20 = (SBYTE7(v58) & 0x80u) == 0 ? BYTE7(v58) : *((void *)&__dst + 1);
              uint64_t v21 = (SBYTE7(v58) & 0x80u) == 0 ? &__dst : (long long *)__dst;
              uint64_t v22 = v8 + 4;
              do
              {
                int v23 = *(char *)(v17 + 55);
                if (v23 >= 0) {
                  size_t v24 = *(unsigned __int8 *)(v17 + 55);
                }
                else {
                  size_t v24 = *(void *)(v17 + 40);
                }
                if (v23 >= 0) {
                  uint64_t v25 = (const void *)(v17 + 32);
                }
                else {
                  uint64_t v25 = *(const void **)(v17 + 32);
                }
                if (v20 >= v24) {
                  size_t v26 = v24;
                }
                else {
                  size_t v26 = v20;
                }
                int v27 = memcmp(v25, v21, v26);
                BOOL v28 = v24 < v20;
                if (v27) {
                  BOOL v28 = v27 < 0;
                }
                BOOL v29 = !v28;
                if (v28) {
                  int8x16_t v30 = (uint64_t *)(v17 + 8);
                }
                else {
                  int8x16_t v30 = (uint64_t *)v17;
                }
                if (v29) {
                  uint64_t v22 = (void *)v17;
                }
                uint64_t v17 = *v30;
              }
              while (*v30);
              if (v22 == v18) {
                goto LABEL_55;
              }
              int v31 = *((char *)v22 + 55);
              if (v31 >= 0) {
                size_t v32 = *((unsigned __int8 *)v22 + 55);
              }
              else {
                size_t v32 = v22[5];
              }
              if (v31 >= 0) {
                uint64_t v33 = v22 + 4;
              }
              else {
                uint64_t v33 = (const void *)v22[4];
              }
              if (v32 >= v20) {
                size_t v34 = v20;
              }
              else {
                size_t v34 = v32;
              }
              int v35 = memcmp(v21, v33, v34);
              BOOL v36 = v20 < v32;
              if (v35) {
                BOOL v36 = v35 < 0;
              }
              if (v36) {
LABEL_55:
              }
                uint64_t v22 = v8 + 4;
              if (v19 < 0) {
                operator delete((void *)__dst);
              }
              uint64_t v2 = v51;
              uint64_t v4 = v53;
              if (v22 == v18
                || (unint64_t v37 = *((unsigned int *)v22 + 14), v38 = *((void *)v8 + 3),
                                                       v37 >= (*((void *)v8 + 4) - v38) >> 4)
                || !AGCReplyArray::deserialize((AGCReplyArray *)v61, *(_DWORD **)(v38 + 16 * v37)))
              {
                *((void *)&v68 + 1) = 2;
                unint64_t v69 = @"Internal error during function compilation.";
              }
              uint64_t v39 = v51[2];
              long long v40 = v39[3];
              long long v42 = *v39;
              long long v41 = v39[1];
              long long v59 = v39[2];
              long long v60 = v40;
              long long __dst = v42;
              long long v58 = v41;
              v55[0] = MEMORY[0x263EF8330];
              v55[1] = 3221225472;
              v56[0] = ___ZZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createAirLinkedIntersectionVariantSetsERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEP18MTLLinkedFunctionsRKNS5_29IntersectionDescriptorContextEjENKUlP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_clESL__block_invoke;
              v56[1] = &__block_descriptor_40_e45_v24__0__AGXG17FamilyIntersectionProgram_8_v16l;
              v56[2] = v51[4];
              *(void *)&long long __dst = v7;
              unsigned int v43 = objc_alloc_init(AGXG17FamilyIntersectionProgram);
              v76[0] = MEMORY[0x263EF8330];
              v76[1] = 3221225472;
              v77[0] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE42createAirLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataERKNS5_29IntersectionDescriptorContextEU13block_pointerFvP31AGXG17FamilyIntersectionProgramRNS1_30IntersectionFunctionVariantSetEE_block_invoke;
              v77[1] = &__block_descriptor_48_e60_v32__0r_v8r_v16___v___v__IntersectionReplyMetadata____Q___24l;
              v77[2] = v61;
              v77[3] = &v67;
              v74[0] = MEMORY[0x263EF8330];
              v74[1] = 3221225472;
              v75[0] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE42createAirLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataERKNS5_29IntersectionDescriptorContextEU13block_pointerFvP31AGXG17FamilyIntersectionProgramRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2;
              v75[1] = &unk_26516EF80;
              v75[2] = v43;
              v75[3] = v55;
              AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionProgramVariants_impl<true>(v52, (uint64_t)&__dst, 0, (os_unfair_lock_s *)v43, (uint64_t)v76, (uint64_t)v74);
              uint64_t v44 = (void **)v61[0];
              long long v45 = (void **)v61[1];
              while (v44 != v45)
              {
                long long v46 = *v44;
                v44 += 2;
                free(v46);
              }
              std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v66[0]);
              if (__p[1])
              {
                *(void **)&long long v63 = __p[1];
                operator delete(__p[1]);
              }
              uint64_t v5 = v47;
              if (v61[0])
              {
                v61[1] = v61[0];
                operator delete(v61[0]);
              }
              goto LABEL_4;
            }
          }
          memcpy(p_dst, v11, v13);
          goto LABEL_16;
        }
LABEL_4:
        ++v6;
      }
      while (v6 != v4);
      uint64_t result = [a2 countByEnumeratingWithState:&v70 objects:v78 count:16];
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_2429C7504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

BOOL AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(void *a1, char *__s, AGCDeserializedReply *a3)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void ***)operator new(v9 + 1);
    size_t v38 = v7;
    int64_t v39 = v10 | 0x8000000000000000;
    long long __dst = (void **)p_dst;
  }
  else
  {
    HIBYTE(v39) = v6;
    p_dst = &__dst;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memcpy(p_dst, __s, v7);
LABEL_9:
  *((unsigned char *)p_dst + v7) = 0;
  uint64_t v11 = a1 + 8;
  uint64_t v12 = a1[8];
  char v13 = HIBYTE(v39);
  if (!v12) {
    goto LABEL_51;
  }
  size_t v14 = v39 >= 0 ? HIBYTE(v39) : v38;
  uint64_t v15 = v39 >= 0 ? (void **)&__dst : __dst;
  uint64_t v16 = a1 + 8;
  do
  {
    int v17 = *(char *)(v12 + 55);
    if (v17 >= 0) {
      size_t v18 = *(unsigned __int8 *)(v12 + 55);
    }
    else {
      size_t v18 = *(void *)(v12 + 40);
    }
    if (v17 >= 0) {
      char v19 = (const void *)(v12 + 32);
    }
    else {
      char v19 = *(const void **)(v12 + 32);
    }
    if (v14 >= v18) {
      size_t v20 = v18;
    }
    else {
      size_t v20 = v14;
    }
    int v21 = memcmp(v19, v15, v20);
    BOOL v22 = v18 < v14;
    if (v21) {
      BOOL v22 = v21 < 0;
    }
    BOOL v23 = !v22;
    if (v22) {
      size_t v24 = (uint64_t *)(v12 + 8);
    }
    else {
      size_t v24 = (uint64_t *)v12;
    }
    if (v23) {
      uint64_t v16 = (void *)v12;
    }
    uint64_t v12 = *v24;
  }
  while (*v24);
  if (v16 == v11) {
    goto LABEL_51;
  }
  int v25 = *((char *)v16 + 55);
  if (v25 >= 0) {
    size_t v26 = *((unsigned __int8 *)v16 + 55);
  }
  else {
    size_t v26 = v16[5];
  }
  if (v25 >= 0) {
    int v27 = v16 + 4;
  }
  else {
    int v27 = (const void *)v16[4];
  }
  if (v26 >= v14) {
    size_t v28 = v14;
  }
  else {
    size_t v28 = v26;
  }
  int v29 = memcmp(v15, v27, v28);
  BOOL v30 = v14 < v26;
  if (v29) {
    BOOL v30 = v29 < 0;
  }
  if (v30)
  {
LABEL_51:
    uint64_t v16 = a1 + 8;
    if ((v13 & 0x80) == 0)
    {
LABEL_49:
      if (v16 == v11) {
        return 0;
      }
      goto LABEL_53;
    }
  }
  else if ((v13 & 0x80) == 0)
  {
    goto LABEL_49;
  }
  operator delete(__dst);
  if (v16 == v11) {
    return 0;
  }
LABEL_53:
  unint64_t v31 = *((unsigned int *)v16 + 14);
  uint64_t v32 = a1[3];
  if (v31 >= (a1[4] - v32) >> 4) {
    return 0;
  }
  uint64_t v33 = v32 + 16 * v31;
  size_t v34 = *(_DWORD **)v33;
  uint64_t v35 = *(void *)(v33 + 8);

  return AGCDeserializedReply::deserialize(a3, v34, v35);
}

void AGCReplyArray::getDebugStringAvailableNames(std::string *this, void *a2)
{
  if (!a2[9])
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
    this->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  char v22 = 2;
  strcpy((char *)&v20, ", ");
  uint64_t v3 = (void *)a2[7];
  uint64_t v4 = a2 + 8;
  if (v3 == a2 + 8)
  {
    std::string::size_type v16 = -2;
    goto LABEL_34;
  }
  do
  {
    std::operator+<char>();
    uint64_t v5 = std::string::append(&v17, "\"");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v19 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v19 >= 0) {
      size_t v7 = __p;
    }
    else {
      size_t v7 = (void **)__p[0];
    }
    if (v19 >= 0) {
      std::string::size_type v8 = HIBYTE(v19);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v7, v8);
    if (SHIBYTE(v19) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_13;
      }
    }
    else if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v17.__r_.__value_.__l.__data_);
LABEL_13:
    if (v22 >= 0) {
      uint64_t v9 = (const std::string::value_type *)&v20;
    }
    else {
      uint64_t v9 = (const std::string::value_type *)v20;
    }
    if (v22 >= 0) {
      std::string::size_type v10 = v22;
    }
    else {
      std::string::size_type v10 = v21;
    }
    std::string::append(this, v9, v10);
    uint64_t v11 = (void *)v3[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (void *)v3[2];
        BOOL v13 = *v12 == (void)v3;
        uint64_t v3 = v12;
      }
      while (!v13);
    }
    uint64_t v3 = v12;
  }
  while (v12 != v4);
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  std::string::size_type v15 = v22;
  if (v22 < 0) {
    std::string::size_type v15 = v21;
  }
  std::string::size_type v16 = size - v15;
LABEL_34:
  std::string::resize(this, v16, 0);
  if (v22 < 0) {
    operator delete(v20);
  }
}

void sub_2429C7904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if (*(char *)(v27 + 23) < 0)
    {
LABEL_6:
      operator delete(*(void **)v27);
      _Unwind_Resume(exception_object);
    }
  }
  else if (*(char *)(v27 + 23) < 0)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(exception_object);
}

void ___ZZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE38createAirLinkedIntersectionVariantSetsERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataEP18MTLLinkedFunctionsRKNS5_29IntersectionDescriptorContextEjENKUlP7NSArrayIPU22objcproto11MTLFunction11objc_objectEE_clESL__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
  if (!*(void *)v4 && *a3)
  {
    uint64_t v5 = a3[1];
    *(void *)uint64_t v4 = *a3;
    *(void *)(v4 + _Block_object_dispose(&a9, 8) = v5;
  }
  unint64_t v7 = *(void *)(v4 + 32);
  unint64_t v6 = *(void *)(v4 + 40);
  if (v7 < v6)
  {
    uint64_t v8 = a3[1];
    *(void *)unint64_t v7 = *a3;
    *(void *)(v7 + _Block_object_dispose(&a9, 8) = v8;
    *(_DWORD *)(v7 + 16) = 0;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    dispatch_group_t v9 = dispatch_group_create();
    *(void *)(v7 + 64) = 0;
    *(void *)(v7 + 72) = 0;
    uint64_t v10 = *(void *)(v7 + 24);
    *(void *)(v7 + 24) = a3[3];
    a3[3] = v10;
    uint64_t v11 = *(void *)(v7 + 32);
    *(void *)(v7 + 32) = a3[4];
    a3[4] = v11;
    uint64_t v12 = *(void *)(v7 + 40);
    *(void *)(v7 + 40) = a3[5];
    a3[5] = v12;
    uint64_t v13 = *(void *)(v7 + 48);
    *(void *)(v7 + 4_Block_object_dispose(&a9, 8) = a3[6];
    *(void *)(v7 + 56) = v9;
    a3[6] = v13;
    uint64_t v14 = *(void *)(v7 + 56);
    *(void *)(v7 + 56) = a3[7];
    a3[7] = v14;
    uint64_t v15 = *(void *)(v7 + 64);
    *(void *)(v7 + 64) = a3[8];
    a3[8] = v15;
    uint64_t v16 = *(void *)(v7 + 72);
    *(void *)(v7 + 72) = a3[9];
    a3[9] = v16;
    std::string v17 = (char *)(v7 + 80);
    goto LABEL_23;
  }
  uint64_t v18 = *(void *)(v4 + 24);
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v18) >> 4);
  if (v19 + 1 > 0x333333333333333) {
    abort();
  }
  unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v18) >> 4);
  uint64_t v21 = 2 * v20;
  if (2 * v20 <= v19 + 1) {
    uint64_t v21 = v19 + 1;
  }
  if (v20 >= 0x199999999999999) {
    unint64_t v22 = 0x333333333333333;
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22)
  {
    if (v22 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    BOOL v23 = (char *)operator new(80 * v22);
  }
  else
  {
    BOOL v23 = 0;
  }
  size_t v24 = &v23[80 * v19];
  int v25 = &v23[80 * v22];
  uint64_t v26 = a3[1];
  *(void *)size_t v24 = *a3;
  *((void *)v24 + 1) = v26;
  *((_DWORD *)v24 + 4) = 0;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  dispatch_group_t v27 = dispatch_group_create();
  long long v28 = *(_OWORD *)(v24 + 24);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(a3 + 3) = v28;
  long long v29 = *(_OWORD *)(v24 + 40);
  *(_OWORD *)(v24 + 40) = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(a3 + 5) = v29;
  *(_OWORD *)(v24 + 56) = *(_OWORD *)(a3 + 7);
  *((void *)v24 + 9) = a3[9];
  a3[7] = v27;
  a3[8] = 0;
  a3[9] = 0;
  std::string v17 = v24 + 80;
  unint64_t v31 = *(char **)(v4 + 24);
  BOOL v30 = *(char **)(v4 + 32);
  if (v30 == v31)
  {
    *(void *)(v4 + 24) = v24;
    *(void *)(v4 + 32) = v17;
    *(void *)(v4 + 40) = v25;
    if (v30) {
LABEL_22:
    }
      operator delete(v30);
  }
  else
  {
    uint64_t v32 = 0;
    do
    {
      uint64_t v33 = &v24[v32];
      size_t v34 = &v30[v32];
      uint64_t v35 = *(void *)&v30[v32 - 72];
      *((void *)v33 - 10) = *(void *)&v30[v32 - 80];
      *((void *)v33 - 9) = v35;
      *((_DWORD *)v33 - 16) = 0;
      *(_OWORD *)(v33 - 40) = 0u;
      *(_OWORD *)(v33 - 56) = 0u;
      dispatch_group_t v36 = dispatch_group_create();
      *((void *)v33 - 2) = 0;
      *((void *)v33 - 1) = 0;
      uint64_t v37 = *(void *)&v24[v32 - 56];
      *((void *)v33 - 7) = *(void *)&v30[v32 - 56];
      *((void *)v34 - 7) = v37;
      uint64_t v38 = *(void *)&v24[v32 - 48];
      *((void *)v33 - 6) = *(void *)&v30[v32 - 48];
      *((void *)v34 - 6) = v38;
      uint64_t v39 = *(void *)&v24[v32 - 40];
      *((void *)v33 - 5) = *(void *)&v30[v32 - 40];
      *((void *)v34 - 5) = v39;
      uint64_t v40 = *(void *)&v24[v32 - 32];
      *((void *)v33 - 4) = *(void *)&v30[v32 - 32];
      *((void *)v33 - 3) = v36;
      *((void *)v34 - 4) = v40;
      uint64_t v41 = *(void *)&v24[v32 - 24];
      *((void *)v33 - 3) = *(void *)&v30[v32 - 24];
      *((void *)v34 - 3) = v41;
      uint64_t v42 = *(void *)&v24[v32 - 16];
      *((void *)v33 - 2) = *(void *)&v30[v32 - 16];
      *((void *)v34 - 2) = v42;
      uint64_t v43 = *(void *)&v24[v32 - 8];
      *((void *)v33 - 1) = *(void *)&v30[v32 - 8];
      *((void *)v34 - 1) = v43;
      v32 -= 80;
    }
    while (&v30[v32] != v31);
    uint64_t v44 = &v24[v32];
    BOOL v30 = *(char **)(v4 + 24);
    long long v45 = *(dispatch_object_t **)(v4 + 32);
    *(void *)(v4 + 24) = v44;
    *(void *)(v4 + 32) = v17;
    for (*(void *)(v4 + 40) = v25; v45 != (dispatch_object_t *)v30; v45 -= 10)
    {
      dispatch_release(*(v45 - 3));

      *(v45 - 2) = 0;
      *(v45 - 1) = 0;
    }
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_23:
  *(void *)(v4 + 32) = v17;

  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 16));
}

void sub_2429C7CC0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE42createAirLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataERKNS5_29IntersectionDescriptorContextEU13block_pointerFvP31AGXG17FamilyIntersectionProgramRNS1_30IntersectionFunctionVariantSetEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a4 + 16))(a4, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE42createAirLinkedIntersectionProgramVariantsILb1EEENSt3__19enable_ifIXT_EvE4typeERK13AGCReplyArrayRKNS5_25IntersectionReplyMetadataERKNS5_29IntersectionDescriptorContextEU13block_pointerFvP31AGXG17FamilyIntersectionProgramRNS1_30IntersectionFunctionVariantSetEE_block_invoke_2(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);
}

void AGX::Impl::TileProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  unint64_t v17 = (char *)v10 - (char *)value;
  uint64_t v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFAFLL)
  {
    begiunint64_t n = &value[v18 + 20];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0x14uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  unint64_t v20 = &value[v18];
  unsigned int *v20 = ((begin - value) >> 2 << 8) | 0x3F;
  *(_OWORD *)(v20 + 1) = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v21 = *(_OWORD *)&this[2].__end_;
  long long v22 = *(_OWORD *)&this[3].__begin_;
  long long v23 = *(_OWORD *)&this[3].__end_cap_.__value_;
  *(void *)(v20 + 17) = this[4].__end_;
  *(_OWORD *)(v20 + 13) = v23;
  *(_OWORD *)(v20 + 9) = v22;
  *(_OWORD *)(v20 + 5) = v21;
  size_t v24 = this->__end_cap_.__value_;
  uint64_t v25 = (char *)this[1].__begin_ - (char *)v24;
  uint64_t v26 = v25 >> 2;
  if ((unint64_t)v25 > 0xFFFFFFFFFFFFFFCFLL)
  {
    dispatch_group_t v27 = &v24[v26 + 12];
    this[1].__begin_ = v27;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    size_t v24 = this->__end_cap_.__value_;
    dispatch_group_t v27 = this[1].__begin_;
  }
  long long v28 = &v24[v26];
  *long long v28 = ((v27 - v24) >> 2 << 8) | 0x42;
  long long v29 = *(_OWORD *)&this[4].__end_cap_.__value_;
  long long v30 = *(_OWORD *)&this[5].__end_;
  *(void *)(v28 + 9) = this[6].__begin_;
  *(_OWORD *)(v28 + 5) = v30;
  *(_OWORD *)(v28 + 1) = v29;
  unint64_t v31 = this->__end_cap_.__value_;
  uint64_t v32 = (char *)this[1].__begin_ - (char *)v31;
  uint64_t v33 = v32 >> 2;
  if ((unint64_t)v32 > 0xFFFFFFFFFFFFFFEFLL)
  {
    size_t v34 = &v31[v33 + 4];
    this[1].__begin_ = v34;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 4uLL);
    unint64_t v31 = this->__end_cap_.__value_;
    size_t v34 = this[1].__begin_;
  }
  uint64_t v35 = &v31[v33];
  *uint64_t v35 = ((v34 - v31) >> 2 << 8) | 0x43;
  *(void *)(v35 + 1) = this[6].__end_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void __destroy_helper_block_e8_96c26_ZTSN3AGX14TileProgramKeyE(void *a1)
{
  a1[12] = &unk_26F854090;
  uint64_t v2 = (void *)a1[35];
  if (v2)
  {
    a1[36] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[32];
  if (v3)
  {
    a1[33] = v3;
    operator delete(v3);
  }
  a1[12] = off_26F852A38;
  uint64_t v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
}

AGX::Impl::TileProgramKey *__copy_helper_block_e8_96c26_ZTSN3AGX14TileProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGX::Impl::TileProgramKey::TileProgramKey((AGX::Impl::TileProgramKey *)(a1 + 96), (const TileProgramKey *)(a2 + 96));
  *(void *)(a1 + 96) = &unk_26F852A78;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  return result;
}

uint64_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(NSObject *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  [a3 setObject:a5 forKey:*MEMORY[0x263F12650]];
  [a3 setObject:&unk_26F86C720 forKey:*MEMORY[0x263F12660]];
  uint64_t v10 = *MEMORY[0x263F12638];
  if (a1)
  {
    [a3 setObject:MEMORY[0x263EFFA80] forKey:v10];
    size_t v20 = 0;
    buffer_ptr = 0;
    uint64_t v11 = dispatch_data_create_map(a1, (const void **)&buffer_ptr, &v20);
    if (buffer_ptr && v20)
    {
      uint64_t v12 = [NSNumber numberWithUnsignedLongLong:*((void *)buffer_ptr + 1)];
      [a3 setObject:v12 forKey:*MEMORY[0x263F12640]];
      uint64_t v13 = [NSNumber numberWithUnsignedLongLong:*((void *)buffer_ptr + 2)];
      [a3 setObject:v13 forKey:*MEMORY[0x263F12680]];
      uint64_t v14 = [NSNumber numberWithUnsignedLongLong:*(void *)buffer_ptr];
      [a3 setObject:v14 forKey:*MEMORY[0x263F12648]];
      uint64_t v15 = [NSNumber numberWithUnsignedLongLong:*((void *)buffer_ptr + 3)];
      [a3 setObject:v15 forKey:*MEMORY[0x263F12630]];
      if (a6)
      {
        uint64_t v16 = *MEMORY[0x263F12658];
        unint64_t v17 = &unk_26F86C720;
      }
      else
      {
        unint64_t v17 = (void *)[NSNumber numberWithUnsignedLongLong:a4];
        uint64_t v16 = *MEMORY[0x263F12658];
      }
      [a3 setObject:v17 forKey:v16];
    }
    if (v11) {
      dispatch_release(v11);
    }
    return _MTLAddCompilerServiceCompileTimeStats();
  }
  else
  {
    [a3 setObject:MEMORY[0x263EFFA88] forKey:v10];
    [a3 setObject:&unk_26F86C720 forKey:*MEMORY[0x263F12640]];
    [a3 setObject:&unk_26F86C720 forKey:*MEMORY[0x263F12680]];
    [a3 setObject:&unk_26F86C720 forKey:*MEMORY[0x263F12648]];
    [a3 setObject:&unk_26F86C720 forKey:*MEMORY[0x263F12630]];
    uint64_t v18 = *MEMORY[0x263F12658];
    return [a3 setObject:&unk_26F86C720 forKey:v18];
  }
}

void std::vector<AGX::HAL200::IntersectionFunctionVariantSet>::__assign_with_size[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet*,AGX::HAL200::IntersectionFunctionVariantSet*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 4) >= a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v9) >> 4) >= a4)
    {
      uint64_t v28 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *>(a2, a3, v9);
      for (uint64_t i = a1[1]; i != v28; i -= 80)
      {
        dispatch_release(*(dispatch_object_t *)(i - 24));

        *(void *)(i - 16) = 0;
        *(void *)(i - _Block_object_dispose(&a9, 8) = 0;
      }
      a1[1] = v28;
    }
    else
    {
      uint64_t v21 = a2 + 16 * ((a1[1] - v9) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *>(a2, v21, v9);
      uint64_t v22 = a1[1];
      if (v21 != a3)
      {
        uint64_t v23 = 0;
        do
        {
          uint64_t v24 = v21 + v23;
          uint64_t v25 = v22 + v23;
          uint64_t v26 = *(void *)(v21 + v23 + 8);
          *(void *)uint64_t v25 = *(void *)(v21 + v23);
          *(void *)(v25 + _Block_object_dispose(&a9, 8) = v26;
          *(_DWORD *)(v25 + 16) = 0;
          long long v27 = *(_OWORD *)(v21 + v23 + 24);
          *(_OWORD *)(v25 + 40) = *(_OWORD *)(v21 + v23 + 40);
          *(_OWORD *)(v25 + 24) = v27;
          *(void *)(v25 + 56) = dispatch_group_create();
          *(void *)(v25 + 64) = *(id *)(v21 + v23 + 64);
          *(void *)(v25 + 72) = *(id *)(v21 + v23 + 72);
          v23 += 80;
        }
        while (v24 + 80 != a3);
        v22 += v23;
      }
      a1[1] = v22;
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = (void *)*a1;
      if (v10 != v9)
      {
        do
        {
          dispatch_release(*(dispatch_object_t *)(v10 - 24));

          *(void *)(v10 - 16) = 0;
          *(void *)(v10 - _Block_object_dispose(&a9, 8) = 0;
          v10 -= 80;
        }
        while (v10 != v9);
        uint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x333333333333333) {
      goto LABEL_28;
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x199999999999999 ? 0x333333333333333 : v13;
    if (v14 > 0x333333333333333) {
LABEL_28:
    }
      abort();
    uint64_t v15 = 80 * v14;
    uint64_t v16 = (char *)operator new(80 * v14);
    *a1 = (uint64_t)v16;
    a1[1] = (uint64_t)v16;
    a1[2] = (uint64_t)&v16[v15];
    if (a2 != a3)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = a2 + v17;
        unint64_t v19 = &v16[v17];
        uint64_t v20 = *(void *)(a2 + v17 + 8);
        *(void *)unint64_t v19 = *(void *)(a2 + v17);
        *((void *)v19 + 1) = v20;
        *((_DWORD *)v19 + 4) = 0;
        *(_OWORD *)(v19 + 24) = *(_OWORD *)(a2 + v17 + 24);
        *(_OWORD *)(v19 + 40) = *(_OWORD *)(a2 + v17 + 40);
        *((void *)v19 + 7) = dispatch_group_create();
        *((void *)v19 + _Block_object_dispose(&a9, 8) = *(id *)(a2 + v17 + 64);
        *((void *)v19 + 9) = *(id *)(a2 + v17 + 72);
        v17 += 80;
      }
      while (v18 + 80 != a3);
      v16 += v17;
    }
    a1[1] = (uint64_t)v16;
  }
}

void sub_2429C8540(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2429C8548(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&a9, 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *,AGX::HAL200::IntersectionFunctionVariantSet *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      dispatch_release(*(dispatch_object_t *)(a3 + 56));

      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      uint64_t v6 = *(void *)(v5 + 8);
      *(void *)a3 = *(void *)v5;
      *(void *)(a3 + _Block_object_dispose(&a9, 8) = v6;
      long long v7 = *(_OWORD *)(v5 + 24);
      *(_OWORD *)(a3 + 40) = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a3 + 24) = v7;
      dispatch_retain(*(dispatch_object_t *)(v5 + 56));
      uint64_t v8 = *(void **)(v5 + 64);
      *(void *)(a3 + 56) = *(void *)(v5 + 56);
      *(void *)(a3 + 64) = v8;
      *(void *)(a3 + 72) = *(id *)(v5 + 72);
      a3 += 80;
      v5 += 80;
    }
    while (v5 != a2);
  }
  return a3;
}

void AGX::HAL200::TileProgramVariant::~TileProgramVariant(AGX::HAL200::TileProgramVariant *this)
{
  AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~TileProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

int8x8_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateTileProgramKey@<D0>(int *a1@<X1>, char **a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  AGX::TileProgramKey::TileProgramKey((AGX::TileProgramKey *)a4, 0, 0);
  long long v112 = 0u;
  memset(v113, 0, sizeof(v113));
  long long v110 = 0u;
  long long v111 = 0u;
  int v114 = 1;
  __int16 v115 = 0;
  int v116 = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  bzero(&v110, 0x28uLL);
  if (a1)
  {
    uint64_t v8 = (unsigned __int16 *)((char *)a1 - *a1);
    unsigned int v9 = *v8;
    if (v9 < 0xF)
    {
      if (v9 <= 0xA)
      {
        LOBYTE(v1_Block_object_dispose(&a9, 8) = 1;
        LOBYTE(v115) = 1;
LABEL_79:
        HIBYTE(v115) = v18;
LABEL_80:
        AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v110, 0);
        long long v56 = v111;
        *(_OWORD *)(a4 + 112) = v110;
        *(_OWORD *)(a4 + 12_Block_object_dispose(&a9, 8) = v56;
        *(void *)(a4 + 144) = v112;
        goto LABEL_81;
      }
    }
    else if (v8[7])
    {
      uint64_t v10 = (unsigned int *)((char *)a1 + v8[7] + *(unsigned int *)((char *)a1 + v8[7]));
      unsigned int v11 = *v10;
      if (*v10)
      {
        unint64_t v12 = (int *)((char *)v10 + v10[1] + 4);
        uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 5u)
        {
          uint64_t v14 = v13[2];
          if (v14)
          {
            unsigned int v15 = *(unsigned __int16 *)((char *)v12 + v14);
            if (v15)
            {
              if (v15 > 0x285) {
                uint64_t v16 = &texFormatUnsupported;
              }
              else {
                uint64_t v16 = (uint64_t *)*(&off_26516F8A0 + v15 - 1);
              }
              *(void *)&long long v117 = v16;
              DWORD2(v112) |= 1u;
            }
          }
        }
        if (v11 >= 2)
        {
          unint64_t v19 = (int *)((char *)v10 + v10[2] + 8);
          uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
          if (*v20 >= 5u)
          {
            uint64_t v21 = v20[2];
            if (v21)
            {
              unsigned int v22 = *(unsigned __int16 *)((char *)v19 + v21);
              if (v22)
              {
                if (v22 > 0x285) {
                  uint64_t v23 = &texFormatUnsupported;
                }
                else {
                  uint64_t v23 = (uint64_t *)*(&off_26516F8A0 + v22 - 1);
                }
                *((void *)&v117 + 1) = v23;
                DWORD2(v112) |= 2u;
              }
            }
          }
          if (v11 >= 3)
          {
            uint64_t v24 = (int *)((char *)v10 + v10[3] + 12);
            uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
            if (*v25 >= 5u)
            {
              uint64_t v26 = v25[2];
              if (v26)
              {
                unsigned int v27 = *(unsigned __int16 *)((char *)v24 + v26);
                if (v27)
                {
                  if (v27 > 0x285) {
                    uint64_t v28 = &texFormatUnsupported;
                  }
                  else {
                    uint64_t v28 = (uint64_t *)*(&off_26516F8A0 + v27 - 1);
                  }
                  *(void *)&long long v118 = v28;
                  DWORD2(v112) |= 4u;
                }
              }
            }
            if (v11 >= 4)
            {
              long long v29 = (int *)((char *)v10 + v10[4] + 16);
              long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
              if (*v30 >= 5u)
              {
                uint64_t v31 = v30[2];
                if (v31)
                {
                  unsigned int v32 = *(unsigned __int16 *)((char *)v29 + v31);
                  if (v32)
                  {
                    if (v32 > 0x285) {
                      uint64_t v33 = &texFormatUnsupported;
                    }
                    else {
                      uint64_t v33 = (uint64_t *)*(&off_26516F8A0 + v32 - 1);
                    }
                    *((void *)&v118 + 1) = v33;
                    DWORD2(v112) |= 8u;
                  }
                }
              }
              if (v11 >= 5)
              {
                size_t v34 = (int *)((char *)v10 + v10[5] + 20);
                uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
                if (*v35 >= 5u)
                {
                  uint64_t v36 = v35[2];
                  if (v36)
                  {
                    unsigned int v37 = *(unsigned __int16 *)((char *)v34 + v36);
                    if (v37)
                    {
                      if (v37 > 0x285) {
                        uint64_t v38 = &texFormatUnsupported;
                      }
                      else {
                        uint64_t v38 = (uint64_t *)*(&off_26516F8A0 + v37 - 1);
                      }
                      *(void *)&long long v119 = v38;
                      DWORD2(v112) |= 0x10u;
                    }
                  }
                }
                if (v11 >= 6)
                {
                  uint64_t v39 = (int *)((char *)v10 + v10[6] + 24);
                  uint64_t v40 = (unsigned __int16 *)((char *)v39 - *v39);
                  if (*v40 >= 5u)
                  {
                    uint64_t v41 = v40[2];
                    if (v41)
                    {
                      unsigned int v42 = *(unsigned __int16 *)((char *)v39 + v41);
                      if (v42)
                      {
                        if (v42 > 0x285) {
                          uint64_t v43 = &texFormatUnsupported;
                        }
                        else {
                          uint64_t v43 = (uint64_t *)*(&off_26516F8A0 + v42 - 1);
                        }
                        *((void *)&v119 + 1) = v43;
                        DWORD2(v112) |= 0x20u;
                      }
                    }
                  }
                  if (v11 >= 7)
                  {
                    uint64_t v44 = (int *)((char *)v10 + v10[7] + 28);
                    long long v45 = (unsigned __int16 *)((char *)v44 - *v44);
                    if (*v45 >= 5u)
                    {
                      uint64_t v46 = v45[2];
                      if (v46)
                      {
                        unsigned int v47 = *(unsigned __int16 *)((char *)v44 + v46);
                        if (v47)
                        {
                          if (v47 > 0x285) {
                            long long v48 = &texFormatUnsupported;
                          }
                          else {
                            long long v48 = (uint64_t *)*(&off_26516F8A0 + v47 - 1);
                          }
                          *(void *)&long long v120 = v48;
                          DWORD2(v112) |= 0x40u;
                        }
                      }
                    }
                    if (v11 >= 8)
                    {
                      long long v49 = (int *)((char *)v10 + v10[8] + 32);
                      long long v50 = (unsigned __int16 *)((char *)v49 - *v49);
                      if (*v50 >= 5u)
                      {
                        uint64_t v51 = v50[2];
                        if (v51)
                        {
                          unsigned int v52 = *(unsigned __int16 *)((char *)v49 + v51);
                          if (v52)
                          {
                            if (v52 > 0x285) {
                              uint64_t v53 = &texFormatUnsupported;
                            }
                            else {
                              uint64_t v53 = (uint64_t *)*(&off_26516F8A0 + v52 - 1);
                            }
                            *((void *)&v120 + 1) = v53;
                            DWORD2(v112) |= 0x80u;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (v8[5]) {
      char v54 = *((unsigned char *)a1 + v8[5]);
    }
    else {
      char v54 = 1;
    }
    LOBYTE(v115) = v54;
    HIBYTE(v115) = v54;
    if (v9 < 0xD) {
      goto LABEL_80;
    }
    uint64_t v55 = v8[6];
    if (!v55) {
      goto LABEL_80;
    }
    int v18 = *((unsigned __int8 *)a1 + v55);
    if (!v18) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v110, 0);
  long long v17 = v111;
  *(_OWORD *)(a4 + 112) = v110;
  *(_OWORD *)(a4 + 12_Block_object_dispose(&a9, 8) = v17;
  *(void *)(a4 + 144) = v112;
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultTileDescriptor(void)::once, memory_order_acquire) != -1)
  {
    long long v125 = &v123;
    unint64_t v124 = &v125;
    std::__call_once(&AGX::defaultTileDescriptor(void)::once, &v124, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultTileDescriptor(void)::$_0 &&>>);
  }
  a1 = (int *)AGX::defaultTileDescriptor(void)::_desc;
LABEL_81:
  uint64_t v57 = *a1;
  uint64_t v58 = -v57;
  long long v59 = (char *)a1 - v57;
  unsigned int v60 = *(unsigned __int16 *)((char *)a1 - v57);
  if (v60 >= 0xF)
  {
    if (!*((_WORD *)v59 + 7)) {
      goto LABEL_125;
    }
    unsigned int v61 = (unsigned int *)((char *)a1
                         + *((unsigned __int16 *)v59 + 7)
                         + *(unsigned int *)((char *)a1 + *((unsigned __int16 *)v59 + 7)));
    unsigned int v62 = *v61;
    if (!*v61) {
      goto LABEL_125;
    }
    long long v63 = (int *)((char *)v61 + v61[1] + 4);
    uint64_t v64 = (unsigned __int16 *)((char *)v63 - *v63);
    if (*v64 >= 5u)
    {
      uint64_t v65 = v64[2];
      if (v65)
      {
        if (*(_WORD *)((char *)v63 + v65))
        {
          *(_DWORD *)(a4 + 48) |= 0x1010101u;
          unsigned int v62 = *v61;
        }
      }
    }
    if (v62 >= 2)
    {
      uint64_t v66 = (int *)((char *)v61 + v61[2] + 8);
      long long v67 = (unsigned __int16 *)((char *)v66 - *v66);
      if (*v67 >= 5u)
      {
        uint64_t v68 = v67[2];
        if (v68)
        {
          if (*(_WORD *)((char *)v66 + v68))
          {
            *(_DWORD *)(a4 + 48) |= 0x2020202u;
            unsigned int v62 = *v61;
          }
        }
      }
      if (v62 >= 3)
      {
        unint64_t v69 = (int *)((char *)v61 + v61[3] + 12);
        long long v70 = (unsigned __int16 *)((char *)v69 - *v69);
        if (*v70 >= 5u)
        {
          uint64_t v71 = v70[2];
          if (v71)
          {
            if (*(_WORD *)((char *)v69 + v71))
            {
              *(_DWORD *)(a4 + 48) |= 0x4040404u;
              unsigned int v62 = *v61;
            }
          }
        }
        if (v62 >= 4)
        {
          long long v72 = (int *)((char *)v61 + v61[4] + 16);
          long long v73 = (unsigned __int16 *)((char *)v72 - *v72);
          if (*v73 >= 5u)
          {
            uint64_t v74 = v73[2];
            if (v74)
            {
              if (*(_WORD *)((char *)v72 + v74))
              {
                *(_DWORD *)(a4 + 48) |= 0x8080808u;
                unsigned int v62 = *v61;
              }
            }
          }
          if (v62 >= 5)
          {
            char v75 = (int *)((char *)v61 + v61[5] + 20);
            uint64_t v76 = (unsigned __int16 *)((char *)v75 - *v75);
            if (*v76 >= 5u)
            {
              uint64_t v77 = v76[2];
              if (v77)
              {
                if (*(_WORD *)((char *)v75 + v77))
                {
                  *(_DWORD *)(a4 + 48) |= 0x10101010u;
                  unsigned int v62 = *v61;
                }
              }
            }
            if (v62 >= 6)
            {
              char v78 = (int *)((char *)v61 + v61[6] + 24);
              uint64_t v79 = (unsigned __int16 *)((char *)v78 - *v78);
              if (*v79 >= 5u)
              {
                uint64_t v80 = v79[2];
                if (v80)
                {
                  if (*(_WORD *)((char *)v78 + v80))
                  {
                    *(_DWORD *)(a4 + 48) |= 0x20202020u;
                    unsigned int v62 = *v61;
                  }
                }
              }
              if (v62 >= 7)
              {
                uint64_t v81 = (int *)((char *)v61 + v61[7] + 28);
                uint64_t v82 = (unsigned __int16 *)((char *)v81 - *v81);
                if (*v82 >= 5u)
                {
                  uint64_t v83 = v82[2];
                  if (v83)
                  {
                    if (*(_WORD *)((char *)v81 + v83))
                    {
                      *(_DWORD *)(a4 + 48) |= 0x40404040u;
                      unsigned int v62 = *v61;
                    }
                  }
                }
                if (v62 >= 8)
                {
                  int v84 = (int *)((char *)v61 + v61[8] + 32);
                  uint64_t v85 = (unsigned __int16 *)((char *)v84 - *v84);
                  if (*v85 >= 5u)
                  {
                    uint64_t v86 = v85[2];
                    if (v86)
                    {
                      if (*(_WORD *)((char *)v84 + v86)) {
                        *(_DWORD *)(a4 + 48) |= 0x80808080;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t v87 = *a1;
    uint64_t v58 = -v87;
    unsigned int v60 = *(unsigned __int16 *)((char *)a1 - v87);
  }
  if (v60 < 5)
  {
    LODWORD(v8_Block_object_dispose(&a9, 8) = 0;
    goto LABEL_128;
  }
LABEL_125:
  uint64_t v88 = *(unsigned __int16 *)((char *)a1 + v58 + 4);
  if (*(_WORD *)((char *)a1 + v58 + 4)) {
    LODWORD(v8_Block_object_dispose(&a9, 8) = *((unsigned __int8 *)a1 + v88) != 0;
  }
LABEL_128:
  *(_DWORD *)(a4 + 156) = *(_DWORD *)(a4 + 156) & 0xFFFFFFFE | v88;
  int v89 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v89 < 7u)
  {
    LODWORD(v90) = 0;
  }
  else
  {
    uint64_t v90 = v89[3];
    if (v90) {
      LODWORD(v90) = *(int *)((char *)a1 + v90);
    }
  }
  *(_DWORD *)(a4 + 152) = v90;
  int v91 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v92 = *v91;
  if (v92 <= 0x10)
  {
    LODWORD(v106) = 0;
    *(void *)(a4 + 56) = 0;
  }
  else
  {
    uint64_t v93 = v91[8];
    if (v91[8]
      && ((uint64_t v94 = *(unsigned int *)((char *)a1 + v93), v95 = (unsigned int *)((char *)a1 + v93 + v94), *v95 >= 0x1F)
        ? (unsigned int v96 = 31)
        : (unsigned int v96 = *v95),
          v96))
    {
      unint64_t v97 = 0;
      char v98 = 0;
      uint64_t v99 = 0;
      uint64_t v100 = 4 * v96;
      uint64_t v101 = (char *)a1 + v93 + v94;
      do
      {
        uint64_t v102 = *(unsigned int *)&v101[v97 + 4];
        int v103 = &v101[v97 + v102 - *(int *)((char *)&v95[v97 / 4 + 1] + v102)];
        if (*((unsigned __int16 *)v103 + 2) >= 5u)
        {
          uint64_t v104 = *((unsigned __int16 *)v103 + 4);
          if (v104)
          {
            if (v101[v97 + 4 + v102 + v104] == 1) {
              uint64_t v105 = 1 << v98;
            }
            else {
              uint64_t v105 = 0;
            }
            v99 |= v105;
          }
        }
        ++v98;
        v97 += 4;
      }
      while (v100 != v97);
    }
    else
    {
      uint64_t v99 = 0;
    }
    *(void *)(a4 + 56) = v99;
    if (v92 < 0x13)
    {
      LODWORD(v106) = 0;
    }
    else
    {
      uint64_t v106 = v91[9];
      if (v106) {
        LODWORD(v106) = (*((unsigned char *)a1 + v106) != 0) << 6;
      }
    }
  }
  *(_DWORD *)(a4 + 104) = *(_DWORD *)(a4 + 104) & 0xFFFFFFBF | v106;
  size_t v107 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v107 < 0x13u)
  {
    LODWORD(v10_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    uint64_t v108 = v107[9];
    if (v108) {
      LODWORD(v10_Block_object_dispose(&a9, 8) = (*((unsigned char *)a1 + v108) != 0) << 9;
    }
  }
  *(_DWORD *)(a4 + 100) = *(_DWORD *)(a4 + 100) & 0xFFFFFD7F | v108;
  if ((char **)(a4 + 160) != a2) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a4 + 160), *a2, a2[1], (a2[1] - *a2) >> 5);
  }
  if ((char **)(a4 + 184) != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a4 + 184), *a3, a3[1], (a3[1] - *a3) >> 5);
  }
  int8x8_t result = vand_s8(*(int8x8_t *)(a4 + 100), (int8x8_t)0xFFFFF7F78BFFFEFFLL);
  *(int8x8_t *)(a4 + 100) = result;
  return result;
}

void sub_2429C8F98(_Unwind_Exception *a1)
{
  AGX::TileProgramKey::~TileProgramKey(v1);
  _Unwind_Resume(a1);
}

dispatch_object_t **std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100](dispatch_object_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    dispatch_release(*v2);
    MEMORY[0x24566ED90](v2, 0x10C0C40495EAE30);
  }
  return a1;
}

void AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateBVHBuilderProgramKey(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = 24;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_26F853108;
  uint64_t v2 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v3 = *v2;
  if (v3 < 5)
  {
    LODWORD(v5) = 0;
    LODWORD(v4) = 0;
LABEL_12:
    LODWORD(v6) = 0;
    goto LABEL_13;
  }
  uint64_t v4 = v2[2];
  if (v2[2]) {
    LODWORD(v4) = *(int *)((char *)a1 + v4) & 0x3FFFFFFF;
  }
  if (v3 < 7)
  {
    LODWORD(v5) = 0;
    goto LABEL_12;
  }
  uint64_t v5 = v2[3];
  if (v2[3]) {
    LODWORD(v5) = (*((unsigned char *)a1 + v5) != 0) << 31;
  }
  if (v3 < 9) {
    goto LABEL_12;
  }
  uint64_t v6 = v2[4];
  if (v6) {
    LODWORD(v6) = (*((unsigned char *)a1 + v6) != 0) << 30;
  }
LABEL_13:
  *(_DWORD *)(a2 + 40) = v6 | v5 | v4;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

void ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unsigned int v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *unsigned int v15 = v7;
    unsigned int v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unsigned int v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)24,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::BVHBuilderProgramKey::isPrecompiledToBinaryArchive(AGX::BVHBuilderProgramKey *this)
{
  return 0;
}

BOOL AGX::BVHBuilderProgramKey::isPrecompiledToPipelineCache(AGX::BVHBuilderProgramKey *this)
{
  return (*((unsigned char *)this + 43) & 0x40) == 0;
}

void AGX::BVHBuilderProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFF7)
  {
    begiunint64_t n = &value[v17 + 2];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 2uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  unint64_t v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x55;
  v19[1] = this[1].__end_cap_.__value_;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateEndOfTileProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = 19;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  uint64_t v3 = a2 + 40;
  *(void *)a2 = &unk_26F853C08;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 11_Block_object_dispose(&a9, 8) = 0;
  uint64_t result = AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfigGen3((uint64_t)v37, a1);
  v35[0] = v37[0];
  v35[1] = v37[1];
  unsigned int v5 = v38;
  uint64_t v36 = v38;
  unsigned int v6 = v45;
  unsigned int v7 = v39;
  int v8 = v40;
  unint64_t v9 = *(void *)(a2 + 112) & 0xFF83E000FFFFFFFFLL | ((unint64_t)((unsigned __int16)v38 >> 12) << 32) | ((unint64_t)BYTE2(v38) << 36) | 0x40000000000000;
  *(void *)(a2 + 112) = v9;
  if (v7)
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    unsigned int v13 = (unsigned __int16)v5 >> 12;
    unsigned int v14 = HIWORD(v5) & 0x1FF;
    int v15 = v43 & ~v42 | v41;
    uint64_t result = v44;
    unsigned int v16 = v42 & ~v43 | v41;
    if (v6 < 2) {
      char v17 = 2;
    }
    else {
      char v17 = 3;
    }
    do
    {
      uint64_t v20 = __clz(__rbit32(v7));
      uint64_t v21 = 4 * v20;
      unsigned int v22 = *(_DWORD *)((char *)v35 + v21);
      int v23 = *(_DWORD *)(v3 + v21);
      uint64_t v24 = (char *)v37 + 2 * v20;
      int v25 = v24[160];
      if (v24[161])
      {
        if ((v24[161] & 2) != 0) {
          char v27 = 8;
        }
        else {
          char v27 = v17;
        }
        if (v25 == 4) {
          unsigned __int8 v26 = v17;
        }
        else {
          unsigned __int8 v26 = v27;
        }
      }
      else
      {
        unsigned __int8 v26 = 5;
        switch(v24[160])
        {
          case 1:
            unsigned __int8 v26 = 2;
            break;
          case 2:
            if ((v24[161] & 2) != 0) {
              unsigned __int8 v26 = 4;
            }
            else {
              unsigned __int8 v26 = 2;
            }
            break;
          case 3:
            break;
          case 4:
            unsigned __int8 v26 = v17;
            break;
          default:
            unsigned __int8 v26 = -1;
            break;
        }
      }
      unsigned int v28 = (v22 >> 12) / v14;
      int v29 = (v22 & 0x1F) << 8;
      int v30 = (v22 << 21) & 0x1C000000;
      *(_DWORD *)(v3 + 4 * v20) = v23 & 0xE3000000 | (v26 << 16) | v29 | v30 | v28;
      v10 |= 1 << v20;
      v11 |= (1 << v20) & v15;
      int v31 = result & (1 << v20);
      v12 |= v31;
      if ((v8 & (1 << v20)) != 0)
      {
        if (v13 <= 1) {
          int v32 = 0;
        }
        else {
          int v32 = (v22 << 16) & 0x1000000;
        }
        uint64_t v33 = (char *)v37 + 2 * v20;
        int v34 = v33[176];
        if (v33[177])
        {
          if ((v33[177] & 2) != 0) {
            char v18 = 8;
          }
          else {
            char v18 = v17;
          }
          if (v34 == 4) {
            unsigned __int8 v19 = v17;
          }
          else {
            unsigned __int8 v19 = v18;
          }
        }
        else
        {
          unsigned __int8 v19 = 5;
          switch(v33[176])
          {
            case 1:
              unsigned __int8 v19 = 2;
              break;
            case 2:
              if ((v33[177] & 2) != 0) {
                unsigned __int8 v19 = 4;
              }
              else {
                unsigned __int8 v19 = 2;
              }
              break;
            case 3:
              break;
            case 4:
              unsigned __int8 v19 = v17;
              break;
            default:
              unsigned __int8 v19 = -1;
              break;
          }
        }
        *(_DWORD *)(v3 + 4 * (v20 + 8)) = *(_DWORD *)(v3 + 4 * (v20 + 8)) & 0xE2000000 | v32 | (v19 << 16) | v29 | v30 | v28;
        v10 |= 256 << v20;
        v11 |= ((v16 >> v20) & 1) << (v20 + 8);
        v12 |= (v31 != 0) << (v20 + 8);
      }
      v7 ^= 1 << v20;
    }
    while (v7);
    unint64_t v9 = *(void *)(a2 + 112);
  }
  else
  {
    LOWORD(v12) = 0;
    LOWORD(v11) = 0;
    LOWORD(v10) = 0;
  }
  *(_WORD *)(a2 + 120) = v10;
  *(_WORD *)(a2 + 122) = v11;
  *(_WORD *)(a2 + 124) = v12;
  *(void *)(a2 + 112) = v9 & 0xFFFFFFFF00000000 | (unsigned __int16)(v10 & ~(_WORD)v11) | ((unint64_t)(unsigned __int16)(v10 & v12) << 16);
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    int v15 = operator new(4 * v13);
    unsigned int v16 = &v15[v14];
    *int v15 = v7;
    unint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unsigned int v6 = v7;
    unint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)19,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

BOOL AGX::EndOfTileProgramKey::isPrecompiledToPipelineCache(AGX::EndOfTileProgramKey *this, double a2, int8x16_t a3, double a4, double a5, double a6, int8x16_t a7)
{
  __int32 v8 = *((_DWORD *)this + 10);
  unsigned int v7 = *((_DWORD *)this + 11);
  unsigned int v9 = *((_DWORD *)this + 12);
  unsigned int v10 = *((_DWORD *)this + 13);
  int8x8_t v11 = *(int8x8_t *)((char *)this + 56);
  int8x16_t v13 = *((int8x16_t *)this + 4);
  int8x16_t v12 = *((int8x16_t *)this + 5);
  unsigned __int32 v14 = *((_DWORD *)this + 24);
  a3.i64[0] = *(void *)((char *)this + 100);
  uint64_t v15 = *((void *)this + 14);
  int v16 = *((unsigned __int16 *)this + 60);
  int v17 = *((unsigned __int16 *)this + 61);
  int v18 = *((unsigned __int16 *)this + 62);
  v19.i64[0] = __PAIR64__(v10, v7);
  v19.u64[1] = (unint64_t)v11;
  a7.i32[0] = v14;
  int8x16_t v20 = vextq_s8(vextq_s8(a7, a7, 4uLL), a3, 0xCuLL);
  v20.i32[3] = v8;
  int8x16_t v21 = vorrq_s8(v19, vorrq_s8(v12, vorrq_s8(v13, v20)));
  int8x8_t v22 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
  if (!(v15 | v22.i32[0] | v16 | v17 | v18 | v22.i32[1] | v9)) {
    return 1;
  }
  int8x16_t v23 = vorrq_s8(v13, v12);
  *(int8x8_t *)v23.i8 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  v11.i32[0] = vorr_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)a3.i8, 1), v11).u32[0];
  return (v15 | ((v23.i32[0] | a3.i32[0] | v23.i32[1] | v11.i32[0] | v8 | v7 | v14 | v10 | v11.i32[1] | v9) & 0x2000000 | (((v23.i8[0] | a3.i8[0] | v23.i8[4] | v11.i8[0]) | (v8 | v7 | v14 | v10 | v11.i8[4] | v9)) != 0)) ^ v8 | v16 | v17 | v18 | v9 | v10 | v14 | v7 | v11.i32[1] | v23.i32[0] | a3.i32[0] | v23.i32[1] | v11.i32[0]) == 0x200000000000000;
}

void AGX::EndOfTileProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    int v16 = (unsigned int *)operator new(4 * v14);
    *int v16 = v8;
    unsigned int v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    unsigned int v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFA7)
  {
    begiunint64_t n = &value[v17 + 22];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0x16uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  int8x16_t v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x45;
  *(_OWORD *)(v19 + 1) = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v20 = *(_OWORD *)&this[2].__end_;
  long long v21 = *(_OWORD *)&this[3].__begin_;
  long long v22 = *(_OWORD *)&this[3].__end_cap_.__value_;
  *(_OWORD *)(v19 + 17) = *(_OWORD *)&this[4].__end_;
  *(_OWORD *)(v19 + 13) = v22;
  *(_OWORD *)(v19 + 9) = v21;
  *(_OWORD *)(v19 + 5) = v20;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

double AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateBackgroundObjectProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(a2 + _Block_object_dispose(&a9, 8) = 13;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = &unk_26F852AF8;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::FramebufferCompilerConfigGen3((uint64_t)v6, a1);
  double result = *(double *)v6;
  long long v4 = v6[1];
  *(_OWORD *)(a2 + 40) = v6[0];
  *(_OWORD *)(a2 + 56) = v4;
  *(void *)(a2 + 72) = v7;
  unint64_t v5 = ((unint64_t)*(unsigned __int8 *)(a2 + 85) << 40) | ((unint64_t)v9 << 32);
  *(_DWORD *)(a2 + 80) = v10 | (v11 << 16) | (v8 << 24);
  *(_WORD *)(a2 + 84) = WORD2(v5);
  return result;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    int v16 = &v15[v14];
    *uint64_t v15 = v7;
    unsigned __int8 v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unsigned int v6 = v7;
    unsigned __int8 v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)13,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

BOOL AGX::BackgroundObjectProgramKey::isPrecompiledToPipelineCache(AGX::BackgroundObjectProgramKey *this)
{
  int v2 = *((_DWORD *)this + 17);
  int v1 = *((_DWORD *)this + 18);
  int v3 = *((_DWORD *)this + 14);
  int v4 = *((_DWORD *)this + 15);
  int v5 = *((_DWORD *)this + 16);
  uint64_t v6 = *((void *)this + 10);
  int v7 = *((_DWORD *)this + 10) | *((_DWORD *)this + 11);
  int v8 = *((_DWORD *)this + 12) | *((_DWORD *)this + 13);
  if (v6 == 0x10000000000 && (v7 | v1 & 0xFFFF0FFF | v8 | v3 | v4 | v5 | v2) == 0) {
    return 1;
  }
  return !(v7 | v8 | v3 | v4 | v5 | v2 | v1) && v6 == 0;
}

void AGX::BackgroundObjectProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    int v16 = (unsigned int *)operator new(4 * v14);
    *int v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFEFLL)
  {
    begiunint64_t n = &value[v17 + 4];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 4uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  int8x16_t v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x44;
  *(void *)(v19 + 1) = this[3].__end_;
  long long v20 = this->__end_cap_.__value_;
  uint64_t v21 = (char *)this[1].__begin_ - (char *)v20;
  uint64_t v22 = v21 >> 2;
  if ((unint64_t)v21 > 0xFFFFFFFFFFFFFFCFLL)
  {
    int8x16_t v23 = &v20[v22 + 12];
    this[1].__begin_ = v23;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    long long v20 = this->__end_cap_.__value_;
    int8x16_t v23 = this[1].__begin_;
  }
  uint64_t v24 = &v20[v22];
  unsigned int *v24 = ((v23 - v20) >> 2 << 8) | 0x42;
  long long v25 = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v26 = *(_OWORD *)&this[2].__end_;
  *(void *)(v24 + 9) = this[3].__begin_;
  *(_OWORD *)(v24 + 5) = v26;
  *(_OWORD *)(v24 + 1) = v25;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

int8x8_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateComputeProgramKey@<D0>(int *a1@<X1>, NSObject *a2@<X2>, char **a3@<X3>, char **a4@<X4>, uint64_t a5@<X8>)
{
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)a5);
  *(void *)a5 = &unk_26F852F08;
  *(void *)(a5 + 144) = 0;
  if (!a1)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultComputeDescriptor(void)::once, memory_order_acquire) != -1)
    {
      buffer_ptr = &v40;
      size_t size_ptr = (size_t)&buffer_ptr;
      std::__call_once(&AGX::defaultComputeDescriptor(void)::once, &size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultComputeDescriptor(void)::$_0 &&>>);
    }
    a1 = (int *)AGX::defaultComputeDescriptor(void)::_desc;
  }
  uint64_t v10 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v11 = *v10;
  if (v11 < 0xD)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v12 = v10[6];
    if (!v10[6]
      || ((v13 = *(unsigned int *)((char *)a1 + v12), unint64_t v14 = (unsigned int *)((char *)a1 + v12 + v13), *v14 >= 0x1F)
        ? (unsigned int v15 = 31)
        : (unsigned int v15 = *v14),
          !v15))
    {
      *(void *)(a5 + 40) = 0;
      goto LABEL_23;
    }
    unint64_t v16 = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 4 * v15;
    long long v20 = (char *)a1 + v12 + v13;
    do
    {
      uint64_t v21 = *(unsigned int *)&v20[v16 + 4];
      uint64_t v22 = &v20[v16 + v21 - *(int *)((char *)&v14[v16 / 4 + 1] + v21)];
      if (*((unsigned __int16 *)v22 + 2) >= 5u)
      {
        uint64_t v23 = *((unsigned __int16 *)v22 + 4);
        if (v23)
        {
          if (v20[v16 + 4 + v21 + v23] == 1) {
            uint64_t v24 = 1 << v17;
          }
          else {
            uint64_t v24 = 0;
          }
          v18 |= v24;
        }
      }
      ++v17;
      v16 += 4;
    }
    while (v19 != v16);
  }
  *(void *)(a5 + 40) = v18;
  if (v11 <= 6)
  {
    LODWORD(v25) = 0;
    goto LABEL_25;
  }
LABEL_23:
  uint64_t v25 = v10[3];
  if (v25) {
    LODWORD(v25) = *(int *)((char *)a1 + v25);
  }
LABEL_25:
  *(_DWORD *)(a5 + 4_Block_object_dispose(&a9, 8) = v25;
  long long v26 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v26 < 5u)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[2];
    if (v27) {
      LODWORD(v27) = *((unsigned __int8 *)a1 + v27) != 0;
    }
  }
  int v28 = *(_DWORD *)(a5 + 56) & 0xFFFFFFFE | v27;
  *(_DWORD *)(a5 + 56) = v28;
  int v29 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v29 < 0x15u)
  {
    LODWORD(v30) = 0;
  }
  else
  {
    uint64_t v30 = v29[10];
    if (v30) {
      LODWORD(v30) = 2 * (*((unsigned char *)a1 + v30) != 0);
    }
  }
  int v31 = v30 | v28 & 0xFFFFFFFD;
  *(_DWORD *)(a5 + 56) = v31;
  int v32 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v33 = *v32;
  if (v33 <= 0xE)
  {
    LODWORD(v35) = 0;
    *(unsigned char *)(a5 + 8_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    uint64_t v34 = v32[7];
    if (v32[7]) {
      LOBYTE(v34) = *((unsigned char *)a1 + v34) != 0;
    }
    *(unsigned char *)(a5 + 8_Block_object_dispose(&a9, 8) = v34;
    if (v33 < 0x11)
    {
      LODWORD(v35) = 0;
    }
    else
    {
      uint64_t v35 = v32[8];
      if (v35) {
        LODWORD(v35) = 32 * (*((unsigned char *)a1 + v35) != 0);
      }
    }
  }
  *(_DWORD *)(a5 + 56) = v35 | v31 & 0xFFFFFFDF;
  uint64_t v36 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v36 < 0x11u)
  {
    LODWORD(v37) = 0;
  }
  else
  {
    uint64_t v37 = v36[8];
    if (v37) {
      LODWORD(v37) = (*((unsigned char *)a1 + v37) != 0) << 9;
    }
  }
  *(_DWORD *)(a5 + 52) = *(_DWORD *)(a5 + 52) & 0xFFFFFDFF | v37;
  *(int8x8_t *)(a5 + 52) = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  if (a2)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v38 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a5 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v38);
  }
  if ((char **)(a5 + 96) != a3) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a5 + 96), *a3, a3[1], (a3[1] - *a3) >> 5);
  }
  if ((char **)(a5 + 120) != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a5 + 120), *a4, a4[1], (a4[1] - *a4) >> 5);
  }
  int8x8_t result = vand_s8(*(int8x8_t *)(a5 + 52), (int8x8_t)0xFFFFF73B8BFFFEFFLL);
  *(int8x8_t *)(a5 + 52) = result;
  return result;
}

void sub_2429CA124(_Unwind_Exception *a1)
{
  AGX::ComputeProgramKey::~ComputeProgramKey(v1);
  _Unwind_Resume(a1);
}

AGX::Impl::ComputeProgramKey *AGX::Impl::ComputeProgramKey::ComputeProgramKey(AGX::Impl::ComputeProgramKey *this)
{
  *((_DWORD *)this + 2) = 6;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *(void *)this = &unk_26F8540D0;
  *(_WORD *)((char *)this + 87) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)this + 12, 0);
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 15, (void *)[0 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)this + 15, (void *)[0 privateFunctions], 1u);
  return this;
}

void sub_2429CA204(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*(void **)(v1 + 64));
  }
  *(void *)uint64_t v1 = v2;
  int v4 = *(void **)(v1 + 16);
  if (v4)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void AGX::ComputeProgramKey::~ComputeProgramKey(AGX::ComputeProgramKey *this)
{
  *(void *)this = &unk_26F8540D0;
  uint64_t v2 = (void *)*((void *)this + 15);
  if (v2)
  {
    *((void *)this + 16) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 12);
  if (v3)
  {
    *((void *)this + 13) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  *(void *)this = off_26F852EC8;
  int v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unsigned int v15 = operator new(4 * v13);
    unint64_t v16 = &v15[v14];
    *unsigned int v15 = v7;
    unsigned __int8 v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unsigned __int8 v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)6,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::Impl::ComputeProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::ComputeProgramKey *this)
{
  return *((unsigned __int8 *)this + 88);
}

void AGX::Impl::ComputeProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    unint64_t v16 = (unsigned int *)operator new(4 * v14);
    *unint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFDFLL)
  {
    begiunint64_t n = &value[v17 + 8];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 8uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  uint64_t v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x4E;
  long long v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(void *)(v19 + 5) = this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

int8x8_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateFragmentProgramKey@<D0>(int *a1@<X1>, int a2@<W2>, NSObject *a3@<X3>, char **a4@<X4>, char **a5@<X5>, uint64_t a6@<X8>)
{
  AGX::FragmentProgramKey::FragmentProgramKey(a6, 0, 0, 0);
  long long v163 = 0u;
  memset(v164, 0, sizeof(v164));
  *(_OWORD *)__s = 0u;
  long long v162 = 0u;
  int v165 = 1;
  __int16 v166 = 0;
  int v167 = 0;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  long long v172 = 0u;
  long long v173 = 0u;
  bzero(__s, 0x28uLL);
  if (!a1)
  {
    AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)__s, 0);
    long long v21 = v162;
    *(_OWORD *)(a6 + 112) = *(_OWORD *)__s;
    *(_OWORD *)(a6 + 12_Block_object_dispose(&a9, 8) = v21;
    *(void *)(a6 + 144) = v163;
    if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultFragmentDescriptor(void)::once, memory_order_acquire) != -1)
    {
      size_t size_ptr = (size_t)&v174;
      p_size_t size_ptr = &size_ptr;
      std::__call_once(&AGX::defaultFragmentDescriptor(void)::once, &p_size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultFragmentDescriptor(void)::$_0 &&>>);
    }
    a1 = (int *)AGX::defaultFragmentDescriptor(void)::_desc;
    goto LABEL_81;
  }
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v13 = *v12;
  if (v13 >= 0x17)
  {
    if (v12[11])
    {
      unint64_t v14 = (unsigned int *)((char *)a1 + v12[11] + *(unsigned int *)((char *)a1 + v12[11]));
      unsigned int v15 = *v14;
      if (*v14)
      {
        unint64_t v16 = (int *)((char *)v14 + v14[1] + 4);
        uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 >= 5u)
        {
          uint64_t v18 = v17[2];
          if (v18)
          {
            unsigned int v19 = *(unsigned __int16 *)((char *)v16 + v18);
            if (v19)
            {
              if (v19 > 0x285) {
                long long v20 = &texFormatUnsupported;
              }
              else {
                long long v20 = (uint64_t *)*(&off_26516F8A0 + v19 - 1);
              }
              *(void *)&long long v168 = v20;
              DWORD2(v163) |= 1u;
            }
          }
        }
        if (v15 >= 2)
        {
          uint64_t v23 = (int *)((char *)v14 + v14[2] + 8);
          uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
          if (*v24 >= 5u)
          {
            uint64_t v25 = v24[2];
            if (v25)
            {
              unsigned int v26 = *(unsigned __int16 *)((char *)v23 + v25);
              if (v26)
              {
                if (v26 > 0x285) {
                  uint64_t v27 = &texFormatUnsupported;
                }
                else {
                  uint64_t v27 = (uint64_t *)*(&off_26516F8A0 + v26 - 1);
                }
                *((void *)&v168 + 1) = v27;
                DWORD2(v163) |= 2u;
              }
            }
          }
          if (v15 >= 3)
          {
            int v28 = (int *)((char *)v14 + v14[3] + 12);
            int v29 = (unsigned __int16 *)((char *)v28 - *v28);
            if (*v29 >= 5u)
            {
              uint64_t v30 = v29[2];
              if (v30)
              {
                unsigned int v31 = *(unsigned __int16 *)((char *)v28 + v30);
                if (v31)
                {
                  if (v31 > 0x285) {
                    int v32 = &texFormatUnsupported;
                  }
                  else {
                    int v32 = (uint64_t *)*(&off_26516F8A0 + v31 - 1);
                  }
                  *(void *)&long long v169 = v32;
                  DWORD2(v163) |= 4u;
                }
              }
            }
            if (v15 >= 4)
            {
              unsigned int v33 = (int *)((char *)v14 + v14[4] + 16);
              uint64_t v34 = (unsigned __int16 *)((char *)v33 - *v33);
              if (*v34 >= 5u)
              {
                uint64_t v35 = v34[2];
                if (v35)
                {
                  unsigned int v36 = *(unsigned __int16 *)((char *)v33 + v35);
                  if (v36)
                  {
                    if (v36 > 0x285) {
                      uint64_t v37 = &texFormatUnsupported;
                    }
                    else {
                      uint64_t v37 = (uint64_t *)*(&off_26516F8A0 + v36 - 1);
                    }
                    *((void *)&v169 + 1) = v37;
                    DWORD2(v163) |= 8u;
                  }
                }
              }
              if (v15 >= 5)
              {
                uint64_t v38 = (int *)((char *)v14 + v14[5] + 20);
                unsigned __int8 v39 = (unsigned __int16 *)((char *)v38 - *v38);
                if (*v39 >= 5u)
                {
                  uint64_t v40 = v39[2];
                  if (v40)
                  {
                    unsigned int v41 = *(unsigned __int16 *)((char *)v38 + v40);
                    if (v41)
                    {
                      if (v41 > 0x285) {
                        unsigned __int8 v42 = &texFormatUnsupported;
                      }
                      else {
                        unsigned __int8 v42 = (uint64_t *)*(&off_26516F8A0 + v41 - 1);
                      }
                      *(void *)&long long v170 = v42;
                      DWORD2(v163) |= 0x10u;
                    }
                  }
                }
                if (v15 >= 6)
                {
                  unsigned __int8 v43 = (int *)((char *)v14 + v14[6] + 24);
                  unsigned __int8 v44 = (unsigned __int16 *)((char *)v43 - *v43);
                  if (*v44 >= 5u)
                  {
                    uint64_t v45 = v44[2];
                    if (v45)
                    {
                      unsigned int v46 = *(unsigned __int16 *)((char *)v43 + v45);
                      if (v46)
                      {
                        if (v46 > 0x285) {
                          unsigned int v47 = &texFormatUnsupported;
                        }
                        else {
                          unsigned int v47 = (uint64_t *)*(&off_26516F8A0 + v46 - 1);
                        }
                        *((void *)&v170 + 1) = v47;
                        DWORD2(v163) |= 0x20u;
                      }
                    }
                  }
                  if (v15 >= 7)
                  {
                    long long v48 = (int *)((char *)v14 + v14[7] + 28);
                    long long v49 = (unsigned __int16 *)((char *)v48 - *v48);
                    if (*v49 >= 5u)
                    {
                      uint64_t v50 = v49[2];
                      if (v50)
                      {
                        unsigned int v51 = *(unsigned __int16 *)((char *)v48 + v50);
                        if (v51)
                        {
                          if (v51 > 0x285) {
                            unsigned int v52 = &texFormatUnsupported;
                          }
                          else {
                            unsigned int v52 = (uint64_t *)*(&off_26516F8A0 + v51 - 1);
                          }
                          *(void *)&long long v171 = v52;
                          DWORD2(v163) |= 0x40u;
                        }
                      }
                    }
                    if (v15 >= 8)
                    {
                      uint64_t v53 = (int *)((char *)v14 + v14[8] + 32);
                      char v54 = (unsigned __int16 *)((char *)v53 - *v53);
                      if (*v54 >= 5u)
                      {
                        uint64_t v55 = v54[2];
                        if (v55)
                        {
                          unsigned int v56 = *(unsigned __int16 *)((char *)v53 + v55);
                          if (v56)
                          {
                            if (v56 > 0x285) {
                              uint64_t v57 = &texFormatUnsupported;
                            }
                            else {
                              uint64_t v57 = (uint64_t *)*(&off_26516F8A0 + v56 - 1);
                            }
                            *((void *)&v171 + 1) = v57;
                            DWORD2(v163) |= 0x80u;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    if (v12[6]) {
      char v58 = *((unsigned char *)a1 + v12[6]);
    }
    else {
      char v58 = 1;
    }
    LOBYTE(v166) = v58;
    HIBYTE(v166) = v58;
    if (v13 < 0xF) {
      goto LABEL_80;
    }
    uint64_t v59 = v12[7];
    if (!v59) {
      goto LABEL_80;
    }
    int v22 = *((unsigned __int8 *)a1 + v59);
    if (!v22) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }
  if (v13 > 0xC) {
    goto LABEL_73;
  }
  LOBYTE(v22) = 1;
  LOBYTE(v166) = 1;
LABEL_79:
  HIBYTE(v166) = v22;
LABEL_80:
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)__s, 0);
  long long v60 = v162;
  *(_OWORD *)(a6 + 112) = *(_OWORD *)__s;
  *(_OWORD *)(a6 + 12_Block_object_dispose(&a9, 8) = v60;
  *(void *)(a6 + 144) = v163;
LABEL_81:
  uint64_t v61 = *a1;
  unsigned int v62 = (char *)a1 - v61;
  unsigned int v63 = *(unsigned __int16 *)((char *)a1 - v61);
  if (v63 < 0x17) {
    goto LABEL_141;
  }
  uint64_t v64 = -v61;
  uint64_t v65 = *((unsigned __int16 *)v62 + 11);
  if (*((_WORD *)v62 + 11))
  {
    uint64_t v66 = (char *)a1 + v65;
    uint64_t v67 = *(unsigned int *)((char *)a1 + v65);
    unint64_t v68 = *(unsigned int *)((char *)a1 + v65 + v67);
    if (v68)
    {
      unint64_t v69 = 0;
      uint64_t v70 = a6 + 64;
      uint64_t v71 = v65 + v67;
      while (1)
      {
        uint64_t v72 = *(unsigned int *)((char *)a1 + v71 + 4);
        long long v73 = (char *)a1 + v71 + v72;
        uint64_t v74 = *((int *)v73 + 1);
        char v75 = (char *)a1 + v71 + v72 - v74;
        unsigned int v76 = *((unsigned __int16 *)v75 + 2);
        if (v76 < 5) {
          goto LABEL_127;
        }
        uint64_t v77 = *((unsigned __int16 *)v75 + 4);
        if (!v77 || !*(_WORD *)((char *)a1 + v71 + v72 + v77 + 4)) {
          goto LABEL_127;
        }
        uint64_t v78 = -v74;
        if (v76 >= 9)
        {
          if (!*(_WORD *)((char *)a1 + v71 + v72 - v74 + 12)
            || !*((unsigned char *)a1 + v71 + v72 + *(unsigned __int16 *)((char *)a1 + v71 + v72 - v74 + 12) + 4))
          {
            goto LABEL_123;
          }
          int v79 = *(_DWORD *)(v70 + 4 * v69) | 1;
          *(_DWORD *)(v70 + 4 * v69) = v79;
          uint64_t v80 = (char *)a1 + v71 + v72 - *((int *)v73 + 1);
          if (*((unsigned __int16 *)v80 + 2) >= 0x15u && (uint64_t v81 = *((unsigned __int16 *)v80 + 12)) != 0)
          {
            unsigned int v82 = *((unsigned __int8 *)a1 + v71 + v72 + v81 + 4);
            if (v82 > 0x12) {
              int v83 = 0;
            }
            else {
              int v83 = 2 * v82 + 2;
            }
          }
          else
          {
            int v83 = 4;
          }
          unsigned int v84 = v83 | v79 & 0xFFFFFFC1;
          *(_DWORD *)(v70 + 4 * v69) = v84;
          uint64_t v85 = v72 - *((int *)v73 + 1);
          if (*(unsigned __int16 *)((char *)a1 + v71 + v85 + 4) >= 0x11u
            && (uint64_t v86 = *(unsigned __int16 *)((char *)a1 + v71 + v85 + 20)) != 0)
          {
            unsigned int v87 = *((unsigned __int8 *)a1 + v71 + v72 + v86 + 4);
            if (v87 > 0x12) {
              int v88 = 0;
            }
            else {
              int v88 = (v87 << 6) + 64;
            }
          }
          else
          {
            int v88 = 64;
          }
          unsigned int v89 = v88 | v84 & 0xFFFFF83F;
          *(_DWORD *)(v70 + 4 * v69) = v89;
          uint64_t v90 = (char *)a1 + v71 + v72 - *((int *)v73 + 1);
          if (*((unsigned __int16 *)v90 + 2) >= 0x13u && (uint64_t v91 = *((unsigned __int16 *)v90 + 11)) != 0)
          {
            unsigned int v92 = *((unsigned __int8 *)a1 + v71 + v72 + v91 + 4);
            if (v92 > 0x12) {
              int v93 = 0;
            }
            else {
              int v93 = (v92 << 11) + 2048;
            }
          }
          else
          {
            int v93 = 4096;
          }
          unsigned int v94 = v93 | v89 & 0xFFFF07FF;
          *(_DWORD *)(v70 + 4 * v69) = v94;
          uint64_t v95 = v72 - *((int *)v73 + 1);
          if (*(unsigned __int16 *)((char *)a1 + v71 + v95 + 4) >= 0xFu
            && (uint64_t v96 = *(unsigned __int16 *)((char *)a1 + v71 + v95 + 18)) != 0)
          {
            unsigned int v97 = *((unsigned __int8 *)a1 + v71 + v72 + v96 + 4);
            if (v97 > 0x12) {
              int v98 = 0;
            }
            else {
              int v98 = (v97 << 16) + 0x10000;
            }
          }
          else
          {
            int v98 = 0x10000;
          }
          unsigned int v99 = v98 | v94 & 0xFFE0FFFF;
          *(_DWORD *)(v70 + 4 * v69) = v99;
          uint64_t v100 = (char *)a1 + v71 + v72 - *((int *)v73 + 1);
          if (*((unsigned __int16 *)v100 + 2) >= 0xDu && (uint64_t v101 = *((unsigned __int16 *)v100 + 8)) != 0)
          {
            unint64_t v102 = *((unsigned __int8 *)a1 + v71 + v72 + v101 + 4);
            if (v102 > 4) {
              int v103 = 0;
            }
            else {
              int v103 = dword_242EB34D8[v102];
            }
          }
          else
          {
            int v103 = 6291456;
          }
          unsigned int v104 = v103 | v99 & 0xFF1FFFFF;
          *(_DWORD *)(v70 + 4 * v69) = v104;
          uint64_t v105 = v72 - *((int *)v73 + 1);
          if (*(unsigned __int16 *)((char *)a1 + v71 + v105 + 4) >= 0xBu
            && (uint64_t v106 = *(unsigned __int16 *)((char *)a1 + v71 + v105 + 14)) != 0)
          {
            unint64_t v107 = *((unsigned __int8 *)a1 + v71 + v72 + v106 + 4);
            if (v107 > 4) {
              int v108 = 0;
            }
            else {
              int v108 = dword_242EB34EC[v107];
            }
          }
          else
          {
            int v108 = 50331648;
          }
          *(_DWORD *)(v70 + 4 * v69) = v108 | v104 & 0xF8FFFFFF;
          uint64_t v109 = *((int *)v73 + 1);
          uint64_t v78 = -v109;
          unsigned int v76 = *(unsigned __int16 *)((char *)a1 + v71 + v72 - v109 + 4);
        }
        if (v76 < 7) {
          goto LABEL_125;
        }
LABEL_123:
        uint64_t v110 = v78 + v71;
        if (!*(_WORD *)((char *)a1 + v72 + v110 + 10))
        {
LABEL_125:
          int v111 = 15;
          goto LABEL_126;
        }
        int v111 = *((unsigned __int8 *)a1 + v71 + v72 + *(unsigned __int16 *)((char *)a1 + v72 + v110 + 10) + 4);
LABEL_126:
        *(_DWORD *)(a6 + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)(a6 + 48) & 0xFF0000FF | (v111 << 31 >> 31) & (0x1000000 << v69) | (1 << v69) & (v111 << 28 >> 31) | ((unsigned __int16)((256 << v69) & ((__int16)((_WORD)v111 << 13) >> 15)) | (unsigned __int16)*(_DWORD *)(a6 + 48)) & 0xFF00 | ((0x10000 << v69) & (v111 << 30 >> 31) | *(_DWORD *)(a6 + 48)) & 0xFF0000;
        unint64_t v68 = *(unsigned int *)&v66[v67];
LABEL_127:
        if (v69 <= 6)
        {
          ++v69;
          v71 += 4;
          if (v69 < v68) {
            continue;
          }
        }
        uint64_t v112 = *a1;
        uint64_t v64 = -v112;
        unsigned int v63 = *(unsigned __int16 *)((char *)a1 - v112);
        break;
      }
    }
  }
  if (v63 >= 0x27 && *(_WORD *)((char *)a1 + v64 + 38))
  {
    unint64_t v113 = *((unsigned __int8 *)a1 + *(unsigned __int16 *)((char *)a1 + v64 + 38));
    if (v113 > 0xF) {
      int v114 = 0;
    }
    else {
      int v114 = dword_242EB3478[v113];
    }
  }
  else
  {
LABEL_141:
    int v114 = 64;
  }
  unsigned int v115 = *(_DWORD *)(a6 + 40) & 0xFFFFF83F | v114;
  *(_DWORD *)(a6 + 40) = v115;
  int v116 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v116 >= 0x2Bu && (uint64_t v117 = v116[21]) != 0)
  {
    unint64_t v118 = *((unsigned __int8 *)a1 + v117);
    if (v118 > 7) {
      int v119 = 0;
    }
    else {
      int v119 = dword_242EB34B8[v118];
    }
  }
  else
  {
    int v119 = 4096;
  }
  unsigned int v120 = v119 | v115 & 0xFFFF0FFF;
  *(_DWORD *)(a6 + 40) = v120;
  long long v121 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v121 < 9u)
  {
    LODWORD(v122) = 0;
  }
  else
  {
    uint64_t v122 = v121[4];
    if (v122) {
      LODWORD(v122) = *((unsigned __int8 *)a1 + v122) != 0;
    }
  }
  int v123 = v120 & 0xFFFFFFFE | v122;
  *(_DWORD *)(a6 + 40) = v123;
  unint64_t v124 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v124 < 0xBu)
  {
    LODWORD(v125) = 0;
  }
  else
  {
    uint64_t v125 = v124[5];
    if (v125) {
      LODWORD(v125) = 2 * (*((unsigned char *)a1 + v125) != 0);
    }
  }
  int v126 = v125 | v123 & 0xFFFFFFFD;
  *(_DWORD *)(a6 + 40) = v126;
  uint64_t v127 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v128 = *v127;
  if (v128 < 0x11)
  {
    LODWORD(v130) = 0;
    int v129 = -1;
    goto LABEL_163;
  }
  if (v127[8])
  {
    int v129 = *(int *)((char *)a1 + v127[8]);
    if (v128 >= 0x13) {
      goto LABEL_158;
    }
LABEL_162:
    LODWORD(v130) = 0;
    goto LABEL_163;
  }
  int v129 = -1;
  if (v128 < 0x13) {
    goto LABEL_162;
  }
LABEL_158:
  uint64_t v130 = v127[9];
  if (v130) {
    LODWORD(v130) = *(float *)((char *)a1 + v130) != 1.0;
  }
LABEL_163:
  if (v129 == -1) {
    int v131 = v130;
  }
  else {
    int v131 = 1;
  }
  if (v131) {
    int v132 = 4;
  }
  else {
    int v132 = 0;
  }
  unsigned int v133 = v132 | v126 & 0xFFFFFFFB;
  *(_DWORD *)(a6 + 40) = v133;
  unint64_t v134 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v135 = *v134;
  if (v135 <= 0x1C)
  {
    *(void *)(a6 + 56) = 0;
LABEL_191:
    LODWORD(v150) = 0;
    *(unsigned char *)(a6 + 224) = 0;
    goto LABEL_192;
  }
  uint64_t v136 = v134[14];
  if (v134[14]
    && ((uint64_t v137 = *(unsigned int *)((char *)a1 + v136), v138 = (unsigned int *)((char *)a1 + v136 + v137), *v138 >= 0x1F)
      ? (unsigned int v139 = 31)
      : (unsigned int v139 = *v138),
        v139))
  {
    unint64_t v140 = 0;
    char v141 = 0;
    uint64_t v142 = 0;
    uint64_t v143 = 4 * v139;
    uint64_t v144 = (char *)a1 + v136 + v137;
    do
    {
      uint64_t v145 = *(unsigned int *)&v144[v140 + 4];
      uint8x8_t v146 = &v144[v140 + v145 - *(int *)((char *)&v138[v140 / 4 + 1] + v145)];
      if (*((unsigned __int16 *)v146 + 2) >= 5u)
      {
        uint64_t v147 = *((unsigned __int16 *)v146 + 4);
        if (v147)
        {
          if (v144[v140 + 4 + v145 + v147] == 1) {
            uint64_t v148 = 1 << v141;
          }
          else {
            uint64_t v148 = 0;
          }
          v142 |= v148;
        }
      }
      ++v141;
      v140 += 4;
    }
    while (v143 != v140);
  }
  else
  {
    uint64_t v142 = 0;
  }
  *(void *)(a6 + 56) = v142;
  if (v135 <= 0x1E) {
    goto LABEL_191;
  }
  uint64_t v149 = v134[15];
  if (v134[15]) {
    LOBYTE(v149) = *((unsigned char *)a1 + v149) != 0;
  }
  *(unsigned char *)(a6 + 224) = v149;
  if (v135 < 0x33)
  {
    LODWORD(v150) = 0;
  }
  else
  {
    uint64_t v150 = v134[25];
    if (v150) {
      LODWORD(v150) = 4 * (*((unsigned char *)a1 + v150) != 0);
    }
  }
LABEL_192:
  int v151 = *(_DWORD *)(a6 + 104) & 0xFFFFFFFB | v150;
  *(_DWORD *)(a6 + 104) = v151;
  long long v152 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v152 < 0x21u)
  {
    LODWORD(v153) = 0;
  }
  else
  {
    uint64_t v153 = v152[16];
    if (v153) {
      LODWORD(v153) = (*((unsigned char *)a1 + v153) != 0) << 6;
    }
  }
  int v154 = v153 | v151 & 0xFFFFFFBF;
  *(_DWORD *)(a6 + 104) = v154;
  long long v155 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v155 < 0x21u)
  {
    LODWORD(v156) = 0;
  }
  else
  {
    uint64_t v156 = v155[16];
    if (v156) {
      LODWORD(v156) = (*((unsigned char *)a1 + v156) != 0) << 9;
    }
  }
  int v157 = *(_DWORD *)(a6 + 100) & 0xFFFFFD7F | v156;
  *(_DWORD *)(a6 + 40) = v133 & 0xFFFFFFEF;
  if (a2) {
    int v158 = 256;
  }
  else {
    int v158 = 0;
  }
  *(_DWORD *)(a6 + 100) = v157;
  *(_DWORD *)(a6 + 104) = v154 & 0xFFFFFEFF | v158;
  if (a3)
  {
    __s[0] = 0;
    size_t size_ptr = 0;
    long long v159 = dispatch_data_create_map(a3, (const void **)__s, &size_ptr);
    std::string::append((std::string *)(a6 + 200), __s[0], size_ptr);
    dispatch_release(v159);
  }
  if ((char **)(a6 + 232) != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a6 + 232), *a4, a4[1], (a4[1] - *a4) >> 5);
  }
  if ((char **)(a6 + 256) != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a6 + 256), *a5, a5[1], (a5[1] - *a5) >> 5);
  }
  int8x8_t result = vand_s8(*(int8x8_t *)(a6 + 100), (int8x8_t)0xFFFFF7F78BFFFEFFLL);
  *(int8x8_t *)(a6 + 100) = result;
  return result;
}

void sub_2429CB240(_Unwind_Exception *a1)
{
  AGX::FragmentProgramKey::~FragmentProgramKey(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::FragmentProgramKey::FragmentProgramKey(uint64_t a1, NSObject *a2, void *a3, void *a4)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  int v8 = (std::string *)(a1 + 200);
  *(void *)a1 = &unk_26F854050;
  unsigned __int8 v9 = (std::string::value_type **)(a1 + 232);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 16_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 209) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 232), 0);
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 256), (void *)[0 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 256), (void *)[0 privateFunctions], 1u);
  *(void *)a1 = &unk_26F852E88;
  *(void *)(a1 + 280) = 0;
  if (a2)
  {
    __s = 0;
    size_t size_ptr = 0;
    uint64_t v10 = dispatch_data_create_map(a2, (const void **)&__s, &size_ptr);
    std::string::append(v8, __s, size_ptr);
    dispatch_release(v10);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(&__s, a4);
  if (v9 != &__s) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v9, __s, v13, (v13 - __s) >> 5);
  }
  if (__s)
  {
    unsigned int v13 = __s;
    operator delete(__s);
  }
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, objc_msgSend(a3, "functions", 0), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)[a3 privateFunctions], 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 256), __s, v13, (v13 - __s) >> 5);
  if (__s)
  {
    unsigned int v13 = __s;
    operator delete(__s);
  }
  return a1;
}

void sub_2429CB46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::FragmentProgramKey::~FragmentProgramKey(v10);
  _Unwind_Resume(a1);
}

void sub_2429CB4C4(_Unwind_Exception *a1)
{
  int v8 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 264) = v8;
    operator delete(v8);
    unsigned __int8 v9 = *v3;
    if (!*v3)
    {
LABEL_3:
      if ((*(char *)(v1 + 223) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    unsigned __int8 v9 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 240) = v9;
  operator delete(v9);
  if ((*(char *)(v1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    AGX::VertexProgramVaryings::~VertexProgramVaryings(v6);
    *(void *)uint64_t v1 = v5;
    uint64_t v10 = *(void **)(v1 + 16);
    if (v10)
    {
      *(void *)(v1 + 24) = v10;
      operator delete(v10);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v4);
  goto LABEL_5;
}

void AGX::FragmentProgramKey::~FragmentProgramKey(AGX::FragmentProgramKey *this)
{
  *(void *)this = &unk_26F854050;
  uint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 29);
  if (v3)
  {
    *((void *)this + 30) = v3;
    operator delete(v3);
  }
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if ((*((char *)this + 199) & 0x80000000) == 0) {
      goto LABEL_7;
    }
LABEL_12:
    operator delete(*((void **)this + 22));
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((*((char *)this + 175) & 0x80000000) == 0) {
    goto LABEL_8;
  }
LABEL_13:
  operator delete(*((void **)this + 19));
LABEL_8:
  *(void *)this = off_26F852E48;
  int v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    unsigned int v15 = operator new(4 * v13);
    unint64_t v16 = &v15[v14];
    *unsigned int v15 = v7;
    unsigned __int8 v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unsigned __int8 v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)4,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::Impl::FragmentProgramKey::getSupportIndirectCommandBuffers(AGX::Impl::FragmentProgramKey *this)
{
  return *((unsigned __int8 *)this + 224);
}

void AGX::Impl::FragmentProgramKey::serialize(std::vector<unsigned int> *this, unsigned int **a2, unint64_t *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    unint64_t v16 = (unsigned int *)operator new(4 * v14);
    *unint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  unint64_t v17 = (char *)v10 - (char *)value;
  uint64_t v18 = v10 - value;
  if (v17 > 0xFFFFFFFFFFFFFFAFLL)
  {
    begiunint64_t n = &value[v18 + 20];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0x14uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  long long v20 = &value[v18];
  unsigned int *v20 = ((begin - value) >> 2 << 8) | 0x3F;
  *(_OWORD *)(v20 + 1) = *(_OWORD *)&this[1].__end_cap_.__value_;
  long long v21 = *(_OWORD *)&this[2].__end_;
  long long v22 = *(_OWORD *)&this[3].__begin_;
  long long v23 = *(_OWORD *)&this[3].__end_cap_.__value_;
  *(void *)(v20 + 17) = this[4].__end_;
  *(_OWORD *)(v20 + 13) = v23;
  *(_OWORD *)(v20 + 9) = v22;
  *(_OWORD *)(v20 + 5) = v21;
  uint64_t v24 = this->__end_cap_.__value_;
  uint64_t v25 = (char *)this[1].__begin_ - (char *)v24;
  uint64_t v26 = v25 >> 2;
  if ((unint64_t)v25 > 0xFFFFFFFFFFFFFFCFLL)
  {
    uint64_t v27 = &v24[v26 + 12];
    this[1].__begin_ = v27;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xCuLL);
    uint64_t v24 = this->__end_cap_.__value_;
    uint64_t v27 = this[1].__begin_;
  }
  int v28 = &v24[v26];
  *int v28 = ((v27 - v24) >> 2 << 8) | 0x42;
  long long v29 = *(_OWORD *)&this[4].__end_cap_.__value_;
  long long v30 = *(_OWORD *)&this[5].__end_;
  *(void *)(v28 + 9) = this[6].__begin_;
  *(_OWORD *)(v28 + 5) = v30;
  *(_OWORD *)(v28 + 1) = v29;
  p_std::vector<unsigned int>::pointer end = &this[6].__end_;
  if (SHIBYTE(this[7].__begin_) < 0)
  {
    size_t begin_high = (size_t)this[6].__end_cap_.__value_;
    if (!begin_high) {
      goto LABEL_27;
    }
    p_std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer *)*p_end;
  }
  else
  {
    size_t begin_high = HIBYTE(this[7].__begin_);
    if (!HIBYTE(this[7].__begin_)) {
      goto LABEL_27;
    }
  }
  unsigned int v33 = this->__end_cap_.__value_;
  uint64_t v34 = this[1].__begin_;
  unint64_t v35 = v34 - v33;
  std::vector<unsigned int>::size_type v36 = (((begin_high + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v35 >= v35 + v36)
  {
    if (v35 > v35 + v36)
    {
      uint64_t v34 = &v33[v35 + v36];
      this[1].__begin_ = v34;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, v36);
    unsigned int v33 = this->__end_cap_.__value_;
    uint64_t v34 = this[1].__begin_;
  }
  uint64_t v37 = &v33[v35];
  *uint64_t v37 = ((v34 - v33) >> 2 << 8) | 0x4B;
  memcpy(v37 + 1, p_end, begin_high);
LABEL_27:
  uint64_t v38 = &this[7].__end_;
  if (SHIBYTE(this[8].__begin_) < 0)
  {
    size_t v39 = (size_t)this[7].__end_cap_.__value_;
    if (!v39) {
      goto LABEL_37;
    }
    uint64_t v38 = (std::vector<unsigned int>::pointer *)*v38;
  }
  else
  {
    size_t v39 = HIBYTE(this[8].__begin_);
    if (!HIBYTE(this[8].__begin_)) {
      goto LABEL_37;
    }
  }
  uint64_t v40 = this->__end_cap_.__value_;
  unsigned int v41 = this[1].__begin_;
  unint64_t v42 = v41 - v40;
  std::vector<unsigned int>::size_type v43 = (((v39 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v42 >= v42 + v43)
  {
    if (v42 > v42 + v43)
    {
      unsigned int v41 = &v40[v42 + v43];
      this[1].__begin_ = v41;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, v43);
    uint64_t v40 = this->__end_cap_.__value_;
    unsigned int v41 = this[1].__begin_;
  }
  unsigned __int8 v44 = &v40[v42];
  *unsigned __int8 v44 = ((v41 - v40) >> 2 << 8) | 0x4C;
  memcpy(v44 + 1, v38, v39);
LABEL_37:
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::Impl::FragmentProgramKey::legalizeStateForTargetOS(_DWORD *a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x1000A0011000E00) != 0 && (*a2 & v2) < (v2 & 0x1000A0011000E00))
  {
    if ((a1[28] & 0x1F) == 0x16) {
      a1[28] = a1[28] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[29] & 0x1F) == 0x16) {
      a1[29] = a1[29] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[30] & 0x1F) == 0x16) {
      a1[30] = a1[30] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[31] & 0x1F) == 0x16) {
      a1[31] = a1[31] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[32] & 0x1F) == 0x16) {
      a1[32] = a1[32] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[33] & 0x1F) == 0x16) {
      a1[33] = a1[33] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[34] & 0x1F) == 0x16) {
      a1[34] = a1[34] & 0xFFFFFFE0 | 0xF;
    }
    if ((a1[35] & 0x1F) == 0x16) {
      a1[35] = a1[35] & 0xFFFFFFE0 | 0xF;
    }
  }
  return 1;
}

void AGX::VertexProgramVaryings::~VertexProgramVaryings(void **this)
{
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
    if ((*((char *)this + 23) & 0x80000000) == 0) {
      return;
    }
LABEL_5:
    operator delete(*this);
    return;
  }
  operator delete(this[3]);
  if (*((char *)this + 23) < 0) {
    goto LABEL_5;
  }
}

int8x8_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateMeshProgramKey@<D0>(int *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, int a4@<W4>, NSObject *a5@<X5>, char **a6@<X6>, char **a7@<X7>, uint64_t a8@<X8>, char a9)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v55 = *(std::string *)a2;
  }
  char v54 = a6;
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v56 = *(std::string *)(a2 + 24);
  }
  unint64_t v17 = a7;
  char v18 = *(unsigned char *)(a2 + 48);
  char v57 = v18;
  int v19 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
  long long v20 = a5;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v58, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  }
  else {
    std::string v58 = v55;
  }
  int v21 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v56;
  }
  char v60 = v18;
  AGX::MeshProgramKey::MeshProgramKey(a8, 0, a3, a4, (uint64_t)&v58, 0, 0, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((v21 & 0x80000000) == 0) {
        goto LABEL_16;
      }
LABEL_38:
      operator delete(v56.__r_.__value_.__l.__data_);
      if ((v19 & 0x80000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_39;
    }
  }
  else if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v58.__r_.__value_.__l.__data_);
  if (v21 < 0) {
    goto LABEL_38;
  }
LABEL_16:
  if ((v19 & 0x80000000) == 0) {
    goto LABEL_17;
  }
LABEL_39:
  operator delete(v55.__r_.__value_.__l.__data_);
LABEL_17:
  if (!a1)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultMeshDescriptor(void)::once, memory_order_acquire) != -1)
    {
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
      size_ptr[0] = (size_t)&v58;
      std::__call_once(&AGX::defaultMeshDescriptor(void)::once, size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultMeshDescriptor(void)::$_0 &&>>);
    }
    a1 = (int *)AGX::defaultMeshDescriptor(void)::_desc;
  }
  long long v22 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v23 = *v22;
  if (v23 <= 0x12)
  {
    LODWORD(v37) = 0;
    *(void *)(a8 + 40) = 0;
  }
  else
  {
    uint64_t v24 = v22[9];
    if (v22[9]
      && ((uint64_t v25 = *(unsigned int *)((char *)a1 + v24), v26 = (unsigned int *)((char *)a1 + v24 + v25), *v26 >= 0x1F)
        ? (unsigned int v27 = 31)
        : (unsigned int v27 = *v26),
          v27))
    {
      unint64_t v28 = 0;
      char v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 4 * v27;
      int v32 = (char *)a1 + v24 + v25;
      do
      {
        uint64_t v33 = *(unsigned int *)&v32[v28 + 4];
        uint64_t v34 = &v32[v28 + v33 - *(int *)((char *)&v26[v28 / 4 + 1] + v33)];
        if (*((unsigned __int16 *)v34 + 2) >= 5u)
        {
          uint64_t v35 = *((unsigned __int16 *)v34 + 4);
          if (v35)
          {
            if (v32[v28 + 4 + v33 + v35] == 1) {
              uint64_t v36 = 1 << v29;
            }
            else {
              uint64_t v36 = 0;
            }
            v30 |= v36;
          }
        }
        ++v29;
        v28 += 4;
      }
      while (v31 != v28);
    }
    else
    {
      uint64_t v30 = 0;
    }
    *(void *)(a8 + 40) = v30;
    if (v23 < 0x15)
    {
      LODWORD(v37) = 0;
    }
    else
    {
      uint64_t v37 = v22[10];
      if (v37) {
        LODWORD(v37) = *((unsigned __int8 *)a1 + v37) != 0;
      }
    }
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFE | v37;
  uint64_t v38 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v38 >= 0xFu && (uint64_t v39 = v38[7]) != 0) {
    int v40 = *(int *)((char *)a1 + v39) & 0xF;
  }
  else {
    int v40 = 1;
  }
  unsigned int v41 = *(_DWORD *)(a8 + 56) & 0xFFFFFFF0 | v40;
  *(_DWORD *)(a8 + 56) = v41;
  unint64_t v42 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v42 < 0x1Du)
  {
    LODWORD(v43) = 0;
  }
  else
  {
    uint64_t v43 = v42[14];
    if (v43) {
      LODWORD(v43) = 32 * (*((unsigned char *)a1 + v43) != 0);
    }
  }
  *(_DWORD *)(a8 + 56) = v43 | v41 & 0xFFFFFFDF;
  unsigned __int8 v44 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v44 < 0x17u)
  {
    LODWORD(v45) = 0;
  }
  else
  {
    uint64_t v45 = v44[11];
    if (v45) {
      LODWORD(v45) = (*((unsigned char *)a1 + v45) != 0) << 9;
    }
  }
  int v46 = *(_DWORD *)(a8 + 52) & 0xFFFFFDFF | v45;
  *(_DWORD *)(a8 + 52) = v46;
  unsigned int v47 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v47 < 7u)
  {
    LODWORD(v4_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    uint64_t v48 = v47[3];
    if (v48) {
      LODWORD(v4_Block_object_dispose(&a9, 8) = *(int *)((char *)a1 + v48);
    }
  }
  *(_DWORD *)(a8 + 60) = v48;
  long long v49 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v49 < 9u)
  {
    LODWORD(v50) = 0;
  }
  else
  {
    uint64_t v50 = v49[4];
    if (v50) {
      LODWORD(v50) = *(int *)((char *)a1 + v50);
    }
  }
  *(_DWORD *)(a8 + 64) = v50;
  *(_DWORD *)(a8 + 52) = v46 & 0xFFFFFF7F;
  if (v20)
  {
    v58.__r_.__value_.__r.__words[0] = 0;
    size_ptr[0] = 0;
    map = dispatch_data_create_map(v20, (const void **)&v58.__r_.__value_.__l.__data_, size_ptr);
    std::string::append((std::string *)(a8 + 72), v58.__r_.__value_.__l.__data_, size_ptr[0]);
    dispatch_release(map);
  }
  if ((char **)(a8 + 104) != v54) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a8 + 104), *v54, v54[1], (v54[1] - *v54) >> 5);
  }
  if ((char **)(a8 + 128) != v17) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a8 + 128), *v17, v17[1], (v17[1] - *v17) >> 5);
  }
  if (a9) {
    int v52 = 2;
  }
  else {
    int v52 = 0;
  }
  *(_DWORD *)(a8 + 96) = *(_DWORD *)(a8 + 96) & 0xFFFFFFFD | v52;
  int8x8_t result = vand_s8(*(int8x8_t *)(a8 + 52), (int8x8_t)0xFFFFFDFF8BFFFEFFLL);
  *(int8x8_t *)(a8 + 52) = result;
  return result;
}

void sub_2429CC010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a11);
  _Unwind_Resume(a1);
}

void sub_2429CC068(_Unwind_Exception *a1)
{
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v1);
  _Unwind_Resume(a1);
}

void AGX::Impl::MeshProgramKey::~MeshProgramKey(void **this)
{
  *this = &unk_26F854008;
  if (*((char *)this + 199) < 0)
  {
    operator delete(this[22]);
    if ((*((char *)this + 175) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[19]);
LABEL_3:
  *this = &unk_26F852D78;
  unint64_t v2 = this[16];
  if (v2)
  {
    this[17] = v2;
    operator delete(v2);
  }
  int v3 = this[13];
  if (v3)
  {
    this[14] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  *this = &unk_26F852DC0;
  int v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    unint64_t v16 = &v15[v14];
    *uint64_t v15 = v7;
    unsigned __int8 v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unsigned __int8 v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)10,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

void AGX::GeometrySharedKey<_AGCMeshContextStateAGP,(_AGCStreamToken)10>::serialize(std::vector<unsigned int> *this, unsigned int **a2, void *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    unint64_t v16 = (unsigned int *)operator new(4 * v14);
    *unint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFD7)
  {
    begiunint64_t n = &value[v17 + 10];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xAuLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  int v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x3E;
  long long v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_OWORD *)(v19 + 5) = *(_OWORD *)&this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

uint64_t AGX::MeshProgramKey::MeshProgramKey(uint64_t a1, NSObject *a2, int a3, int a4, uint64_t a5, void *a6, void *a7, int a8)
{
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v25 = *(std::string *)a5;
  }
  if (*(char *)(a5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a5 + 24), *(void *)(a5 + 32));
  }
  else {
    std::string v26 = *(std::string *)(a5 + 24);
  }
  unsigned __int8 v27 = *(unsigned char *)(a5 + 48);
  int v14 = v27;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 10;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F852D78;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 104), 0);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), objc_msgSend(0, "functions", &unk_26F852DC0), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)[0 privateFunctions], 1u);
  *(std::string *)(a1 + 152) = v25;
  *(std::string *)(a1 + 176) = v26;
  *(unsigned char *)(a1 + 200) = v14;
  if (a3) {
    int v15 = 128;
  }
  else {
    int v15 = 0;
  }
  if (a4) {
    int v16 = 256;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 56) = v16 | v15 | (16 * v14) | *(_DWORD *)(a1 + 56) & 0xFFFFFE6F;
  *(void *)a1 = &unk_26F852E00;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = 0;
  if (a2)
  {
    buffer_ptr = 0;
    size_t size_ptr = 0;
    uint64_t v17 = dispatch_data_create_map(a2, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 72), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v17);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a7);
  if ((void **)(a1 + 104) != &buffer_ptr) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 104), (char *)buffer_ptr, v23, (v23 - (unsigned char *)buffer_ptr) >> 5);
  }
  if (buffer_ptr)
  {
    unsigned int v23 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  buffer_ptr = 0;
  unsigned int v23 = 0;
  uint64_t v24 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[a6 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[a6 privateFunctions], 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 128), (char *)buffer_ptr, v23, (v23 - (unsigned char *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    unsigned int v23 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  if (a8) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96) & 0xFFFFFFFD | v18;
  return a1;
}

void sub_2429CC6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2429CC6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v15);
  _Unwind_Resume(a1);
}

void sub_2429CC72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  uint64_t v12 = *v8;
  if (*v8)
  {
    *(void *)(v7 + 136) = v12;
    operator delete(v12);
    BOOL v13 = *v9;
    if (!*v9)
    {
LABEL_3:
      if ((*(char *)(v7 + 95) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    BOOL v13 = *v9;
    if (!*v9) {
      goto LABEL_3;
    }
  }
  *(void *)(v7 + 112) = v13;
  operator delete(v13);
  if ((*(char *)(v7 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)uint64_t v7 = a2;
    int v14 = *(void **)(v7 + 16);
    if (v14)
    {
      *(void *)(v7 + 24) = v14;
      operator delete(v14);
    }
    AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v10);
  goto LABEL_5;
}

char *AGX::Impl::MeshProgramKey::addToSerializeStream(char *this)
{
  uint64_t v1 = (uint64_t)this;
  unint64_t v2 = this + 152;
  if (this[175] < 0)
  {
    size_t v3 = *((void *)this + 20);
    if (!v3) {
      goto LABEL_11;
    }
    unint64_t v2 = (void *)*v2;
  }
  else
  {
    size_t v3 = this[175];
    if (!this[175]) {
      goto LABEL_11;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  int v4 = (std::vector<unsigned int> *)(this + 16);
  unint64_t v7 = (v6 - v5) >> 2;
  std::vector<unsigned int>::size_type v8 = (((v3 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v7 >= v7 + v8)
  {
    if (v7 > v7 + v8)
    {
      uint64_t v6 = v5 + 4 * (v7 + v8);
      *(void *)(v1 + 24) = v6;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v4, v8);
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(v1 + 24);
  }
  unsigned __int8 v9 = (unsigned int *)(v5 + 4 * v7);
  *unsigned __int8 v9 = ((v6 - v5) >> 2 << 8) | 0x4B;
  this = (char *)memcpy(v9 + 1, v2, v3);
LABEL_11:
  uint64_t v10 = (void *)(v1 + 176);
  if (*(char *)(v1 + 199) < 0)
  {
    size_t v11 = *(void *)(v1 + 184);
    if (!v11) {
      return this;
    }
    uint64_t v10 = (void *)*v10;
  }
  else
  {
    size_t v11 = *(unsigned __int8 *)(v1 + 199);
    if (!*(unsigned char *)(v1 + 199)) {
      return this;
    }
  }
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  unint64_t v14 = (v13 - v12) >> 2;
  std::vector<unsigned int>::size_type v15 = (((v11 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v14 >= v14 + v15)
  {
    if (v14 > v14 + v15)
    {
      uint64_t v13 = v12 + 4 * (v14 + v15);
      *(void *)(v1 + 24) = v13;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 16), v15);
    uint64_t v12 = *(void *)(v1 + 16);
    uint64_t v13 = *(void *)(v1 + 24);
  }
  int v16 = (unsigned int *)(v12 + 4 * v14);
  *int v16 = ((v13 - v12) >> 2 << 8) | 0x4C;
  uint64_t v17 = v16 + 1;

  return (char *)memcpy(v17, v10, v11);
}

int8x8_t AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateObjectProgramKey@<D0>(int *a1@<X1>, int a2@<W2>, int a3@<W3>, NSObject *a4@<X4>, char **a5@<X5>, char **a6@<X6>, uint64_t a7@<X8>)
{
  AGX::ObjectProgramKey::ObjectProgramKey(a7, 0, 0, 0, a2, a3);
  if (!a1)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultObjectDescriptor(void)::once, memory_order_acquire) != -1)
    {
      buffer_ptr = &v43;
      size_t size_ptr = (size_t)&buffer_ptr;
      std::__call_once(&AGX::defaultObjectDescriptor(void)::once, &size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultObjectDescriptor(void)::$_0 &&>>);
    }
    a1 = (int *)AGX::defaultObjectDescriptor(void)::_desc;
  }
  uint64_t v12 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v13 = *v12;
  if (v13 <= 0x12)
  {
    LODWORD(v27) = 0;
    *(void *)(a7 + 40) = 0;
  }
  else
  {
    uint64_t v14 = v12[9];
    if (v12[9]
      && ((uint64_t v15 = *(unsigned int *)((char *)a1 + v14), v16 = (unsigned int *)((char *)a1 + v14 + v15), *v16 >= 0x1F)
        ? (unsigned int v17 = 31)
        : (unsigned int v17 = *v16),
          v17))
    {
      unint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 4 * v17;
      long long v22 = (char *)a1 + v14 + v15;
      do
      {
        uint64_t v23 = *(unsigned int *)&v22[v18 + 4];
        uint64_t v24 = &v22[v18 + v23 - *(int *)((char *)&v16[v18 / 4 + 1] + v23)];
        if (*((unsigned __int16 *)v24 + 2) >= 5u)
        {
          uint64_t v25 = *((unsigned __int16 *)v24 + 4);
          if (v25)
          {
            if (v22[v18 + 4 + v23 + v25] == 1) {
              uint64_t v26 = 1 << v19;
            }
            else {
              uint64_t v26 = 0;
            }
            v20 |= v26;
          }
        }
        ++v19;
        v18 += 4;
      }
      while (v21 != v18);
    }
    else
    {
      uint64_t v20 = 0;
    }
    *(void *)(a7 + 40) = v20;
    if (v13 < 0x15)
    {
      LODWORD(v27) = 0;
    }
    else
    {
      uint64_t v27 = v12[10];
      if (v27) {
        LODWORD(v27) = *((unsigned __int8 *)a1 + v27) != 0;
      }
    }
  }
  *(_DWORD *)(a7 + 96) = *(_DWORD *)(a7 + 96) & 0xFFFFFFFE | v27;
  unint64_t v28 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v28 >= 0xFu && (uint64_t v29 = v28[7]) != 0) {
    int v30 = 8 * (*(int *)((char *)a1 + v29) & 0xF);
  }
  else {
    int v30 = 8;
  }
  unsigned int v31 = *(_DWORD *)(a7 + 56) & 0xFFFFFF87 | v30;
  *(_DWORD *)(a7 + 56) = v31;
  int v32 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v32 < 0x1Bu)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    uint64_t v33 = v32[13];
    if (v33) {
      LODWORD(v33) = *((unsigned __int8 *)a1 + v33) != 0;
    }
  }
  *(_DWORD *)(a7 + 56) = v33 | v31 & 0xFFFFFFFE;
  uint64_t v34 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v34 < 0x17u)
  {
    LODWORD(v35) = 0;
  }
  else
  {
    uint64_t v35 = v34[11];
    if (v35) {
      LODWORD(v35) = (*((unsigned char *)a1 + v35) != 0) << 9;
    }
  }
  int v36 = *(_DWORD *)(a7 + 52) & 0xFFFFFDFF | v35;
  *(_DWORD *)(a7 + 52) = v36;
  uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 7u)
  {
    LODWORD(v3_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    uint64_t v38 = v37[3];
    if (v38) {
      LODWORD(v3_Block_object_dispose(&a9, 8) = *(int *)((char *)a1 + v38);
    }
  }
  *(_DWORD *)(a7 + 60) = v38;
  uint64_t v39 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v39 < 9u)
  {
    LODWORD(v40) = 0;
  }
  else
  {
    uint64_t v40 = v39[4];
    if (v40) {
      LODWORD(v40) = *(int *)((char *)a1 + v40);
    }
  }
  *(_DWORD *)(a7 + 64) = v40;
  *(_DWORD *)(a7 + 52) = v36 & 0xFFFFFF7F;
  if (a4)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    unsigned int v41 = dispatch_data_create_map(a4, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a7 + 72), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v41);
  }
  if ((char **)(a7 + 104) != a5) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a7 + 104), *a5, a5[1], (a5[1] - *a5) >> 5);
  }
  if ((char **)(a7 + 128) != a6) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a7 + 128), *a6, a6[1], (a6[1] - *a6) >> 5);
  }
  int8x8_t result = vand_s8(*(int8x8_t *)(a7 + 52), (int8x8_t)0xFFFFFF7F8BFFFEFFLL);
  *(int8x8_t *)(a7 + 52) = result;
  return result;
}

void sub_2429CCC50(_Unwind_Exception *a1)
{
  AGX::ObjectProgramKey::~ObjectProgramKey(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::ObjectProgramKey::ObjectProgramKey(uint64_t a1, NSObject *a2, void *a3, void *a4, int a5, int a6)
{
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 9;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F852CA8;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v12 = (std::string *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  unsigned int v13 = (std::string::value_type **)(a1 + 104);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 104), 0);
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)[0 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 128), (void *)[0 privateFunctions], 1u);
  if (a5) {
    int v14 = 2;
  }
  else {
    int v14 = 0;
  }
  if (a6) {
    int v15 = 4;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 56) = v15 | v14 | *(_DWORD *)(a1 + 56) & 0xFFFFFFF9;
  *(void *)a1 = &unk_26F852D30;
  *(void *)(a1 + 152) = 0;
  if (a2)
  {
    __s = 0;
    size_t size_ptr = 0;
    int v16 = dispatch_data_create_map(a2, (const void **)&__s, &size_ptr);
    std::string::append(v12, __s, size_ptr);
    dispatch_release(v16);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl(&__s, a4);
  if (v13 != &__s) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v13, __s, v19, (v19 - __s) >> 5);
  }
  if (__s)
  {
    char v19 = __s;
    operator delete(__s);
  }
  char v19 = 0;
  uint64_t v20 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, objc_msgSend(a3, "functions", 0), 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&__s, (void *)[a3 privateFunctions], 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 128), __s, v19, (v19 - __s) >> 5);
  if (__s)
  {
    char v19 = __s;
    operator delete(__s);
  }
  return a1;
}

void sub_2429CCE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ObjectProgramKey::~ObjectProgramKey(v10);
  _Unwind_Resume(a1);
}

void sub_2429CCEE4(_Unwind_Exception *a1)
{
  unint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 136) = v7;
    operator delete(v7);
    std::vector<unsigned int>::size_type v8 = *v3;
    if (!*v3)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<unsigned int>::size_type v8 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 112) = v8;
  operator delete(v8);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)uint64_t v1 = v5;
    unsigned __int8 v9 = *(void **)(v1 + 16);
    if (v9)
    {
      *(void *)(v1 + 24) = v9;
      operator delete(v9);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v4);
  goto LABEL_5;
}

void AGX::ObjectProgramKey::~ObjectProgramKey(AGX::ObjectProgramKey *this)
{
  *(void *)this = &unk_26F852CA8;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  size_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  *(void *)this = off_26F852CF0;
  int v4 = (void *)*((void *)this + 2);
  if (v4)
  {
    *((void *)this + 3) = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    int v15 = operator new(4 * v13);
    int v16 = &v15[v14];
    *int v15 = v7;
    unsigned __int8 v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    unsigned __int8 v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)9,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 96) & 1;
}

void AGX::GeometrySharedKey<_AGCObjectContextStateAGP,(_AGCStreamToken)9>::serialize(std::vector<unsigned int> *this, unsigned int **a2, void *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    int v16 = (unsigned int *)operator new(4 * v14);
    *int v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFD7)
  {
    begiunint64_t n = &value[v17 + 10];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 0xAuLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  char v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x3D;
  long long v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(_OWORD *)(v19 + 5) = *(_OWORD *)&this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

void *AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::CreateVertexProgramKey@<X0>(int *a1@<X1>, uint64_t a2@<X2>, NSObject *a3@<X3>, char **a4@<X4>, char **a5@<X5>, int a6@<W6>, uint64_t a7@<X8>)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v62 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  char v64 = *(unsigned char *)(a2 + 48);
  AGX::VertexProgramKey::VertexProgramKey(a7, (uint64_t)&v62, 0, 0, 0, 0);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_12:
    operator delete(v62.__r_.__value_.__l.__data_);
    if (a1) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_12;
  }
LABEL_9:
  if (a1) {
    goto LABEL_16;
  }
LABEL_13:
  if (atomic_load_explicit((atomic_ullong *volatile)&AGX::defaultVertexDescriptor(void)::once, memory_order_acquire) != -1)
  {
    buffer_ptr = &v65;
    size_t size_ptr = (size_t)&buffer_ptr;
    std::__call_once(&AGX::defaultVertexDescriptor(void)::once, &size_ptr, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<AGX::defaultVertexDescriptor(void)::$_0 &&>>);
  }
  a1 = (int *)AGX::defaultVertexDescriptor(void)::_desc;
LABEL_16:
  uint64_t v14 = *(void *)(a7 + 56) | 0xFFLL;
  *(void *)(a7 + 56) = v14;
  *(_DWORD *)(a7 + 4_Block_object_dispose(&a9, 8) = 0;
  uint64_t v15 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v15 < 0x15u)
  {
    LOBYTE(v16) = 0;
  }
  else
  {
    uint64_t v16 = v15[10];
    if (v16) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16);
    }
  }
  unint64_t v17 = v14 & 0xFFFFFFFFFFFFF3FFLL | ((unint64_t)(v16 & 3) << 10);
  *(void *)(a7 + 56) = v17;
  unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v18 < 0x19u)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v18[12];
    if (v19) {
      LOBYTE(v19) = *((unsigned char *)a1 + v19);
    }
  }
  unint64_t v20 = v17 & 0xFFFFFFFFFFFFFCFFLL | ((unint64_t)(v19 & 3) << 8);
  *(void *)(a7 + 56) = v20;
  uint64_t v21 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v22 = *v21;
  if (v22 <= 0x1E)
  {
    LODWORD(v36) = 0;
    *(void *)(a7 + 40) = 0;
  }
  else
  {
    uint64_t v23 = v21[15];
    if (v21[15]
      && ((v24 = *(unsigned int *)((char *)a1 + v23), uint64_t v25 = (unsigned int *)((char *)a1 + v23 + v24), *v25 >= 0x1F)
        ? (unsigned int v26 = 31)
        : (unsigned int v26 = *v25),
          v26))
    {
      unint64_t v27 = 0;
      char v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 4 * v26;
      unsigned int v31 = (char *)a1 + v23 + v24;
      do
      {
        uint64_t v32 = *(unsigned int *)&v31[v27 + 4];
        uint64_t v33 = &v31[v27 + v32 - *(int *)((char *)&v25[v27 / 4 + 1] + v32)];
        if (*((unsigned __int16 *)v33 + 2) >= 5u)
        {
          uint64_t v34 = *((unsigned __int16 *)v33 + 4);
          if (v34)
          {
            if (v31[v27 + 4 + v32 + v34] == 1) {
              uint64_t v35 = 1 << v28;
            }
            else {
              uint64_t v35 = 0;
            }
            v29 |= v35;
          }
        }
        ++v28;
        v27 += 4;
      }
      while (v30 != v27);
    }
    else
    {
      uint64_t v29 = 0;
    }
    *(void *)(a7 + 40) = v29;
    if (v22 < 0x21)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      uint64_t v36 = v21[16];
      if (v36) {
        LODWORD(v36) = *((unsigned __int8 *)a1 + v36) != 0;
      }
    }
  }
  *(_DWORD *)(a7 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFE | v36;
  uint64_t v37 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v37 < 0x1Du)
  {
    unint64_t v38 = 0;
  }
  else
  {
    unint64_t v38 = v37[14];
    if (v38) {
      unint64_t v38 = (unint64_t)(*((unsigned char *)a1 + v38) & 3) << 12;
    }
  }
  unint64_t v39 = v38 | v20 & 0xFFFFFFFFFFFFCFFFLL;
  *(void *)(a7 + 56) = v39;
  uint64_t v40 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v40 >= 0x1Bu && (uint64_t v41 = v40[13]) != 0) {
    unint64_t v42 = (unint64_t)(*(int *)((char *)a1 + v41) & 0xF) << 14;
  }
  else {
    unint64_t v42 = 0x4000;
  }
  unint64_t v43 = v42 | v39 & 0xFFFFFFFFFFFC3FFFLL;
  *(void *)(a7 + 56) = v43;
  unsigned __int8 v44 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v44 < 0x2Bu)
  {
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = v44[21];
    if (v45) {
      unint64_t v45 = (unint64_t)(*((unsigned char *)a1 + v45) != 0) << 19;
    }
  }
  unint64_t v46 = v45 | v43 & 0xFFFFFFFFFFF7FFFFLL;
  *(void *)(a7 + 56) = v46;
  unsigned int v47 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v48 = *v47;
  if (v48 < 9) {
    goto LABEL_64;
  }
  if (!v47[4])
  {
    if (v48 >= 0xB) {
      goto LABEL_62;
    }
LABEL_64:
    unint64_t v49 = 0;
    goto LABEL_65;
  }
  unint64_t v49 = 0;
  if (v48 >= 0xB && *((unsigned char *)a1 + v47[4]))
  {
LABEL_62:
    uint64_t v50 = v47[5];
    if (v50)
    {
      unint64_t v49 = (unint64_t)(*((unsigned char *)a1 + v50) == 1) << 20;
      goto LABEL_65;
    }
    goto LABEL_64;
  }
LABEL_65:
  unint64_t v51 = v49 | v46 & 0xFFFFFFFFFFEFFFFFLL;
  *(void *)(a7 + 56) = v51;
  int v52 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v52 < 0x11u)
  {
    unint64_t v53 = 0;
  }
  else
  {
    unint64_t v53 = v52[8];
    if (v53) {
      unint64_t v53 = (unint64_t)(*((unsigned char *)a1 + v53) & 1) << 22;
    }
  }
  unint64_t v54 = v53 | v51 & 0xFFFFFFFFFFBFFFFFLL;
  *(void *)(a7 + 56) = v54;
  std::string v55 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v55 < 0x23u)
  {
    unint64_t v56 = 0;
  }
  else
  {
    unint64_t v56 = v55[17];
    if (v56) {
      unint64_t v56 = (unint64_t)(*((unsigned char *)a1 + v56) != 0) << 25;
    }
  }
  *(void *)(a7 + 56) = v56 | v54 & 0xFFFFFFFFFDFFFFFFLL;
  char v57 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v57 < 0x23u)
  {
    LODWORD(v5_Block_object_dispose(&a9, 8) = 0;
  }
  else
  {
    uint64_t v58 = v57[17];
    if (v58) {
      LODWORD(v5_Block_object_dispose(&a9, 8) = (*((unsigned char *)a1 + v58) != 0) << 9;
    }
  }
  *(_DWORD *)(a7 + 52) = *(_DWORD *)(a7 + 52) & 0xFFFFFD7F | v58;
  if (a3)
  {
    size_t size_ptr = 0;
    buffer_ptr = 0;
    uint64_t v59 = dispatch_data_create_map(a3, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a7 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v59);
  }
  if ((char **)(a7 + 96) != a4) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a7 + 96), *a4, a4[1], (a4[1] - *a4) >> 5);
  }
  int8x8_t result = (void *)(a7 + 120);
  if ((char **)(a7 + 120) != a5) {
    int8x8_t result = std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(result, *a5, a5[1], (a5[1] - *a5) >> 5);
  }
  if (a6) {
    int v61 = 2;
  }
  else {
    int v61 = 0;
  }
  *(_DWORD *)(a7 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a7 + 88) & 0xFFFFFFFD | v61;
  *(_DWORD *)(a7 + 52) &= 0x8BFFFEFF;
  *(void *)(a7 + 56) &= 0xFFFFFDFFF67FFFFFLL;
  return result;
}

void sub_2429CD7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2429CD7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2429CD7E8(_Unwind_Exception *a1)
{
  AGX::Impl::VertexProgramKey::~VertexProgramKey(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::VertexProgramKey::VertexProgramKey(uint64_t a1, uint64_t a2, NSObject *a3, void *a4, void *a5, int a6)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v19 = *(std::string *)a2;
  }
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string v20 = *(std::string *)(a2 + 24);
  }
  unsigned __int8 v21 = *(unsigned char *)(a2 + 48);
  uint64_t v11 = v21;
  *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F852BD8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = 0;
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)(a1 + 96), 0);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = 0;
  *(void *)(a1 + 136) = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 120), (void *)[0 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)(a1 + 120), (void *)[0 privateFunctions], 1u);
  *(std::string *)(a1 + 144) = v19;
  *(std::string *)(a1 + 16_Block_object_dispose(&a9, 8) = v20;
  *(unsigned char *)(a1 + 192) = v11;
  *(void *)(a1 + 56) = *(void *)(a1 + 56) & 0xFFFFFFFFFFFBFFFFLL | (v11 << 18);
  *(void *)a1 = &unk_26F852C60;
  if (a3)
  {
    buffer_ptr = 0;
    size_t size_ptr = 0;
    uint64_t v12 = dispatch_data_create_map(a3, (const void **)&buffer_ptr, &size_ptr);
    std::string::append((std::string *)(a1 + 64), (const std::string::value_type *)buffer_ptr, size_ptr);
    dispatch_release(v12);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a5);
  if ((void **)(a1 + 96) != &buffer_ptr) {
    std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 96), (char *)buffer_ptr, v17, (v17 - (unsigned char *)buffer_ptr) >> 5);
  }
  if (buffer_ptr)
  {
    unint64_t v17 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  buffer_ptr = 0;
  unint64_t v17 = 0;
  uint64_t v18 = 0;
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[a4 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[a4 privateFunctions], 1u);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(a1 + 120), (char *)buffer_ptr, v17, (v17 - (unsigned char *)buffer_ptr) >> 5);
  if (buffer_ptr)
  {
    unint64_t v17 = (char *)buffer_ptr;
    operator delete(buffer_ptr);
  }
  if (a6) {
    int v13 = 2;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a1 + 88) & 0xFFFFFFFD | v13;
  return a1;
}

void sub_2429CDAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2429CDAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::Impl::VertexProgramKey::~VertexProgramKey(v13);
  _Unwind_Resume(a1);
}

void sub_2429CDB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v11 = *v6;
  if (*v6)
  {
    *(void *)(v5 + 12_Block_object_dispose(&a9, 8) = v11;
    operator delete(v11);
    uint64_t v12 = *v7;
    if (!*v7)
    {
LABEL_3:
      if ((*(char *)(v5 + 87) & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v12 = *v7;
    if (!*v7) {
      goto LABEL_3;
    }
  }
  *(void *)(v5 + 104) = v12;
  operator delete(v12);
  if ((*(char *)(v5 + 87) & 0x80000000) == 0)
  {
LABEL_5:
    *(void *)uint64_t v5 = v9;
    int v13 = *(void **)(v5 + 16);
    if (v13)
    {
      *(void *)(v5 + 24) = v13;
      operator delete(v13);
    }
    AGX::VertexProgramVaryings::~VertexProgramVaryings((void **)va);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(*v8);
  goto LABEL_5;
}

void AGX::Impl::VertexProgramKey::~VertexProgramKey(void **this)
{
  *this = &unk_26F853FC0;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    if ((*((char *)this + 167) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*((char *)this + 167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[18]);
LABEL_3:
  *this = &unk_26F852BD8;
  unint64_t v2 = this[15];
  if (v2)
  {
    this[16] = v2;
    operator delete(v2);
  }
  size_t v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  *this = &unk_26F852C20;
  int v4 = this[2];
  if (v4)
  {
    this[3] = v4;
    operator delete(v4);
  }
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::isPrecompiledToPipelineCache()
{
  return 0;
}

void ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    uint64_t v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *uint64_t v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)3,(AGX::DriverShaderCompilationMode)0>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::getSupportIndirectCommandBuffers(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) & 1;
}

void AGX::GeometrySharedKey<_AGCVertexContextStateAGP,(_AGCStreamToken)3>::serialize(std::vector<unsigned int> *this, unsigned int **a2, void *a3)
{
  p_end_cap = (std::vector<unsigned int> *)&this->__end_cap_;
  value = this->__end_cap_.__value_;
  this[1].__begin_ = value;
  int v8 = LOBYTE(this->__end_) | 0x100;
  std::vector<unsigned int>::pointer end = this[1].__end_;
  if (value >= end)
  {
    uint64_t v11 = (char *)end - (char *)value;
    uint64_t v12 = v11 >> 1;
    if ((unint64_t)(v11 >> 1) <= 1) {
      uint64_t v12 = 1;
    }
    BOOL v13 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v12;
    }
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = v14;
    uint64_t v16 = (unsigned int *)operator new(4 * v14);
    *uint64_t v16 = v8;
    uint64_t v10 = v16 + 1;
    this->__end_cap_.__value_ = v16;
    this[1].__begin_ = v16 + 1;
    this[1].__end_ = &v16[v15];
    if (value)
    {
      operator delete(value);
      value = p_end_cap->__begin_;
    }
    else
    {
      value = v16;
    }
  }
  else
  {
    unsigned int *value = v8;
    uint64_t v10 = value + 1;
  }
  this[1].__begin_ = v10;
  uint64_t v17 = v10 - value;
  if ((unint64_t)((char *)v10 - (char *)value) > 0xFFFFFFFFFFFFFFDFLL)
  {
    begiunint64_t n = &value[v17 + 8];
    this[1].__begin_ = begin;
  }
  else
  {
    std::vector<unsigned int>::__append(p_end_cap, 8uLL);
    value = this->__end_cap_.__value_;
    begiunint64_t n = this[1].__begin_;
  }
  std::string v19 = &value[v17];
  unsigned int *v19 = ((begin - value) >> 2 << 8) | 0x3C;
  long long v20 = *(_OWORD *)&this[1].__end_cap_.__value_;
  *(void *)(v19 + 5) = this[2].__end_;
  *(_OWORD *)(v19 + 1) = v20;
  (*((void (**)(std::vector<unsigned int> *))this->__begin_ + 6))(this);
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream(this);
  *a2 = this->__end_cap_.__value_;
  *a3 = (char *)this[1].__begin_ - (char *)this->__end_cap_.__value_;
}

char *AGX::Impl::VertexProgramKey::addToSerializeStream(char *this)
{
  uint64_t v1 = (uint64_t)this;
  unint64_t v2 = this + 144;
  if (this[167] < 0)
  {
    size_t v3 = *((void *)this + 19);
    if (!v3) {
      goto LABEL_11;
    }
    unint64_t v2 = (void *)*v2;
  }
  else
  {
    size_t v3 = this[167];
    if (!this[167]) {
      goto LABEL_11;
    }
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  int v4 = (std::vector<unsigned int> *)(this + 16);
  unint64_t v7 = (v6 - v5) >> 2;
  std::vector<unsigned int>::size_type v8 = (((v3 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v7 >= v7 + v8)
  {
    if (v7 > v7 + v8)
    {
      uint64_t v6 = v5 + 4 * (v7 + v8);
      *(void *)(v1 + 24) = v6;
    }
  }
  else
  {
    std::vector<unsigned int>::__append(v4, v8);
    uint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = *(void *)(v1 + 24);
  }
  uint64_t v9 = (unsigned int *)(v5 + 4 * v7);
  *uint64_t v9 = ((v6 - v5) >> 2 << 8) | 0x4B;
  this = (char *)memcpy(v9 + 1, v2, v3);
LABEL_11:
  uint64_t v10 = (void *)(v1 + 168);
  if (*(char *)(v1 + 191) < 0)
  {
    size_t v11 = *(void *)(v1 + 176);
    if (!v11) {
      return this;
    }
    uint64_t v10 = (void *)*v10;
  }
  else
  {
    size_t v11 = *(unsigned __int8 *)(v1 + 191);
    if (!*(unsigned char *)(v1 + 191)) {
      return this;
    }
  }
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  unint64_t v14 = (v13 - v12) >> 2;
  std::vector<unsigned int>::size_type v15 = (((v11 + 3) >> 2) + 2) & 0x7FFFFFFFFFFFFFFELL;
  if (v14 >= v14 + v15)
  {
    if (v14 > v14 + v15)
    {
      uint64_t v13 = v12 + 4 * (v14 + v15);
      *(void *)(v1 + 24) = v13;
    }
  }
  else
  {
    std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v1 + 16), v15);
    uint64_t v12 = *(void *)(v1 + 16);
    uint64_t v13 = *(void *)(v1 + 24);
  }
  uint64_t v16 = (unsigned int *)(v12 + 4 * v14);
  *uint64_t v16 = ((v13 - v12) >> 2 << 8) | 0x4C;
  uint64_t v17 = v16 + 1;

  return (char *)memcpy(v17, v10, v11);
}

void AGX::ProgramKeyFactoryImpl<AGX::HAL200::Classes,AGX::HAL200::Encoders>::~ProgramKeyFactoryImpl()
{
}

void __destroy_helper_block_e8_88c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1)
{
}

id __copy_helper_block_e8_88c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 88);
  *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = result;
  return result;
}

intptr_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionPipelineSets<true>(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = (char *)operator new(0x50uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(_OWORD *)(v10 + 24) = 0u;
  *(void *)uint64_t v10 = &unk_26F853B50;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 9) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *((void *)v10 + 6) = dispatch_group_create();
  char v28 = v10 + 56;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + _Block_object_dispose(&a9, 8) = 0;
  *((void *)v10 + 9) = 0;
  *a1 = v10 + 24;
  a1[1] = v10;
  intptr_t result = [a2 requiresRaytracingEmulation];
  if ((result & 1) == 0)
  {
    unint64_t v27 = a4;
    os_unfair_lock_lock((os_unfair_lock_t)v10 + 10);
    uint64_t v12 = a3[1];
    *((void *)v10 + 3) = *a3;
    *((void *)v10 + 4) = v12;
    uint64_t v13 = a3[3];
    if (a3[4] != v13)
    {
      unint64_t v14 = 0;
      std::vector<unsigned int>::size_type v15 = (unint64_t *)(v10 + 72);
      unint64_t i = *((void *)v10 + 8);
      do
      {
        uint64_t v17 = v13 + 80 * v14;
        if (i < *v15)
        {
          AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(i, v17, a5);
          i += 1304;
          *((void *)v10 + _Block_object_dispose(&a9, 8) = i;
        }
        else
        {
          uint64_t v18 = 0x1F693A1C451AB30BLL * ((uint64_t)(i - *v28) >> 3);
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) > 0x3241F693A1C451) {
            abort();
          }
          if (0x3ED274388A356616 * ((uint64_t)(*v15 - *v28) >> 3) > v19) {
            unint64_t v19 = 0x3ED274388A356616 * ((uint64_t)(*v15 - *v28) >> 3);
          }
          if ((unint64_t)(0x1F693A1C451AB30BLL * ((uint64_t)(*v15 - *v28) >> 3)) >= 0x1920FB49D0E228) {
            unint64_t v20 = 0x3241F693A1C451;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20)
          {
            if (v20 > 0x3241F693A1C451) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unsigned __int8 v21 = (char *)operator new(1304 * v20);
          }
          else
          {
            unsigned __int8 v21 = 0;
          }
          uint64_t v29 = (uint64_t)&v21[1304 * v18];
          *((void *)&v30 + 1) = &v21[1304 * v20];
          AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1(v29, v17, a5);
          unsigned int v22 = (long long *)v29;
          unint64_t i = v29 + 1304;
          uint64_t v23 = (long long *)*((void *)v10 + 7);
          uint64_t v24 = (long long *)*((void *)v10 + 8);
          if (v24 != v23)
          {
            do
            {
              uint64_t v24 = (long long *)((char *)v24 - 1304);
              unsigned int v22 = AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionPipelineSetGen1((long long *)((char *)v22 - 1304), v24);
            }
            while (v24 != v23);
            uint64_t v24 = (long long *)*((void *)v10 + 7);
            uint64_t v25 = (long long *)*((void *)v10 + 8);
            *((void *)v10 + 7) = v22;
            *(void *)&long long v30 = v29 + 1304;
            *((_OWORD *)v10 + 4) = v30;
            for (i = v29 + 1304; v25 != v24; uint64_t v25 = (long long *)((char *)v25 - 1304))
            {

              *((void *)v25 - 150) = 0;
              *((void *)v25 - 1) = 0;
              std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)v25 - 149);
            }
            if (!v24) {
              goto LABEL_5;
            }
LABEL_24:
            operator delete(v24);
            goto LABEL_5;
          }
          *((void *)v10 + 7) = v29;
          *((void *)v10 + _Block_object_dispose(&a9, 8) = i;
          *((void *)v10 + 9) = *((void *)&v30 + 1);
          if (v24) {
            goto LABEL_24;
          }
        }
LABEL_5:
        *((void *)v10 + _Block_object_dispose(&a9, 8) = i;
        ++v14;
        uint64_t v13 = a3[3];
      }
      while (v14 < 0xCCCCCCCCCCCCCCCDLL * ((a3[4] - v13) >> 4));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)v10 + 10);
    AGX::IntersectionPipelineSetsGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::merge((uint64_t)(v10 + 24), v27, a5);
    unsigned int v26 = *((void *)v10 + 6);
    return dispatch_group_wait(v26, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_2429CE3B4(_Unwind_Exception *a1)
{
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

id AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createPerformanceStatisticsDictionary(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)a1 + 13) - *((void *)a1 + 12);
  if (v6)
  {
    uint64_t v44 = a3;
    uint64_t v45 = a2;
    uint64_t v43 = (uint64_t)&v43;
    unint64_t v7 = v6 / 24;
    uint64_t v8 = MEMORY[0x270FA5388](a1);
    uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    MEMORY[0x270FA5388](v8);
    uint64_t v12 = (char *)&v43 - v11;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    if (v7 <= 1) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = v7;
    }
    do
    {
      *(void *)&v12[8 * v14] = objc_msgSend(NSString, "stringWithCString:");
      *(void *)&v10[8 * v14] = [NSNumber numberWithUnsignedInt:*(unsigned int *)(*((void *)a1 + 15) + 4 * v14)];
      ++v14;
      v13 += 24;
    }
    while (v15 != v14);
    uint64_t v16 = [NSDictionary dictionaryWithObjects:v10 forKeys:v12 count:v7];
    uint64_t v3 = v44;
    uint64_t v4 = v45;
  }
  else
  {
    uint64_t v16 = [NSDictionary dictionary];
  }
  id v17 = objc_alloc_init(MEMORY[0x263EFF9A0]);
  LODWORD(v1_Block_object_dispose(&a9, 8) = a1[2];
  uint64_t v19 = [NSNumber numberWithFloat:v18];
  [v17 setObject:v19 forKey:*MEMORY[0x263F126C0]];
  uint64_t v20 = [NSNumber numberWithUnsignedInt:*a1];
  [v17 setObject:v20 forKey:*MEMORY[0x263F12720]];
  uint64_t v21 = [NSNumber numberWithUnsignedInt:a1[1]];
  [v17 setObject:v21 forKey:*MEMORY[0x263F12710]];
  uint64_t v22 = [NSNumber numberWithUnsignedInt:a1[3]];
  [v17 setObject:v22 forKey:*MEMORY[0x263F12760]];
  uint64_t v23 = [NSNumber numberWithUnsignedInt:a1[4]];
  [v17 setObject:v23 forKey:*MEMORY[0x263F126B0]];
  uint64_t v24 = [NSNumber numberWithUnsignedInt:a1[5]];
  [v17 setObject:v24 forKey:*MEMORY[0x263F12740]];
  uint64_t v25 = [NSNumber numberWithUnsignedInt:a1[6]];
  [v17 setObject:v25 forKey:*MEMORY[0x263F12748]];
  uint64_t v26 = [NSNumber numberWithUnsignedInt:a1[7]];
  [v17 setObject:v26 forKey:*MEMORY[0x263F12758]];
  uint64_t v27 = [NSNumber numberWithUnsignedInt:a1[8]];
  [v17 setObject:v27 forKey:*MEMORY[0x263F126D0]];
  uint64_t v28 = [NSNumber numberWithUnsignedInt:a1[9]];
  [v17 setObject:v28 forKey:*MEMORY[0x263F126D8]];
  uint64_t v29 = [NSNumber numberWithUnsignedInt:a1[10]];
  [v17 setObject:v29 forKey:*MEMORY[0x263F126E0]];
  uint64_t v30 = [NSNumber numberWithUnsignedInt:a1[11]];
  [v17 setObject:v30 forKey:*MEMORY[0x263F126B8]];
  uint64_t v31 = [NSNumber numberWithUnsignedInt:a1[12]];
  [v17 setObject:v31 forKey:*MEMORY[0x263F12728]];
  uint64_t v32 = [NSNumber numberWithUnsignedInt:a1[13]];
  [v17 setObject:v32 forKey:*MEMORY[0x263F12730]];
  uint64_t v33 = [NSNumber numberWithUnsignedInt:a1[19]];
  [v17 setObject:v33 forKey:*MEMORY[0x263F12718]];
  uint64_t v34 = [NSNumber numberWithUnsignedInt:a1[20]];
  [v17 setObject:v34 forKey:*MEMORY[0x263F12738]];
  uint64_t v35 = [NSNumber numberWithUnsignedInt:a1[14]];
  [v17 setObject:v35 forKey:*MEMORY[0x263F12770]];
  uint64_t v36 = [NSNumber numberWithUnsignedInt:a1[21]];
  [v17 setObject:v36 forKey:*MEMORY[0x263F12750]];
  uint64_t v37 = [NSNumber numberWithUnsignedInt:a1[15]];
  [v17 setObject:v37 forKey:*MEMORY[0x263F126E8]];
  uint64_t v38 = [NSNumber numberWithUnsignedInt:a1[16]];
  [v17 setObject:v38 forKey:*MEMORY[0x263F126F0]];
  uint64_t v39 = [NSNumber numberWithUnsignedInt:a1[17]];
  [v17 setObject:v39 forKey:*MEMORY[0x263F12700]];
  uint64_t v40 = [NSNumber numberWithUnsignedInt:a1[18]];
  [v17 setObject:v40 forKey:*MEMORY[0x263F12708]];
  uint64_t v41 = a1 + 36;
  if ((*((char *)a1 + 167) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)a1 + 167)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*((void *)a1 + 19))
  {
    uint64_t v41 = (void *)*v41;
LABEL_13:
    objc_msgSend(v17, "setObject:forKey:", objc_msgSend(NSString, "stringWithCString:", v41), @"Remarks");
  }
LABEL_14:
  objc_msgSend(v17, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedInt:", a1[22]), @"Constant calculation temporary register count");
  objc_msgSend(v17, "setObject:forKey:", objc_msgSend(NSNumber, "numberWithBool:", *((unsigned __int8 *)a1 + 92)), @"Constant calculation phase present");
  [v17 setObject:v3 forKey:v4];
  [v17 setObject:v16 forKey:@"Telemetry Statistics"];
  return v17;
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setConstantSamplerIdentifiersOnReflection<MTLRenderPipelineReflection>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  if (a1 && a2)
  {
    uint64_t v8 = a3;
    if (a3)
    {
      uint64_t v9 = (char *)operator new(16 * a3);
      uint64_t v10 = &v9[16 * v8];
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v25 = a4;
    if (a3)
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0x263F08000uLL;
      uint64_t v14 = v9;
      uint64_t v26 = v8;
      while (1)
      {
        objc_msgSend(v11, "addObject:", objc_msgSend(*(id *)(v13 + 2584), "numberWithUnsignedLongLong:", *(void *)(a2 + 8 * v12), v25));
        long long v16 = *(_OWORD *)(a1 + 16 * v12);
        if (v14 >= v10) {
          break;
        }
        *(_OWORD *)uint64_t v14 = v16;
        uint64_t v15 = v14 + 16;
LABEL_9:
        ++v12;
        uint64_t v14 = v15;
        if (v12 == v8) {
          goto LABEL_28;
        }
      }
      uint64_t v17 = (v14 - v9) >> 4;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60) {
        abort();
      }
      if ((v10 - v9) >> 3 > v18) {
        unint64_t v18 = (v10 - v9) >> 3;
      }
      if ((unint64_t)(v10 - v9) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19)
      {
        long long v27 = *(_OWORD *)(a1 + 16 * v12);
        if (v19 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v20 = (char *)operator new(16 * v19);
        long long v16 = v27;
      }
      else
      {
        uint64_t v20 = 0;
      }
      unint64_t v21 = v13;
      uint64_t v22 = &v20[16 * v17];
      *(_OWORD *)uint64_t v22 = v16;
      uint64_t v15 = v22 + 16;
      if (v14 == v9)
      {
        uint64_t v23 = v22;
        uint64_t v10 = &v20[16 * v19];
        if (!v9) {
          goto LABEL_25;
        }
      }
      else
      {
        do
        {
          uint64_t v23 = v22 - 16;
          *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
          v14 -= 16;
          v22 -= 16;
        }
        while (v14 != v9);
        uint64_t v10 = &v20[16 * v19];
        if (!v9) {
          goto LABEL_25;
        }
      }
      operator delete(v9);
LABEL_25:
      uint64_t v9 = v23;
      unint64_t v13 = v21;
      uint64_t v8 = v26;
      goto LABEL_9;
    }
LABEL_28:
    uint64_t v24 = v25;
    objc_msgSend(v25, "setConstantSamplerDescriptorsFromBitmasks:stride:count:", v9, 16, v8, v25);
    [v24 setConstantSamplerUniqueIdentifiers:v11];

    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_2429CEC00(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN3AGX21UserTileShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24createTileRenderPipelineEP31MTLTileRenderPipelineDescriptorP18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSB_SE_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setTileDebugInstrumentationData:a2];
}

uint64_t *std::unique_ptr<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter,std::default_delete<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter>>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    uint64_t v5 = *(void **)v2;
    *(void *)uint64_t v2 = 0;
    if (v5) {
      operator delete(v5);
    }
    MEMORY[0x24566ED90](v2, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

__n128 std::array<AGX::HAL200::IntersectionPipeline,4ul>::array(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 8_Block_object_dispose(&a9, 8) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 16_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 229) = *(_OWORD *)(a2 + 229);
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 24_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  uint64_t v14 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v14;
  uint64_t v15 = *(void *)(a2 + 312);
  *(void *)(a1 + 312) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 32_Block_object_dispose(&a9, 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  long long v18 = *(_OWORD *)(a2 + 352);
  long long v19 = *(_OWORD *)(a2 + 368);
  long long v20 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v20;
  *(_OWORD *)(a1 + 352) = v18;
  *(_OWORD *)(a1 + 36_Block_object_dispose(&a9, 8) = v19;
  long long v21 = *(_OWORD *)(a2 + 416);
  long long v22 = *(_OWORD *)(a2 + 432);
  long long v23 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 44_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v23;
  *(_OWORD *)(a1 + 416) = v21;
  *(_OWORD *)(a1 + 432) = v22;
  long long v24 = *(_OWORD *)(a2 + 480);
  long long v25 = *(_OWORD *)(a2 + 496);
  long long v26 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 525) = *(_OWORD *)(a2 + 525);
  *(_OWORD *)(a1 + 496) = v25;
  *(_OWORD *)(a1 + 512) = v26;
  *(_OWORD *)(a1 + 480) = v24;
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 56_Block_object_dispose(&a9, 8) = *(void *)(a2 + 568);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  uint64_t v27 = *(void *)(a2 + 608);
  *(void *)(a1 + 60_Block_object_dispose(&a9, 8) = v27;
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  uint64_t v28 = *(void *)(a2 + 624);
  *(void *)(a1 + 624) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  uint64_t v29 = *(void *)(a2 + 640);
  *(void *)(a1 + 640) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  long long v30 = *(_OWORD *)(a2 + 648);
  long long v31 = *(_OWORD *)(a2 + 664);
  long long v32 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 680) = v32;
  *(_OWORD *)(a1 + 664) = v31;
  *(_OWORD *)(a1 + 64_Block_object_dispose(&a9, 8) = v30;
  long long v33 = *(_OWORD *)(a2 + 712);
  long long v34 = *(_OWORD *)(a2 + 728);
  long long v35 = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = v35;
  *(_OWORD *)(a1 + 72_Block_object_dispose(&a9, 8) = v34;
  *(_OWORD *)(a1 + 712) = v33;
  long long v36 = *(_OWORD *)(a2 + 776);
  long long v37 = *(_OWORD *)(a2 + 792);
  long long v38 = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 821) = *(_OWORD *)(a2 + 821);
  *(_OWORD *)(a1 + 80_Block_object_dispose(&a9, 8) = v38;
  *(_OWORD *)(a1 + 792) = v37;
  *(_OWORD *)(a1 + 776) = v36;
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
  *(void *)(a1 + 88_Block_object_dispose(&a9, 8) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  uint64_t v39 = *(void *)(a2 + 904);
  *(void *)(a1 + 904) = v39;
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  uint64_t v40 = *(void *)(a2 + 920);
  *(void *)(a1 + 920) = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 92_Block_object_dispose(&a9, 8) = *(void *)(a2 + 928);
  uint64_t v41 = *(void *)(a2 + 936);
  *(void *)(a1 + 936) = v41;
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  long long v42 = *(_OWORD *)(a2 + 944);
  long long v43 = *(_OWORD *)(a2 + 960);
  long long v44 = *(_OWORD *)(a2 + 992);
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
  *(_OWORD *)(a1 + 992) = v44;
  *(_OWORD *)(a1 + 944) = v42;
  *(_OWORD *)(a1 + 960) = v43;
  long long v45 = *(_OWORD *)(a2 + 1008);
  long long v46 = *(_OWORD *)(a2 + 1024);
  long long v47 = *(_OWORD *)(a2 + 1040);
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_OWORD *)(a1 + 1040) = v47;
  *(_OWORD *)(a1 + 100_Block_object_dispose(&a9, 8) = v45;
  *(_OWORD *)(a1 + 1024) = v46;
  long long v48 = *(_OWORD *)(a2 + 1072);
  long long v49 = *(_OWORD *)(a2 + 1088);
  long long v50 = *(_OWORD *)(a2 + 1104);
  *(_OWORD *)(a1 + 1117) = *(_OWORD *)(a2 + 1117);
  *(_OWORD *)(a1 + 1104) = v50;
  *(_OWORD *)(a1 + 108_Block_object_dispose(&a9, 8) = v49;
  *(_OWORD *)(a1 + 1072) = v48;
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  __n128 result = *(__n128 *)(a2 + 1168);
  *(__n128 *)(a1 + 116_Block_object_dispose(&a9, 8) = result;
  return result;
}

void *std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[117];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = (std::__shared_weak_count *)a1[115];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = (std::__shared_weak_count *)a1[115];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  uint64_t v4 = (std::__shared_weak_count *)a1[113];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    long long v5 = (std::__shared_weak_count *)a1[80];
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    long long v5 = (std::__shared_weak_count *)a1[80];
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  long long v6 = (std::__shared_weak_count *)a1[78];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    long long v7 = (std::__shared_weak_count *)a1[76];
    if (!v7) {
      goto LABEL_19;
    }
  }
  else
  {
    long long v7 = (std::__shared_weak_count *)a1[76];
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_19:
  long long v8 = (std::__shared_weak_count *)a1[43];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    long long v9 = (std::__shared_weak_count *)a1[41];
    if (!v9) {
      goto LABEL_25;
    }
  }
  else
  {
    long long v9 = (std::__shared_weak_count *)a1[41];
    if (!v9) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_25:
  long long v10 = (std::__shared_weak_count *)a1[39];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    long long v11 = (std::__shared_weak_count *)a1[6];
    if (!v11) {
      goto LABEL_31;
    }
  }
  else
  {
    long long v11 = (std::__shared_weak_count *)a1[6];
    if (!v11) {
      goto LABEL_31;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_31:
  long long v12 = (std::__shared_weak_count *)a1[4];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v13 = (std::__shared_weak_count *)a1[2];
    if (!v13) {
      return a1;
    }
  }
  else
  {
    long long v13 = (std::__shared_weak_count *)a1[2];
    if (!v13) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  return a1;
}

uint64_t std::__split_buffer<AGX::HAL200::IntersectionPipelineSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1304;

    *(void *)(i - 1200) = 0;
    *(void *)(i - _Block_object_dispose(&a9, 8) = 0;
    std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)(i - 1192));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2429CF448(_Unwind_Exception *a1)
{
  std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)(v1 - 1192));
  _Unwind_Resume(a1);
}

__n128 std::swap[abi:nn180100]<AGX::HAL200::IntersectionPipeline>(long long *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 2);
  long long v5 = *a1;
  *((void *)a1 + 1) = 0;
  long long v6 = *(long long *)((char *)a1 + 24);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  long long v34 = *(long long *)((char *)a1 + 40);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *(long long *)((char *)&v47 - 3) = *(long long *)((char *)a1 + 229);
  long long v44 = *(long long *)((char *)a1 + 184);
  long long v45 = *(long long *)((char *)a1 + 200);
  long long v42 = *(long long *)((char *)a1 + 152);
  long long v43 = *(long long *)((char *)a1 + 168);
  long long v40 = *(long long *)((char *)a1 + 120);
  long long v41 = *(long long *)((char *)a1 + 136);
  long long v38 = *(long long *)((char *)a1 + 88);
  long long v39 = *(long long *)((char *)a1 + 104);
  long long v36 = *(long long *)((char *)a1 + 56);
  long long v37 = *(long long *)((char *)a1 + 72);
  long long v46 = *(long long *)((char *)a1 + 216);
  long long v48 = *(long long *)((char *)a1 + 248);
  uint64_t v7 = *((void *)a1 + 33);
  uint64_t v8 = *((void *)a1 + 34);
  __n128 v35 = *(__n128 *)((char *)a1 + 280);
  *(void *)a1 = *(void *)a2;
  long long v9 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v10 = (std::__shared_weak_count *)*((void *)a1 + 2);
  *(long long *)((char *)a1 + _Block_object_dispose(&a9, 8) = v9;
  long long v33 = v6;
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v30 = v5;
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    long long v5 = v30;
    long long v6 = v33;
  }
  long long v11 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  long long v12 = (std::__shared_weak_count *)*((void *)a1 + 4);
  *(long long *)((char *)a1 + 24) = v11;
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v31 = v5;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    long long v5 = v31;
    long long v6 = v33;
  }
  long long v13 = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4_Block_object_dispose(&a9, 8) = 0;
  uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 6);
  *(long long *)((char *)a1 + 40) = v13;
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    long long v32 = v5;
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    long long v5 = v32;
    long long v6 = v33;
  }
  long long v15 = *(_OWORD *)(a2 + 56);
  long long v16 = *(_OWORD *)(a2 + 88);
  *(long long *)((char *)a1 + 72) = *(_OWORD *)(a2 + 72);
  *(long long *)((char *)a1 + 8_Block_object_dispose(&a9, 8) = v16;
  *(long long *)((char *)a1 + 56) = v15;
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 120);
  long long v19 = *(_OWORD *)(a2 + 152);
  *(long long *)((char *)a1 + 136) = *(_OWORD *)(a2 + 136);
  *(long long *)((char *)a1 + 152) = v19;
  *(long long *)((char *)a1 + 104) = v17;
  *(long long *)((char *)a1 + 120) = v18;
  long long v20 = *(_OWORD *)(a2 + 168);
  long long v21 = *(_OWORD *)(a2 + 184);
  long long v22 = *(_OWORD *)(a2 + 216);
  *(long long *)((char *)a1 + 200) = *(_OWORD *)(a2 + 200);
  *(long long *)((char *)a1 + 216) = v22;
  *(long long *)((char *)a1 + 16_Block_object_dispose(&a9, 8) = v20;
  *(long long *)((char *)a1 + 184) = v21;
  long long v23 = *(_OWORD *)(a2 + 232);
  long long v24 = *(_OWORD *)(a2 + 248);
  long long v25 = *(_OWORD *)(a2 + 280);
  *(long long *)((char *)a1 + 264) = *(_OWORD *)(a2 + 264);
  *(long long *)((char *)a1 + 280) = v25;
  *(long long *)((char *)a1 + 232) = v23;
  *(long long *)((char *)a1 + 24_Block_object_dispose(&a9, 8) = v24;
  *(_OWORD *)a2 = v5;
  long long v26 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 16) = v4;
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    long long v6 = v33;
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a2 + 32);
  *(_OWORD *)(a2 + 24) = v6;
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(a2 + 48);
  *(_OWORD *)(a2 + 40) = v34;
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  *(_OWORD *)(a2 + 216) = v46;
  *(_OWORD *)(a2 + 232) = v47;
  *(_OWORD *)(a2 + 24_Block_object_dispose(&a9, 8) = v48;
  *(_OWORD *)(a2 + 152) = v42;
  *(_OWORD *)(a2 + 16_Block_object_dispose(&a9, 8) = v43;
  *(_OWORD *)(a2 + 184) = v44;
  *(_OWORD *)(a2 + 200) = v45;
  *(_OWORD *)(a2 + 8_Block_object_dispose(&a9, 8) = v38;
  *(_OWORD *)(a2 + 104) = v39;
  *(_OWORD *)(a2 + 120) = v40;
  *(_OWORD *)(a2 + 136) = v41;
  *(_OWORD *)(a2 + 56) = v36;
  *(_OWORD *)(a2 + 72) = v37;
  *(void *)(a2 + 264) = v7;
  *(void *)(a2 + 272) = v8;
  __n128 result = v35;
  *(__n128 *)(a2 + 280) = v35;
  return result;
}

__n128 AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(unsigned int *a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  unsigned int v4 = a1[1];
  if (*a1 > *a2) {
    unsigned int v3 = *a1;
  }
  *a1 = v3;
  unint64_t v7 = *((void *)a1 + 1);
  long long v5 = (uint64_t *)(a1 + 2);
  unint64_t v6 = v7;
  unint64_t v8 = *((void *)a2 + 1);
  uint64_t v9 = v7 & 0xFF000000;
  int v10 = BYTE2(v7);
  if (BYTE2(v7) <= BYTE2(v8)) {
    int v10 = BYTE2(v8);
  }
  unsigned int v11 = (unsigned __int16)v6;
  if ((unsigned __int16)v6 <= (unsigned __int16)*((void *)a2 + 1)) {
    unsigned int v11 = (unsigned __int16)*((void *)a2 + 1);
  }
  if (v11 < v4) {
    unsigned int v4 = v11;
  }
  uint64_t v12 = v4 | (v10 << 16);
  __int16 v13 = WORD2(v6);
  if (WORD2(v6) <= WORD2(v8)) {
    __int16 v13 = WORD2(*((void *)a2 + 1));
  }
  uint64_t v14 = (unsigned __int16)(-(__int16)v3 & (v3 + v13 - 1));
  unint64_t v15 = HIWORD(v8);
  if (HIWORD(v6) <= v15) {
    unint64_t v15 = v15;
  }
  else {
    unint64_t v15 = HIWORD(v6);
  }
  uint64_t v16 = v12 | (v14 << 32) | (v15 << 48);
  *long long v5 = v16 | v9;
  if ((v16 | v9) != v6)
  {
    int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)v5, 4);
    unint64_t v18 = v16 & 0xFFFFFFFF00FFFFFFLL;
    uint64_t v25 = v18 | 0x1000000;
    int v19 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)&v25, 10);
    uint64_t v20 = 1610612736;
    unsigned int v21 = (16773120 - SectionEnd) / (v19 - SectionEnd);
    LODWORD(v22) = v21 << 24;
    if (v21 >= 0x20) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = 0;
    }
    if (v21 <= 0x5F) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 1610612736;
    }
    if (v19 != SectionEnd) {
      uint64_t v20 = v23;
    }
    *((void *)a1 + 1) = v18 | v20;
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((void *)a1 + 6) = 0;
    result.n128_u64[0] = -1;
    result.n128_u64[1] = -1;
    *(__n128 *)(a1 + 14) = result;
    *(__n128 *)(a1 + 1_Block_object_dispose(&a9, 8) = result;
    *(__n128 *)(a1 + 22) = result;
  }
  return result;
}

uint64_t RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(uint64_t a1, int a2)
{
  int SectionEnd = 0;
  int v4 = 0;
  switch(a2)
  {
    case 1:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 7);
      int v4 = 24576;
      break;
    case 2:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 1);
      int v4 = 0x2000;
      break;
    case 3:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 2);
      int v4 = 0x40000;
      break;
    case 4:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 3);
      int v4 = 0x10000;
      break;
    case 5:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 4);
      int v4 = 8 * (unsigned __int16)*(_DWORD *)a1 * ((*(_DWORD *)a1 >> 19) & 0x1FE0);
      break;
    case 6:
      uint64_t v5 = a1;
      uint64_t v6 = 8;
      goto LABEL_11;
    case 8:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 5);
      int v4 = ((*(void *)a1 >> 19) & 0x1FE0) * HIWORD(*(void *)a1);
      break;
    case 9:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1, 6);
      int v4 = ((*(_DWORD *)a1 >> 19) & 0x1FE0) * *(unsigned __int16 *)(a1 + 4);
      break;
    case 10:
      uint64_t v5 = a1;
      uint64_t v6 = 9;
LABEL_11:
      int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(v5, v6);
      int v4 = 0;
      break;
    default:
      return (v4 + SectionEnd);
  }
  return (v4 + SectionEnd);
}

void *AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unsigned int v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v3 = (std::__shared_weak_count *)a1[3];
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  int v4 = (std::__shared_weak_count *)a1[1];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<AGX::HAL200::IntersectionPipelineSets>::__on_zero_shared(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 64);
    int v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {

        *(void *)(v3 - 1200) = 0;
        *(void *)(v3 - _Block_object_dispose(&a9, 8) = 0;
        std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)(v3 - 1192));
        v3 -= 1304;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 56);
    }
    *(void *)(a1 + 64) = v2;
    operator delete(v4);
  }
}

void sub_2429CFC5C(_Unwind_Exception *a1)
{
  std::array<AGX::HAL200::IntersectionPipeline,4ul>::~array((void *)(v1 - 1192));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AGX::HAL200::IntersectionPipelineSets>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F853B50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x24566ED90);
}

void std::__shared_ptr_emplace<AGX::HAL200::IntersectionPipelineSets>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F853B50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(AGXG17FamilyDevice *,objc_object  {objcproto11MTLFunction}*,MTLLinkedFunctions *,NSArray<objc_object  {objcproto17MTLDynamicLibrary}*> *,NSError **)const::{lambda(MTLLinkedFunctions **<objc_object  {objcproto11MTLFunction}>)#1}::operator()(void ***a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v12;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(a2);
        }
        unint64_t v8 = *a1;
        uint64_t v9 = (void *)[(id)*(*a1)[2] loadDynamicLibrariesForFunction:*(void *)(*((void *)&v11 + 1) + 8 * v7) insertLibraries:***a1 error:*(*a1)[1]];
        if ([v9 count])
        {
          unint64_t v10 = 0;
          do
          {
            if ((objc_msgSend((id)*v8[3], "containsObject:", objc_msgSend(v9, "objectAtIndexedSubscript:", v10)) & 1) == 0) {
              objc_msgSend((id)*v8[3], "addObject:", objc_msgSend(v9, "objectAtIndexedSubscript:", v10));
            }
            ++v10;
          }
          while ([v9 count] > v10);
        }

        ++v7;
      }
      while (v7 != v5);
      uint64_t result = [a2 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v5 = result;
    }
    while (result);
  }
  return result;
}

id AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createComputePipeline(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, id a7)
{
  uint64_t v14 = mach_absolute_time();
  if (_MTLCompilePerformanceStatisticsEnabled()) {
    uint64_t v15 = a4 | 0x400000;
  }
  else {
    uint64_t v15 = a4;
  }
  if (!a6)
  {
    if (a2)
    {
      id v40 = 0;
      if ([a2 validateWithDevice:a3 error:&v40])
      {
LABEL_11:
        uint64_t v32 = a5;
        if (a7) {
          a2 = (void *)[a2 copy];
        }
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v51, a3, [a2 computeFunction], objc_msgSend(a2, "linkedFunctions"), objc_msgSend(a2, "preloadedLibraries"), (uint64_t)a6);
        if (v51)
        {
          long long v31 = v51;
          uint64_t v20 = [a2 newSerializedComputeData];
          uint64_t v21 = [a2 computeFunction];
          uint64_t v47 = 0;
          long long v48 = &v47;
          uint64_t v49 = 0x2020000000;
          uint64_t v50 = 0;
          uint64_t v22 = *(NSObject **)(a1 + 16);
          block[0] = MEMORY[0x263EF8330];
          block[1] = 3221225472;
          void block[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke;
          block[3] = &unk_26516F130;
          block[4] = v21;
          void block[5] = &v47;
          dispatch_sync(v22, block);
          id v40 = 0;
          long long v41 = &v40;
          uint64_t v42 = 0x3052000000;
          long long v43 = __Block_byref_object_copy_;
          long long v44 = __Block_byref_object_dispose_;
          uint64_t v45 = 0;
          uint64_t v30 = v48[3];
          v33[0] = MEMORY[0x263EF8330];
          v33[1] = 3321888768;
          v33[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_2;
          v33[3] = &unk_26F851B90;
          v33[11] = a1;
          v33[4] = a3;
          v33[5] = a2;
          v33[9] = &v40;
          v33[6] = v21;
          BOOL v39 = a7 != 0;
          uint64_t v35 = v15;
          uint64_t v36 = v14;
          id v34 = v31;
          v33[10] = &v47;
          v33[7] = v20;
          v33[8] = a7;
          uint64_t v37 = v32;
          long long v38 = a6;
          AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createComputeProgramVariant((void ***)a1, a2, a3, v15, 0, v31, v30, v20, a7 != 0, (uint64_t)v33);
          if (v20) {
            dispatch_release(v20);
          }
          if (a7) {

          }
          a7 = v41[5];
          _Block_object_dispose(&v40, 8);
          _Block_object_dispose(&v47, 8);
        }
        else
        {
          a7 = 0;
        }
        return a7;
      }
      uint64_t v27 = [v40 localizedDescription];
      uint64_t v28 = [NSDictionary dictionaryWithObject:v27 forKey:*MEMORY[0x263F08320]];
      id v26 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v28];
      if (!a7) {
        return 0;
      }
    }
    else
    {
      uint64_t v25 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
      id v26 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v25];
      if (!a7) {
        return a7;
      }
    }
    id v19 = v26;
    goto LABEL_25;
  }
  *a6 = 0;
  if (a2)
  {
    id v40 = 0;
    if (![a2 validateWithDevice:a3 error:&v40])
    {
      uint64_t v16 = [v40 localizedDescription];
      uint64_t v17 = [NSDictionary dictionaryWithObject:v16 forKey:*MEMORY[0x263F08320]];
      id v18 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v17];
      id v19 = v18;
      if (!a7)
      {
        *a6 = v18;
        return 0;
      }
LABEL_25:
      (*((void (**)(id, void, void, id))a7 + 2))(a7, 0, 0, v19);
      return 0;
    }
    goto LABEL_11;
  }
  uint64_t v23 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
  id v24 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v23];
  id v19 = v24;
  if (a7) {
    goto LABEL_25;
  }
  *a6 = v24;
  return a7;
}

void sub_2429D0654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);

  _Unwind_Resume(a1);
}

AGXG17FamilyComputeProgram *___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) vendorPrivate];
  uint64_t v3 = (AGXG17FamilyComputeOrFragmentOrTileProgram *)v2;
  if (!v2)
  {
    uint64_t v3 = objc_alloc_init(AGXG17FamilyComputeOrFragmentOrTileProgram);
    [*(id *)(a1 + 32) setVendorPrivate:v3];

    uint64_t result = v3->_compute;
    if (result) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t result = objc_alloc_init(AGXG17FamilyComputeProgram);
    v3->_compute = result;
    goto LABEL_3;
  }
  uint64_t result = *(AGXG17FamilyComputeProgram **)(v2 + 8);
  if (!result) {
    goto LABEL_5;
  }
LABEL_3:
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = &result->_impl;
  return result;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x270FA5388](a1);
  unint64_t v379 = v3;
  char v376 = v4;
  uint64_t v374 = v5;
  uint64_t v6 = v1;
  uint64_t v437 = *MEMORY[0x263EF8340];
  int8x16_t v415 = 0;
  int8x16_t v416 = v7;
  uint64_t v373 = v1[11];
  unint64_t v8 = 0x268D57000uLL;
  uint64_t v380 = v2;
  if (!v2) {
    goto LABEL_339;
  }
  *(void *)(*(void *)(v1[9] + 8) + 40) = [[AGXG17FamilyComputePipeline alloc] initWithDevice:v1[4] pipelineStateDescriptor:v1[5]];
  int v9 = [(id)v6[5] maxCallStackDepth];
  uint64_t v10 = *(void *)(*(void *)(v6[9] + 8) + 40) + 64;
  *(void *)(v10 + 16) = v380;
  *(_DWORD *)(v10 + 440) = *(_DWORD *)(v380 + 3528);
  *(_DWORD *)(v10 + 176) = *(_DWORD *)(v380 + 984);
  int v11 = *(_DWORD *)(v380 + 996);
  *(_DWORD *)(v10 + 184) = v11;
  int v12 = *(_DWORD *)(v380 + 1028);
  *(_DWORD *)(v10 + 192) = v12;
  int v13 = *(_DWORD *)(v380 + 1024);
  *(_DWORD *)(v10 + 196) = v13;
  *(_DWORD *)(v10 + 200) = v9;
  *(void *)(v10 + 344) = *(void *)(v380 + 2336);
  int v14 = v11 - *(_DWORD *)(v380 + 992);
  *(_DWORD *)(v10 + 18_Block_object_dispose(&a9, 8) = v14;
  *(_DWORD *)(v10 + 180) = v11 + v14 * (v9 - 1);
  *(_DWORD *)(v10 + 20_Block_object_dispose(&a9, 8) = v12 - v13;
  *(void *)&double v15 = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v10 + 224), (unsigned int *)(v380 + 880)).n128_u64[0];
  *(unsigned char *)(v10 + 32_Block_object_dispose(&a9, 8) = *(unsigned char *)(v380 + 1050);
  *(_WORD *)(v10 + 329) = *(_WORD *)(v380 + 1052);
  *(unsigned char *)(v10 + 332) = *(unsigned char *)(v380 + 1046);
  *(_DWORD *)(v10 + 36_Block_object_dispose(&a9, 8) = *(_DWORD *)(v380 + 1040);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createIntersectionPipelineSets<true>(buf, (void *)v6[4], (void *)(v380 + 552), objc_msgSend((id)objc_msgSend((id)v6[5], "linkedFunctions", v15), "binaryFunctions"), objc_msgSend((id)v6[5], "maxCallStackDepth"));
  uint64_t v16 = buf[0];
  unint64_t v17 = *(void *)buf[0];
  if (!*(void *)buf[0])
  {
    uint64_t v19 = *(void *)(*(void *)(v6[9] + 8) + 40) + 64;
    uint64_t v20 = (std::__shared_weak_count *)buf[1];
    if (buf[1])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(buf[1] + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v19 + 576) = v16;
    uint64_t v21 = *(std::__shared_weak_count **)(v19 + 584);
    *(void *)(v19 + 584) = v20;
    if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    obuint64_t j = 1;
    id v18 = (std::__shared_weak_count *)buf[1];
    if (!buf[1]) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  obuint64_t j = 0;
  int8x16_t v416 = *(__CFString **)(buf[0] + 8);
  unint64_t v379 = v17;
  id v18 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
LABEL_14:
    if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
LABEL_16:
  uint64_t v22 = *(void *)(*(void *)(v6[9] + 8) + 40);
  *(unsigned char *)(v22 + 8_Block_object_dispose(&a9, 8) = [(id)v6[5] supportIndirectCommandBuffers];
  uint64_t v23 = (void *)[(id)v6[5] linkedFunctions];
  uint64_t v24 = [v23 functions];
  uint64_t v25 = [v23 privateFunctions];
  id v26 = (void *)[v23 binaryFunctions];
  if ([(id)v6[6] relocations]) {
    BOOL v27 = objc_msgSend((id)objc_msgSend((id)v6[6], "relocations"), "count") != 0;
  }
  else {
    BOOL v27 = 0;
  }
  uint16x8_t v377 = v6;
  if (!v17)
  {
    BOOL v28 = *(void *)(v380 + 320) != *(void *)(v380 + 328) || *(void *)(v380 + 344) != *(void *)(v380 + 352);
    if (v24) {
      BOOL v28 = 1;
    }
    if (v25) {
      BOOL v28 = 1;
    }
    if (v26) {
      BOOL v28 = 1;
    }
    if (v28 || v27)
    {
      id v396 = objc_alloc_init(MEMORY[0x263EFF980]);
      [v396 addObjectsFromArray:v6[12]];
      long long v413 = 0u;
      long long v414 = 0u;
      long long v411 = 0u;
      long long v412 = 0u;
      uint64_t v29 = [v26 countByEnumeratingWithState:&v411 objects:v429 count:16];
      if (v29)
      {
        uint64_t v30 = *(void *)v412;
        do
        {
          for (uint64_t i = 0; i != v29; ++i)
          {
            if (*(void *)v412 != v30) {
              objc_enumerationMutation(v26);
            }
            uint64_t v32 = *(void **)(*((void *)&v411 + 1) + 8 * i);
            if ([v32 vendorPrivate]
              && ([v32 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              uint64_t v33 = (void *)[v32 vendorPrivate];
              objc_msgSend(v33, "setRelocations:", objc_msgSend(v32, "relocations"));
              [v396 addObject:v33];
            }
            else if (![v32 vendorPrivate] {
                   || ([v32 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            }
            {
              obuint64_t j = 0;
            }
          }
          uint64_t v29 = [v26 countByEnumeratingWithState:&v411 objects:v429 count:16];
        }
        while (v29);
      }
      unint64_t v8 = 0x268D57000uLL;
      if (obj)
      {
        uint64_t v34 = *(void *)(*(void *)(v6[9] + 8) + 40);
        uint64_t v35 = v6[4];
        obja = (void *)[(id)v6[6] relocations];
        uint64_t v36 = v34 + 64;
        uint64_t v371 = v415;
        uint64_t v372 = v35;
        uint64_t v385 = *(void *)(v34 + 80);
        int v370 = *(unsigned __int8 *)(v34 + 88);
        long long v425 = 0uLL;
        *(void *)&long long v426 = 0;
        uint64_t v37 = *(void *)(*(void *)(v34 + 640) + 40) - *(void *)(*(void *)(v34 + 640) + 32);
        unint64_t v38 = (0x7DA4E871146ACC2CLL * (v37 >> 3)) | 1;
        if (v38 > 0x2AAAAAAAAAAAAAALL) {
          abort();
        }
        BOOL v39 = (char *)operator new(96 * v38);
        std::string __p = v39;
        unint64_t v40 = [v396 count] + v38;
        if (v40)
        {
          if (v40 > 0x333333333333333) {
            abort();
          }
          long long v41 = (char *)operator new(80 * v40);
          *(void *)&long long v425 = v41;
          *((void *)&v425 + 1) = v41;
          int32x4_t v381 = &v41[80 * v40];
          *(void *)&long long v426 = v381;
        }
        else
        {
          int32x4_t v381 = 0;
          long long v41 = 0;
        }
        uint64_t v384 = v36 + 416;
        std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(v36 + 416, [v396 count]);
        uint64_t v42 = (_OWORD *)(v385 + 1208);
        uint64_t v387 = v36;
        uint64_t v43 = v36 + 128;
        uint64_t v44 = v385 + 8;
        *(_OWORD *)buf = *(_OWORD *)(v385 + 1208);
        buf[2] = *(void *)(v385 + 1224);
        uint64_t v45 = *(void *)(v385 + 1464);
        uint64_t v46 = *(void *)(v385 + 1456);
        uint64_t v47 = *(void *)(v385 + 1472);
        long long v48 = (_OWORD *)(v385 + 2544);
        int8x16_t v433 = *(int8x16_t *)(v385 + 2544);
        *(void *)&long long v434 = *(void *)(v385 + 2560);
        if (v37 < -1303)
        {
          uint64_t v52 = 2 * v38;
          if (2 * v38 <= 1) {
            uint64_t v52 = 1;
          }
          if (v38 >= 0x155555555555555) {
            unint64_t v53 = 0x2AAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v53 = v52;
          }
          if (v53 > 0x2AAAAAAAAAAAAAALL) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v54 = v45;
          std::string v55 = (char *)operator new(96 * v53);
          long long v403 = &v55[96 * v53];
          *(void *)std::string v55 = v44;
          uint64_t v56 = *(void *)(v385 + 1224);
          *(_OWORD *)(v55 + _Block_object_dispose(&a9, 8) = *v42;
          *((void *)v55 + 3) = v56;
          *((void *)v55 + 4) = v46;
          uint64_t v51 = v54;
          *((void *)v55 + 5) = v54;
          *((void *)v55 + 6) = v47;
          uint64_t v57 = *(void *)(v385 + 2560);
          *(_OWORD *)(v55 + 56) = *v48;
          *((void *)v55 + 9) = v57;
          *((void *)v55 + 10) = v43;
          *((void *)v55 + 11) = v43;
          operator delete(__p);
          std::string __p = v55;
        }
        else
        {
          long long v403 = &v39[96 * v38];
          *(void *)BOOL v39 = v44;
          uint64_t v49 = *(void *)(v385 + 1224);
          *(_OWORD *)(v39 + _Block_object_dispose(&a9, 8) = *v42;
          *((void *)v39 + 3) = v49;
          *((void *)v39 + 4) = v46;
          *((void *)v39 + 5) = v45;
          *((void *)v39 + 6) = v47;
          uint64_t v50 = *(void *)(v385 + 2560);
          *(_OWORD *)(v39 + 56) = *v48;
          *((void *)v39 + 9) = v50;
          *((void *)v39 + 10) = v43;
          *((void *)v39 + 11) = v43;
          uint64_t v51 = v45;
        }
        if (v41 >= v381)
        {
          unint64_t v59 = 0x999999999999999ALL * ((v381 - v41) >> 4);
          if (v59 <= 1) {
            unint64_t v59 = 1;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v381 - v41) >> 4) >= 0x199999999999999) {
            unint64_t v60 = 0x333333333333333;
          }
          else {
            unint64_t v60 = v59;
          }
          if (v60 > 0x333333333333333) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v61 = (char *)operator new(80 * v60);
          *(void *)int v61 = v44;
          std::string v62 = &v61[80 * v60];
          *(_OWORD *)(v61 + _Block_object_dispose(&a9, 8) = *(_OWORD *)buf;
          *((void *)v61 + 3) = buf[2];
          *((void *)v61 + 4) = v46;
          *((void *)v61 + 5) = v51;
          *((void *)v61 + 6) = v47;
          *(int8x16_t *)(v61 + 56) = v433;
          *((void *)v61 + 9) = v434;
          uint64_t v58 = (uint64_t)(v61 + 80);
          *(void *)&long long v425 = v61;
          *(void *)&long long v426 = v62;
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(void *)long long v41 = v44;
          *(_OWORD *)(v41 + _Block_object_dispose(&a9, 8) = *(_OWORD *)buf;
          *((void *)v41 + 3) = buf[2];
          *((void *)v41 + 4) = v46;
          *((void *)v41 + 5) = v51;
          *((void *)v41 + 6) = v47;
          *(int8x16_t *)(v41 + 56) = v433;
          uint64_t v58 = (uint64_t)(v41 + 80);
          *((void *)v41 + 9) = v434;
        }
        *((void *)&v425 + 1) = v58;
        std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>,std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>>((uint64_t)&v425, v58, 0, 0, 0);
        int8x16_t v433 = 0u;
        long long v434 = 0u;
        long long v435 = 0u;
        long long v436 = 0u;
        uint64_t v63 = [obja countByEnumeratingWithState:&v433 objects:buf count:16];
        if (v63)
        {
          uint64_t v64 = *(void *)v434;
          do
          {
            for (uint64_t j = 0; j != v63; ++j)
            {
              if (*(void *)v434 != v64) {
                objc_enumerationMutation(obja);
              }
              uint64_t v66 = *(void **)(v433.i64[1] + 8 * j);
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v67 = (char *)objc_msgSend((id)objc_msgSend(v66, "symbolName"), "UTF8String");
                uint64_t v68 = [v66 buffer];
                uint64_t v69 = *(void *)(v68 + (int)*MEMORY[0x263F4B188] + 72);
                uint64_t v70 = [v66 offset];
                uint64_t v71 = *(char **)(v385 + 1472);
                long long v431 = *(_OWORD *)(v385 + 1456);
                int8x16_t v432 = v71;
                AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(v44, v67, v70 + v69, (uint64_t)&v431);
              }
              else
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v72 = (char *)objc_msgSend((id)objc_msgSend(v66, "symbolName"), "UTF8String");
                  long long v73 = [v66 data];
                  uint64_t v74 = *(char **)(v385 + 1472);
                  long long v431 = *(_OWORD *)(v385 + 1456);
                  int8x16_t v432 = v74;
                  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(v44, v72, v73, (uint64_t)&v431);
                }
              }
            }
            uint64_t v63 = [obja countByEnumeratingWithState:&v433 objects:buf count:16];
          }
          while (v63);
        }
        char v75 = __p + 96;
        uint64_t v76 = v387;
        uint64_t v77 = *(void *)(v387 + 576);
        uint64_t v78 = *(void *)(v77 + 32);
        uint64_t v375 = *(void *)(v77 + 40);
        if (v78 != v375)
        {
          do
          {
            uint64_t v79 = 0;
            uint64_t v382 = v78;
            uint64_t objb = v78 + 112;
            do
            {
              uint64_t v81 = (uint64_t *)(objb + 296 * v79);
              uint64_t v82 = *v81;
              if (*v81)
              {
                uint64_t v83 = v82 + 8;
                *(_OWORD *)buf = *(_OWORD *)(v82 + 1160);
                buf[2] = *(void *)(v82 + 1176);
                uint64_t v84 = *(void *)(v82 + 1416);
                uint64_t v85 = *(void *)(v82 + 1408);
                uint64_t v86 = *(void *)(v82 + 1424);
                int8x16_t v433 = *(int8x16_t *)(v82 + 2496);
                *(void *)&long long v434 = *(void *)(v82 + 2512);
                long long v431 = *(_OWORD *)(v82 + 1160);
                int8x16_t v432 = *(char **)(v82 + 1176);
                long long v421 = *(_OWORD *)(v82 + 2496);
                unsigned int v87 = v81 + 1;
                *(void *)&long long v422 = *(void *)(v82 + 2512);
                if (v75 >= v403)
                {
                  unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v75 - __p) >> 5) + 1;
                  if (v89 > 0x2AAAAAAAAAAAAAALL) {
                    abort();
                  }
                  if (0x5555555555555556 * ((v403 - __p) >> 5) > v89) {
                    unint64_t v89 = 0x5555555555555556 * ((v403 - __p) >> 5);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((v403 - __p) >> 5) >= 0x155555555555555) {
                    unint64_t v90 = 0x2AAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v90 = v89;
                  }
                  if (v90)
                  {
                    if (v90 > 0x2AAAAAAAAAAAAAALL) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v91 = v82 + 8;
                    uint64_t v92 = v85;
                    uint64_t v93 = v86;
                    uint64_t v94 = v84;
                    uint64_t v95 = (char *)operator new(96 * v90);
                    uint64_t v84 = v94;
                    uint64_t v86 = v93;
                    uint64_t v85 = v92;
                    uint64_t v83 = v91;
                  }
                  else
                  {
                    uint64_t v95 = 0;
                  }
                  uint64_t v96 = &v95[32 * ((v75 - __p) >> 5)];
                  *(void *)uint64_t v96 = v83;
                  *(_OWORD *)(v96 + _Block_object_dispose(&a9, 8) = v431;
                  *((void *)v96 + 3) = v432;
                  *((void *)v96 + 4) = v85;
                  *((void *)v96 + 5) = v84;
                  *((void *)v96 + 6) = v86;
                  *(_OWORD *)(v96 + 56) = v421;
                  *((void *)v96 + 9) = v422;
                  *((void *)v96 + 10) = v87;
                  *((void *)v96 + 11) = v87;
                  if (v75 == __p)
                  {
                    unsigned int v99 = &v95[32 * ((v75 - __p) >> 5)];
                    int v98 = __p;
                  }
                  else
                  {
                    unsigned int v97 = &v95[32 * ((v75 - __p) >> 5)];
                    int v98 = __p;
                    do
                    {
                      unsigned int v99 = v97 - 96;
                      long long v100 = *((_OWORD *)v75 - 5);
                      *((_OWORD *)v97 - 6) = *((_OWORD *)v75 - 6);
                      *((_OWORD *)v97 - 5) = v100;
                      long long v101 = *((_OWORD *)v75 - 4);
                      long long v102 = *((_OWORD *)v75 - 3);
                      long long v103 = *((_OWORD *)v75 - 1);
                      *((_OWORD *)v97 - 2) = *((_OWORD *)v75 - 2);
                      *((_OWORD *)v97 - 1) = v103;
                      *((_OWORD *)v97 - 4) = v101;
                      *((_OWORD *)v97 - 3) = v102;
                      v75 -= 96;
                      v97 -= 96;
                    }
                    while (v75 != __p);
                  }
                  long long v403 = &v95[96 * v90];
                  char v75 = v96 + 96;
                  if (v98)
                  {
                    uint64_t v104 = v84;
                    operator delete(v98);
                    uint64_t v84 = v104;
                  }
                  std::string __p = v99;
                }
                else
                {
                  *(void *)char v75 = v83;
                  int v88 = v432;
                  *(_OWORD *)(v75 + _Block_object_dispose(&a9, 8) = v431;
                  *((void *)v75 + 3) = v88;
                  *((void *)v75 + 4) = v85;
                  *((void *)v75 + 5) = v84;
                  *((void *)v75 + 6) = v86;
                  *(_OWORD *)(v75 + 56) = v421;
                  *((void *)v75 + 9) = v422;
                  *((void *)v75 + 10) = v87;
                  *((void *)v75 + 11) = v87;
                  v75 += 96;
                }
                uint64_t v105 = *((void *)&v425 + 1);
                if (*((void *)&v425 + 1) < (unint64_t)v426)
                {
                  **((void **)&v425 + 1) = v83;
                  *(_OWORD *)(v105 + _Block_object_dispose(&a9, 8) = *(_OWORD *)buf;
                  *(void *)(v105 + 24) = buf[2];
                  *(void *)(v105 + 32) = v85;
                  *(void *)(v105 + 40) = v84;
                  *(void *)(v105 + 4_Block_object_dispose(&a9, 8) = v86;
                  *(int8x16_t *)(v105 + 56) = v433;
                  *(void *)(v105 + 72) = v434;
                  uint64_t v80 = (char *)(v105 + 80);
                }
                else
                {
                  uint64_t v106 = v425;
                  unint64_t v107 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v425 + 1) - v425) >> 4);
                  unint64_t v108 = v107 + 1;
                  if (v107 + 1 > 0x333333333333333) {
                    abort();
                  }
                  if (0x999999999999999ALL * ((uint64_t)(v426 - v425) >> 4) > v108) {
                    unint64_t v108 = 0x999999999999999ALL * ((uint64_t)(v426 - v425) >> 4);
                  }
                  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v426 - v425) >> 4) >= 0x199999999999999) {
                    unint64_t v109 = 0x333333333333333;
                  }
                  else {
                    unint64_t v109 = v108;
                  }
                  if (v109)
                  {
                    if (v109 > 0x333333333333333) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    uint64_t v110 = v83;
                    uint64_t v111 = v85;
                    uint64_t v112 = v86;
                    uint64_t v113 = v84;
                    int v114 = (char *)operator new(80 * v109);
                    uint64_t v84 = v113;
                    uint64_t v86 = v112;
                    uint64_t v85 = v111;
                    uint64_t v83 = v110;
                  }
                  else
                  {
                    int v114 = 0;
                  }
                  unsigned int v115 = &v114[80 * v107];
                  *(void *)unsigned int v115 = v83;
                  *(_OWORD *)(v115 + _Block_object_dispose(&a9, 8) = *(_OWORD *)buf;
                  *((void *)v115 + 3) = buf[2];
                  *((void *)v115 + 4) = v85;
                  *((void *)v115 + 5) = v84;
                  *((void *)v115 + 6) = v86;
                  *(int8x16_t *)(v115 + 56) = v433;
                  *((void *)v115 + 9) = v434;
                  int v116 = v115;
                  if (v105 == v106)
                  {
                    uint64_t v76 = v387;
                  }
                  else
                  {
                    uint64_t v76 = v387;
                    do
                    {
                      *((_OWORD *)v116 - 5) = *(_OWORD *)(v105 - 80);
                      long long v117 = *(_OWORD *)(v105 - 64);
                      long long v118 = *(_OWORD *)(v105 - 48);
                      long long v119 = *(_OWORD *)(v105 - 16);
                      *((_OWORD *)v116 - 2) = *(_OWORD *)(v105 - 32);
                      *((_OWORD *)v116 - 1) = v119;
                      *((_OWORD *)v116 - 4) = v117;
                      *((_OWORD *)v116 - 3) = v118;
                      v116 -= 80;
                      v105 -= 80;
                    }
                    while (v105 != v106);
                    uint64_t v105 = v106;
                  }
                  unsigned int v120 = &v114[80 * v109];
                  uint64_t v80 = v115 + 80;
                  *(void *)&long long v425 = v116;
                  *(void *)&long long v426 = v120;
                  if (v105) {
                    operator delete((void *)v105);
                  }
                }
                *((void *)&v425 + 1) = v80;
              }
              ++v79;
            }
            while (v79 != 4);
            uint64_t v78 = v382 + 1304;
          }
          while (v382 + 1304 != v375);
        }
        long long v436 = 0u;
        long long v435 = 0u;
        long long v434 = 0u;
        int8x16_t v433 = 0u;
        uint64_t v121 = [v396 countByEnumeratingWithState:&v433 objects:buf count:16];
        if (v121)
        {
          uint64_t v122 = *(void *)v434;
          int v123 = (char *)*((void *)&v425 + 1);
          int64x2_t v404 = (char *)v426;
          unint64_t v124 = (char *)v425;
          unint64_t v125 = 0x268D57000uLL;
          uint64_t v383 = *(void *)v434;
          do
          {
            objCC_SHA256_CTX c = v121;
            for (uint64_t k = 0; k != objc; ++k)
            {
              if (*(void *)v434 != v122) {
                objc_enumerationMutation(v396);
              }
              uint64_t v127 = *(char **)(v433.i64[1] + 8 * k);
              AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(*(void *)&v127[*(int *)(v125 + 1956)]);
              uint64_t v128 = *(int *)(v125 + 1956);
              int v129 = (__n128 *)&v127[v128];
              uint64_t v130 = *(__n128 **)(v76 + 424);
              if ((unint64_t)v130 >= *(void *)(v76 + 432))
              {
                int v132 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v384, *v129);
                uint64_t v128 = *(int *)(v125 + 1956);
              }
              else
              {
                v130->n128_u64[0] = v129->n128_u64[0];
                unint64_t v131 = v129->n128_u64[1];
                v130->n128_u64[1] = v131;
                if (v131) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
                }
                int v132 = v130 + 1;
              }
              *(void *)(v76 + 424) = v132;
              uint64_t v133 = *(void *)&v127[v128];
              uint64_t v134 = v133 + 96;
              int8x16_t v432 = *(char **)(v133 + 696);
              long long v431 = *(_OWORD *)(v133 + 680);
              long long v421 = *(_OWORD *)(v133 + 768);
              *(void *)&long long v422 = *(void *)(v133 + 784);
              long long v417 = *(_OWORD *)(v133 + 944);
              *(void *)&long long v418 = *(void *)(v133 + 960);
              if (v123 >= v404)
              {
                unint64_t v136 = 0xCCCCCCCCCCCCCCCDLL * ((v123 - v124) >> 4) + 1;
                if (v136 > 0x333333333333333)
                {
                  *((void *)&v425 + 1) = v123;
                  *(void *)&long long v426 = v404;
                  *(void *)&long long v425 = v124;
                  abort();
                }
                if (0x999999999999999ALL * ((v404 - v124) >> 4) > v136) {
                  unint64_t v136 = 0x999999999999999ALL * ((v404 - v124) >> 4);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((v404 - v124) >> 4) >= 0x199999999999999) {
                  unint64_t v137 = 0x333333333333333;
                }
                else {
                  unint64_t v137 = v136;
                }
                if (v137)
                {
                  if (v137 > 0x333333333333333)
                  {
                    *((void *)&v425 + 1) = v123;
                    *(void *)&long long v426 = v404;
                    *(void *)&long long v425 = v124;
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  size_t v138 = (char *)operator new(80 * v137);
                }
                else
                {
                  size_t v138 = 0;
                }
                unsigned int v139 = &v138[16 * ((v123 - v124) >> 4)];
                *(void *)unsigned int v139 = v134;
                *(_OWORD *)(v139 + _Block_object_dispose(&a9, 8) = v431;
                *((void *)v139 + 3) = v432;
                *((_OWORD *)v139 + 2) = v421;
                *((void *)v139 + 6) = v422;
                long long v140 = v417;
                *((void *)v139 + 9) = v418;
                char v141 = v139;
                *(_OWORD *)(v139 + 56) = v140;
                if (v123 != v124)
                {
                  uint64_t v142 = &v138[16 * ((v123 - v124) >> 4)];
                  do
                  {
                    *((_OWORD *)v142 - 5) = *((_OWORD *)v123 - 5);
                    long long v143 = *((_OWORD *)v123 - 4);
                    long long v144 = *((_OWORD *)v123 - 3);
                    long long v145 = *((_OWORD *)v123 - 1);
                    char v141 = v142 - 80;
                    *((_OWORD *)v142 - 2) = *((_OWORD *)v123 - 2);
                    *((_OWORD *)v142 - 1) = v145;
                    *((_OWORD *)v142 - 4) = v143;
                    *((_OWORD *)v142 - 3) = v144;
                    v123 -= 80;
                    v142 -= 80;
                  }
                  while (v123 != v124);
                }
                int64x2_t v404 = &v138[80 * v137];
                uint64_t v76 = v387;
                if (v124)
                {
                  operator delete(v124);
                  uint64_t v128 = 56;
                }
                unint64_t v124 = v141;
                int v123 = v139;
                uint64_t v122 = v383;
              }
              else
              {
                *(void *)int v123 = v134;
                long long v135 = v431;
                *((void *)v123 + 3) = v432;
                *(_OWORD *)(v123 + _Block_object_dispose(&a9, 8) = v135;
                *((_OWORD *)v123 + 2) = v421;
                *((void *)v123 + 6) = v422;
                *(_OWORD *)(v123 + 56) = v417;
                *((void *)v123 + 9) = v418;
              }
              v123 += 80;
              unint64_t v125 = 0x268D57000;
              AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(*(void *)&v127[v128], (void *)[v127 relocations]);
            }
            *((void *)&v425 + 1) = v123;
            *(void *)&long long v426 = v404;
            *(void *)&long long v425 = v124;
            uint64_t v121 = [v396 countByEnumeratingWithState:&v433 objects:buf count:16];
          }
          while (v121);
        }
        long long v431 = 0uLL;
        int8x16_t v432 = 0;
        int64_t v146 = v75 - __p;
        if (v75 == __p)
        {
          uint64_t v148 = 0;
          uint64_t v6 = v377;
          unint64_t v8 = 0x268D57000uLL;
          uint64_t v147 = v385;
        }
        else
        {
          uint64_t v6 = v377;
          unint64_t v8 = 0x268D57000;
          uint64_t v147 = v385;
          if (0xAAAAAAAAAAAAAAABLL * (v146 >> 5) > 0x2AAAAAAAAAAAAAALL) {
            abort();
          }
          uint64_t v148 = (char *)operator new(v146);
          *(void *)&long long v431 = v148;
          *((void *)&v431 + 1) = v148;
          int8x16_t v432 = &v148[32 * (v146 >> 5)];
          size_t v149 = 96 * ((v146 - 96) / 0x60uLL) + 96;
          memcpy(v148, __p, v149);
          *((void *)&v431 + 1) = &v148[v149];
        }
        obuint64_t j = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load(v372, (uint64_t **)&v425, (uint64_t **)&v425, (size_t *)&v431, *(_DWORD *)(v147 + 1036), v371, &v416, v370 != 0);
        if (v148)
        {
          *((void *)&v431 + 1) = v148;
          operator delete(v148);
        }
        uint64_t v150 = (void *)(v147 + 1560);
        if (*(char *)(v147 + 1583) < 0)
        {
          if (!*(void *)(v147 + 1568))
          {
LABEL_169:
            uint64_t v151 = *(void *)(v76 + 576);
            long long v152 = *(void **)(v151 + 32);
            uint64_t v153 = *(void **)(v151 + 40);
            while (1)
            {
              if (v152 == v153)
              {
                if ((void)v425) {
                  operator delete((void *)v425);
                }
                if (__p) {
                  operator delete(__p);
                }
                uint64_t v162 = *(void *)(v76 + 16);
                if (*(_DWORD *)(v162 + 3556))
                {
                  unsigned int v163 = *(_DWORD *)(v76 + 360);
                  if (*(_DWORD *)(v76 + 440) > v163)
                  {
                    obuint64_t j = 0;
                    int8x16_t v416 = @"maxTotalThreadsPerThreadgroup specified in the pipeline descriptor is larger than the values specified by the linked dynamic libraries";
                    uint64_t v162 = *(void *)(v76 + 16);
LABEL_214:
                    unint64_t v165 = *(void *)(v76 + 376);
                    unsigned int v166 = (512 - 8 * __clz(v165)) >> 2;
                    if (v165) {
                      unsigned int v167 = v166;
                    }
                    else {
                      unsigned int v167 = 0;
                    }
                    *(_DWORD *)(v162 + 800) = v167;
                    int8x16_t v168 = *(int8x16_t *)(v76 + 384);
                    int32x2_t v169 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v168)))));
                    unsigned __int32 v170 = vadd_s32(vdup_lane_s32(v169, 1), v169).u32[0];
                    uint8x8_t v171 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v76 + 400));
                    v171.i16[0] = vaddlv_u8(v171);
                    unsigned __int32 v172 = v170 + v171.i32[0];
                    uint8x8_t v173 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v76 + 408));
                    v173.i16[0] = vaddlv_u8(v173);
                    unint64_t v174 = v173.i32[0] + 2 * v172;
                    *(_DWORD *)(v162 + 804) = v174;
                    std::string::size_type v175 = *(unsigned int **)(v162 + 808);
                    unint64_t v176 = (uint64_t)(*(void *)(v162 + 816) - (void)v175) >> 2;
                    if (v174 <= v176)
                    {
                      if (v174 < v176) {
                        *(void *)(v162 + 816) = &v175[v174];
                      }
                    }
                    else
                    {
                      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v162 + 808), v174 - v176);
                      std::string::size_type v175 = *(unsigned int **)(v162 + 808);
                      int8x16_t v168 = *(int8x16_t *)(v76 + 384);
                    }
                    *(void *)&long long v431 = v168.i64[1];
                    unint64_t v177 = v168.i64[0];
                    for (v433.i64[0] = v168.i64[0]; ; unint64_t v177 = v433.i64[0])
                    {
                      if (v177)
                      {
                        int v178 = __clz(__rbit64(v177));
                        int64x2_t v179 = &v433;
                        int v180 = v178;
                      }
                      else
                      {
                        unint64_t v177 = v431;
                        if (!(void)v431)
                        {
                          for (unint64_t m = *(void *)(v76 + 400); m; m &= ~v184)
                          {
                            int v183 = __clz(__rbit64(m));
                            uint64_t v184 = 1 << v183;
                            unsigned int v185 = (8 * v183 + 8360) >> 2;
                            *std::string::size_type v175 = v185;
                            v175[1] = v185 | 1;
                            v175 += 2;
                          }
                          for (unint64_t n = *(void *)(v76 + 408); n; n &= ~(1 << v187))
                          {
                            int v187 = __clz(__rbit64(n));
                            *v175++ = v187 + 2126;
                            uint64_t v188 = *(unsigned int *)(v162 + 3380);
                            *(_DWORD *)(v162 + 3384 + 4 * v18_Block_object_dispose(&a9, 8) = v187;
                            *(_DWORD *)(v162 + 3380) = v188 + 1;
                          }
                          uint64_t v189 = *(void *)(v162 + 840);
                          uint64_t v190 = *(void *)(v162 + 832);
                          if (v189 == v190) {
                            int v191 = 0;
                          }
                          else {
                            int v191 = *(_DWORD *)(v162 + 792) & 1;
                          }
                          *(_DWORD *)(v162 + 60_Block_object_dispose(&a9, 8) = ((*(_DWORD *)(v162 + 744)
                                                    - *(_DWORD *)(v162 + 736)
                                                    + ((*(void *)(v162 + 672)
                                                      - *(void *)(v162 + 664)
                                                      + 4
                                                      * (*(_DWORD *)(v162 + 804)
                                                       + *(_DWORD *)(v162 + 800)
                                                       + v191
                                                       + (((v189 - v190) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                                                  + 8
                                                  * (((*(void *)(v162 + 696)
                                                     - *(void *)(v162 + 688)) >> 2)
                                                   + ((*(void *)(v162 + 648)
                                                     - *(void *)(v162 + 640)) >> 2));
                          unsigned int v192 = *(_DWORD *)(v162 + 2528);
                          if (v192 <= *(_DWORD *)(v76 + 176)) {
                            unsigned int v192 = *(_DWORD *)(v76 + 176);
                          }
                          *(_DWORD *)(v162 + 252_Block_object_dispose(&a9, 8) = v192;
                          int v193 = *(_DWORD *)(v76 + 212) + *(_DWORD *)(v76 + 180);
                          *(_DWORD *)(v162 + 2520) = v193;
                          int v194 = *(_DWORD *)(v76 + 192);
                          *(_DWORD *)(v162 + 2532) = v194;
                          uint64_t v195 = *(void *)(v162 + 2784);
                          if (v195)
                          {
                            int v196 = *(_DWORD *)(v162 + 2524);
                            int v197 = *(_DWORD *)(v162 + 2536);
                            *(void *)(v195 + 8_Block_object_dispose(&a9, 8) = *(void *)(v195 + 88) & 0xFFFFF00000000000 | ((unsigned __int16)((v193 + 3) >> 2) << 16) | ((((unint64_t)(((unsigned __int16)((v194 + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | (unsigned __int16)((v193 + 3) >> 2);
                            *(_DWORD *)(v195 + 24_Block_object_dispose(&a9, 8) = (v196 + 3) >> 2;
                            *(_DWORD *)(v195 + 252) = (((v197 + 3) >> 2) + 1) & 0x7FFFFFFE;
                            if (*(unsigned char *)(v195 + 174)) {
                              AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v195 + 48), *(_DWORD *)(v195 + 240), *(void *)v195 + *(unsigned __int16 *)(v195 + 244));
                            }
                            uint64_t v198 = *(void *)(v162 + 2784);
                            int v199 = *(char **)(v162 + 2736);
                            memcpy(v199, *(const void **)v198, *(void *)(v198 + 8) - *(void *)v198);
                            if (*(unsigned char *)(v198 + 200)) {
                              *(int8x16_t *)&v199[*(unsigned int *)(v198 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v199[*(unsigned int *)(v198 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
                            }
                            int v200 = *(unsigned int **)(v198 + 176);
                            for (iuint64_t i = *(unsigned int **)(v198 + 184); v200 != ii; v200 += 3)
                            {
                              v202.i64[0] = buf[v200[1]] + *v200;
                              v202.i64[1] = (unint64_t)v202.i64[0] >> 5;
                              *(int8x16_t *)&v199[v200[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v199[v200[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v202, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
                            }
                            uint64_t v203 = *(void *)(v162 + 2784);
                            long long v204 = *(_OWORD *)(v203 + 80);
                            long long v205 = *(_OWORD *)(v203 + 96);
                            long long v206 = *(_OWORD *)(v203 + 64);
                            *(_OWORD *)(v162 + 2792) = *(_OWORD *)(v203 + 48);
                            *(_OWORD *)(v162 + 2840) = v205;
                            *(_OWORD *)(v162 + 2824) = v204;
                            *(_OWORD *)(v162 + 280_Block_object_dispose(&a9, 8) = v206;
                            long long v208 = *(_OWORD *)(v203 + 128);
                            long long v207 = *(_OWORD *)(v203 + 144);
                            uint64_t v209 = *(void *)(v203 + 160);
                            *(_OWORD *)(v162 + 2856) = *(_OWORD *)(v203 + 112);
                            *(void *)(v162 + 2904) = v209;
                            *(_OWORD *)(v162 + 288_Block_object_dispose(&a9, 8) = v207;
                            *(_OWORD *)(v162 + 2872) = v208;
                          }
                          goto LABEL_244;
                        }
                        int v178 = __clz(__rbit64(v431));
                        int v180 = v178 | 0x40;
                        int64x2_t v179 = (int8x16_t *)&v431;
                      }
                      v179->i64[0] = v177 & ~(1 << v178);
                      unsigned int v181 = (8 * v180 + 7336) >> 2;
                      *std::string::size_type v175 = v181;
                      v175[1] = v181 | 1;
                      v175 += 2;
                    }
                  }
                }
                else
                {
                  unsigned int v163 = *(_DWORD *)(v76 + 360);
                }
                if (v163)
                {
                  if (v163 >= *(_DWORD *)(v76 + 440)) {
                    long long v164 = (_DWORD *)(v76 + 440);
                  }
                  else {
                    long long v164 = (_DWORD *)(v76 + 360);
                  }
                }
                else
                {
                  long long v164 = (_DWORD *)(v76 + 440);
                }
                *(_DWORD *)(v76 + 440) = *v164;
                goto LABEL_214;
              }
              uint64_t v154 = v152[14];
              if (v154)
              {
                long long v155 = (void *)(v154 + 1512);
                if (*(char *)(v154 + 1535) < 0)
                {
                  if (!*(void *)(v154 + 1520)) {
                    goto LABEL_180;
                  }
                  long long v155 = (void *)*v155;
LABEL_179:
                  memcpy((char *)v155 + *(void *)(v154 + 1536), *(const void **)(v154 + 1168), *(void *)(v154 + 1176));
                  goto LABEL_180;
                }
                if (*(unsigned char *)(v154 + 1535)) {
                  goto LABEL_179;
                }
              }
LABEL_180:
              uint64_t v156 = v152[51];
              if (!v156) {
                goto LABEL_187;
              }
              int v157 = (void *)(v156 + 1512);
              if (*(char *)(v156 + 1535) < 0)
              {
                if (!*(void *)(v156 + 1520)) {
                  goto LABEL_187;
                }
                int v157 = (void *)*v157;
LABEL_186:
                memcpy((char *)v157 + *(void *)(v156 + 1536), *(const void **)(v156 + 1168), *(void *)(v156 + 1176));
                goto LABEL_187;
              }
              if (*(unsigned char *)(v156 + 1535)) {
                goto LABEL_186;
              }
LABEL_187:
              uint64_t v158 = v152[88];
              if (!v158) {
                goto LABEL_194;
              }
              long long v159 = (void *)(v158 + 1512);
              if (*(char *)(v158 + 1535) < 0)
              {
                if (!*(void *)(v158 + 1520)) {
                  goto LABEL_194;
                }
                long long v159 = (void *)*v159;
LABEL_193:
                memcpy((char *)v159 + *(void *)(v158 + 1536), *(const void **)(v158 + 1168), *(void *)(v158 + 1176));
                goto LABEL_194;
              }
              if (*(unsigned char *)(v158 + 1535)) {
                goto LABEL_193;
              }
LABEL_194:
              uint64_t v160 = v152[125];
              if (v160)
              {
                long long v161 = (void *)(v160 + 1512);
                if (*(char *)(v160 + 1535) < 0)
                {
                  if (*(void *)(v160 + 1520))
                  {
                    long long v161 = (void *)*v161;
LABEL_170:
                    memcpy((char *)v161 + *(void *)(v160 + 1536), *(const void **)(v160 + 1168), *(void *)(v160 + 1176));
                  }
                }
                else if (*(unsigned char *)(v160 + 1535))
                {
                  goto LABEL_170;
                }
              }
              v152 += 163;
            }
          }
          uint64_t v150 = (void *)*v150;
        }
        else if (!*(unsigned char *)(v147 + 1583))
        {
          goto LABEL_169;
        }
        memcpy((char *)v150 + *(void *)(v147 + 1584), *(const void **)(v147 + 1216), *(void *)(v147 + 1224));
        goto LABEL_169;
      }
LABEL_244:
    }
  }
  int v210 = *(char **)(*(void *)(v6[9] + 8) + 40);
  uint64_t v211 = *(int *)(v8 + 2052);
  int16x8_t v212 = (void *)v6[5];
  int64x2_t v405 = (uint64_t *)v6[4];
  uint64_t v213 = [v212 maxAccelerationStructureTraversalDepth];
  uint64_t v214 = &v210[v211];
  int32x4_t v397 = &v210[v211];
  if (v213)
  {
    int v215 = [v212 maxAccelerationStructureTraversalDepth];
    uint64_t v214 = &v210[v211];
    *((_DWORD *)v397 + 57) = (v215 + 7) & 0xFFFFFFF8;
  }
  uint64_t v216 = *((void *)v214 + 72);
  if (v216)
  {
    char v217 = *(unsigned int **)(v216 + 32);
    for (juint64_t j = *(unsigned int **)(v216 + 40); v217 != jj; v217 += 326)
    {
      AGX::IntersectionPipelineSetGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalize(v217);
      AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)v397 + 56, v217);
    }
  }
  AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTable((uint64_t)v397);
  AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(*((void *)v397 + 2));
  uint64_t v219 = *((void *)v397 + 2);
  if ((*(unsigned char *)(v219 + 1951) & 5) != 0) {
    v397[25] = 1;
  }
  *((void *)v397 + 15) = v405;
  *(void *)&double v220 = AGX::ComputeProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(v219).n128_u64[0];
  if (v397[24])
  {
    uint64_t v221 = v405[101];
    AGX::Heap<true>::allocateImpl(buf, v221 + 5688, 112, 0);
    *((_OWORD *)v397 + 3) = *(_OWORD *)buf;
    *((_OWORD *)v397 + 4) = *(_OWORD *)&buf[2];
    *(_OWORD *)(v397 + 73) = *(_OWORD *)((char *)&buf[3] + 1);
    uint64_t v222 = *((void *)v397 + 7);
    *((void *)v397 + 5) = *((void *)v397 + 6) + 0x1000000000;
    uint64_t v223 = *((void *)v397 + 2);
    {
      AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value = 1;
    }
    if (AGX::CDMEncoderGen6<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants>::getSubKernelXTargetWorkitems(void)::subkernelxtarget_value) {
      int v224 = 0x80000;
    }
    else {
      int v224 = 0;
    }
    *(_DWORD *)(v222 + 12) = v224;
    *(void *)(v222 + 16) = 4;
    *(_DWORD *)(v222 + 24) = 0x40000000;
    *(void *)(v222 + 2_Block_object_dispose(&a9, 8) = 0;
    *(void *)(v222 + 44) = 0;
    *(void *)(v222 + 36) = 0;
    uint64_t v225 = *(void *)(v223 + 2784);
    *(_DWORD *)(v222 + 12) = v224 & 0xFFFF8007 | (8 * (*(_DWORD *)(v225 + 252) & 0xFFF));
    *(_DWORD *)(v222 + 16) = (8 * (*(_DWORD *)(v225 + 248) & 0x3FFFF)) | 4;
    uint64_t v226 = *(void *)(v223 + 2776);
    buf[2] = 0;
    buf[1] = 0;
    buf[0] = (2 * (v226 & 0xFFFFFFFFFFFFLL)) | 1;
    AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)buf, (unsigned __int8 *)v222);
    *(_DWORD *)(v222 + 6_Block_object_dispose(&a9, 8) = 4 * *(_DWORD *)(v223 + 3376);
    *(_DWORD *)(v222 + 72) = (*(_DWORD *)(v223 + 3548) + 3) >> 2;
    uint64_t v227 = *((void *)v397 + 16);
    if (v227) {
      uint64_t v227 = *(void *)(v227 + 56);
    }
    *(void *)(v222 + 8_Block_object_dispose(&a9, 8) = v227;
    uint64_t v228 = *((void *)v397 + 18);
    if (v228) {
      uint64_t v228 = *(void *)(v228 + 56);
    }
    *(void *)(v222 + 96) = v228;
    uint64_t v229 = *(void *)v397;
    if (*(void *)v397) {
      uint64_t v229 = *(void *)(v229 + 56);
    }
    *(void *)(v222 + 104) = v229;
    *(_DWORD *)(v222 + 80) = *(_DWORD *)(v223 + 2340) * (*(_DWORD *)(v223 + 3532) >> 5);
    *(_DWORD *)(v222 + 76) = *(_DWORD *)(v223 + 2336);
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(*(void *)(v221 + 7408), *((_DWORD *)v397 + 53) + *((_DWORD *)v397 + 45), *(_DWORD *)(*((void *)v397 + 2) + 1000), *((_DWORD *)v397 + 48), 0, 0, 0);
    AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::Allocation((uint64_t)buf, (os_unfair_lock_s *)(v405[101] + 6344), [v212 resourceIndex]);
    int v230 = *((_DWORD *)v397 + 24);
    *((_DWORD *)v397 + 24) = buf[0];
    LODWORD(buf[0]) = v230;
    uint32x4_t v231 = (os_unfair_lock_s *)*((void *)v397 + 13);
    *((void *)v397 + 13) = buf[1];
    buf[1] = v231;
    int v232 = v397[112];
    v397[112] = buf[2];
    LOBYTE(buf[2]) = v232;
    int16x8_t v233 = (int *)MEMORY[0x263F4B188];
    if (v230 && !v232)
    {
      int16x8_t v234 = v231 + 10;
      os_unfair_lock_lock(v231 + 10);
      uint64_t v235 = buf[1];
      uint64_t v236 = LODWORD(buf[0]);
      int16x8_t v237 = (atomic_ullong *)(buf[1] + 32);
      uint64_t v238 = *(void *)(buf[1] + 32);
      uint64_t v239 = 8 * LODWORD(buf[0]);
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(buf[1] + 24) + 8) + *v233 + 24) + v239) = v238;
      uint64_t v240 = v238;
      atomic_compare_exchange_strong(v237, (unint64_t *)&v240, (v238 & 0xFFFFFFFF00000000 | v236) + 0x100000000);
      if (v240 != v238)
      {
        uint64_t v241 = v240;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)(v235 + 24) + 8) + *v233 + 24) + v239) = v240;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(v235 + 32), (unint64_t *)&v241, (v240 & 0xFFFFFFFF00000000 | v236) + 0x100000000);
          BOOL v242 = v241 == v240;
          uint64_t v240 = v241;
        }
        while (!v242);
      }
      os_unfair_lock_unlock(v234);
    }
    uint64_t v243 = *((void *)v397 + 5);
    int16x8_t v244 = (os_unfair_lock_s *)(*((void *)v397 + 13) + 40);
    os_unfair_lock_lock(v244);
    *(void *)(*(void *)(*(void *)(*((void *)v397 + 13) + 8) + *v233 + 24)
              + 8 * *((unsigned int *)v397 + 24)) = v243;
    os_unfair_lock_unlock(v244);
  }
  if (objc_msgSend(v210, "label", v220))
  {
    {
      {
        uint64_t v246 = objc_msgSend((id)objc_msgSend(v210, "label"), "UTF8String");
        int v247 = *(_DWORD *)(*((void *)v397 + 2) + 2344);
        LODWORD(buf[0]) = 136446466;
        *(void *)((char *)buf + 4) = v246;
        WORD2(buf[1]) = 1026;
        *(_DWORD *)((char *)&buf[1] + 6) = v247;
        _os_signpost_emit_with_name_impl(&dword_2427AD000, v245, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ComputePipelineLabel", "Label=%{public,signpost.description:attribute}s ID=%{public,signpost.description:attribute}u", (uint8_t *)buf, 0x12u);
      }
    }
  }
  unint64_t v388 = (void *)[v212 linkedFunctions];
  int16x8_t v248 = (int8x8_t *)*((void *)v397 + 2);
  uint64_t v249 = objc_msgSend((id)objc_msgSend(v388, "functions"), "count");
  uint64_t v250 = objc_msgSend((id)objc_msgSend(v388, "binaryFunctions"), "count");
  int16x8_t v251 = (int8x8_t *)v397;
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(v250 + v249) / *((float *)v397 + 120));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
    int16x8_t v251 = (int8x8_t *)v397;
  }
  long long v253 = v251 + 56;
  int8x8_t v254 = v251[57];
  if (prime > *(void *)&v254) {
    goto LABEL_281;
  }
  if (prime < *(void *)&v254)
  {
    unint64_t v255 = vcvtps_u32_f32((float)*((unint64_t *)v397 + 59) / *((float *)v397 + 120));
    if (*(void *)&v254 < 3uLL || (uint8x8_t v256 = (uint8x8_t)vcnt_s8(v254), v256.i16[0] = vaddlv_u8(v256), v256.u32[0] > 1uLL))
    {
      unint64_t v255 = std::__next_prime(v255);
    }
    else
    {
      uint64_t v257 = 1 << -(char)__clz(v255 - 1);
      if (v255 >= 2) {
        unint64_t v255 = v257;
      }
    }
    if (prime <= v255) {
      unint64_t prime = v255;
    }
    if (prime < *(void *)&v254) {
LABEL_281:
    }
      std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>((uint64_t)v253, prime);
  }
  long long v427 = 0u;
  long long v428 = 0u;
  long long v425 = 0u;
  long long v426 = 0u;
  int64x2_t v258 = (void *)[v388 functions];
  uint64_t v259 = 0;
  uint64_t v260 = [v258 countByEnumeratingWithState:&v425 objects:buf count:16];
  if (v260)
  {
    uint64_t v261 = *(void *)v426;
    __pa = v248 + 445;
    do
    {
      for (kuint64_t k = 0; kk != v260; ++kk)
      {
        if (*(void *)v426 != v261) {
          objc_enumerationMutation(v258);
        }
        int16x8_t v263 = *(void **)(*((void *)&v425 + 1) + 8 * kk);
        int16x8_t v264 = (void *)[v263 name];
        if ([v263 functionType] == 6) {
          int v265 = [v405 requiresRaytracingEmulation];
        }
        else {
          int v265 = 0;
        }
        if ([v263 functionType] == 5) {
          int v266 = 1;
        }
        else {
          int v266 = v265;
        }
        if (v266 == 1)
        {
          uint64_t VisibleFunctionOffset = VisibleFunctionsMap::getVisibleFunctionOffset(__pa, (const char *)[v264 cStringUsingEncoding:4]);
          if (VisibleFunctionOffset != -1
            && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v253, (unint64_t)v263))
          {
            std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v253, (unint64_t)v263, (uint64_t)v263, (uint64_t)-[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v263 functionType], v264, v405, VisibleFunctionOffset, 0));
          }
        }
        else if ([v263 functionType] == 6 {
               && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v253, (unint64_t)v263))
        }
        {
          std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v253, (unint64_t)v263, (uint64_t)v263, (uint64_t)[[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v264 device:v405 handle:v259++ dylib:0]);
        }
      }
      uint64_t v260 = [v258 countByEnumeratingWithState:&v425 objects:buf count:16];
    }
    while (v260);
  }
  long long v423 = 0u;
  long long v424 = 0u;
  long long v421 = 0u;
  long long v422 = 0u;
  int16x8_t v268 = (void *)[v388 privateFunctions];
  uint64_t v269 = [v268 countByEnumeratingWithState:&v421 objects:&v433 count:16];
  if (v269)
  {
    uint64_t v270 = *(void *)v422;
    do
    {
      for (munint64_t m = 0; mm != v269; ++mm)
      {
        if (*(void *)v422 != v270) {
          objc_enumerationMutation(v268);
        }
        if ([*(id *)(*((void *)&v421 + 1) + 8 * mm) functionType] == 6) {
          v259 += [v405 requiresRaytracingEmulation] ^ 1;
        }
      }
      uint64_t v269 = [v268 countByEnumeratingWithState:&v421 objects:&v433 count:16];
    }
    while (v269);
  }
  int8x16_t v272 = (void *)[v388 binaryFunctions];
  long long v419 = 0u;
  long long v420 = 0u;
  long long v418 = 0u;
  long long v417 = 0u;
  uint64_t v273 = [v272 countByEnumeratingWithState:&v417 objects:&v431 count:16];
  __pb = v272;
  if (v273)
  {
    uint64_t v274 = *(void *)v418;
    do
    {
      for (nunint64_t n = 0; nn != v273; ++nn)
      {
        if (*(void *)v418 != v274) {
          objc_enumerationMutation(__pb);
        }
        int8x16_t v276 = *(void **)(*((void *)&v417 + 1) + 8 * nn);
        uint64_t v277 = [v276 name];
        if ([v276 vendorPrivate]
          && ([v276 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v253, (unint64_t)v276)) {
            std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v253, (unint64_t)v276, [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v277 device:v405 handle:v259++ dylib:0]);
          }
        }
        else
        {
          uint64_t v278 = [v276 vendorPrivate];
          uint64_t v279 = v278;
          if (v278)
          {
            uint64_t v280 = *(void *)(v278 + 56);
            int8x16_t v281 = (void *)[v276 name];
            uint64_t v282 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v280 + 96, (char *)[v281 cStringUsingEncoding:4], *(void *)(*(void *)(v279 + 56) + 680));
            if (v282 != -1
              && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v253, (unint64_t)v276))
            {
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v253, (unint64_t)v276, -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v276 functionType], v281, v405, v282, v279));
            }
          }
        }
      }
      uint64_t v273 = [__pb countByEnumeratingWithState:&v417 objects:&v431 count:16];
    }
    while (v273);
  }
  AGX::ComputePipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection((uint64_t)v397, v405[101]);
  uint64_t v6 = v377;
  unint64_t v8 = 0x268D57000uLL;
  if ((obj & 1) == 0)
  {
    int8x16_t v283 = *(_DWORD **)(*(void *)(v377[9] + 8) + 40);
LABEL_344:
    int8x16_t v284 = v6 + 9;
    goto LABEL_345;
  }
  uint64_t v2 = v380;
LABEL_339:
  int8x16_t v284 = v6 + 9;
  int8x16_t v283 = *(_DWORD **)(*(void *)(v6[9] + 8) + 40);
  if (!v283)
  {
LABEL_345:

    *(void *)(*(void *)(*v284 + 8) + 40) = 0;
    if (!v416) {
      int8x16_t v416 = @"Internal error during compute pipeline creation";
    }
    if (v379 > 3) {
      uint64_t v286 = 5;
    }
    else {
      uint64_t v286 = qword_242EAA188[v379];
    }
    uint64_t v287 = v6[8];
    int8x16_t v288 = (void *)v6[16];
    uint64_t v289 = objc_msgSend(NSDictionary, "dictionaryWithObject:forKey:");
    id v290 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v286 userInfo:v289];
    if (v287)
    {
      (*(void (**)(uint64_t, void, void, id))(v287 + 16))(v287, 0, 0, v290);
    }
    else if (v288)
    {
      *int8x16_t v288 = v290;
    }
    goto LABEL_452;
  }
  unint64_t v285 = 4187712;
  if (!*(unsigned char *)(v2 + 1047)) {
    unint64_t v285 = 261732;
  }
  if (v285 < (v283[69] + v283[61]))
  {
    int8x16_t v416 = @"Compute pipeline exceeds available stack space";
    goto LABEL_344;
  }
  uint64_t v291 = v6[13];
  if (v291)
  {
    objd = (int8x16_t *)(v2 + 1944);
    int64x2_t v292 = (int8x16_t *)(v2 + 1640);
    if (v376 && (v291 & 0x400000) != 0)
    {
      if (!*((unsigned char *)v6 + 136))
      {
        uint64_t v293 = mach_absolute_time() - v6[14];
        if (getTimebaseInfo(void)::once != -1) {
          dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
        }
        uint64_t v294 = [NSNumber numberWithUnsignedLongLong:v293 * getTimebaseInfo(void)::sTimebaseInfo / *(unsigned int *)algn_268D5B048];
        [v376 setObject:v294 forKey:*MEMORY[0x263F12668]];
      }
      uint64_t v295 = v380;
      id v296 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:35];
      int8x16_t v297 = *objd;
      *(int8x16_t *)buf = v297;
      if (*(_OWORD *)&v297 != 0)
      {
        int v298 = __clz(v297.u64[1]) ^ 0x7F;
        int v299 = 63 - __clz(v297.u64[0]);
        if (v297.i64[1]) {
          int v300 = v298;
        }
        else {
          int v300 = v299;
        }
        int8x16_t v433 = vorrq_s8(*v292, vbicq_s8(v297, objd[2]));
        if (v300 != -1)
        {
          unsigned int v301 = 0;
          int v302 = v300 + 1;
          do
          {
            BOOL v303 = v301 > 0x3F;
            if ((*(void *)((unint64_t)buf | (8 * v303)) & (1 << v301)) != 0)
            {
              if ((*(void *)((unint64_t)&v433 | (8 * v303)) & (1 << v301)) != 0) {
                int v304 = @"promoted";
              }
              else {
                int v304 = @"not promoted";
              }
            }
            else
            {
              int v304 = @"unused";
            }
            [v296 addObject:v304];
            ++v301;
          }
          while (v302 != v301);
        }
        unint64_t v8 = 0x268D57000uLL;
        uint64_t v295 = v380;
      }
      id PerformanceStatisticsDictionary = AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createPerformanceStatisticsDictionary((unsigned int *)(v295 + 1768), @"ComputeBufferPrefetch", (uint64_t)v296);
      long long v306 = (void *)MEMORY[0x263F12710];
      uint64_t v307 = [PerformanceStatisticsDictionary objectForKey:*MEMORY[0x263F12710]];
      int v308 = (void *)MEMORY[0x263F12720];
      uint64_t v309 = [PerformanceStatisticsDictionary objectForKey:*MEMORY[0x263F12720]];
      [v376 setObject:v307 forKey:*v306];
      [v376 setObject:v309 forKey:*v308];

      _MTLAddCompilePipelinePerformanceStatistics();
    }
    long long v310 = &xmmword_242EA8000;
    if (v6[8] || v6[15])
    {
      uint64_t v311 = *(void *)(*(void *)(v6[10] + 8) + 24);
      os_unfair_lock_lock((os_unfair_lock_t)(v311 + 1144));
      int v312 = *(void **)(v311 + 1104);
      uint64_t v313 = *(unsigned int *)(v311 + 1112);
      uint64_t v314 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v312, *(_DWORD *)(v311 + 1112), (void *)v374);
      if (!v314)
      {
        if (v313 == 4) {
          operator new();
        }
        int v315 = &v312[4 * v313];
        long long v316 = *(_OWORD *)(v374 + 16);
        *int v315 = *(_OWORD *)v374;
        v315[1] = v316;
        uint64_t v317 = *(void *)(v311 + 1104);
        unsigned int v318 = *(_DWORD *)(v311 + 1112);
        *(_DWORD *)(v311 + 1112) = v318 + 1;
        uint64_t v314 = v317 + 24 * v318 + 128;
      }
      int v319 = *(NSObject **)(v314 + 16);
      if (v319) {
        dispatch_retain(*(dispatch_object_t *)(v314 + 16));
      }
      __pCC_SHA256_CTX c = v319;
      os_unfair_lock_unlock((os_unfair_lock_t)(v311 + 1144));
      id v406 = objc_alloc_init(MEMORY[0x263EFF980]);
      uint64_t v320 = v380;
      uint64_t v321 = [v406 addObjectsFromArray:v6[12]];
      long long v322 = v415;
      if (v415)
      {
        int v323 = (void *)MEMORY[0x24566F2C0](v321);
        buf[0] = MEMORY[0x263EF8330];
        buf[1] = 3221225472;
        buf[2] = ___ZN3AGX13DynamicLoaderINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEvE20DynamicLibraryFilter33newFilteredLinkedDynamicLibrariesEP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectE_block_invoke;
        buf[3] = &__block_descriptor_40_e25_B24__0_8__NSDictionary_16l;
        buf[4] = v322;
        id v398 = (id)objc_msgSend(v406, "filteredArrayUsingPredicate:", objc_msgSend(MEMORY[0x263F08A98], "predicateWithBlock:", buf));
      }
      else
      {
        id v398 = v406;
      }
      if (__pc)
      {
        id v325 = objc_alloc(MEMORY[0x263F12860]);
        uint64_t v326 = v6[7];
        uint64_t v327 = [(id)v6[6] device];
        uint64_t v328 = *(void *)(*(void *)(*(void *)(v6[9] + 8) + 40) + 80);
        unint64_t v389 = (void *)[v325 initWithSerializedData:__pc dynamicLibraries:v398 serializedStageInputDescriptor:v326 device:v327 options:v6[13] | 3 flags:(*(_DWORD *)(*(void *)(*(void *)(v6[9] + 8) + 40) + 276)+ *(_DWORD *)(*(void *)(*(void *)(v6[9] + 8) + 40) + 244) != 0) | (16 * (*(_DWORD *)(v328 + 1000) != 0)) | (2 * *(unsigned __int8 *)(v328 + 3537)) | (4 * *(unsigned __int8 *)(v328 + 3540)) | (8 * *(unsigned __int8 *)(v328 + 3541))];
        uint64_t v329 = v6[13];
        if ((v329 & 0x40000) != 0)
        {
          id v330 = (id)[objc_alloc(MEMORY[0x263EFF980]) initWithCapacity:35];
          int8x16_t v331 = *objd;
          *(int8x16_t *)buf = v331;
          if (*(_OWORD *)&v331 != 0)
          {
            int v332 = __clz(v331.u64[1]) ^ 0x7F;
            int v333 = 63 - __clz(v331.u64[0]);
            if (v331.i64[1]) {
              int v334 = v332;
            }
            else {
              int v334 = v333;
            }
            int8x16_t v433 = vorrq_s8(*v292, vbicq_s8(v331, objd[2]));
            if (v334 != -1)
            {
              unsigned int v335 = 0;
              int v336 = v334 + 1;
              do
              {
                BOOL v337 = v335 > 0x3F;
                if ((*(void *)((unint64_t)buf | (8 * v337)) & (1 << v335)) != 0)
                {
                  if ((*(void *)((unint64_t)&v433 | (8 * v337)) & (1 << v335)) != 0) {
                    int v338 = @"promoted";
                  }
                  else {
                    int v338 = @"not promoted";
                  }
                }
                else
                {
                  int v338 = @"unused";
                }
                [v330 addObject:v338];
                ++v335;
              }
              while (v336 != v335);
            }
            unint64_t v8 = 0x268D57000;
            uint64_t v320 = v380;
            long long v310 = &xmmword_242EA8000;
          }
          id v339 = AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createPerformanceStatisticsDictionary((unsigned int *)(v320 + 1768), @"ComputeBufferPrefetch", (uint64_t)v330);
          long long v340 = v339;
          if (v376 && v339) {
            [v339 setObject:v376 forKey:*MEMORY[0x263F126C8]];
          }
          [v389 setPerformanceStatistics:v340];

          uint64_t v329 = v6[13];
        }
        if (v320)
        {
          if ((v329 & 0x200000) != 0)
          {
            uint64_t v341 = *(void *)(v320 + 1664);
            if (v341)
            {
              uint64_t v342 = *(void *)(v320 + 1688);
              if (v342)
              {
                unint64_t v343 = *(void *)(v320 + 1672) - v341;
                uint64_t v344 = (v343 >> 4);
                uint64_t v345 = v343 & 0xFFFFFFFF0;
                int32x4_t v378 = v6;
                if ((v343 & 0xFFFFFFFF0) != 0)
                {
                  int v346 = (char *)operator new(16 * v344);
                  unsigned __int16 v347 = &v346[16 * v344];
                }
                else
                {
                  unsigned __int16 v347 = 0;
                  int v346 = 0;
                }
                uint64_t v349 = v344;
                id v350 = objc_alloc_init(MEMORY[0x263EFF980]);
                if (v345)
                {
                  uint64_t v351 = 0;
                  int v352 = v346;
                  uint64_t v386 = v342;
                  while (1)
                  {
                    objc_msgSend(v350, "addObject:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", *(void *)(v342 + 8 * v351)));
                    long long v354 = *(_OWORD *)(v341 + 16 * v351);
                    if (v352 >= v347) {
                      break;
                    }
                    *(_OWORD *)int v352 = v354;
                    unsigned __int16 v353 = v352 + 16;
LABEL_418:
                    ++v351;
                    int v352 = v353;
                    if (v351 == v349) {
                      goto LABEL_437;
                    }
                  }
                  uint64_t v355 = (v352 - v346) >> 4;
                  unint64_t v356 = v355 + 1;
                  if ((unint64_t)(v355 + 1) >> 60) {
                    abort();
                  }
                  if ((v347 - v346) >> 3 > v356) {
                    unint64_t v356 = (v347 - v346) >> 3;
                  }
                  if ((unint64_t)(v347 - v346) >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v357 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v357 = v356;
                  }
                  if (v357)
                  {
                    *(_OWORD *)obje = *(_OWORD *)(v341 + 16 * v351);
                    if (v357 >> 60) {
                      std::__throw_bad_array_new_length[abi:nn180100]();
                    }
                    int8x16x2_t v358 = (char *)operator new(16 * v357);
                    long long v354 = *(_OWORD *)obje;
                  }
                  else
                  {
                    int8x16x2_t v358 = 0;
                  }
                  uint64_t v359 = v349;
                  long long v360 = &v358[16 * v355];
                  *(_OWORD *)long long v360 = v354;
                  unsigned __int16 v353 = v360 + 16;
                  if (v352 == v346)
                  {
                    int32x4_t v361 = v360;
                    unsigned __int16 v347 = &v358[16 * v357];
                    if (!v346) {
                      goto LABEL_434;
                    }
                  }
                  else
                  {
                    do
                    {
                      int32x4_t v361 = v360 - 16;
                      *((_OWORD *)v360 - 1) = *((_OWORD *)v352 - 1);
                      v352 -= 16;
                      v360 -= 16;
                    }
                    while (v352 != v346);
                    unsigned __int16 v347 = &v358[16 * v357];
                    if (!v346) {
                      goto LABEL_434;
                    }
                  }
                  operator delete(v346);
LABEL_434:
                  int v346 = v361;
                  uint64_t v349 = v359;
                  uint64_t v342 = v386;
                  goto LABEL_418;
                }
LABEL_437:
                [v389 setConstantSamplerDescriptorsFromBitmasks:v346 stride:16 count:v349];
                uint64_t v320 = v380;
                long long v310 = &xmmword_242EA8000;
                [v389 setConstantSamplerUniqueIdentifiers:v350];

                uint64_t v6 = v378;
                unint64_t v8 = 0x268D57000uLL;
                if (v346) {
                  operator delete(v346);
                }
              }
            }
          }
        }
        dispatch_release(__pc);
        int v348 = v398;
        int v324 = v389;
      }
      else
      {
        int v324 = 0;
        int v348 = v398;
      }
    }
    else
    {
      int v324 = 0;
      id v406 = 0;
      int v348 = 0;
      uint64_t v320 = v380;
    }
    if (*((unsigned char *)v6 + 107))
    {
      v407[0] = MEMORY[0x263EF8330];
      v407[1] = *((void *)v310 + 320);
      int16x8_t v408 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_3;
      int8x16_t v409 = &unk_26516EC28;
      uint64_t v410 = *v284;
      if (*(void *)(v320 + 3600))
      {
        int32x4_t v362 = (void *)[objc_alloc(MEMORY[0x263F12890]) initWithData:*(void *)(v320 + 3600) linkedDynamicLibraries:v348];
        v408((uint64_t)v407, (uint64_t)v362);
      }
      else
      {
        int32x4_t v362 = 0;
        ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_3((uint64_t)v407, 0);
      }
    }
  }
  else
  {
    int v324 = 0;
  }
  if ([(id)v6[5] supportIndirectCommandBuffers]) {
    __n128 v363 = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v373 + 128), (unsigned int *)(*(void *)(*(void *)(*v284 + 8) + 40) + *(int *)(v8 + 2052) + 224));
  }
  uint64_t v364 = v6[8];
  if (v364)
  {
    (*(void (**)(uint64_t, void, void *, void, __n128))(v364 + 16))(v364, *(void *)(*(void *)(*v284 + 8) + 40), v324, 0, v363);

    *(void *)(*(void *)(*v284 + 8) + 40) = 0;
  }
  else if (v6[15])
  {
    id v365 = v324;
    *(void *)v6[15] = v324;
  }
LABEL_452:
  uint64x2_t v366 = (void **)v415;
  if (v415)
  {
    int64x2_t v367 = (void *)v415[2];
    if (v367)
    {
      do
      {
        int64x2_t v368 = (void *)*v367;
        operator delete(v367);
        int64x2_t v367 = v368;
      }
      while (v368);
    }
    int64x2_t v369 = *v366;
    *uint64x2_t v366 = 0;
    if (v369) {
      operator delete(v369);
    }
    MEMORY[0x24566ED90](v366, 0x10A0C408EF24B1CLL);
  }
}

void sub_2429D3254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  os_unfair_lock_unlock(v41);
  std::unique_ptr<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter,std::default_delete<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::DynamicLibraryFilter>>::~unique_ptr[abi:nn180100](&a41);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createComputeProgramVariant(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, NSObject *a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v160 = *MEMORY[0x263EF8340];
  v106[0] = 0;
  v106[1] = v106;
  v106[2] = 0x3052000000;
  v106[3] = __Block_byref_object_copy_;
  v106[4] = __Block_byref_object_dispose_;
  v106[5] = 0;
  uint64_t v90 = [a2 computeFunction];
  {
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLComputePipelineDescriptor>(MTLComputePipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  if (AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLComputePipelineDescriptor>(MTLComputePipelineDescriptor const*)::enable_pipeline_script)
  {
    [a2 newPipelineScript];
    operator new();
  }
  int v14 = (void *)[a2 linkedFunctions];
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)v95);
  v95[0] = &unk_26F852F08;
  uint64_t v105 = 0;
  if (a8)
  {
    *(void *)buffer_ptr.count = 0;
    *(void *)&long long __p = 0;
    map = dispatch_data_create_map(a8, (const void **)&buffer_ptr, (size_t *)&__p);
    std::string::append(&v101, *(const std::string::value_type **)buffer_ptr.count, __p);
    dispatch_release(map);
  }
  ProgramKeyDynamicLibrariesImpl<false>::ProgramKeyDynamicLibrariesImpl((char **)&buffer_ptr, a6);
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v103, *(char **)buffer_ptr.count, *(char **)buffer_ptr.hash, (uint64_t)(*(void *)buffer_ptr.hash - *(void *)buffer_ptr.count) >> 5);
  if (*(void *)buffer_ptr.count)
  {
    *(void *)buffer_ptr.hash = *(void *)buffer_ptr.count;
    operator delete(*(void **)buffer_ptr.count);
  }
  memset(&buffer_ptr, 0, 24);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[v14 functions], 0);
  ProgramKeyVisibleFunctionTableImpl<false>::ProgramKeyVisibleFunctionTableImpl(MTLLinkedFunctions *)::{lambda(NSArray *,unsigned char)#1}::operator()((int8x16_t **)&buffer_ptr, (void *)[v14 privateFunctions], 1u);
  uint64_t v16 = *(void **)buffer_ptr.count;
  std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>(v104, *(char **)buffer_ptr.count, *(char **)buffer_ptr.hash, (uint64_t)(*(void *)buffer_ptr.hash - *(void *)buffer_ptr.count) >> 5);
  if (v16) {
    operator delete(v16);
  }
  unint64_t v17 = (void *)[a2 driverCompilerOptions];
  uint64_t v18 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count");
  int v19 = [a2 supportAddingBinaryFunctions];
  if (objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v20 = 4; {
  else
  }
    int v20 = 0;
  LODWORD(v100) = v100 & 0xFFFFFFFB | v20;
  unsigned __int16 v21 = objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
  LODWORD(v100) = v100 & 0xFC0003FF | (v21 << 10);
  if (objc_msgSend((id)objc_msgSend(v17, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v22 = 0x8000000; {
  else
  }
    int v22 = 0;
  if (v18) {
    int v23 = 1;
  }
  else {
    int v23 = v19;
  }
  if (v23) {
    int v24 = 512;
  }
  else {
    int v24 = 0;
  }
  LODWORD(v100) = v22 | v100 & 0xF7FFFDFF | v24;
  uint64_t v25 = (void *)[a2 buffers];
  uint64_t v26 = 0;
  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v28 = objc_msgSend((id)objc_msgSend(v25, "_descriptorAtIndex:", i), "mutability");
    uint64_t v29 = 1 << i;
    if (v28 != 1) {
      uint64_t v29 = 0;
    }
    v26 |= v29;
  }
  uint64_t v98 = v26;
  char v102 = [a2 supportIndirectCommandBuffers];
  int v99 = [a2 maxTotalThreadsPerThreadgroup];
  int v30 = [a2 threadGroupSizeIsMultipleOfThreadExecutionWidth];
  HIDWORD(v100) = HIDWORD(v100) & 0xFFFFFFFE | v30;
  if ([a2 needsCustomBorderColorSamplers]) {
    int v31 = 2;
  }
  else {
    int v31 = 0;
  }
  HIDWORD(v100) = HIDWORD(v100) & 0xFFFFFFFD | v31;
  uint64_t v32 = [a2 textureWriteRoundingMode];
  int v33 = 8 * (v32 == 1);
  if (v32 == 2) {
    int v33 = 16;
  }
  HIDWORD(v100) = v33 | HIDWORD(v100) & 0xFFFFFFE7;
  uint64_t v34 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "linkedFunctions"), "binaryFunctions"), "count");
  int v35 = [a2 supportAddingBinaryFunctions];
  if (v34) {
    int v36 = 1;
  }
  else {
    int v36 = v35;
  }
  if (v36) {
    int v37 = 32;
  }
  else {
    int v37 = 0;
  }
  HIDWORD(v100) = HIDWORD(v100) & 0xFFFFFDDF | v37;
  unint64_t v100 = (unint64_t)vand_s8((int8x8_t)v100, (int8x8_t)0xFFFFFFFEFFFFFF7FLL);
  [a2 supportIndirectCommandBuffers];
  uint64_t v38 = a3[101];
  unsigned int v39 = *(_DWORD *)(v38 + 7288);
  unsigned __int32 v40 = ((v39 << 29) & 0x40000000 | v100 & 0x8BFFFEFF | (*(unsigned __int8 *)(v38 + 7440) << 26)) ^ 0x40000000;
  unsigned __int32 v41 = (v39 >> 14) & 0x80 | (v39 >> 8) & 0x40 | HIDWORD(v100) & 0xFFFFF73B;
  unint64_t v100 = __PAIR64__(v41, v40);
  uint64_t v105 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v42 = 1;
    unsigned __int32 v40 = v100;
    unsigned __int32 v41 = HIDWORD(v100);
  }
  else
  {
    int v42 = 0;
  }
  LODWORD(v100) = (a4 >> 21) & 8 | v42 | v40 & 0xFFFFFFF4;
  HIDWORD(v100) = v41 & 0xFFFFFEFF | (((a4 >> 21) & 1) << 8);
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&buffer_ptr, (void *)[a2 gpuCompilerSPIOptions]);
  long long v151 = *(_OWORD *)buffer_ptr.count;
  long long v152 = *(_OWORD *)&buffer_ptr.hash[2];
  uint64_t v43 = (os_unfair_lock_s *)(a7 + 1144);
  os_unfair_lock_lock((os_unfair_lock_t)(a7 + 1144));
  uint64_t v44 = *(void **)(a7 + 1104);
  uint64_t v45 = *(unsigned int *)(a7 + 1112);
  uint64_t v46 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v44, v45, &v151);
  if (!v46)
  {
    if (v45 == 4) {
      operator new();
    }
    uint64_t v47 = &v44[4 * v45];
    long long v48 = v152;
    *uint64_t v47 = v151;
    v47[1] = v48;
    uint64_t v49 = *(void *)(a7 + 1104);
    unsigned int v50 = *(_DWORD *)(a7 + 1112);
    *(_DWORD *)(a7 + 1112) = v50 + 1;
    uint64_t v46 = (void *)(v49 + 24 * v50 + 128);
  }
  uint64_t v85 = a6;
  uint64_t v51 = a4 & 0x330000 | 3;
  if ((v51 & ~v46[1]) != 0)
  {
    uint64_t v52 = *v46 | v51;
    *uint64_t v46 = v52;
  }
  else
  {
    uint64_t v52 = 0;
  }
  os_unfair_lock_unlock(v43);
  unint64_t v87 = v52 | a4 & 0xFFFFFFFFFFCCFFFCLL;
  if (v52 & 4 | a4 & 4 || a5) {
    operator new();
  }
  os_unfair_lock_lock(v43);
  uint64_t v53 = VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::operator[](a7, (uint64_t)v95);
  if (*(void *)v53)
  {
    if (!*(unsigned char *)(v53 + 40))
    {
      uint64_t v82 = v52 & 0x330003;
      if (v82)
      {
        dispatch_group_enter(*(dispatch_group_t *)v53);
        os_unfair_lock_unlock(v43);
        uint64_t v83 = *a1;
        v132[0] = MEMORY[0x263EF8330];
        v132[1] = 3221225472;
        v132[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2;
        v132[3] = &unk_26516EEF0;
        long long v133 = v151;
        long long v134 = v152;
        v132[5] = a7;
        v132[4] = a3;
        v132[6] = v87;
        v132[7] = v53;
        [*v83 reflectionWithFunction:v90 options:v82 sync:a9 ^ 1u completionHandler:v132];
      }
      else
      {
        os_unfair_lock_unlock(v43);
      }
      goto LABEL_90;
    }
    uint64_t v54 = *(void *)(v53 + 8);
    if (v54) {
      (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
    }
    *(void *)(v53 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(v53 + 16) = 0;

    *(void *)(v53 + 24) = 0;
    *(void *)(v53 + 32) = 0;
    *(unsigned char *)(v53 + 40) = 0;
    std::string v55 = *(NSObject **)v53;
  }
  else
  {
    std::string v55 = dispatch_group_create();
    *(void *)uint64_t v53 = v55;
  }
  dispatch_group_enter(v55);
  os_unfair_lock_unlock(v43);
  uint64_t v56 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
  uint64_t v57 = (void *)[a2 pipelineLibrary];
  if ([v57 pipelineCache] && (objc_msgSend(v57, "disableRunTimeCompilation") & 1) != 0) {
    LOBYTE(v5_Block_object_dispose(&a9, 8) = 1;
  }
  else {
    unsigned int v58 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
  }
  char v86 = v58;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unint64_t v59 = objc_opt_new();
  [v59 setSync:a9 ^ 1u];
  [v59 setFunction:v90];
  [v59 setFrameworkData:a8];
  [v59 setPipelineCache:v56];
  [v59 setDestinationBinaryArchive:0];
  objc_msgSend(v59, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
  [v59 setPipelineOptions:a4 | 3];
  if ((a4 & 0x330003) == 0) {
    objc_msgSend(v59, "setPipelineOptions:", objc_msgSend(v59, "pipelineOptions") | 0x8000);
  }
  unint64_t v60 = [a2 newPipelineScript];
  if (v60)
  {
    [v59 setAirScript:v60];
    dispatch_release(v60);
  }
  objc_msgSend(v59, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
  int v61 = (void *)[a2 linkedFunctions];
  objc_msgSend(v59, "setVisibleFunctions:", objc_msgSend(v61, "functions"));
  objc_msgSend(v59, "setVisibleFunctionGroups:", objc_msgSend(v61, "groups"));
  objc_msgSend(v59, "setPrivateVisibleFunctions:", objc_msgSend(v61, "privateFunctions"));
  uint64_t v84 = [a2 maxCallStackDepth];
  std::string v62 = (void *)[a2 linkedFunctions];
  char v63 = [a2 supportIndirectCommandBuffers];
  char v64 = [a2 supportAddingBinaryFunctions];
  uint64_t v65 = [a2 gpuCompilerSPIOptions];
  char v66 = [a3 requiresRaytracingEmulation];
  v135[0] = MEMORY[0x263EF8330];
  v135[1] = 3321888768;
  v135[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke;
  v135[3] = &unk_26F851F28;
  v135[7] = v106;
  v135[4] = v90;
  unsigned __int8 v148 = a9;
  v135[8] = a1;
  v135[9] = v53;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)&v136, (const AGX::Impl::ComputeProgramKey *)v95);
  long long v150 = v152;
  unint64_t v136 = (uint64_t (**)())&unk_26F852F08;
  uint64_t v145 = v105;
  uint64_t v146 = a7;
  unint64_t v147 = v87;
  long long v149 = v151;
  v135[5] = a3;
  v135[6] = a2;
  v93[0] = MEMORY[0x263EF8330];
  v93[1] = 3221225472;
  v93[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_1956;
  v93[3] = &unk_26516F090;
  v93[4] = v135;
  v93[5] = v53;
  char v94 = v86;
  if ((v66 & 1) == 0
    && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v62))
  {
    LOBYTE(buffer_ptr.count[0]) = v66;
    *(void *)buffer_ptr.hash = v84;
    *(void *)&buffer_ptr.hash[2] = v62;
    *(void *)&buffer_ptr.hash[4] = 0;
    *(void *)&buffer_ptr.hash[6] = 0;
    *(void *)buffer_ptr.wbuf = a4;
    *(void *)&buffer_ptr.wbuf[2] = v85;
    *(void *)&buffer_ptr.wbuf[4] = a3;
    *(void *)&buffer_ptr.wbuf[6] = 0;
    LOBYTE(buffer_ptr.wbuf[8]) = v63;
    BYTE1(buffer_ptr.wbuf[8]) = v64;
    *(void *)&buffer_ptr.wbuf[10] = v65;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::ComputeProgramKey,true>(a1, (uint64_t)v95, v59, (long long *)&buffer_ptr, (uint64_t)v93);
  }
  else
  {
    uint64_t v67 = *a1;
    v107[0] = MEMORY[0x263EF8330];
    v107[1] = 3221225472;
    v107[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_17ComputeProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
    v107[3] = &unk_26516F018;
    v107[4] = v93;
    v108[0] = MEMORY[0x263EF8330];
    v108[1] = 3221225472;
    v108[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
    v108[3] = &unk_26516F7C0;
    v108[4] = v107;
    size_t v109 = 0;
    uint64_t v110 = 0;
    (*(void (**)(void *, const void **, size_t *))(v95[0] + 16))(v95, &v110, &v109);
    uint64_t v68 = dispatch_data_create(v110, v109, 0, 0);
    [v59 setDriverKeyData:v68];
    if ([v59 airScript])
    {
      uint64_t v69 = [v59 airScript];
      long long v157 = 0uLL;
      *(void *)&long long v158 = 0;
      *(void *)&long long v157 = dispatch_data_create_map(v69, (const void **)&v157 + 1, (size_t *)&v158);
      uint64_t v70 = *((void *)&v157 + 1);
      uint64_t v71 = **((_DWORD **)&v157 + 1);
      CC_SHA256_Init(&buffer_ptr);
      (*(void (**)(void *, CC_SHA256_CTX *))v95[0])(v95, &buffer_ptr);
      *(void *)leunint64_t n = 0;
      data = 0;
      if (AGX::GetSerializedVertexFormat((AGX *)(v70 + v71), &data, (size_t *)len, v72, v73))
      {
        uint64_t v74 = data;
        CC_SHA256_Update(&buffer_ptr, data, len[0]);
        free(v74);
      }
      CC_SHA256_Final((unsigned __int8 *)&__p, &buffer_ptr);
      dispatch_release((dispatch_object_t)v157);
      long long v157 = __p;
      long long v158 = v154;
      [v59 setVendorPluginFunctionId:&v157];
    }
    *(void *)buffer_ptr.count = MEMORY[0x263EF8330];
    *(void *)buffer_ptr.hash = 3221225472;
    *(void *)&buffer_ptr.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
    *(void *)&buffer_ptr.hash[4] = &unk_26516F810;
    *(void *)&buffer_ptr.hash[6] = v59;
    *(void *)buffer_ptr.wbuf = v108;
    if ([v59 function])
    {
      uint64_t v75 = mach_absolute_time();
      uint64_t v76 = *v67;
      *(void *)&long long __p = MEMORY[0x263EF8330];
      *((void *)&__p + 1) = 3221225472;
      *(void *)&long long v154 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
      *((void *)&v154 + 1) = &unk_26516F860;
      uint64_t v156 = v75;
      p_CC_SHA256_CTX buffer_ptr = &buffer_ptr;
      [v76 compileFunctionRequest:v59 completionHandler:&__p];
    }
    else
    {
      if ([v59 frameworkData] || objc_msgSend(v59, "pipelineOptions")) {
        AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
      }
      *(void *)&long long __p = MEMORY[0x263EF8330];
      *((void *)&__p + 1) = 3221225472;
      *(void *)&long long v154 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
      *((void *)&v154 + 1) = &unk_26516F838;
      p_CC_SHA256_CTX buffer_ptr = &buffer_ptr;
      uint64_t v77 = objc_msgSend((id)objc_msgSend(v59, "binaryArchives"), "count");
      uint64_t v78 = *v67;
      uint64_t v79 = [v59 driverKeyData];
      if (v77) {
        objc_msgSend(v78, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v79, objc_msgSend(v59, "binaryArchives"), 0, objc_msgSend(v59, "pipelineCache"), objc_msgSend(v59, "sync"), &__p);
      }
      else {
        objc_msgSend(v78, "compileRequest:pipelineCache:sync:completionHandler:", v79, objc_msgSend(v59, "pipelineCache"), objc_msgSend(v59, "sync"), &__p);
      }
    }
    dispatch_release(v68);
  }

  unint64_t v136 = (uint64_t (**)())&unk_26F8540D0;
  if (v143)
  {
    long long v144 = v143;
    operator delete(v143);
  }
  if (v141)
  {
    uint64_t v142 = v141;
    operator delete(v141);
  }
  if (v140 < 0) {
    operator delete(v139);
  }
  unint64_t v136 = off_26F852EC8;
  if (v137)
  {
    size_t v138 = v137;
    operator delete(v137);
  }
LABEL_90:
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  int v114 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3;
  unsigned int v115 = &unk_26F851F60;
  uint64_t v118 = a7;
  uint64_t v119 = v53;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)&v120, (const AGX::Impl::ComputeProgramKey *)v95);
  long long v130 = v151;
  unsigned int v120 = (uint64_t (**)())&unk_26F852F08;
  uint64_t v129 = v105;
  long long v131 = v152;
  uint64_t v116 = a10;
  long long v117 = v106;
  uint64_t v80 = *(NSObject **)v53;
  if (a9)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v80, global_queue, block);
  }
  else
  {
    dispatch_group_wait(v80, 0xFFFFFFFFFFFFFFFFLL);
    v114(block);
  }
  unsigned int v120 = (uint64_t (**)())&unk_26F8540D0;
  if (v127)
  {
    uint64_t v128 = v127;
    operator delete(v127);
  }
  if (v125)
  {
    int v126 = v125;
    operator delete(v125);
  }
  if (v124 < 0) {
    operator delete(v123);
  }
  unsigned int v120 = off_26F852EC8;
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  v95[0] = &unk_26F8540D0;
  if (v104[0])
  {
    v104[1] = v104[0];
    operator delete(v104[0]);
  }
  if (v103[0])
  {
    v103[1] = v103[0];
    operator delete(v103[0]);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  v95[0] = off_26F852EC8;
  if (v96)
  {
    unsigned int v97 = v96;
    operator delete(v96);
  }
  _Block_object_dispose(v106, 8);
}

void sub_2429D4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  os_unfair_lock_unlock(v44);
  AGX::ComputeProgramKey::~ComputeProgramKey((AGX::ComputeProgramKey *)&a25);
  _Block_object_dispose(&a44, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, unsigned char *a6)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 248));
  int v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    int v12 = (void *)[v11 objectForKey:*MEMORY[0x263F12630]];
    if (v12) {
      [v12 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  *a4 = *(void *)(a3 + 40);
  *a5 = *(void *)(a3 + 48);
  *a6 = 0;
  uint64_t v13 = *a4;
  if (!*a4)
  {
    if (a2[33])
    {
      int v14 = a2 + 33;
      if (!a2[34]) {
        int v14 = a2 + 103;
      }
      if (!*v14) {
        goto LABEL_15;
      }
    }
    else
    {
      int v14 = a2 + 103;
      if (!a2[103])
      {
LABEL_15:
        if (*(unsigned char *)(a1 + 168)
          && (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 1) & 1) == 0)
        {
          *a4 = 2;
          *a5 = @"Compute function cannot be used with indirect command buffers";
          *a6 = 1;
          uint64_t v13 = *a4;
        }
        else
        {
          uint64_t v13 = 0;
        }
        goto LABEL_19;
      }
    }
    if (v14[1])
    {
      *a4 = 2;
      *a5 = @"Internal error during function compilation";
      *a6 = 1;
      uint64_t v13 = *a4;
      if (*a4) {
        goto LABEL_19;
      }
    }
    goto LABEL_15;
  }
LABEL_19:
  AGX::Program<AGX::HAL200::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 232), *(void *)(a1 + 240), *(NSObject **)(a3 + 16), a1 + 249, *(void **)(a1 + 40), v13);
  [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
  double v15 = (void *)[*(id *)(a1 + 48) profileControl];
  if (v15)
  {
    uint64_t v16 = v15;
    [v15 uscCliqueTraceLevel];
    [v16 uscEmitPosition];
    [v16 uscEmitThreadControlFlow];
  }
  if (!*a4) {
    operator new();
  }
  return 0;
}

void sub_2429D4E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v6 - 97) < 0) {
    operator delete(*(void **)(v6 - 120));
  }
  MEMORY[0x24566ED90](v5, 0x10F3C407204815DLL);
  _Unwind_Resume(a1);
}

AGX::Impl::ComputeProgramKey *AGX::Impl::ComputeProgramKey::ComputeProgramKey(AGX::Impl::ComputeProgramKey *this, const AGX::Impl::ComputeProgramKey *a2)
{
  *(void *)this = off_26F852EC8;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int v4 = (unsigned char *)*((void *)a2 + 3);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v7;
    unint64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)this + 4) = v8;
    memcpy(v7, v5, v6);
    *((void *)this + 3) = v8;
  }
  *(void *)this = &unk_26F8540D0;
  long long v9 = *(_OWORD *)((char *)a2 + 40);
  *((void *)this + 7) = *((void *)a2 + 7);
  *(_OWORD *)((char *)this + 40) = v9;
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v10 = *((_OWORD *)a2 + 4);
    *((void *)this + 10) = *((void *)a2 + 10);
    *((_OWORD *)this + 4) = v10;
  }
  char v11 = *((unsigned char *)a2 + 88);
  *((void *)this + 12) = 0;
  *((unsigned char *)this + 8_Block_object_dispose(&a9, 8) = v11;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  uint64_t v13 = (unsigned char *)*((void *)a2 + 12);
  int v12 = (unsigned char *)*((void *)a2 + 13);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      abort();
    }
    double v15 = (char *)operator new(v12 - v13);
    *((void *)this + 12) = v15;
    *((void *)this + 13) = v15;
    uint64_t v16 = &v15[32 * (v14 >> 5)];
    *((void *)this + 14) = v16;
    memcpy(v15, v13, v14);
    *((void *)this + 13) = v16;
  }
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  uint64_t v18 = (unsigned char *)*((void *)a2 + 15);
  unint64_t v17 = (unsigned char *)*((void *)a2 + 16);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0) {
      abort();
    }
    int v20 = (char *)operator new(v17 - v18);
    *((void *)this + 15) = v20;
    *((void *)this + 16) = v20;
    unsigned __int16 v21 = &v20[32 * (v19 >> 5)];
    *((void *)this + 17) = v21;
    memcpy(v20, v18, v19);
    *((void *)this + 16) = v21;
  }
  return this;
}

void sub_2429D5068(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  int v4 = (void *)v1[2];
  if (v4)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_1956(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  unsigned __int8 v17 = 0;
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  unint64_t v8 = v7;
  if (v7)
  {
    v7[69] = *a4;
    v7[70] = a4[1];
    if (v7 + 69 != a4) {
      std::vector<AGX::HAL200::IntersectionFunctionVariantSet>::__assign_with_size[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet*,AGX::HAL200::IntersectionFunctionVariantSet*>(v7 + 72, a4[3], a4[4], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[4] - a4[3]) >> 4));
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  char v11 = v18;
  uint64_t v10 = v19;
  int v12 = *(void **)(a3 + 32);
  int v13 = *(unsigned __int8 *)(a1 + 48);
  int v14 = v17;
  *(void *)(v9 + _Block_object_dispose(&a9, 8) = v8;
  *(void *)(v9 + 16) = v10;

  *(void *)(v9 + 24) = [v11 copy];
  if (*(void *)(v9 + 8))
  {

    *(void *)(v9 + 32) = v12;
  }
  else
  {
    if (v13) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    char v16 = v15;
    *(unsigned char *)(v9 + 40) = v16;
  }
  dispatch_group_leave(*(dispatch_group_t *)v9);
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::ComputeProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_17ComputeProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  v30[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  uint64_t v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  char v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    int v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      unsigned __int8 v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)unsigned __int32 v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    uint64_t v19 = *v7;
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    unsigned __int16 v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}

void sub_2429D55BC(_Unwind_Exception *a1)
{
  dispatch_release(*(dispatch_object_t *)(v1 - 128));
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_17ComputeProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_2429D5674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  AGX::Program<AGX::HAL200::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 40), *(void *)(a1 + 48), a3, a1 + 64, *(void **)(a1 + 32), a2);
  int v4 = **(NSObject ***)(a1 + 56);

  dispatch_group_leave(v4);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createComputeProgramVariantEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_14ComputeProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_21ComputeProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringE_block_invoke_3(void *a1)
{
  memset(v12, 0, 26);
  uint64_t v2 = a1[7];
  if (!*(unsigned char *)(v2 + 41))
  {
    int64_t v6 = 0;
    goto LABEL_17;
  }
  if (*(void *)(v2 + 8))
  {
    unint64_t v3 = (os_unfair_lock_s *)a1[6];
    int v4 = v3 + 286;
    os_unfair_lock_lock(v3 + 286);
    uint64_t v5 = VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::operator[]((uint64_t)v3, (uint64_t)(a1 + 8));
    if (*(void *)v5)
    {
      os_unfair_lock_unlock(v4);
      dispatch_group_wait(*(dispatch_group_t *)v5, 0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      long long v8 = dispatch_group_create();
      *(void *)uint64_t v5 = v8;
      dispatch_group_enter(v8);
      uint64_t v9 = *(void *)(v2 + 16);
      uint64_t v10 = *(void **)(v2 + 24);
      *(void *)(v5 + _Block_object_dispose(&a9, 8) = *(void *)(v2 + 8);
      *(void *)(v5 + 16) = v9;

      *(void *)(v5 + 24) = objc_msgSend(v10, "copy", (unsigned __int128)0, 0, *(_OWORD *)&v12[8], *(void *)&v12[24]);
      if (*(void *)(v5 + 8))
      {

        *(void *)(v5 + 32) = 0;
      }
      else
      {
        *(unsigned char *)(v5 + 40) = 0;
      }
      dispatch_group_leave(*(dispatch_group_t *)v5);
      *(void *)(v2 + _Block_object_dispose(&a9, 8) = 0;
      os_unfair_lock_unlock(v4);
    }
    int64_t v6 = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  else
  {
    int64_t v6 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0;
    uint64_t v7 = *(NSObject **)v2;
    if (!*(void *)v2) {
      goto LABEL_14;
    }
  }
  dispatch_release(v7);
LABEL_14:
  uint64_t v11 = *(void *)(v2 + 8);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }

  MEMORY[0x24566ED90](v2, 0x10A0C405D73F519);
LABEL_17:
  (*(void (**)(void))(a1[4] + 16))();
}

void sub_2429D5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  os_unfair_lock_unlock(v9);
  AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>::~ProgramVariantEntry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_64c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1)
{
  *(void *)(a1 + 64) = &unk_26F8540D0;
  uint64_t v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(void *)(a1 + 192) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  *(void *)(a1 + 64) = off_26F852EC8;
  int v4 = *(void **)(a1 + 80);
  if (v4)
  {
    *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v4;
    operator delete(v4);
  }
}

AGX::Impl::ComputeProgramKey *__copy_helper_block_e8_64c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 64), (const AGX::Impl::ComputeProgramKey *)(a2 + 64));
  *(void *)(a1 + 64) = &unk_26F852F08;
  *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = *(void *)(a2 + 208);
  return result;
}

uint64_t AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>::~ProgramVariantEntry(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return a1;
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(unsigned int *)(a1 + 816);
  uint64_t v5 = *(void *)(a1 + 808);
  uint64_t v6 = *(unsigned int *)(a2 + 48);
  if (!v4)
  {
    int v11 = *(_DWORD *)(a2 + 52);
    int v10 = *(_DWORD *)(a2 + 56);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 96);
    uint64_t v13 = *(void *)(a2 + 104);
    LOBYTE(v1_Block_object_dispose(&a9, 8) = *(unsigned char *)(a2 + 87);
    long long v8 = *(const void **)(a2 + 64);
    size_t v19 = *(void *)(a2 + 72);
    int v21 = *(unsigned __int8 *)(a2 + 88);
    uint64_t v22 = *(void *)(a2 + 144);
    goto LABEL_35;
  }
  uint64_t v7 = 0;
  uint64_t v9 = (unsigned __int8 *)(a2 + 64);
  long long v8 = *(const void **)(a2 + 64);
  int v11 = *(_DWORD *)(a2 + 52);
  int v10 = *(_DWORD *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 96);
  uint64_t v13 = *(void *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 120);
  uint64_t v16 = *(void *)(a2 + 128);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 87);
  int v18 = (char)v17;
  size_t v19 = *(void *)(a2 + 72);
  if ((v17 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    uint64_t v20 = *(void *)(a2 + 72);
  }
  int v21 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v22 = *(void *)(a2 + 144);
  do
  {
    uint64_t v24 = v5 + 152 * v7;
    if (v10 != *(_DWORD *)(v24 + 56) || v11 != *(_DWORD *)(v24 + 52) || v12 != *(void *)(v24 + 40)) {
      goto LABEL_8;
    }
    BOOL v25 = v6 == *(_DWORD *)(v24 + 48) && v13 == v14;
    if (!v25 || v16 != v15) {
      goto LABEL_8;
    }
    uint64_t v27 = *(unsigned __int8 *)(v24 + 87);
    int v28 = (char)v27;
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *(void *)(v24 + 72);
    }
    if (v20 != v27) {
      goto LABEL_8;
    }
    if (v28 >= 0) {
      uint64_t v29 = (unsigned __int8 *)(v24 + 64);
    }
    else {
      uint64_t v29 = *(unsigned __int8 **)(v24 + 64);
    }
    if (v18 < 0)
    {
      uint64_t v91 = v22;
      unsigned int v90 = v6;
      uint64_t v95 = v12;
      int v93 = v21;
      size_t v88 = v19;
      unint64_t v89 = v8;
      uint64_t v86 = v16;
      uint64_t v87 = v13;
      uint64_t v84 = v17;
      uint64_t v85 = v15;
      uint64_t v83 = v20;
      int v23 = memcmp(v8, v29, v19);
      uint64_t v20 = v83;
      uint64_t v17 = v84;
      uint64_t v15 = v85;
      uint64_t v16 = v86;
      uint64_t v13 = v87;
      size_t v19 = v88;
      long long v8 = v89;
      uint64_t v22 = v91;
      int v21 = v93;
      uint64_t v12 = v95;
      uint64_t v6 = v90;
      if (v23) {
        goto LABEL_8;
      }
    }
    else if (v18)
    {
      int v30 = v9;
      uint64_t v31 = v17;
      while (*v30 == *v29)
      {
        ++v30;
        ++v29;
        if (!--v31) {
          goto LABEL_31;
        }
      }
      goto LABEL_8;
    }
LABEL_31:
    if (v21 == *(unsigned __int8 *)(v24 + 88) && v22 == *(void *)(v5 + 152 * v7 + 144))
    {
      uint64_t v32 = v5 + 48 * v7;
      return v32 + 608;
    }
LABEL_8:
    ++v7;
  }
  while (v7 != v4);
  uint64_t v3 = a1;
  uint64_t v2 = a2;
LABEL_35:
  unint64_t v100 = (std::string *)(v2 + 64);
  if ((v18 & 0x80u) == 0) {
    size_t v33 = v18;
  }
  else {
    size_t v33 = v19;
  }
  if (v13 == v14 && *(void *)(v2 + 128) == *(void *)(v2 + 120))
  {
    uint64_t v34 = *(void *)(v5 + 800);
    if ((v18 & 0x80) == 0)
    {
      if (v34)
      {
        unsigned int v35 = 1;
        while (1)
        {
          if (v10 == *(_DWORD *)(v34 + 56)
            && v11 == *(_DWORD *)(v34 + 52)
            && v12 == *(void *)(v34 + 40)
            && v6 == *(_DWORD *)(v34 + 48))
          {
            uint64_t v36 = *(unsigned __int8 *)(v34 + 87);
            int v37 = (char)v36;
            if ((v36 & 0x80u) != 0) {
              uint64_t v36 = *(void *)(v34 + 72);
            }
            if (v33 == v36)
            {
              if ((_BYTE)v18)
              {
                if (v37 >= 0) {
                  uint64_t v38 = (unsigned __int8 *)(v34 + 64);
                }
                else {
                  uint64_t v38 = *(unsigned __int8 **)(v34 + 64);
                }
                uint64_t v39 = (unsigned __int8 *)(v2 + 64);
                uint64_t v40 = v18;
                while (*v39 == *v38)
                {
                  ++v39;
                  ++v38;
                  if (!--v40) {
                    goto LABEL_58;
                  }
                }
              }
              else
              {
LABEL_58:
                if (v21 == *(unsigned __int8 *)(v34 + 88) && v22 == *(void *)(v34 + 144)) {
                  goto LABEL_172;
                }
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 208)
            && v11 == *(_DWORD *)(v34 + 204)
            && v12 == *(void *)(v34 + 192)
            && v6 == *(_DWORD *)(v34 + 200))
          {
            uint64_t v41 = *(unsigned __int8 *)(v34 + 239);
            int v42 = (char)v41;
            if ((v41 & 0x80u) != 0) {
              uint64_t v41 = *(void *)(v34 + 224);
            }
            if (v33 == v41)
            {
              if ((_BYTE)v18)
              {
                if (v42 >= 0) {
                  uint64_t v43 = (unsigned __int8 *)(v34 + 216);
                }
                else {
                  uint64_t v43 = *(unsigned __int8 **)(v34 + 216);
                }
                uint64_t v44 = (unsigned __int8 *)(v2 + 64);
                uint64_t v45 = v18;
                while (*v44 == *v43)
                {
                  ++v44;
                  ++v43;
                  if (!--v45) {
                    goto LABEL_74;
                  }
                }
              }
              else
              {
LABEL_74:
                if (v21 == *(unsigned __int8 *)(v34 + 240) && v22 == *(void *)(v34 + 296)) {
                  goto LABEL_175;
                }
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 360)
            && v11 == *(_DWORD *)(v34 + 356)
            && v12 == *(void *)(v34 + 344)
            && v6 == *(_DWORD *)(v34 + 352))
          {
            uint64_t v46 = *(unsigned __int8 *)(v34 + 391);
            int v47 = (char)v46;
            if ((v46 & 0x80u) != 0) {
              uint64_t v46 = *(void *)(v34 + 376);
            }
            if (v33 == v46)
            {
              if ((_BYTE)v18)
              {
                if (v47 >= 0) {
                  long long v48 = (unsigned __int8 *)(v34 + 368);
                }
                else {
                  long long v48 = *(unsigned __int8 **)(v34 + 368);
                }
                uint64_t v49 = (unsigned __int8 *)(v2 + 64);
                uint64_t v50 = v18;
                while (*v49 == *v48)
                {
                  ++v49;
                  ++v48;
                  if (!--v50) {
                    goto LABEL_90;
                  }
                }
              }
              else
              {
LABEL_90:
                if (v21 == *(unsigned __int8 *)(v34 + 392) && v22 == *(void *)(v34 + 448)) {
                  goto LABEL_173;
                }
              }
            }
          }
          if (v10 == *(_DWORD *)(v34 + 512)
            && v11 == *(_DWORD *)(v34 + 508)
            && v12 == *(void *)(v34 + 496)
            && v6 == *(_DWORD *)(v34 + 504))
          {
            uint64_t v51 = *(unsigned __int8 *)(v34 + 543);
            int v52 = (char)v51;
            if ((v51 & 0x80u) != 0) {
              uint64_t v51 = *(void *)(v34 + 528);
            }
            if (v33 == v51)
            {
              if ((_BYTE)v18)
              {
                if (v52 >= 0) {
                  uint64_t v53 = (unsigned __int8 *)(v34 + 520);
                }
                else {
                  uint64_t v53 = *(unsigned __int8 **)(v34 + 520);
                }
                uint64_t v54 = (unsigned __int8 *)(v2 + 64);
                uint64_t v55 = v18;
                while (*v54 == *v53)
                {
                  ++v54;
                  ++v53;
                  if (!--v55) {
                    goto LABEL_106;
                  }
                }
              }
              else
              {
LABEL_106:
                if (v21 == *(unsigned __int8 *)(v34 + 544) && v22 == *(void *)(v34 + 600)) {
                  goto LABEL_164;
                }
              }
            }
          }
          uint64_t v34 = *(void *)(v34 + 800);
          if (!v34) {
            goto LABEL_165;
          }
        }
      }
      goto LABEL_165;
    }
    if (!v34) {
      goto LABEL_165;
    }
    uint64_t v96 = v12;
    size_t v98 = v33;
    int v94 = v21;
    uint64_t v92 = v22;
    uint64_t v56 = v8;
    size_t v57 = v19;
    while (1)
    {
      if (v10 == *(_DWORD *)(v34 + 56)
        && v11 == *(_DWORD *)(v34 + 52)
        && v12 == *(void *)(v34 + 40)
        && v6 == *(_DWORD *)(v34 + 48))
      {
        uint64_t v58 = *(unsigned __int8 *)(v34 + 87);
        int v59 = (char)v58;
        if ((v58 & 0x80u) != 0) {
          uint64_t v58 = *(void *)(v34 + 72);
        }
        if (v33 == v58)
        {
          unint64_t v60 = v59 >= 0 ? (const void *)(v34 + 64) : *(const void **)(v34 + 64);
          uint64_t v61 = v6;
          int v62 = memcmp(v8, v60, v19);
          size_t v19 = v57;
          long long v8 = v56;
          uint64_t v12 = v96;
          size_t v33 = v98;
          uint64_t v6 = v61;
          if (!v62 && v94 == *(unsigned __int8 *)(v34 + 88) && v92 == *(void *)(v34 + 144))
          {
LABEL_172:
            unsigned int v35 = 0;
            goto LABEL_175;
          }
        }
      }
      if (v10 == *(_DWORD *)(v34 + 208)
        && v11 == *(_DWORD *)(v34 + 204)
        && v12 == *(void *)(v34 + 192)
        && v6 == *(_DWORD *)(v34 + 200))
      {
        uint64_t v63 = *(unsigned __int8 *)(v34 + 239);
        int v64 = (char)v63;
        if ((v63 & 0x80u) != 0) {
          uint64_t v63 = *(void *)(v34 + 224);
        }
        if (v33 == v63)
        {
          uint64_t v65 = v64 >= 0 ? (const void *)(v34 + 216) : *(const void **)(v34 + 216);
          uint64_t v66 = v6;
          int v67 = memcmp(v8, v65, v19);
          size_t v19 = v57;
          long long v8 = v56;
          uint64_t v12 = v96;
          size_t v33 = v98;
          uint64_t v6 = v66;
          if (!v67 && v94 == *(unsigned __int8 *)(v34 + 240) && v92 == *(void *)(v34 + 296)) {
            break;
          }
        }
      }
      if (v10 == *(_DWORD *)(v34 + 360)
        && v11 == *(_DWORD *)(v34 + 356)
        && v12 == *(void *)(v34 + 344)
        && v6 == *(_DWORD *)(v34 + 352))
      {
        uint64_t v68 = *(unsigned __int8 *)(v34 + 391);
        int v69 = (char)v68;
        if ((v68 & 0x80u) != 0) {
          uint64_t v68 = *(void *)(v34 + 376);
        }
        if (v33 == v68)
        {
          uint64_t v70 = v69 >= 0 ? (const void *)(v34 + 368) : *(const void **)(v34 + 368);
          uint64_t v71 = v6;
          int v72 = memcmp(v8, v70, v19);
          size_t v19 = v57;
          long long v8 = v56;
          uint64_t v12 = v96;
          size_t v33 = v98;
          uint64_t v6 = v71;
          if (!v72 && v94 == *(unsigned __int8 *)(v34 + 392) && v92 == *(void *)(v34 + 448))
          {
LABEL_173:
            unsigned int v35 = 2;
            goto LABEL_175;
          }
        }
      }
      if (v10 == *(_DWORD *)(v34 + 512)
        && v11 == *(_DWORD *)(v34 + 508)
        && v12 == *(void *)(v34 + 496)
        && v6 == *(_DWORD *)(v34 + 504))
      {
        uint64_t v73 = *(unsigned __int8 *)(v34 + 543);
        int v74 = (char)v73;
        if ((v73 & 0x80u) != 0) {
          uint64_t v73 = *(void *)(v34 + 528);
        }
        if (v33 == v73)
        {
          uint64_t v75 = v74 >= 0 ? (const void *)(v34 + 520) : *(const void **)(v34 + 520);
          uint64_t v76 = v6;
          int v77 = memcmp(v8, v75, v19);
          size_t v19 = v57;
          long long v8 = v56;
          uint64_t v12 = v96;
          size_t v33 = v98;
          uint64_t v6 = v76;
          if (!v77 && v94 == *(unsigned __int8 *)(v34 + 544) && v92 == *(void *)(v34 + 600))
          {
LABEL_164:
            unsigned int v35 = 3;
            goto LABEL_175;
          }
        }
      }
      uint64_t v34 = *(void *)(v34 + 800);
      if (!v34) {
        goto LABEL_165;
      }
    }
    unsigned int v35 = 1;
LABEL_175:
    uint64_t v32 = v34 + 48 * v35;
  }
  else
  {
LABEL_165:
    if (v4 == 4) {
      operator new();
    }
    uint64_t v78 = v5 + 152 * v4;
    *(_DWORD *)(v78 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(v2 + 8);
    if (v78 == v2)
    {
      std::string::operator=(v100, v100);
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v78 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 2);
      long long v79 = *(_OWORD *)(v2 + 40);
      *(_DWORD *)(v78 + 56) = *(_DWORD *)(v2 + 56);
      *(_OWORD *)(v78 + 40) = v79;
      std::string::operator=((std::string *)(v78 + 64), v100);
      *(unsigned char *)(v78 + 8_Block_object_dispose(&a9, 8) = *(unsigned char *)(v2 + 88);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v78 + 96), *(char **)(v2 + 96), *(char **)(v2 + 104), (uint64_t)(*(void *)(v2 + 104) - *(void *)(v2 + 96)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v78 + 120), *(char **)(v2 + 120), *(char **)(v2 + 128), (uint64_t)(*(void *)(v2 + 128) - *(void *)(v2 + 120)) >> 5);
    }
    *(void *)(v5 + 152 * v4 + 144) = *(void *)(v2 + 144);
    uint64_t v80 = *(void *)(v3 + 808);
    unsigned int v81 = *(_DWORD *)(v3 + 816);
    *(_DWORD *)(v3 + 816) = v81 + 1;
    uint64_t v32 = v80 + 48 * v81;
  }
  return v32 + 608;
}

void sub_2429D6310(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B2C4095AF869BLL);
  _Unwind_Resume(a1);
}

uint64_t VectorMap<AGX::ComputeProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::ComputeProgramVariant>,4u>::Chunk::Chunk(uint64_t a1)
{
  uint64_t v2 = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)a1);
  *(void *)uint64_t v2 = &unk_26F852F08;
  *((void *)v2 + 1_Block_object_dispose(&a9, 8) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)((char *)v2 + 152));
  *(void *)(a1 + 152) = &unk_26F852F08;
  *(void *)(a1 + 296) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 304));
  *(void *)(a1 + 304) = &unk_26F852F08;
  *(void *)(a1 + 44_Block_object_dispose(&a9, 8) = 0;
  AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 456));
  *(void *)(a1 + 456) = &unk_26F852F08;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 682) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 730) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 76_Block_object_dispose(&a9, 8) = 0u;
  *(_OWORD *)(a1 + 77_Block_object_dispose(&a9, 8) = 0u;
  *(_WORD *)(a1 + 64_Block_object_dispose(&a9, 8) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  return a1;
}

void sub_2429D6438(_Unwind_Exception *exception_object)
{
  uint64_t v4 = v2 - 152;
  uint64_t v5 = v2;
  while (1)
  {
    *(void *)(v5 - 152) = &unk_26F8540D0;
    v5 -= 152;
    uint64_t v6 = *(void **)(v5 + 120);
    if (v6)
    {
      *(void *)(v2 - 24) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(v2 - 56);
    if (v7)
    {
      *(void *)(v2 - 4_Block_object_dispose(&a9, 8) = v7;
      operator delete(v7);
    }
    if (*(char *)(v2 - 65) < 0) {
      operator delete(*(void **)(v2 - 88));
    }
    *(void *)(v2 - 152) = off_26F852EC8;
    long long v8 = *(void **)(v2 - 136);
    if (v8)
    {
      *(void *)(v2 - 12_Block_object_dispose(&a9, 8) = v8;
      operator delete(v8);
    }
    v4 -= 152;
    uint64_t v2 = v5;
    if (v5 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void AGX::Program<AGX::HAL200::ComputeProgramVariant,AGX::ComputeProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    locuint64_t k = (os_unfair_lock_s *)(a1 + 1144);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1144));
    uint64_t v13 = *(void **)(a1 + 1104);
    uint64_t v14 = *(unsigned int *)(a1 + 1112);
    uint64_t v15 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v13, *(_DWORD *)(a1 + 1112), (void *)a4);
    uint64_t v16 = (void *)v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *uint64_t v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v14 == 4) {
        operator new();
      }
      int v18 = &v13[4 * v14];
      long long v19 = *(_OWORD *)(a4 + 16);
      _OWORD *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      uint64_t v20 = *(void *)(a1 + 1104);
      unsigned int v21 = *(_DWORD *)(a1 + 1112);
      *(_DWORD *)(a1 + 1112) = v21 + 1;
      uint64_t v16 = (void *)(v20 + 24 * v21 + 128);
      uint64_t v17 = *(void *)(v20 + 24 * v21 + 136);
      if (a6) {
        goto LABEL_4;
      }
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v22 = v16[2];
      if (v22) {
        dispatch_release(v22);
      }
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2176))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      int v30 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:3 options:a2 | 0x8000];
      int v23 = (void *)[v30 arguments];
      uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v33 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v27 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (![v27 type]
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              int v28 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              uint64_t v29 = v28[2];
              v28[2] = 0;
              *(void *)(a1 + 8 * [v27 index] + 1152) = v29;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v24);
      }

      *(unsigned char *)(a1 + 2176) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429D6784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  CC_SHA256_CTX buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429D6A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_17ComputeProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke(uint64_t a1, void *a2, int8x16_t *a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 48);
  int8x16_t v29 = vextq_s8(a3[1], a3[1], 8uLL);
  uint64_t v7 = a3[2].i64[1];
  v30.i64[0] = a3[2].i64[0];
  v30.i64[1] = v7;
  v31.i64[0] = a3[3].i64[0];
  long long v8 = *(void **)(a1 + 72);
  uint64_t v33 = v7;
  uint64_t v34 = v31.i64[0];
  int v35 = 0;
  uint64_t v37 = 0;
  long long v36 = 0uLL;
  if (!v7)
  {
    v28[0] = &v29;
    v28[1] = a2;
    v28[2] = a1 + 80;
    v28[3] = v6;
    v28[4] = &v33;
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 functions]);
    AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createAirLinkedIntersectionVariantSets(AGCReplyArray const&,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionReplyMetadata const&,MTLLinkedFunctions *,AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::IntersectionDescriptorContext const&,unsigned int)::{lambda(NSArray<objc_object  {objcproto11MTLFunction}*> *)#1}::operator()((uint64_t)v28, (void *)[v8 privateFunctions]);
  }
  int8x16_t v9 = a3[1];
  int8x16_t v29 = *a3;
  int8x16_t v30 = v9;
  int8x16_t v10 = a3[3];
  int8x16_t v31 = a3[2];
  int8x16_t v32 = v10;
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v28);
  if (!v31.i64[1])
  {
    uint64_t v11 = (void *)[*(id *)(a1 + 32) function];
    if (!AGCReplyArray::getDeserializedReplyWithName<AGCDeserializedReply>(a2, (char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String"), (AGCDeserializedReply *)v28))
    {
      uint64_t v12 = (FILE *)*MEMORY[0x263EF8348];
      uint64_t v13 = (const char *)objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
      AGCReplyArray::getDebugStringAvailableNames((std::string *)buf, a2);
      if (buf[23] >= 0) {
        uint64_t v14 = buf;
      }
      else {
        uint64_t v14 = *(const char **)buf;
      }
      fprintf(v12, "AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", "agxa_user_shader_factory_template.hpp", 82, "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke", v13, v14);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v25;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v26;
        _os_log_error_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_ERROR, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = objc_msgSend((id)objc_msgSend(v11, "name"), "UTF8String");
        AGCReplyArray::getDebugStringAvailableNames(&__p, a2);
        uint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316162;
        *(void *)&buf[4] = "agxa_user_shader_factory_template.hpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "compileFunctionWithAirLinkedIntersectionFunction_Impl_block_invoke";
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v15;
        *(_WORD *)&buf[38] = 2080;
        uint64_t v39 = v16;
        _os_log_impl(&dword_2427AD000, &_os_log_internal, OS_LOG_TYPE_INFO, "AGX: AGX: %s:%d:%s: *** Failed to find compiler reply with function name \"%s\". The available function names in the reply array are: %s.\n", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      v31.i64[1] = 2;
      v32.i64[0] = @"Internal error during function compilation.";
    }
  }
  uint64_t v17 = v33;
  uint64_t v18 = v34;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  *(void *)buf = v17;
  *(void *)&buf[8] = v18;
  *(_OWORD *)&buf[24] = v36;
  long long v36 = 0uLL;
  *(void *)&buf[16] = 0;
  uint64_t v39 = v37;
  uint64_t v37 = 0;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v19 = *(void *)&buf[24];
  if (*(void *)&buf[24])
  {
    uint64_t v20 = *(void *)&buf[32];
    uint64_t v21 = *(void **)&buf[24];
    if (*(void *)&buf[32] != *(void *)&buf[24])
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v20 - 24));

        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - _Block_object_dispose(&a9, 8) = 0;
        v20 -= 80;
      }
      while (v20 != v19);
      uint64_t v21 = *(void **)&buf[24];
    }
    *(void *)&buf[32] = v19;
    operator delete(v21);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v28);
  uint64_t v22 = v36;
  if ((void)v36)
  {
    uint64_t v23 = *((void *)&v36 + 1);
    uint64_t v24 = (void *)v36;
    if (*((void *)&v36 + 1) != (void)v36)
    {
      do
      {
        dispatch_release(*(dispatch_object_t *)(v23 - 24));

        *(void *)(v23 - 16) = 0;
        *(void *)(v23 - _Block_object_dispose(&a9, 8) = 0;
        v23 -= 80;
      }
      while (v23 != v22);
      uint64_t v24 = (void *)v36;
    }
    *((void *)&v36 + 1) = v22;
    operator delete(v24);
  }
}

void sub_2429D6E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::DriverReplyDataImpl<true>::~DriverReplyDataImpl(v9 - 192);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v11[0] = a3;
  v11[1] = a4;
  void v11[2] = a5;
  v11[3] = a6;
  v11[4] = a7;
  v11[5] = a8;
  v11[6] = a9;
  v11[7] = a10;
  return (*(uint64_t (**)(void, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2, v11, a4, a5, a6, a7, a8);
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  int8x16_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_17ComputeProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  CC_SHA256_CTX buffer_ptr = 0;
  uint64_t v2 = a1[12];
  v13[0] = 0;
  v13[1] = 0;
  *(_OWORD *)long long v8 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  uint64_t v11 = 0;
  uint64_t v12 = v13;
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCReplyArray::deserialize((AGCReplyArray *)v8, buffer_ptr);
  }
  (*(void (**)(void, void **))(a1[11] + 16))(a1[11], v8);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v5 = (void **)v8[0];
  uint64_t v6 = (void **)v8[1];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    free(v7);
  }
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v13[0]);
  if (__p[1])
  {
    *(void **)&long long v10 = __p[1];
    operator delete(__p[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_2429D71EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCReplyArray::~AGCReplyArray((AGCReplyArray *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_80c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1)
{
  *(void *)(a1 + 80) = &unk_26F8540D0;
  uint64_t v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(void *)(a1 + 20_Block_object_dispose(&a9, 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3)
  {
    *(void *)(a1 + 184) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  *(void *)(a1 + 80) = off_26F852EC8;
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
}

AGX::Impl::ComputeProgramKey *__copy_helper_block_e8_80c29_ZTSN3AGX17ComputeProgramKeyE(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGX::Impl::ComputeProgramKey::ComputeProgramKey((AGX::Impl::ComputeProgramKey *)(a1 + 80), (const AGX::Impl::ComputeProgramKey *)(a2 + 80));
  *(void *)(a1 + 80) = &unk_26F852F08;
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return result;
}

double ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE37createFastIntegerDivideBufferIfNeededEP18AGXG17FamilyDevice_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFastIntegerDivideBufferIfNeeded(AGXG17FamilyDevice *)::fast_integer_divide_buffer_status = 1;
  id v2 = [(AGXBuffer *)[AGXG17FamilyBuffer alloc] initUntrackedInternalBufferWithDevice:*(void *)(a1 + 32) length:0x2000 options:0];
  *(void *)(v1 + 7880) = v2;
  uint64_t v3 = (void *)[v2 contents];
  *uint64_t v3 = 0xFFFFFFFFLL;
  uint64_t v4 = (unsigned int *)v3 + 3;
  for (unint64_t i = 3; i != 1025; i += 2)
  {
    unsigned int v6 = __clz(i - 2);
    unsigned int v7 = __clz(i - 1);
    v4[1] = (i - 1 + (1 << (v7 ^ 0x3F))) / i - 1;
    v4[2] = v7 ^ 0x1F;
    *(v4 - 1) = (i - 2 + (1 << (v6 ^ 0x3F))) / (i - 1) - 1;
    *uint64_t v4 = v6 ^ 0x1F;
    v4 += 4;
  }
  *(void *)&double result = 0x97FFFFFFFLL;
  v3[1023] = 0x97FFFFFFFLL;
  return result;
}

void __destroy_helper_block_e8_96c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1)
{
}

id __copy_helper_block_e8_96c83_ZTS19RetainedObjCPointerIP7NSArrayIPU28objcproto17MTLDynamicLibrary11objc_objectEE(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 96);
  *(void *)(a1 + 96) = result;
  return result;
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE21createComputePipelineEP28MTLComputePipelineDescriptorP18AGXG17FamilyDevicemPP28MTLComputePipelineReflectionPP7NSErrorU13block_pointerFvPU34objcproto23MTLComputePipelineState11objc_objectSB_SE_E_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setDebugInstrumentationData:a2];
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createRenderPipeline<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v22[11] = *(id *)MEMORY[0x263EF8340];
  mach_absolute_time();
  _MTLCompilePerformanceStatisticsEnabled();
  if (a6)
  {
    *a6 = 0;
    if (a2)
    {
      v22[0] = 0;
      if (![a2 validateWithDevice:a3 error:v22])
      {
        uint64_t v11 = [v22[0] localizedDescription];
        uint64_t v12 = [NSDictionary dictionaryWithObject:v11 forKey:*MEMORY[0x263F08320]];
        id v13 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v12];
        if (!a7)
        {
          *a6 = v13;
          return 0;
        }
LABEL_5:
        (*(void (**)(uint64_t, void, void, id))(a7 + 16))(a7, 0, 0, v13);
        return 0;
      }
      goto LABEL_8;
    }
    uint64_t v14 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
    id v15 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v14];
    id v16 = v15;
    if (!a7)
    {
      *a6 = v15;
      return a7;
    }
LABEL_15:
    (*(void (**)(uint64_t, void, void, id))(a7 + 16))(a7, 0, 0, v16);
    return 0;
  }
  if (a2)
  {
    v22[0] = 0;
    if (![a2 validateWithDevice:a3 error:v22])
    {
      uint64_t v19 = [v22[0] localizedDescription];
      uint64_t v20 = [NSDictionary dictionaryWithObject:v19 forKey:*MEMORY[0x263F08320]];
      id v13 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v20];
      if (!a7) {
        return 0;
      }
      goto LABEL_5;
    }
LABEL_8:
    if (a7) {
      [a2 copy];
    }
    v22[6] = 0;
    operator new();
  }
  uint64_t v17 = [NSDictionary dictionaryWithObject:@"pipeline descriptor is nil" forKey:*MEMORY[0x263F08320]];
  id v18 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:2 userInfo:v17];
  if (a7)
  {
    id v16 = v18;
    goto LABEL_15;
  }
  return a7;
}

void sub_2429D7C3C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateRenderPipelineDescriptorInfo<MTLRenderPipelineDescriptor>(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, void *a5, uint64_t a6)
{
  *a2 = [a3 fragmentFunction];
  a2[1] = [a3 vertexFunction];
  a2[3] = [a3 objectFunction];
  uint64_t v12 = [a3 meshFunction];
  a2[2] = v12;
  if (v12)
  {
    uint64_t v13 = [a3 newSerializedMeshDataWithFlags:540 options:0 error:a6];
    uint64_t v14 = a2[10];
    if (v14 != v13)
    {
      if (v14) {
        dispatch_release(v14);
      }
      a2[10] = v13;
    }
    if (!v13) {
      return 0;
    }
    uint64_t v15 = [a3 newSerializedObjectDataWithFlags:540 options:0 error:a6];
    id v16 = a2[11];
    if (v16 != v15)
    {
      if (v16) {
        dispatch_release(v16);
      }
      a2[11] = v15;
    }
    if (!v15) {
      return 0;
    }
  }
  else
  {
    uint64_t v17 = [a3 newSerializedVertexDataWithFlags:540 options:a4 error:a6];
    id v18 = a2[9];
    if (v18 != v17)
    {
      if (v18) {
        dispatch_release(v18);
      }
      a2[9] = v17;
    }
    if (!v17) {
      return 0;
    }
  }
  uint64_t v19 = [a3 newSerializedFragmentDataWithFlags:540 options:a4];
  uint64_t v20 = a2[8];
  if (v20 != v19)
  {
    if (v20) {
      dispatch_release(v20);
    }
    a2[8] = v19;
  }
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v30, a5, *a2, (void *)[a3 fragmentLinkedFunctions], objc_msgSend(a3, "fragmentPreloadedLibraries"), a6);
  uint64_t v21 = (void *)a2[12];
  a2[12] = v30;

  if (a2[12])
  {
    uint64_t v22 = a2[1];
    if (!v22
      || (AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v30, a5, v22, (void *)[a3 vertexLinkedFunctions], objc_msgSend(a3, "vertexPreloadedLibraries"), a6), uint64_t v23 = (void *)a2[13], a2[13] = v30, v23, a2[13]))
    {
      uint64_t v24 = a2[2];
      if (!v24) {
        goto LABEL_28;
      }
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v30, a5, v24, (void *)[a3 meshLinkedFunctions], objc_msgSend(a3, "meshPreloadedLibraries"), a6);
      uint64_t v25 = (void *)a2[14];
      a2[14] = v30;

      if (a2[14])
      {
        AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::loadDynamicLibrariesForFunctions(&v30, a5, a2[3], (void *)[a3 objectLinkedFunctions], objc_msgSend(a3, "objectPreloadedLibraries"), a6);
        uint64_t v26 = (void *)a2[15];
        a2[15] = v30;

        if (a2[15])
        {
LABEL_28:
          uint64_t v27 = *(NSObject **)(a1 + 16);
          v29[0] = MEMORY[0x263EF8330];
          v29[1] = 3221225472;
          _OWORD v29[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36populateRenderPipelineDescriptorInfoI27MTLRenderPipelineDescriptorEEbRNS5_28RenderPipelineDescriptorInfoEPT_mP18AGXG17FamilyDeviceRP7NSError_block_invoke;
          v29[3] = &__block_descriptor_40_e5_v8__0l;
          v29[4] = a2;
          dispatch_sync(v27, v29);
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(uint64_t a1)
{
  id v2 = *(NSObject **)(a1 + 88);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 80);
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(NSObject **)(a1 + 64);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v15 = v9;
  if (v8)
  {
    uint64_t v10 = AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::RenderPipelineDescriptorInfo::~RenderPipelineDescriptorInfo(v8);
    MEMORY[0x24566ED90](v10, 0xA0C402B819244);
  }
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = a2;
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    uint64_t v12 = v11[19];
    if (v12 && v11[18] && *(unsigned char *)(v12 + 3568)) {
      ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::clone();
    }
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLRenderPipelineDescriptor>((uint64_t)(v11 + 18), *(void **)(a1 + 32), v11, *(void **)(a1 + 40));
  }
  if (([*(id *)(a1 + 32) requiresRaytracingEmulation] & 1) == 0
    && a2
    && !a4
    && [*(id *)(a1 + 40) supportIndirectCommandBuffers])
  {
    AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v15 + 24), (unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) + 2952));
  }
  uint64_t v13 = *(void *)(a1 + 48);
  if (v13)
  {
    (*(void (**)(uint64_t, void *, void *, uint64_t))(v13 + 16))(v13, a2, a3, a4);

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = 0;
  }
  uint64_t v14 = *(void **)(a1 + 80);
  if (v14) {
    void *v14 = a4;
  }
  if (*(void *)(a1 + 88)) {
    **(void **)(a1 + 8_Block_object_dispose(&a9, 8) = a3;
  }
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,false>(void ***a1, void *a2, uint64_t a3, long long *a4, void *a5, MTLRenderPipelineDescriptor *a6, unint64_t a7, unsigned __int8 a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a2[2])
  {
    uint64_t v14 = (void *)a2[14];
    uint64_t v15 = (os_unfair_lock_s *)a2[6];
    id v16 = a2[10];
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 3221225472;
    v27[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke;
    v27[3] = &unk_26516EBB0;
    v27[4] = a6;
    v27[5] = a5;
    v27[10] = a7;
    v27[11] = a2;
    unsigned __int8 v28 = a8;
    long long v17 = *a4;
    long long v30 = a4[1];
    long long v29 = v17;
    char v31 = a9;
    v27[12] = a3;
    v27[13] = a10;
    v27[6] = 0;
    v27[7] = a11;
    v27[8] = a12;
    v27[9] = a1;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramVariant<MTLRenderPipelineDescriptor>(a1, a6, a5, a7, 0, 0, v14, v15, a3, v16, a8, (uint64_t)v27);
  }
  else
  {
    id v18 = (void *)a2[13];
    uint64_t v19 = a2[5];
    uint64_t v20 = a2[9];
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 3221225472;
    long long v21 = a4[1];
    long long v23 = *a4;
    v22[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE34createGeometryStageAndLinkPipelineI27MTLRenderPipelineDescriptorLb0EEEvPKNS5_28RenderPipelineDescriptorInfoEPNS1_22FragmentProgramVariantE13ReflectionKeyP18AGXG17FamilyDevicePT_mbbyP19NSMutableDictionaryP25AGXG17FamilyBinaryArchivePU27objcproto16OS_dispatch_data8NSObjectU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectP27MTLRenderPipelineReflectionP7NSErrorE_block_invoke_3;
    v22[3] = &unk_26516EC00;
    v22[8] = a1;
    v22[9] = a2;
    long long v24 = v21;
    v22[4] = a5;
    v22[5] = a6;
    v22[10] = a3;
    v22[11] = a7;
    unsigned __int8 v25 = a8;
    char v26 = a9;
    v22[12] = a10;
    v22[6] = a11;
    v22[7] = a12;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createVertexProgramVariant(a1, a6, a5, a7, 0, v18, v19, a3, v20, 0, a8, (uint64_t)v22);
  }
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  unsigned int v6 = *(void ****)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  unsigned int v7 = *(void **)(a1 + 72);
  uint64_t v8 = (void *)v7[12];
  uint64_t v9 = (os_unfair_lock_s *)v7[4];
  uint64_t v10 = v7[8];
  unsigned __int8 v11 = *(unsigned char *)(a1 + 96);
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 3221225472;
  v13[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3;
  v13[3] = &unk_26516EB38;
  v13[4] = v4;
  v13[5] = v3;
  v13[8] = v7;
  v13[9] = v5;
  unsigned __int8 v14 = v11;
  char v15 = *(unsigned char *)(a1 + 97);
  void v13[6] = *(void *)(a1 + 48);
  v13[7] = v6;
  uint64_t v12 = *(void *)(a1 + 88);
  v13[10] = *(void *)(a1 + 80);
  v13[11] = v12;
  AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(v6, v3, v4, v5, 0, v8, v9, a2, v10, v11, (uint64_t)v13);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createMeshProgramAnalysis<MTLRenderPipelineDescriptor>(void ***a1, void *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, NSObject *a6, int a7, uint64_t a8)
{
  v47[0] = 0;
  v47[1] = v47;
  v47[2] = 0x2020000000;
  v47[3] = 0;
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)v44, a6, 1, 0, (uint64_t)v48, 0, 0, 0);
  AGX::MeshProgramKey::initCommon<MTLRenderPipelineDescriptor>((uint64_t)v44, a2);
  unsigned int v16 = v45 & 0xFFFFFF7F;
  v45 &= ~0x80u;
  uint64_t v46 = a4 & 0xC00C0000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v17 = 1;
    unsigned int v16 = v45;
  }
  else
  {
    int v17 = 0;
  }
  unsigned int v45 = v17 | (a4 >> 21) & 8 | v16 & 0xFFFFFFF4;
  v48[0] = 0;
  uint64_t VariantEntry = (dispatch_group_t *)AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v44, v48, 0, 0);
  uint64_t v32 = a5;
  uint64_t v33 = a3;
  uint64_t v19 = [a2 meshFunction];
  uint64_t v34 = a8;
  char v20 = v48[0];
  if (v48[0])
  {
    uint64_t v21 = v19;
    uint64_t v22 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    long long v23 = (void *)[a2 pipelineLibrary];
    if ([v23 pipelineCache] && (objc_msgSend(v23, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v24) = 1;
    }
    else {
      int v24 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (a4 >> 2);
    }
    char v31 = v24;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    unsigned __int8 v25 = objc_opt_new();
    [v25 setSync:a7 ^ 1u];
    [v25 setFunction:v21];
    [v25 setFrameworkData:a6];
    [v25 setPipelineCache:v22];
    [v25 setDestinationBinaryArchive:0];
    objc_msgSend(v25, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v25 setPipelineOptions:0];
    char v26 = [a2 newPipelineScript];
    if (v26)
    {
      [v25 setAirScript:v26];
      dispatch_release(v26);
    }
    objc_msgSend(v25, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    uint64_t v27 = (void *)[a2 meshLinkedFunctions];
    objc_msgSend(v25, "setVisibleFunctions:", objc_msgSend(v27, "functions"));
    objc_msgSend(v25, "setVisibleFunctionGroups:", objc_msgSend(v27, "groups"));
    objc_msgSend(v25, "setPrivateVisibleFunctions:", objc_msgSend(v27, "privateFunctions"));
    unsigned __int8 v28 = *a1;
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 3221225472;
    v41[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    size_t v41[3] = &unk_26516F0B8;
    v41[6] = a1;
    v41[7] = VariantEntry;
    char v42 = v20;
    v41[8] = v32;
    v41[9] = 0;
    v41[4] = v33;
    v41[5] = v47;
    char v43 = v31;
    AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(v28, (uint64_t)v44, v25, (uint64_t)v41);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  long long v36 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  uint64_t v37 = &unk_26516F0E0;
  uint64_t v39 = v47;
  uint64_t v40 = VariantEntry;
  uint64_t v38 = v34;
  long long v29 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v29, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v36(block);
  }
  AGX::Impl::MeshProgramKey::~MeshProgramKey(v44);
  _Block_object_dispose(v47, 8);
}

void sub_2429D8860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  AGX::Impl::MeshProgramKey::~MeshProgramKey(&a32);
  _Block_object_dispose((const void *)(v32 - 192), 8);
  _Unwind_Resume(a1);
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createVertexProgramAnalysis(void ***a1, MTLRenderPipelineDescriptor *a2, uint64_t a3, unsigned int a4, os_unfair_lock_s *a5, uint64_t a6, int a7, uint64_t a8)
{
  v36[0] = 0;
  v36[1] = v36;
  v36[2] = 0x2020000000;
  void v36[3] = 0;
  uint64_t v15 = [(MTLRenderPipelineDescriptor *)a2 vertexFunction];
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)v33, (uint64_t)v37, 0, 0, 0, 0);
  AGX::VertexProgramKey::initCommon((AGX::VertexProgramKey *)v33, a2);
  v34 &= ~0x80u;
  v35 |= 0x200000uLL;
  LOBYTE(v37[0]) = 0;
  uint64_t VariantEntry = (dispatch_group_t *)AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a5, (uint64_t)v33, v37, 0, 0);
  if (LOBYTE(v37[0]))
  {
    uint64_t v17 = objc_msgSend((id)-[MTLRenderPipelineDescriptor pipelineLibrary](a2, "pipelineLibrary"), "pipelineCache");
    id v18 = (void *)[(MTLRenderPipelineDescriptor *)a2 pipelineLibrary];
    if ([v18 pipelineCache] && (objc_msgSend(v18, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v19) = 1;
    }
    else {
      int v19 = ([(NSArray *)[(MTLRenderPipelineDescriptor *)a2 binaryArchives] count] != 0) & (a4 >> 2);
    }
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    char v20 = objc_opt_new();
    [v20 setSync:a7 ^ 1u];
    [v20 setFunction:v15];
    [v20 setFrameworkData:a6];
    [v20 setPipelineOptions:0];
    [v20 setPipelineCache:v17];
    objc_msgSend(v20, "setGpuCompilerSPIOptions:", -[MTLRenderPipelineDescriptor gpuCompilerSPIOptions](a2, "gpuCompilerSPIOptions"));
    uint64_t v21 = *a1;
    v31[0] = MEMORY[0x263EF8330];
    v31[1] = 3221225472;
    void v31[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke;
    v31[3] = &unk_26516F108;
    v31[6] = a1;
    v31[7] = VariantEntry;
    v31[4] = a3;
    v31[5] = v36;
    char v32 = v19;
    AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(v21, (uint64_t)v33, v20, (uint64_t)v31);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  char v26 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2;
  uint64_t v27 = &unk_26516F0E0;
  long long v29 = v36;
  long long v30 = VariantEntry;
  uint64_t v28 = a8;
  uint64_t v22 = *VariantEntry;
  if (a7)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v22, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*VariantEntry, 0xFFFFFFFFFFFFFFFFLL);
    v26(block);
  }
  AGX::Impl::VertexProgramKey::~VertexProgramKey(v33);
  _Block_object_dispose(v36, 8);
}

void sub_2429D8B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  AGX::Impl::VertexProgramKey::~VertexProgramKey(&a27);
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Unwind_Resume(a1);
}

void *AGX::Program<AGX::HAL200::VertexProgramVariant,AGX::VertexProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  *a3 = 0;
  if ((a4 & 4) != 0 || a5) {
    operator new();
  }
  uint64_t v9 = a1 + 342;
  os_unfair_lock_lock(a1 + 342);
  uint64_t v10 = VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::VertexProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (!*v10)
  {
    uint64_t v12 = dispatch_group_create();
    *uint64_t v10 = v12;
LABEL_10:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_11;
  }
  if (*((unsigned char *)v10 + 40))
  {
    uint64_t v11 = v10[1];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    v10[1] = 0;
    v10[2] = 0;

    v10[3] = 0;
    v10[4] = 0;
    *((unsigned char *)v10 + 40) = 0;
    uint64_t v12 = *v10;
    goto LABEL_10;
  }
  if ((*(void *)&a4 & 0x330003) != 0) {
    dispatch_group_enter((dispatch_group_t)*v10);
  }
LABEL_11:
  os_unfair_lock_unlock(v9);
  return v10;
}

void sub_2429D8D2C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v9 = a8;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8])
  {
    if (*(void *)(a2 + 544))
    {
      uint64_t v11 = (unsigned int **)(a2 + 544);
      if (!*(void *)(a2 + 552)) {
        uint64_t v11 = (unsigned int **)(a2 + 1104);
      }
    }
    else
    {
      uint64_t v11 = (unsigned int **)(a2 + 1104);
    }
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void *)(a1 + 56);
    unsigned __int8 v14 = *v11;
    uint64_t v15 = v11[1];
    if (v14) {
      BOOL v16 = v15 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16)
    {
      uint64_t v17 = *v14;
      id v18 = (char *)v14 + v17;
      int v19 = (unsigned __int16 *)((char *)v14 + v17 - *(int *)((char *)v14 + v17));
      if (*v19 >= 9u)
      {
        uint64_t v20 = v19[4];
        if (v20)
        {
          uint64_t v21 = &v18[v20];
          uint64_t v22 = *(unsigned int *)&v18[v20];
          if (*(_DWORD *)&v18[v20 + v22])
          {
            unint64_t v23 = 0;
            uint64_t v24 = 0;
            uint64_t v25 = (uint64_t)v14 + v17 + v22 + v20 + 10;
            do
            {
              uint64_t v26 = *(unsigned int *)(v25 - 6);
              uint64_t v27 = v26 - *(int *)(v25 + v26 - 6);
              if (*(unsigned __int16 *)(v25 + v27 - 6) >= 7u && (uint64_t v28 = *(unsigned __int16 *)(v25 + v27)) != 0) {
                uint64_t v29 = *(void *)(v25 + v26 + v28 - 6);
              }
              else {
                uint64_t v29 = 0;
              }
              if (getTimebaseInfo(void)::once != -1)
              {
                uint64_t v33 = v13;
                uint64_t v34 = v12;
                dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
                uint64_t v13 = v33;
                uint64_t v12 = v34;
              }
              v24 += v29
                   * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                   / *(unsigned int *)algn_268D5B048;
              ++v23;
              v25 += 4;
            }
            while (v23 < *(unsigned int *)&v21[v22]);
          }
        }
      }
    }
    uint64_t v9 = a8;
    IOGPUDeviceTraceEvent();
  }
  if (!v9) {
    operator new();
  }
  uint64_t v30 = *(void *)(a1 + 56);
  char v31 = *(unsigned char *)(a1 + 64);
  *(void *)(v30 + _Block_object_dispose(&a9, 8) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  *(void *)(v30 + 16) = v9;

  *(void *)(v30 + 24) = [a9 copy];
  if (*(void *)(v30 + 8))
  {

    *(void *)(v30 + 32) = a7;
  }
  else
  {
    *(unsigned char *)(v30 + 40) = v31;
  }
  char v32 = *(NSObject **)v30;

  dispatch_group_leave(v32);
}

void sub_2429D9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AGX::HAL200::VertexProgramVariantESLState *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::mutex::~mutex(v26);
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](v29);
  AGX::VertexProgramVaryings::~VertexProgramVaryings(v28);
  AGX::HAL200::VertexProgramVariantESLState::~VertexProgramVariantESLState(a12);
  AGX::ProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,true>::~ProgramVariant(v27);
  MEMORY[0x24566ED90](v27, 0x10F3C401D7DD63FLL);
  _Unwind_Resume(a1);
}

void AGX::Compiler::compileProgram<AGX::VertexProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v25 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v26, &v25);
  uint64_t v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    unint64_t v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    uint64_t v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      uint64_t v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  void v21[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    uint64_t v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_2429D9750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE27createVertexProgramAnalysisEP27MTLRenderPipelineDescriptorP18AGXG17FamilyDevicemPNS1_13VertexProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(a1[6] + 8);
  uint64_t v1 = *(void *)(*(void *)(a1[5] + 8) + 24);
  if (v1) {
    uint64_t v2 = v1 + 3688;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  BOOL v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_16VertexProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  CC_SHA256_CTX buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429D9A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::VertexProgramVariant::~VertexProgramVariant(AGX::HAL200::VertexProgramVariant *this)
{
  AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~VertexProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

void *VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::VertexProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 1040);
  if (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a1 + 1032);
    uint64_t v7 = *(void *)(a2 + 200);
    uint64_t v8 = v6;
    while (!AGX::Impl::VertexProgramKey::operator==(a2, v8) || v7 != *(void *)(v8 + 200))
    {
      ++v5;
      v8 += 208;
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
    uint64_t v9 = (void *)(v6 + 48 * v5);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 1032);
LABEL_8:
    uint64_t v10 = *(void **)(v6 + 1024);
    if (v10)
    {
      uint64_t v11 = *(void *)(a2 + 200);
      unsigned int v12 = 1;
      while (1)
      {
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)v10) && v11 == v10[25])
        {
          unsigned int v12 = 0;
          goto LABEL_28;
        }
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 26)) && v11 == v10[51]) {
          goto LABEL_28;
        }
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 52)) && v11 == v10[77]) {
          break;
        }
        if (AGX::Impl::VertexProgramKey::operator==(a2, (uint64_t)(v10 + 78)) && v11 == v10[103])
        {
          unsigned int v12 = 3;
          goto LABEL_28;
        }
        uint64_t v10 = (void *)v10[128];
        if (!v10) {
          goto LABEL_20;
        }
      }
      unsigned int v12 = 2;
LABEL_28:
      uint64_t v9 = &v10[6 * v12];
    }
    else
    {
LABEL_20:
      if (v4 == 4) {
        operator new();
      }
      uint64_t v13 = v6 + 208 * v4;
      *(_DWORD *)(v13 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 8);
      if (v13 == a2)
      {
        std::string::operator=((std::string *)(a2 + 64), (const std::string *)(a2 + 64));
      }
      else
      {
        std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v13 + 16), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
        long long v14 = *(_OWORD *)(a2 + 40);
        *(void *)(v13 + 56) = *(void *)(a2 + 56);
        *(_OWORD *)(v13 + 40) = v14;
        std::string::operator=((std::string *)(v13 + 64), (const std::string *)(a2 + 64));
        *(_DWORD *)(v13 + 8_Block_object_dispose(&a9, 8) = *(_DWORD *)(a2 + 88);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v13 + 96), *(char **)(a2 + 96), *(char **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 5);
        std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v13 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), (uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 5);
      }
      std::string::operator=((std::string *)(v13 + 144), (const std::string *)(a2 + 144));
      std::string::operator=((std::string *)(v13 + 168), (const std::string *)(a2 + 168));
      *(unsigned char *)(v13 + 192) = *(unsigned char *)(a2 + 192);
      *(void *)(v6 + 208 * v4 + 200) = *(void *)(a2 + 200);
      uint64_t v15 = *(void *)(a1 + 1032);
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      *(_DWORD *)(a1 + 1040) = v16 + 1;
      uint64_t v9 = (void *)(v15 + 48 * v16);
    }
  }
  return v9 + 104;
}

void sub_2429D9CD0(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B2C4049FF2409);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::VertexProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::VertexProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)a1, (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v3[0]);
LABEL_3:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 13), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v3[0]);
LABEL_5:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 26), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v3[0]);
LABEL_7:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::VertexProgramKey::VertexProgramKey((uint64_t)(a1 + 39), (uint64_t)v3, 0, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    operator delete(v3[0]);
    goto LABEL_9;
  }
  if (SHIBYTE(__p[0]) < 0) {
    goto LABEL_17;
  }
LABEL_9:
  a1[52] = 0u;
  a1[53] = 0u;
  *(_OWORD *)((char *)a1 + 85_Block_object_dispose(&a9, 8) = 0u;
  a1[55] = 0u;
  a1[56] = 0u;
  *(_OWORD *)((char *)a1 + 906) = 0u;
  a1[58] = 0u;
  a1[59] = 0u;
  *(_OWORD *)((char *)a1 + 954) = 0u;
  a1[61] = 0u;
  a1[62] = 0u;
  *(_OWORD *)((char *)a1 + 1002) = 0u;
  return a1;
}

void sub_2429D9EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2429D9ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  do
  {
    v10 -= 26;
    AGX::Impl::VertexProgramKey::~VertexProgramKey(v10);
  }
  while (v10 != v9);
  _Unwind_Resume(a1);
}

BOOL AGX::Impl::VertexProgramKey::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 87);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 72);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 87);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 72);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v8 = (const void **)(a1 + 64);
  if (v5 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 64);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 64);
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 72))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      uint64_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*(void *)(a1 + 56) != *(void *)(a2 + 56)
    || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)
    || *(_DWORD *)(a1 + 88) != *(_DWORD *)(a2 + 88)
    || *(void *)(a1 + 104) != *(void *)(a1 + 96)
    || *(void *)(a1 + 128) != *(void *)(a1 + 120))
  {
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 167);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 167);
  }
  else {
    uint64_t v11 = *(void *)(a1 + 152);
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 167);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a2 + 152);
  }
  if (v11 != v12) {
    return 0;
  }
  long long v14 = (const void **)(a1 + 144);
  if (v13 >= 0) {
    uint64_t v15 = (unsigned __int8 *)(a2 + 144);
  }
  else {
    uint64_t v15 = *(unsigned __int8 **)(a2 + 144);
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(void *)(a1 + 152))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 167))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      long long v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_36;
      }
    }
    return 0;
  }
LABEL_36:
  uint64_t v16 = *(unsigned __int8 *)(a1 + 191);
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 191);
  }
  else {
    uint64_t v17 = *(void *)(a1 + 176);
  }
  uint64_t v18 = *(unsigned __int8 *)(a2 + 191);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 176);
  }
  if (v17 != v18) {
    return 0;
  }
  uint64_t v20 = (const void **)(a1 + 168);
  if (v19 >= 0) {
    uint64_t v21 = (unsigned __int8 *)(a2 + 168);
  }
  else {
    uint64_t v21 = *(unsigned __int8 **)(a2 + 168);
  }
  if ((v16 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, *(void *)(a1 + 176))) {
      return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 191))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      uint64_t v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16) {
        return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
      }
    }
    return 0;
  }
  return *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
}

uint64_t AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  *a3 = 0;
  if ((a4 & 4) != 0 || a5) {
    operator new();
  }
  uint64_t v9 = a1 + 350;
  os_unfair_lock_lock(a1 + 350);
  uint64_t v10 = VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::MeshProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (!*(void *)v10)
  {
    uint64_t v12 = dispatch_group_create();
    *(void *)uint64_t v10 = v12;
LABEL_10:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_11;
  }
  if (*(unsigned char *)(v10 + 40))
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    *(void *)(v10 + _Block_object_dispose(&a9, 8) = 0;
    *(void *)(v10 + 16) = 0;

    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(unsigned char *)(v10 + 40) = 0;
    uint64_t v12 = *(NSObject **)v10;
    goto LABEL_10;
  }
  if ((*(void *)&a4 & 0x330003) != 0) {
    dispatch_group_enter(*(dispatch_group_t *)v10);
  }
LABEL_11:
  os_unfair_lock_unlock(v9);
  return v10;
}

void sub_2429DA238(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void *a7, uint64_t a8, __CFString *a9)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  if (a2[68])
  {
    if (a2[69]) {
      uint64_t v12 = (unsigned int **)(a2 + 68);
    }
    else {
      uint64_t v12 = (unsigned int **)(a2 + 138);
    }
  }
  else
  {
    uint64_t v12 = (unsigned int **)(a2 + 138);
  }
  uint64_t v13 = *(void *)(a1 + 48);
  long long v14 = *v12;
  uint64_t v15 = v12[1];
  if (v14) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *v14;
    uint64_t v18 = (char *)v14 + v17;
    int v19 = (unsigned __int16 *)((char *)v14 + v17 - *(int *)((char *)v14 + v17));
    if (*v19 >= 9u)
    {
      uint64_t v20 = v19[4];
      if (v20)
      {
        uint64_t v21 = &v18[v20];
        uint64_t v22 = *(unsigned int *)&v18[v20];
        if (*(_DWORD *)&v18[v20 + v22])
        {
          unint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v25 = (uint64_t)v14 + v17 + v22 + v20 + 10;
          do
          {
            uint64_t v26 = *(unsigned int *)(v25 - 6);
            uint64_t v27 = v26 - *(int *)(v25 + v26 - 6);
            if (*(unsigned __int16 *)(v25 + v27 - 6) >= 7u && (uint64_t v28 = *(unsigned __int16 *)(v25 + v27)) != 0) {
              uint64_t v29 = *(void *)(v25 + v26 + v28 - 6);
            }
            else {
              uint64_t v29 = 0;
            }
            if (getTimebaseInfo(void)::once != -1)
            {
              uint64_t v43 = v13;
              uint64_t v44 = a5;
              dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
              uint64_t v13 = v43;
              a5 = v44;
            }
            v24 += v29
                 * (unint64_t)getTimebaseInfo(void)::sTimebaseInfo
                 / *(unsigned int *)algn_268D5B048;
            ++v23;
            v25 += 4;
          }
          while (v23 < *(unsigned int *)&v21[v22]);
        }
      }
    }
  }
  uint64_t v30 = a8;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8])
  {
    char v31 = a5;
    IOGPUDeviceTraceEvent();
    a5 = v31;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (a8)
    {
      char v32 = 1;
    }
    else
    {
      if (a2[33])
      {
        uint64_t v33 = a2 + 33;
        if (!a2[34]) {
          uint64_t v33 = a2 + 103;
        }
      }
      else
      {
        uint64_t v33 = a2 + 103;
      }
      uint64_t v35 = *v33;
      uint64_t v34 = v33[1];
      if (v35) {
        BOOL v36 = v34 == 0;
      }
      else {
        BOOL v36 = 1;
      }
      if (v36)
      {
        uint64_t v30 = 0;
        char v32 = 1;
      }
      else
      {
        char v32 = 0;
        a9 = @"Internal error during function compilation";
        uint64_t v30 = 2;
      }
    }
    uint64_t v37 = *(void *)(a1 + 64);
    uint64_t v38 = *(void *)(a1 + 72);
    memset(v48, 0, sizeof(v48));
    AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(v37, v38, a5, (uint64_t)v48, *(void **)(a1 + 32), v30);
    if (!v30) {
      operator new();
    }
    uint64_t v39 = *(void *)(a1 + 56);
    int v40 = *(unsigned __int8 *)(a1 + 81);
    *(void *)(v39 + _Block_object_dispose(&a9, 8) = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    *(void *)(v39 + 16) = v30;

    *(void *)(v39 + 24) = [(__CFString *)a9 copy];
    if (*(void *)(v39 + 8))
    {

      *(void *)(v39 + 32) = a7;
    }
    else
    {
      if (v40) {
        char v41 = v32;
      }
      else {
        char v41 = 0;
      }
      *(unsigned char *)(v39 + 40) = v41;
    }
    char v42 = *(NSObject **)v39;
    dispatch_group_leave(v42);
  }
}

void sub_2429DA5D8(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10F3C4044D4022BLL);
  _Unwind_Resume(a1);
}

void AGX::Compiler::compileProgram<AGX::MeshProgramKey,AGCDeserializedReply>(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  size_t v25 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v26, &v25);
  uint64_t v8 = dispatch_data_create(v26, v25, 0, 0);
  [a3 setDriverKeyData:v8];
  if ([a3 airScript])
  {
    unint64_t v23 = 0;
    size_t v24 = 0;
    dispatch_object_t object = dispatch_data_create_map((dispatch_data_t)[a3 airScript], (const void **)&v23, &v24);
    uint64_t v9 = v23;
    uint64_t v10 = *v23;
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)((char *)v9 + v10), &data, (size_t *)len, v11, v12))
    {
      uint64_t v13 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v13);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release(object);
    v30[0] = *(_OWORD *)md;
    v30[1] = v32;
    [a3 setVendorPluginFunctionId:v30];
  }
  v21[0] = MEMORY[0x263EF8330];
  v21[1] = 3221225472;
  void v21[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  v21[3] = &unk_26516F810;
  v21[4] = a3;
  v21[5] = a4;
  if ([a3 function])
  {
    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = *a1;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 3221225472;
    v19[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    v19[3] = &unk_26516F860;
    v19[4] = v21;
    v19[5] = v14;
    [v15 compileFunctionRequest:a3 completionHandler:v19];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 3221225472;
    v20[2] = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    v20[3] = &unk_26516F838;
    v20[4] = v21;
    BOOL v16 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    uint64_t v17 = *a1;
    uint64_t v18 = [a3 driverKeyData];
    if (v16) {
      objc_msgSend(v17, "compileRequest:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
    else {
      objc_msgSend(v17, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v18, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), v20);
    }
  }
  dispatch_release(v8);
}

void sub_2429DA95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_object_t object)
{
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25createMeshProgramAnalysisI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemPNS1_11MeshProgramEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPKNS_21VertexProgramVaryingsEE_block_invoke_2(void *a1)
{
  *(void *)(*(void *)(a1[5] + 8) + 24) = *(void *)(a1[6] + 8);
  uint64_t v1 = *(void *)(*(void *)(a1[5] + 8) + 24);
  if (v1) {
    uint64_t v2 = v1 + 3456;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(uint64_t (**)(void, uint64_t))(a1[4] + 16))(a1[4], v2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  uint64_t v15 = ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  BOOL v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramINS_14MeshProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  CC_SHA256_CTX buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_2429DAC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void AGX::Program<AGX::HAL200::MeshProgramVariant,AGX::MeshProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    locuint64_t k = (os_unfair_lock_s *)(a1 + 1400);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1400));
    uint64_t v13 = *(void **)(a1 + 1360);
    uint64_t v14 = *(unsigned int *)(a1 + 1368);
    uint64_t v15 = VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v13, *(_DWORD *)(a1 + 1368), (void *)a4);
    BOOL v16 = (void *)v15;
    if (v15)
    {
      uint64_t v17 = *(void *)(v15 + 8);
      if (a6)
      {
LABEL_4:
        *BOOL v16 = v17;
LABEL_26:
        os_unfair_lock_unlock(lock);
        return;
      }
    }
    else
    {
      if (v14 == 4) {
        operator new();
      }
      uint64_t v18 = &v13[4 * v14];
      long long v19 = *(_OWORD *)(a4 + 16);
      _OWORD *v18 = *(_OWORD *)a4;
      v18[1] = v19;
      uint64_t v20 = *(void *)(a1 + 1360);
      unsigned int v21 = *(_DWORD *)(a1 + 1368);
      *(_DWORD *)(a1 + 136_Block_object_dispose(&a9, 8) = v21 + 1;
      BOOL v16 = (void *)(v20 + 24 * v21 + 128);
      uint64_t v17 = *(void *)(v20 + 24 * v21 + 136);
      if (a6) {
        goto LABEL_4;
      }
    }
    if ((v6 & ~v17) != 0)
    {
      if (a3) {
        dispatch_retain(a3);
      }
      uint64_t v22 = v16[2];
      if (v22) {
        dispatch_release(v22);
      }
      v16[1] = v6;
      v16[2] = a3;
    }
    if (!*(unsigned char *)(a1 + 2432))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t v30 = (void *)[objc_alloc(MEMORY[0x263F128C0]) initWithDevice:a5 reflectionData:a3 functionType:7 options:a2 | 0x8000];
      uint64_t v23 = (void *)[v30 arguments];
      uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v24)
      {
        uint64_t v25 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v33 != v25) {
              objc_enumerationMutation(v23);
            }
            uint64_t v27 = *(void **)(*((void *)&v32 + 1) + 8 * i);
            if (![v27 type]
              && (objc_msgSend((id)objc_msgSend(v27, "dataTypeDescription"), "elementIsIndirectArgumentBuffer") & 1) != 0)
            {
              uint64_t v28 = objc_msgSend(a5, "newIndirectArgumentBufferLayoutWithStructType:", objc_msgSend(v27, "bufferStructType"));
              uint64_t v29 = v28[2];
              v28[2] = 0;
              *(void *)(a1 + 8 * [v27 index] + 140_Block_object_dispose(&a9, 8) = v29;
            }
          }
          uint64_t v24 = [v23 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v24);
      }

      *(unsigned char *)(a1 + 2432) = 1;
    }
    goto LABEL_26;
  }
}

void sub_2429DAEF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void AGX::HAL200::MeshProgramVariant::~MeshProgramVariant(AGX::HAL200::MeshProgramVariant *this)
{
  AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~MeshProgramVariant((unint64_t)this);

  JUMPOUT(0x24566ED90);
}

uint64_t VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::MeshProgramVariant>,4u>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  uint64_t v4 = *(unsigned int *)(a1 + 1072);
  if (!v4)
  {
    LOBYTE(v9) = *(unsigned char *)(a2 + 95);
    size_t v25 = *(void *)(a2 + 80);
    uint64_t v96 = *(const void **)(a2 + 72);
    int v97 = *(_DWORD *)(a2 + 56);
    int v94 = *(_DWORD *)(a2 + 96);
    int v95 = *(_DWORD *)(a2 + 52);
    uint64_t v26 = *(std::string **)(a2 + 104);
    uint64_t v29 = *(std::string **)(a2 + 112);
    size_t v27 = *(unsigned __int8 *)(a2 + 175);
    size_t v28 = *(void *)(a2 + 160);
    __s1 = *(void **)(a2 + 152);
    int v87 = *(_DWORD *)(a2 + 60);
    int v81 = *(_DWORD *)(a2 + 64);
    uint64_t v80 = *(void *)(a2 + 208);
    goto LABEL_46;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 1064);
  uint64_t v7 = (unsigned __int8 *)(a2 + 72);
  uint64_t v96 = *(const void **)(a2 + 72);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 95);
  LOBYTE(v9) = v8;
  size_t v10 = *(void *)(a2 + 80);
  if ((v8 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 95);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 80);
  }
  int v97 = *(_DWORD *)(a2 + 56);
  int v94 = *(_DWORD *)(a2 + 96);
  int v95 = *(_DWORD *)(a2 + 52);
  uint64_t v91 = *(std::string **)(a2 + 104);
  __str = *(std::string **)(a2 + 112);
  uint64_t v88 = *(void *)(a2 + 128);
  uint64_t v89 = *(void *)(a2 + 136);
  size_t v90 = *(unsigned __int8 *)(a2 + 175);
  __unint64_t n = *(void *)(a2 + 160);
  if (*(char *)(a2 + 175) >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a2 + 175);
  }
  else {
    uint64_t v12 = *(void *)(a2 + 160);
  }
  __s1 = *(void **)(a2 + 152);
  uint64_t v85 = v12;
  int v87 = *(_DWORD *)(a2 + 60);
  int v81 = *(_DWORD *)(a2 + 64);
  uint64_t v80 = *(void *)(a2 + 208);
  do
  {
    uint64_t v13 = v6 + 216 * v5;
    uint64_t v14 = *(unsigned __int8 *)(v13 + 95);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v13 + 80);
    }
    if (v11 != v14) {
      goto LABEL_10;
    }
    if (v15 >= 0) {
      BOOL v16 = (unsigned __int8 *)(v13 + 72);
    }
    else {
      BOOL v16 = *(unsigned __int8 **)(v13 + 72);
    }
    if ((char)v8 < 0)
    {
      if (memcmp(v96, v16, v10)) {
        goto LABEL_10;
      }
    }
    else if ((_BYTE)v8)
    {
      uint64_t v17 = v7;
      uint64_t v18 = v8;
      while (*v17 == *v16)
      {
        ++v17;
        ++v16;
        if (!--v18) {
          goto LABEL_22;
        }
      }
      goto LABEL_10;
    }
LABEL_22:
    if (v97 != *(_DWORD *)(v13 + 56)
      || v95 != *(_DWORD *)(v13 + 52)
      || v94 != *(_DWORD *)(v13 + 96)
      || __str != v91
      || v89 != v88)
    {
      goto LABEL_10;
    }
    uint64_t v19 = *(unsigned __int8 *)(v13 + 175);
    int v20 = (char)v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *(void *)(v13 + 160);
    }
    if (v85 != v19) {
      goto LABEL_10;
    }
    if (v20 >= 0) {
      unsigned int v21 = (unsigned __int8 *)(v13 + 152);
    }
    else {
      unsigned int v21 = *(unsigned __int8 **)(v13 + 152);
    }
    if ((v90 & 0x80) != 0)
    {
      if (memcmp(__s1, v21, __n)) {
        goto LABEL_10;
      }
LABEL_40:
      if (v87 == *(_DWORD *)(v13 + 60) && v81 == *(_DWORD *)(v13 + 64) && v80 == *(void *)(v6 + 216 * v5 + 208))
      {
        uint64_t v24 = v6 + 48 * v5;
        return v24 + 864;
      }
      goto LABEL_10;
    }
    if (!v90) {
      goto LABEL_40;
    }
    uint64_t v22 = v7 + 80;
    size_t v23 = v90;
    while (*v22 == *v21)
    {
      ++v22;
      ++v21;
      if (!--v23) {
        goto LABEL_40;
      }
    }
LABEL_10:
    ++v5;
  }
  while (v5 != v4);
  size_t v25 = v10;
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  size_t v27 = v90;
  uint64_t v26 = v91;
  size_t v28 = __n;
  uint64_t v29 = __str;
LABEL_46:
  uint64_t v30 = v9;
  if ((v9 & 0x80u) == 0) {
    size_t v9 = v9;
  }
  else {
    size_t v9 = v25;
  }
  if ((v27 & 0x80u) == 0) {
    size_t v31 = v27;
  }
  else {
    size_t v31 = v28;
  }
  size_t v92 = v31;
  if (v29 != v26
    || *(void *)(v2 + 136) != *(void *)(v2 + 128)
    || (uint64_t v32 = *(void *)(*(void *)(v3 + 1064) + 1056)) == 0)
  {
LABEL_55:
    if (v4 == 4) {
      operator new();
    }
    uint64_t v74 = *(void *)(v3 + 1064);
    uint64_t v75 = v74 + 216 * v4;
    *(_DWORD *)(v75 + _Block_object_dispose(&a9, 8) = *(_DWORD *)(v2 + 8);
    if (v75 == v2)
    {
      std::string::operator=((std::string *)(v2 + 72), (const std::string *)(v2 + 72));
    }
    else
    {
      std::vector<unsigned int>::__assign_with_size[abi:nn180100]<unsigned int *,unsigned int *>((void *)(v75 + 16), *(char **)(v2 + 16), *(char **)(v2 + 24), (uint64_t)(*(void *)(v2 + 24) - *(void *)(v2 + 16)) >> 2);
      long long v76 = *(_OWORD *)(v2 + 40);
      *(_OWORD *)(v75 + 56) = *(_OWORD *)(v2 + 56);
      *(_OWORD *)(v75 + 40) = v76;
      std::string::operator=((std::string *)(v75 + 72), (const std::string *)(v2 + 72));
      *(_DWORD *)(v75 + 96) = *(_DWORD *)(v2 + 96);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v75 + 104), *(char **)(v2 + 104), *(char **)(v2 + 112), (uint64_t)(*(void *)(v2 + 112) - *(void *)(v2 + 104)) >> 5);
      std::vector<MTLUINT256_t>::__assign_with_size[abi:nn180100]<MTLUINT256_t*,MTLUINT256_t*>((void *)(v75 + 128), *(char **)(v2 + 128), *(char **)(v2 + 136), (uint64_t)(*(void *)(v2 + 136) - *(void *)(v2 + 128)) >> 5);
    }
    std::string::operator=((std::string *)(v75 + 152), (const std::string *)(v2 + 152));
    std::string::operator=((std::string *)(v75 + 176), (const std::string *)(v2 + 176));
    *(unsigned char *)(v75 + 200) = *(unsigned char *)(v2 + 200);
    *(void *)(v74 + 216 * v4 + 20_Block_object_dispose(&a9, 8) = *(void *)(v2 + 208);
    uint64_t v77 = *(void *)(v3 + 1064);
    unsigned int v78 = *(_DWORD *)(v3 + 1072);
    *(_DWORD *)(v3 + 1072) = v78 + 1;
    uint64_t v24 = v77 + 48 * v78;
    return v24 + 864;
  }
  while (2)
  {
    uint64_t v33 = *(unsigned __int8 *)(v32 + 95);
    int v34 = (char)v33;
    if ((v33 & 0x80u) != 0) {
      uint64_t v33 = *(void *)(v32 + 80);
    }
    if (v9 == v33)
    {
      if (v34 >= 0) {
        long long v35 = (unsigned __int8 *)(v32 + 72);
      }
      else {
        long long v35 = *(unsigned __int8 **)(v32 + 72);
      }
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v35, v25)) {
          goto LABEL_91;
        }
      }
      else if (v30)
      {
        BOOL v36 = (unsigned __int8 *)(v2 + 72);
        uint64_t v37 = v30;
        while (*v36 == *v35)
        {
          ++v36;
          ++v35;
          if (!--v37) {
            goto LABEL_72;
          }
        }
        goto LABEL_91;
      }
LABEL_72:
      if (v97 != *(_DWORD *)(v32 + 56) || v95 != *(_DWORD *)(v32 + 52) || v94 != *(_DWORD *)(v32 + 96)) {
        goto LABEL_91;
      }
      uint64_t v38 = *(unsigned __int8 *)(v32 + 175);
      int v39 = (char)v38;
      if ((v38 & 0x80u) != 0) {
        uint64_t v38 = *(void *)(v32 + 160);
      }
      if (v92 != v38) {
        goto LABEL_91;
      }
      if (v39 >= 0) {
        int v40 = (unsigned __int8 *)(v32 + 152);
      }
      else {
        int v40 = *(unsigned __int8 **)(v32 + 152);
      }
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v40, v28)) {
          goto LABEL_91;
        }
      }
      else if (v27)
      {
        char v41 = (unsigned __int8 *)(v2 + 152);
        size_t v42 = v27;
        while (*v41 == *v40)
        {
          ++v41;
          ++v40;
          if (!--v42) {
            goto LABEL_88;
          }
        }
        goto LABEL_91;
      }
LABEL_88:
      if (v87 == *(_DWORD *)(v32 + 60) && v81 == *(_DWORD *)(v32 + 64) && v80 == *(void *)(v32 + 208))
      {
        unsigned int v73 = 0;
        goto LABEL_194;
      }
    }
LABEL_91:
    uint64_t v43 = *(unsigned __int8 *)(v32 + 311);
    int v44 = (char)v43;
    if ((v43 & 0x80u) != 0) {
      uint64_t v43 = *(void *)(v32 + 296);
    }
    if (v9 == v43)
    {
      if (v44 >= 0) {
        unsigned int v45 = (unsigned __int8 *)(v32 + 288);
      }
      else {
        unsigned int v45 = *(unsigned __int8 **)(v32 + 288);
      }
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v45, v25)) {
          goto LABEL_123;
        }
      }
      else if (v30)
      {
        uint64_t v46 = (unsigned __int8 *)(v2 + 72);
        uint64_t v47 = v30;
        while (*v46 == *v45)
        {
          ++v46;
          ++v45;
          if (!--v47) {
            goto LABEL_104;
          }
        }
        goto LABEL_123;
      }
LABEL_104:
      if (v97 != *(_DWORD *)(v32 + 272) || v95 != *(_DWORD *)(v32 + 268) || v94 != *(_DWORD *)(v32 + 312)) {
        goto LABEL_123;
      }
      uint64_t v48 = *(unsigned __int8 *)(v32 + 391);
      int v49 = (char)v48;
      if ((v48 & 0x80u) != 0) {
        uint64_t v48 = *(void *)(v32 + 376);
      }
      if (v92 != v48) {
        goto LABEL_123;
      }
      if (v49 >= 0) {
        uint64_t v50 = (unsigned __int8 *)(v32 + 368);
      }
      else {
        uint64_t v50 = *(unsigned __int8 **)(v32 + 368);
      }
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v50, v28)) {
          goto LABEL_123;
        }
      }
      else if (v27)
      {
        uint64_t v51 = (unsigned __int8 *)(v2 + 152);
        size_t v52 = v27;
        while (*v51 == *v50)
        {
          ++v51;
          ++v50;
          if (!--v52) {
            goto LABEL_120;
          }
        }
        goto LABEL_123;
      }
LABEL_120:
      if (v87 == *(_DWORD *)(v32 + 276) && v81 == *(_DWORD *)(v32 + 280) && v80 == *(void *)(v32 + 424))
      {
        unsigned int v73 = 1;
        goto LABEL_194;
      }
    }
LABEL_123:
    uint64_t v53 = *(unsigned __int8 *)(v32 + 527);
    int v54 = (char)v53;
    if ((v53 & 0x80u) != 0) {
      uint64_t v53 = *(void *)(v32 + 512);
    }
    if (v9 != v53)
    {
LABEL_155:
      uint64_t v63 = *(unsigned __int8 *)(v32 + 743);
      int v64 = (char)v63;
      if ((v63 & 0x80u) != 0) {
        uint64_t v63 = *(void *)(v32 + 728);
      }
      if (v9 != v63) {
        goto LABEL_58;
      }
      if (v64 >= 0) {
        uint64_t v65 = (unsigned __int8 *)(v32 + 720);
      }
      else {
        uint64_t v65 = *(unsigned __int8 **)(v32 + 720);
      }
      if ((v30 & 0x80) != 0)
      {
        if (memcmp(v96, v65, v25)) {
          goto LABEL_58;
        }
      }
      else if (v30)
      {
        uint64_t v66 = (unsigned __int8 *)(v2 + 72);
        uint64_t v67 = v30;
        while (*v66 == *v65)
        {
          ++v66;
          ++v65;
          if (!--v67) {
            goto LABEL_166;
          }
        }
LABEL_58:
        uint64_t v32 = *(void *)(v32 + 1056);
        if (!v32) {
          goto LABEL_55;
        }
        continue;
      }
LABEL_166:
      if (v97 != *(_DWORD *)(v32 + 704) || v95 != *(_DWORD *)(v32 + 700) || v94 != *(_DWORD *)(v32 + 744)) {
        goto LABEL_58;
      }
      uint64_t v68 = *(unsigned __int8 *)(v32 + 823);
      int v69 = (char)v68;
      if ((v68 & 0x80u) != 0) {
        uint64_t v68 = *(void *)(v32 + 808);
      }
      if (v92 != v68) {
        goto LABEL_58;
      }
      if (v69 >= 0) {
        uint64_t v70 = (unsigned __int8 *)(v32 + 800);
      }
      else {
        uint64_t v70 = *(unsigned __int8 **)(v32 + 800);
      }
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(__s1, v70, v28)) {
          goto LABEL_58;
        }
      }
      else if (v27)
      {
        uint64_t v71 = (unsigned __int8 *)(v2 + 152);
        size_t v72 = v27;
        while (*v71 == *v70)
        {
          ++v71;
          ++v70;
          if (!--v72) {
            goto LABEL_182;
          }
        }
        goto LABEL_58;
      }
LABEL_182:
      if (v87 == *(_DWORD *)(v32 + 708) && v81 == *(_DWORD *)(v32 + 712) && v80 == *(void *)(v32 + 856))
      {
        unsigned int v73 = 3;
        goto LABEL_194;
      }
      goto LABEL_58;
    }
    break;
  }
  if (v54 >= 0) {
    uint64_t v55 = (unsigned __int8 *)(v32 + 504);
  }
  else {
    uint64_t v55 = *(unsigned __int8 **)(v32 + 504);
  }
  if ((v30 & 0x80) != 0)
  {
    if (memcmp(v96, v55, v25)) {
      goto LABEL_155;
    }
  }
  else if (v30)
  {
    uint64_t v56 = (unsigned __int8 *)(v2 + 72);
    uint64_t v57 = v30;
    while (*v56 == *v55)
    {
      ++v56;
      ++v55;
      if (!--v57) {
        goto LABEL_136;
      }
    }
    goto LABEL_155;
  }
LABEL_136:
  if (v97 != *(_DWORD *)(v32 + 488) || v95 != *(_DWORD *)(v32 + 484) || v94 != *(_DWORD *)(v32 + 528)) {
    goto LABEL_155;
  }
  uint64_t v58 = *(unsigned __int8 *)(v32 + 607);
  int v59 = (char)v58;
  if ((v58 & 0x80u) != 0) {
    uint64_t v58 = *(void *)(v32 + 592);
  }
  if (v92 != v58) {
    goto LABEL_155;
  }
  if (v59 >= 0) {
    unint64_t v60 = (unsigned __int8 *)(v32 + 584);
  }
  else {
    unint64_t v60 = *(unsigned __int8 **)(v32 + 584);
  }
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(__s1, v60, v28)) {
      goto LABEL_155;
    }
  }
  else if (v27)
  {
    uint64_t v61 = (unsigned __int8 *)(v2 + 152);
    size_t v62 = v27;
    while (*v61 == *v60)
    {
      ++v61;
      ++v60;
      if (!--v62) {
        goto LABEL_152;
      }
    }
    goto LABEL_155;
  }
LABEL_152:
  if (v87 != *(_DWORD *)(v32 + 492) || v81 != *(_DWORD *)(v32 + 496) || v80 != *(void *)(v32 + 640)) {
    goto LABEL_155;
  }
  unsigned int v73 = 2;
LABEL_194:
  uint64_t v24 = v32 + 48 * v73;
  return v24 + 864;
}

void sub_2429DB8D0(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x10B2C40C2EAE88FLL);
  _Unwind_Resume(a1);
}

_OWORD *VectorMap<AGX::MeshProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::MeshProgramVariant>,4u>::Chunk::Chunk(_OWORD *a1)
{
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v3[0]);
LABEL_3:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1 + 216, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(v3[0]);
LABEL_5:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)(a1 + 27), 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v3[0]);
LABEL_7:
  uint64_t v6 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  AGX::MeshProgramKey::MeshProgramKey((uint64_t)a1 + 648, 0, 0, 0, (uint64_t)v3, 0, 0, 0);
  if (SHIBYTE(v5) < 0)
  {
    operator delete(__p[1]);
    if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
      goto LABEL_9;
    }
LABEL_17:
    operator delete(v3[0]);
    goto LABEL_9;
  }
  if (SHIBYTE(__p[0]) < 0) {
    goto LABEL_17;
  }
LABEL_9:
  a1[54] = 0u;
  a1[55] = 0u;
  *(_OWORD *)((char *)a1 + 890) = 0u;
  a1[57] = 0u;
  a1[58] = 0u;
  *(_OWORD *)((char *)a1 + 93_Block_object_dispose(&a9, 8) = 0u;
  a1[60] = 0u;
  a1[61] = 0u;
  *(_OWORD *)((char *)a1 + 986) = 0u;
  a1[63] = 0u;
  a1[64] = 0u;
  *(_OWORD *)((char *)a1 + 1034) = 0u;
  return a1;
}

void sub_2429DBAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2429DBAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(&a9);
  do
  {
    v10 -= 27;
    AGX::Impl::MeshProgramKey::~MeshProgramKey(v10);
  }
  while (v10 != v9);
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20createRenderPipelineI27MTLRenderPipelineDescriptorEEP26AGXG17FamilyRenderPipelinePT_P18AGXG17FamilyDevicemPP27MTLRenderPipelineReflectionPP7NSErrorU13block_pointerFvPU33objcproto22MTLRenderPipelineState11objc_objectSF_SI_E_block_invoke_3(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2)
  {
    long long v6 = a3[1];
    v13[0] = *a3;
    v13[1] = v6;
    AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createGeometryStageAndLinkPipeline<MTLRenderPipelineDescriptor,false>(*(void ****)(a1 + 56), *(void **)(a1 + 64), a2, v13, *(void **)(a1 + 32), *(MTLRenderPipelineDescriptor **)(a1 + 40), *(void *)(a1 + 72), *(unsigned char *)(a1 + 96), *(unsigned char *)(a1 + 97), *(void *)(a1 + 80), a4, *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (a5 > 3) {
      uint64_t v8 = 5;
    }
    else {
      uint64_t v8 = qword_242EAA188[a5];
    }
    size_t v9 = *(void **)(a1 + 88);
    uint64_t v10 = [NSDictionary dictionaryWithObject:a6 forKey:*MEMORY[0x263F08320]];
    id v11 = (id)[objc_alloc(MEMORY[0x263F087E8]) initWithDomain:@"AGXMetalG17P" code:v8 userInfo:v10];
    if (v7)
    {
      uint64_t v12 = *(void (**)(uint64_t, void, void, id))(v7 + 16);
      v12(v7, 0, 0, v11);
    }
    else if (v9)
    {
      *size_t v9 = v11;
    }
  }
}

void AGX::UserCommonShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createFragmentProgramVariant<MTLRenderPipelineDescriptor>(void ***a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, os_unfair_lock_s *a7, uint64_t a8, NSObject *a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v235 = *MEMORY[0x263EF8340];
  v171[0] = 0;
  v171[1] = v171;
  v171[2] = 0x3052000000;
  v171[3] = __Block_byref_object_copy_;
  v171[4] = __Block_byref_object_dispose_;
  v171[5] = 0;
  uint64_t v140 = [a2 fragmentFunction];
  uint64_t v136 = a5;
  if ([a2 openGLModeEnabled]) {
    int v15 = a9;
  }
  else {
    int v15 = 0;
  }
  {
    AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script = 0;
  }
  long long v144 = a7;
  uint64_t v142 = a4;
  if (AGX::UserProgramKeyFactory<AGX::HAL200::Classes,AGX::HAL200::Encoders>::GetPipelineScript<MTLRenderPipelineDescriptor>(MTLRenderPipelineDescriptor const*)::enable_pipeline_script)
  {
    [a2 newPipelineScript];
    operator new();
  }
  AGX::FragmentProgramKey::FragmentProgramKey((uint64_t)v149, v15, (void *)[a2 fragmentLinkedFunctions], a6);
  long long v224 = 0u;
  memset(v225, 0, 31);
  long long v222 = 0u;
  long long v223 = 0u;
  LODWORD(v226) = 1;
  WORD2(v226) = 0;
  int v227 = 0;
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  uint64_t v234 = 0;
  bzero(&v222, 0x28uLL);
  uint64_t v16 = [a2 _descriptorPrivate];
  id v17 = *(id *)v16;
  uint64_t v18 = objc_msgSend((id)objc_msgSend(*(id *)v16, "_descriptorAtIndex:", 0), "_descriptorPrivate");
  if (v18)
  {
    uint64_t v19 = *v18 >> 36;
    if ((v19 - 1) > 0x284) {
      int v20 = &texFormatUnsupported;
    }
    else {
      int v20 = (uint64_t *)*(&off_26516F8A0 + (v19 - 1));
    }
  }
  else
  {
    uint64_t v19 = 0;
    int v20 = &texFormatUnsupported;
  }
  uint64_t v228 = v20;
  BOOL v21 = v19 != 0;
  int v22 = DWORD2(v224);
  size_t v23 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 1), "_descriptorPrivate");
  int v24 = v22 | v21;
  if (!v23)
  {
    *(void *)&long long v229 = &texFormatUnsupported;
    goto LABEL_18;
  }
  uint64_t v25 = *v23 >> 36;
  if ((v25 - 1) <= 0x284)
  {
    *(void *)&long long v229 = *(&off_26516F8A0 + (v25 - 1));
    if (v25) {
      goto LABEL_19;
    }
LABEL_18:
    int v26 = 0;
    goto LABEL_20;
  }
  *(void *)&long long v229 = &texFormatUnsupported;
  if (!v25) {
    goto LABEL_18;
  }
LABEL_19:
  int v26 = 2;
LABEL_20:
  int v27 = v24 | v26;
  DWORD2(v224) = v24 | v26;
  size_t v28 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 2), "_descriptorPrivate");
  if (!v28)
  {
    *((void *)&v229 + 1) = &texFormatUnsupported;
    goto LABEL_26;
  }
  uint64_t v29 = *v28 >> 36;
  if ((v29 - 1) <= 0x284)
  {
    *((void *)&v229 + 1) = *(&off_26516F8A0 + (v29 - 1));
    if (v29) {
      goto LABEL_27;
    }
LABEL_26:
    int v30 = 0;
    goto LABEL_28;
  }
  *((void *)&v229 + 1) = &texFormatUnsupported;
  if (!v29) {
    goto LABEL_26;
  }
LABEL_27:
  int v30 = 4;
LABEL_28:
  size_t v31 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 3), "_descriptorPrivate");
  if (!v31)
  {
    *(void *)&long long v230 = &texFormatUnsupported;
    goto LABEL_34;
  }
  uint64_t v32 = *v31 >> 36;
  if ((v32 - 1) <= 0x284)
  {
    *(void *)&long long v230 = *(&off_26516F8A0 + (v32 - 1));
    if (v32) {
      goto LABEL_35;
    }
LABEL_34:
    int v33 = 0;
    goto LABEL_36;
  }
  *(void *)&long long v230 = &texFormatUnsupported;
  if (!v32) {
    goto LABEL_34;
  }
LABEL_35:
  int v33 = 8;
LABEL_36:
  int v34 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 4), "_descriptorPrivate");
  if (!v34)
  {
    *((void *)&v230 + 1) = &texFormatUnsupported;
    goto LABEL_42;
  }
  uint64_t v35 = *v34 >> 36;
  if ((v35 - 1) <= 0x284)
  {
    *((void *)&v230 + 1) = *(&off_26516F8A0 + (v35 - 1));
    if (v35) {
      goto LABEL_43;
    }
LABEL_42:
    int v36 = 0;
    goto LABEL_44;
  }
  *((void *)&v230 + 1) = &texFormatUnsupported;
  if (!v35) {
    goto LABEL_42;
  }
LABEL_43:
  int v36 = 16;
LABEL_44:
  int v37 = v30 | v33 | v36 | v27;
  DWORD2(v224) = v37;
  uint64_t v38 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 5), "_descriptorPrivate");
  if (!v38)
  {
    *(void *)&long long v231 = &texFormatUnsupported;
    goto LABEL_50;
  }
  uint64_t v39 = *v38 >> 36;
  if ((v39 - 1) <= 0x284)
  {
    *(void *)&long long v231 = *(&off_26516F8A0 + (v39 - 1));
    if (v39) {
      goto LABEL_51;
    }
LABEL_50:
    int v40 = 0;
    goto LABEL_52;
  }
  *(void *)&long long v231 = &texFormatUnsupported;
  if (!v39) {
    goto LABEL_50;
  }
LABEL_51:
  int v40 = 32;
LABEL_52:
  char v41 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 6), "_descriptorPrivate");
  if (!v41)
  {
    *((void *)&v231 + 1) = &texFormatUnsupported;
    goto LABEL_58;
  }
  uint64_t v42 = *v41 >> 36;
  if ((v42 - 1) <= 0x284)
  {
    *((void *)&v231 + 1) = *(&off_26516F8A0 + (v42 - 1));
    if (v42) {
      goto LABEL_59;
    }
LABEL_58:
    int v43 = 0;
    goto LABEL_60;
  }
  *((void *)&v231 + 1) = &texFormatUnsupported;
  if (!v42) {
    goto LABEL_58;
  }
LABEL_59:
  int v43 = 64;
LABEL_60:
  int v44 = objc_msgSend((id)objc_msgSend(v17, "_descriptorAtIndex:", 7), "_descriptorPrivate");
  if (!v44)
  {
    *(void *)&long long v232 = &texFormatUnsupported;
    goto LABEL_66;
  }
  uint64_t v45 = *v44 >> 36;
  if ((v45 - 1) <= 0x284)
  {
    *(void *)&long long v232 = *(&off_26516F8A0 + (v45 - 1));
    if (v45) {
      goto LABEL_67;
    }
LABEL_66:
    int v46 = 0;
    goto LABEL_68;
  }
  *(void *)&long long v232 = &texFormatUnsupported;
  if (!v45) {
    goto LABEL_66;
  }
LABEL_67:
  int v46 = 128;
LABEL_68:
  DWORD2(v224) = v40 | v43 | v46 | v37;
  uint64_t v47 = *(void *)(v16 + 184);
  if (!v47) {
    LOBYTE(v47) = [a2 sampleCount];
  }
  BYTE4(v226) = v47;
  uint64_t v48 = *(void *)(v16 + 216);
  if (!v48) {
    LOBYTE(v4_Block_object_dispose(&a9, 8) = [a2 sampleCount];
  }
  BYTE5(v226) = v48;
  AGX::FramebufferCompilerConfigGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildDrawBufferState((uint64_t)&v222, 0);
  long long v158 = v222;
  long long v159 = v223;
  uint64_t v160 = v224;
  int v49 = (void *)[a2 driverCompilerOptions];
  uint64_t v50 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count");
  int v51 = [a2 supportAddingFragmentBinaryFunctions];
  if (objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"disableTextureRWBoundsCheck"), "BOOLValue"))int v52 = 4; {
  else
  }
    int v52 = 0;
  unsigned int v156 = v156 & 0xFFFFFFFB | v52;
  unsigned __int16 v53 = objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"maxNumRegisters"), "unsignedIntValue");
  unsigned int v156 = v156 & 0xFC0003FF | (v53 << 10);
  if (objc_msgSend((id)objc_msgSend(v49, "objectForKeyedSubscript:", @"agx_enable_stack_shadow"), "BOOLValue"))int v54 = 0x8000000; {
  else
  }
    int v54 = 0;
  if (v50) {
    int v55 = 1;
  }
  else {
    int v55 = v51;
  }
  if (v55) {
    int v56 = 512;
  }
  else {
    int v56 = 0;
  }
  unsigned int v156 = v54 | v156 & 0xF7FFFDFF | v56;
  uint64_t v57 = 0;
  uint64_t v58 = *(void **)[a2 _descriptorPrivate];
  do
  {
    uint64_t v67 = (void *)[v58 _descriptorAtIndex:v57];
    uint64_t v68 = v67;
    if (v67 && [v67 pixelFormat])
    {
      if ([v68 isBlendingEnabled])
      {
        v155[v57] |= 1u;
        unint64_t v69 = [v68 sourceRGBBlendFactor];
        int v70 = 2 * v69 + 2;
        if (v69 >= 0x13) {
          int v70 = 0;
        }
        v155[v57] = v155[v57] & 0xFFFFFFC1 | v70;
        unint64_t v71 = [v68 destinationRGBBlendFactor];
        int v72 = (v71 << 6) + 64;
        if (v71 >= 0x13) {
          int v72 = 0;
        }
        v155[v57] = v155[v57] & 0xFFFFF83F | v72;
        unint64_t v73 = [v68 sourceAlphaBlendFactor];
        int v74 = (v73 << 11) + 2048;
        if (v73 >= 0x13) {
          int v74 = 0;
        }
        v155[v57] = v155[v57] & 0xFFFF07FF | v74;
        unint64_t v75 = [v68 destinationAlphaBlendFactor];
        int v76 = (v75 << 16) + 0x10000;
        if (v75 >= 0x13) {
          int v76 = 0;
        }
        v155[v57] = v155[v57] & 0xFFE0FFFF | v76;
        unint64_t v77 = [v68 rgbBlendOperation];
        if (v77 > 4) {
          int v78 = 0;
        }
        else {
          int v78 = dword_242EB34D8[v77];
        }
        v155[v57] = v155[v57] & 0xFF1FFFFF | v78;
        unint64_t v79 = [v68 alphaBlendOperation];
        if (v79 <= 4) {
          int v59 = dword_242EB34EC[v79];
        }
        else {
          int v59 = 0;
        }
        v155[v57] = v155[v57] & 0xF8FFFFFF | v59;
      }
      char v60 = [v68 writeMask];
      int v61 = 1 << v57;
      if ((v60 & 8) == 0) {
        int v61 = 0;
      }
      int v62 = 256 << v57;
      if ((v60 & 4) == 0) {
        LOWORD(v62) = 0;
      }
      int v63 = ((unsigned __int16)v62 | (unsigned __int16)v153) & 0xFF00;
      int v64 = 0x10000 << v57;
      if ((v60 & 2) == 0) {
        int v64 = 0;
      }
      int v65 = (v64 | v153) & 0xFF0000;
      int v66 = 0x1000000 << v57;
      if ((v60 & 1) == 0) {
        int v66 = 0;
      }
      unsigned int v153 = v153 & 0xFF0000FF | v66 | v61 | v63 | v65;
    }
    ++v57;
  }
  while (v57 != 8);
  if ([a2 isLogicOperationEnabled]) {
    int v80 = 32;
  }
  else {
    int v80 = 0;
  }
  unsigned int v152 = v152 & 0xFFFFFFDF | v80;
  unint64_t v81 = [a2 logicOperation];
  if (v81 > 0xF) {
    int v82 = 0;
  }
  else {
    int v82 = dword_242EB3478[v81];
  }
  unsigned int v152 = v152 & 0xFFFFF83F | v82;
  if ([a2 isAlphaTestEnabled]) {
    int v83 = 2048;
  }
  else {
    int v83 = 0;
  }
  unsigned int v152 = v152 & 0xFFFFF7FF | v83;
  unint64_t v84 = [a2 alphaTestFunction];
  if (v84 > 7) {
    int v85 = 0;
  }
  else {
    int v85 = dword_242EB34B8[v84];
  }
  unsigned int v152 = v152 & 0xFFFF0FFF | v85;
  if ([a2 isPointSmoothEnabled]) {
    unsigned int v86 = 0x10000;
  }
  else {
    unsigned int v86 = 0;
  }
  unsigned int v152 = v152 & 0xFFFAFFFF | ((HIWORD(v86) & 1) << 18) | v86;
  v155[8] = [a2 fragmentDepthCompareClampMask];
  if ([a2 isDepthStencilWriteDisabled]) {
    int v87 = 16;
  }
  else {
    int v87 = 0;
  }
  unsigned int v152 = v152 & 0xFFFFFFEF | v87;
  int v88 = [a2 sampleMask];
  int v89 = [a2 isAlphaToCoverageEnabled];
  unsigned int v152 = v152 & 0xFFFFFFFE | v89;
  if ([a2 isAlphaToOneEnabled]) {
    int v90 = 2;
  }
  else {
    int v90 = 0;
  }
  unsigned int v152 = v152 & 0xFFFFFFFD | v90;
  if ([a2 openGLModeEnabled])
  {
    int v91 = [a2 sampleCoverageInvert];
    [a2 sampleCoverage];
    float v93 = 1.0;
    if (v91) {
      float v93 = 0.0;
    }
    int v94 = 4 * (v92 != v93);
    if (v88 != -1) {
      int v94 = 4;
    }
    unsigned int v152 = v152 & 0xFFFFFFFB | v94;
    if ([a2 sampleCoverageInvert]) {
      int v95 = 8;
    }
    else {
      int v95 = 0;
    }
    unsigned int v96 = v152 & 0xFFFFFFF7 | v95;
  }
  else
  {
    [a2 sampleCoverage];
    if (v88 == -1 && v97 == 1.0) {
      int v99 = 0;
    }
    else {
      int v99 = 4;
    }
    unsigned int v96 = v99 | v152 & 0xFFFFFFFB;
  }
  unsigned int v152 = v96;
  v157 &= 0xFFFFFFFC;
  if ([a2 openGLModeEnabled]) {
    int v100 = 2;
  }
  else {
    int v100 = 0;
  }
  unsigned int v157 = v157 & 0xFFFFFFFD | v100;
  std::string v101 = (void *)[a2 fragmentBuffers];
  uint64_t v102 = 0;
  for (uint64_t i = 0; i != 31; ++i)
  {
    uint64_t v104 = objc_msgSend((id)objc_msgSend(v101, "_descriptorAtIndex:", i), "mutability");
    uint64_t v105 = 1 << i;
    if (v104 != 1) {
      uint64_t v105 = 0;
    }
    v102 |= v105;
  }
  uint64_t v154 = v102;
  char v165 = [a2 supportIndirectCommandBuffers];
  if ([a2 needsCustomBorderColorSamplers]) {
    int v106 = 4;
  }
  else {
    int v106 = 0;
  }
  unsigned int v157 = v157 & 0xFFFFFFFB | v106;
  uint64_t v107 = [a2 textureWriteRoundingMode];
  int v108 = 16 * (v107 == 1);
  if (v107 == 2) {
    int v108 = 32;
  }
  unsigned int v157 = v108 | v157 & 0xFFFFFFCF;
  uint64_t v109 = [a2 meshFunction];
  unsigned int v157 = v157 & 0xFFFFFEFF | ((v109 != 0) << 8);
  if ([a2 supportAddingFragmentBinaryFunctions]) {
    int v110 = 64;
  }
  else {
    int v110 = (objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "fragmentLinkedFunctions"), "binaryFunctions"), "count") != 0) << 6;
  }
  unsigned int v157 = v157 & 0xFFFFFDBF | v110;
  v156 &= ~0x80u;
  v152 &= ~0x10u;
  [a2 supportIndirectCommandBuffers];
  uint64_t v111 = a3[101];
  int v112 = *(unsigned __int8 *)(v111 + 7440);
  LODWORD(v111) = *(_DWORD *)(v111 + 7288);
  unsigned int v113 = ((v111 << 29) & 0x40000000 | v156 & 0x8BFFFEFF | (v112 << 26)) ^ 0x40000000;
  unsigned int v114 = v157 & 0xFFFFF7F7 | (v111 >> 7) & 8;
  unsigned int v156 = v113;
  unsigned int v157 = v114;
  uint64_t v170 = a4 & 0xC0040000;
  if ((a4 & 0x40000) != 0)
  {
    if (AGX::isTelemetryEnabled(void)::once != -1) {
      dispatch_once(&AGX::isTelemetryEnabled(void)::once, &__block_literal_global_6424);
    }
    int v115 = 1;
    unsigned int v113 = v156;
    unsigned int v114 = v157;
  }
  else
  {
    int v115 = 0;
  }
  unsigned int v156 = (a4 >> 21) & 8 | v115 | v113 & 0xFFFFFFF4;
  unsigned int v157 = v114 & 0xFFFFFF7F | (((a4 >> 21) & 1) << 7);
  uint64_t v116 = a8;
  if (a8)
  {
    if (*(char *)(a8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v147, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
      uint64_t v116 = a8;
    }
    else
    {
      std::string v147 = *(std::string *)a8;
    }
    if (*(char *)(v116 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v148, *(const std::string::value_type **)(v116 + 24), *(void *)(v116 + 32));
    }
    else {
      std::string v148 = *(std::string *)(v116 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v147;
    *((unsigned char *)&v147.__r_.__value_.__s + 23) = 0;
    v147.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v162.__r_.__value_.__l.__data_);
    }
    std::string v162 = v148;
    *((unsigned char *)&v148.__r_.__value_.__s + 23) = 0;
    v148.__r_.__value_.__s.__data_[0] = 0;
  }
  ReflectionKey::initGPUCompilerSPIOptionsHash((uint64_t)&v222, (void *)[a2 gpuCompilerSPIOptions]);
  long long v220 = v222;
  long long v221 = v223;
  unint64_t CompileOptions = AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions((uint64_t)a7, a4 | 3, (uint64_t)&v220);
  LOBYTE(v173) = 0;
  uint64_t v118 = (dispatch_group_t *)AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(a7, (uint64_t)v149, &v173, CompileOptions, v136 != 0);
  uint64_t v119 = v118;
  if ((_BYTE)v173)
  {
    uint64_t v120 = objc_msgSend((id)objc_msgSend(a2, "pipelineLibrary"), "pipelineCache");
    uint64_t v121 = (void *)[a2 pipelineLibrary];
    if ([v121 pipelineCache] && (objc_msgSend(v121, "disableRunTimeCompilation") & 1) != 0) {
      LOBYTE(v122) = 1;
    }
    else {
      unsigned int v122 = (objc_msgSend((id)objc_msgSend(a2, "binaryArchives"), "count") != 0) & (v142 >> 2);
    }
    char v134 = v122;
    if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
      IOGPUDeviceTraceEvent();
    }
    int v123 = objc_opt_new();
    [v123 setSync:a10 ^ 1u];
    [v123 setFunction:v140];
    [v123 setFrameworkData:a9];
    [v123 setPipelineCache:v120];
    [v123 setDestinationBinaryArchive:v136];
    objc_msgSend(v123, "setBinaryArchives:", objc_msgSend(a2, "binaryArchives"));
    [v123 setPipelineOptions:v142 | 3];
    if ((v142 & 0x330003) == 0) {
      objc_msgSend(v123, "setPipelineOptions:", objc_msgSend(v123, "pipelineOptions") | 0x8000);
    }
    char v124 = [a2 newPipelineScript];
    if (v124)
    {
      [v123 setAirScript:v124];
      dispatch_release(v124);
    }
    objc_msgSend(v123, "setGpuCompilerSPIOptions:", objc_msgSend(a2, "gpuCompilerSPIOptions"));
    unint64_t v125 = (void *)[a2 fragmentLinkedFunctions];
    objc_msgSend(v123, "setVisibleFunctions:", objc_msgSend(v125, "functions"));
    objc_msgSend(v123, "setVisibleFunctionGroups:", objc_msgSend(v125, "groups"));
    objc_msgSend(v123, "setPrivateVisibleFunctions:", objc_msgSend(v125, "privateFunctions"));
    uint64_t v137 = [a2 maxFragmentCallStackDepth];
    int v126 = (void *)[a2 fragmentLinkedFunctions];
    char v135 = [a2 supportIndirectCommandBuffers];
    char v133 = [a2 supportAddingFragmentBinaryFunctions];
    uint64_t v127 = [a2 gpuCompilerSPIOptions];
    char v128 = [a3 requiresRaytracingEmulation];
    v200[0] = MEMORY[0x263EF8330];
    v200[1] = 3321888768;
    v200[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke;
    v200[3] = &unk_26F851E48;
    v200[7] = v171;
    v200[4] = v140;
    unsigned __int8 v217 = a10;
    v200[8] = a1;
    v200[9] = v119;
    AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v201, (const AGX::Impl::FragmentProgramKey *)v149);
    int v201 = (uint64_t (**)())&unk_26F852E88;
    uint64_t v214 = v170;
    int v215 = v144;
    unint64_t v216 = CompileOptions;
    long long v218 = v220;
    long long v219 = v221;
    v200[5] = a3;
    v200[6] = a2;
    v145[0] = MEMORY[0x263EF8330];
    v145[1] = 3221225472;
    v145[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2;
    v145[3] = &unk_26516F090;
    v145[4] = v200;
    v145[5] = v119;
    char v146 = v134;
    if ((v128 & 1) == 0
      && AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasAirLinkedIntersectionFunction(v126))
    {
      LOBYTE(v222) = v128;
      *((void *)&v222 + 1) = v137;
      long long v223 = (unint64_t)v126;
      *(void *)&long long v224 = 0;
      *((void *)&v224 + 1) = v142;
      v225[0] = a6;
      v225[1] = a3;
      v225[2] = 0;
      LOBYTE(v225[3]) = v135;
      BYTE1(v225[3]) = v133;
      uint64_t v226 = v127;
      AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::FragmentProgramKey,true>(a1, (uint64_t)v149, v123, &v222, (uint64_t)v145);
    }
    else
    {
      uint64_t v129 = *a1;
      v172[0] = MEMORY[0x263EF8330];
      v172[1] = 3221225472;
      v172[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20compileFunction_ImplINS_18FragmentProgramKeyEEEvRKT_P29MTLCompileFunctionRequestDataRKNS5_21DriverRequestDataImplILb1EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplILb1EEEE_block_invoke;
      v172[3] = &unk_26516F018;
      v172[4] = v145;
      *(void *)&long long v222 = MEMORY[0x263EF8330];
      *((void *)&v222 + 1) = 3221225472;
      *(void *)&long long v223 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
      *((void *)&v223 + 1) = &unk_26516F7C0;
      *(void *)&long long v224 = v172;
      AGX::Compiler::compileProgram<AGX::FragmentProgramKey,AGCDeserializedReply>(v129, (uint64_t)v149, v123, (uint64_t)&v222);
    }

    int v201 = (uint64_t (**)())&unk_26F854050;
    if (v212)
    {
      uint64_t v213 = v212;
      operator delete(v212);
    }
    if (v210)
    {
      uint64_t v211 = v210;
      operator delete(v210);
    }
    if (v209 < 0)
    {
      operator delete(v208);
      if ((v207 & 0x80000000) == 0)
      {
LABEL_202:
        if ((v205 & 0x80000000) == 0) {
          goto LABEL_203;
        }
LABEL_237:
        operator delete(v204);
LABEL_203:
        int v201 = off_26F852E48;
        if (v202)
        {
          uint64_t v203 = v202;
          operator delete(v202);
        }
        goto LABEL_207;
      }
    }
    else if ((v207 & 0x80000000) == 0)
    {
      goto LABEL_202;
    }
    operator delete(v206);
    if ((v205 & 0x80000000) == 0) {
      goto LABEL_203;
    }
    goto LABEL_237;
  }
  if ((CompileOptions & 0x330003) != 0)
  {
    long long v130 = *a1;
    v197[0] = MEMORY[0x263EF8330];
    v197[1] = 3221225472;
    v197[2] = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_3;
    v197[3] = &unk_26516EEF0;
    long long v198 = v220;
    long long v199 = v221;
    v197[5] = a7;
    v197[4] = a3;
    v197[6] = CompileOptions;
    v197[7] = v118;
    [*v130 reflectionWithFunction:v140 options:CompileOptions & 0x330003 sync:a10 ^ 1u completionHandler:v197];
  }
LABEL_207:
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3321888768;
  std::string::size_type v175 = ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_4;
  unint64_t v176 = &unk_26F851E80;
  int64x2_t v179 = v119;
  int v180 = v144;
  AGX::Impl::FragmentProgramKey::FragmentProgramKey((AGX::Impl::FragmentProgramKey *)&v181, (const AGX::Impl::FragmentProgramKey *)v149);
  unsigned int v181 = (uint64_t (**)())&unk_26F852E88;
  uint64_t v194 = v170;
  long long v195 = v220;
  long long v196 = v221;
  uint64_t v177 = a11;
  int v178 = v171;
  long long v131 = *v119;
  if (a10)
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_group_notify(v131, global_queue, block);
  }
  else
  {
    dispatch_group_wait(*v119, 0xFFFFFFFFFFFFFFFFLL);
    v175((uint64_t)block);
  }
  unsigned int v181 = (uint64_t (**)())&unk_26F854050;
  if (v192)
  {
    int v193 = v192;
    operator delete(v192);
  }
  if (v190)
  {
    int v191 = v190;
    operator delete(v190);
  }
  if ((v189 & 0x80000000) == 0)
  {
    if ((v187 & 0x80000000) == 0) {
      goto LABEL_216;
    }
LABEL_230:
    operator delete(v186);
    if ((v185 & 0x80000000) == 0) {
      goto LABEL_217;
    }
    goto LABEL_231;
  }
  operator delete(v188);
  if (v187 < 0) {
    goto LABEL_230;
  }
LABEL_216:
  if ((v185 & 0x80000000) == 0) {
    goto LABEL_217;
  }
LABEL_231:
  operator delete(v184);
LABEL_217:
  unsigned int v181 = off_26F852E48;
  if (v182)
  {
    int v183 = v182;
    operator delete(v182);
  }
  v149[0] = &unk_26F854050;
  if (v168)
  {
    int32x2_t v169 = v168;
    operator delete(v168);
  }
  if (v166)
  {
    unsigned int v167 = v166;
    operator delete(v166);
  }
  if ((v164 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v162.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_225;
    }
LABEL_233:
    operator delete(v162.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_226;
    }
    goto LABEL_234;
  }
  operator delete(v163);
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_233;
  }
LABEL_225:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_226;
  }
LABEL_234:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_226:
  v149[0] = off_26F852E48;
  if (v150)
  {
    long long v151 = v150;
    operator delete(v150);
  }
  _Block_object_dispose(v171, 8);
}

void sub_2429DD498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v71 = (void *)STACK[0x5F0];
  if (STACK[0x5F0])
  {
    STACK[0x5F8] = (unint64_t)v71;
    operator delete(v71);
  }
  int v72 = (void *)STACK[0x5D0];
  if (STACK[0x5D0])
  {
    STACK[0x5D8] = (unint64_t)v72;
    operator delete(v72);
  }
  std::unique_ptr<AGX::PipelineScript>::~unique_ptr[abi:nn180100]((dispatch_object_t **)&STACK[0x240]);
  _Block_object_dispose(&a70, 8);
  _Unwind_Resume(a1);
}

unint64_t AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateCompileOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 & 0x330003;
  if ((a2 & 0x330003) != 0)
  {
    uint64_t v7 = (os_unfair_lock_s *)(a1 + 1688);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1688));
    uint64_t v8 = *(void **)(a1 + 1648);
    uint64_t v9 = *(unsigned int *)(a1 + 1656);
    uint64_t v10 = (void *)VectorMap<ReflectionKey,AGX::Program<AGX::HAL200::IntersectionProgramVariant,AGX::UserIntersectionProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::ReflectionEntry,4u>::find(v8, *(_DWORD *)(a1 + 1656), (void *)a3);
    if (!v10)
    {
      if (v9 == 4) {
        operator new();
      }
      id v11 = &v8[4 * v9];
      long long v12 = *(_OWORD *)(a3 + 16);
      *id v11 = *(_OWORD *)a3;
      v11[1] = v12;
      uint64_t v13 = *(void *)(a1 + 1648);
      unsigned int v14 = *(_DWORD *)(a1 + 1656);
      *(_DWORD *)(a1 + 1656) = v14 + 1;
      uint64_t v10 = (void *)(v13 + 24 * v14 + 128);
    }
    if ((v4 & ~v10[1]) != 0)
    {
      uint64_t v15 = *v10 | v4;
      *uint64_t v10 = v15;
    }
    else
    {
      uint64_t v15 = 0;
    }
    os_unfair_lock_unlock(v7);
  }
  else
  {
    uint64_t v15 = 0;
  }
  return v15 | a2 & 0xFFFFFFFFFFCCFFFCLL;
}

void sub_2429DD6E8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::getOrCreateVariantEntry(os_unfair_lock_s *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  *a3 = 0;
  if ((a4 & 4) != 0 || a5) {
    operator new();
  }
  uint64_t v9 = a1 + 422;
  os_unfair_lock_lock(a1 + 422);
  uint64_t v10 = VectorMap<AGX::FragmentProgramKey,AGX::ProgramVariantEntry<AGX::HAL200::FragmentProgramVariant>,4u>::operator[]((uint64_t)a1, a2);
  if (!*v10)
  {
    long long v12 = dispatch_group_create();
    *uint64_t v10 = v12;
LABEL_10:
    dispatch_group_enter(v12);
    *a3 = 1;
    goto LABEL_11;
  }
  if (*((unsigned char *)v10 + 40))
  {
    uint64_t v11 = v10[1];
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    v10[1] = 0;
    v10[2] = 0;

    v10[3] = 0;
    v10[4] = 0;
    *((unsigned char *)v10 + 40) = 0;
    long long v12 = *v10;
    goto LABEL_10;
  }
  if ((*(void *)&a4 & 0x330003) != 0) {
    dispatch_group_enter((dispatch_group_t)*v10);
  }
LABEL_11:
  os_unfair_lock_unlock(v9);
  return v10;
}

void sub_2429DD848(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, unsigned char *a6)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = objc_alloc_init(MEMORY[0x263EFF9A0]);
  AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::fillCompilePerformanceStatisticsDictionary(*(NSObject **)a3, *(void *)(a3 + 8), *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40), *(void *)(a3 + 56), [*(id *)(a1 + 32) name], *(unsigned char *)(a1 + 384));
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v11)
  {
    long long v12 = (void *)[v11 objectForKey:*MEMORY[0x263F12630]];
    if (v12) {
      [v12 unsignedLongLongValue];
    }
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  *a4 = *(void *)(a3 + 40);
  *a5 = *(void *)(a3 + 48);
  *a6 = 0;
  uint64_t v13 = *a4;
  if (!*a4)
  {
    if (*(unsigned char *)(a1 + 304)
      && (AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(a2, 0) & 1) == 0)
    {
      *a4 = 2;
      *a5 = @"Fragment shader cannot be used with indirect command buffers";
      *a6 = 1;
      uint64_t v13 = *a4;
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  AGX::Program<AGX::HAL200::FragmentProgramVariant,AGX::FragmentProgramKey,AGX::HAL200::IndirectArgumentLayout,AGXG17FamilyIndirectArgumentBufferLayout>::signalPending(*(void *)(a1 + 368), *(void *)(a1 + 376), *(NSObject **)(a3 + 16), a1 + 385, *(void **)(a1 + 40), v13);
  if (!*a4)
  {
    [*(id *)(a1 + 48) needsCustomBorderColorSamplers];
    unsigned int v14 = (void *)[*(id *)(a1 + 48) profileControl];
    if (v14)
    {
      uint64_t v15 = v14;
      [v14 uscCliqueTraceLevel];
      [v15 uscEmitPosition];
      [v15 uscEmitThreadControlFlow];
    }
    operator new();
  }
  return 0;
}

void sub_2429DDD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  if (*(char *)(v6 - 97) < 0) {
    operator delete(*(void **)(v6 - 120));
  }
  MEMORY[0x24566ED90](v5, 0x10F3C40CE3AE0ADLL);
  _Unwind_Resume(a1);
}

AGX::Impl::FragmentProgramKey *AGX::Impl::FragmentProgramKey::FragmentProgramKey(AGX::Impl::FragmentProgramKey *this, const AGX::Impl::FragmentProgramKey *a2)
{
  *(void *)this = off_26F852E48;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v4 = (unsigned char *)*((void *)a2 + 3);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      abort();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    *((void *)this + 2) = v7;
    *((void *)this + 3) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *((void *)this + 4) = v8;
    memcpy(v7, v5, v6);
    *((void *)this + 3) = v8;
  }
  *(void *)this = &unk_26F854050;
  long long v9 = *(_OWORD *)((char *)a2 + 40);
  long long v10 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 56) = v10;
  *(_OWORD *)((char *)this + 40) = v9;
  long long v11 = *(_OWORD *)((char *)a2 + 88);
  long long v12 = *(_OWORD *)((char *)a2 + 104);
  long long v13 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v13;
  *(_OWORD *)((char *)this + 104) = v12;
  *(_OWORD *)((char *)this + 8_Block_object_dispose(&a9, 8) = v11;
  if (*((char *)a2 + 175) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 152), *((const std::string::value_type **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v14 = *(_OWORD *)((char *)a2 + 152);
    *((void *)this + 21) = *((void *)a2 + 21);
    *(_OWORD *)((char *)this + 152) = v14;
  }
  uint64_t v15 = (std::string *)((char *)this + 176);
  if (*((char *)a2 + 199) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v16 = *((_OWORD *)a2 + 11);
    *((void *)this + 24) = *((void *)a2 + 24);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  }
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v17 = *(_OWORD *)((char *)a2 + 200);
    *((void *)this + 27) = *((void *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v17;
  }
  char v18 = *((unsigned char *)a2 + 224);
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 224) = v18;
  *((void *)this + 30) = 0;
  *((void *)this + 31) = 0;
  int v20 = (unsigned char *)*((void *)a2 + 29);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 30);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (v21 < 0) {
      abort();
    }
    int v22 = (char *)operator new(v19 - v20);
    *((void *)this + 29) = v22;
    *((void *)this + 30) = v22;
    size_t v23 = &v22[32 * (v21 >> 5)];
    *((void *)this + 31) = v23;
    memcpy(v22, v20, v21);
    *((void *)this + 30) = v23;
  }
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  uint64_t v25 = (unsigned char *)*((void *)a2 + 32);
  int v24 = (unsigned char *)*((void *)a2 + 33);
  int64_t v26 = v24 - v25;
  if (v24 != v25)
  {
    if (v26 < 0) {
      abort();
    }
    int v27 = (char *)operator new(v24 - v25);
    *((void *)this + 32) = v27;
    *((void *)this + 33) = v27;
    size_t v28 = &v27[32 * (v26 >> 5)];
    *((void *)this + 34) = v28;
    memcpy(v27, v25, v26);
    *((void *)this + 33) = v28;
  }
  return this;
}

void sub_2429DDFAC(_Unwind_Exception *a1)
{
  AGX::VertexProgramVaryings::~VertexProgramVaryings(v3);
  *uint64_t v1 = v2;
  uint64_t v5 = (void *)v1[2];
  if (v5)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX23UserCommonShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE28createFragmentProgramVariantI27MTLRenderPipelineDescriptorEEvPT_P18AGXG17FamilyDevicemP25AGXG17FamilyBinaryArchiveP7NSArrayPNS1_15FragmentProgramEPKNS_21VertexProgramVaryingsEPU27objcproto16OS_dispatch_data8NSObjectbU13block_pointerFvPNS1_22FragmentProgramVariantE13ReflectionKeyP19NSMutableDictionary16MTLCompilerErrorP8NSStringSN_E_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v18 = 0;
  uint64_t v19 = 0;
  unsigned __int8 v17 = 0;
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v8 = v7;
  if (v7)
  {
    v7[69] = *a4;
    v7[70] = a4[1];
    if (v7 + 69 != a4) {
      std::vector<AGX::HAL200::IntersectionFunctionVariantSet>::__assign_with_size[abi:nn180100]<AGX::HAL200::IntersectionFunctionVariantSet*,AGX::HAL200::IntersectionFunctionVariantSet*>(v7 + 72, a4[3], a4[4], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[4] - a4[3]) >> 4));
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  long long v11 = v18;
  uint64_t v10 = v19;
  long long v12 = *(void **)(a3 + 32);
  int v13 = *(unsigned __int8 *)(a1 + 48);
  int v14 = v17;
  *(void *)(v9 + _Block_object_dispose(&a9, 8) = v8;
  *(void *)(v9 + 16) = v10;

  *(void *)(v9 + 24) = [v11 copy];
  if (*(void *)(v9 + 8))
  {

    *(void *)(v9 + 32) = v12;
  }
  else
  {
    if (v13) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 0;
    }
    char v16 = v15;
    *(unsigned char *)(v9 + 40) = v16;
  }
  dispatch_group_leave(*(dispatch_group_t *)v9);
}

void AGX::UserShaderFactory<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::compileFunctionWithAirLinkedIntersectionFunction_Impl<AGX::FragmentProgramKey,true>(void ***a1, uint64_t a2, void *a3, long long *a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a1;
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 3221225472;
  long long v8 = a4[3];
  long long v26 = a4[2];
  long long v27 = v8;
  long long v28 = a4[4];
  long long v9 = a4[1];
  long long v24 = *a4;
  v23[2] = ___ZN3AGX17UserShaderFactoryINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE53compileFunctionWithAirLinkedIntersectionFunction_ImplINS_18FragmentProgramKeyELb1EEENSt3__19enable_ifIXT0_EvE4typeERKT_P29MTLCompileFunctionRequestDataNS5_21DriverRequestDataImplIXT0_EEEU13block_pointerFvRK20AGCDeserializedReplyRKNS_28CompileFunctionReplyMetadataERKNS5_19DriverReplyDataImplIXT0_EEEE_block_invoke;
  v23[3] = &unk_26516EF18;
  v23[5] = a5;
  v23[6] = a1;
  uint64_t v10 = *((void *)a4 + 10);
  long long v25 = v9;
  v23[4] = a3;
  uint64_t v29 = v10;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 3221225472;
  _OWORD v30[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_RKNS_28CompileFunctionReplyMetadataEE_block_invoke;
  v30[3] = &unk_26516F7C0;
  v30[4] = v23;
  size_t v31 = 0;
  uint64_t v32 = 0;
  (*(void (**)(uint64_t, const void **, size_t *))(*(void *)a2 + 16))(a2, &v32, &v31);
  long long v11 = dispatch_data_create(v32, v31, 0, 0);
  [a3 setDriverKeyData:v11];
  if ([a3 airScript])
  {
    long long v12 = [a3 airScript];
    long long v40 = 0uLL;
    v41[0] = 0;
    *(void *)&long long v40 = dispatch_data_create_map(v12, (const void **)&v40 + 1, v41);
    uint64_t v13 = *((void *)&v40 + 1);
    uint64_t v14 = **((_DWORD **)&v40 + 1);
    CC_SHA256_Init(&c);
    (**(void (***)(uint64_t, CC_SHA256_CTX *))a2)(a2, &c);
    *(void *)leunint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v13 + v14), &data, (size_t *)len, v15, v16))
    {
      unsigned __int8 v17 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v17);
    }
    CC_SHA256_Final(md, &c);
    dispatch_release((dispatch_object_t)v40);
    long long v40 = *(_OWORD *)md;
    *(_OWORD *)char v41 = v37;
    [a3 setVendorPluginFunctionId:&v40];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = a3;
  *(void *)c.wbuf = v30;
  if ([a3 function])
  {
    uint64_t v18 = mach_absolute_time();
    uint64_t v19 = *v7;
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v37 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v39 = v18;
    [v19 compileFunctionRequest:a3 completionHandler:md];
  }
  else
  {
    if ([a3 frameworkData] || objc_msgSend(a3, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)long long md = MEMORY[0x263EF8330];
    *(void *)&md[8] = 3221225472;
    *(void *)&long long v37 = ___ZN3AGX8Compiler14compileProgramINS_18FragmentProgramKeyE13AGCReplyArrayEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v37 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    BOOL v20 = objc_msgSend((id)objc_msgSend(a3, "binaryArchives"), "count") == 0;
    int64_t v21 = *v7;
    uint64_t v22 = [a3 driverKeyData];
    if (v20) {
      objc_msgSend(v21, "compileRequest:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
    else {
      objc_msgSend(v21, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v22, objc_msgSend(a3, "binaryArchives"), 0, objc_msgSend(a3, "pipelineCache"), objc_msgSend(a3, "sync"), md);
    }
  }
  dispatch_release(v11);
}