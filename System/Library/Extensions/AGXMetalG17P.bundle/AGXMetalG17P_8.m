uint64_t AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::EslBuilder::~EslBuilder(uint64_t a1)
{
  std::deque<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block,std::allocator<AGX::ControlFlowContext<AGX::HAL200::ComputeControlFlowEmitter,AGX::HAL200::ComputeUSCStateLoader,AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::ControlFlowDelegate>::Block>>::~deque[abi:nn180100](a1 + 64);
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 32));
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(a1 + 8));
  return a1;
}

__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  unint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a3 + 24);
  if (v6 >= *(void *)(a1 + 24))
  {
    if (v7 < v6)
    {
      uint64_t v12 = *(void *)(a2 + 32);
      result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      int v14 = *(_DWORD *)(a3 + 32);
      long long v15 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v15;
      *(_DWORD *)(a2 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      *(_DWORD *)(a3 + 32) = v12;
      if (*(void *)(a2 + 24) < *(void *)(a1 + 24))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        int v18 = *(_DWORD *)(a2 + 32);
        long long v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
        *(_DWORD *)(a1 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
        *(_DWORD *)(a2 + 32) = v16;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      result = *(__n128 *)a1;
      long long v9 = *(_OWORD *)(a1 + 16);
      int v10 = *(_DWORD *)(a3 + 32);
      long long v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(_DWORD *)(a1 + 32) = v10;
LABEL_9:
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v9;
      *(_DWORD *)(a3 + 32) = v8;
      goto LABEL_10;
    }
    uint64_t v20 = *(void *)(a1 + 32);
    result = *(__n128 *)a1;
    long long v21 = *(_OWORD *)(a1 + 16);
    int v22 = *(_DWORD *)(a2 + 32);
    long long v23 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 32) = v22;
    *(__n128 *)a2 = result;
    *(_OWORD *)(a2 + 16) = v21;
    *(_DWORD *)(a2 + 32) = v20;
    if (*(void *)(a3 + 24) < *(void *)(a2 + 24))
    {
      uint64_t v8 = *(void *)(a2 + 32);
      result = *(__n128 *)a2;
      long long v9 = *(_OWORD *)(a2 + 16);
      int v24 = *(_DWORD *)(a3 + 32);
      long long v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v25;
      *(_DWORD *)(a2 + 32) = v24;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(void *)(a4 + 24) < *(void *)(a3 + 24))
  {
    uint64_t v26 = *(void *)(a3 + 32);
    result = *(__n128 *)a3;
    long long v27 = *(_OWORD *)(a3 + 16);
    int v28 = *(_DWORD *)(a4 + 32);
    long long v29 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v29;
    *(_DWORD *)(a3 + 32) = v28;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v27;
    *(_DWORD *)(a4 + 32) = v26;
    if (*(void *)(a3 + 24) < *(void *)(a2 + 24))
    {
      uint64_t v30 = *(void *)(a2 + 32);
      result = *(__n128 *)a2;
      long long v31 = *(_OWORD *)(a2 + 16);
      int v32 = *(_DWORD *)(a3 + 32);
      long long v33 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v33;
      *(_DWORD *)(a2 + 32) = v32;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v31;
      *(_DWORD *)(a3 + 32) = v30;
      if (*(void *)(a2 + 24) < *(void *)(a1 + 24))
      {
        uint64_t v34 = *(void *)(a1 + 32);
        result = *(__n128 *)a1;
        long long v35 = *(_OWORD *)(a1 + 16);
        int v36 = *(_DWORD *)(a2 + 32);
        long long v37 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v37;
        *(_DWORD *)(a1 + 32) = v36;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v35;
        *(_DWORD *)(a2 + 32) = v34;
      }
    }
  }
  if (*(void *)(a5 + 24) < *(void *)(a4 + 24))
  {
    uint64_t v38 = *(void *)(a4 + 32);
    result = *(__n128 *)a4;
    long long v39 = *(_OWORD *)(a4 + 16);
    int v40 = *(_DWORD *)(a5 + 32);
    long long v41 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v41;
    *(_DWORD *)(a4 + 32) = v40;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v39;
    *(_DWORD *)(a5 + 32) = v38;
    if (*(void *)(a4 + 24) < *(void *)(a3 + 24))
    {
      uint64_t v42 = *(void *)(a3 + 32);
      result = *(__n128 *)a3;
      long long v43 = *(_OWORD *)(a3 + 16);
      int v44 = *(_DWORD *)(a4 + 32);
      long long v45 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v45;
      *(_DWORD *)(a3 + 32) = v44;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v43;
      *(_DWORD *)(a4 + 32) = v42;
      if (*(void *)(a3 + 24) < *(void *)(a2 + 24))
      {
        uint64_t v46 = *(void *)(a2 + 32);
        result = *(__n128 *)a2;
        long long v47 = *(_OWORD *)(a2 + 16);
        int v48 = *(_DWORD *)(a3 + 32);
        long long v49 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v49;
        *(_DWORD *)(a2 + 32) = v48;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v47;
        *(_DWORD *)(a3 + 32) = v46;
        if (*(void *)(a2 + 24) < *(void *)(a1 + 24))
        {
          uint64_t v50 = *(void *)(a1 + 32);
          result = *(__n128 *)a1;
          long long v51 = *(_OWORD *)(a1 + 16);
          int v52 = *(_DWORD *)(a2 + 32);
          long long v53 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v53;
          *(_DWORD *)(a1 + 32) = v52;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v51;
          *(_DWORD *)(a2 + 32) = v50;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      long long v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *long long v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *long long v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *long long v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

uint64_t *AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 712))
  {
    uint64_t v18 = a1[97];
    if (v18)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v18 + 7528));
      long long v19 = *(char **)(v18 + 7560);
      unint64_t v20 = *(char **)(v18 + 7568);
      if (v19 != v20)
      {
        while (*(uint64_t **)v19 != a1 + 90)
        {
          v19 += 8;
          if (v19 == v20)
          {
            long long v19 = *(char **)(v18 + 7568);
            break;
          }
        }
      }
      int64_t v21 = v20 - (v19 + 8);
      if (v20 != v19 + 8) {
        memmove(v19, v19 + 8, v20 - (v19 + 8));
      }
      *(void *)(v18 + 7568) = &v19[v21];
      os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 7528));
      if (a1[86])
      {
        uint64_t v22 = a1[87];
        long long v23 = *(NSObject **)(v22 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v22;
        uint64_t v35 = a1 + 83;
        dispatch_sync(v23, &v30);
        *(_OWORD *)((char *)a1 + 689) = 0u;
        *(_OWORD *)(a1 + 85) = 0u;
        *(_OWORD *)(a1 + 83) = 0u;
      }
      if (a1[102])
      {
        uint64_t v24 = a1[103];
        int v25 = *(NSObject **)(v24 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v24;
        uint64_t v35 = a1 + 99;
        dispatch_sync(v25, &v30);
        *(_OWORD *)((char *)a1 + 817) = 0u;
        *(_OWORD *)(a1 + 101) = 0u;
        *(_OWORD *)(a1 + 99) = 0u;
      }
      if (a1[128])
      {
        uint64_t v26 = a1[129];
        long long v27 = *(NSObject **)(v26 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v26;
        uint64_t v35 = a1 + 125;
        dispatch_sync(v27, &v30);
        *(_OWORD *)((char *)a1 + 1025) = 0u;
        *(_OWORD *)(a1 + 127) = 0u;
        *(_OWORD *)(a1 + 125) = 0u;
      }
      if (a1[136])
      {
        uint64_t v28 = a1[137];
        unint64_t v29 = *(NSObject **)(v28 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v28;
        uint64_t v35 = a1 + 133;
        dispatch_sync(v29, &v30);
        *(_OWORD *)((char *)a1 + 1089) = 0u;
        *(_OWORD *)(a1 + 133) = 0u;
        *(_OWORD *)(a1 + 135) = 0u;
      }
    }
  }
  uint64_t v2 = a1[106];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 176);
    if (v3)
    {
      *(void *)(v2 + 184) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(void *)(v2 + 32) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x24566ED90](v2, 0x1030C40B293E8E3);
    a1[106] = 0;
  }
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(void **)(v6 + 176);
    if (v7)
    {
      *(void *)(v6 + 184) = v7;
      operator delete(v7);
    }
    long long v8 = *(void **)(v6 + 24);
    if (v8)
    {
      *(void *)(v6 + 32) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v9;
      operator delete(v9);
    }
    MEMORY[0x24566ED90](v6, 0x1030C40B293E8E3);
    *a1 = 0;
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy((void *)a1[150]);
  int v10 = (void *)a1[146];
  if (v10)
  {
    a1[147] = (uint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = a1[94];
  if (v11)
  {
    uint64_t v12 = a1[95];
    unint64_t v13 = (void *)a1[94];
    if (v12 != v11)
    {
      do
      {
        uint64_t v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v12 -= 16;
      }
      while (v12 != v11);
      unint64_t v13 = (void *)a1[94];
    }
    a1[95] = v11;
    operator delete(v13);
  }
  long long v15 = (void *)a1[90];
  if (v15)
  {
    a1[91] = (uint64_t)v15;
    operator delete(v15);
  }
  if (*((char *)a1 + 487) < 0)
  {
    operator delete((void *)a1[58]);
    if ((*((char *)a1 + 463) & 0x80000000) == 0)
    {
LABEL_33:
      if ((*((char *)a1 + 439) & 0x80000000) == 0) {
        goto LABEL_34;
      }
LABEL_54:
      operator delete((void *)a1[52]);
      long long v16 = (void *)a1[47];
      if (!v16) {
        return a1;
      }
      goto LABEL_35;
    }
  }
  else if ((*((char *)a1 + 463) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete((void *)a1[55]);
  if (*((char *)a1 + 439) < 0) {
    goto LABEL_54;
  }
LABEL_34:
  long long v16 = (void *)a1[47];
  if (v16)
  {
LABEL_35:
    a1[48] = (uint64_t)v16;
    operator delete(v16);
  }
  return a1;
}

__n128 AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::finalize(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v1;
  if (!*(unsigned char *)(v1 + 1231))
  {
    if (*(unsigned char *)(v1 + 1229))
    {
      unsigned int v4 = *(_DWORD *)(v1 + 592);
      if (v4 <= 8) {
        unsigned int v4 = 8;
      }
      *(_DWORD *)(v1 + 592) = v4;
    }
    uint64_t v5 = *(void *)v1;
    int v6 = *(_DWORD *)(v1 + 588);
    int v7 = *(_DWORD *)(v1 + 600);
    uint64_t v8 = (unsigned __int16)((*(_DWORD *)(v1 + 584) + 3) >> 2);
    *(void *)(v5 + 88) = *(void *)(*(void *)v1 + 88) & 0xFFFFF00000000000 | (v8 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v1 + 596) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v8;
    *(_DWORD *)(v5 + 248) = (v6 + 3) >> 2;
    *(_DWORD *)(v5 + 252) = (((v7 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v5 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v5 + 48), *(_DWORD *)(v5 + 240), *(void *)v5 + *(unsigned __int16 *)(v5 + 244));
    }
  }
  unsigned int v9 = *(_DWORD *)(v3 + 1232);
  if (v9 != -1) {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(*(void *)v3, v9, *(_DWORD *)(v3 + 1236), *(void *)(v3 + 632), *(void *)(v3 + 640), *(void *)(v3 + 648), *(unsigned char *)(v3 + 1244));
  }
  uint64_t v10 = *(void *)(v3 + 848);
  if (v10)
  {
    int v11 = *(_DWORD *)(v3 + 588);
    int v12 = *(_DWORD *)(v3 + 600);
    uint64_t v13 = (unsigned __int16)((*(_DWORD *)(v3 + 584) + 3) >> 2);
    *(void *)(v10 + 88) = *(void *)(v10 + 88) & 0xFFFFF00000000000 | (v13 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v3 + 596) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v13;
    *(_DWORD *)(v10 + 248) = (v11 + 3) >> 2;
    *(_DWORD *)(v10 + 252) = (((v12 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v10 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v10 + 48), *(_DWORD *)(v10 + 240), *(void *)v10 + *(unsigned __int16 *)(v10 + 244));
    }
    uint64_t v14 = *(void *)(v3 + 848);
    long long v15 = *(char **)(v3 + 800);
    memcpy(v15, *(const void **)v14, *(void *)(v14 + 8) - *(void *)v14);
    if (*(unsigned char *)(v14 + 200)) {
      *(int8x16_t *)&v15[*(unsigned int *)(v14 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v15[*(unsigned int *)(v14 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    long long v16 = *(unsigned int **)(v14 + 176);
    for (i = *(unsigned int **)(v14 + 184); v16 != i; v16 += 3)
    {
      v18.i64[0] = v25[v16[1]] + *v16;
      v18.i64[1] = (unint64_t)v18.i64[0] >> 5;
      *(int8x16_t *)&v15[v16[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v15[v16[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v19 = *(void *)(v3 + 848);
    long long v20 = *(_OWORD *)(v19 + 80);
    long long v21 = *(_OWORD *)(v19 + 96);
    long long v22 = *(_OWORD *)(v19 + 64);
    *(_OWORD *)(v3 + 856) = *(_OWORD *)(v19 + 48);
    *(_OWORD *)(v3 + 904) = v21;
    *(_OWORD *)(v3 + 888) = v20;
    *(_OWORD *)(v3 + 872) = v22;
    long long v23 = *(_OWORD *)(v19 + 128);
    __n128 result = *(__n128 *)(v19 + 144);
    uint64_t v24 = *(void *)(v19 + 160);
    *(_OWORD *)(v3 + 920) = *(_OWORD *)(v19 + 112);
    *(void *)(v3 + 968) = v24;
    *(__n128 *)(v3 + 952) = result;
    *(_OWORD *)(v3 + 936) = v23;
  }
  return result;
}

__n128 AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::updateWithRuntimeState(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  unsigned int v4 = *(_DWORD *)(v1 + 592);
  if (v4 <= v2[12]) {
    unsigned int v4 = v2[12];
  }
  *(_DWORD *)(v1 + 592) = v4;
  int v5 = v2[21] + v2[13];
  *(_DWORD *)(v1 + 584) = v5;
  int v6 = v2[16];
  *(_DWORD *)(v1 + 596) = v6;
  uint64_t v7 = *(void *)(v1 + 848);
  if (v7)
  {
    uint64_t v8 = v1;
    int v9 = *(_DWORD *)(v1 + 588);
    int v10 = *(_DWORD *)(v1 + 600);
    *(void *)(v7 + 88) = *(void *)(v7 + 88) & 0xFFFFF00000000000 | ((unsigned __int16)((v5 + 3) >> 2) << 16) | ((((unint64_t)(((unsigned __int16)((v6 + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | (unsigned __int16)((v5 + 3) >> 2);
    *(_DWORD *)(v7 + 248) = (v9 + 3) >> 2;
    *(_DWORD *)(v7 + 252) = (((v10 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v7 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v7 + 48), *(_DWORD *)(v7 + 240), *(void *)v7 + *(unsigned __int16 *)(v7 + 244));
    }
    uint64_t v11 = *(void *)(v8 + 848);
    int v12 = *(char **)(v8 + 800);
    memcpy(v12, *(const void **)v11, *(void *)(v11 + 8) - *(void *)v11);
    if (*(unsigned char *)(v11 + 200)) {
      *(int8x16_t *)&v12[*(unsigned int *)(v11 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[*(unsigned int *)(v11 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v13 = *(unsigned int **)(v11 + 176);
    for (i = *(unsigned int **)(v11 + 184); v13 != i; v13 += 3)
    {
      v15.i64[0] = v22[v13[1]] + *v13;
      v15.i64[1] = (unint64_t)v15.i64[0] >> 5;
      *(int8x16_t *)&v12[v13[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[v13[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v16 = *(void *)(v8 + 848);
    long long v17 = *(_OWORD *)(v16 + 80);
    long long v18 = *(_OWORD *)(v16 + 96);
    long long v19 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v8 + 856) = *(_OWORD *)(v16 + 48);
    *(_OWORD *)(v8 + 904) = v18;
    *(_OWORD *)(v8 + 888) = v17;
    *(_OWORD *)(v8 + 872) = v19;
    long long v20 = *(_OWORD *)(v16 + 128);
    __n128 result = *(__n128 *)(v16 + 144);
    uint64_t v21 = *(void *)(v16 + 160);
    *(_OWORD *)(v8 + 920) = *(_OWORD *)(v16 + 112);
    *(void *)(v8 + 968) = v21;
    *(__n128 *)(v8 + 952) = result;
    *(_OWORD *)(v8 + 936) = v20;
  }
  return result;
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::cloneProgramInfo(uint64_t a1, uint64_t a2, long long *a3, void *a4, int a5)
{
  long long v5 = *a3;
  *(void *)(a1 + 648) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 632) = v5;
  *(_DWORD *)(a1 + 716) = *(_DWORD *)(a2 + 716);
  *(void *)(a1 + 528) = a4[2];
  *(void *)(a1 + 536) = a4[3];
  *(void *)(a1 + 544) = a4[4];
  *(_DWORD *)(a1 + 1224) += a5;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::buildUniqueResourceMask(a1);
  operator new();
}

void sub_242ADCD80(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x1030C40B293E8E3);
  _Unwind_Resume(a1);
}

void *std::vector<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::BufferPointer,std::allocator<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::BufferPointer>>::__assign_with_size[abi:nn180100]<AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::BufferPointer*,AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::BufferPointer*>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      abort();
    uint64_t v13 = 12 * v12;
    __n128 result = operator new(12 * v12);
    int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    int8x16_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  int8x16_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long long v18 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  long long v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    int v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long long v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *int8x16_t v15 = &v9[v14];
  return result;
}

uint64_t agxsGetShaderPassInfo(uint64_t result, const _AGCDrawBufferState *a2, unint64_t a3, unint64_t a4, unsigned int *a5, BOOL *a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *a6 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unsigned int key_low = LOBYTE(a2->var0.key);
  if (a2->var0.var0)
  {
    unsigned int v7 = 0;
    unsigned int v8 = LOBYTE(a2->var0.key);
    do
    {
      unsigned int v9 = __clz(__rbit32(v8));
      int v10 = a2->encoded.__elems_[v9].key >> 5;
      ++*((_DWORD *)&v52 + (v10 - 1));
      v7 += v10;
      v8 ^= 1 << v9;
    }
    while (v8);
    int v12 = v53;
    int v11 = HIDWORD(v53);
    int v13 = HIDWORD(v52);
  }
  else
  {
    int v13 = 0;
    int v12 = 0;
    int v11 = 0;
    unsigned int v7 = 0;
  }
  int v14 = v7 > result;
  if (v7 <= result) {
    int v15 = 0;
  }
  else {
    int v15 = v11;
  }
  unsigned int v16 = v7 - v15;
  if (v16 <= result) {
    int v17 = 0;
  }
  else {
    int v17 = v12;
  }
  if (v16 > result) {
    int v14 = 2;
  }
  unsigned int v18 = v16 - v17;
  int v19 = v12 + v13 + v11;
  if (v18 > result)
  {
    int v20 = 3;
  }
  else
  {
    int v19 = 0;
    int v20 = v14;
  }
  if (v18 - v19 <= result) {
    int v21 = v20;
  }
  else {
    int v21 = 4;
  }
  if (key_low)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    unsigned int v24 = 0;
    int v25 = 0;
    int v26 = v21 - 1;
    do
    {
      unsigned int v37 = __clz(__rbit32(key_low));
      unsigned int v36 = a2->encoded.__elems_[v37].key >> 5;
      int v38 = -1 << v36;
      uint64_t v39 = ~(-1 << v36);
      unint64_t v33 = (a3 >> (4 * v37)) & v39;
      unint64_t v34 = (a4 >> (4 * v37)) & v39;
      switch(v26)
      {
        case 0:
          if (v36 == 4)
          {
            unint64_t v33 = (v33 >> 1) & 6 | v33 & 3;
            int v25 = (((v34 >> 1) ^ v34) & 2 | (unint64_t)v25) != 0;
            *a6 = v25;
            unint64_t v34 = (v34 >> 1) & 6 | v34 & 3;
            unsigned int v36 = 3;
          }
          break;
        case 1:
          if (v36 >= 3)
          {
            unint64_t v33 = (v33 >> 1) & 6 | v33 & 3;
            int v25 = (((v34 >> 1) ^ v34) & 2 | (unint64_t)v25) != 0;
            *a6 = v25;
            unint64_t v34 = (v34 >> 1) & 6 | v34 & 3;
            --v36;
          }
          break;
        case 2:
          if (v36 >= 2)
          {
            uint64_t v40 = (v38 + 8);
            unint64_t v41 = ((v40 & ((uint64_t)(v33 << 62) >> 63) | v33) >> 2) & 2 | (((v40 & ((uint64_t)(v33 << 62) >> 63) | v33) & 7) != 0);
            unint64_t v42 = v40 & ((uint64_t)(v34 << 62) >> 63) | v34;
            unint64_t v33 = (v33 >> 2) & 2 | ((v33 & 7) != 0);
            if (v36 == 2) {
              unint64_t v33 = v41;
            }
            else {
              unint64_t v42 = v34;
            }
            BOOL v43 = (v42 & 7) != 7 && (v42 & 7) != 0;
            v25 |= v43;
            *a6 = v25;
            unint64_t v34 = (v42 >> 2) & 2 | ((v42 & 7) != 0);
            if (v36 == 4) {
              unsigned int v36 = 2;
            }
            else {
              unsigned int v36 = 1;
            }
          }
          break;
        case 3:
          uint64_t v27 = v38 + 16;
          uint64_t v28 = (1 << (v36 - 1));
          if ((v33 & v28) != 0) {
            uint64_t v29 = v38 + 16;
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v30 = v29 | v33;
          if ((v34 & v28) == 0) {
            uint64_t v27 = 0;
          }
          unint64_t v31 = v27 | v34;
          if (v36 <= 3) {
            unint64_t v32 = v30;
          }
          else {
            unint64_t v32 = v33;
          }
          if (v36 > 3) {
            unint64_t v31 = v34;
          }
          unint64_t v33 = v32 != 0;
          unint64_t v34 = v31 != 0;
          BOOL v35 = v31 != 15 && v31 != 0;
          v25 |= v35;
          *a6 = v25;
          unsigned int v36 = 1;
          break;
        default:
          break;
      }
      v22 |= v33 << v24;
      v23 |= v34 << v24;
      v24 += v36;
      key_low ^= 1 << v37;
    }
    while (key_low);
    if (v24 > result)
    {
      uint64_t v44 = ~(-1 << result);
      uint64_t v45 = v22 & v44;
      uint64_t v46 = v23 & v44;
      do
      {
        v22 >>= result;
        v23 >>= result;
        unsigned int v47 = v24 - result;
        if (result >= v24 - result) {
          char v48 = v24 - result;
        }
        else {
          char v48 = result;
        }
        uint64_t v49 = ~(-1 << v48);
        LOBYTE(v25) = ((v46 ^ v23) & v49 | (unint64_t)v25) != 0;
        v45 |= v22 & v49;
        v46 |= v23 & v49;
        unsigned int v24 = v47;
      }
      while (v47 > result);
      unsigned int v24 = result;
      unint64_t v23 = v46;
      unint64_t v22 = v45;
    }
    *a6 = (v22 & v23 | v25) != 0;
    if (v24)
    {
      int v50 = (-1 << v24) + (1 << result);
      if ((v23 & (1 << (v24 - 1))) == 0) {
        int v50 = 0;
      }
      unsigned int v51 = v50 | v23;
      if (v24 >= result) {
        unsigned int v51 = v23;
      }
    }
    else
    {
      unsigned int v51 = 0;
    }
  }
  else
  {
    unsigned int v51 = 0;
    *a6 = 0;
  }
  *a5 = v51;
  return result;
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6, uint64_t a7, int a8)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v10 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v11 = (char *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v212 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v213 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v12 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v12;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  int v13 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(unsigned char *)(a1 + 1228) = a8;
  *(_WORD *)(a1 + 1229) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v14 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  bzero(v11, 0x30uLL);
  *(unsigned char *)(v10 + 672) = 0;
  uint64_t v220 = v10;
  *(unsigned char *)(v10 + 1191) = 0;
  if (a3[28])
  {
    int v15 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      int v15 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    int v15 = (unsigned int **)(a3 + 98);
  }
  unsigned int v16 = 0;
  if (*v15 && v15[1]) {
    unsigned int v16 = (int *)((char *)*v15 + **v15);
  }
  int v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
    int v19 = (int *)((char *)v16 + v18 + *(unsigned int *)((char *)v16 + v18));
  }
  else {
    int v19 = 0;
  }
  int v20 = a3 + 58;
  if (a3[58])
  {
    int v21 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      int v21 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    int v21 = (unsigned int **)(a3 + 128);
  }
  unint64_t v22 = 0;
  if (*v21 && v21[1]) {
    unint64_t v22 = (int *)((char *)*v21 + **v21);
  }
  unint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 5u && (uint64_t v24 = v23[2]) != 0) {
    int v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  }
  else {
    int v25 = 0;
  }
  int v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 < 0x11u)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[8];
    if (v27) {
      LODWORD(v27) = *(int *)((char *)v25 + v27);
    }
  }
  *int v13 = v27;
  uint64_t v28 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v28 < 7u)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    uint64_t v29 = v28[3];
    if (v29) {
      LODWORD(v29) = *(int *)((char *)v25 + v29);
    }
  }
  *(_DWORD *)(a1 + 408) = v29;
  unint64_t v30 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v30 >= 0x13u && (uint64_t v31 = v30[9]) != 0) {
    unint64_t v32 = (char *)v25 + v31 + *(unsigned int *)((char *)v25 + v31) + 4;
  }
  else {
    unint64_t v32 = "";
  }
  v218 = (unint64_t ***)(v220 + 680);
  MEMORY[0x24566EB20](v213, v32);
  std::string::operator=((std::string *)(v220 + 400), a4);
  unint64_t v33 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v33 >= 9u && (uint64_t v34 = v33[4]) != 0) {
    BOOL v35 = (char *)v25 + v34 + *(unsigned int *)((char *)v25 + v34) + 4;
  }
  else {
    BOOL v35 = "";
  }
  MEMORY[0x24566EB20](v212, v35);
  unsigned int v36 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v36 < 0x29u)
  {
    LOBYTE(v37) = 0;
  }
  else
  {
    uint64_t v37 = v36[20];
    if (v37) {
      LOBYTE(v37) = *((unsigned char *)v25 + v37) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v37;
  uint64_t v38 = *v20;
  if (*v20)
  {
    uint64_t v39 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      uint64_t v39 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    uint64_t v39 = (unsigned int **)(a3 + 128);
  }
  uint64_t v40 = 0;
  if (*v39 && v39[1]) {
    uint64_t v40 = (int *)((char *)*v39 + **v39);
  }
  unint64_t v41 = (unsigned __int16 *)((char *)v40 - *v40);
  if (*v41 >= 7u)
  {
    int v42 = v41[3];
    if (!v42)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v42;
      if (v38)
      {
        int v50 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          int v50 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        int v50 = (unsigned int **)(a3 + 128);
      }
      unsigned int v51 = 0;
      if (*v50 && v50[1]) {
        unsigned int v51 = (int *)((char *)*v50 + **v50);
      }
      uint64_t v52 = (unsigned __int16 *)((char *)v51 - *v51);
      if (*v52 < 7u || !v52[3]) {
        goto LABEL_96;
      }
      if (v38)
      {
        uint64_t v53 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v53 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v53 = (unsigned int **)(a3 + 128);
      }
      uint64_t v54 = 0;
      if (*v53 && v53[1]) {
        uint64_t v54 = (int *)((char *)*v53 + **v53);
      }
      long long v55 = (unsigned __int16 *)((char *)v54 - *v54);
      if (*v55 >= 7u && (uint64_t v56 = v55[3]) != 0) {
        long long v57 = (int *)((char *)v54 + v56 + *(unsigned int *)((char *)v54 + v56));
      }
      else {
        long long v57 = 0;
      }
      long long v58 = (unsigned __int16 *)((char *)v57 - *v57);
      if (*v58 >= 0xDu && (uint64_t v59 = v58[6]) != 0) {
        int v60 = *(int *)((char *)v57 + v59);
      }
      else {
LABEL_96:
      }
        int v60 = 0;
      *(_DWORD *)(a1 + 572) = v60;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a5 + 465);
      long long v61 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v61 < 0x4Du)
      {
        LODWORD(v62) = 0;
      }
      else
      {
        uint64_t v62 = v61[38];
        if (v62) {
          LODWORD(v62) = *(int *)((char *)v19 + v62);
        }
      }
      *(_DWORD *)(a1 + 400) = v62;
      long long v63 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v63 < 0x53u)
      {
        LODWORD(v64) = 0;
      }
      else
      {
        uint64_t v64 = v63[41];
        if (v64) {
          LODWORD(v64) = *(int *)((char *)v19 + v64);
        }
      }
      *(_DWORD *)(a1 + 404) = v64;
      uint64_t v65 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v65 < 0x43u)
      {
        LODWORD(v66) = 0;
      }
      else
      {
        uint64_t v66 = v65[33];
        if (v66) {
          LODWORD(v66) = *(int *)((char *)v19 + v66);
        }
      }
      int v67 = 0;
      *(_DWORD *)(a1 + 576) = v66;
      *(_DWORD *)(a1 + 580) = 0;
      unint64_t v68 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v68 >= 0x21u)
      {
        uint64_t v69 = v68[16];
        if (v69) {
          int v67 = *(int *)((char *)v19 + v69);
        }
        else {
          int v67 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v67;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      uint64_t v70 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v70 < 5u)
      {
        LODWORD(v71) = 0;
      }
      else
      {
        uint64_t v71 = v70[2];
        if (v71) {
          LODWORD(v71) = *(int *)((char *)v19 + v71);
        }
      }
      *(_DWORD *)(a1 + 592) = v71;
      long long v72 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v72 < 0x51u)
      {
        LODWORD(v73) = 0;
      }
      else
      {
        uint64_t v73 = v72[40];
        if (v73) {
          LODWORD(v73) = *(int *)((char *)v19 + v73);
        }
      }
      *(_DWORD *)(a1 + 596) = v73;
      long long v74 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v74 < 0x4Fu)
      {
        LODWORD(v75) = 0;
      }
      else
      {
        uint64_t v75 = v74[39];
        if (v75) {
          LODWORD(v75) = *(int *)((char *)v19 + v75);
        }
      }
      *(_DWORD *)(a1 + 600) = v75;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(a5 + 465);
      *(void *)(a1 + 496) = 0;
      long long v76 = (char *)v19 - *v19;
      size_t v77 = *(unsigned int *)((char *)v19
                            + *((unsigned __int16 *)v76 + 15)
                            + *(unsigned int *)((char *)v19 + *((unsigned __int16 *)v76 + 15)));
      uint64_t v78 = *((unsigned __int16 *)v76 + 13);
      if (v78) {
        LODWORD(v78) = *(int *)((char *)v19 + v78);
      }
      uint64_t v79 = v78;
      uint64_t v80 = *(unsigned int *)(a5 + 152);
      if (*(unsigned char *)(a5 + 416)) {
        unint64_t v81 = ((*(void *)(a5 + 248) + *(void *)(a5 + 224) - (*(void *)(a5 + 240) + *(void *)(a5 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(a5 + 400) + *(void *)(a5 + 352) - (*(void *)(a5 + 392) + *(void *)(a5 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v81 = 0;
      }
      uint64_t v82 = (v77 + 31) & 0x1FFFFFFE0;
      if (v78) {
        uint64_t v83 = (v77 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v83 = v77;
      }
      uint64_t v222 = v83;
      uint64_t v84 = v83 + v78;
      if (v80) {
        unint64_t v81 = ((v84 + v81 + 31) & 0xFFFFFFFFFFFFFFE0) - v84;
      }
      unint64_t v223 = v81;
      uint64_t v85 = v84 + 8 * v80 + v81;
      v219 = v19;
      v215 = v25;
      v214 = v11;
      if (!v85) {
        goto LABEL_216;
      }
      int v211 = *(_DWORD *)(a5 + 152);
      if (a8)
      {
        AGX::Heap<true>::allocateImpl(&v227, a2 + 5688, v85, 0);
        uint64_t v86 = a1;
        int v87 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v228;
        long long v88 = *(_OWORD *)v228;
        *(_OWORD *)(v220 + 1024) = v227;
        *(_OWORD *)(v220 + 1040) = v88;
        *(_OWORD *)(v220 + 1049) = *(_OWORD *)&v228[9];
        __dst = *(char **)(a1 + 1072);
        uint64_t v216 = *(void *)(a1 + 1064) + 0x1000000000;
        *(void *)(a1 + 976) = v216;
      }
      else
      {
        uint64_t v86 = a1;
        AGX::Heap<true>::allocateImpl(&v227, a2 + 5184, v85, (void *)(a1 + 552));
        int v87 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v228;
        long long v89 = *(_OWORD *)v228;
        *(_OWORD *)(v220 + 624) = v227;
        *(_OWORD *)(v220 + 640) = v89;
        *(_OWORD *)(v220 + 649) = *(_OWORD *)&v228[9];
        __dst = *(char **)(a1 + 672);
        uint64_t v216 = *(void *)(a1 + 664);
      }
      *(_DWORD *)(v86 + 1224) = v87;
      int v19 = v219;
      int v90 = v211;
      if (v77)
      {
        uint64_t v91 = v84;
        long long v92 = (unsigned __int16 *)((char *)v219 - *v219);
        uint64_t v93 = v79;
        if (*v92 < 0x1Fu)
        {
          int v95 = v14;
          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = v92[15];
          int v95 = v14;
          if (v94) {
            v94 += (uint64_t)v219 + *(unsigned int *)((char *)v219 + v94);
          }
        }
        memcpy(__dst, (const void *)(v94 + 4), v77);
        *(void *)(a1 + 608) = v216;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v222;
        int v14 = v95;
        uint64_t v79 = v93;
        uint64_t v84 = v91;
      }
      if (!v79)
      {
        if (v223) {
          goto LABEL_198;
        }
        goto LABEL_201;
      }
      if (a8) {
        *(void *)(a1 + 984) = v216 + v82;
      }
      long long v96 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v96 >= 0xBu && (uint64_t v97 = v96[5]) != 0) {
        long long v98 = (char *)v25 + v97 + *(unsigned int *)((char *)v25 + v97);
      }
      else {
        long long v98 = 0;
      }
      uint64_t v99 = *(unsigned __int16 *)((char *)v219 - *v219 + 28);
      uint64_t v100 = *(unsigned int *)((char *)v219 + v99);
      if (!*(int *)((char *)v219 + v99 + v100))
      {
        int v11 = v214;
        if (!v223) {
          goto LABEL_201;
        }
        goto LABEL_198;
      }
      uint64_t v101 = 0;
      unint64_t v102 = 0;
      uint64_t v103 = &__dst[v82];
      v210 = v98 + 4;
      uint64_t v104 = 24;
      if (!v14) {
        uint64_t v104 = 8;
      }
      v208 = &__dst[v82];
      size_t v209 = v104;
      while (1)
      {
        uint64_t v105 = v99;
        uint64_t v106 = v99 + v100;
        v107 = &v19[v101];
        uint64_t v108 = *(unsigned int *)((char *)&v19[v101 + 1] + v106);
        uint64_t v109 = v106 + v108;
        v110 = (char *)&v19[v101] + v106 + v108;
        uint64_t v111 = *((int *)v110 + 1);
        v112 = (char *)v107 + v109 - v111;
        unsigned int v113 = *((unsigned __int16 *)v112 + 2);
        if (v113 < 5) {
          goto LABEL_159;
        }
        uint64_t v114 = *((unsigned __int16 *)v112 + 4);
        if (!v114) {
          goto LABEL_159;
        }
        int v115 = *((unsigned __int8 *)v219 + v105 + v100 + v108 + v101 * 4 + v114 + 4);
        if (v115 != 114)
        {
          if (v115 == 18)
          {
            if (v113 < 9)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v116 = v105 + v100 + v108;
              uint64_t v117 = *(unsigned __int16 *)((char *)&v219[v101 + 3] + v116 - v111);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v219 + v116 + v101 * 4 + v117 + 4);
              }
            }
            v120 = &v103[8 * v117];
            bzero(v120, v209);
            v121 = (char *)&v219[v101] + v105 + v100 + v108 - *((int *)v110 + 1);
            if (*((unsigned __int16 *)v121 + 2) < 7u)
            {
              uint64_t v122 = 0;
            }
            else
            {
              uint64_t v122 = *((unsigned __int16 *)v121 + 5);
              if (v122) {
                uint64_t v122 = *(unsigned int *)((char *)v219 + v105 + v100 + v108 + v101 * 4 + v122 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (int *)&v210[4 * v122 + *(unsigned int *)&v210[4 * v122]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v231.n128_u64, (uint64_t)&v227);
            *(void *)v120 = v231.n128_u64[0];
            if (v230 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v218, (uint64_t)v120);
          }
          goto LABEL_159;
        }
        if (v113 < 7)
        {
          uint64_t v119 = 0;
        }
        else
        {
          uint64_t v118 = v105 + v100 + v108;
          uint64_t v119 = *(unsigned __int16 *)((char *)&v219[v101 + 2] + v118 - v111 + 2);
          if (v119) {
            uint64_t v119 = *(unsigned int *)((char *)v219 + v118 + v101 * 4 + v119 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (int *)&v210[4 * v119 + *(unsigned int *)&v210[4 * v119]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v231, *(void *)(a1 + 776), (uint64_t)&v227);
        int v123 = *(_DWORD *)(v231.n128_u64[0] + 96);
        v124 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v124 >= *(void *)(a1 + 768))
        {
          v126 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v220 + 712, v231);
          uint64_t v103 = v208;
        }
        else
        {
          v124->n128_u64[0] = v231.n128_u64[0];
          unint64_t v125 = v231.n128_u64[1];
          v124->n128_u64[1] = v231.n128_u64[1];
          uint64_t v103 = v208;
          if (v125) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
          }
          v126 = v124 + 1;
        }
        *(void *)(a1 + 760) = v126;
        v127 = (char *)&v219[v101] + v105 + v100 + v108 - *((int *)v110 + 1);
        if (*((unsigned __int16 *)v127 + 2) < 9u)
        {
          uint64_t v128 = 0;
        }
        else
        {
          uint64_t v128 = *((unsigned __int16 *)v127 + 6);
          if (v128) {
            uint64_t v128 = *(unsigned int *)((char *)v219 + v105 + v100 + v108 + v101 * 4 + v128 + 4);
          }
        }
        *(_DWORD *)&v103[4 * v128] = v123;
        v129 = (std::__shared_weak_count *)v231.n128_u64[1];
        if (v231.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v231.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v230 < 0) {
          goto LABEL_190;
        }
LABEL_159:
        ++v102;
        int v19 = v219;
        uint64_t v99 = *(unsigned __int16 *)((char *)v219 - *v219 + 28);
        uint64_t v100 = *(unsigned int *)((char *)v219 + v99);
        ++v101;
        if (v102 >= *(unsigned int *)((char *)v219 + v99 + v100))
        {
          int v25 = v215;
          int v11 = v214;
          int v90 = v211;
          if (!v223) {
            goto LABEL_201;
          }
LABEL_198:
          *(void *)(a1 + 496) = v84 + v216;
          v130 = &__dst[v222 + v79];
          uint64_t v131 = a5;
          v132 = *(const void **)(a5 + 216);
          size_t v133 = *(void *)(a5 + 224) - (void)v132;
          *(_WORD *)v130 = v133 >> 2;
          *((_WORD *)v130 + 1) = (*(_DWORD *)(a5 + 248) - *(_DWORD *)(a5 + 240)) >> 2;
          *((_WORD *)v130 + 2) = (*(_DWORD *)(a5 + 352) - *(_DWORD *)(a5 + 344)) >> 1;
          *((_WORD *)v130 + 3) = (*(_DWORD *)(a5 + 400) - *(_DWORD *)(a5 + 392)) >> 1;
          memcpy(v130 + 8, v132, v133);
          v134 = &v130[*(void *)(v131 + 224) - *(void *)(v131 + 216) + 8];
          memcpy(v134, *(const void **)(v131 + 240), *(void *)(v131 + 248) - *(void *)(v131 + 240));
          v135 = &v134[*(void *)(v131 + 248) - *(void *)(v131 + 240)];
          memcpy(v135, *(const void **)(v131 + 344), *(void *)(v131 + 352) - *(void *)(v131 + 344));
          memcpy(&v135[*(void *)(v131 + 352) - *(void *)(v131 + 344)], *(const void **)(v131 + 392), *(void *)(v131 + 400) - *(void *)(v131 + 392));
          if (!*((_WORD *)v130 + 2)) {
            *((_WORD *)v130 + 2) = *(_WORD *)v130;
          }
          int v90 = v211;
          if (*((_WORD *)v130 + 3))
          {
LABEL_201:
            if (!v90) {
              goto LABEL_216;
            }
LABEL_202:
            *(void *)(v220 + 464) = &__dst[v222 + v79 + v223];
            v136 = (unsigned __int16 *)((char *)v25 - *v25);
            if (*v136 >= 0xBu && (uint64_t v137 = v136[5]) != 0)
            {
              v138 = (int *)((char *)v25 + v137 + *(unsigned int *)((char *)v25 + v137));
              if (!a8)
              {
LABEL_208:
                if (v138 && *v138)
                {
                  unint64_t v139 = 0;
                  uint64_t v140 = 1;
                  do
                  {
                    v141 = (void *)(*(void *)(v220 + 464) + 8 * (((v140 * 4) - 4) & 0xFFFFFFFC));
                    AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v227, (_DWORD *)((char *)&v138[v140] + v138[v140]));
                    AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v231.n128_u64, (uint64_t)&v227);
                    void *v141 = v231.n128_u64[0];
                    if (v230 < 0) {
                      operator delete(__p);
                    }
                    std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v218, (uint64_t)v141);
                    ++v139;
                    ++v140;
                  }
                  while (v139 < *v138);
                  int v19 = v219;
                }
                goto LABEL_216;
              }
            }
            else
            {
              v138 = 0;
              if (!a8) {
                goto LABEL_208;
              }
            }
            *(void *)(a1 + 992) = v84 + v223 + v216;
            goto LABEL_208;
          }
          *((_WORD *)v130 + 3) = *((_WORD *)v130 + 1);
          if (v211) {
            goto LABEL_202;
          }
LABEL_216:
          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v218);
          v142 = (unsigned __int16 *)((char *)v19 - *v19);
          uint64_t v143 = v142[8];
          uint64_t v144 = *(unsigned int *)((char *)v19 + v143);
          v145 = (unsigned int *)((char *)v19 + v143 + v144);
          uint64_t v146 = *v145;
          if (v146)
          {
            unint64_t v147 = 0;
            uint64_t v148 = 4 * v146;
            v149 = (char *)v19 + v143 + v144;
            do
            {
              uint64_t v154 = v145[v147 / 4 + 1];
              v155 = &v149[v147 + v154 - *(int *)((char *)&v145[v147 / 4 + 1] + v154)];
              if (*((unsigned __int16 *)v155 + 2) < 7u)
              {
                LODWORD(v150) = 0;
              }
              else
              {
                uint64_t v150 = *((unsigned __int16 *)v155 + 5);
                if (v150)
                {
                  unint64_t v156 = *(unsigned int *)&v149[v147 + 4 + v154 + v150];
                  LODWORD(v150) = v156;
                  if ((v156 & 0x80000000) != 0)
                  {
                    *(void *)&v11[8 * ((v156 & 0x7C000000) != 0)] |= 1 << (v156 >> 20);
                    uint64_t v151 = 0x8C0000000000;
                    v153 = v11;
                    goto LABEL_220;
                  }
                }
              }
              uint64_t v151 = 1 << v150;
              uint64_t v152 = 8 * ((v150 & 0xFFFC0) != 0);
              *(void *)(a1 + 56 + v152) |= v151;
              v153 = (void *)(a1 + 104 + v152);
LABEL_220:
              *v153 |= v151;
              v147 += 4;
            }
            while (v148 != v147);
          }
          uint64_t v157 = v142[10];
          uint64_t v158 = *(unsigned int *)((char *)v19 + v157);
          v159 = (unsigned int *)((char *)v19 + v157 + v158);
          uint64_t v160 = *v159;
          if (v160)
          {
            unint64_t v161 = 0;
            uint64_t v162 = 4 * v160;
            v163 = (char *)v19 + v157 + v158;
            do
            {
              uint64_t v168 = v159[v161 / 4 + 1];
              v169 = &v163[v161 + v168 - *(int *)((char *)&v159[v161 / 4 + 1] + v168)];
              if (*((unsigned __int16 *)v169 + 2) < 7u)
              {
                LODWORD(v164) = 0;
              }
              else
              {
                uint64_t v164 = *((unsigned __int16 *)v169 + 5);
                if (v164)
                {
                  unint64_t v170 = *(unsigned int *)&v163[v161 + 4 + v168 + v164];
                  LODWORD(v164) = v170;
                  if ((v170 & 0x80000000) != 0)
                  {
                    uint64_t v165 = 1 << (v170 >> 20);
                    v167 = &v11[8 * ((v170 & 0x7C000000) != 0)];
                    goto LABEL_229;
                  }
                }
              }
              uint64_t v165 = 1 << v164;
              uint64_t v166 = 8 * ((v164 & 0xFFFC0) != 0);
              *(void *)(a1 + 72 + v166) |= v165;
              v167 = (char *)(a1 + 120 + v166);
LABEL_229:
              *(void *)v167 |= v165;
              v161 += 4;
            }
            while (v162 != v161);
          }
          uint64_t v171 = v142[6];
          uint64_t v172 = *(unsigned int *)((char *)v19 + v171);
          v173 = (unsigned int *)((char *)v19 + v171 + v172);
          uint64_t v174 = *v173;
          if (v174)
          {
            unint64_t v175 = 0;
            uint64_t v176 = 4 * v174;
            v177 = (char *)v19 + v171 + v172;
            do
            {
              uint64_t v181 = v173[v175 / 4 + 1];
              v182 = &v177[v175 + v181 - *(int *)((char *)&v173[v175 / 4 + 1] + v181)];
              if (*((unsigned __int16 *)v182 + 2) < 7u)
              {
                LODWORD(v178) = 0;
              }
              else
              {
                unint64_t v178 = *((unsigned __int16 *)v182 + 5);
                if (v178)
                {
                  unint64_t v178 = *(unsigned int *)&v177[v175 + 4 + v181 + v178];
                  if ((v178 & 0x80000000) != 0)
                  {
                    uint64_t v179 = 1 << (v178 >> 20);
                    BOOL v180 = (v178 & 0x7C000000) != 0;
                    goto LABEL_238;
                  }
                  LODWORD(v178) = v178 & 0xFFFFF;
                  if (v178 <= 0x30 && ((1 << v178) & 0x1300000000000) != 0) {
                    goto LABEL_239;
                  }
                }
              }
              uint64_t v179 = 1 << v178;
              BOOL v180 = v178 > 0x3F;
              *(void *)(v220 + 8 * v180) |= v179;
LABEL_238:
              *(void *)&v11[8 * v180] |= v179;
LABEL_239:
              v175 += 4;
            }
            while (v176 != v175);
          }
          int8x16_t v184 = *(int8x16_t *)(a5 + 160);
          if (*(_OWORD *)&v184 != 0)
          {
            *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v184);
            *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v184);
          }
          int8x16_t v185 = *(int8x16_t *)(a5 + 192);
          if (*(_OWORD *)&v185 != 0)
          {
            *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v185);
            *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v185);
          }
          uint64_t v186 = v142[12];
          uint64_t v187 = *(unsigned int *)((char *)v19 + v186);
          v188 = (unsigned int *)((char *)v19 + v186 + v187);
          uint64_t v189 = *v188;
          if (!v189)
          {
LABEL_290:
            if (!*(unsigned char *)(a1 + 1231))
            {
              *(_OWORD *)(a1 + 200) = *(_OWORD *)(a5 + 424);
              *(_OWORD *)(a1 + 248) = *(_OWORD *)(a5 + 440);
              *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(a5 + 440), *(int8x16_t *)(a5 + 424));
            }
            operator new();
          }
          unint64_t v190 = 0;
          uint64_t v191 = 4 * v189;
          v192 = (char *)v19 + v186 + v187;
          while (2)
          {
            uint64_t v195 = *(unsigned int *)&v192[v190 + 4];
            uint64_t v196 = v195 - *(int *)((char *)&v188[v190 / 4 + 1] + v195);
            v197 = &v192[v190 + v196];
            unsigned int v198 = *((unsigned __int16 *)v197 + 2);
            if (v198 < 7)
            {
              if (v198 >= 5) {
                goto LABEL_263;
              }
            }
            else
            {
              uint64_t v199 = *((unsigned __int16 *)v197 + 5);
              if (v199)
              {
                unsigned int v200 = *(_DWORD *)&v192[v190 + 4 + v195 + v199];
                goto LABEL_264;
              }
LABEL_263:
              unsigned int v200 = 0;
LABEL_264:
              uint64_t v201 = *(unsigned __int16 *)&v192[v190 + 8 + v196];
              if (v201)
              {
                int v202 = v192[v190 + 4 + v195 + v201];
                v194 = (char *)(a1 + 184);
                uint64_t v193 = 1;
                switch(v192[v190 + 4 + v195 + v201])
                {
                  case 11:
                  case 12:
                  case 13:
                  case 16:
                  case 17:
                  case 62:
                  case 93:
                  case 97:
                  case 98:
                  case 113:
                    if ((v200 & 0x80000000) != 0)
                    {
                      uint64_t v193 = 1 << (v200 >> 20);
                      v194 = &v11[8 * ((v200 & 0x7C000000) != 0)];
                      goto LABEL_257;
                    }
                    if ((v200 & 0xFFF00000) != 0x400000)
                    {
                      if (v202 == 113 || v202 == 98) {
                        uint64_t v204 = 32;
                      }
                      else {
                        uint64_t v204 = 16;
                      }
                      uint64_t v193 = 1 << v200;
                      uint64_t v205 = a1 + v204 + 8 * ((v200 & 0xFFFC0) != 0);
                      *(void *)(v205 + 136) |= 1 << v200;
                      v194 = (char *)(v205 + 88);
LABEL_257:
                      *(void *)v194 |= v193;
                    }
                    break;
                  case 24:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 4;
                    goto LABEL_257;
                  case 25:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 8;
                    goto LABEL_257;
                  case 27:
                    goto LABEL_257;
                  case 28:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 2;
                    goto LABEL_257;
                  case 59:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 16;
                    goto LABEL_257;
                  case 60:
                  case 61:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 32;
                    goto LABEL_257;
                  case 75:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 64;
                    goto LABEL_257;
                  case 84:
                  case 85:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 128;
                    goto LABEL_257;
                  case 108:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 256;
                    goto LABEL_257;
                  case 109:
                  case 110:
                    uint64_t v193 = 1 << v200;
                    uint64_t v206 = 8 * ((v200 & 0xFFFC0) != 0);
                    *(void *)(a1 + 136 + v206) |= 1 << v200;
                    v194 = &v11[v206];
                    goto LABEL_257;
                  case 111:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 512;
                    goto LABEL_257;
                  case 112:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 1024;
                    goto LABEL_257;
                  case 118:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 2048;
                    goto LABEL_257;
                  case 119:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 4096;
                    goto LABEL_257;
                  case 120:
                    v194 = (char *)(a1 + 184);
                    uint64_t v193 = 0x2000;
                    goto LABEL_257;
                  case -117:
                    uint64_t v193 = 1 << v200;
                    uint64_t v207 = 8 * ((v200 & 0xFFFC0) != 0);
                    *(void *)(v220 + v207) |= 1 << v200;
                    v194 = &v11[v207];
                    goto LABEL_257;
                  default:
                    break;
                }
              }
            }
            v190 += 4;
            if (v191 == v190) {
              goto LABEL_290;
            }
            continue;
          }
        }
      }
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      if ((v230 & 0x80000000) == 0) {
        goto LABEL_159;
      }
LABEL_190:
      operator delete(__p);
      goto LABEL_159;
    }
    if (v38)
    {
      BOOL v43 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        BOOL v43 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      BOOL v43 = (unsigned int **)(a3 + 128);
    }
    uint64_t v44 = 0;
    if (*v43 && v43[1]) {
      uint64_t v44 = (int *)((char *)*v43 + **v43);
    }
    uint64_t v45 = (unsigned __int16 *)((char *)v44 - *v44);
    if (*v45 >= 7u && (uint64_t v46 = v45[3]) != 0) {
      unsigned int v47 = (int *)((char *)v44 + v46 + *(unsigned int *)((char *)v44 + v46));
    }
    else {
      unsigned int v47 = 0;
    }
    char v48 = (unsigned __int16 *)((char *)v47 - *v47);
    if (*v48 >= 0xBu)
    {
      uint64_t v49 = v48[5];
      if (v49)
      {
        int v42 = *(int *)((char *)v47 + v49);
        goto LABEL_71;
      }
    }
  }
  int v42 = 0;
  goto LABEL_71;
}

void sub_242AE05F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  uint64_t v49 = *a28;
  if (*a28)
  {
    *(void *)(a31 + 728) = v49;
    operator delete(v49);
  }
  if (*(char *)(a31 + 487) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(a31 + 463) < 0) {
    operator delete(*a18);
  }
  int v50 = (void **)(a30 + 336);
  if (*(char *)(a31 + 439) < 0)
  {
    operator delete(*a19);
    unsigned int v51 = *v50;
    if (*v50) {
      goto LABEL_11;
    }
  }
  else
  {
    unsigned int v51 = *v50;
    if (*v50)
    {
LABEL_11:
      *(void *)(a31 + 384) = v51;
      operator delete(v51);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      uint64_t v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *uint64_t v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *uint64_t v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *uint64_t v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *uint64_t v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::buildUniqueResourceMask(uint64_t result)
{
  unsigned int v1 = *(void *)(result + 512) != 0;
  *(_DWORD *)(result + 336) = v1;
  if (*(void *)(result + 520))
  {
    v1 |= 2u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 528))
  {
    v1 |= 4u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 536))
  {
    v1 |= 8u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 544))
  {
    v1 |= 0x10u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 552))
  {
    v1 |= 0x20u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 560))
  {
    v1 |= 0x40u;
    *(_DWORD *)(result + 336) = v1;
  }
  if (*(void *)(result + 568))
  {
    v1 |= 0x80u;
    *(_DWORD *)(result + 336) = v1;
  }
  uint64_t v2 = (int *)MEMORY[0x263F4B188];
  unsigned int v3 = v1;
  do
  {
    unsigned int v4 = __clz(__rbit32(v3));
    unsigned int v5 = v3 & ~(1 << v4);
    if (!v5) {
      break;
    }
    uint64_t v6 = result + 8 * v4;
    uint64_t v7 = *v2;
    int v8 = *(_DWORD *)(*(void *)(v6 + 512) + v7 + 48);
    unsigned int v3 = v5;
    do
    {
      unsigned int v9 = __clz(__rbit32(v5));
      int v10 = 1 << v9;
      if (v8 == *(_DWORD *)(*(void *)(result + 8 * v9 + 512) + v7 + 48))
      {
        v1 &= ~v10;
        *(_DWORD *)(result + 336) = v1;
        v3 &= ~v10;
      }
      v5 &= ~v10;
    }
    while (v5);
  }
  while (v3);
  return result;
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, unsigned int **a3, const std::string *a4, uint64_t a5, long long *a6, uint64_t a7, int a8)
{
  uint64_t v8 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v11 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  unint64_t v12 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v209 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v210 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0;
  long long v13 = *a6;
  *(void *)(a1 + 656) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 640) = v13;
  *(void *)(a1 + 740) = 0;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 745) = 0;
  *(void *)(a1 + 724) = 0;
  uint64_t v14 = (_DWORD *)(a1 + 724);
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 705) = 0u;
  *(void *)(a1 + 784) = a2;
  *(_DWORD *)(a1 + 792) = 0;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 880) = 1;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 864) = 3;
  *(void *)(a1 + 904) = 0;
  long long v15 = (_OWORD *)(a1 + 1072);
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(void *)(a1 + 1200) = a1 + 1208;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1232) = 0;
  *(unsigned char *)(a1 + 1236) = a8;
  *(_WORD *)(a1 + 1237) = 0;
  *(_DWORD *)(a1 + 1240) = -1;
  *(void *)(a1 + 1244) = 0;
  *(unsigned char *)(a1 + 1252) = 0;
  int v16 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  __n128 v212 = v12;
  bzero(v12, 0x30uLL);
  *(unsigned char *)(v11 + 680) = 0;
  uint64_t v218 = v11;
  *(unsigned char *)(v11 + 1199) = 0;
  if (a3[28])
  {
    long long v17 = a3 + 98;
    if (a3[29]) {
      long long v17 = a3 + 28;
    }
  }
  else
  {
    long long v17 = a3 + 98;
  }
  uint64_t v18 = 0;
  if (*v17 && v17[1]) {
    uint64_t v18 = (int *)((char *)*v17 + **v17);
  }
  unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
    unint64_t v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    unint64_t v21 = 0;
  }
  if (a3[58])
  {
    uint64_t v22 = a3 + 128;
    if (a3[59]) {
      uint64_t v22 = a3 + 58;
    }
  }
  else
  {
    uint64_t v22 = a3 + 128;
  }
  long long v23 = 0;
  if (*v22 && v22[1]) {
    long long v23 = (int *)((char *)*v22 + **v22);
  }
  long long v24 = (unsigned __int16 *)((char *)v23 - *v23);
  if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
    long long v26 = (int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
  }
  else {
    long long v26 = 0;
  }
  long long v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 < 0x11u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[8];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v26 + v28);
    }
  }
  *uint64_t v14 = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v29 < 7u)
  {
    LODWORD(v30) = 0;
    uint64_t v31 = a3 + 58;
  }
  else
  {
    uint64_t v30 = v29[3];
    uint64_t v31 = a3 + 58;
    if (v30) {
      LODWORD(v30) = *(int *)((char *)v26 + v30);
    }
  }
  uint64_t v205 = v11 + 720;
  *(_DWORD *)(a1 + 408) = v30;
  long long v32 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v32 >= 0x13u && (uint64_t v33 = v32[9]) != 0) {
    long long v34 = (char *)v26 + v33 + *(unsigned int *)((char *)v26 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  long long v216 = (unint64_t ***)(v11 + 688);
  MEMORY[0x24566EB20](v210, v34);
  std::string::operator=((std::string *)(v11 + 400), a4);
  uint64_t v35 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v35 >= 9u && (uint64_t v36 = v35[4]) != 0) {
    long long v37 = (char *)v26 + v36 + *(unsigned int *)((char *)v26 + v36) + 4;
  }
  else {
    long long v37 = "";
  }
  MEMORY[0x24566EB20](v209, v37);
  long long v38 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v38 < 0x29u)
  {
    LOBYTE(v39) = 0;
  }
  else
  {
    uint64_t v39 = v38[20];
    if (v39) {
      LOBYTE(v39) = *((unsigned char *)v26 + v39) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v39;
  long long v40 = *v31;
  if (*v31)
  {
    long long v41 = a3 + 128;
    if (a3[59]) {
      long long v41 = v31;
    }
  }
  else
  {
    long long v41 = a3 + 128;
  }
  long long v42 = 0;
  if (*v41 && v41[1]) {
    long long v42 = (int *)((char *)*v41 + **v41);
  }
  uint64_t v43 = (unsigned __int16 *)((char *)v42 - *v42);
  if (*v43 < 7u) {
    goto LABEL_70;
  }
  int v44 = v43[3];
  if (!v44) {
    goto LABEL_71;
  }
  if (v40)
  {
    long long v45 = a3 + 128;
    if (a3[59]) {
      long long v45 = v31;
    }
  }
  else
  {
    long long v45 = a3 + 128;
  }
  int v46 = 0;
  if (*v45 && v45[1]) {
    int v46 = (int *)((char *)*v45 + **v45);
  }
  long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 >= 7u && (uint64_t v48 = v47[3]) != 0) {
    long long v49 = (int *)((char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48));
  }
  else {
    long long v49 = 0;
  }
  long long v50 = (unsigned __int16 *)((char *)v49 - *v49);
  if (*v50 >= 0xBu && (uint64_t v51 = v50[5]) != 0) {
    int v44 = *(int *)((char *)v49 + v51);
  }
  else {
LABEL_70:
  }
    int v44 = 0;
LABEL_71:
  *(_DWORD *)(a1 + 576) = v44;
  if (v40)
  {
    uint64_t v52 = a3 + 128;
    if (a3[59]) {
      uint64_t v52 = v31;
    }
  }
  else
  {
    uint64_t v52 = a3 + 128;
  }
  long long v53 = 0;
  if (*v52 && v52[1]) {
    long long v53 = (int *)((char *)*v52 + **v52);
  }
  long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v54 < 7u || !v54[3]) {
    goto LABEL_96;
  }
  if (v40)
  {
    long long v55 = a3 + 128;
    if (a3[59]) {
      long long v55 = v31;
    }
  }
  else
  {
    long long v55 = a3 + 128;
  }
  uint64_t v56 = 0;
  if (*v55 && v55[1]) {
    uint64_t v56 = (int *)((char *)*v55 + **v55);
  }
  long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
  if (*v57 >= 7u && (uint64_t v58 = v57[3]) != 0) {
    long long v59 = (int *)((char *)v56 + v58 + *(unsigned int *)((char *)v56 + v58));
  }
  else {
    long long v59 = 0;
  }
  uint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
  if (*v60 >= 0xDu && (uint64_t v61 = v60[6]) != 0) {
    int v62 = *(int *)((char *)v59 + v61);
  }
  else {
LABEL_96:
  }
    int v62 = 0;
  *(_DWORD *)(a1 + 580) = v62;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(v8 + 465);
  long long v63 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v63 < 0x4Du)
  {
    LODWORD(v64) = 0;
  }
  else
  {
    uint64_t v64 = v63[38];
    if (v64) {
      LODWORD(v64) = *(int *)((char *)v21 + v64);
    }
  }
  *(_DWORD *)(a1 + 400) = v64;
  uint64_t v65 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v65 < 0x53u)
  {
    LODWORD(v66) = 0;
  }
  else
  {
    uint64_t v66 = v65[41];
    if (v66) {
      LODWORD(v66) = *(int *)((char *)v21 + v66);
    }
  }
  *(_DWORD *)(a1 + 404) = v66;
  uint64_t v67 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v67 < 0x43u)
  {
    LODWORD(v68) = 0;
  }
  else
  {
    uint64_t v68 = v67[33];
    if (v68) {
      LODWORD(v68) = *(int *)((char *)v21 + v68);
    }
  }
  int v69 = 0;
  *(_DWORD *)(a1 + 584) = v68;
  *(_DWORD *)(a1 + 588) = 0;
  uint64_t v70 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v70 >= 0x21u)
  {
    uint64_t v71 = v70[16];
    if (v71) {
      int v69 = *(int *)((char *)v21 + v71);
    }
    else {
      int v69 = 0;
    }
  }
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 592) = getAdditionalSpillBufferBytes(void)::extra + v69;
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a1 + 584);
  long long v72 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v72 < 5u)
  {
    LODWORD(v73) = 0;
  }
  else
  {
    uint64_t v73 = v72[2];
    if (v73) {
      LODWORD(v73) = *(int *)((char *)v21 + v73);
    }
  }
  *(_DWORD *)(a1 + 600) = v73;
  long long v74 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v74 < 0x51u)
  {
    LODWORD(v75) = 0;
  }
  else
  {
    uint64_t v75 = v74[40];
    if (v75) {
      LODWORD(v75) = *(int *)((char *)v21 + v75);
    }
  }
  *(_DWORD *)(a1 + 604) = v75;
  long long v76 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v76 < 0x4Fu)
  {
    LODWORD(v77) = 0;
  }
  else
  {
    uint64_t v77 = v76[39];
    if (v77) {
      LODWORD(v77) = *(int *)((char *)v21 + v77);
    }
  }
  *(_DWORD *)(a1 + 608) = v77;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(v8 + 465);
  *(void *)(a1 + 496) = 0;
  long long v78 = (char *)v21 - *v21;
  size_t v79 = *(unsigned int *)((char *)v21
                        + *((unsigned __int16 *)v78 + 15)
                        + *(unsigned int *)((char *)v21 + *((unsigned __int16 *)v78 + 15)));
  uint64_t v80 = *((unsigned __int16 *)v78 + 13);
  if (v80) {
    LODWORD(v80) = *(int *)((char *)v21 + v80);
  }
  uint64_t v81 = v80;
  unint64_t v222 = *(unsigned int *)(v8 + 152);
  if (*(unsigned char *)(v8 + 416)) {
    unint64_t v82 = ((*(void *)(v8 + 248) + *(void *)(v8 + 224) - (*(void *)(v8 + 240) + *(void *)(v8 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
  }
        + ((*(void *)(v8 + 400) + *(void *)(v8 + 352) - (*(void *)(v8 + 392) + *(void *)(v8 + 344))) & 0xFFFFFFFFFFFFFFFELL)
        + 8;
  else {
    unint64_t v82 = 0;
  }
  uint64_t v83 = (v79 + 31) & 0x1FFFFFFE0;
  if (v80) {
    uint64_t v84 = (v79 + 31) & 0x1FFFFFFE0;
  }
  else {
    uint64_t v84 = v79;
  }
  uint64_t v215 = v84;
  uint64_t v85 = v84 + v80;
  if (v222) {
    unint64_t v82 = ((v85 + v82 + 31) & 0xFFFFFFFFFFFFFFE0) - v85;
  }
  unint64_t v206 = v82;
  uint64_t v86 = v85 + 8 * v222 + v82;
  int v217 = v21;
  long long v211 = v26;
  uint64_t v223 = v8;
  if (!v86) {
    goto LABEL_214;
  }
  if (a8)
  {
    AGX::Heap<true>::allocateImpl(&v224, a2 + 5688, v86, 0);
    uint64_t v87 = a1;
    int v88 = *(_DWORD *)(a1 + 1232) + *(_DWORD *)v225;
    long long v89 = *(_OWORD *)v225;
    *long long v15 = v224;
    v15[1] = v89;
    *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)&v225[9];
    uint64_t v213 = *(void *)(a1 + 1072) + 0x1000000000;
    __dst = *(char **)(a1 + 1080);
    *(void *)(a1 + 984) = v213;
  }
  else
  {
    uint64_t v87 = a1;
    AGX::Heap<true>::allocateImpl(&v224, a2 + 5184, v86, (void *)(a1 + 552));
    int v88 = *(_DWORD *)(a1 + 1232) + *(_DWORD *)v225;
    long long v90 = *(_OWORD *)v225;
    *(_OWORD *)(v218 + 632) = v224;
    *(_OWORD *)(v218 + 648) = v90;
    *(_OWORD *)(v218 + 657) = *(_OWORD *)&v225[9];
    uint64_t v213 = *(void *)(a1 + 672);
    __dst = *(char **)(a1 + 680);
  }
  *(_DWORD *)(v87 + 1232) = v88;
  unint64_t v21 = v217;
  if (v79)
  {
    int v91 = (unsigned __int16 *)((char *)v217 - *v217);
    if (*v91 < 0x1Fu)
    {
      uint64_t v92 = 0;
    }
    else
    {
      uint64_t v92 = v91[15];
      if (v92) {
        v92 += (uint64_t)v217 + *(unsigned int *)((char *)v217 + v92);
      }
    }
    memcpy(__dst, (const void *)(v92 + 4), v79);
    *(void *)(a1 + 616) = v213;
    *(void *)(a1 + 624) = __dst;
    *(void *)(a1 + 632) = v215;
  }
  if (v81)
  {
    if (a8) {
      *(void *)(a1 + 992) = v213 + v83;
    }
    uint64_t v93 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v93 >= 0xBu && (uint64_t v94 = v93[5]) != 0) {
      long long v95 = (char *)v26 + v94 + *(unsigned int *)((char *)v26 + v94);
    }
    else {
      long long v95 = 0;
    }
    uint64_t v96 = *(unsigned __int16 *)((char *)v217 - *v217 + 28);
    uint64_t v97 = *(unsigned int *)((char *)v217 + v96);
    if (*(int *)((char *)v217 + v96 + v97))
    {
      uint64_t v98 = 0;
      unint64_t v99 = 0;
      __n128 v207 = &__dst[v83];
      long long v208 = v95 + 4;
      uint64_t v100 = 24;
      if (!v16) {
        uint64_t v100 = 8;
      }
      size_t v204 = v100;
      while (1)
      {
        uint64_t v101 = v96;
        uint64_t v102 = v96 + v97;
        uint64_t v103 = &v21[v98];
        uint64_t v104 = *(unsigned int *)((char *)&v21[v98 + 1] + v102);
        uint64_t v105 = v102 + v104;
        unint64_t v106 = (char *)&v21[v98] + v102 + v104;
        uint64_t v107 = *((int *)v106 + 1);
        unint64_t v108 = (char *)v103 + v105 - v107;
        unsigned int v109 = *((unsigned __int16 *)v108 + 2);
        if (v109 < 5) {
          goto LABEL_159;
        }
        uint64_t v110 = *((unsigned __int16 *)v108 + 4);
        if (!v110) {
          goto LABEL_159;
        }
        int v111 = *((unsigned __int8 *)v217 + v101 + v97 + v104 + v98 * 4 + v110 + 4);
        if (v111 != 114)
        {
          if (v111 == 18)
          {
            if (v109 < 9)
            {
              uint64_t v113 = 0;
            }
            else
            {
              uint64_t v112 = v101 + v97 + v104;
              uint64_t v113 = *(unsigned __int16 *)((char *)&v217[v98 + 3] + v112 - v107);
              if (v113) {
                uint64_t v113 = *(unsigned int *)((char *)v217 + v112 + v98 * 4 + v113 + 4);
              }
            }
            unint64_t v116 = &v207[8 * v113];
            bzero(v116, v204);
            uint64_t v117 = (char *)&v217[v98] + v101 + v97 + v104 - *((int *)v106 + 1);
            if (*((unsigned __int16 *)v117 + 2) < 7u)
            {
              uint64_t v118 = 0;
            }
            else
            {
              uint64_t v118 = *((unsigned __int16 *)v117 + 5);
              if (v118) {
                uint64_t v118 = *(unsigned int *)((char *)v217 + v101 + v97 + v104 + v98 * 4 + v118 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v224, (int *)&v208[4 * v118 + *(unsigned int *)&v208[4 * v118]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v228.n128_u64, (uint64_t)&v224);
            *(void *)unint64_t v116 = v228.n128_u64[0];
            if (v227 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v216, (uint64_t)v116);
          }
          goto LABEL_159;
        }
        if (v109 < 7)
        {
          uint64_t v115 = 0;
        }
        else
        {
          uint64_t v114 = v101 + v97 + v104;
          uint64_t v115 = *(unsigned __int16 *)((char *)&v217[v98 + 2] + v114 - v107 + 2);
          if (v115) {
            uint64_t v115 = *(unsigned int *)((char *)v217 + v114 + v98 * 4 + v115 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v224, (int *)&v208[4 * v115 + *(unsigned int *)&v208[4 * v115]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v228, *(void *)(a1 + 784), (uint64_t)&v224);
        int v119 = *(_DWORD *)(v228.n128_u64[0] + 96);
        BOOL v120 = *(__n128 **)(a1 + 768);
        if ((unint64_t)v120 >= *(void *)(a1 + 776))
        {
          unint64_t v122 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v205, v228);
          uint64_t v8 = v223;
        }
        else
        {
          v120->n128_u64[0] = v228.n128_u64[0];
          unint64_t v121 = v228.n128_u64[1];
          v120->n128_u64[1] = v228.n128_u64[1];
          uint64_t v8 = v223;
          if (v121) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v122 = v120 + 1;
        }
        *(void *)(a1 + 768) = v122;
        unint64_t v123 = (char *)&v217[v98] + v101 + v97 + v104 - *((int *)v106 + 1);
        if (*((unsigned __int16 *)v123 + 2) < 9u)
        {
          uint64_t v124 = 0;
        }
        else
        {
          uint64_t v124 = *((unsigned __int16 *)v123 + 6);
          if (v124) {
            uint64_t v124 = *(unsigned int *)((char *)v217 + v101 + v97 + v104 + v98 * 4 + v124 + 4);
          }
        }
        *(_DWORD *)&v207[4 * v124] = v119;
        unint64_t v125 = (std::__shared_weak_count *)v228.n128_u64[1];
        if (v228.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v228.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v227 < 0) {
          goto LABEL_190;
        }
LABEL_159:
        ++v99;
        unint64_t v21 = v217;
        uint64_t v96 = *(unsigned __int16 *)((char *)v217 - *v217 + 28);
        uint64_t v97 = *(unsigned int *)((char *)v217 + v96);
        ++v98;
        if (v99 >= *(unsigned int *)((char *)v217 + v96 + v97)) {
          goto LABEL_193;
        }
      }
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
      if ((v227 & 0x80000000) == 0) {
        goto LABEL_159;
      }
LABEL_190:
      operator delete(__p);
      goto LABEL_159;
    }
LABEL_193:
    long long v26 = v211;
    unint64_t v126 = v206;
    if (!v206)
    {
LABEL_198:
      if (v222)
      {
LABEL_199:
        *(void *)(v218 + 464) = &__dst[v215 + v81 + v126];
        unint64_t v132 = (unsigned __int16 *)((char *)v26 - *v26);
        if (*v132 >= 0xBu && (uint64_t v133 = v132[5]) != 0)
        {
          v134 = (int *)((char *)v26 + v133 + *(unsigned int *)((char *)v26 + v133));
          if (!a8) {
            goto LABEL_205;
          }
        }
        else
        {
          v134 = 0;
          if (!a8)
          {
LABEL_205:
            if (v134 && *v134)
            {
              unint64_t v135 = 0;
              uint64_t v136 = 1;
              do
              {
                unint64_t v137 = (void *)(*(void *)(v218 + 464) + 8 * (((v136 * 4) - 4) & 0xFFFFFFFC));
                AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v224, (_DWORD *)((char *)&v134[v136] + v134[v136]));
                AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v228.n128_u64, (uint64_t)&v224);
                *unint64_t v137 = v228.n128_u64[0];
                if (v227 < 0) {
                  operator delete(__p);
                }
                std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v216, (uint64_t)v137);
                ++v135;
                ++v136;
              }
              while (v135 < *v134);
            }
            goto LABEL_214;
          }
        }
        *(void *)(a1 + 1000) = v85 + v126 + v213;
        goto LABEL_205;
      }
LABEL_214:
      AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v216);
      unint64_t v138 = (unsigned __int16 *)((char *)v21 - *v21);
      uint64_t v139 = v138[8];
      uint64_t v140 = *(unsigned int *)((char *)v21 + v139);
      long long v141 = (unsigned int *)((char *)v21 + v139 + v140);
      uint64_t v142 = *v141;
      if (v142)
      {
        unint64_t v143 = 0;
        uint64_t v144 = 4 * v142;
        unint64_t v145 = (char *)v21 + v139 + v140;
        do
        {
          uint64_t v150 = v141[v143 / 4 + 1];
          unint64_t v151 = &v145[v143 + v150 - *(int *)((char *)&v141[v143 / 4 + 1] + v150)];
          if (*((unsigned __int16 *)v151 + 2) < 7u)
          {
            LODWORD(v146) = 0;
          }
          else
          {
            uint64_t v146 = *((unsigned __int16 *)v151 + 5);
            if (v146)
            {
              unint64_t v152 = *(unsigned int *)&v145[v143 + 4 + v150 + v146];
              LODWORD(v146) = v152;
              if ((v152 & 0x80000000) != 0)
              {
                v212[(v152 & 0x7C000000) != 0] |= 1 << (v152 >> 20);
                uint64_t v147 = 0x11800000000000;
                BOOL v149 = v212;
                goto LABEL_218;
              }
            }
          }
          uint64_t v147 = 1 << v146;
          uint64_t v148 = 8 * ((v146 & 0xFFFC0) != 0);
          *(void *)(a1 + 56 + v148) |= v147;
          BOOL v149 = (void *)(a1 + 104 + v148);
LABEL_218:
          *v149 |= v147;
          v143 += 4;
        }
        while (v144 != v143);
      }
      uint64_t v153 = v138[10];
      uint64_t v154 = *(unsigned int *)((char *)v21 + v153);
      int v155 = (unsigned int *)((char *)v21 + v153 + v154);
      uint64_t v156 = *v155;
      if (v156)
      {
        unint64_t v157 = 0;
        uint64_t v158 = 4 * v156;
        int64_t v159 = (char *)v21 + v153 + v154;
        do
        {
          uint64_t v164 = v155[v157 / 4 + 1];
          unint64_t v165 = &v159[v157 + v164 - *(int *)((char *)&v155[v157 / 4 + 1] + v164)];
          if (*((unsigned __int16 *)v165 + 2) < 7u)
          {
            LODWORD(v160) = 0;
          }
          else
          {
            uint64_t v160 = *((unsigned __int16 *)v165 + 5);
            if (v160)
            {
              unint64_t v166 = *(unsigned int *)&v159[v157 + 4 + v164 + v160];
              LODWORD(v160) = v166;
              if ((v166 & 0x80000000) != 0)
              {
                uint64_t v161 = 1 << (v166 >> 20);
                unint64_t v163 = &v212[(v166 & 0x7C000000) != 0];
                goto LABEL_227;
              }
            }
          }
          uint64_t v161 = 1 << v160;
          uint64_t v162 = 8 * ((v160 & 0xFFFC0) != 0);
          *(void *)(a1 + 72 + v162) |= v161;
          unint64_t v163 = (void *)(a1 + 120 + v162);
LABEL_227:
          *v163 |= v161;
          v157 += 4;
        }
        while (v158 != v157);
      }
      uint64_t v167 = v138[6];
      uint64_t v168 = *(unsigned int *)((char *)v21 + v167);
      unint64_t v169 = (unsigned int *)((char *)v21 + v167 + v168);
      uint64_t v170 = *v169;
      if (v170)
      {
        unint64_t v171 = 0;
        uint64_t v172 = 4 * v170;
        uint64_t v173 = (char *)v21 + v167 + v168;
        do
        {
          uint64_t v177 = v169[v171 / 4 + 1];
          __n128 v178 = &v173[v171 + v177 - *(int *)((char *)&v169[v171 / 4 + 1] + v177)];
          if (*((unsigned __int16 *)v178 + 2) < 7u)
          {
            LODWORD(v174) = 0;
          }
          else
          {
            unint64_t v174 = *((unsigned __int16 *)v178 + 5);
            if (v174)
            {
              unint64_t v174 = *(unsigned int *)&v173[v171 + 4 + v177 + v174];
              if ((v174 & 0x80000000) != 0)
              {
                uint64_t v175 = 1 << (v174 >> 20);
                BOOL v176 = (v174 & 0x7C000000) != 0;
                goto LABEL_236;
              }
              LODWORD(v174) = v174 & 0xFFFFF;
              if (v174 <= 0x35 && ((1 << v174) & 0x26000000000000) != 0) {
                goto LABEL_237;
              }
            }
          }
          uint64_t v175 = 1 << v174;
          BOOL v176 = v174 > 0x3F;
          *(void *)(v218 + 8 * v176) |= v175;
LABEL_236:
          v212[v176] |= v175;
LABEL_237:
          v171 += 4;
        }
        while (v172 != v171);
      }
      int8x16_t v180 = *(int8x16_t *)(v8 + 160);
      if (*(_OWORD *)&v180 != 0)
      {
        *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v180);
        *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v180);
      }
      int8x16_t v181 = *(int8x16_t *)(v8 + 192);
      if (*(_OWORD *)&v181 != 0)
      {
        *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v181);
        *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v181);
      }
      uint64_t v182 = v138[12];
      uint64_t v183 = *(unsigned int *)((char *)v21 + v182);
      unint64_t v184 = (unsigned int *)((char *)v21 + v182 + v183);
      uint64_t v185 = *v184;
      if (!v185)
      {
LABEL_288:
        if (!*(unsigned char *)(a1 + 1239))
        {
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v8 + 424);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(v8 + 440);
          *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v8 + 440), *(int8x16_t *)(v8 + 424));
        }
        operator new();
      }
      unint64_t v186 = 0;
      uint64_t v187 = 4 * v185;
      unint64_t v188 = (char *)v21 + v182 + v183;
      while (1)
      {
        uint64_t v191 = *(unsigned int *)&v188[v186 + 4];
        uint64_t v192 = v191 - *(int *)((char *)&v184[v186 / 4 + 1] + v191);
        long long v193 = &v188[v186 + v192];
        unsigned int v194 = *((unsigned __int16 *)v193 + 2);
        if (v194 < 7)
        {
          if (v194 < 5) {
            goto LABEL_256;
          }
        }
        else
        {
          uint64_t v195 = *((unsigned __int16 *)v193 + 5);
          if (v195)
          {
            unsigned int v196 = *(_DWORD *)&v188[v186 + 4 + v191 + v195];
            goto LABEL_262;
          }
        }
        unsigned int v196 = 0;
LABEL_262:
        uint64_t v197 = *(unsigned __int16 *)&v188[v186 + 8 + v192];
        if (v197)
        {
          int v198 = v188[v186 + 4 + v191 + v197];
          uint64_t v190 = (void *)(a1 + 184);
          uint64_t v189 = 1;
          switch(v188[v186 + 4 + v191 + v197])
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
            case 113:
              if ((v196 & 0x80000000) != 0)
              {
                uint64_t v189 = 1 << (v196 >> 20);
                uint64_t v190 = &v212[(v196 & 0x7C000000) != 0];
              }
              else
              {
                if ((v196 & 0xFFF00000) == 0x400000) {
                  break;
                }
                if (v198 == 113 || v198 == 98) {
                  uint64_t v200 = 32;
                }
                else {
                  uint64_t v200 = 16;
                }
                uint64_t v189 = 1 << v196;
                uint64_t v201 = a1 + v200 + 8 * ((v196 & 0xFFFC0) != 0);
                *(void *)(v201 + 136) |= 1 << v196;
                uint64_t v190 = (void *)(v201 + 88);
              }
LABEL_255:
              *v190 |= v189;
              break;
            case 24:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 4;
              goto LABEL_255;
            case 25:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 8;
              goto LABEL_255;
            case 27:
              goto LABEL_255;
            case 28:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 2;
              goto LABEL_255;
            case 59:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 16;
              goto LABEL_255;
            case 60:
            case 61:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 32;
              goto LABEL_255;
            case 75:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 64;
              goto LABEL_255;
            case 84:
            case 85:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 128;
              goto LABEL_255;
            case 108:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 256;
              goto LABEL_255;
            case 109:
            case 110:
              uint64_t v189 = 1 << v196;
              uint64_t v202 = (v196 & 0xFFFC0) != 0;
              *(void *)(a1 + 136 + v202 * 8) |= 1 << v196;
              uint64_t v190 = &v212[v202];
              goto LABEL_255;
            case 111:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 512;
              goto LABEL_255;
            case 112:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 1024;
              goto LABEL_255;
            case 118:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 2048;
              goto LABEL_255;
            case 119:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 4096;
              goto LABEL_255;
            case 120:
              uint64_t v190 = (void *)(a1 + 184);
              uint64_t v189 = 0x2000;
              goto LABEL_255;
            case -117:
              uint64_t v189 = 1 << v196;
              uint64_t v203 = (v196 & 0xFFFC0) != 0;
              *(void *)(v218 + v203 * 8) |= 1 << v196;
              uint64_t v190 = &v212[v203];
              goto LABEL_255;
            default:
              break;
          }
        }
LABEL_256:
        v186 += 4;
        if (v187 == v186) {
          goto LABEL_288;
        }
      }
    }
  }
  else
  {
    unint64_t v126 = v206;
    if (!v206) {
      goto LABEL_198;
    }
  }
  *(void *)(a1 + 496) = v85 + v213;
  unint64_t v127 = &__dst[v215 + v81];
  unint64_t v128 = *(const void **)(v8 + 216);
  size_t v129 = *(void *)(v8 + 224) - (void)v128;
  *(_WORD *)unint64_t v127 = v129 >> 2;
  *((_WORD *)v127 + 1) = (*(_DWORD *)(v8 + 248) - *(_DWORD *)(v8 + 240)) >> 2;
  *((_WORD *)v127 + 2) = (*(_DWORD *)(v8 + 352) - *(_DWORD *)(v8 + 344)) >> 1;
  *((_WORD *)v127 + 3) = (*(_DWORD *)(v8 + 400) - *(_DWORD *)(v8 + 392)) >> 1;
  memcpy(v127 + 8, v128, v129);
  long long v130 = &v127[*(void *)(v8 + 224) - *(void *)(v8 + 216) + 8];
  memcpy(v130, *(const void **)(v8 + 240), *(void *)(v8 + 248) - *(void *)(v8 + 240));
  long long v131 = &v130[*(void *)(v8 + 248) - *(void *)(v8 + 240)];
  memcpy(v131, *(const void **)(v8 + 344), *(void *)(v8 + 352) - *(void *)(v8 + 344));
  memcpy(&v131[*(void *)(v8 + 352) - *(void *)(v8 + 344)], *(const void **)(v8 + 392), *(void *)(v8 + 400) - *(void *)(v8 + 392));
  if (*((_WORD *)v127 + 2))
  {
    if (*((_WORD *)v127 + 3)) {
      goto LABEL_198;
    }
  }
  else
  {
    *((_WORD *)v127 + 2) = *(_WORD *)v127;
    if (*((_WORD *)v127 + 3)) {
      goto LABEL_198;
    }
  }
  *((_WORD *)v127 + 3) = *((_WORD *)v127 + 1);
  if (v222) {
    goto LABEL_199;
  }
  goto LABEL_214;
}

void sub_242AE5300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a30 + 752);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a11);
  long long v49 = *a28;
  if (*a28)
  {
    *(void *)(a31 + 736) = v49;
    operator delete(v49);
  }
  if (*(char *)(a31 + 487) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(a31 + 463) < 0) {
    operator delete(*a18);
  }
  long long v50 = (void **)(a30 + 336);
  if (*(char *)(a31 + 439) < 0)
  {
    operator delete(*a19);
    uint64_t v51 = *v50;
    if (*v50) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v51 = *v50;
    if (*v50)
    {
LABEL_11:
      *(void *)(a31 + 384) = v51;
      operator delete(v51);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

uint64_t *AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 720))
  {
    uint64_t v18 = a1[98];
    if (v18)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v18 + 7528));
      unint64_t v19 = *(char **)(v18 + 7560);
      unint64_t v20 = *(char **)(v18 + 7568);
      if (v19 != v20)
      {
        while (*(uint64_t **)v19 != a1 + 91)
        {
          v19 += 8;
          if (v19 == v20)
          {
            unint64_t v19 = *(char **)(v18 + 7568);
            break;
          }
        }
      }
      int64_t v21 = v20 - (v19 + 8);
      if (v20 != v19 + 8) {
        memmove(v19, v19 + 8, v20 - (v19 + 8));
      }
      *(void *)(v18 + 7568) = &v19[v21];
      os_unfair_lock_unlock((os_unfair_lock_t)(v18 + 7528));
      if (a1[87])
      {
        uint64_t v22 = a1[88];
        long long v23 = *(NSObject **)(v22 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v22;
        uint64_t v35 = a1 + 84;
        dispatch_sync(v23, &v30);
        *(_OWORD *)((char *)a1 + 697) = 0u;
        *((_OWORD *)a1 + 42) = 0u;
        *((_OWORD *)a1 + 43) = 0u;
      }
      if (a1[103])
      {
        uint64_t v24 = a1[104];
        int v25 = *(NSObject **)(v24 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v24;
        uint64_t v35 = a1 + 100;
        dispatch_sync(v25, &v30);
        *(_OWORD *)((char *)a1 + 825) = 0u;
        *((_OWORD *)a1 + 50) = 0u;
        *((_OWORD *)a1 + 51) = 0u;
      }
      if (a1[129])
      {
        uint64_t v26 = a1[130];
        long long v27 = *(NSObject **)(v26 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v26;
        uint64_t v35 = a1 + 126;
        dispatch_sync(v27, &v30);
        *(_OWORD *)((char *)a1 + 1033) = 0u;
        *((_OWORD *)a1 + 63) = 0u;
        *((_OWORD *)a1 + 64) = 0u;
      }
      if (a1[137])
      {
        uint64_t v28 = a1[138];
        unint64_t v29 = *(NSObject **)(v28 + 16);
        uint64_t v30 = MEMORY[0x263EF8330];
        uint64_t v31 = 3221225472;
        long long v32 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
        long long v33 = &__block_descriptor_48_e5_v8__0l;
        uint64_t v34 = v28;
        uint64_t v35 = a1 + 134;
        dispatch_sync(v29, &v30);
        *(_OWORD *)((char *)a1 + 1097) = 0u;
        *((_OWORD *)a1 + 68) = 0u;
        *((_OWORD *)a1 + 67) = 0u;
      }
    }
  }
  uint64_t v2 = a1[107];
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 176);
    if (v3)
    {
      *(void *)(v2 + 184) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)(v2 + 24);
    if (v4)
    {
      *(void *)(v2 + 32) = v4;
      operator delete(v4);
    }
    long long v5 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x24566ED90](v2, 0x1030C40B293E8E3);
    a1[107] = 0;
  }
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(void **)(v6 + 176);
    if (v7)
    {
      *(void *)(v6 + 184) = v7;
      operator delete(v7);
    }
    long long v8 = *(void **)(v6 + 24);
    if (v8)
    {
      *(void *)(v6 + 32) = v8;
      operator delete(v8);
    }
    uint64_t v9 = *(void **)v6;
    if (*(void *)v6)
    {
      *(void *)(v6 + 8) = v9;
      operator delete(v9);
    }
    MEMORY[0x24566ED90](v6, 0x1030C40B293E8E3);
    *a1 = 0;
  }
  std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy((void *)a1[151]);
  int v10 = (void *)a1[147];
  if (v10)
  {
    a1[148] = (uint64_t)v10;
    operator delete(v10);
  }
  uint64_t v11 = a1[95];
  if (v11)
  {
    uint64_t v12 = a1[96];
    unint64_t v13 = (void *)a1[95];
    if (v12 != v11)
    {
      do
      {
        uint64_t v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v12 -= 16;
      }
      while (v12 != v11);
      unint64_t v13 = (void *)a1[95];
    }
    a1[96] = v11;
    operator delete(v13);
  }
  long long v15 = (void *)a1[91];
  if (v15)
  {
    a1[92] = (uint64_t)v15;
    operator delete(v15);
  }
  if (*((char *)a1 + 487) < 0)
  {
    operator delete((void *)a1[58]);
    if ((*((char *)a1 + 463) & 0x80000000) == 0)
    {
LABEL_33:
      if ((*((char *)a1 + 439) & 0x80000000) == 0) {
        goto LABEL_34;
      }
LABEL_54:
      operator delete((void *)a1[52]);
      long long v16 = (void *)a1[47];
      if (!v16) {
        return a1;
      }
      goto LABEL_35;
    }
  }
  else if ((*((char *)a1 + 463) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete((void *)a1[55]);
  if (*((char *)a1 + 439) < 0) {
    goto LABEL_54;
  }
LABEL_34:
  long long v16 = (void *)a1[47];
  if (v16)
  {
LABEL_35:
    a1[48] = (uint64_t)v16;
    operator delete(v16);
  }
  return a1;
}

__n128 AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::updateWithRuntimeState(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  unsigned int v4 = *(_DWORD *)(v1 + 600);
  if (v4 <= v2[12]) {
    unsigned int v4 = v2[12];
  }
  *(_DWORD *)(v1 + 600) = v4;
  int v5 = v2[21] + v2[13];
  *(_DWORD *)(v1 + 592) = v5;
  int v6 = v2[16];
  *(_DWORD *)(v1 + 604) = v6;
  uint64_t v7 = *(void *)(v1 + 856);
  if (v7)
  {
    uint64_t v8 = v1;
    int v9 = *(_DWORD *)(v1 + 596);
    int v10 = *(_DWORD *)(v1 + 608);
    *(void *)(v7 + 88) = *(void *)(v7 + 88) & 0xFFFFF00000000000 | ((unsigned __int16)((v5 + 3) >> 2) << 16) | ((((unint64_t)(((unsigned __int16)((v6 + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | (unsigned __int16)((v5 + 3) >> 2);
    *(_DWORD *)(v7 + 248) = (v9 + 3) >> 2;
    *(_DWORD *)(v7 + 252) = (((v10 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v7 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v7 + 48), *(_DWORD *)(v7 + 240), *(void *)v7 + *(unsigned __int16 *)(v7 + 244));
    }
    uint64_t v11 = *(void *)(v8 + 856);
    uint64_t v12 = *(char **)(v8 + 808);
    memcpy(v12, *(const void **)v11, *(void *)(v11 + 8) - *(void *)v11);
    if (*(unsigned char *)(v11 + 200)) {
      *(int8x16_t *)&v12[*(unsigned int *)(v11 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[*(unsigned int *)(v11 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    unint64_t v13 = *(unsigned int **)(v11 + 176);
    for (i = *(unsigned int **)(v11 + 184); v13 != i; v13 += 3)
    {
      v15.i64[0] = v22[v13[1]] + *v13;
      v15.i64[1] = (unint64_t)v15.i64[0] >> 5;
      *(int8x16_t *)&v12[v13[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[v13[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v15, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v16 = *(void *)(v8 + 856);
    long long v17 = *(_OWORD *)(v16 + 96);
    long long v19 = *(_OWORD *)(v16 + 48);
    long long v18 = *(_OWORD *)(v16 + 64);
    *(_OWORD *)(v8 + 896) = *(_OWORD *)(v16 + 80);
    *(_OWORD *)(v8 + 912) = v17;
    *(_OWORD *)(v8 + 864) = v19;
    *(_OWORD *)(v8 + 880) = v18;
    long long v20 = *(_OWORD *)(v16 + 128);
    __n128 result = *(__n128 *)(v16 + 144);
    long long v21 = *(_OWORD *)(v16 + 112);
    *(void *)(v8 + 976) = *(void *)(v16 + 160);
    *(_OWORD *)(v8 + 944) = v20;
    *(__n128 *)(v8 + 960) = result;
    *(_OWORD *)(v8 + 928) = v21;
  }
  return result;
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::getShaderPassInfo(uint64_t result, void *a2, int a3, unsigned int *a4, int *a5, unsigned char *a6, char *a7)
{
  unint64_t v13 = (const _AGCDrawBufferState *)result;
  uint64_t v14 = (unsigned int **)(a2 + 28);
  if (a2[28])
  {
    if (!a2[29]) {
      uint64_t v14 = (unsigned int **)(a2 + 98);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a2 + 98);
  }
  uint64_t v16 = *v14;
  int8x16_t v15 = v14[1];
  if (v16) {
    BOOL v17 = v15 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    long long v18 = 0;
  }
  else {
    long long v18 = (int *)((char *)v16 + *v16);
  }
  long long v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
    long long v21 = (int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  }
  else {
    long long v21 = 0;
  }
  uint64_t v22 = (unsigned int **)(a2 + 58);
  uint64_t v23 = a2[58];
  if (v23)
  {
    if (a2[59]) {
      uint64_t v24 = (unsigned int **)(a2 + 58);
    }
    else {
      uint64_t v24 = (unsigned int **)(a2 + 128);
    }
  }
  else
  {
    uint64_t v24 = (unsigned int **)(a2 + 128);
  }
  uint64_t v26 = *v24;
  int v25 = v24[1];
  if (v26) {
    BOOL v27 = v25 == 0;
  }
  else {
    BOOL v27 = 1;
  }
  if (v27) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = (int *)((char *)v26 + *v26);
  }
  unint64_t v29 = (unsigned __int16 *)((char *)v28 - *v28);
  if (*v29 >= 9u && (uint64_t v30 = v29[4]) != 0)
  {
    uint64_t v31 = (int *)((char *)v28 + v30 + *(unsigned int *)((char *)v28 + v30));
    if (!v23)
    {
LABEL_30:
      uint64_t v22 = (unsigned int **)(a2 + 128);
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v31 = 0;
    if (!v23) {
      goto LABEL_30;
    }
  }
  if (!a2[59]) {
    uint64_t v22 = (unsigned int **)(a2 + 128);
  }
LABEL_34:
  long long v33 = *v22;
  long long v32 = v22[1];
  if (v33) {
    BOOL v34 = v32 == 0;
  }
  else {
    BOOL v34 = 1;
  }
  if (v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = (int *)((char *)v33 + *v33);
  }
  long long v36 = (unsigned __int16 *)((char *)v35 - *v35);
  if (*v36 >= 0xFu)
  {
    uint64_t v37 = v36[7];
    if (v37)
    {
      long long v38 = (int *)((char *)v35 + v37 + *(unsigned int *)((char *)v35 + v37));
      BOOL v328 = 0;
      if (!v31) {
        goto LABEL_43;
      }
LABEL_46:
      uint64_t v39 = (17 - a3);
      long long v40 = (unsigned __int16 *)((char *)v31 - *v31);
      unsigned int v41 = *v40;
      if (v41 < 7)
      {
        unint64_t v42 = 0;
        goto LABEL_51;
      }
      if (v40[3])
      {
        unint64_t v42 = *(void *)((char *)v31 + v40[3]);
        if (v41 < 9) {
          goto LABEL_51;
        }
      }
      else
      {
        unint64_t v42 = 0;
        if (v41 < 9) {
          goto LABEL_51;
        }
      }
      uint64_t v55 = v40[4];
      if (v55)
      {
        unint64_t v43 = *(void *)((char *)v31 + v55);
LABEL_52:
        unsigned int v327 = 0;
        __n128 result = agxsGetShaderPassInfo(v39, v13, v42, v43, &v327, &v328);
        uint64_t v44 = a2[63];
        if (v44)
        {
          int v45 = 0;
          int v46 = a2 + 133;
          uint64_t v47 = 63;
          if (a2[64]) {
            int v46 = a2 + 63;
          }
          else {
            uint64_t v47 = 133;
          }
          if (!v46[1] || (uint64_t v48 = (unsigned int *)a2[v47]) == 0)
          {
LABEL_101:
            *a4 = (v327 << a3) | v45;
            if (v43) {
              BOOL v84 = 0;
            }
            else {
              BOOL v84 = v45 == 0;
            }
            LOBYTE(v31) = v84;
            if (!v38) {
              goto LABEL_111;
            }
            goto LABEL_108;
          }
        }
        else
        {
          int v45 = 0;
          if (!a2[134]) {
            goto LABEL_101;
          }
          uint64_t v48 = (unsigned int *)a2[133];
          if (!v48) {
            goto LABEL_101;
          }
        }
        long long v49 = (int *)((char *)v48 + *v48);
        long long v50 = (unsigned __int16 *)((char *)v49 - *v49);
        if (*v50 >= 7u && (uint64_t v51 = v50[3]) != 0) {
          uint64_t v52 = (int *)((char *)v49 + v51 + *(unsigned int *)((char *)v49 + v51));
        }
        else {
          uint64_t v52 = 0;
        }
        long long v53 = (unsigned __int16 *)((char *)v52 - *v52);
        if (*v53 < 9u || !v53[4])
        {
          int v45 = 0;
          goto LABEL_101;
        }
        if (v44)
        {
          if (a2[64]) {
            long long v54 = (unsigned int **)(a2 + 63);
          }
          else {
            long long v54 = (unsigned int **)(a2 + 133);
          }
        }
        else
        {
          long long v54 = (unsigned int **)(a2 + 133);
        }
        uint64_t v56 = 0;
        long long v58 = v54;
        long long v57 = *v54;
        if (!v58[1]) {
          long long v57 = 0;
        }
        long long v59 = (int *)((char *)v57 + *v57);
        uint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
        if (*v60 >= 7u)
        {
          uint64_t v56 = (int *)v60[3];
          if (v60[3]) {
            uint64_t v56 = (int *)((char *)v56 + (void)v59 + *(unsigned int *)((char *)v56 + (void)v59));
          }
        }
        long long v61 = (unsigned __int16 *)((char *)v56 - *v56);
        if (*v61 < 9u)
        {
          long long v62 = 0;
        }
        else
        {
          long long v62 = (int *)v61[4];
          if (v62) {
            long long v62 = (int *)((char *)v62 + (void)v56 + *(unsigned int *)((char *)v62 + (void)v56));
          }
        }
        __n128 result = v328;
        BOOL v63 = v328;
        uint64_t v64 = (unsigned __int16 *)((char *)v21 - *v21);
        unsigned int v65 = *v64;
        if (v65 >= 0xF)
        {
          unsigned int v66 = a3 - 1;
          uint64_t v67 = (char *)v62 - *v62;
          unint64_t v68 = (char *)v62
              + *((unsigned __int16 *)v67 + 2)
              + *(unsigned int *)((char *)v62 + *((unsigned __int16 *)v67 + 2));
          int v69 = (char *)v62
              + *((unsigned __int16 *)v67 + 3)
              + *(unsigned int *)((char *)v62 + *((unsigned __int16 *)v67 + 3));
          uint64_t v70 = v64[7];
          if (v65 >= 0x13)
          {
            uint64_t v71 = v64[9];
            uint64_t v72 = v64[8];
            if (v64[7]) {
              uint64_t v73 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v73 = 0;
            }
            if (v64[9]) {
              uint64_t v94 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v94 = 0;
            }
            if (v64[8]) {
              uint64_t v95 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v95 = 0;
            }
            uint64_t v96 = *(void *)(v68 + 4);
            uint64_t v97 = *(void *)(v69 + 4);
            if (v65 < 0x15)
            {
              uint64_t v98 = 0;
            }
            else
            {
              uint64_t v98 = v64[10];
              if (v64[10]) {
                uint64_t v98 = *(void *)((char *)v21 + v98);
              }
            }
            BOOL v320 = (v94 & v97 | v73 & v96) != 0;
            uint64_t v99 = v95 & v96;
            uint64_t v100 = v98 & v97 | v95 & v96;
            BOOL v101 = v100 != 0;
            BOOL v102 = v328 || (v99 != v96 || (v98 & v97) != v97) && v100 != 0;
            if (v64[7]) {
              uint64_t v105 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v105 = 0;
            }
            if (v64[9]) {
              uint64_t v106 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v106 = 0;
            }
            if (v64[8]) {
              uint64_t v107 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v107 = 0;
            }
            uint64_t v108 = *(void *)(v68 + 12);
            uint64_t v109 = *(void *)(v69 + 12);
            if (v65 < 0x15)
            {
              uint64_t v110 = 0;
            }
            else
            {
              uint64_t v110 = v64[10];
              if (v64[10]) {
                uint64_t v110 = *(void *)((char *)v21 + v110);
              }
            }
            uint64_t v111 = v106 & v109 | v105 & v108;
            uint64_t v112 = v107 & v108;
            uint64_t v113 = v110 & v109;
            uint64_t v114 = v110 & v109 | v107 & v108;
            BOOL v115 = 1;
            int v116 = 1 << (a3 != 1);
            if (v111) {
              int v117 = 1 << (a3 != 1);
            }
            else {
              int v117 = 0;
            }
            int v319 = v117;
            if (!v114) {
              int v116 = 0;
            }
            if (!v102) {
              BOOL v115 = (v112 != v108 || v113 != v109) && v114 != 0;
            }
            if (v66 >= 2) {
              char v120 = 2;
            }
            else {
              char v120 = a3 - 1;
            }
            int v324 = v116;
            if (v64[7]) {
              uint64_t v121 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v121 = 0;
            }
            if (v64[9]) {
              uint64_t v122 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v122 = 0;
            }
            if (v64[8]) {
              uint64_t v123 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v123 = 0;
            }
            uint64_t v124 = *(void *)(v68 + 20);
            uint64_t v125 = *(void *)(v69 + 20);
            if (v65 < 0x15)
            {
              uint64_t v126 = 0;
            }
            else
            {
              uint64_t v126 = v64[10];
              if (v64[10]) {
                uint64_t v126 = *(void *)((char *)v21 + v126);
              }
            }
            uint64_t v127 = v122 & v125 | v121 & v124;
            uint64_t v128 = v123 & v124;
            uint64_t v129 = v126 & v125;
            uint64_t v130 = v126 & v125 | v123 & v124;
            BOOL v131 = 1;
            int v132 = 1 << v120;
            if (v127) {
              int v133 = v132;
            }
            else {
              int v133 = 0;
            }
            if (v130) {
              int v134 = v132;
            }
            else {
              int v134 = 0;
            }
            if (!v115) {
              BOOL v131 = (v128 != v124 || v129 != v125) && v130 != 0;
            }
            if (v66 >= 3) {
              char v137 = 3;
            }
            else {
              char v137 = a3 - 1;
            }
            if (v64[7]) {
              uint64_t v138 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v138 = 0;
            }
            if (v64[9]) {
              uint64_t v139 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v139 = 0;
            }
            int v323 = v134;
            int v140 = v133;
            if (v64[8]) {
              uint64_t v141 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v141 = 0;
            }
            uint64_t v142 = *(void *)(v68 + 28);
            uint64_t v143 = *(void *)(v69 + 28);
            if (v65 < 0x15)
            {
              uint64_t v144 = 0;
            }
            else
            {
              uint64_t v144 = v64[10];
              if (v64[10]) {
                uint64_t v144 = *(void *)((char *)v21 + v144);
              }
            }
            uint64_t v145 = v139 & v143 | v138 & v142;
            uint64_t v146 = v141 & v142;
            uint64_t v147 = v144 & v143;
            uint64_t v148 = v144 & v143 | v141 & v142;
            BOOL v149 = 1;
            int v150 = 1 << v137;
            if (v145) {
              int v151 = v150;
            }
            else {
              int v151 = 0;
            }
            if (v148) {
              int v152 = v150;
            }
            else {
              int v152 = 0;
            }
            if (!v131) {
              BOOL v149 = (v146 != v142 || v147 != v143) && v148 != 0;
            }
            if (v66 >= 4) {
              char v155 = 4;
            }
            else {
              char v155 = a3 - 1;
            }
            if (v64[7]) {
              uint64_t v156 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v156 = 0;
            }
            int v157 = v140;
            if (v64[9]) {
              uint64_t v158 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v158 = 0;
            }
            int v321 = v152;
            int v322 = v151;
            if (v64[8]) {
              uint64_t v159 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v159 = 0;
            }
            uint64_t v160 = *(void *)(v68 + 36);
            uint64_t v161 = *(void *)(v69 + 36);
            if (v65 < 0x15)
            {
              uint64_t v162 = 0;
            }
            else
            {
              uint64_t v162 = v64[10];
              if (v64[10]) {
                uint64_t v162 = *(void *)((char *)v21 + v162);
              }
            }
            uint64_t v163 = v158 & v161 | v156 & v160;
            uint64_t v164 = v159 & v160;
            uint64_t v165 = v162 & v161;
            uint64_t v166 = v162 & v161 | v164;
            BOOL v167 = 1;
            int v168 = 1 << v155;
            if (v163) {
              int v169 = v168;
            }
            else {
              int v169 = 0;
            }
            if (!v166) {
              int v168 = 0;
            }
            int v317 = v168;
            int v318 = v169;
            if (!v149) {
              BOOL v167 = (v164 != v160 || v165 != v161) && v166 != 0;
            }
            if (v66 >= 5) {
              char v172 = 5;
            }
            else {
              char v172 = a3 - 1;
            }
            if (v64[7]) {
              uint64_t v173 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v173 = 0;
            }
            if (v64[9]) {
              uint64_t v174 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v174 = 0;
            }
            if (v64[8]) {
              uint64_t v175 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v175 = 0;
            }
            uint64_t v176 = *(void *)(v68 + 44);
            uint64_t v177 = *(void *)(v69 + 44);
            v326 = v68;
            if (v65 < 0x15)
            {
              uint64_t v179 = v69;
              uint64_t v178 = 0;
            }
            else
            {
              uint64_t v178 = v64[10];
              uint64_t v179 = v69;
              if (v64[10]) {
                uint64_t v178 = *(void *)((char *)v21 + v178);
              }
            }
            uint64_t v182 = v174 & v177 | v173 & v176;
            uint64_t v183 = v175 & v176;
            uint64_t v184 = v178 & v177;
            uint64_t v185 = v178 & v177 | v183;
            BOOL v186 = 1;
            int v187 = 1 << v172;
            if (v182) {
              int v188 = v187;
            }
            else {
              int v188 = 0;
            }
            if (v185) {
              int v189 = v187;
            }
            else {
              int v189 = 0;
            }
            if (!v167) {
              BOOL v186 = (v183 != v176 || v184 != v177) && v185 != 0;
            }
            if (v66 >= 6) {
              char v192 = 6;
            }
            else {
              char v192 = a3 - 1;
            }
            if (v64[7]) {
              uint64_t v193 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v193 = 0;
            }
            if (v64[9]) {
              uint64_t v194 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v194 = 0;
            }
            if (v64[8]) {
              uint64_t v195 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v195 = 0;
            }
            uint64_t v196 = *(void *)(v326 + 52);
            uint64_t v197 = *(void *)(v179 + 52);
            if (v65 < 0x15)
            {
              uint64_t v198 = 0;
            }
            else
            {
              uint64_t v198 = v64[10];
              if (v64[10]) {
                uint64_t v198 = *(void *)((char *)v21 + v198);
              }
            }
            int v199 = v157 | v319 | v320;
            int v200 = v323 | v324 | v101;
            uint64_t v201 = v194 & v197 | v193 & v196;
            uint64_t v202 = v195 & v196;
            uint64_t v203 = v198 & v197;
            uint64_t v204 = v203 | v202;
            BOOL v205 = 1;
            int v206 = 1 << v192;
            if (v201) {
              int v207 = 1 << v192;
            }
            else {
              int v207 = 0;
            }
            if (v204) {
              int v208 = v206;
            }
            else {
              int v208 = 0;
            }
            if (!v186) {
              BOOL v205 = (v202 != v196 || v203 != v197) && v204 != 0;
            }
            if (v66 >= 7) {
              LOBYTE(v66) = 7;
            }
            if (v64[7]) {
              uint64_t v211 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v211 = 0;
            }
            if (v64[9]) {
              uint64_t v212 = *(void *)((char *)v21 + v71);
            }
            else {
              uint64_t v212 = 0;
            }
            if (v64[8]) {
              uint64_t v213 = *(void *)((char *)v21 + v72);
            }
            else {
              uint64_t v213 = 0;
            }
            int v214 = v207 | v188 | v318 | v322 | v199;
            __n128 result = v208 | v189 | v317 | v321 | v200;
            uint64_t v215 = *(void *)(v326 + 60);
            uint64_t v216 = *(void *)(v179 + 60);
            if (v65 < 0x15)
            {
              uint64_t v217 = 0;
            }
            else
            {
              uint64_t v217 = v64[10];
              if (v64[10]) {
                uint64_t v217 = *(void *)((char *)v21 + v217);
              }
            }
            uint64_t v218 = v212 & v216 | v211 & v215;
            uint64_t v219 = v213 & v215;
            uint64_t v220 = v217 & v216;
            uint64_t v221 = v217 & v216 | v213 & v215;
            BOOL v63 = 1;
            int v222 = 1 << v66;
            if (v218) {
              int v223 = v222;
            }
            else {
              int v223 = 0;
            }
            int v82 = v223 | v214;
            if (!v221) {
              int v222 = 0;
            }
            int v45 = v222 | result;
            if (!v205) {
              BOOL v63 = (v219 != v215 || v220 != v216) && v221 != 0;
            }
            goto LABEL_97;
          }
          if (v65 >= 0x11)
          {
            uint64_t v74 = v64[8];
            if (v70) {
              uint64_t v75 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v75 = 0;
            }
            uint64_t v180 = *(void *)(v68 + 4);
            if (v74) {
              uint64_t v181 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v181 = 0;
            }
            BOOL v226 = (v75 & v180) != 0;
            uint64_t v227 = v181 & v180;
            BOOL v228 = (v181 & v180) != 0;
            BOOL v229 = v328 || (v227 != v180 || *(void *)(v69 + 4) != 0) && v227 != 0;
            if (v70) {
              uint64_t v232 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v232 = 0;
            }
            uint64_t v233 = *(void *)(v68 + 12);
            if (v74) {
              uint64_t v234 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v234 = 0;
            }
            BOOL v235 = 1;
            if ((v232 & v233) != 0) {
              int v236 = 1 << (a3 != 1);
            }
            else {
              int v236 = 0;
            }
            uint64_t v237 = v234 & v233;
            if (v237) {
              int v238 = 1 << (a3 != 1);
            }
            else {
              int v238 = 0;
            }
            if (!v229) {
              BOOL v235 = (v237 != v233 || *(void *)(v69 + 12) != 0) && v237 != 0;
            }
            if (v66 >= 2) {
              char v241 = 2;
            }
            else {
              char v241 = a3 - 1;
            }
            if (v70) {
              uint64_t v242 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v242 = 0;
            }
            uint64_t v243 = *(void *)(v68 + 20);
            if (v74) {
              uint64_t v244 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v244 = 0;
            }
            BOOL v245 = 1;
            int v246 = 1 << v241;
            if ((v242 & v243) != 0) {
              int v247 = 1 << v241;
            }
            else {
              int v247 = 0;
            }
            int v325 = v247;
            uint64_t v248 = v244 & v243;
            if (v248) {
              int v249 = v246;
            }
            else {
              int v249 = 0;
            }
            if (!v235) {
              BOOL v245 = (v248 != v243 || *(void *)(v69 + 20) != 0) && v248 != 0;
            }
            if (v66 >= 3) {
              char v252 = 3;
            }
            else {
              char v252 = a3 - 1;
            }
            if (v70) {
              uint64_t v253 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v253 = 0;
            }
            uint64_t v254 = *(void *)(v68 + 28);
            if (v74) {
              uint64_t v255 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v255 = 0;
            }
            BOOL v256 = 1;
            int v257 = 1 << v252;
            if ((v253 & v254) != 0) {
              int v258 = 1 << v252;
            }
            else {
              int v258 = 0;
            }
            uint64_t v259 = v255 & v254;
            if (v259) {
              int v260 = v257;
            }
            else {
              int v260 = 0;
            }
            if (!v245) {
              BOOL v256 = (v259 != v254 || *(void *)(v69 + 28) != 0) && v259 != 0;
            }
            if (v66 >= 4) {
              char v263 = 4;
            }
            else {
              char v263 = a3 - 1;
            }
            if (v70) {
              uint64_t v264 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v264 = 0;
            }
            uint64_t v265 = *(void *)(v68 + 36);
            if (v74) {
              uint64_t v266 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v266 = 0;
            }
            BOOL v267 = 1;
            int v268 = 1 << v263;
            if ((v264 & v265) != 0) {
              int v269 = 1 << v263;
            }
            else {
              int v269 = 0;
            }
            uint64_t v270 = v266 & v265;
            if (v270) {
              int v271 = v268;
            }
            else {
              int v271 = 0;
            }
            if (!v256) {
              BOOL v267 = (v270 != v265 || *(void *)(v69 + 36) != 0) && v270 != 0;
            }
            if (v66 >= 5) {
              char v274 = 5;
            }
            else {
              char v274 = a3 - 1;
            }
            if (v70) {
              uint64_t v275 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v275 = 0;
            }
            long long v276 = v69;
            uint64_t v277 = *(void *)(v68 + 44);
            if (v74) {
              uint64_t v278 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v278 = 0;
            }
            int v279 = v236 | v226;
            int v280 = v238 | v228;
            BOOL v281 = 1;
            int v282 = 1 << v274;
            if ((v275 & v277) != 0) {
              int v283 = 1 << v274;
            }
            else {
              int v283 = 0;
            }
            uint64_t v284 = v278 & v277;
            if ((v278 & v277) != 0) {
              int v285 = v282;
            }
            else {
              int v285 = 0;
            }
            long long v286 = v276;
            if (!v267) {
              BOOL v281 = (v284 != v277 || *(void *)(v276 + 44) != 0) && v284 != 0;
            }
            int v289 = v325 | v279;
            int v290 = v249 | v280;
            if (v66 >= 6) {
              char v291 = 6;
            }
            else {
              char v291 = a3 - 1;
            }
            if (v70) {
              uint64_t v292 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v292 = 0;
            }
            int v293 = v258 | v289;
            int v294 = v260 | v290;
            uint64_t v295 = *(void *)(v68 + 52);
            if (v74) {
              uint64_t v296 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v296 = 0;
            }
            int v297 = v269 | v293;
            int v298 = v271 | v294;
            BOOL v299 = 1;
            unsigned int v300 = 1 << v291;
            if ((v292 & v295) != 0) {
              int v301 = 1 << v291;
            }
            else {
              int v301 = 0;
            }
            uint64_t v302 = v296 & v295;
            if ((v296 & v295) != 0) {
              __n128 result = v300;
            }
            else {
              __n128 result = 0;
            }
            if (!v281) {
              BOOL v299 = (v302 != v295 || *(void *)(v286 + 52) != 0) && v302 != 0;
            }
            int v305 = v283 | v297;
            int v306 = v285 | v298;
            if (v66 >= 7) {
              LOBYTE(v66) = 7;
            }
            if (v70) {
              uint64_t v307 = *(void *)((char *)v21 + v70);
            }
            else {
              uint64_t v307 = 0;
            }
            int v308 = v301 | v305;
            int v309 = result | v306;
            uint64_t v310 = *(void *)(v68 + 60);
            if (v74) {
              uint64_t v311 = *(void *)((char *)v21 + v74);
            }
            else {
              uint64_t v311 = 0;
            }
            BOOL v63 = 1;
            int v312 = 1 << v66;
            if ((v307 & v310) != 0) {
              int v313 = 1 << v66;
            }
            else {
              int v313 = 0;
            }
            uint64_t v314 = v311 & v310;
            BOOL v17 = (v311 & v310) == 0;
            int v82 = v313 | v308;
            if (v17) {
              int v312 = 0;
            }
            int v45 = v312 | v309;
            if (!v299) {
              BOOL v63 = (v314 != v310 || *(void *)(v286 + 60) != 0) && v314 != 0;
            }
            goto LABEL_97;
          }
          if (v64[7])
          {
            int v45 = 0;
            unint64_t v76 = *(void *)((char *)v21 + v70);
            int v77 = 1 << (a3 != 1);
            if ((v76 & *(void *)(v68 + 12)) == 0) {
              int v77 = 0;
            }
            uint32x4_t v78 = (uint32x4_t)vdupq_n_s32(v66);
            int8x16_t v79 = (int8x16_t)vdupq_n_s64(v76);
            v80.i64[0] = 0x100000001;
            v80.i64[1] = 0x100000001;
            int8x16_t v81 = vbicq_s8((int8x16_t)vshlq_u32(v80, vminq_u32(v78, (uint32x4_t)xmmword_242EA8230)), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v79, *(int8x16_t *)(v68 + 20))), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v79, *(int8x16_t *)(v68 + 36)))));
            *(int8x8_t *)v78.i8 = vbic_s8((int8x8_t)vshl_u32((uint32x2_t)0x100000001, vmin_u32(*(uint32x2_t *)v78.i8, (uint32x2_t)0x700000006)), (int8x8_t)vmovn_s64(vceqzq_s64((int64x2_t)vandq_s8(v79, *(int8x16_t *)(v68 + 52)))));
            *(int8x8_t *)v81.i8 = vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL));
            int v82 = v81.i32[0] | v77 | v81.i32[1] | vorr_s8(*(int8x8_t *)v78.i8, (int8x8_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1)).u32[0] | ((v76 & *(void *)(v68 + 4)) != 0);
            goto LABEL_97;
          }
        }
        int v45 = 0;
        int v82 = 0;
LABEL_97:
        BOOL v83 = (v82 & v45) != 0 || v63;
        BOOL v328 = v83;
        goto LABEL_101;
      }
LABEL_51:
      unint64_t v43 = 0;
      goto LABEL_52;
    }
  }
  long long v38 = 0;
  BOOL v328 = 0;
  if (v31) {
    goto LABEL_46;
  }
LABEL_43:
  if (!v38) {
    goto LABEL_111;
  }
LABEL_108:
  long long v85 = (unsigned __int16 *)((char *)v38 - *v38);
  if (*v85 < 0x1Bu)
  {
LABEL_111:
    LODWORD(v86) = 0;
    goto LABEL_112;
  }
  uint64_t v86 = v85[13];
  if (v86) {
    LODWORD(v86) = *((unsigned __int8 *)v38 + v86) != 0;
  }
LABEL_112:
  uint64_t v87 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v87 < 7u || (uint64_t v88 = v87[3]) == 0)
  {
LABEL_122:
    char v91 = 0;
    *a5 = v328;
    goto LABEL_123;
  }
  int v89 = *((char *)v21 + v88);
  if ((v89 - 1) >= 2)
  {
    if (v89)
    {
      LOBYTE(v31) = 0;
      char v91 = 0;
      *a5 = 0;
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  LOBYTE(v31) = 0;
  if (v328) {
    LODWORD(v86) = 1;
  }
  if (v86) {
    int v90 = 3;
  }
  else {
    int v90 = 2;
  }
  *a5 = v90;
  char v91 = 1;
LABEL_123:
  *a6 = (_BYTE)v31;
  *a7 = v91;
  if (v38)
  {
    long long v92 = (unsigned __int16 *)((char *)v38 - *v38);
    if (*v92 >= 0x13u)
    {
      uint64_t v93 = v92[9];
      if (v93)
      {
        if (*((unsigned char *)v38 + v93)) {
          *a6 = 0;
        }
      }
    }
  }
  return result;
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  uint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  int8x16_t v15 = 0;
  if (*v14 && v14[1]) {
    int8x16_t v15 = (int *)((char *)*v14 + **v14);
  }
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    long long v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    long long v18 = 0;
  }
  long long v19 = a3 + 58;
  if (a3[58])
  {
    uint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      uint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    uint64_t v20 = (unsigned int **)(a3 + 128);
  }
  long long v21 = 0;
  if (*v20 && v20[1]) {
    long long v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    uint64_t v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    uint64_t v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *uint64_t v12 = v26;
  BOOL v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  uint64_t v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    BOOL v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    BOOL v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      uint64_t v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      uint64_t v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      int v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      char v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      uint64_t v98 = &__dst[v80];
      BOOL v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        BOOL v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        uint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        uint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            BOOL v115 = &v98[8 * v112];
            bzero(v115, v203);
            int v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)BOOL v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          uint64_t v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        uint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        uint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        long long v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          uint64_t v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          uint64_t v125 = &__dst[v217 + v78];
          uint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)uint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          uint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            uint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v145 = 0x10000000000001;
                      uint64_t v147 = v209;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              int v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                uint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      uint64_t v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                uint64_t v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            BOOL v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  unint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v172 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    if ((v172 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v172 >> 20);
                      BOOL v174 = (v172 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                    LODWORD(v172) = v172 & 0xFFFFF;
                    if (v172 <= 0x35 && ((1 << v172) & 0x26000000000000) != 0) {
                      goto LABEL_229;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = v172 > 0x3F;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
LABEL_229:
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            uint64_t v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_280:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            BOOL v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_253;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_254;
                }
LABEL_253:
                unsigned int v194 = 0;
LABEL_254:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  int v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        int v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_247;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        int v188 = (void *)(v199 + 88);
LABEL_247:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_247;
                    case 25:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_247;
                    case 27:
                      goto LABEL_247;
                    case 28:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_247;
                    case 59:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_247;
                    case 60:
                    case 61:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_247;
                    case 75:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_247;
                    case 84:
                    case 85:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_247;
                    case 108:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_247;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      int v188 = &v209[v200];
                      goto LABEL_247;
                    case 111:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_247;
                    case 112:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_247;
                    case 118:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_247;
                    case 119:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_247;
                    case 120:
                      int v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_247;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      int v188 = &v209[v201];
                      goto LABEL_247;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_280;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          uint64_t v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              int v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                long long v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      unint64_t v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        unint64_t v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      unint64_t v42 = (unsigned int **)(a3 + 128);
    }
    unint64_t v43 = 0;
    if (*v42 && v42[1]) {
      unint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242AEB328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  uint64_t v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BackgroundObjectArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      long long v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      long long v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      long long v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      int v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      long long v98 = &__dst[v80];
      int v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        long long v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        unint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        unint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            unint64_t v115 = &v98[8 * v112];
            bzero(v115, v203);
            unint64_t v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)unint64_t v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          __n128 v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          __n128 v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        unint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        unint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        uint64_t v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          long long v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          unint64_t v125 = &__dst[v217 + v78];
          unint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)unint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          unint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            unint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v147 = v209;
                      uint64_t v145 = 1;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              uint64_t v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                unint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      BOOL v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                BOOL v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            unint64_t v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  uint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v177 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    LODWORD(v172) = v177;
                    if ((v177 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v177 >> 20);
                      BOOL v174 = (v177 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = (v172 & 0xFFFC0) != 0;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            long long v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_273:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            unint64_t v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_246;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_247;
                }
LABEL_246:
                unsigned int v194 = 0;
LABEL_247:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  unint64_t v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        unint64_t v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_240;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        unint64_t v188 = (void *)(v199 + 88);
LABEL_240:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_240;
                    case 25:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_240;
                    case 27:
                      goto LABEL_240;
                    case 28:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_240;
                    case 59:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_240;
                    case 60:
                    case 61:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_240;
                    case 75:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_240;
                    case 84:
                    case 85:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_240;
                    case 108:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_240;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v200];
                      goto LABEL_240;
                    case 111:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_240;
                    case 112:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_240;
                    case 118:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_240;
                    case 119:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_240;
                    case 120:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_240;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v201];
                      goto LABEL_240;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_273;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          long long v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              unint64_t v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                uint64_t v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      long long v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v42 = (unsigned int **)(a3 + 128);
    }
    uint64_t v43 = 0;
    if (*v42 && v42[1]) {
      uint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242AEFEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::EndOfTileArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      long long v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      long long v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      long long v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      int v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      long long v98 = &__dst[v80];
      int v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        long long v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        unint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        unint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            unint64_t v115 = &v98[8 * v112];
            bzero(v115, v203);
            unint64_t v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)unint64_t v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          __n128 v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          __n128 v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        unint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        unint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        uint64_t v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          long long v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          unint64_t v125 = &__dst[v217 + v78];
          unint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)unint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          unint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            unint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v147 = v209;
                      uint64_t v145 = 1;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              uint64_t v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                unint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      BOOL v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                BOOL v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            unint64_t v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  uint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v177 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    LODWORD(v172) = v177;
                    if ((v177 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v177 >> 20);
                      BOOL v174 = (v177 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = (v172 & 0xFFFC0) != 0;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            long long v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_273:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            unint64_t v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_246;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_247;
                }
LABEL_246:
                unsigned int v194 = 0;
LABEL_247:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  unint64_t v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        unint64_t v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_240;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        unint64_t v188 = (void *)(v199 + 88);
LABEL_240:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_240;
                    case 25:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_240;
                    case 27:
                      goto LABEL_240;
                    case 28:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_240;
                    case 59:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_240;
                    case 60:
                    case 61:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_240;
                    case 75:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_240;
                    case 84:
                    case 85:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_240;
                    case 108:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_240;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v200];
                      goto LABEL_240;
                    case 111:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_240;
                    case 112:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_240;
                    case 118:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_240;
                    case 119:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_240;
                    case 120:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_240;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v201];
                      goto LABEL_240;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_273;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          long long v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              unint64_t v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                uint64_t v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      long long v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v42 = (unsigned int **)(a3 + 128);
    }
    uint64_t v43 = 0;
    if (*v42 && v42[1]) {
      uint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242AF4A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ClearVisibilityArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      long long v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      long long v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      long long v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      int v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      long long v98 = &__dst[v80];
      int v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        long long v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        unint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        unint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            unint64_t v115 = &v98[8 * v112];
            bzero(v115, v203);
            unint64_t v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)unint64_t v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          __n128 v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          __n128 v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        unint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        unint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        uint64_t v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          long long v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          unint64_t v125 = &__dst[v217 + v78];
          unint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)unint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          unint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            unint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v147 = v209;
                      uint64_t v145 = 1;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              uint64_t v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                unint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      BOOL v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                BOOL v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            unint64_t v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  uint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v177 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    LODWORD(v172) = v177;
                    if ((v177 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v177 >> 20);
                      BOOL v174 = (v177 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = (v172 & 0xFFFC0) != 0;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            long long v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_273:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            unint64_t v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_246;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_247;
                }
LABEL_246:
                unsigned int v194 = 0;
LABEL_247:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  unint64_t v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        unint64_t v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_240;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        unint64_t v188 = (void *)(v199 + 88);
LABEL_240:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_240;
                    case 25:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_240;
                    case 27:
                      goto LABEL_240;
                    case 28:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_240;
                    case 59:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_240;
                    case 60:
                    case 61:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_240;
                    case 75:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_240;
                    case 84:
                    case 85:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_240;
                    case 108:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_240;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v200];
                      goto LABEL_240;
                    case 111:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_240;
                    case 112:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_240;
                    case 118:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_240;
                    case 119:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_240;
                    case 120:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_240;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v201];
                      goto LABEL_240;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_273;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          long long v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              unint64_t v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                uint64_t v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      long long v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v42 = (unsigned int **)(a3 + 128);
    }
    uint64_t v43 = 0;
    if (*v42 && v42[1]) {
      uint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242AF95D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::TileDispatchVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v205 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v206 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0;
  long long v11 = *a6;
  *(void *)(a1 + 656) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 640) = v11;
  *(void *)(a1 + 740) = 0;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 745) = 0;
  *(void *)(a1 + 724) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 724);
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 705) = 0u;
  *(void *)(a1 + 784) = a2;
  *(_DWORD *)(a1 + 792) = 0;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 880) = 1;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 864) = 3;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(void *)(a1 + 1200) = a1 + 1208;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1235) = 0;
  *(_DWORD *)(a1 + 1240) = -1;
  *(void *)(a1 + 1244) = 0;
  *(unsigned char *)(a1 + 1252) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 680) = 0;
  uint64_t v213 = v9;
  *(unsigned char *)(v9 + 1199) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v202 = v9 + 720;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 688);
  MEMORY[0x24566EB20](v206, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v205, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 < 7u) {
    goto LABEL_70;
  }
  int v41 = v40[3];
  if (!v41) {
    goto LABEL_71;
  }
  if (v37)
  {
    long long v42 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v42 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v42 = (unsigned int **)(a3 + 128);
  }
  uint64_t v43 = 0;
  if (*v42 && v42[1]) {
    uint64_t v43 = (int *)((char *)*v42 + **v42);
  }
  long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
    int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
  }
  else {
    int v46 = 0;
  }
  long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
    int v41 = *(int *)((char *)v46 + v48);
  }
  else {
LABEL_70:
  }
    int v41 = 0;
LABEL_71:
  *(_DWORD *)(a1 + 576) = v41;
  if (v37)
  {
    long long v49 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v49 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v49 = (unsigned int **)(a3 + 128);
  }
  long long v50 = 0;
  if (*v49 && v49[1]) {
    long long v50 = (int *)((char *)*v49 + **v49);
  }
  long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 < 7u || !v51[3]) {
    goto LABEL_96;
  }
  if (v37)
  {
    uint64_t v52 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      uint64_t v52 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    uint64_t v52 = (unsigned int **)(a3 + 128);
  }
  long long v53 = 0;
  if (*v52 && v52[1]) {
    long long v53 = (int *)((char *)*v52 + **v52);
  }
  long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
    uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
  }
  else {
    uint64_t v56 = 0;
  }
  long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
  if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
    int v59 = *(int *)((char *)v56 + v58);
  }
  else {
LABEL_96:
  }
    int v59 = 0;
  *(_DWORD *)(a1 + 580) = v59;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a5 + 465);
  uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v60 < 0x4Du)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    uint64_t v61 = v60[38];
    if (v61) {
      LODWORD(v61) = *(int *)((char *)v18 + v61);
    }
  }
  *(_DWORD *)(a1 + 400) = v61;
  long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v62 < 0x53u)
  {
    LODWORD(v63) = 0;
  }
  else
  {
    uint64_t v63 = v62[41];
    if (v63) {
      LODWORD(v63) = *(int *)((char *)v18 + v63);
    }
  }
  *(_DWORD *)(a1 + 404) = v63;
  uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v64 < 0x43u)
  {
    LODWORD(v65) = 0;
  }
  else
  {
    uint64_t v65 = v64[33];
    if (v65) {
      LODWORD(v65) = *(int *)((char *)v18 + v65);
    }
  }
  int v66 = 0;
  *(_DWORD *)(a1 + 584) = v65;
  *(_DWORD *)(a1 + 588) = 0;
  uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v67 >= 0x21u)
  {
    uint64_t v68 = v67[16];
    if (v68) {
      int v66 = *(int *)((char *)v18 + v68);
    }
    else {
      int v66 = 0;
    }
  }
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 592) = getAdditionalSpillBufferBytes(void)::extra + v66;
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a1 + 584);
  int v69 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v69 < 5u)
  {
    LODWORD(v70) = 0;
  }
  else
  {
    uint64_t v70 = v69[2];
    if (v70) {
      LODWORD(v70) = *(int *)((char *)v18 + v70);
    }
  }
  *(_DWORD *)(a1 + 600) = v70;
  uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v71 < 0x51u)
  {
    LODWORD(v72) = 0;
  }
  else
  {
    uint64_t v72 = v71[40];
    if (v72) {
      LODWORD(v72) = *(int *)((char *)v18 + v72);
    }
  }
  *(_DWORD *)(a1 + 604) = v72;
  uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v73 < 0x4Fu)
  {
    LODWORD(v74) = 0;
  }
  else
  {
    uint64_t v74 = v73[39];
    if (v74) {
      LODWORD(v74) = *(int *)((char *)v18 + v74);
    }
  }
  *(_DWORD *)(a1 + 608) = v74;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a5 + 465);
  *(void *)(a1 + 496) = 0;
  long long v75 = (char *)v18 - *v18;
  size_t v76 = *(unsigned int *)((char *)v18
                        + *((unsigned __int16 *)v75 + 15)
                        + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
  uint64_t v77 = *((unsigned __int16 *)v75 + 13);
  if (v77) {
    LODWORD(v77) = *(int *)((char *)v18 + v77);
  }
  uint64_t v78 = v77;
  uint64_t v79 = *(unsigned int *)(a5 + 152);
  uint64_t v219 = a5;
  if (*(unsigned char *)(a5 + 416)) {
    unint64_t v80 = ((*(void *)(a5 + 248) + *(void *)(a5 + 224) - (*(void *)(a5 + 240) + *(void *)(a5 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
  }
        + ((*(void *)(a5 + 400) + *(void *)(a5 + 352) - (*(void *)(a5 + 392) + *(void *)(a5 + 344))) & 0xFFFFFFFFFFFFFFFELL)
        + 8;
  else {
    unint64_t v80 = 0;
  }
  uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
  if (v77) {
    uint64_t v82 = (v76 + 31) & 0x1FFFFFFE0;
  }
  else {
    uint64_t v82 = v76;
  }
  int v217 = (char *)v82;
  uint64_t v83 = v82 + v77;
  if (v79) {
    unint64_t v80 = ((v83 + v80 + 31) & 0xFFFFFFFFFFFFFFE0) - v83;
  }
  unint64_t v215 = v80;
  uint64_t v84 = v83 + 8 * v79 + v80;
  long long v208 = v24;
  __n128 v212 = v18;
  if (v84)
  {
    int v203 = *(_DWORD *)(a5 + 152);
    AGX::Heap<true>::allocateImpl(&v220, a2 + 5184, v84, (void *)(a1 + 552));
    *(_DWORD *)(a1 + 1232) += *(_DWORD *)v221;
    long long v85 = *(_OWORD *)v221;
    *(_OWORD *)(v213 + 632) = v220;
    *(_OWORD *)(v213 + 648) = v85;
    *(_OWORD *)(v213 + 657) = *(_OWORD *)&v221[9];
    __dst = *(void **)(a1 + 680);
    uint64_t v86 = *(void *)(a1 + 672);
    if (v76)
    {
      uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v87 < 0x1Fu)
      {
        uint64_t v88 = 0;
      }
      else
      {
        uint64_t v88 = v87[15];
        if (v88) {
          v88 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v88);
        }
      }
      memcpy(__dst, (const void *)(v88 + 4), v76);
      *(void *)(a1 + 616) = v86;
      *(void *)(a1 + 624) = __dst;
      *(void *)(a1 + 632) = v217;
    }
    if (v78)
    {
      long long v89 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v89 >= 0xBu && (uint64_t v90 = v89[5]) != 0) {
        int v91 = (char *)v24 + v90 + *(unsigned int *)((char *)v24 + v90);
      }
      else {
        int v91 = 0;
      }
      uint64_t v92 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v93 = *(unsigned int *)((char *)v18 + v92);
      if (*(int *)((char *)v18 + v92 + v93))
      {
        uint64_t v210 = v86;
        uint64_t v94 = 0;
        unint64_t v95 = 0;
        unint64_t v204 = (char *)__dst + v81;
        __n128 v207 = v91 + 4;
        uint64_t v96 = 24;
        if (!v13) {
          uint64_t v96 = 8;
        }
        size_t v201 = v96;
        while (1)
        {
          uint64_t v97 = v92;
          uint64_t v98 = v92 + v93;
          uint64_t v99 = *(unsigned int *)((char *)&v18[v94 + 1] + v98);
          uint64_t v100 = v98 + v99;
          long long v101 = (char *)&v18[v94] + v98 + v99;
          uint64_t v102 = *((int *)v101 + 1);
          uint64_t v103 = (char *)&v18[v94] + v100 - v102;
          unsigned int v104 = *((unsigned __int16 *)v103 + 2);
          if (v104 < 5) {
            goto LABEL_154;
          }
          uint64_t v105 = *((unsigned __int16 *)v103 + 4);
          if (!v105) {
            goto LABEL_154;
          }
          int v106 = *((unsigned __int8 *)v212 + v97 + v93 + v99 + v94 * 4 + v105 + 4);
          if (v106 != 114)
          {
            if (v106 == 18)
            {
              if (v104 < 9)
              {
                uint64_t v108 = 0;
              }
              else
              {
                uint64_t v107 = v97 + v93 + v99;
                uint64_t v108 = *(unsigned __int16 *)((char *)&v212[v94 + 3] + v107 - v102);
                if (v108) {
                  uint64_t v108 = *(unsigned int *)((char *)v212 + v107 + v94 * 4 + v108 + 4);
                }
              }
              __n128 v111 = &v204[8 * v108];
              bzero(v111, v201);
              uint64_t v112 = (char *)&v212[v94] + v97 + v93 + v99 - *((int *)v101 + 1);
              if (*((unsigned __int16 *)v112 + 2) < 7u)
              {
                uint64_t v113 = 0;
              }
              else
              {
                uint64_t v113 = *((unsigned __int16 *)v112 + 5);
                if (v113) {
                  uint64_t v113 = *(unsigned int *)((char *)v212 + v97 + v93 + v99 + v94 * 4 + v113 + 4);
                }
              }
              AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v220, (int *)&v207[4 * v113 + *(unsigned int *)&v207[4 * v113]]);
              AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v224.n128_u64, (uint64_t)&v220);
              *(void *)__n128 v111 = v224.n128_u64[0];
              if (v223 < 0) {
                operator delete(__p);
              }
              std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v111);
            }
            goto LABEL_154;
          }
          if (v104 < 7)
          {
            uint64_t v110 = 0;
          }
          else
          {
            uint64_t v109 = v97 + v93 + v99;
            uint64_t v110 = *(unsigned __int16 *)((char *)&v212[v94 + 2] + v109 - v102 + 2);
            if (v110) {
              uint64_t v110 = *(unsigned int *)((char *)v212 + v109 + v94 * 4 + v110 + 4);
            }
          }
          AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v220, (int *)&v207[4 * v110 + *(unsigned int *)&v207[4 * v110]]);
          AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v224, *(void *)(a1 + 784), (uint64_t)&v220);
          int v114 = *(_DWORD *)(v224.n128_u64[0] + 96);
          unint64_t v115 = *(__n128 **)(a1 + 768);
          if ((unint64_t)v115 >= *(void *)(a1 + 776))
          {
            uint64_t v117 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v202, v224);
          }
          else
          {
            v115->n128_u64[0] = v224.n128_u64[0];
            unint64_t v116 = v224.n128_u64[1];
            v115->n128_u64[1] = v224.n128_u64[1];
            if (v116) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v117 = v115 + 1;
          }
          *(void *)(a1 + 768) = v117;
          __n128 v118 = (char *)&v212[v94] + v97 + v93 + v99 - *((int *)v101 + 1);
          if (*((unsigned __int16 *)v118 + 2) < 9u)
          {
            uint64_t v119 = 0;
          }
          else
          {
            uint64_t v119 = *((unsigned __int16 *)v118 + 6);
            if (v119) {
              uint64_t v119 = *(unsigned int *)((char *)v212 + v97 + v93 + v99 + v94 * 4 + v119 + 4);
            }
          }
          *(_DWORD *)&v204[4 * v119] = v114;
          BOOL v120 = (std::__shared_weak_count *)v224.n128_u64[1];
          if (v224.n128_u64[1])
          {
            if (!atomic_fetch_add((atomic_ullong *volatile)(v224.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
              break;
            }
          }
          if (v223 < 0) {
            goto LABEL_185;
          }
LABEL_154:
          ++v95;
          uint64_t v18 = v212;
          uint64_t v92 = *(unsigned __int16 *)((char *)v212 - *v212 + 28);
          uint64_t v93 = *(unsigned int *)((char *)v212 + v92);
          ++v94;
          if (v95 >= *(unsigned int *)((char *)v212 + v92 + v93))
          {
            long long v24 = v208;
            uint64_t v86 = v210;
            goto LABEL_189;
          }
        }
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
        if ((v223 & 0x80000000) == 0) {
          goto LABEL_154;
        }
LABEL_185:
        operator delete(__p);
        goto LABEL_154;
      }
    }
LABEL_189:
    int v121 = v203;
    if (!v215) {
      goto LABEL_193;
    }
    *(void *)(a1 + 496) = v83 + v86;
    unint64_t v122 = &v217[(void)__dst + v78];
    uint64_t v123 = v219;
    unint64_t v124 = *(const void **)(v219 + 216);
    size_t v125 = *(void *)(v219 + 224) - (void)v124;
    *(_WORD *)unint64_t v122 = v125 >> 2;
    *((_WORD *)v122 + 1) = (*(_DWORD *)(v219 + 248) - *(_DWORD *)(v219 + 240)) >> 2;
    *((_WORD *)v122 + 2) = (*(_DWORD *)(v219 + 352) - *(_DWORD *)(v219 + 344)) >> 1;
    *((_WORD *)v122 + 3) = (*(_DWORD *)(v219 + 400) - *(_DWORD *)(v219 + 392)) >> 1;
    memcpy(v122 + 8, v124, v125);
    unint64_t v126 = &v122[*(void *)(v123 + 224) - *(void *)(v123 + 216) + 8];
    memcpy(v126, *(const void **)(v123 + 240), *(void *)(v123 + 248) - *(void *)(v123 + 240));
    unint64_t v127 = &v126[*(void *)(v123 + 248) - *(void *)(v123 + 240)];
    memcpy(v127, *(const void **)(v123 + 344), *(void *)(v123 + 352) - *(void *)(v123 + 344));
    memcpy(&v127[*(void *)(v123 + 352) - *(void *)(v123 + 344)], *(const void **)(v123 + 392), *(void *)(v123 + 400) - *(void *)(v123 + 392));
    if (!*((_WORD *)v122 + 2)) {
      *((_WORD *)v122 + 2) = *(_WORD *)v122;
    }
    int v121 = v203;
    if (!*((_WORD *)v122 + 3))
    {
      *((_WORD *)v122 + 3) = *((_WORD *)v122 + 1);
      if (v203) {
        goto LABEL_194;
      }
    }
    else
    {
LABEL_193:
      if (v121)
      {
LABEL_194:
        *(void *)(v213 + 464) = &v217[(void)__dst + v78 + v215];
        unint64_t v128 = (unsigned __int16 *)((char *)v24 - *v24);
        uint64_t v129 = v219;
        if (*v128 >= 0xBu)
        {
          uint64_t v130 = v128[5];
          if (v130)
          {
            long long v131 = (int *)((char *)v24 + v130 + *(unsigned int *)((char *)v24 + v130));
            if (*v131)
            {
              uint64_t v132 = 0;
              unint64_t v133 = 0;
              do
              {
                unint64_t v134 = (void *)(*(void *)(v213 + 464) + 8 * ((v132 * 4) & 0xFFFFFFFC));
                AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v220, (_DWORD *)((char *)&v131[v132 + 1] + v131[v132 + 1]));
                AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v224.n128_u64, (uint64_t)&v220);
                void *v134 = v224.n128_u64[0];
                if (v223 < 0) {
                  operator delete(__p);
                }
                std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v134);
                ++v133;
                ++v132;
              }
              while (v133 < *v131);
            }
          }
        }
        goto LABEL_204;
      }
    }
  }
  uint64_t v129 = v219;
LABEL_204:
  AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
  __n128 v135 = (unsigned __int16 *)((char *)v18 - *v18);
  uint64_t v136 = v135[8];
  uint64_t v137 = *(unsigned int *)((char *)v18 + v136);
  unint64_t v138 = (unsigned int *)((char *)v18 + v136 + v137);
  uint64_t v139 = *v138;
  if (v139)
  {
    unint64_t v140 = 0;
    uint64_t v141 = 4 * v139;
    long long v142 = (char *)v18 + v136 + v137;
    do
    {
      uint64_t v147 = v138[v140 / 4 + 1];
      uint64_t v148 = &v142[v140 + v147 - *(int *)((char *)&v138[v140 / 4 + 1] + v147)];
      if (*((unsigned __int16 *)v148 + 2) < 7u)
      {
        LODWORD(v143) = 0;
      }
      else
      {
        uint64_t v143 = *((unsigned __int16 *)v148 + 5);
        if (v143)
        {
          unint64_t v149 = *(unsigned int *)&v142[v140 + 4 + v147 + v143];
          LODWORD(v143) = v149;
          if ((v149 & 0x80000000) != 0)
          {
            v209[(v149 & 0x7C000000) != 0] |= 1 << (v149 >> 20);
            uint64_t v144 = 0x10000000000001;
            long long v146 = v209;
            goto LABEL_208;
          }
        }
      }
      uint64_t v144 = 1 << v143;
      uint64_t v145 = 8 * ((v143 & 0xFFFC0) != 0);
      *(void *)(a1 + 56 + v145) |= v144;
      long long v146 = (void *)(a1 + 104 + v145);
LABEL_208:
      *v146 |= v144;
      v140 += 4;
    }
    while (v141 != v140);
  }
  uint64_t v150 = v135[10];
  uint64_t v151 = *(unsigned int *)((char *)v18 + v150);
  uint64_t v152 = (unsigned int *)((char *)v18 + v150 + v151);
  uint64_t v153 = *v152;
  if (v153)
  {
    unint64_t v154 = 0;
    uint64_t v155 = 4 * v153;
    uint64_t v156 = (char *)v18 + v150 + v151;
    do
    {
      uint64_t v161 = v152[v154 / 4 + 1];
      uint64_t v162 = &v156[v154 + v161 - *(int *)((char *)&v152[v154 / 4 + 1] + v161)];
      if (*((unsigned __int16 *)v162 + 2) < 7u)
      {
        LODWORD(v157) = 0;
      }
      else
      {
        uint64_t v157 = *((unsigned __int16 *)v162 + 5);
        if (v157)
        {
          unint64_t v163 = *(unsigned int *)&v156[v154 + 4 + v161 + v157];
          LODWORD(v157) = v163;
          if ((v163 & 0x80000000) != 0)
          {
            uint64_t v158 = 1 << (v163 >> 20);
            int64_t v160 = &v209[(v163 & 0x7C000000) != 0];
            goto LABEL_217;
          }
        }
      }
      uint64_t v158 = 1 << v157;
      uint64_t v159 = 8 * ((v157 & 0xFFFC0) != 0);
      *(void *)(a1 + 72 + v159) |= v158;
      int64_t v160 = (void *)(a1 + 120 + v159);
LABEL_217:
      *v160 |= v158;
      v154 += 4;
    }
    while (v155 != v154);
  }
  uint64_t v164 = v135[6];
  uint64_t v165 = *(unsigned int *)((char *)v18 + v164);
  unint64_t v166 = (unsigned int *)((char *)v18 + v164 + v165);
  uint64_t v167 = *v166;
  if (v167)
  {
    unint64_t v168 = 0;
    uint64_t v169 = 4 * v167;
    long long v170 = (char *)v18 + v164 + v165;
    do
    {
      uint64_t v174 = v166[v168 / 4 + 1];
      unint64_t v175 = &v170[v168 + v174 - *(int *)((char *)&v166[v168 / 4 + 1] + v174)];
      if (*((unsigned __int16 *)v175 + 2) < 7u)
      {
        LODWORD(v171) = 0;
      }
      else
      {
        unint64_t v171 = *((unsigned __int16 *)v175 + 5);
        if (v171)
        {
          unint64_t v171 = *(unsigned int *)&v170[v168 + 4 + v174 + v171];
          if ((v171 & 0x80000000) != 0)
          {
            uint64_t v172 = 1 << (v171 >> 20);
            BOOL v173 = (v171 & 0x7C000000) != 0;
            goto LABEL_226;
          }
          LODWORD(v171) = v171 & 0xFFFFF;
          if (v171 <= 0x35 && ((1 << v171) & 0x26000000000000) != 0) {
            goto LABEL_227;
          }
        }
      }
      uint64_t v172 = 1 << v171;
      BOOL v173 = v171 > 0x3F;
      *(void *)(v213 + 8 * v173) |= v172;
LABEL_226:
      v209[v173] |= v172;
LABEL_227:
      v168 += 4;
    }
    while (v169 != v168);
  }
  int8x16_t v177 = *(int8x16_t *)(v129 + 160);
  if (*(_OWORD *)&v177 != 0)
  {
    *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v177);
    *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v177);
  }
  int8x16_t v178 = *(int8x16_t *)(v129 + 192);
  if (*(_OWORD *)&v178 != 0)
  {
    *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v178);
    *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v178);
  }
  uint64_t v179 = v135[12];
  uint64_t v180 = *(unsigned int *)((char *)v18 + v179);
  long long v181 = (unsigned int *)((char *)v18 + v179 + v180);
  uint64_t v182 = *v181;
  if (!v182)
  {
LABEL_278:
    if (!*(unsigned char *)(a1 + 1239))
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(v129 + 424);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(v129 + 440);
      *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v129 + 440), *(int8x16_t *)(v129 + 424));
    }
    operator new();
  }
  unint64_t v183 = 0;
  uint64_t v184 = 4 * v182;
  uint64_t v185 = (char *)v18 + v179 + v180;
  while (1)
  {
    uint64_t v188 = *(unsigned int *)&v185[v183 + 4];
    uint64_t v189 = v188 - *(int *)((char *)&v181[v183 / 4 + 1] + v188);
    uint64_t v190 = &v185[v183 + v189];
    unsigned int v191 = *((unsigned __int16 *)v190 + 2);
    if (v191 < 7)
    {
      if (v191 < 5) {
        goto LABEL_246;
      }
    }
    else
    {
      uint64_t v192 = *((unsigned __int16 *)v190 + 5);
      if (v192)
      {
        unsigned int v193 = *(_DWORD *)&v185[v183 + 4 + v188 + v192];
        goto LABEL_252;
      }
    }
    unsigned int v193 = 0;
LABEL_252:
    uint64_t v194 = *(unsigned __int16 *)&v185[v183 + 8 + v189];
    if (v194)
    {
      int v195 = v185[v183 + 4 + v188 + v194];
      long long v187 = (void *)(a1 + 184);
      uint64_t v186 = 1;
      switch(v185[v183 + 4 + v188 + v194])
      {
        case 11:
        case 12:
        case 13:
        case 16:
        case 17:
        case 62:
        case 93:
        case 97:
        case 98:
        case 113:
          if ((v193 & 0x80000000) != 0)
          {
            uint64_t v186 = 1 << (v193 >> 20);
            long long v187 = &v209[(v193 & 0x7C000000) != 0];
          }
          else
          {
            if ((v193 & 0xFFF00000) == 0x400000) {
              break;
            }
            if (v195 == 113 || v195 == 98) {
              uint64_t v197 = 32;
            }
            else {
              uint64_t v197 = 16;
            }
            uint64_t v186 = 1 << v193;
            uint64_t v198 = a1 + v197 + 8 * ((v193 & 0xFFFC0) != 0);
            *(void *)(v198 + 136) |= 1 << v193;
            long long v187 = (void *)(v198 + 88);
          }
LABEL_245:
          *v187 |= v186;
          break;
        case 24:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 4;
          goto LABEL_245;
        case 25:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 8;
          goto LABEL_245;
        case 27:
          goto LABEL_245;
        case 28:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 2;
          goto LABEL_245;
        case 59:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 16;
          goto LABEL_245;
        case 60:
        case 61:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 32;
          goto LABEL_245;
        case 75:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 64;
          goto LABEL_245;
        case 84:
        case 85:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 128;
          goto LABEL_245;
        case 108:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 256;
          goto LABEL_245;
        case 109:
        case 110:
          uint64_t v186 = 1 << v193;
          uint64_t v199 = (v193 & 0xFFFC0) != 0;
          *(void *)(a1 + 136 + v199 * 8) |= 1 << v193;
          long long v187 = &v209[v199];
          goto LABEL_245;
        case 111:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 512;
          goto LABEL_245;
        case 112:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 1024;
          goto LABEL_245;
        case 118:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 2048;
          goto LABEL_245;
        case 119:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 4096;
          goto LABEL_245;
        case 120:
          long long v187 = (void *)(a1 + 184);
          uint64_t v186 = 0x2000;
          goto LABEL_245;
        case -117:
          uint64_t v186 = 1 << v193;
          uint64_t v200 = (v193 & 0xFFFC0) != 0;
          *(void *)(v213 + v200 * 8) |= 1 << v193;
          long long v187 = &v209[v200];
          goto LABEL_245;
        default:
          break;
      }
    }
LABEL_246:
    v183 += 4;
    if (v184 == v183) {
      goto LABEL_278;
    }
  }
}

void sub_242AFE1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a28 + 752);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a11);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 736) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFragmentArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (char *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v201 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v202 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 568) = 0;
  long long v11 = *a6;
  *(void *)(a1 + 656) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 640) = v11;
  *(void *)(a1 + 740) = 0;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 745) = 0;
  *(void *)(a1 + 724) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 724);
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 705) = 0u;
  *(void *)(a1 + 784) = a2;
  *(_DWORD *)(a1 + 792) = 0;
  *(void *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 880) = 1;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 864) = 3;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1144) = 0;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(void *)(a1 + 1200) = a1 + 1208;
  *(_DWORD *)(a1 + 1224) = -1;
  *(_DWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1235) = 0;
  *(_DWORD *)(a1 + 1240) = -1;
  *(void *)(a1 + 1244) = 0;
  *(unsigned char *)(a1 + 1252) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 680) = 0;
  uint64_t v209 = v9;
  *(unsigned char *)(v9 + 1199) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v198 = v9 + 720;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  int v205 = (unint64_t ***)(v9 + 688);
  MEMORY[0x24566EB20](v202, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v201, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 < 7u) {
    goto LABEL_70;
  }
  int v41 = v40[3];
  if (!v41) {
    goto LABEL_71;
  }
  if (v37)
  {
    long long v42 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v42 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v42 = (unsigned int **)(a3 + 128);
  }
  uint64_t v43 = 0;
  if (*v42 && v42[1]) {
    uint64_t v43 = (int *)((char *)*v42 + **v42);
  }
  long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
  if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
    int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
  }
  else {
    int v46 = 0;
  }
  long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
  if (*v47 >= 0xBu && (uint64_t v48 = v47[5]) != 0) {
    int v41 = *(int *)((char *)v46 + v48);
  }
  else {
LABEL_70:
  }
    int v41 = 0;
LABEL_71:
  *(_DWORD *)(a1 + 576) = v41;
  if (v37)
  {
    long long v49 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v49 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v49 = (unsigned int **)(a3 + 128);
  }
  long long v50 = 0;
  if (*v49 && v49[1]) {
    long long v50 = (int *)((char *)*v49 + **v49);
  }
  long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
  if (*v51 < 7u || !v51[3]) {
    goto LABEL_96;
  }
  if (v37)
  {
    uint64_t v52 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      uint64_t v52 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    uint64_t v52 = (unsigned int **)(a3 + 128);
  }
  long long v53 = 0;
  if (*v52 && v52[1]) {
    long long v53 = (int *)((char *)*v52 + **v52);
  }
  long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
  if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
    uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
  }
  else {
    uint64_t v56 = 0;
  }
  long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
  if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
    int v59 = *(int *)((char *)v56 + v58);
  }
  else {
LABEL_96:
  }
    int v59 = 0;
  *(_DWORD *)(a1 + 580) = v59;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(v6 + 465);
  uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v60 < 0x4Du)
  {
    LODWORD(v61) = 0;
  }
  else
  {
    uint64_t v61 = v60[38];
    if (v61) {
      LODWORD(v61) = *(int *)((char *)v18 + v61);
    }
  }
  *(_DWORD *)(a1 + 400) = v61;
  long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v62 < 0x53u)
  {
    LODWORD(v63) = 0;
  }
  else
  {
    uint64_t v63 = v62[41];
    if (v63) {
      LODWORD(v63) = *(int *)((char *)v18 + v63);
    }
  }
  *(_DWORD *)(a1 + 404) = v63;
  uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v64 < 0x43u)
  {
    LODWORD(v65) = 0;
  }
  else
  {
    uint64_t v65 = v64[33];
    if (v65) {
      LODWORD(v65) = *(int *)((char *)v18 + v65);
    }
  }
  int v66 = 0;
  *(_DWORD *)(a1 + 584) = v65;
  *(_DWORD *)(a1 + 588) = 0;
  uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v67 >= 0x21u)
  {
    uint64_t v68 = v67[16];
    if (v68) {
      int v66 = *(int *)((char *)v18 + v68);
    }
    else {
      int v66 = 0;
    }
  }
  {
    getAdditionalSpillBufferBytes(void)::extra = 0;
  }
  *(_DWORD *)(a1 + 592) = getAdditionalSpillBufferBytes(void)::extra + v66;
  *(_DWORD *)(a1 + 596) = *(_DWORD *)(a1 + 584);
  int v69 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v69 < 5u)
  {
    LODWORD(v70) = 0;
  }
  else
  {
    uint64_t v70 = v69[2];
    if (v70) {
      LODWORD(v70) = *(int *)((char *)v18 + v70);
    }
  }
  *(_DWORD *)(a1 + 600) = v70;
  uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v71 < 0x51u)
  {
    LODWORD(v72) = 0;
  }
  else
  {
    uint64_t v72 = v71[40];
    if (v72) {
      LODWORD(v72) = *(int *)((char *)v18 + v72);
    }
  }
  *(_DWORD *)(a1 + 604) = v72;
  uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v73 < 0x4Fu)
  {
    LODWORD(v74) = 0;
  }
  else
  {
    uint64_t v74 = v73[39];
    if (v74) {
      LODWORD(v74) = *(int *)((char *)v18 + v74);
    }
  }
  *(_DWORD *)(a1 + 608) = v74;
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(v6 + 465);
  *(void *)(a1 + 496) = 0;
  long long v75 = (char *)v18 - *v18;
  size_t v76 = *(unsigned int *)((char *)v18
                        + *((unsigned __int16 *)v75 + 15)
                        + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
  uint64_t v77 = *((unsigned __int16 *)v75 + 13);
  if (v77) {
    LODWORD(v77) = *(int *)((char *)v18 + v77);
  }
  uint64_t v78 = v77;
  unint64_t v213 = *(unsigned int *)(v6 + 152);
  if (*(unsigned char *)(v6 + 416)) {
    unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
  }
        + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
        + 8;
  else {
    unint64_t v79 = 0;
  }
  uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
  if (v77) {
    uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
  }
  else {
    uint64_t v81 = v76;
  }
  uint64_t v212 = v81;
  uint64_t v82 = v81 + v77;
  if (v213) {
    unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
  }
  unint64_t v207 = v79;
  long long v208 = v18;
  uint64_t v83 = v82 + 8 * v213 + v79;
  unint64_t v203 = v10;
  unint64_t v204 = v24;
  uint64_t v215 = v6;
  if (!v83) {
    goto LABEL_204;
  }
  AGX::Heap<true>::allocateImpl(&v216, a2 + 5184, v83, (void *)(a1 + 552));
  *(_DWORD *)(a1 + 1232) += *(_DWORD *)v217;
  long long v84 = *(_OWORD *)v217;
  *(_OWORD *)(v209 + 632) = v216;
  *(_OWORD *)(v209 + 648) = v84;
  *(_OWORD *)(v209 + 657) = *(_OWORD *)&v217[9];
  __dst = *(char **)(a1 + 680);
  uint64_t v206 = *(void *)(a1 + 672);
  if (v76)
  {
    long long v85 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v85 < 0x1Fu)
    {
      uint64_t v86 = 0;
    }
    else
    {
      uint64_t v86 = v85[15];
      if (v86) {
        v86 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v86);
      }
    }
    memcpy(__dst, (const void *)(v86 + 4), v76);
    *(void *)(a1 + 616) = v206;
    *(void *)(a1 + 624) = __dst;
    *(void *)(a1 + 632) = v212;
  }
  if (v78)
  {
    uint64_t v87 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v87 >= 0xBu && (uint64_t v88 = v87[5]) != 0) {
      long long v89 = (char *)v24 + v88 + *(unsigned int *)((char *)v24 + v88);
    }
    else {
      long long v89 = 0;
    }
    uint64_t v90 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
    uint64_t v91 = *(unsigned int *)((char *)v18 + v90);
    if (*(int *)((char *)v18 + v90 + v91))
    {
      uint64_t v92 = 0;
      unint64_t v93 = 0;
      unint64_t v199 = &__dst[v80];
      long long v200 = v89 + 4;
      uint64_t v94 = 24;
      if (!v13) {
        uint64_t v94 = 8;
      }
      size_t v197 = v94;
      while (1)
      {
        uint64_t v95 = v90;
        uint64_t v96 = v90 + v91;
        uint64_t v97 = &v18[v92];
        uint64_t v98 = *(unsigned int *)((char *)&v18[v92 + 1] + v96);
        uint64_t v99 = v96 + v98;
        long long v100 = (char *)&v18[v92] + v96 + v98;
        uint64_t v101 = *((int *)v100 + 1);
        long long v102 = (char *)v97 + v99 - v101;
        unsigned int v103 = *((unsigned __int16 *)v102 + 2);
        if (v103 < 5) {
          goto LABEL_154;
        }
        uint64_t v104 = *((unsigned __int16 *)v102 + 4);
        if (!v104) {
          goto LABEL_154;
        }
        int v105 = *((unsigned __int8 *)v208 + v95 + v91 + v98 + v92 * 4 + v104 + 4);
        if (v105 != 114)
        {
          if (v105 == 18)
          {
            if (v103 < 9)
            {
              uint64_t v107 = 0;
            }
            else
            {
              uint64_t v106 = v95 + v91 + v98;
              uint64_t v107 = *(unsigned __int16 *)((char *)&v208[v92 + 3] + v106 - v101);
              if (v107) {
                uint64_t v107 = *(unsigned int *)((char *)v208 + v106 + v92 * 4 + v107 + 4);
              }
            }
            unint64_t v110 = &v199[8 * v107];
            bzero(v110, v197);
            __n128 v111 = (char *)&v208[v92] + v95 + v91 + v98 - *((int *)v100 + 1);
            if (*((unsigned __int16 *)v111 + 2) < 7u)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v112 = *((unsigned __int16 *)v111 + 5);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v208 + v95 + v91 + v98 + v92 * 4 + v112 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v216, (int *)&v200[4 * v112 + *(unsigned int *)&v200[4 * v112]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v220.n128_u64, (uint64_t)&v216);
            *(void *)unint64_t v110 = v220.n128_u64[0];
            if (v219 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v205, (uint64_t)v110);
          }
          goto LABEL_154;
        }
        if (v103 < 7)
        {
          uint64_t v109 = 0;
        }
        else
        {
          uint64_t v108 = v95 + v91 + v98;
          uint64_t v109 = *(unsigned __int16 *)((char *)&v208[v92 + 2] + v108 - v101 + 2);
          if (v109) {
            uint64_t v109 = *(unsigned int *)((char *)v208 + v108 + v92 * 4 + v109 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v216, (int *)&v200[4 * v109 + *(unsigned int *)&v200[4 * v109]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v220, *(void *)(a1 + 784), (uint64_t)&v216);
        int v113 = *(_DWORD *)(v220.n128_u64[0] + 96);
        long long v114 = *(__n128 **)(a1 + 768);
        if ((unint64_t)v114 >= *(void *)(a1 + 776))
        {
          unint64_t v116 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v198, v220);
          uint64_t v6 = v215;
        }
        else
        {
          v114->n128_u64[0] = v220.n128_u64[0];
          unint64_t v115 = v220.n128_u64[1];
          v114->n128_u64[1] = v220.n128_u64[1];
          uint64_t v6 = v215;
          if (v115) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v116 = v114 + 1;
        }
        *(void *)(a1 + 768) = v116;
        uint64_t v117 = (char *)&v208[v92] + v95 + v91 + v98 - *((int *)v100 + 1);
        if (*((unsigned __int16 *)v117 + 2) < 9u)
        {
          uint64_t v118 = 0;
        }
        else
        {
          uint64_t v118 = *((unsigned __int16 *)v117 + 6);
          if (v118) {
            uint64_t v118 = *(unsigned int *)((char *)v208 + v95 + v91 + v98 + v92 * 4 + v118 + 4);
          }
        }
        *(_DWORD *)&v199[4 * v118] = v113;
        long long v119 = (std::__shared_weak_count *)v220.n128_u64[1];
        if (v220.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v220.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v219 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v93;
        uint64_t v18 = v208;
        uint64_t v90 = *(unsigned __int16 *)((char *)v208 - *v208 + 28);
        uint64_t v91 = *(unsigned int *)((char *)v208 + v90);
        ++v92;
        if (v93 >= *(unsigned int *)((char *)v208 + v90 + v91)) {
          goto LABEL_188;
        }
      }
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
      if ((v219 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
LABEL_188:
    long long v24 = v204;
    int v10 = v203;
    if (!v207)
    {
LABEL_193:
      if (v213)
      {
LABEL_194:
        *(void *)(v209 + 464) = &__dst[v212 + v78 + v207];
        unint64_t v125 = (unsigned __int16 *)((char *)v24 - *v24);
        if (*v125 >= 0xBu)
        {
          uint64_t v126 = v125[5];
          if (v126)
          {
            unint64_t v127 = (int *)((char *)v24 + v126 + *(unsigned int *)((char *)v24 + v126));
            if (*v127)
            {
              uint64_t v128 = 0;
              unint64_t v129 = 0;
              do
              {
                long long v130 = (void *)(*(void *)(v209 + 464) + 8 * ((v128 * 4) & 0xFFFFFFFC));
                AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v216, (_DWORD *)((char *)&v127[v128 + 1] + v127[v128 + 1]));
                AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v220.n128_u64, (uint64_t)&v216);
                void *v130 = v220.n128_u64[0];
                if (v219 < 0) {
                  operator delete(__p);
                }
                std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v205, (uint64_t)v130);
                ++v129;
                ++v128;
              }
              while (v129 < *v127);
            }
          }
        }
      }
LABEL_204:
      AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v205);
      long long v131 = (unsigned __int16 *)((char *)v18 - *v18);
      uint64_t v132 = v131[8];
      uint64_t v133 = *(unsigned int *)((char *)v18 + v132);
      unint64_t v134 = (unsigned int *)((char *)v18 + v132 + v133);
      uint64_t v135 = *v134;
      if (v135)
      {
        unint64_t v136 = 0;
        uint64_t v137 = 4 * v135;
        unint64_t v138 = (char *)v18 + v132 + v133;
        do
        {
          uint64_t v143 = v134[v136 / 4 + 1];
          unint64_t v144 = &v138[v136 + v143 - *(int *)((char *)&v134[v136 / 4 + 1] + v143)];
          if (*((unsigned __int16 *)v144 + 2) < 7u)
          {
            LODWORD(v139) = 0;
          }
          else
          {
            uint64_t v139 = *((unsigned __int16 *)v144 + 5);
            if (v139)
            {
              unint64_t v145 = *(unsigned int *)&v138[v136 + 4 + v143 + v139];
              LODWORD(v139) = v145;
              if ((v145 & 0x80000000) != 0)
              {
                *(void *)&v10[8 * ((v145 & 0x7C000000) != 0)] |= 1 << (v145 >> 20);
                uint64_t v140 = 0x10000000000001;
                long long v142 = v10;
                goto LABEL_208;
              }
            }
          }
          uint64_t v140 = 1 << v139;
          uint64_t v141 = 8 * ((v139 & 0xFFFC0) != 0);
          *(void *)(a1 + 56 + v141) |= v140;
          long long v142 = (void *)(a1 + 104 + v141);
LABEL_208:
          *v142 |= v140;
          v136 += 4;
        }
        while (v137 != v136);
      }
      uint64_t v146 = v131[10];
      uint64_t v147 = *(unsigned int *)((char *)v18 + v146);
      uint64_t v148 = (unsigned int *)((char *)v18 + v146 + v147);
      uint64_t v149 = *v148;
      if (v149)
      {
        unint64_t v150 = 0;
        uint64_t v151 = 4 * v149;
        uint64_t v152 = (char *)v18 + v146 + v147;
        do
        {
          uint64_t v157 = v148[v150 / 4 + 1];
          long long v158 = &v152[v150 + v157 - *(int *)((char *)&v148[v150 / 4 + 1] + v157)];
          if (*((unsigned __int16 *)v158 + 2) < 7u)
          {
            LODWORD(v153) = 0;
          }
          else
          {
            uint64_t v153 = *((unsigned __int16 *)v158 + 5);
            if (v153)
            {
              unint64_t v159 = *(unsigned int *)&v152[v150 + 4 + v157 + v153];
              LODWORD(v153) = v159;
              if ((v159 & 0x80000000) != 0)
              {
                uint64_t v154 = 1 << (v159 >> 20);
                uint64_t v156 = &v10[8 * ((v159 & 0x7C000000) != 0)];
                goto LABEL_217;
              }
            }
          }
          uint64_t v154 = 1 << v153;
          uint64_t v155 = 8 * ((v153 & 0xFFFC0) != 0);
          *(void *)(a1 + 72 + v155) |= v154;
          uint64_t v156 = (char *)(a1 + 120 + v155);
LABEL_217:
          *(void *)v156 |= v154;
          v150 += 4;
        }
        while (v151 != v150);
      }
      uint64_t v160 = v131[6];
      uint64_t v161 = *(unsigned int *)((char *)v18 + v160);
      uint64_t v162 = (unsigned int *)((char *)v18 + v160 + v161);
      uint64_t v163 = *v162;
      if (v163)
      {
        unint64_t v164 = 0;
        uint64_t v165 = 4 * v163;
        unint64_t v166 = (char *)v18 + v160 + v161;
        do
        {
          uint64_t v170 = v162[v164 / 4 + 1];
          long long v171 = &v166[v164 + v170 - *(int *)((char *)&v162[v164 / 4 + 1] + v170)];
          if (*((unsigned __int16 *)v171 + 2) < 7u)
          {
            LODWORD(v167) = 0;
          }
          else
          {
            unint64_t v167 = *((unsigned __int16 *)v171 + 5);
            if (v167)
            {
              unint64_t v167 = *(unsigned int *)&v166[v164 + 4 + v170 + v167];
              if ((v167 & 0x80000000) != 0)
              {
                uint64_t v168 = 1 << (v167 >> 20);
                BOOL v169 = (v167 & 0x7C000000) != 0;
                goto LABEL_226;
              }
              LODWORD(v167) = v167 & 0xFFFFF;
              if (v167 <= 0x35 && ((1 << v167) & 0x26000000000000) != 0) {
                goto LABEL_227;
              }
            }
          }
          uint64_t v168 = 1 << v167;
          BOOL v169 = v167 > 0x3F;
          *(void *)(v209 + 8 * v169) |= v168;
LABEL_226:
          *(void *)&v10[8 * v169] |= v168;
LABEL_227:
          v164 += 4;
        }
        while (v165 != v164);
      }
      int8x16_t v173 = *(int8x16_t *)(v6 + 160);
      if (*(_OWORD *)&v173 != 0)
      {
        *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v173);
        *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v173);
      }
      int8x16_t v174 = *(int8x16_t *)(v6 + 192);
      if (*(_OWORD *)&v174 != 0)
      {
        *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v174);
        *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v174);
      }
      uint64_t v175 = v131[12];
      uint64_t v176 = *(unsigned int *)((char *)v18 + v175);
      long long v177 = (unsigned int *)((char *)v18 + v175 + v176);
      uint64_t v178 = *v177;
      if (!v178)
      {
LABEL_278:
        if (!*(unsigned char *)(a1 + 1239))
        {
          *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
          *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
          *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
        }
        operator new();
      }
      unint64_t v179 = 0;
      uint64_t v180 = 4 * v178;
      long long v181 = (char *)v18 + v175 + v176;
      while (1)
      {
        uint64_t v184 = *(unsigned int *)&v181[v179 + 4];
        uint64_t v185 = v184 - *(int *)((char *)&v177[v179 / 4 + 1] + v184);
        unint64_t v186 = &v181[v179 + v185];
        unsigned int v187 = *((unsigned __int16 *)v186 + 2);
        if (v187 < 7)
        {
          if (v187 < 5) {
            goto LABEL_246;
          }
        }
        else
        {
          uint64_t v188 = *((unsigned __int16 *)v186 + 5);
          if (v188)
          {
            unsigned int v189 = *(_DWORD *)&v181[v179 + 4 + v184 + v188];
            goto LABEL_252;
          }
        }
        unsigned int v189 = 0;
LABEL_252:
        uint64_t v190 = *(unsigned __int16 *)&v181[v179 + 8 + v185];
        if (v190)
        {
          int v191 = v181[v179 + 4 + v184 + v190];
          unint64_t v183 = (char *)(a1 + 184);
          uint64_t v182 = 1;
          switch(v181[v179 + 4 + v184 + v190])
          {
            case 11:
            case 12:
            case 13:
            case 16:
            case 17:
            case 62:
            case 93:
            case 97:
            case 98:
            case 113:
              if ((v189 & 0x80000000) != 0)
              {
                uint64_t v182 = 1 << (v189 >> 20);
                unint64_t v183 = &v10[8 * ((v189 & 0x7C000000) != 0)];
              }
              else
              {
                if ((v189 & 0xFFF00000) == 0x400000) {
                  break;
                }
                if (v191 == 113 || v191 == 98) {
                  uint64_t v193 = 32;
                }
                else {
                  uint64_t v193 = 16;
                }
                uint64_t v182 = 1 << v189;
                uint64_t v194 = a1 + v193 + 8 * ((v189 & 0xFFFC0) != 0);
                *(void *)(v194 + 136) |= 1 << v189;
                unint64_t v183 = (char *)(v194 + 88);
              }
LABEL_245:
              *(void *)v183 |= v182;
              break;
            case 24:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 4;
              goto LABEL_245;
            case 25:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 8;
              goto LABEL_245;
            case 27:
              goto LABEL_245;
            case 28:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 2;
              goto LABEL_245;
            case 59:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 16;
              goto LABEL_245;
            case 60:
            case 61:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 32;
              goto LABEL_245;
            case 75:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 64;
              goto LABEL_245;
            case 84:
            case 85:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 128;
              goto LABEL_245;
            case 108:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 256;
              goto LABEL_245;
            case 109:
            case 110:
              uint64_t v182 = 1 << v189;
              uint64_t v195 = 8 * ((v189 & 0xFFFC0) != 0);
              *(void *)(a1 + 136 + v195) |= 1 << v189;
              unint64_t v183 = &v10[v195];
              goto LABEL_245;
            case 111:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 512;
              goto LABEL_245;
            case 112:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 1024;
              goto LABEL_245;
            case 118:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 2048;
              goto LABEL_245;
            case 119:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 4096;
              goto LABEL_245;
            case 120:
              unint64_t v183 = (char *)(a1 + 184);
              uint64_t v182 = 0x2000;
              goto LABEL_245;
            case -117:
              uint64_t v182 = 1 << v189;
              uint64_t v196 = 8 * ((v189 & 0xFFFC0) != 0);
              *(void *)(v209 + v196) |= 1 << v189;
              unint64_t v183 = &v10[v196];
              goto LABEL_245;
            default:
              break;
          }
        }
LABEL_246:
        v179 += 4;
        if (v180 == v179) {
          goto LABEL_278;
        }
      }
    }
  }
  else if (!v207)
  {
    goto LABEL_193;
  }
  *(void *)(a1 + 496) = v82 + v206;
  BOOL v120 = &__dst[v212 + v78];
  __n128 v121 = *(const void **)(v6 + 216);
  size_t v122 = *(void *)(v6 + 224) - (void)v121;
  *(_WORD *)BOOL v120 = v122 >> 2;
  *((_WORD *)v120 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
  *((_WORD *)v120 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
  *((_WORD *)v120 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
  memcpy(v120 + 8, v121, v122);
  unint64_t v123 = &v120[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
  memcpy(v123, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
  unint64_t v124 = &v123[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
  memcpy(v124, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
  memcpy(&v124[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
  if (*((_WORD *)v120 + 2))
  {
    if (*((_WORD *)v120 + 3)) {
      goto LABEL_193;
    }
  }
  else
  {
    *((_WORD *)v120 + 2) = *(_WORD *)v120;
    if (*((_WORD *)v120 + 3)) {
      goto LABEL_193;
    }
  }
  *((_WORD *)v120 + 3) = *((_WORD *)v120 + 1);
  if (v213) {
    goto LABEL_194;
  }
  goto LABEL_204;
}

void sub_242B02DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a28 + 752);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a11);
  long long v47 = *a23;
  if (*a23)
  {
    *(void *)(a29 + 736) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitVertexArgumentTable,false,8ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      long long v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      long long v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      long long v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      int v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      long long v98 = &__dst[v80];
      int v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        long long v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        unint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        unint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            unint64_t v115 = &v98[8 * v112];
            bzero(v115, v203);
            unint64_t v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)unint64_t v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          __n128 v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          __n128 v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        unint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        unint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        uint64_t v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          long long v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          unint64_t v125 = &__dst[v217 + v78];
          unint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)unint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          unint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            unint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v145 = 0x800000000001;
                      uint64_t v147 = v209;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              uint64_t v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                unint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      BOOL v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                BOOL v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            unint64_t v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  unint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v172 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    if ((v172 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v172 >> 20);
                      BOOL v174 = (v172 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                    LODWORD(v172) = v172 & 0xFFFFF;
                    if (v172 <= 0x30 && ((1 << v172) & 0x1300000000000) != 0) {
                      goto LABEL_229;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = v172 > 0x3F;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
LABEL_229:
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            long long v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_280:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            unint64_t v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_253;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_254;
                }
LABEL_253:
                unsigned int v194 = 0;
LABEL_254:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  unint64_t v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        unint64_t v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_247;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        unint64_t v188 = (void *)(v199 + 88);
LABEL_247:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_247;
                    case 25:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_247;
                    case 27:
                      goto LABEL_247;
                    case 28:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_247;
                    case 59:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_247;
                    case 60:
                    case 61:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_247;
                    case 75:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_247;
                    case 84:
                    case 85:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_247;
                    case 108:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_247;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v200];
                      goto LABEL_247;
                    case 111:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_247;
                    case 112:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_247;
                    case 118:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_247;
                    case 119:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_247;
                    case 120:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_247;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v201];
                      goto LABEL_247;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_280;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          long long v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              unint64_t v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                uint64_t v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      long long v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v42 = (unsigned int **)(a3 + 128);
    }
    uint64_t v43 = 0;
    if (*v42 && v42[1]) {
      uint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242B079A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = a5;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v9 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  int v10 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v206 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v207 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v11 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v11;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  unint64_t v12 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_DWORD *)(a1 + 1227) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v13 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  long long v209 = v10;
  bzero(v10, 0x30uLL);
  *(unsigned char *)(v9 + 672) = 0;
  uint64_t v214 = v9;
  *(unsigned char *)(v9 + 1191) = 0;
  if (a3[28])
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      uint64_t v14 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int **)(a3 + 98);
  }
  long long v15 = 0;
  if (*v14 && v14[1]) {
    long long v15 = (int *)((char *)*v14 + **v14);
  }
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = a3 + 58;
  if (a3[58])
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v20 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v20 = (unsigned int **)(a3 + 128);
  }
  unint64_t v21 = 0;
  if (*v20 && v20[1]) {
    unint64_t v21 = (int *)((char *)*v20 + **v20);
  }
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 5u && (uint64_t v23 = v22[2]) != 0) {
    long long v24 = (int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23));
  }
  else {
    long long v24 = 0;
  }
  int v25 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v25 < 0x11u)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    uint64_t v26 = v25[8];
    if (v26) {
      LODWORD(v26) = *(int *)((char *)v24 + v26);
    }
  }
  *unint64_t v12 = v26;
  long long v27 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v27 < 7u)
  {
    LODWORD(v28) = 0;
  }
  else
  {
    uint64_t v28 = v27[3];
    if (v28) {
      LODWORD(v28) = *(int *)((char *)v24 + v28);
    }
  }
  uint64_t v204 = v9 + 712;
  *(_DWORD *)(a1 + 408) = v28;
  unint64_t v29 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v29 >= 0x13u && (uint64_t v30 = v29[9]) != 0) {
    uint64_t v31 = (char *)v24 + v30 + *(unsigned int *)((char *)v24 + v30) + 4;
  }
  else {
    uint64_t v31 = "";
  }
  long long v211 = (unint64_t ***)(v9 + 680);
  MEMORY[0x24566EB20](v207, v31);
  std::string::operator=((std::string *)(v9 + 400), a4);
  long long v32 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    long long v34 = (char *)v24 + v33 + *(unsigned int *)((char *)v24 + v33) + 4;
  }
  else {
    long long v34 = "";
  }
  MEMORY[0x24566EB20](v206, v34);
  uint64_t v35 = (unsigned __int16 *)((char *)v24 - *v24);
  if (*v35 < 0x29u)
  {
    LOBYTE(v36) = 0;
  }
  else
  {
    uint64_t v36 = v35[20];
    if (v36) {
      LOBYTE(v36) = *((unsigned char *)v24 + v36) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v36;
  uint64_t v37 = *v19;
  if (*v19)
  {
    long long v38 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v38 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v38 = (unsigned int **)(a3 + 128);
  }
  uint64_t v39 = 0;
  if (*v38 && v38[1]) {
    uint64_t v39 = (int *)((char *)*v38 + **v38);
  }
  long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
  if (*v40 >= 7u)
  {
    int v41 = v40[3];
    if (!v41)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v41;
      if (v37)
      {
        long long v49 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v49 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v49 = (unsigned int **)(a3 + 128);
      }
      long long v50 = 0;
      if (*v49 && v49[1]) {
        long long v50 = (int *)((char *)*v49 + **v49);
      }
      long long v51 = (unsigned __int16 *)((char *)v50 - *v50);
      if (*v51 < 7u || !v51[3]) {
        goto LABEL_96;
      }
      if (v37)
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          uint64_t v52 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        uint64_t v52 = (unsigned int **)(a3 + 128);
      }
      long long v53 = 0;
      if (*v52 && v52[1]) {
        long long v53 = (int *)((char *)*v52 + **v52);
      }
      long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
      if (*v54 >= 7u && (uint64_t v55 = v54[3]) != 0) {
        uint64_t v56 = (int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55));
      }
      else {
        uint64_t v56 = 0;
      }
      long long v57 = (unsigned __int16 *)((char *)v56 - *v56);
      if (*v57 >= 0xDu && (uint64_t v58 = v57[6]) != 0) {
        int v59 = *(int *)((char *)v56 + v58);
      }
      else {
LABEL_96:
      }
        int v59 = 0;
      *(_DWORD *)(a1 + 572) = v59;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      uint64_t v60 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v60 < 0x4Du)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        uint64_t v61 = v60[38];
        if (v61) {
          LODWORD(v61) = *(int *)((char *)v18 + v61);
        }
      }
      *(_DWORD *)(a1 + 400) = v61;
      long long v62 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v62 < 0x53u)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[41];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v18 + v63);
        }
      }
      *(_DWORD *)(a1 + 404) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v64 < 0x43u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[33];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v18 + v65);
        }
      }
      int v66 = 0;
      *(_DWORD *)(a1 + 576) = v65;
      *(_DWORD *)(a1 + 580) = 0;
      uint64_t v67 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v67 >= 0x21u)
      {
        uint64_t v68 = v67[16];
        if (v68) {
          int v66 = *(int *)((char *)v18 + v68);
        }
        else {
          int v66 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v66;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      int v69 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v69 < 5u)
      {
        LODWORD(v70) = 0;
      }
      else
      {
        uint64_t v70 = v69[2];
        if (v70) {
          LODWORD(v70) = *(int *)((char *)v18 + v70);
        }
      }
      *(_DWORD *)(a1 + 592) = v70;
      uint64_t v71 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v71 < 0x51u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[40];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v18 + v72);
        }
      }
      *(_DWORD *)(a1 + 596) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v73 < 0x4Fu)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[39];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v18 + v74);
        }
      }
      *(_DWORD *)(a1 + 600) = v74;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v6 + 465);
      *(void *)(a1 + 496) = 0;
      long long v75 = (char *)v18 - *v18;
      size_t v76 = *(unsigned int *)((char *)v18
                            + *((unsigned __int16 *)v75 + 15)
                            + *(unsigned int *)((char *)v18 + *((unsigned __int16 *)v75 + 15)));
      uint64_t v77 = *((unsigned __int16 *)v75 + 13);
      if (v77) {
        LODWORD(v77) = *(int *)((char *)v18 + v77);
      }
      uint64_t v78 = v77;
      unint64_t v218 = *(unsigned int *)(v6 + 152);
      if (*(unsigned char *)(v6 + 416)) {
        unint64_t v79 = ((*(void *)(v6 + 248) + *(void *)(v6 + 224) - (*(void *)(v6 + 240) + *(void *)(v6 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v6 + 400) + *(void *)(v6 + 352) - (*(void *)(v6 + 392) + *(void *)(v6 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v79 = 0;
      }
      uint64_t v80 = (v76 + 31) & 0x1FFFFFFE0;
      if (v77) {
        uint64_t v81 = (v76 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v81 = v76;
      }
      uint64_t v217 = v81;
      uint64_t v82 = v81 + v77;
      if (v218) {
        unint64_t v79 = ((v82 + v79 + 31) & 0xFFFFFFFFFFFFFFE0) - v82;
      }
      unint64_t v212 = v79;
      long long v213 = v18;
      uint64_t v83 = v82 + 8 * v218 + v79;
      long long v208 = v24;
      uint64_t v220 = v6;
      if (!v83) {
        goto LABEL_206;
      }
      uint64_t v202 = v82;
      AGX::Heap<true>::allocateImpl(&v221, a2 + 5184, v83, (void *)(a1 + 552));
      *(_DWORD *)(a1 + 1224) += *(_DWORD *)v222;
      long long v84 = *(_OWORD *)v222;
      *(_OWORD *)(v214 + 624) = v221;
      *(_OWORD *)(v214 + 640) = v84;
      *(_OWORD *)(v214 + 649) = *(_OWORD *)&v222[9];
      __dst = *(char **)(a1 + 672);
      uint64_t v85 = *(void *)(a1 + 664);
      if (v76)
      {
        uint64_t v86 = v78;
        uint64_t v87 = (unsigned __int16 *)((char *)v18 - *v18);
        uint64_t v88 = *(void *)(a1 + 664);
        if (*v87 < 0x1Fu)
        {
          int v90 = v13;
          uint64_t v89 = 0;
        }
        else
        {
          uint64_t v89 = v87[15];
          int v90 = v13;
          if (v89) {
            v89 += (uint64_t)v18 + *(unsigned int *)((char *)v18 + v89);
          }
        }
        memcpy(__dst, (const void *)(v89 + 4), v76);
        *(void *)(a1 + 608) = v88;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v217;
        int v13 = v90;
        uint64_t v85 = v88;
        uint64_t v78 = v86;
      }
      if (!v78)
      {
        if (v212) {
          goto LABEL_193;
        }
LABEL_195:
        if (!v218) {
          goto LABEL_206;
        }
        goto LABEL_196;
      }
      int v91 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v91 >= 0xBu && (uint64_t v92 = v91[5]) != 0) {
        uint64_t v93 = (char *)v24 + v92 + *(unsigned int *)((char *)v24 + v92);
      }
      else {
        uint64_t v93 = 0;
      }
      uint64_t v94 = *(unsigned __int16 *)((char *)v18 - *v18 + 28);
      uint64_t v95 = *(unsigned int *)((char *)v18 + v94);
      if (!*(int *)((char *)v18 + v94 + v95))
      {
        if (!v212) {
          goto LABEL_195;
        }
        goto LABEL_193;
      }
      uint64_t v210 = v85;
      uint64_t v96 = 0;
      unint64_t v97 = 0;
      long long v98 = &__dst[v80];
      int v205 = v93 + 4;
      uint64_t v99 = 24;
      if (!v13) {
        uint64_t v99 = 8;
      }
      size_t v203 = v99;
      while (1)
      {
        uint64_t v100 = v94;
        uint64_t v101 = v94 + v95;
        long long v102 = &v18[v96];
        uint64_t v103 = *(unsigned int *)((char *)&v18[v96 + 1] + v101);
        uint64_t v104 = v101 + v103;
        unint64_t v105 = (char *)&v18[v96] + v101 + v103;
        uint64_t v106 = *((int *)v105 + 1);
        unint64_t v107 = (char *)v102 + v104 - v106;
        unsigned int v108 = *((unsigned __int16 *)v107 + 2);
        if (v108 < 5) {
          goto LABEL_154;
        }
        uint64_t v109 = *((unsigned __int16 *)v107 + 4);
        if (!v109) {
          goto LABEL_154;
        }
        int v110 = *((unsigned __int8 *)v213 + v100 + v95 + v103 + v96 * 4 + v109 + 4);
        if (v110 != 114)
        {
          if (v110 == 18)
          {
            if (v108 < 9)
            {
              uint64_t v112 = 0;
            }
            else
            {
              uint64_t v111 = v100 + v95 + v103;
              uint64_t v112 = *(unsigned __int16 *)((char *)&v213[v96 + 3] + v111 - v106);
              if (v112) {
                uint64_t v112 = *(unsigned int *)((char *)v213 + v111 + v96 * 4 + v112 + 4);
              }
            }
            unint64_t v115 = &v98[8 * v112];
            bzero(v115, v203);
            unint64_t v116 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
            if (*((unsigned __int16 *)v116 + 2) < 7u)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v117 = *((unsigned __int16 *)v116 + 5);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v117 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v117 + *(unsigned int *)&v205[4 * v117]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
            *(void *)unint64_t v115 = v225.n128_u64[0];
            if (v224 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v115);
          }
          goto LABEL_154;
        }
        if (v108 < 7)
        {
          uint64_t v114 = 0;
        }
        else
        {
          uint64_t v113 = v100 + v95 + v103;
          uint64_t v114 = *(unsigned __int16 *)((char *)&v213[v96 + 2] + v113 - v106 + 2);
          if (v114) {
            uint64_t v114 = *(unsigned int *)((char *)v213 + v113 + v96 * 4 + v114 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (int *)&v205[4 * v114 + *(unsigned int *)&v205[4 * v114]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v225, *(void *)(a1 + 776), (uint64_t)&v221);
        int v118 = *(_DWORD *)(v225.n128_u64[0] + 96);
        long long v119 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v119 >= *(void *)(a1 + 768))
        {
          __n128 v121 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v204, v225);
          uint64_t v6 = v220;
        }
        else
        {
          v119->n128_u64[0] = v225.n128_u64[0];
          unint64_t v120 = v225.n128_u64[1];
          v119->n128_u64[1] = v225.n128_u64[1];
          uint64_t v6 = v220;
          if (v120) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v120 + 8), 1uLL, memory_order_relaxed);
          }
          __n128 v121 = v119 + 1;
        }
        *(void *)(a1 + 760) = v121;
        unint64_t v122 = (char *)&v213[v96] + v100 + v95 + v103 - *((int *)v105 + 1);
        if (*((unsigned __int16 *)v122 + 2) < 9u)
        {
          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = *((unsigned __int16 *)v122 + 6);
          if (v123) {
            uint64_t v123 = *(unsigned int *)((char *)v213 + v100 + v95 + v103 + v96 * 4 + v123 + 4);
          }
        }
        *(_DWORD *)&v98[4 * v123] = v118;
        unint64_t v124 = (std::__shared_weak_count *)v225.n128_u64[1];
        if (v225.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v225.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v224 < 0) {
          goto LABEL_185;
        }
LABEL_154:
        ++v97;
        uint64_t v18 = v213;
        uint64_t v94 = *(unsigned __int16 *)((char *)v213 - *v213 + 28);
        uint64_t v95 = *(unsigned int *)((char *)v213 + v94);
        ++v96;
        if (v97 >= *(unsigned int *)((char *)v213 + v94 + v95))
        {
          long long v24 = v208;
          uint64_t v85 = v210;
          if (!v212) {
            goto LABEL_195;
          }
LABEL_193:
          *(void *)(a1 + 496) = v202 + v85;
          unint64_t v125 = &__dst[v217 + v78];
          unint64_t v126 = *(const void **)(v6 + 216);
          size_t v127 = *(void *)(v6 + 224) - (void)v126;
          *(_WORD *)unint64_t v125 = v127 >> 2;
          *((_WORD *)v125 + 1) = (*(_DWORD *)(v6 + 248) - *(_DWORD *)(v6 + 240)) >> 2;
          *((_WORD *)v125 + 2) = (*(_DWORD *)(v6 + 352) - *(_DWORD *)(v6 + 344)) >> 1;
          *((_WORD *)v125 + 3) = (*(_DWORD *)(v6 + 400) - *(_DWORD *)(v6 + 392)) >> 1;
          memcpy(v125 + 8, v126, v127);
          unint64_t v128 = &v125[*(void *)(v6 + 224) - *(void *)(v6 + 216) + 8];
          memcpy(v128, *(const void **)(v6 + 240), *(void *)(v6 + 248) - *(void *)(v6 + 240));
          uint64_t v129 = &v128[*(void *)(v6 + 248) - *(void *)(v6 + 240)];
          memcpy(v129, *(const void **)(v6 + 344), *(void *)(v6 + 352) - *(void *)(v6 + 344));
          memcpy(&v129[*(void *)(v6 + 352) - *(void *)(v6 + 344)], *(const void **)(v6 + 392), *(void *)(v6 + 400) - *(void *)(v6 + 392));
          if (*((_WORD *)v125 + 2))
          {
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          else
          {
            *((_WORD *)v125 + 2) = *(_WORD *)v125;
            if (*((_WORD *)v125 + 3)) {
              goto LABEL_195;
            }
          }
          *((_WORD *)v125 + 3) = *((_WORD *)v125 + 1);
          if (!v218)
          {
LABEL_206:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(a2, v211);
            long long v136 = (unsigned __int16 *)((char *)v18 - *v18);
            uint64_t v137 = v136[8];
            uint64_t v138 = *(unsigned int *)((char *)v18 + v137);
            unint64_t v139 = (unsigned int *)((char *)v18 + v137 + v138);
            uint64_t v140 = *v139;
            if (v140)
            {
              unint64_t v141 = 0;
              uint64_t v142 = 4 * v140;
              uint64_t v143 = (char *)v18 + v137 + v138;
              do
              {
                uint64_t v148 = v139[v141 / 4 + 1];
                BOOL v149 = &v143[v141 + v148 - *(int *)((char *)&v139[v141 / 4 + 1] + v148)];
                if (*((unsigned __int16 *)v149 + 2) < 7u)
                {
                  LODWORD(v144) = 0;
                }
                else
                {
                  uint64_t v144 = *((unsigned __int16 *)v149 + 5);
                  if (v144)
                  {
                    unint64_t v150 = *(unsigned int *)&v143[v141 + 4 + v148 + v144];
                    LODWORD(v144) = v150;
                    if ((v150 & 0x80000000) != 0)
                    {
                      v209[(v150 & 0x7C000000) != 0] |= 1 << (v150 >> 20);
                      uint64_t v145 = 0x10000000000001;
                      uint64_t v147 = v209;
                      goto LABEL_210;
                    }
                  }
                }
                uint64_t v145 = 1 << v144;
                uint64_t v146 = 8 * ((v144 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v146) |= v145;
                uint64_t v147 = (void *)(a1 + 104 + v146);
LABEL_210:
                *v147 |= v145;
                v141 += 4;
              }
              while (v142 != v141);
            }
            uint64_t v151 = v136[10];
            uint64_t v152 = *(unsigned int *)((char *)v18 + v151);
            uint64_t v153 = (unsigned int *)((char *)v18 + v151 + v152);
            uint64_t v154 = *v153;
            if (v154)
            {
              unint64_t v155 = 0;
              uint64_t v156 = 4 * v154;
              uint64_t v157 = (char *)v18 + v151 + v152;
              do
              {
                uint64_t v162 = v153[v155 / 4 + 1];
                unint64_t v163 = &v157[v155 + v162 - *(int *)((char *)&v153[v155 / 4 + 1] + v162)];
                if (*((unsigned __int16 *)v163 + 2) < 7u)
                {
                  LODWORD(v158) = 0;
                }
                else
                {
                  uint64_t v158 = *((unsigned __int16 *)v163 + 5);
                  if (v158)
                  {
                    unint64_t v164 = *(unsigned int *)&v157[v155 + 4 + v162 + v158];
                    LODWORD(v158) = v164;
                    if ((v164 & 0x80000000) != 0)
                    {
                      uint64_t v159 = 1 << (v164 >> 20);
                      BOOL v161 = &v209[(v164 & 0x7C000000) != 0];
                      goto LABEL_219;
                    }
                  }
                }
                uint64_t v159 = 1 << v158;
                uint64_t v160 = 8 * ((v158 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v160) |= v159;
                BOOL v161 = (void *)(a1 + 120 + v160);
LABEL_219:
                *v161 |= v159;
                v155 += 4;
              }
              while (v156 != v155);
            }
            uint64_t v165 = v136[6];
            uint64_t v166 = *(unsigned int *)((char *)v18 + v165);
            unint64_t v167 = (unsigned int *)((char *)v18 + v165 + v166);
            uint64_t v168 = *v167;
            if (v168)
            {
              unint64_t v169 = 0;
              uint64_t v170 = 4 * v168;
              long long v171 = (char *)v18 + v165 + v166;
              do
              {
                uint64_t v175 = v167[v169 / 4 + 1];
                uint64_t v176 = &v171[v169 + v175 - *(int *)((char *)&v167[v169 / 4 + 1] + v175)];
                if (*((unsigned __int16 *)v176 + 2) < 7u)
                {
                  LODWORD(v172) = 0;
                }
                else
                {
                  uint64_t v172 = *((unsigned __int16 *)v176 + 5);
                  if (v172)
                  {
                    unint64_t v177 = *(unsigned int *)&v171[v169 + 4 + v175 + v172];
                    LODWORD(v172) = v177;
                    if ((v177 & 0x80000000) != 0)
                    {
                      uint64_t v173 = 1 << (v177 >> 20);
                      BOOL v174 = (v177 & 0x7C000000) != 0;
                      goto LABEL_228;
                    }
                  }
                }
                uint64_t v173 = 1 << v172;
                BOOL v174 = (v172 & 0xFFFC0) != 0;
                *(void *)(v214 + 8 * v174) |= v173;
LABEL_228:
                v209[v174] |= v173;
                v169 += 4;
              }
              while (v170 != v169);
            }
            int8x16_t v178 = *(int8x16_t *)(v6 + 160);
            if (*(_OWORD *)&v178 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v178);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v178);
            }
            int8x16_t v179 = *(int8x16_t *)(v6 + 192);
            if (*(_OWORD *)&v179 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v179);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v179);
            }
            uint64_t v180 = v136[12];
            uint64_t v181 = *(unsigned int *)((char *)v18 + v180);
            long long v182 = (unsigned int *)((char *)v18 + v180 + v181);
            uint64_t v183 = *v182;
            if (!v183)
            {
LABEL_273:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v6 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v6 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v6 + 440), *(int8x16_t *)(v6 + 424));
              }
              operator new();
            }
            unint64_t v184 = 0;
            uint64_t v185 = 4 * v183;
            unint64_t v186 = (char *)v18 + v180 + v181;
            while (2)
            {
              uint64_t v189 = *(unsigned int *)&v186[v184 + 4];
              uint64_t v190 = v189 - *(int *)((char *)&v182[v184 / 4 + 1] + v189);
              unint64_t v191 = &v186[v184 + v190];
              unsigned int v192 = *((unsigned __int16 *)v191 + 2);
              if (v192 < 7)
              {
                if (v192 >= 5) {
                  goto LABEL_246;
                }
              }
              else
              {
                uint64_t v193 = *((unsigned __int16 *)v191 + 5);
                if (v193)
                {
                  unsigned int v194 = *(_DWORD *)&v186[v184 + 4 + v189 + v193];
                  goto LABEL_247;
                }
LABEL_246:
                unsigned int v194 = 0;
LABEL_247:
                uint64_t v195 = *(unsigned __int16 *)&v186[v184 + 8 + v190];
                if (v195)
                {
                  int v196 = v186[v184 + 4 + v189 + v195];
                  unint64_t v188 = (void *)(a1 + 184);
                  uint64_t v187 = 1;
                  switch(v186[v184 + 4 + v189 + v195])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v194 & 0x80000000) != 0)
                      {
                        uint64_t v187 = 1 << (v194 >> 20);
                        unint64_t v188 = &v209[(v194 & 0x7C000000) != 0];
                        goto LABEL_240;
                      }
                      if ((v194 & 0xFFF00000) != 0x400000)
                      {
                        if (v196 == 113 || v196 == 98) {
                          uint64_t v198 = 32;
                        }
                        else {
                          uint64_t v198 = 16;
                        }
                        uint64_t v187 = 1 << v194;
                        uint64_t v199 = a1 + v198 + 8 * ((v194 & 0xFFFC0) != 0);
                        *(void *)(v199 + 136) |= 1 << v194;
                        unint64_t v188 = (void *)(v199 + 88);
LABEL_240:
                        *v188 |= v187;
                      }
                      break;
                    case 24:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4;
                      goto LABEL_240;
                    case 25:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 8;
                      goto LABEL_240;
                    case 27:
                      goto LABEL_240;
                    case 28:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2;
                      goto LABEL_240;
                    case 59:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 16;
                      goto LABEL_240;
                    case 60:
                    case 61:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 32;
                      goto LABEL_240;
                    case 75:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 64;
                      goto LABEL_240;
                    case 84:
                    case 85:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 128;
                      goto LABEL_240;
                    case 108:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 256;
                      goto LABEL_240;
                    case 109:
                    case 110:
                      uint64_t v187 = 1 << v194;
                      uint64_t v200 = (v194 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v200 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v200];
                      goto LABEL_240;
                    case 111:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 512;
                      goto LABEL_240;
                    case 112:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 1024;
                      goto LABEL_240;
                    case 118:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 2048;
                      goto LABEL_240;
                    case 119:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 4096;
                      goto LABEL_240;
                    case 120:
                      unint64_t v188 = (void *)(a1 + 184);
                      uint64_t v187 = 0x2000;
                      goto LABEL_240;
                    case -117:
                      uint64_t v187 = 1 << v194;
                      uint64_t v201 = (v194 & 0xFFFC0) != 0;
                      *(void *)(v214 + v201 * 8) |= 1 << v194;
                      unint64_t v188 = &v209[v201];
                      goto LABEL_240;
                    default:
                      break;
                  }
                }
              }
              v184 += 4;
              if (v185 == v184) {
                goto LABEL_273;
              }
              continue;
            }
          }
LABEL_196:
          *(void *)(v214 + 464) = &__dst[v217 + v78 + v212];
          long long v130 = (unsigned __int16 *)((char *)v24 - *v24);
          if (*v130 >= 0xBu)
          {
            uint64_t v131 = v130[5];
            if (v131)
            {
              unint64_t v132 = (int *)((char *)v24 + v131 + *(unsigned int *)((char *)v24 + v131));
              if (*v132)
              {
                uint64_t v133 = 0;
                unint64_t v134 = 0;
                do
                {
                  __n128 v135 = (void *)(*(void *)(v214 + 464) + 8 * ((v133 * 4) & 0xFFFFFFFC));
                  AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v221, (_DWORD *)((char *)&v132[v133 + 1] + v132[v133 + 1]));
                  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v225.n128_u64, (uint64_t)&v221);
                  void *v135 = v225.n128_u64[0];
                  if (v224 < 0) {
                    operator delete(__p);
                  }
                  std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v211, (uint64_t)v135);
                  ++v134;
                  ++v133;
                }
                while (v134 < *v132);
                uint64_t v18 = v213;
              }
            }
          }
          goto LABEL_206;
        }
      }
      ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
      std::__shared_weak_count::__release_weak(v124);
      if ((v224 & 0x80000000) == 0) {
        goto LABEL_154;
      }
LABEL_185:
      operator delete(__p);
      goto LABEL_154;
    }
    if (v37)
    {
      long long v42 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v42 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v42 = (unsigned int **)(a3 + 128);
    }
    uint64_t v43 = 0;
    if (*v42 && v42[1]) {
      uint64_t v43 = (int *)((char *)*v42 + **v42);
    }
    long long v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 7u && (uint64_t v45 = v44[3]) != 0) {
      int v46 = (int *)((char *)v43 + v45 + *(unsigned int *)((char *)v43 + v45));
    }
    else {
      int v46 = 0;
    }
    long long v47 = (unsigned __int16 *)((char *)v46 - *v46);
    if (*v47 >= 0xBu)
    {
      uint64_t v48 = v47[5];
      if (v48)
      {
        int v41 = *(int *)((char *)v46 + v48);
        goto LABEL_71;
      }
    }
  }
  int v41 = 0;
  goto LABEL_71;
}

void sub_242B0C534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void **a15, void **a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a9);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v47 = *a24;
  if (*a24)
  {
    *(void *)(a29 + 728) = v47;
    operator delete(v47);
  }
  if (*(char *)(a29 + 487) < 0) {
    operator delete(*a15);
  }
  if (*(char *)(a29 + 463) < 0) {
    operator delete(*a16);
  }
  uint64_t v48 = (void **)(a28 + 336);
  if (*(char *)(a29 + 439) < 0)
  {
    operator delete(*a17);
    long long v49 = *v48;
    if (*v48) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v49 = *v48;
    if (*v48)
    {
LABEL_11:
      *(void *)(a29 + 384) = v49;
      operator delete(v49);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitFastClearVertexArgumentTable,false,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      int v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *int v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *int v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *int v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::ProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, const std::string *a4, uint64_t a5, long long *a6, int a7)
{
  uint64_t v7 = a5;
  uint64_t v10 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v11 = a1 + 40;
  *(_OWORD *)(a1 + 88) = 0u;
  unint64_t v12 = (void *)(a1 + 88);
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(void *)(a1 + 480) = 0;
  uint64_t v210 = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  uint64_t v211 = a1 + 416;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  long long v13 = *a6;
  *(void *)(a1 + 648) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 632) = v13;
  *(void *)(a1 + 732) = 0;
  *(void *)(a1 + 724) = 0;
  *(void *)(a1 + 737) = 0;
  *(void *)(a1 + 716) = 0;
  uint64_t v14 = (_DWORD *)(a1 + 716);
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 697) = 0u;
  *(void *)(a1 + 776) = a2;
  *(_DWORD *)(a1 + 784) = 0;
  *(void *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 872) = 1;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(void *)(a1 + 968) = 0;
  *(_DWORD *)(a1 + 856) = 3;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1044) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(void *)(a1 + 1192) = a1 + 1200;
  *(_DWORD *)(a1 + 1216) = -1;
  *(_DWORD *)(a1 + 1224) = 0;
  *(unsigned char *)(a1 + 1228) = a7;
  *(_WORD *)(a1 + 1229) = 0;
  *(_DWORD *)(a1 + 1232) = -1;
  *(void *)(a1 + 1236) = 0;
  *(unsigned char *)(a1 + 1244) = 0;
  int v15 = *(unsigned __int8 *)(a5 + 465);
  bzero((void *)(a1 + 40), 0x30uLL);
  uint64_t v214 = v12;
  bzero(v12, 0x30uLL);
  *(unsigned char *)(v11 + 672) = 0;
  uint64_t v217 = v11;
  *(unsigned char *)(v11 + 1191) = 0;
  if (a3[28])
  {
    long long v16 = (unsigned int **)(a3 + 98);
    if (a3[29]) {
      long long v16 = (unsigned int **)(a3 + 28);
    }
  }
  else
  {
    long long v16 = (unsigned int **)(a3 + 98);
  }
  long long v17 = 0;
  if (*v16 && v16[1]) {
    long long v17 = (int *)((char *)*v16 + **v16);
  }
  uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 5u && (uint64_t v19 = v18[2]) != 0) {
    long long v218 = (int *)((char *)v17 + v19 + *(unsigned int *)((char *)v17 + v19));
  }
  else {
    long long v218 = 0;
  }
  unint64_t v20 = a3 + 58;
  if (a3[58])
  {
    unint64_t v21 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      unint64_t v21 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    unint64_t v21 = (unsigned int **)(a3 + 128);
  }
  uint64_t v22 = 0;
  if (*v21 && v21[1]) {
    uint64_t v22 = (int *)((char *)*v21 + **v21);
  }
  long long v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 5u && (uint64_t v24 = v23[2]) != 0) {
    int v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
  }
  else {
    int v25 = 0;
  }
  long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 < 0x11u)
  {
    LODWORD(v27) = 0;
  }
  else
  {
    uint64_t v27 = v26[8];
    if (v27) {
      LODWORD(v27) = *(int *)((char *)v25 + v27);
    }
  }
  *uint64_t v14 = v27;
  unint64_t v28 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v28 < 7u)
  {
    LODWORD(v29) = 0;
    unint64_t v30 = v218;
  }
  else
  {
    uint64_t v29 = v28[3];
    unint64_t v30 = v218;
    if (v29) {
      LODWORD(v29) = *(int *)((char *)v25 + v29);
    }
  }
  *(_DWORD *)(a1 + 408) = v29;
  uint64_t v31 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v31 >= 0x13u && (uint64_t v32 = v31[9]) != 0) {
    long long v33 = (char *)v25 + v32 + *(unsigned int *)((char *)v25 + v32) + 4;
  }
  else {
    long long v33 = "";
  }
  long long v216 = (unint64_t ***)(v217 + 680);
  MEMORY[0x24566EB20](v211, v33);
  std::string::operator=((std::string *)(v217 + 400), a4);
  long long v34 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v34 >= 9u && (uint64_t v35 = v34[4]) != 0) {
    long long v36 = (char *)v25 + v35 + *(unsigned int *)((char *)v25 + v35) + 4;
  }
  else {
    long long v36 = "";
  }
  MEMORY[0x24566EB20](v210, v36);
  long long v37 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v37 < 0x29u)
  {
    LOBYTE(v38) = 0;
  }
  else
  {
    uint64_t v38 = v37[20];
    if (v38) {
      LOBYTE(v38) = *((unsigned char *)v25 + v38) != 0;
    }
  }
  *(unsigned char *)(a1 + 488) = v38;
  uint64_t v39 = *v20;
  if (*v20)
  {
    long long v40 = (unsigned int **)(a3 + 128);
    if (a3[59]) {
      long long v40 = (unsigned int **)(a3 + 58);
    }
  }
  else
  {
    long long v40 = (unsigned int **)(a3 + 128);
  }
  long long v41 = 0;
  if (*v40 && v40[1]) {
    long long v41 = (int *)((char *)*v40 + **v40);
  }
  long long v42 = (unsigned __int16 *)((char *)v41 - *v41);
  if (*v42 >= 7u)
  {
    int v43 = v42[3];
    if (!v43)
    {
LABEL_71:
      *(_DWORD *)(a1 + 568) = v43;
      if (v39)
      {
        long long v51 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v51 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v51 = (unsigned int **)(a3 + 128);
      }
      uint64_t v52 = 0;
      if (*v51 && v51[1]) {
        uint64_t v52 = (int *)((char *)*v51 + **v51);
      }
      long long v53 = (unsigned __int16 *)((char *)v52 - *v52);
      if (*v53 < 7u || !v53[3]) {
        goto LABEL_96;
      }
      if (v39)
      {
        long long v54 = (unsigned int **)(a3 + 128);
        if (a3[59]) {
          long long v54 = (unsigned int **)(a3 + 58);
        }
      }
      else
      {
        long long v54 = (unsigned int **)(a3 + 128);
      }
      long long v55 = 0;
      if (*v54 && v54[1]) {
        long long v55 = (int *)((char *)*v54 + **v54);
      }
      uint64_t v56 = (unsigned __int16 *)((char *)v55 - *v55);
      if (*v56 >= 7u && (uint64_t v57 = v56[3]) != 0) {
        long long v58 = (int *)((char *)v55 + v57 + *(unsigned int *)((char *)v55 + v57));
      }
      else {
        long long v58 = 0;
      }
      long long v59 = (unsigned __int16 *)((char *)v58 - *v58);
      if (*v59 >= 0xDu && (uint64_t v60 = v59[6]) != 0) {
        int v61 = *(int *)((char *)v58 + v60);
      }
      else {
LABEL_96:
      }
        int v61 = 0;
      *(_DWORD *)(a1 + 572) = v61;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v7 + 465);
      long long v62 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v62 < 0x4Du)
      {
        LODWORD(v63) = 0;
      }
      else
      {
        uint64_t v63 = v62[38];
        if (v63) {
          LODWORD(v63) = *(int *)((char *)v30 + v63);
        }
      }
      *(_DWORD *)(a1 + 400) = v63;
      uint64_t v64 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v64 < 0x53u)
      {
        LODWORD(v65) = 0;
      }
      else
      {
        uint64_t v65 = v64[41];
        if (v65) {
          LODWORD(v65) = *(int *)((char *)v30 + v65);
        }
      }
      *(_DWORD *)(a1 + 404) = v65;
      int v66 = (unsigned __int16 *)((char *)v30 - *v30);
      if (*v66 < 0x43u)
      {
        LODWORD(v67) = 0;
      }
      else
      {
        uint64_t v67 = v66[33];
        if (v67) {
          LODWORD(v67) = *(int *)((char *)v30 + v67);
        }
      }
      int v68 = 0;
      *(_DWORD *)(a1 + 576) = v67;
      *(_DWORD *)(a1 + 580) = 0;
      int v69 = (unsigned __int16 *)((char *)v218 - *v218);
      if (*v69 >= 0x21u)
      {
        uint64_t v70 = v69[16];
        if (v70) {
          int v68 = *(int *)((char *)v218 + v70);
        }
        else {
          int v68 = 0;
        }
      }
      {
        getAdditionalSpillBufferBytes(void)::extra = 0;
      }
      *(_DWORD *)(a1 + 584) = getAdditionalSpillBufferBytes(void)::extra + v68;
      *(_DWORD *)(a1 + 588) = *(_DWORD *)(a1 + 576);
      uint64_t v71 = (unsigned __int16 *)((char *)v218 - *v218);
      if (*v71 < 5u)
      {
        LODWORD(v72) = 0;
      }
      else
      {
        uint64_t v72 = v71[2];
        if (v72) {
          LODWORD(v72) = *(int *)((char *)v218 + v72);
        }
      }
      *(_DWORD *)(a1 + 592) = v72;
      uint64_t v73 = (unsigned __int16 *)((char *)v218 - *v218);
      if (*v73 < 0x51u)
      {
        LODWORD(v74) = 0;
      }
      else
      {
        uint64_t v74 = v73[40];
        if (v74) {
          LODWORD(v74) = *(int *)((char *)v218 + v74);
        }
      }
      *(_DWORD *)(a1 + 596) = v74;
      long long v75 = (unsigned __int16 *)((char *)v218 - *v218);
      if (*v75 < 0x4Fu)
      {
        LODWORD(v76) = 0;
      }
      else
      {
        uint64_t v76 = v75[39];
        if (v76) {
          LODWORD(v76) = *(int *)((char *)v218 + v76);
        }
      }
      *(_DWORD *)(a1 + 600) = v76;
      *(unsigned char *)(a1 + 744) = *(unsigned char *)(v7 + 465);
      *(void *)(a1 + 496) = 0;
      uint64_t v77 = (char *)v218 - *v218;
      size_t v78 = *(unsigned int *)((char *)v218
                            + *((unsigned __int16 *)v77 + 15)
                            + *(unsigned int *)((char *)v218 + *((unsigned __int16 *)v77 + 15)));
      uint64_t v79 = *((unsigned __int16 *)v77 + 13);
      if (v79) {
        LODWORD(v79) = *(int *)((char *)v218 + v79);
      }
      uint64_t v80 = v79;
      uint64_t v81 = *(unsigned int *)(v7 + 152);
      if (*(unsigned char *)(v7 + 416)) {
        unint64_t v82 = ((*(void *)(v7 + 248) + *(void *)(v7 + 224) - (*(void *)(v7 + 240) + *(void *)(v7 + 216))) & 0xFFFFFFFFFFFFFFFCLL)
      }
            + ((*(void *)(v7 + 400) + *(void *)(v7 + 352) - (*(void *)(v7 + 392) + *(void *)(v7 + 344))) & 0xFFFFFFFFFFFFFFFELL)
            + 8;
      else {
        unint64_t v82 = 0;
      }
      uint64_t v83 = (v78 + 31) & 0x1FFFFFFE0;
      if (v79) {
        uint64_t v84 = (v78 + 31) & 0x1FFFFFFE0;
      }
      else {
        uint64_t v84 = v78;
      }
      uint64_t v221 = v84;
      uint64_t v85 = v84 + v79;
      if (v81) {
        unint64_t v82 = ((v85 + v82 + 31) & 0xFFFFFFFFFFFFFFE0) - v85;
      }
      unint64_t v222 = v82;
      uint64_t v86 = v85 + 8 * v81 + v82;
      long long v213 = v25;
      uint64_t v224 = v7;
      if (!v86) {
        goto LABEL_216;
      }
      int v207 = *(_DWORD *)(v7 + 152);
      uint64_t v208 = v10;
      if (a7)
      {
        AGX::Heap<true>::allocateImpl(&v225, v10 + 5688, v86, 0);
        uint64_t v87 = a1;
        int v88 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v226;
        long long v89 = *(_OWORD *)v226;
        *(_OWORD *)(v217 + 1024) = v225;
        *(_OWORD *)(v217 + 1040) = v89;
        *(_OWORD *)(v217 + 1049) = *(_OWORD *)&v226[9];
        __dst = *(char **)(a1 + 1072);
        uint64_t v215 = *(void *)(a1 + 1064) + 0x1000000000;
        *(void *)(a1 + 976) = v215;
      }
      else
      {
        uint64_t v90 = v10 + 5184;
        uint64_t v87 = a1;
        AGX::Heap<true>::allocateImpl(&v225, v90, v86, (void *)(a1 + 552));
        int v88 = *(_DWORD *)(a1 + 1224) + *(_DWORD *)v226;
        long long v91 = *(_OWORD *)v226;
        *(_OWORD *)(v217 + 624) = v225;
        *(_OWORD *)(v217 + 640) = v91;
        *(_OWORD *)(v217 + 649) = *(_OWORD *)&v226[9];
        __dst = *(char **)(a1 + 672);
        uint64_t v215 = *(void *)(a1 + 664);
      }
      *(_DWORD *)(v87 + 1224) = v88;
      uint64_t v10 = v208;
      int v92 = v207;
      if (v78)
      {
        uint64_t v93 = (unsigned __int16 *)((char *)v218 - *v218);
        if (*v93 < 0x1Fu)
        {
          int v95 = v15;
          uint64_t v94 = 0;
        }
        else
        {
          uint64_t v94 = v93[15];
          int v95 = v15;
          if (v94) {
            v94 += (uint64_t)v218 + *(unsigned int *)((char *)v218 + v94);
          }
        }
        memcpy(__dst, (const void *)(v94 + 4), v78);
        *(void *)(a1 + 608) = v215;
        *(void *)(a1 + 616) = __dst;
        *(void *)(a1 + 624) = v221;
        int v15 = v95;
        uint64_t v10 = v208;
        int v92 = v207;
      }
      if (!v80)
      {
        if (v222) {
          goto LABEL_198;
        }
LABEL_200:
        if (!v92) {
          goto LABEL_216;
        }
        goto LABEL_201;
      }
      if (a7) {
        *(void *)(a1 + 984) = v215 + v83;
      }
      long long v96 = (unsigned __int16 *)((char *)v25 - *v25);
      if (*v96 >= 0xBu && (uint64_t v97 = v96[5]) != 0) {
        long long v98 = (char *)v25 + v97 + *(unsigned int *)((char *)v25 + v97);
      }
      else {
        long long v98 = 0;
      }
      uint64_t v99 = *(unsigned __int16 *)((char *)v218 - *v218 + 28);
      uint64_t v100 = *(unsigned int *)((char *)v218 + v99);
      if (!*(int *)((char *)v218 + v99 + v100))
      {
        int v25 = v213;
        if (!v222) {
          goto LABEL_200;
        }
        goto LABEL_198;
      }
      uint64_t v101 = 0;
      unint64_t v102 = 0;
      long long v209 = &__dst[v83];
      __n128 v212 = v98 + 4;
      uint64_t v103 = 24;
      if (!v15) {
        uint64_t v103 = 8;
      }
      size_t v206 = v103;
      unint64_t v104 = v218;
      while (1)
      {
        uint64_t v105 = v99;
        uint64_t v106 = v99 + v100;
        unint64_t v107 = &v104[v101];
        uint64_t v108 = *(unsigned int *)((char *)&v104[v101 + 1] + v106);
        uint64_t v109 = v106 + v108;
        uint64_t v110 = (uint64_t)v107 + v106 + v108;
        uint64_t v111 = *(int *)(v110 + 4);
        uint64_t v112 = (uint64_t)v107 + v109 - v111;
        unsigned int v113 = *(unsigned __int16 *)(v112 + 4);
        if (v113 < 5) {
          goto LABEL_159;
        }
        uint64_t v114 = *(unsigned __int16 *)(v112 + 8);
        if (!v114) {
          goto LABEL_159;
        }
        int v115 = *((unsigned __int8 *)v218 + v105 + v100 + v108 + v101 * 4 + v114 + 4);
        if (v115 != 114)
        {
          if (v115 == 18)
          {
            if (v113 < 9)
            {
              uint64_t v117 = 0;
            }
            else
            {
              uint64_t v116 = v105 + v100 + v108;
              uint64_t v117 = *(unsigned __int16 *)((char *)&v218[v101 + 3] + v116 - v111);
              if (v117) {
                uint64_t v117 = *(unsigned int *)((char *)v218 + v116 + v101 * 4 + v117 + 4);
              }
            }
            BOOL v120 = &v209[8 * v117];
            bzero(v120, v206);
            __n128 v121 = (char *)&v218[v101] + v105 + v100 + v108 - *(int *)(v110 + 4);
            if (*((unsigned __int16 *)v121 + 2) < 7u)
            {
              uint64_t v122 = 0;
            }
            else
            {
              uint64_t v122 = *((unsigned __int16 *)v121 + 5);
              if (v122) {
                uint64_t v122 = *(unsigned int *)((char *)v218 + v105 + v100 + v108 + v101 * 4 + v122 + 4);
              }
            }
            AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v225, (int *)&v212[4 * v122 + *(unsigned int *)&v212[4 * v122]]);
            AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v229.n128_u64, (uint64_t)&v225);
            *(void *)BOOL v120 = v229.n128_u64[0];
            if (v228 < 0) {
              operator delete(__p);
            }
            std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v216, (uint64_t)v120);
          }
          goto LABEL_159;
        }
        if (v113 < 7)
        {
          uint64_t v119 = 0;
        }
        else
        {
          uint64_t v118 = v105 + v100 + v108;
          uint64_t v119 = *(unsigned __int16 *)((char *)&v218[v101 + 2] + v118 - v111 + 2);
          if (v119) {
            uint64_t v119 = *(unsigned int *)((char *)v218 + v118 + v101 * 4 + v119 + 4);
          }
        }
        AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v225, (int *)&v212[4 * v119 + *(unsigned int *)&v212[4 * v119]]);
        AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateBindlessConstantSampler((uint64_t *)&v229, *(void *)(a1 + 776), (uint64_t)&v225);
        int v123 = *(_DWORD *)(v229.n128_u64[0] + 96);
        unint64_t v124 = *(__n128 **)(a1 + 760);
        if ((unint64_t)v124 >= *(void *)(a1 + 768))
        {
          unint64_t v126 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(v217 + 712, v229);
          uint64_t v7 = v224;
        }
        else
        {
          v124->n128_u64[0] = v229.n128_u64[0];
          unint64_t v125 = v229.n128_u64[1];
          v124->n128_u64[1] = v229.n128_u64[1];
          uint64_t v7 = v224;
          if (v125) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v125 + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v126 = v124 + 1;
        }
        *(void *)(a1 + 760) = v126;
        unint64_t v127 = (char *)&v218[v101] + v105 + v100 + v108 - *(int *)(v110 + 4);
        if (*((unsigned __int16 *)v127 + 2) < 9u)
        {
          uint64_t v128 = 0;
        }
        else
        {
          uint64_t v128 = *((unsigned __int16 *)v127 + 6);
          if (v128) {
            uint64_t v128 = *(unsigned int *)((char *)v218 + v105 + v100 + v108 + v101 * 4 + v128 + 4);
          }
        }
        *(_DWORD *)&v209[4 * v128] = v123;
        uint64_t v129 = (std::__shared_weak_count *)v229.n128_u64[1];
        if (v229.n128_u64[1])
        {
          if (!atomic_fetch_add((atomic_ullong *volatile)(v229.n128_u64[1] + 8), 0xFFFFFFFFFFFFFFFFLL)) {
            break;
          }
        }
        if (v228 < 0) {
          goto LABEL_190;
        }
LABEL_159:
        ++v102;
        unint64_t v104 = v218;
        uint64_t v99 = *(unsigned __int16 *)((char *)v218 - *v218 + 28);
        uint64_t v100 = *(unsigned int *)((char *)v218 + v99);
        ++v101;
        if (v102 >= *(unsigned int *)((char *)v218 + v99 + v100))
        {
          int v25 = v213;
          uint64_t v10 = v208;
          int v92 = v207;
          if (!v222) {
            goto LABEL_200;
          }
LABEL_198:
          *(void *)(a1 + 496) = v85 + v215;
          long long v130 = &__dst[v221 + v80];
          long long v131 = *(const void **)(v7 + 216);
          size_t v132 = *(void *)(v7 + 224) - (void)v131;
          *(_WORD *)long long v130 = v132 >> 2;
          *((_WORD *)v130 + 1) = (*(_DWORD *)(v7 + 248) - *(_DWORD *)(v7 + 240)) >> 2;
          *((_WORD *)v130 + 2) = (*(_DWORD *)(v7 + 352) - *(_DWORD *)(v7 + 344)) >> 1;
          *((_WORD *)v130 + 3) = (*(_DWORD *)(v7 + 400) - *(_DWORD *)(v7 + 392)) >> 1;
          memcpy(v130 + 8, v131, v132);
          unint64_t v133 = &v130[*(void *)(v7 + 224) - *(void *)(v7 + 216) + 8];
          memcpy(v133, *(const void **)(v7 + 240), *(void *)(v7 + 248) - *(void *)(v7 + 240));
          unint64_t v134 = &v133[*(void *)(v7 + 248) - *(void *)(v7 + 240)];
          memcpy(v134, *(const void **)(v7 + 344), *(void *)(v7 + 352) - *(void *)(v7 + 344));
          memcpy(&v134[*(void *)(v7 + 352) - *(void *)(v7 + 344)], *(const void **)(v7 + 392), *(void *)(v7 + 400) - *(void *)(v7 + 392));
          if (*((_WORD *)v130 + 2))
          {
            if (*((_WORD *)v130 + 3)) {
              goto LABEL_200;
            }
          }
          else
          {
            *((_WORD *)v130 + 2) = *(_WORD *)v130;
            if (*((_WORD *)v130 + 3)) {
              goto LABEL_200;
            }
          }
          *((_WORD *)v130 + 3) = *((_WORD *)v130 + 1);
          if (!v92)
          {
LABEL_216:
            AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::registerConstantSamplerList(v10, v216);
            long long v141 = (unsigned __int16 *)((char *)v218 - *v218);
            uint64_t v142 = v141[8];
            uint64_t v143 = *(unsigned int *)((char *)v218 + v142);
            unint64_t v144 = (unsigned int *)((char *)v218 + v142 + v143);
            uint64_t v145 = *v144;
            if (v145)
            {
              unint64_t v146 = 0;
              uint64_t v147 = 4 * v145;
              uint64_t v148 = (char *)v218 + v142 + v143;
              do
              {
                uint64_t v153 = v144[v146 / 4 + 1];
                unint64_t v154 = &v148[v146 + v153 - *(int *)((char *)&v144[v146 / 4 + 1] + v153)];
                if (*((unsigned __int16 *)v154 + 2) < 7u)
                {
                  LODWORD(v149) = 0;
                }
                else
                {
                  uint64_t v149 = *((unsigned __int16 *)v154 + 5);
                  if (v149)
                  {
                    unint64_t v155 = *(unsigned int *)&v148[v146 + 4 + v153 + v149];
                    LODWORD(v149) = v155;
                    if ((v155 & 0x80000000) != 0)
                    {
                      v214[(v155 & 0x7C000000) != 0] |= 1 << (v155 >> 20);
                      uint64_t v150 = 0x20000000001;
                      uint64_t v152 = v214;
                      goto LABEL_220;
                    }
                  }
                }
                uint64_t v150 = 1 << v149;
                uint64_t v151 = 8 * ((v149 & 0xFFFC0) != 0);
                *(void *)(a1 + 56 + v151) |= v150;
                uint64_t v152 = (void *)(a1 + 104 + v151);
LABEL_220:
                *v152 |= v150;
                v146 += 4;
              }
              while (v147 != v146);
            }
            uint64_t v156 = v141[10];
            uint64_t v157 = *(unsigned int *)((char *)v218 + v156);
            long long v158 = (unsigned int *)((char *)v218 + v156 + v157);
            uint64_t v159 = *v158;
            if (v159)
            {
              unint64_t v160 = 0;
              uint64_t v161 = 4 * v159;
              uint64_t v162 = (char *)v218 + v156 + v157;
              do
              {
                uint64_t v167 = v158[v160 / 4 + 1];
                int v168 = &v162[v160 + v167 - *(int *)((char *)&v158[v160 / 4 + 1] + v167)];
                if (*((unsigned __int16 *)v168 + 2) < 7u)
                {
                  LODWORD(v163) = 0;
                }
                else
                {
                  uint64_t v163 = *((unsigned __int16 *)v168 + 5);
                  if (v163)
                  {
                    unint64_t v169 = *(unsigned int *)&v162[v160 + 4 + v167 + v163];
                    LODWORD(v163) = v169;
                    if ((v169 & 0x80000000) != 0)
                    {
                      uint64_t v164 = 1 << (v169 >> 20);
                      unint64_t v166 = &v214[(v169 & 0x7C000000) != 0];
                      goto LABEL_229;
                    }
                  }
                }
                uint64_t v164 = 1 << v163;
                uint64_t v165 = 8 * ((v163 & 0xFFFC0) != 0);
                *(void *)(a1 + 72 + v165) |= v164;
                unint64_t v166 = (void *)(a1 + 120 + v165);
LABEL_229:
                *v166 |= v164;
                v160 += 4;
              }
              while (v161 != v160);
            }
            uint64_t v170 = v141[6];
            uint64_t v171 = *(unsigned int *)((char *)v218 + v170);
            uint64_t v172 = (unsigned int *)((char *)v218 + v170 + v171);
            uint64_t v173 = *v172;
            if (v173)
            {
              unint64_t v174 = 0;
              uint64_t v175 = 4 * v173;
              uint64_t v176 = (char *)v218 + v170 + v171;
              do
              {
                uint64_t v180 = v172[v174 / 4 + 1];
                long long v181 = &v176[v174 + v180 - *(int *)((char *)&v172[v174 / 4 + 1] + v180)];
                if (*((unsigned __int16 *)v181 + 2) < 7u)
                {
                  LODWORD(v177) = 0;
                }
                else
                {
                  unint64_t v177 = *((unsigned __int16 *)v181 + 5);
                  if (v177)
                  {
                    unint64_t v177 = *(unsigned int *)&v176[v174 + 4 + v180 + v177];
                    if ((v177 & 0x80000000) != 0)
                    {
                      uint64_t v178 = 1 << (v177 >> 20);
                      BOOL v179 = (v177 & 0x7C000000) != 0;
                      goto LABEL_238;
                    }
                    LODWORD(v177) = v177 & 0xFFFFF;
                    if (v177 == 42) {
                      goto LABEL_239;
                    }
                  }
                }
                uint64_t v178 = 1 << v177;
                BOOL v179 = v177 > 0x3F;
                *(void *)(v217 + 8 * v179) |= v178;
LABEL_238:
                v214[v179] |= v178;
LABEL_239:
                v174 += 4;
              }
              while (v175 != v174);
            }
            int8x16_t v182 = *(int8x16_t *)(v7 + 160);
            if (*(_OWORD *)&v182 != 0)
            {
              *(int8x16_t *)(a1 + 56) = vorrq_s8(*(int8x16_t *)(a1 + 56), v182);
              *(int8x16_t *)(a1 + 104) = vorrq_s8(*(int8x16_t *)(a1 + 104), v182);
            }
            int8x16_t v183 = *(int8x16_t *)(v7 + 192);
            if (*(_OWORD *)&v183 != 0)
            {
              *(int8x16_t *)(a1 + 72) = vorrq_s8(*(int8x16_t *)(a1 + 72), v183);
              *(int8x16_t *)(a1 + 120) = vorrq_s8(*(int8x16_t *)(a1 + 120), v183);
            }
            uint64_t v184 = v141[12];
            uint64_t v185 = *(unsigned int *)((char *)v218 + v184);
            unint64_t v186 = (unsigned int *)((char *)v218 + v184 + v185);
            uint64_t v187 = *v186;
            if (!v187)
            {
LABEL_286:
              if (!*(unsigned char *)(a1 + 1231))
              {
                *(_OWORD *)(a1 + 200) = *(_OWORD *)(v7 + 424);
                *(_OWORD *)(a1 + 248) = *(_OWORD *)(v7 + 440);
                *(int8x16_t *)(a1 + 312) = vorrq_s8(*(int8x16_t *)(v7 + 440), *(int8x16_t *)(v7 + 424));
              }
              operator new();
            }
            unint64_t v188 = 0;
            uint64_t v189 = 4 * v187;
            uint64_t v190 = (char *)v218 + v184 + v185;
            while (2)
            {
              uint64_t v193 = *(unsigned int *)&v190[v188 + 4];
              uint64_t v194 = v193 - *(int *)((char *)&v186[v188 / 4 + 1] + v193);
              unint64_t v195 = &v190[v188 + v194];
              unsigned int v196 = *((unsigned __int16 *)v195 + 2);
              if (v196 < 7)
              {
                if (v196 >= 5) {
                  goto LABEL_259;
                }
              }
              else
              {
                uint64_t v197 = *((unsigned __int16 *)v195 + 5);
                if (v197)
                {
                  unsigned int v198 = *(_DWORD *)&v190[v188 + 4 + v193 + v197];
                  goto LABEL_260;
                }
LABEL_259:
                unsigned int v198 = 0;
LABEL_260:
                uint64_t v199 = *(unsigned __int16 *)&v190[v188 + 8 + v194];
                if (v199)
                {
                  int v200 = v190[v188 + 4 + v193 + v199];
                  __n128 v192 = (void *)(a1 + 184);
                  uint64_t v191 = 1;
                  switch(v190[v188 + 4 + v193 + v199])
                  {
                    case 11:
                    case 12:
                    case 13:
                    case 16:
                    case 17:
                    case 62:
                    case 93:
                    case 97:
                    case 98:
                    case 113:
                      if ((v198 & 0x80000000) != 0)
                      {
                        uint64_t v191 = 1 << (v198 >> 20);
                        __n128 v192 = &v214[(v198 & 0x7C000000) != 0];
                        goto LABEL_253;
                      }
                      if ((v198 & 0xFFF00000) != 0x400000)
                      {
                        if (v200 == 113 || v200 == 98) {
                          uint64_t v202 = 32;
                        }
                        else {
                          uint64_t v202 = 16;
                        }
                        uint64_t v191 = 1 << v198;
                        uint64_t v203 = a1 + v202 + 8 * ((v198 & 0xFFFC0) != 0);
                        *(void *)(v203 + 136) |= 1 << v198;
                        __n128 v192 = (void *)(v203 + 88);
LABEL_253:
                        *v192 |= v191;
                      }
                      break;
                    case 24:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 4;
                      goto LABEL_253;
                    case 25:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 8;
                      goto LABEL_253;
                    case 27:
                      goto LABEL_253;
                    case 28:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 2;
                      goto LABEL_253;
                    case 59:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 16;
                      goto LABEL_253;
                    case 60:
                    case 61:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 32;
                      goto LABEL_253;
                    case 75:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 64;
                      goto LABEL_253;
                    case 84:
                    case 85:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 128;
                      goto LABEL_253;
                    case 108:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 256;
                      goto LABEL_253;
                    case 109:
                    case 110:
                      uint64_t v191 = 1 << v198;
                      uint64_t v204 = (v198 & 0xFFFC0) != 0;
                      *(void *)(a1 + 136 + v204 * 8) |= 1 << v198;
                      __n128 v192 = &v214[v204];
                      goto LABEL_253;
                    case 111:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 512;
                      goto LABEL_253;
                    case 112:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 1024;
                      goto LABEL_253;
                    case 118:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 2048;
                      goto LABEL_253;
                    case 119:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 4096;
                      goto LABEL_253;
                    case 120:
                      __n128 v192 = (void *)(a1 + 184);
                      uint64_t v191 = 0x2000;
                      goto LABEL_253;
                    case -117:
                      uint64_t v191 = 1 << v198;
                      uint64_t v205 = (v198 & 0xFFFC0) != 0;
                      *(void *)(v217 + v205 * 8) |= 1 << v198;
                      __n128 v192 = &v214[v205];
                      goto LABEL_253;
                    default:
                      break;
                  }
                }
              }
              v188 += 4;
              if (v189 == v188) {
                goto LABEL_286;
              }
              continue;
            }
          }
LABEL_201:
          *(void *)(v217 + 464) = &__dst[v221 + v80 + v222];
          __n128 v135 = (unsigned __int16 *)((char *)v25 - *v25);
          if (*v135 >= 0xBu && (uint64_t v136 = v135[5]) != 0)
          {
            unint64_t v137 = (int *)((char *)v25 + v136 + *(unsigned int *)((char *)v25 + v136));
            if (!a7) {
              goto LABEL_207;
            }
LABEL_206:
            *(void *)(a1 + 992) = v85 + v222 + v215;
          }
          else
          {
            unint64_t v137 = 0;
            if (a7) {
              goto LABEL_206;
            }
          }
LABEL_207:
          if (v137 && *v137)
          {
            unint64_t v138 = 0;
            uint64_t v139 = 1;
            do
            {
              __n128 v140 = (void *)(*(void *)(v217 + 464) + 8 * (((v139 * 4) - 4) & 0xFFFFFFFC));
              AGX::SamplerDescriptor::SamplerDescriptor((uint64_t)&v225, (_DWORD *)((char *)&v137[v139] + v137[v139]));
              AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(v229.n128_u64, (uint64_t)&v225);
              *__n128 v140 = v229.n128_u64[0];
              if (v228 < 0) {
                operator delete(__p);
              }
              std::vector<AGXG17FamilyTexture *>::push_back[abi:nn180100]((uint64_t)v216, (uint64_t)v140);
              ++v138;
              ++v139;
            }
            while (v138 < *v137);
            uint64_t v10 = v208;
          }
          goto LABEL_216;
        }
      }
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
      if ((v228 & 0x80000000) == 0) {
        goto LABEL_159;
      }
LABEL_190:
      operator delete(__p);
      goto LABEL_159;
    }
    if (v39)
    {
      long long v44 = (unsigned int **)(a3 + 128);
      if (a3[59]) {
        long long v44 = (unsigned int **)(a3 + 58);
      }
    }
    else
    {
      long long v44 = (unsigned int **)(a3 + 128);
    }
    long long v45 = 0;
    if (*v44 && v44[1]) {
      long long v45 = (int *)((char *)*v44 + **v44);
    }
    int v46 = (unsigned __int16 *)((char *)v45 - *v45);
    if (*v46 >= 7u && (uint64_t v47 = v46[3]) != 0) {
      uint64_t v48 = (int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
    }
    else {
      uint64_t v48 = 0;
    }
    long long v49 = (unsigned __int16 *)((char *)v48 - *v48);
    if (*v49 >= 0xBu)
    {
      uint64_t v50 = v49[5];
      if (v50)
      {
        int v43 = *(int *)((char *)v48 + v50);
        goto LABEL_71;
      }
    }
  }
  int v43 = 0;
  goto LABEL_71;
}

void sub_242B1115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (__p) {
    operator delete(__p);
  }
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ExecuteIndirectState::~ExecuteIndirectState(a10);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources(a12);
  long long v49 = *a28;
  if (*a28)
  {
    *(void *)(a31 + 728) = v49;
    operator delete(v49);
  }
  if (*(char *)(a31 + 487) < 0) {
    operator delete(*a17);
  }
  if (*(char *)(a31 + 463) < 0) {
    operator delete(*a18);
  }
  uint64_t v50 = (void **)(a29 + 336);
  if (*(char *)(a31 + 439) < 0)
  {
    operator delete(*a19);
    long long v51 = *v50;
    if (*v50) {
      goto LABEL_11;
    }
  }
  else
  {
    long long v51 = *v50;
    if (*v50)
    {
LABEL_11:
      *(void *)(a31 + 384) = v51;
      operator delete(v51);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::IntersectionArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v3 = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v3;
    case 2uLL:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v4 = *(void *)(a1 + 32);
      long long v5 = *(_OWORD *)a1;
      long long v6 = *(_OWORD *)(a1 + 16);
      int v7 = *(_DWORD *)(a2 - 8);
      long long v8 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a2 - 24) = v6;
      *(_OWORD *)(a2 - 40) = v5;
      uint64_t v3 = 1;
      *(_DWORD *)(a2 - 8) = v4;
      return v3;
    case 3uLL:
      uint64_t v18 = a1 + 40;
      unint64_t v19 = (_OWORD *)(a2 - 40);
      unint64_t v20 = *(void *)(a1 + 64);
      unint64_t v21 = *(void *)(a2 - 16);
      if (v20 >= *(void *)(a1 + 24))
      {
        if (v21 >= v20) {
          return 1;
        }
        uint64_t v43 = *(void *)(a1 + 72);
        long long v44 = *(_OWORD *)v18;
        long long v45 = *(_OWORD *)(a1 + 56);
        int v46 = *(_DWORD *)(a2 - 8);
        long long v47 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v47;
        *(_DWORD *)(a1 + 72) = v46;
        *unint64_t v19 = v44;
        *(_OWORD *)(a2 - 24) = v45;
        *(_DWORD *)(a2 - 8) = v43;
        goto LABEL_42;
      }
      if (v21 >= v20)
      {
        uint64_t v73 = *(void *)(a1 + 32);
        long long v75 = *(_OWORD *)a1;
        long long v74 = *(_OWORD *)(a1 + 16);
        long long v76 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *(_OWORD *)v18;
        *(_OWORD *)(a1 + 16) = v76;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *(_OWORD *)uint64_t v18 = v75;
        *(_OWORD *)(a1 + 56) = v74;
        *(_DWORD *)(a1 + 72) = v73;
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 64)) {
          return 1;
        }
        uint64_t v77 = *(void *)(a1 + 72);
        long long v78 = *(_OWORD *)v18;
        long long v79 = *(_OWORD *)(a1 + 56);
        int v80 = *(_DWORD *)(a2 - 8);
        long long v81 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)uint64_t v18 = *v19;
        *(_OWORD *)(a1 + 56) = v81;
        *(_DWORD *)(a1 + 72) = v80;
        *unint64_t v19 = v78;
        *(_OWORD *)(a2 - 24) = v79;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v77;
      }
      else
      {
        uint64_t v22 = *(void *)(a1 + 32);
        long long v23 = *(_OWORD *)a1;
        long long v24 = *(_OWORD *)(a1 + 16);
        int v25 = *(_DWORD *)(a2 - 8);
        long long v26 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v19;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = v25;
        *unint64_t v19 = v23;
        *(_OWORD *)(a2 - 24) = v24;
        uint64_t v3 = 1;
        *(_DWORD *)(a2 - 8) = v22;
      }
      return v3;
    case 4uLL:
      uint64_t v18 = a1 + 40;
      long long v27 = (_OWORD *)(a1 + 80);
      unint64_t v28 = *(void *)(a1 + 64);
      unint64_t v29 = *(void *)(a1 + 24);
      unint64_t v30 = *(void *)(a1 + 104);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          uint64_t v48 = *(void *)(a1 + 72);
          long long v50 = *(_OWORD *)v18;
          long long v49 = *(_OWORD *)(a1 + 56);
          long long v51 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v51;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *long long v27 = v50;
          *(_OWORD *)(a1 + 96) = v49;
          *(_DWORD *)(a1 + 112) = v48;
          if (*(void *)(a1 + 64) < v29)
          {
            uint64_t v52 = *(void *)(a1 + 32);
            long long v54 = *(_OWORD *)a1;
            long long v53 = *(_OWORD *)(a1 + 16);
            long long v55 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *(_OWORD *)v18;
            *(_OWORD *)(a1 + 16) = v55;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *(_OWORD *)uint64_t v18 = v54;
            *(_OWORD *)(a1 + 56) = v53;
            *(_DWORD *)(a1 + 72) = v52;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          uint64_t v82 = *(void *)(a1 + 32);
          long long v84 = *(_OWORD *)a1;
          long long v83 = *(_OWORD *)(a1 + 16);
          long long v85 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)a1 = *(_OWORD *)v18;
          *(_OWORD *)(a1 + 16) = v85;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
          *(_OWORD *)uint64_t v18 = v84;
          *(_OWORD *)(a1 + 56) = v83;
          *(_DWORD *)(a1 + 72) = v82;
          if (v30 >= *(void *)(a1 + 64)) {
            goto LABEL_39;
          }
          uint64_t v31 = *(void *)(a1 + 72);
          long long v33 = *(_OWORD *)v18;
          long long v32 = *(_OWORD *)(a1 + 56);
          long long v86 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)uint64_t v18 = *v27;
          *(_OWORD *)(a1 + 56) = v86;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
        }
        else
        {
          uint64_t v31 = *(void *)(a1 + 32);
          long long v33 = *(_OWORD *)a1;
          long long v32 = *(_OWORD *)(a1 + 16);
          long long v34 = *(_OWORD *)(a1 + 96);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v34;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        }
        *long long v27 = v33;
        *(_OWORD *)(a1 + 96) = v32;
        *(_DWORD *)(a1 + 112) = v31;
      }
LABEL_39:
      if (*(void *)(a2 - 16) >= *(void *)(a1 + 104)) {
        return 1;
      }
      uint64_t v87 = a2 - 40;
      uint64_t v88 = *(void *)(a1 + 112);
      long long v89 = *v27;
      long long v90 = *(_OWORD *)(a1 + 96);
      int v91 = *(_DWORD *)(a2 - 8);
      long long v92 = *(_OWORD *)(a2 - 24);
      *long long v27 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 96) = v92;
      *(_DWORD *)(a1 + 112) = v91;
      *(_OWORD *)uint64_t v87 = v89;
      *(_OWORD *)(v87 + 16) = v90;
      *(_DWORD *)(v87 + 32) = v88;
      if (*(void *)(a1 + 104) >= *(void *)(a1 + 64)) {
        return 1;
      }
      uint64_t v93 = *(void *)(a1 + 72);
      long long v95 = *(_OWORD *)v18;
      long long v94 = *(_OWORD *)(a1 + 56);
      long long v96 = *(_OWORD *)(a1 + 96);
      *(_OWORD *)uint64_t v18 = *v27;
      *(_OWORD *)(a1 + 56) = v96;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
      *long long v27 = v95;
      *(_OWORD *)(a1 + 96) = v94;
      *(_DWORD *)(a1 + 112) = v93;
LABEL_42:
      if (*(void *)(a1 + 64) >= *(void *)(a1 + 24)) {
        return 1;
      }
      uint64_t v97 = *(void *)(a1 + 32);
      long long v99 = *(_OWORD *)a1;
      long long v98 = *(_OWORD *)(a1 + 16);
      long long v100 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 16) = v100;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v18 + 32);
      *(_OWORD *)uint64_t v18 = v99;
      *(_OWORD *)(v18 + 16) = v98;
      uint64_t v3 = 1;
      *(_DWORD *)(v18 + 32) = v97;
      return v3;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),void>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupDirectESL<false>(AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes> const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,unsigned long,unsigned long,AGCDeserializedReply const&,BOOL,BOOL)::UniformData *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 80;
      uint64_t v10 = (long long *)(a1 + 40);
      unint64_t v11 = *(void *)(a1 + 64);
      unint64_t v12 = *(void *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 104);
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          uint64_t v35 = *(void *)(a1 + 72);
          long long v37 = *v10;
          long long v36 = *(_OWORD *)(a1 + 56);
          long long v38 = *(_OWORD *)(a1 + 96);
          *uint64_t v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v38;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(a1 + 96) = v36;
          *(_DWORD *)(a1 + 112) = v35;
          if (*(void *)(a1 + 64) < v12)
          {
            uint64_t v39 = *(void *)(a1 + 32);
            long long v41 = *(_OWORD *)a1;
            long long v40 = *(_OWORD *)(a1 + 16);
            long long v42 = *(_OWORD *)(a1 + 56);
            *(_OWORD *)a1 = *v10;
            *(_OWORD *)(a1 + 16) = v42;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
            *uint64_t v10 = v41;
            *(_OWORD *)(a1 + 56) = v40;
            *(_DWORD *)(a1 + 72) = v39;
          }
        }
      }
      else if (v13 >= v11)
      {
        uint64_t v56 = *(void *)(a1 + 32);
        long long v58 = *(_OWORD *)a1;
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v59 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)a1 = *v10;
        *(_OWORD *)(a1 + 16) = v59;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 72);
        *uint64_t v10 = v58;
        *(_OWORD *)(a1 + 56) = v57;
        *(_DWORD *)(a1 + 72) = v56;
        if (v13 < *(void *)(a1 + 64))
        {
          uint64_t v60 = *(void *)(a1 + 72);
          long long v62 = *v10;
          long long v61 = *(_OWORD *)(a1 + 56);
          long long v63 = *(_OWORD *)(a1 + 96);
          *uint64_t v10 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 56) = v63;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 112);
          *(_OWORD *)uint64_t v9 = v62;
          *(_OWORD *)(a1 + 96) = v61;
          *(_DWORD *)(a1 + 112) = v60;
        }
      }
      else
      {
        uint64_t v14 = *(void *)(a1 + 32);
        long long v16 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)(a1 + 16);
        long long v17 = *(_OWORD *)(a1 + 96);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v17;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a1 + 112);
        *(_OWORD *)uint64_t v9 = v16;
        *(_OWORD *)(a1 + 96) = v15;
        *(_DWORD *)(a1 + 112) = v14;
      }
      uint64_t v64 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v65 = 0;
      int v66 = 0;
      break;
  }
  while (1)
  {
    unint64_t v68 = *(void *)(v64 + 24);
    if (v68 < *(void *)(v9 + 24))
    {
      long long v102 = *(_OWORD *)v64;
      uint64_t v103 = *(void *)(v64 + 16);
      int v69 = *(_DWORD *)(v64 + 32);
      uint64_t v70 = v65;
      do
      {
        uint64_t v71 = a1 + v70;
        long long v72 = *(_OWORD *)(a1 + v70 + 96);
        *(_OWORD *)(v71 + 120) = *(_OWORD *)(a1 + v70 + 80);
        *(_OWORD *)(v71 + 136) = v72;
        *(_DWORD *)(v71 + 152) = *(_DWORD *)(a1 + v70 + 112);
        if (v70 == -80)
        {
          uint64_t v67 = a1;
          goto LABEL_27;
        }
        v70 -= 40;
      }
      while (v68 < *(void *)(v71 + 64));
      uint64_t v67 = a1 + v70 + 120;
LABEL_27:
      *(_OWORD *)uint64_t v67 = v102;
      *(void *)(v67 + 16) = v103;
      *(void *)(v67 + 24) = v68;
      *(_DWORD *)(v67 + 32) = v69;
      if (++v66 == 8) {
        return v64 + 40 == a2;
      }
    }
    uint64_t v9 = v64;
    v65 += 40;
    v64 += 40;
    if (v64 == a2) {
      return 1;
    }
  }
}

void AGX::VertexProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VertexProgramVariantESLState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  long long v16 = *(_OWORD *)v11;
  uint64_t v17 = *(void *)(v11 + 16);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::ProgramVariantESLState(v10, 0, v12, v13, v14, v15, &v16, a10, a9);
}

void sub_242B13B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, void *__p)
{
  long long v16 = *(void **)(v14 - 136);
  if (v16)
  {
    *(void *)(v14 - 128) = v16;
    operator delete(v16);
  }
  std::unordered_map<std::string,unsigned int>::~unordered_map[abi:nn180100](a13);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(a12);
  _Unwind_Resume(a1);
}

void std::vector<DriverEIOffset>::__append(unint64_t *a1, unint64_t a2, const float *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  long long v8 = (float *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 2)
  {
    long long v16 = (const float *)(v7 + 4 * a2);
    unint64_t v17 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v17 >= 0xF && (v7 >= (unint64_t)(a3 + 1) || v16 <= a3))
    {
      unint64_t v18 = v17 + 1;
      float32x4_t v19 = vld1q_dup_f32(a3);
      unint64_t v20 = (float32x4_t *)(v7 + 16);
      uint64_t v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v20[-1] = v19;
        *unint64_t v20 = v19;
        v20 += 2;
        v21 -= 8;
      }
      while (v21);
      if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_19;
      }
      long long v8 = (float *)(v7 + 4 * (v18 & 0x7FFFFFFFFFFFFFF8));
    }
    do
      *v8++ = *a3;
    while (v8 != v16);
LABEL_19:
    a1[1] = (unint64_t)v16;
    return;
  }
  uint64_t v9 = (float *)*a1;
  uint64_t v10 = v7 - *a1;
  uint64_t v11 = v10 >> 2;
  unint64_t v12 = (v10 >> 2) + a2;
  if (v12 >> 62) {
    abort();
  }
  uint64_t v13 = v6 - (void)v9;
  if (v13 >> 1 > v12) {
    unint64_t v12 = v13 >> 1;
  }
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v12;
  }
  if (v14)
  {
    if (v14 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v15 = (char *)operator new(4 * v14);
  }
  else
  {
    uint64_t v15 = 0;
  }
  unint64_t v22 = (unint64_t)&v15[4 * v11];
  long long v23 = (char *)(v22 + 4 * a2);
  unint64_t v24 = (a2 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  int v25 = (char *)v22;
  if (v24 < 0x13) {
    goto LABEL_28;
  }
  if (v22 < (unint64_t)(a3 + 1))
  {
    int v25 = &v15[4 * v11];
    if (&v15[4 * a2 + v10] > (char *)a3) {
      goto LABEL_28;
    }
  }
  unint64_t v26 = v24 + 1;
  float32x4_t v27 = vld1q_dup_f32(a3);
  unint64_t v28 = (float32x4_t *)&v15[4 * v11 + 16];
  uint64_t v29 = v26 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v28[-1] = v27;
    *unint64_t v28 = v27;
    v28 += 2;
    v29 -= 8;
  }
  while (v29);
  if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
  {
    int v25 = (char *)(v22 + 4 * (v26 & 0x7FFFFFFFFFFFFFF8));
    do
    {
LABEL_28:
      *(float *)int v25 = *a3;
      v25 += 4;
    }
    while (v25 != v23);
    uint64_t v9 = (float *)*a1;
  }
  if ((float *)v7 != v9)
  {
    unint64_t v30 = v7 - (void)v9 - 4;
    if (v30 < 0x2C) {
      goto LABEL_48;
    }
    if (v7 - (unint64_t)&v15[v10] < 0x20) {
      goto LABEL_48;
    }
    uint64_t v31 = (v30 >> 2) + 1;
    long long v8 = (float *)(v7 - 4 * (v31 & 0x7FFFFFFFFFFFFFF8));
    long long v32 = &v15[4 * v11 - 16];
    long long v33 = (long long *)(v7 - 16);
    uint64_t v34 = v31 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v35 = *v33;
      *((_OWORD *)v32 - 1) = *(v33 - 1);
      *(_OWORD *)long long v32 = v35;
      v32 -= 32;
      v33 -= 2;
      v34 -= 8;
    }
    while (v34);
    v22 -= 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
    if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
    {
      long long v8 = v9;
    }
    else
    {
LABEL_48:
      do
      {
        int v36 = *((_DWORD *)v8-- - 1);
        *(_DWORD *)(v22 - 4) = v36;
        v22 -= 4;
      }
      while (v8 != v9);
      long long v8 = (float *)*a1;
    }
  }
  *a1 = v22;
  a1[1] = (unint64_t)v23;
  a1[2] = (unint64_t)&v15[4 * v14];
  if (v8)
  {
    operator delete(v8);
  }
}

uint64_t AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  int v3 = *(_DWORD *)(*(void *)a1 + 168);
  {
    int v7 = v3;
    int v3 = v7;
    uint64_t v2 = a2;
    if (v8)
    {
      AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::skipEIESL = 0;
      int v3 = v7;
      uint64_t v2 = a2;
    }
  }
  if (AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::skipEIESL) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 20;
  }
  if (!v4
    && AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::isShaderExecuteIndirectCompatible(v2, v3 == 8))
  {
    operator new();
  }
  return 0;
}

void sub_242B1609C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&a53);
  if (!v53) {
    _Unwind_Resume(a1);
  }
  operator delete(v53);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    int v7 = (uint64_t *)a2;
  }
  else {
    int v7 = *(uint64_t **)a2;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v13 = *(char ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v14 + 1);
            if (v19 == v10)
            {
              uint64_t v20 = v14[39];
              if ((v20 & 0x80u) == 0) {
                uint64_t v21 = v14[39];
              }
              else {
                uint64_t v21 = *((void *)v14 + 3);
              }
              if (v21 == v8)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                    return v14;
                  }
                }
                else
                {
                  if (!v14[39]) {
                    return v14;
                  }
                  uint64_t v22 = 0;
                  while (v14[v22 + 16] == *((unsigned char *)v7 + v22))
                  {
                    if (v20 == ++v22) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v19 & (v11 - 1)) != v3)
            {
              goto LABEL_49;
            }
            unint64_t v14 = *(char **)v14;
            if (!v14) {
              goto LABEL_49;
            }
          }
        }
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == v10)
          {
            uint64_t v16 = v14[39];
            if ((v16 & 0x80u) == 0) {
              uint64_t v17 = v14[39];
            }
            else {
              uint64_t v17 = *((void *)v14 + 3);
            }
            if (v17 == v8)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v7, *((void *)v14 + 3))) {
                  return v14;
                }
              }
              else
              {
                if (!v14[39]) {
                  return v14;
                }
                uint64_t v18 = 0;
                while (v14[v18 + 16] == *((unsigned char *)v7 + v18))
                {
                  if (v16 == ++v18) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_49:
  long long v23 = (char *)operator new(0x30uLL);
  long long v38 = v23;
  *(void *)long long v23 = 0;
  *((void *)v23 + 1) = v10;
  unint64_t v24 = (std::string *)(v23 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v23 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v23 + 10) = 0;
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v11 || (float)(v26 * (float)v11) < v25)
  {
    BOOL v27 = 1;
    if (v11 >= 3) {
      BOOL v27 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v28 = v27 | (2 * v11);
    unint64_t v29 = vcvtps_u32_f32(v25 / v26);
    if (v28 <= v29) {
      size_t prime = v29;
    }
    else {
      size_t prime = v28;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v31 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v31) {
      goto LABEL_64;
    }
    if (prime < *(void *)&v31)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v31 < 3uLL || (uint8x8_t v33 = (uint8x8_t)vcnt_s8(v31), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (prime <= v32) {
        size_t prime = v32;
      }
      if (prime < *(void *)&v31) {
LABEL_64:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  long long v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *(void *)long long v38 = *v35;
    *long long v35 = v38;
  }
  else
  {
    *(void *)long long v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v38)
    {
      unint64_t v36 = *(void *)(*(void *)v38 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v36 >= v11) {
          v36 %= v11;
        }
      }
      else
      {
        v36 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v36) = v38;
    }
  }
  unint64_t v14 = v38;
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_242B166B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned int>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
__n128 std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(_OWORD *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  unint64_t v5 = *((void *)a2 + 4);
  unint64_t v6 = *((void *)a3 + 4);
  if (v5 >= *((void *)a1 + 4))
  {
    if (v6 < v5)
    {
      long long v11 = *a2;
      *(_OWORD *)unint64_t v44 = a2[1];
      *(_OWORD *)&v44[16] = a2[2];
      long long v12 = *(long long *)((char *)a3 + 28);
      long long v13 = a3[1];
      *a2 = *a3;
      a2[1] = v13;
      *(long long *)((char *)a2 + 28) = v12;
      *a3 = v11;
      a3[1] = *(_OWORD *)v44;
      __n128 result = *(__n128 *)&v44[12];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v44[12];
      if (*((void *)a2 + 4) < *((void *)a1 + 4))
      {
        long long v15 = *a1;
        *(_OWORD *)long long v45 = a1[1];
        *(_OWORD *)&v45[16] = a1[2];
        long long v16 = *(long long *)((char *)a2 + 28);
        long long v17 = a2[1];
        *a1 = *a2;
        a1[1] = v17;
        *(_OWORD *)((char *)a1 + 28) = v16;
        *a2 = v15;
        a2[1] = *(_OWORD *)v45;
        __n128 result = *(__n128 *)&v45[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v45[12];
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      long long v7 = a1[1];
      long long v8 = *a1;
      *(_DWORD *)long long v54 = HIDWORD(v7);
      *(_OWORD *)&v54[4] = a1[2];
      long long v9 = *(long long *)((char *)a3 + 28);
      long long v10 = a3[1];
      *a1 = *a3;
      a1[1] = v10;
      *(_OWORD *)((char *)a1 + 28) = v9;
LABEL_9:
      *a3 = v8;
      a3[1] = v7;
      __n128 result = *(__n128 *)v54;
      *(long long *)((char *)a3 + 28) = *(_OWORD *)v54;
      goto LABEL_10;
    }
    long long v18 = *a1;
    *(_OWORD *)unint64_t v46 = a1[1];
    *(_OWORD *)&v46[16] = a1[2];
    long long v19 = *(long long *)((char *)a2 + 28);
    long long v20 = a2[1];
    *a1 = *a2;
    a1[1] = v20;
    *(_OWORD *)((char *)a1 + 28) = v19;
    *a2 = v18;
    a2[1] = *(_OWORD *)v46;
    __n128 result = *(__n128 *)&v46[12];
    *(long long *)((char *)a2 + 28) = *(_OWORD *)&v46[12];
    if (*((void *)a3 + 4) < *((void *)a2 + 4))
    {
      long long v7 = a2[1];
      long long v8 = *a2;
      *(_DWORD *)long long v54 = HIDWORD(v7);
      *(_OWORD *)&v54[4] = a2[2];
      long long v21 = *(long long *)((char *)a3 + 28);
      long long v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      *(long long *)((char *)a2 + 28) = v21;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*((void *)a4 + 4) < *((void *)a3 + 4))
  {
    long long v23 = *a3;
    *(_OWORD *)__n128 v47 = a3[1];
    *(_OWORD *)&v47[16] = a3[2];
    long long v24 = *(long long *)((char *)a4 + 28);
    long long v25 = a4[1];
    *a3 = *a4;
    a3[1] = v25;
    *(long long *)((char *)a3 + 28) = v24;
    *a4 = v23;
    a4[1] = *(_OWORD *)v47;
    __n128 result = *(__n128 *)&v47[12];
    *(long long *)((char *)a4 + 28) = *(_OWORD *)&v47[12];
    if (*((void *)a3 + 4) < *((void *)a2 + 4))
    {
      long long v26 = *a2;
      *(_OWORD *)__n128 v48 = a2[1];
      *(_OWORD *)&v48[16] = a2[2];
      long long v27 = *(long long *)((char *)a3 + 28);
      long long v28 = a3[1];
      *a2 = *a3;
      a2[1] = v28;
      *(long long *)((char *)a2 + 28) = v27;
      *a3 = v26;
      a3[1] = *(_OWORD *)v48;
      __n128 result = *(__n128 *)&v48[12];
      *(long long *)((char *)a3 + 28) = *(_OWORD *)&v48[12];
      if (*((void *)a2 + 4) < *((void *)a1 + 4))
      {
        long long v29 = *a1;
        *(_OWORD *)__n128 v49 = a1[1];
        *(_OWORD *)&v49[16] = a1[2];
        long long v30 = *(long long *)((char *)a2 + 28);
        long long v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        *(_OWORD *)((char *)a1 + 28) = v30;
        *a2 = v29;
        a2[1] = *(_OWORD *)v49;
        __n128 result = *(__n128 *)&v49[12];
        *(long long *)((char *)a2 + 28) = *(_OWORD *)&v49[12];
      }
    }
  }
  if (*((void *)a5 + 4) < *((void *)a4 + 4))
  {
    long long v32 = *a4;
    *(_OWORD *)__n128 v50 = a4[1];
    *(_OWORD *)&v50[16] = a4[2];
    long long v33 = *(long long *)((char *)a5 + 28);
    long long v34 = a5[1];
    *a4 = *a5;
    a4[1] = v34;
    *(long long *)((char *)a4 + 28) = v33;
    *a5 = v32;
    a5[1] = *(_OWORD *)v50;
    __n128 result = *(__n128 *)&v50[12];
    *(long long *)((char *)a5 + 28) = *(_OWORD *)&v50[12];
    if (*((void *)a4 + 4) < *((void *)a3 + 4))
    {
      long long v35 = *a3;
      *(_OWORD *)__n128 v51 = a3[1];
      *(_OWORD *)&v51[16] = a3[2];
      long long v36 = *(long long *)((char *)a4 + 28);
      long long v37 = a4[1];
      *a3 = *a4;
      a3[1] = v37;
      *(long long *)((char *)a3 + 28) = v36;
      *a4 = v35;
      a4[1] = *(_OWORD *)v51;
      __n128 result = *(__n128 *)&v51[12];
      *(long long *)((char *)a4 + 28) = *(_OWORD *)&v51[12];
      if (*((void *)a3 + 4) < *((void *)a2 + 4))
      {
        long long v38 = *a2;
        *(_OWORD *)__n128 v52 = a2[1];
        *(_OWORD *)&v52[16] = a2[2];
        long long v39 = *(long long *)((char *)a3 + 28);
        long long v40 = a3[1];
        *a2 = *a3;
        a2[1] = v40;
        *(long long *)((char *)a2 + 28) = v39;
        *a3 = v38;
        a3[1] = *(_OWORD *)v52;
        __n128 result = *(__n128 *)&v52[12];
        *(long long *)((char *)a3 + 28) = *(_OWORD *)&v52[12];
        if (*((void *)a2 + 4) < *((void *)a1 + 4))
        {
          long long v41 = *a1;
          *(_OWORD *)__n128 v53 = a1[1];
          *(_OWORD *)&v53[16] = a1[2];
          long long v42 = *(long long *)((char *)a2 + 28);
          long long v43 = a2[1];
          *a1 = *a2;
          a1[1] = v43;
          *(_OWORD *)((char *)a1 + 28) = v42;
          *a2 = v41;
          a2[1] = *(_OWORD *)v53;
          __n128 result = *(__n128 *)&v53[12];
          *(long long *)((char *)a2 + 28) = *(_OWORD *)&v53[12];
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 32))
      {
        long long v3 = *(_OWORD *)a1;
        *(_OWORD *)unint64_t v68 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 32);
        long long v4 = *(_OWORD *)(a2 - 20);
        long long v5 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v5;
        *(_OWORD *)(a1 + 28) = v4;
        *(_OWORD *)(a2 - 48) = v3;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v68;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v68[12];
      }
      return 1;
    case 3uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      long long v15 = (long long *)(a2 - 48);
      unint64_t v16 = *(void *)(a1 + 80);
      unint64_t v17 = *(void *)(a2 - 16);
      if (v16 >= *(void *)(a1 + 32))
      {
        if (v17 >= v16) {
          return 1;
        }
        long long v32 = *(_OWORD *)(a1 + 64);
        long long v33 = *v14;
        *(_DWORD *)__n128 v82 = HIDWORD(v32);
        *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
        long long v34 = *(_OWORD *)(a2 - 20);
        long long v35 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v35;
        goto LABEL_44;
      }
      if (v17 >= v16)
      {
        long long v52 = *(_OWORD *)a1;
        *(_OWORD *)__n128 v75 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v75[16] = *(_OWORD *)(a1 + 32);
        long long v53 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v53;
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
        *unint64_t v14 = v52;
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v75;
        *(_OWORD *)(a1 + 76) = *(_OWORD *)&v75[12];
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 80)) {
          return 1;
        }
        long long v18 = *(_OWORD *)(a1 + 64);
        long long v19 = *v14;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 80);
        long long v54 = *(_OWORD *)(a2 - 20);
        long long v55 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v55;
        *(_OWORD *)(a1 + 76) = v54;
      }
      else
      {
        long long v18 = *(_OWORD *)(a1 + 16);
        long long v19 = *(_OWORD *)a1;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 32);
        long long v20 = *(_OWORD *)(a2 - 20);
        long long v21 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v21;
        *(_OWORD *)(a1 + 28) = v20;
      }
      *long long v15 = v19;
      *(_OWORD *)(a2 - 32) = v18;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)v80;
      return 1;
    case 4uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      long long v15 = (long long *)(a1 + 96);
      unint64_t v22 = *(void *)(a1 + 80);
      unint64_t v23 = *(void *)(a1 + 32);
      unint64_t v24 = *(void *)(a1 + 128);
      if (v22 >= v23)
      {
        if (v24 < v22)
        {
          long long v36 = *v14;
          *(_OWORD *)uint64_t v71 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v71[16] = *(_OWORD *)(a1 + 80);
          long long v37 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *long long v15 = v36;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v71;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v71[12];
          if (*(void *)(a1 + 80) < v23)
          {
            long long v38 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v72 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v72[16] = *(_OWORD *)(a1 + 32);
            long long v39 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v39;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *unint64_t v14 = v38;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v72;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v72[12];
          }
        }
      }
      else
      {
        if (v24 >= v22)
        {
          long long v56 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v76 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v76[16] = *(_OWORD *)(a1 + 32);
          long long v57 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v57;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *unint64_t v14 = v56;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v76;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v76[12];
          if (v24 >= *(void *)(a1 + 80)) {
            goto LABEL_41;
          }
          long long v25 = *(_OWORD *)(a1 + 64);
          long long v26 = *v14;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 80);
          long long v58 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v58;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v25 = *(_OWORD *)(a1 + 16);
          long long v26 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 32);
          long long v27 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v27;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *long long v15 = v26;
        *(_OWORD *)(a1 + 112) = v25;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v81;
      }
LABEL_41:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 128))
      {
        __n128 v59 = (_OWORD *)(a2 - 48);
        long long v60 = *v15;
        *(_OWORD *)__n128 v77 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 128);
        long long v61 = *(_OWORD *)(a2 - 20);
        long long v62 = *(_OWORD *)(a2 - 32);
        *long long v15 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 112) = v62;
        *(_OWORD *)(a1 + 124) = v61;
        *__n128 v59 = v60;
        v59[1] = *(_OWORD *)v77;
        *(_OWORD *)((char *)v59 + 28) = *(_OWORD *)&v77[12];
        if (*(void *)(a1 + 128) < *(void *)(a1 + 80))
        {
          long long v32 = *(_OWORD *)(a1 + 64);
          long long v33 = *v14;
          *(_DWORD *)__n128 v82 = HIDWORD(v32);
          *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
          long long v63 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v63;
          long long v34 = *(_OWORD *)(a1 + 124);
LABEL_44:
          *(long long *)((char *)v14 + 28) = v34;
          *long long v15 = v33;
          v15[1] = v32;
          *(long long *)((char *)v15 + 28) = *(_OWORD *)v82;
          if (*(void *)(a1 + 80) < *(void *)(a1 + 32))
          {
            long long v64 = *(_OWORD *)a1;
            *(_OWORD *)__n128 v78 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v78[16] = *(_OWORD *)(a1 + 32);
            long long v65 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v65;
            *(_OWORD *)(a1 + 28) = *(long long *)((char *)v14 + 28);
            *unint64_t v14 = v64;
            v14[1] = *(_OWORD *)v78;
            *(long long *)((char *)v14 + 28) = *(_OWORD *)&v78[12];
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), (long long *)(a1 + 144), (long long *)(a2 - 48));
      return 1;
    default:
      uint64_t v6 = a1 + 96;
      long long v7 = (long long *)(a1 + 48);
      unint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 32);
      unint64_t v10 = *(void *)(a1 + 128);
      if (v8 >= v9)
      {
        if (v10 < v8)
        {
          long long v28 = *v7;
          *(_OWORD *)unint64_t v69 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v69[16] = *(_OWORD *)(a1 + 80);
          long long v29 = *(_OWORD *)(a1 + 112);
          *long long v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v29;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *(_OWORD *)uint64_t v6 = v28;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v69;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v69[12];
          if (*(void *)(a1 + 80) < v9)
          {
            long long v30 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v70 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v70[16] = *(_OWORD *)(a1 + 32);
            long long v31 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v7;
            *(_OWORD *)(a1 + 16) = v31;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *long long v7 = v30;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v70;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v70[12];
          }
        }
      }
      else
      {
        if (v10 >= v8)
        {
          long long v40 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v73 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 32);
          long long v41 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v7;
          *(_OWORD *)(a1 + 16) = v41;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *long long v7 = v40;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v73;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v73[12];
          if (v10 >= *(void *)(a1 + 80)) {
            goto LABEL_25;
          }
          long long v11 = *(_OWORD *)(a1 + 64);
          long long v12 = *v7;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 80);
          long long v42 = *(_OWORD *)(a1 + 112);
          *long long v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v42;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v11 = *(_OWORD *)(a1 + 16);
          long long v12 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 32);
          long long v13 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *(_OWORD *)uint64_t v6 = v12;
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v79;
      }
LABEL_25:
      uint64_t v43 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v44 = 0;
      int v45 = 0;
      break;
  }
  while (1)
  {
    unint64_t v47 = *(void *)(v43 + 32);
    if (v47 < *(void *)(v6 + 32))
    {
      long long v67 = *(_OWORD *)v43;
      long long v74 = *(_OWORD *)(v43 + 16);
      int v48 = *(_DWORD *)(v43 + 40);
      uint64_t v49 = v44;
      do
      {
        uint64_t v50 = a1 + v49;
        long long v51 = *(_OWORD *)(a1 + v49 + 112);
        *(_OWORD *)(v50 + 144) = *(_OWORD *)(a1 + v49 + 96);
        *(_OWORD *)(v50 + 160) = v51;
        *(_OWORD *)(v50 + 172) = *(_OWORD *)(a1 + v49 + 124);
        if (v49 == -96)
        {
          uint64_t v46 = a1;
          goto LABEL_28;
        }
        v49 -= 48;
      }
      while (v47 < *(void *)(v50 + 80));
      uint64_t v46 = a1 + v49 + 144;
LABEL_28:
      *(_OWORD *)uint64_t v46 = v67;
      *(_OWORD *)(v46 + 16) = v74;
      *(void *)(v46 + 32) = v47;
      *(_DWORD *)(v46 + 40) = v48;
      if (++v45 == 8) {
        return v43 + 48 == a2;
      }
    }
    uint64_t v6 = v43;
    v44 += 48;
    v43 += 48;
    if (v43 == a2) {
      return 1;
    }
  }
}

void AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::FragmentProgramVariantESLState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1);
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v16 = *(_OWORD *)v11;
  uint64_t v17 = *(void *)(v11 + 16);
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::ProgramVariantESLState(v10, v12, v13, v14, v15, &v16, a10, a9);
}

void sub_242B1B298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)&a32);
  if (a27)
  {
    operator delete(a27);
    long long v33 = (void *)STACK[0x2888];
    if (!STACK[0x2888])
    {
LABEL_3:
      long long v34 = (void *)STACK[0x28A8];
      if (!STACK[0x28A8]) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    long long v33 = (void *)STACK[0x2888];
    if (!STACK[0x2888]) {
      goto LABEL_3;
    }
  }
  STACK[0x2890] = (unint64_t)v33;
  operator delete(v33);
  long long v34 = (void *)STACK[0x28A8];
  if (!STACK[0x28A8])
  {
LABEL_4:
    long long v35 = (void *)STACK[0x28C0];
    if (!STACK[0x28C0]) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  operator delete(v34);
  long long v35 = (void *)STACK[0x28C0];
  if (!STACK[0x28C0])
  {
LABEL_6:
    if (STACK[0x28D8]) {
      operator delete((void *)STACK[0x28D8]);
    }
    AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState(a28);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(v35);
  goto LABEL_6;
}

_DWORD *std::vector<FragmentShaderIteration>::__emplace_back_slow_path<AGCCodeGenerator::FragmentShaderIteration const*>(void **a1, int *a2)
{
  long long v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 2) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 2);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 2) >= 0x666666666666666) {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xCCCCCCCCCCCCCCCLL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v9 = operator new(20 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = &v9[5 * v4];
  uint64_t v11 = (unsigned __int16 *)((char *)a2 - *a2);
  unsigned int v12 = *v11;
  if (v12 <= 4)
  {
    *uint64_t v10 = 0;
LABEL_27:
    long long v21 = (char *)&v9[5 * v4];
    *((_DWORD *)v21 + 1) = 0;
    long long v16 = v21 + 8;
LABEL_28:
    *long long v16 = 0;
    uint64_t v18 = &v9[5 * v4 + 3];
LABEL_29:
    LODWORD(v20) = 0;
    *uint64_t v18 = 0;
    goto LABEL_30;
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    LODWORD(v13) = *((char *)a2 + v13);
  }
  *uint64_t v10 = v13;
  if (v12 < 7) {
    goto LABEL_27;
  }
  uint64_t v14 = v11[3];
  if (v11[3]) {
    LODWORD(v14) = *(int *)((char *)a2 + v14);
  }
  uint64_t v15 = (char *)&v9[5 * v4];
  *((_DWORD *)v15 + 1) = v14;
  long long v16 = v15 + 8;
  if (v12 < 9) {
    goto LABEL_28;
  }
  uint64_t v17 = v11[4];
  if (v11[4]) {
    LODWORD(v17) = *(int *)((char *)a2 + v17);
  }
  *long long v16 = v17;
  uint64_t v18 = &v9[5 * v4 + 3];
  if (v12 < 0xB) {
    goto LABEL_29;
  }
  uint64_t v19 = v11[5];
  if (v11[5]) {
    LODWORD(v19) = *(int *)((char *)a2 + v19);
  }
  *uint64_t v18 = v19;
  if (v12 < 0xD)
  {
    LODWORD(v20) = 0;
  }
  else
  {
    uint64_t v20 = v11[6];
    if (v20) {
      LODWORD(v20) = *(int *)((char *)a2 + v20);
    }
  }
LABEL_30:
  v9[5 * v4 + 4] = v20;
  unint64_t v22 = v10 + 5;
  if (v2 != v3)
  {
    do
    {
      long long v23 = *(_OWORD *)(v2 - 20);
      *(v10 - 1) = *((_DWORD *)v2 - 1);
      *(_OWORD *)(v10 - 5) = v23;
      v10 -= 5;
      v2 -= 20;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v22;
  a1[2] = &v9[5 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v22;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 32))
      {
        long long v3 = *(_OWORD *)a1;
        *(_OWORD *)unint64_t v68 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 32);
        long long v4 = *(_OWORD *)(a2 - 20);
        long long v5 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v5;
        *(_OWORD *)(a1 + 28) = v4;
        *(_OWORD *)(a2 - 48) = v3;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v68;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v68[12];
      }
      return 1;
    case 3uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      uint64_t v15 = (long long *)(a2 - 48);
      unint64_t v16 = *(void *)(a1 + 80);
      unint64_t v17 = *(void *)(a2 - 16);
      if (v16 >= *(void *)(a1 + 32))
      {
        if (v17 >= v16) {
          return 1;
        }
        long long v32 = *(_OWORD *)(a1 + 64);
        long long v33 = *v14;
        *(_DWORD *)__n128 v82 = HIDWORD(v32);
        *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
        long long v34 = *(_OWORD *)(a2 - 20);
        long long v35 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v35;
        goto LABEL_44;
      }
      if (v17 >= v16)
      {
        long long v52 = *(_OWORD *)a1;
        *(_OWORD *)__n128 v75 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v75[16] = *(_OWORD *)(a1 + 32);
        long long v53 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v53;
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
        *unint64_t v14 = v52;
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v75;
        *(_OWORD *)(a1 + 76) = *(_OWORD *)&v75[12];
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 80)) {
          return 1;
        }
        long long v18 = *(_OWORD *)(a1 + 64);
        long long v19 = *v14;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 80);
        long long v54 = *(_OWORD *)(a2 - 20);
        long long v55 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v55;
        *(_OWORD *)(a1 + 76) = v54;
      }
      else
      {
        long long v18 = *(_OWORD *)(a1 + 16);
        long long v19 = *(_OWORD *)a1;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 32);
        long long v20 = *(_OWORD *)(a2 - 20);
        long long v21 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v21;
        *(_OWORD *)(a1 + 28) = v20;
      }
      *uint64_t v15 = v19;
      *(_OWORD *)(a2 - 32) = v18;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)v80;
      return 1;
    case 4uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      uint64_t v15 = (long long *)(a1 + 96);
      unint64_t v22 = *(void *)(a1 + 80);
      unint64_t v23 = *(void *)(a1 + 32);
      unint64_t v24 = *(void *)(a1 + 128);
      if (v22 >= v23)
      {
        if (v24 < v22)
        {
          long long v36 = *v14;
          *(_OWORD *)uint64_t v71 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v71[16] = *(_OWORD *)(a1 + 80);
          long long v37 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *uint64_t v15 = v36;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v71;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v71[12];
          if (*(void *)(a1 + 80) < v23)
          {
            long long v38 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v72 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v72[16] = *(_OWORD *)(a1 + 32);
            long long v39 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v39;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *unint64_t v14 = v38;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v72;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v72[12];
          }
        }
      }
      else
      {
        if (v24 >= v22)
        {
          long long v56 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v76 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v76[16] = *(_OWORD *)(a1 + 32);
          long long v57 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v57;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *unint64_t v14 = v56;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v76;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v76[12];
          if (v24 >= *(void *)(a1 + 80)) {
            goto LABEL_41;
          }
          long long v25 = *(_OWORD *)(a1 + 64);
          long long v26 = *v14;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 80);
          long long v58 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v58;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v25 = *(_OWORD *)(a1 + 16);
          long long v26 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 32);
          long long v27 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v27;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *uint64_t v15 = v26;
        *(_OWORD *)(a1 + 112) = v25;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v81;
      }
LABEL_41:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 128))
      {
        __n128 v59 = (_OWORD *)(a2 - 48);
        long long v60 = *v15;
        *(_OWORD *)__n128 v77 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 128);
        long long v61 = *(_OWORD *)(a2 - 20);
        long long v62 = *(_OWORD *)(a2 - 32);
        *uint64_t v15 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 112) = v62;
        *(_OWORD *)(a1 + 124) = v61;
        *__n128 v59 = v60;
        v59[1] = *(_OWORD *)v77;
        *(_OWORD *)((char *)v59 + 28) = *(_OWORD *)&v77[12];
        if (*(void *)(a1 + 128) < *(void *)(a1 + 80))
        {
          long long v32 = *(_OWORD *)(a1 + 64);
          long long v33 = *v14;
          *(_DWORD *)__n128 v82 = HIDWORD(v32);
          *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
          long long v63 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v63;
          long long v34 = *(_OWORD *)(a1 + 124);
LABEL_44:
          *(long long *)((char *)v14 + 28) = v34;
          *uint64_t v15 = v33;
          v15[1] = v32;
          *(long long *)((char *)v15 + 28) = *(_OWORD *)v82;
          if (*(void *)(a1 + 80) < *(void *)(a1 + 32))
          {
            long long v64 = *(_OWORD *)a1;
            *(_OWORD *)__n128 v78 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v78[16] = *(_OWORD *)(a1 + 32);
            long long v65 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v65;
            *(_OWORD *)(a1 + 28) = *(long long *)((char *)v14 + 28);
            *unint64_t v14 = v64;
            v14[1] = *(_OWORD *)v78;
            *(long long *)((char *)v14 + 28) = *(_OWORD *)&v78[12];
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), (long long *)(a1 + 144), (long long *)(a2 - 48));
      return 1;
    default:
      uint64_t v6 = a1 + 96;
      long long v7 = (long long *)(a1 + 48);
      unint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 32);
      unint64_t v10 = *(void *)(a1 + 128);
      if (v8 >= v9)
      {
        if (v10 < v8)
        {
          long long v28 = *v7;
          *(_OWORD *)unint64_t v69 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v69[16] = *(_OWORD *)(a1 + 80);
          long long v29 = *(_OWORD *)(a1 + 112);
          *long long v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v29;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *(_OWORD *)uint64_t v6 = v28;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v69;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v69[12];
          if (*(void *)(a1 + 80) < v9)
          {
            long long v30 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v70 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v70[16] = *(_OWORD *)(a1 + 32);
            long long v31 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v7;
            *(_OWORD *)(a1 + 16) = v31;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *long long v7 = v30;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v70;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v70[12];
          }
        }
      }
      else
      {
        if (v10 >= v8)
        {
          long long v40 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v73 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 32);
          long long v41 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v7;
          *(_OWORD *)(a1 + 16) = v41;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *long long v7 = v40;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v73;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v73[12];
          if (v10 >= *(void *)(a1 + 80)) {
            goto LABEL_25;
          }
          long long v11 = *(_OWORD *)(a1 + 64);
          long long v12 = *v7;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 80);
          long long v42 = *(_OWORD *)(a1 + 112);
          *long long v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v42;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v11 = *(_OWORD *)(a1 + 16);
          long long v12 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 32);
          long long v13 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *(_OWORD *)uint64_t v6 = v12;
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v79;
      }
LABEL_25:
      uint64_t v43 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v44 = 0;
      int v45 = 0;
      break;
  }
  while (1)
  {
    unint64_t v47 = *(void *)(v43 + 32);
    if (v47 < *(void *)(v6 + 32))
    {
      long long v67 = *(_OWORD *)v43;
      long long v74 = *(_OWORD *)(v43 + 16);
      int v48 = *(_DWORD *)(v43 + 40);
      uint64_t v49 = v44;
      do
      {
        uint64_t v50 = a1 + v49;
        long long v51 = *(_OWORD *)(a1 + v49 + 112);
        *(_OWORD *)(v50 + 144) = *(_OWORD *)(a1 + v49 + 96);
        *(_OWORD *)(v50 + 160) = v51;
        *(_OWORD *)(v50 + 172) = *(_OWORD *)(a1 + v49 + 124);
        if (v49 == -96)
        {
          uint64_t v46 = a1;
          goto LABEL_28;
        }
        v49 -= 48;
      }
      while (v47 < *(void *)(v50 + 80));
      uint64_t v46 = a1 + v49 + 144;
LABEL_28:
      *(_OWORD *)uint64_t v46 = v67;
      *(_OWORD *)(v46 + 16) = v74;
      *(void *)(v46 + 32) = v47;
      *(_DWORD *)(v46 + 40) = v48;
      if (++v45 == 8) {
        return v43 + 48 == a2;
      }
    }
    uint64_t v6 = v43;
    v44 += 48;
    v43 += 48;
    if (v43 == a2) {
      return 1;
    }
  }
}

uint64_t ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::updateVaryingTable(uint64_t a1, void *a2, uint64_t a3, char **a4, void *a5, uint64_t a6)
{
  uint64_t v8 = *a2;
  unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
  if (a2[1] == *a2)
  {
    BOOL v18 = 0;
    int v20 = 0;
    int v94 = 0;
    int v19 = 1;
    goto LABEL_20;
  }
  uint64_t v10 = 0;
  char v11 = 0;
  char v12 = 0;
  char v13 = 0;
  unsigned int v14 = 0;
  do
  {
    while (1)
    {
      int v17 = *(_DWORD *)(v8 + 20 * v10);
      if (v17 == 8) {
        break;
      }
      if (v17 != 6) {
        goto LABEL_7;
      }
      char v11 = 1;
      uint64_t v10 = ++v14;
      if (v9 <= v14) {
        goto LABEL_13;
      }
    }
    BOOL v15 = *(_DWORD *)(v8 + 20 * v10 + 4) == 0;
    char v16 = !v15;
    v13 |= v16;
    v12 |= v15;
LABEL_7:
    uint64_t v10 = ++v14;
  }
  while (v9 > v14);
  if (v11)
  {
LABEL_13:
    BOOL v18 = *(unsigned __int16 *)(*(void *)(a1 + 3200) + 7766) > 0xCu;
    int v19 = 2;
    int v20 = 2;
    if (v12) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v18 = 0;
    int v19 = 1;
    int v20 = 1;
    if (v12)
    {
LABEL_14:
      int v21 = v20 + 2;
      int v19 = v20 + 2;
      if ((v13 & 1) == 0)
      {
        int v94 = 0;
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  int v94 = 0;
  int v21 = v20;
  int v20 = 0;
  if ((v13 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_19:
  int v94 = v21;
  int v19 = v21 + 2;
LABEL_20:
  uint64_t v22 = -858993459 * ((uint64_t)(a2[1] - *a2) >> 2);
  if (!(-858993459 * ((uint64_t)(a2[1] - *a2) >> 2))) {
    return 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = a6 + 4;
  long long v99 = a5;
  if (v18) {
    int v25 = 300;
  }
  else {
    int v25 = 268;
  }
  int v92 = v25;
  int v93 = v20;
  int v26 = v19;
  uint64_t v97 = -858993459 * ((uint64_t)(a2[1] - *a2) >> 2);
  unint64_t v98 = a4;
  uint64_t v96 = v24;
  int v95 = v19;
LABEL_28:
  uint64_t v28 = 0;
  unsigned int v29 = 0;
  long long v30 = (unsigned int *)(a3 + 516 * v23);
  if (v23 == 1) {
    int v31 = 24;
  }
  else {
    int v31 = 0;
  }
  if (v23 == 2) {
    int v31 = 8;
  }
  int v100 = v31;
  while (2)
  {
    uint64_t v32 = *a2;
    long long v33 = (int *)(*a2 + 20 * v28);
    int v34 = *v33;
    int v35 = v33[3];
    switch(v34)
    {
      case 0:
        unsigned int v47 = v29 + 1;
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = ((v35 & 0x7F) << 16) | 0xC;
        goto LABEL_61;
      case 1:
      case 9:
      case 10:
        long long v36 = (unsigned int *)(v32 + 20 * v28);
        unsigned int v37 = v36[4];
        long long v38 = (unsigned int *)(v24 + 4 * (*(_DWORD *)(*a5 + 4 * v36[1]) + 6));
        long long v39 = (int *)((char *)v38 + *v38);
        long long v40 = (unsigned __int16 *)((char *)v39 - *v39);
        unsigned int v41 = *v40;
        if (v41 <= 8)
        {
          unsigned int v43 = v26 + v37;
          if (v41 <= 4)
          {
            LOBYTE(v44) = 0;
LABEL_65:
            BOOL v55 = v34 == 10;
            uint64_t v56 = 4;
LABEL_66:
            char v57 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v42 = v40[4];
          if (v40[4]) {
            LODWORD(v42) = *(int *)((char *)v39 + v42);
          }
          unsigned int v43 = v26 + v37 + (v42 >> 1);
        }
        uint64_t v44 = v40[2];
        if (v40[2]) {
          LOBYTE(v44) = *((unsigned char *)v39 + v44) != 0;
        }
        if (v41 <= 0xA) {
          goto LABEL_65;
        }
        if (v40[5])
        {
          int v45 = *((char *)v39 + v40[5]);
          BOOL v46 = v45 == 1;
        }
        else
        {
          BOOL v46 = 0;
          int v45 = 0;
        }
        BOOL v55 = v34 == 10;
        if (v41 >= 0xD && (uint64_t v82 = v40[6]) != 0)
        {
          uint64_t v56 = (uint64_t)v39 + v82 + *(unsigned int *)((char *)v39 + v82) + 4;
          if (v46) {
            char v83 = 2;
          }
          else {
            char v83 = 0;
          }
          LOBYTE(v44) = v83 | v44;
          if (!v45) {
            goto LABEL_66;
          }
          char v57 = 4;
        }
        else
        {
          if (v46) {
            char v84 = 2;
          }
          else {
            char v84 = 0;
          }
          LOBYTE(v44) = v84 | v44;
          uint64_t v56 = 4;
          char v57 = 4;
          if (!v45) {
            goto LABEL_66;
          }
        }
LABEL_67:
        unsigned int v58 = v36[2];
        char v59 = v44 | (8 * (v34 == 9));
        if (v55) {
          char v60 = 16;
        }
        else {
          char v60 = 0;
        }
        char v61 = v57 | v60 | v59;
        int v62 = v61 & 0xC;
        if ((v61 & 4) != 0) {
          int v63 = 12;
        }
        else {
          int v63 = 28;
        }
        if (v62 == 8) {
          int v63 = 20;
        }
        if ((v44 & 2) != 0) {
          int v63 = v100;
        }
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = ((_BYTE)v58 - 1) & 3 | ((v43 & 0x7F) << 8) | v63 & 0xFF80FFFF | ((v35 & 0x7F) << 16);
        unsigned int v64 = *v30 & 0xFFFF80FF | ((((*v30 + (v58 << 8)) >> 8) & 0x7F) << 8);
        char v65 = v58 + v43;
        if ((*v30 & 0x7F) > v58 + v43) {
          char v65 = *(unsigned char *)v30 & 0x7F;
        }
        if ((v44 & 1) == 0) {
          unsigned int v64 = *v30 & 0xFFFF8080 | ((((*v30 + (v58 << 8)) >> 8) & 0x7F) << 8) | v65 & 0x7F;
        }
        *long long v30 = v64;
        if (v23) {
          goto LABEL_36;
        }
        int v66 = a2;
        uint64_t v67 = a3;
        size_t v68 = strlen((const char *)v56);
        if (v68 > 0x7FFFFFFFFFFFFFF7) {
          abort();
        }
        size_t v69 = v68;
        if (v68 >= 0x17)
        {
          uint64_t v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17) {
            uint64_t v71 = v68 | 7;
          }
          uint64_t v72 = v71 + 1;
          p_p = (long long *)operator new(v71 + 1);
          unint64_t v73 = v72 | 0x8000000000000000;
          a4 = v98;
          *((void *)&__p + 1) = v69;
          unint64_t v102 = v73;
          *(void *)&long long __p = p_p;
        }
        else
        {
          HIBYTE(v102) = v68;
          p_p = &__p;
          if (!v68) {
            goto LABEL_90;
          }
        }
        memmove(p_p, (const void *)v56, v69);
LABEL_90:
        *((unsigned char *)p_p + v69) = 0;
        __n128 v75 = (void **)a4[1];
        unint64_t v74 = (unint64_t)a4[2];
        if ((unint64_t)v75 < v74)
        {
          *(_DWORD *)__n128 v75 = v29;
          a5 = v99;
          *(_OWORD *)(v75 + 1) = __p;
          v75[3] = (void *)v102;
          a4[1] = (char *)(v75 + 4);
          goto LABEL_35;
        }
        __n128 v76 = (void **)*a4;
        uint64_t v77 = ((char *)v75 - *a4) >> 5;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 59) {
          abort();
        }
        uint64_t v79 = v74 - (void)v76;
        if (v79 >> 4 > v78) {
          unint64_t v78 = v79 >> 4;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v80 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          if (v80 >> 59) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __n128 v81 = (char *)operator new(32 * v80);
        }
        else
        {
          __n128 v81 = 0;
        }
        __n128 v85 = &v81[32 * v77];
        __n128 v86 = &v81[32 * v80];
        *(_DWORD *)__n128 v85 = v29;
        *(_OWORD *)(v85 + 8) = __p;
        *((void *)v85 + 3) = v102;
        long long __p = 0uLL;
        unint64_t v102 = 0;
        unint64_t v87 = v85 + 32;
        if (v75 == v76)
        {
          a4 = v98;
          *unint64_t v98 = v85;
          v98[1] = v87;
          v98[2] = v86;
          goto LABEL_123;
        }
        a4 = v98;
        do
        {
          int v88 = *((_DWORD *)v75 - 8);
          v75 -= 4;
          *((_DWORD *)v85 - 8) = v88;
          v85 -= 32;
          long long v89 = *(_OWORD *)(v75 + 1);
          *((void *)v85 + 3) = v75[3];
          *(_OWORD *)(v85 + 8) = v89;
          v75[2] = 0;
          v75[3] = 0;
          v75[1] = 0;
        }
        while (v75 != v76);
        __n128 v75 = (void **)*v98;
        __n128 v90 = (void **)v98[1];
        *unint64_t v98 = v85;
        v98[1] = v87;
        v98[2] = v86;
        if (v90 != v75)
        {
          do
          {
            if (*((char *)v90 - 1) < 0) {
              operator delete(*(v90 - 3));
            }
            v90 -= 4;
          }
          while (v90 != v75);
LABEL_123:
          a5 = v99;
          if (!v75) {
            goto LABEL_125;
          }
LABEL_124:
          operator delete(v75);
          goto LABEL_125;
        }
        a5 = v99;
        if (v75) {
          goto LABEL_124;
        }
LABEL_125:
        int v91 = SHIBYTE(v102);
        a4[1] = v87;
        if (v91 < 0) {
          operator delete((void *)__p);
        }
LABEL_35:
        a3 = v67;
        a2 = v66;
        uint64_t v24 = v96;
        uint64_t v22 = v97;
        int v26 = v95;
LABEL_36:
        ++v29;
LABEL_37:
        if (++v28 != v22) {
          continue;
        }
        if (v29)
        {
          *(_DWORD *)(a3 + 516 * v23 + 512) = v29;
          uint64_t result = 4 * v29 + 4;
        }
        else
        {
          uint64_t result = 0;
        }
        if (++v23 != 3) {
          goto LABEL_28;
        }
        return result;
      case 5:
        unsigned int v47 = v29 + 1;
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = ((v35 & 0x7F) << 16) | 0x4D;
        unsigned int v53 = *v30;
        unsigned int v54 = *v30 + 512;
        goto LABEL_62;
      case 6:
        unsigned int v47 = v29 + 1;
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = v92 & 0xFF80FFFF | ((v35 & 0x7F) << 16);
        unsigned int v48 = *v30 & 0x7F;
        if (v48 <= 2) {
          unsigned int v48 = 2;
        }
        unsigned int v49 = ((unsigned __int16)*v30 + 256) & 0x7F00 | *v30 & 0xFFFF8080 | v48;
        goto LABEL_63;
      case 7:
        unsigned int v47 = v29 + 1;
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = v100 & 0xFF80FFFF | ((v35 & 0x7F) << 16) | 0x60;
LABEL_61:
        unsigned int v53 = *v30;
        unsigned int v54 = *v30 + 256;
LABEL_62:
        unsigned int v49 = v53 & 0xFFFF80FF | (((v54 >> 8) & 0x7F) << 8);
LABEL_63:
        *long long v30 = v49;
        unsigned int v29 = v47;
        goto LABEL_37;
      case 8:
        int v50 = v93;
        if (*(_DWORD *)(v32 + 20 * v28 + 4))
        {
          int v50 = v94;
          int v51 = 173;
        }
        else
        {
          int v51 = 189;
        }
        *(_DWORD *)(a3 + 516 * v23 + 4 * v29 + 4) = (v51 | (v50 << 8)) & 0xFF80FFFF | ((v35 & 0x7F) << 16);
        unsigned int v52 = v50 + 2;
        if ((*v30 & 0x7F) > v52) {
          unsigned int v52 = *v30 & 0x7F;
        }
        *long long v30 = ((unsigned __int16)*v30 + 512) & 0x7F00 | *v30 & 0xFFFF8080 | v52;
        ++v29;
        goto LABEL_37;
      default:
        goto LABEL_37;
    }
  }
}

void sub_242B1D750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::fillVITBuffer(char *result, char *__dst)
{
  long long v3 = result;
  uint64_t v4 = *((void *)result + 2);
  if (*((void *)result + 1))
  {
    uint64_t result = (char *)memcpy(&__dst[v4], result + 56, 4 * *((unsigned int *)result + 142) + 4);
    uint64_t v4 = v3[2];
  }
  if (v4)
  {
    uint64_t result = (char *)memcpy(__dst, (char *)v3 + 1604, 4 * *((unsigned int *)v3 + 529) + 4);
    uint64_t v5 = v3[2];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v3[1];
  v3[5] = v5 + v6 + v3[4];
  if (v6)
  {
    uint64_t result = (char *)memcpy(&__dst[v5 + v5 + v6], (char *)v3 + 572, 4 * *((unsigned int *)v3 + 271) + 4);
    uint64_t v7 = v3[1];
    uint64_t v5 = v3[2];
    if (!v5) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v7 = 0;
  if (v5)
  {
LABEL_8:
    uint64_t result = (char *)memcpy(&__dst[v7 + v5], v3 + 265, 4 * *((unsigned int *)v3 + 658) + 4);
    uint64_t v7 = v3[1];
    uint64_t v5 = v3[2];
  }
LABEL_9:
  uint64_t v8 = 2 * (v5 + v7);
  v3[6] = v8 + v3[4];
  if (v7)
  {
    uint64_t result = (char *)memcpy(&__dst[v5 + v8], v3 + 136, 4 * *((unsigned int *)v3 + 400) + 4);
    uint64_t v5 = v3[2];
  }
  if (v5)
  {
    unint64_t v9 = &__dst[2 * v3[1] + 2 * v5];
    size_t v10 = 4 * *((unsigned int *)v3 + 787) + 4;
    return (char *)memcpy(v9, (char *)v3 + 2636, v10);
  }
  return result;
}

uint64_t AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  long long v3 = v2;
  uint64_t v4 = v1;
  if (!*(unsigned char *)(v1 + 1239))
  {
    if (*(unsigned char *)(v1 + 1237))
    {
      unsigned int v5 = *(_DWORD *)(v1 + 600);
      if (v5 <= 8) {
        unsigned int v5 = 8;
      }
      *(_DWORD *)(v1 + 600) = v5;
    }
    uint64_t v6 = *(void *)v1;
    int v7 = *(_DWORD *)(v1 + 596);
    int v8 = *(_DWORD *)(v1 + 608);
    uint64_t v9 = (unsigned __int16)((*(_DWORD *)(v1 + 592) + 3) >> 2);
    *(void *)(v6 + 88) = *(void *)(*(void *)v1 + 88) & 0xFFFFF00000000000 | (v9 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v1 + 604) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v9;
    *(_DWORD *)(v6 + 248) = (v7 + 3) >> 2;
    *(_DWORD *)(v6 + 252) = (((v8 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v6 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v6 + 48), *(_DWORD *)(v6 + 240), *(void *)v6 + *(unsigned __int16 *)(v6 + 244));
    }
  }
  unsigned int v10 = *(_DWORD *)(v4 + 1240);
  if (v10 != -1) {
    AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::setConstantCalculationProgramInfo(*(void *)v4, v10, *(_DWORD *)(v4 + 1244), *(void *)(v4 + 640), *(void *)(v4 + 648), *(void *)(v4 + 656), *(unsigned char *)(v4 + 1252));
  }
  uint64_t v11 = *(void *)(v4 + 856);
  if (v11)
  {
    int v12 = *(_DWORD *)(v4 + 596);
    int v13 = *(_DWORD *)(v4 + 608);
    uint64_t v14 = (unsigned __int16)((*(_DWORD *)(v4 + 592) + 3) >> 2);
    *(void *)(v11 + 88) = *(void *)(v11 + 88) & 0xFFFFF00000000000 | (v14 << 16) & 0xFFFFF001FFFFFFFFLL | ((((unint64_t)(((unsigned __int16)((*(_DWORD *)(v4 + 604) + 3) >> 2) + 1) & 0xFFE) >> 1) & 0x7FF) << 33) | v14;
    *(_DWORD *)(v11 + 248) = (v12 + 3) >> 2;
    *(_DWORD *)(v11 + 252) = (((v13 + 3) >> 2) + 1) & 0x7FFFFFFE;
    if (*(unsigned char *)(v11 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v11 + 48), *(_DWORD *)(v11 + 240), *(void *)v11 + *(unsigned __int16 *)(v11 + 244));
    }
    uint64_t v15 = *(void *)(v4 + 856);
    char v16 = *(char **)(v4 + 808);
    memcpy(v16, *(const void **)v15, *(void *)(v15 + 8) - *(void *)v15);
    if (*(unsigned char *)(v15 + 200)) {
      *(int8x16_t *)&v16[*(unsigned int *)(v15 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v16[*(unsigned int *)(v15 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    int v17 = *(unsigned int **)(v15 + 176);
    for (i = *(unsigned int **)(v15 + 184); v17 != i; v17 += 3)
    {
      v19.i64[0] = v45[v17[1]] + *v17;
      v19.i64[1] = (unint64_t)v19.i64[0] >> 5;
      *(int8x16_t *)&v16[v17[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v16[v17[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v19, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v20 = *(void *)(v4 + 856);
    long long v21 = *(_OWORD *)(v20 + 96);
    long long v23 = *(_OWORD *)(v20 + 48);
    long long v22 = *(_OWORD *)(v20 + 64);
    *(_OWORD *)(v4 + 896) = *(_OWORD *)(v20 + 80);
    *(_OWORD *)(v4 + 912) = v21;
    *(_OWORD *)(v4 + 864) = v23;
    *(_OWORD *)(v4 + 880) = v22;
    long long v25 = *(_OWORD *)(v20 + 128);
    long long v24 = *(_OWORD *)(v20 + 144);
    long long v26 = *(_OWORD *)(v20 + 112);
    *(void *)(v4 + 976) = *(void *)(v20 + 160);
    *(_OWORD *)(v4 + 944) = v25;
    *(_OWORD *)(v4 + 960) = v24;
    *(_OWORD *)(v4 + 928) = v26;
  }
  AGX::ESLStateLoadEncoderGen2<AGX::HAL200::Classes,AGX::HAL200::Encoders>::finish(*(void *)v4);
  *(void *)&long long v27 = 0x800000;
  *((void *)&v27 + 1) = *(void *)(*(void *)v4 + 248) & 0xFFF00000000;
  int v28 = 8 * (*(_DWORD *)(*(void *)v4 + 248) & 0x3FFFF);
  int v29 = *(_DWORD *)(v4 + 1264) & 0xF;
  *(_OWORD *)(v4 + 1280) = v27;
  *(_DWORD *)(v4 + 1296) = v28;
  *(_DWORD *)(v4 + 1300) = 0;
  *(_DWORD *)(v4 + 1304) = v29;
  uint64_t v30 = *(void *)(v4 + 1352);
  int v31 = *(_DWORD *)(v30 + 24);
  int v32 = *(_DWORD *)(v30 + 28);
  if (v32) {
    int v33 = *(_DWORD *)(v30 + 28);
  }
  else {
    int v33 = *(_DWORD *)(v30 + 24);
  }
  if (v33)
  {
    int v34 = (v31 & 0x7F) << 24;
    if (!v32) {
      int v34 = 0;
    }
    unsigned int v35 = v34 & 0xFF80FFFF | ((v33 & 0x7F) << 16);
    *(_DWORD *)(v4 + 1284) = v35;
    if (*(unsigned char *)(v4 + 1236)) {
      *(_DWORD *)(v4 + 1328) = v35 | *(_DWORD *)(v4 + 1328) & 0x8080FFFF;
    }
  }
  *(void *)(v4 + 1308) = 1792;
  if (v3[312])
  {
    *(int8x16_t *)(v4 + 216) = vorrq_s8(*(int8x16_t *)(v4 + 216), *(int8x16_t *)(v4 + 56));
    *(void *)(v4 + 56) = 0;
    *(void *)(v4 + 64) = 0;
  }
  if (v3[313])
  {
    *(int8x16_t *)(v4 + 232) = vorrq_s8(*(int8x16_t *)(v4 + 232), *(int8x16_t *)(v4 + 72));
    *(void *)(v4 + 72) = 0;
    *(void *)(v4 + 80) = 0;
  }
  if (v3[314])
  {
    *(int8x16_t *)(v4 + 200) = vorrq_s8(*(int8x16_t *)(v4 + 200), *(int8x16_t *)(v4 + 40));
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
  }
  long long v36 = (int8x16_t *)(v4 + 264);
  if (v3[315])
  {
    int8x16_t v37 = vorrq_s8(*v36, *(int8x16_t *)(v4 + 152));
    int8x16_t v38 = vorrq_s8(*(int8x16_t *)(v4 + 280), *(int8x16_t *)(v4 + 168));
    *long long v36 = v37;
    *(int8x16_t *)(v4 + 280) = v38;
    int8x16_t v39 = vorrq_s8(*(int8x16_t *)(v4 + 248), *(int8x16_t *)(v4 + 136));
    *(int8x16_t *)(v4 + 248) = v39;
    *(int8x16_t *)(v4 + 296) = vorrq_s8(*(int8x16_t *)(v4 + 296), *(int8x16_t *)(v4 + 184));
    int8x16_t v40 = 0uLL;
    *(_OWORD *)(v4 + 168) = 0u;
    *(_OWORD *)(v4 + 136) = 0u;
    *(_OWORD *)(v4 + 184) = 0u;
    int8x16_t v41 = 0uLL;
    *(_OWORD *)(v4 + 152) = 0u;
  }
  else
  {
    int8x16_t v40 = *(int8x16_t *)(v4 + 136);
    int8x16_t v39 = *(int8x16_t *)(v4 + 248);
    int8x16_t v41 = *(int8x16_t *)(v4 + 152);
    int8x16_t v37 = *v36;
  }
  *(int8x16_t *)(v4 + 8) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v4 + 40), *(int8x16_t *)(v4 + 88)), vorrq_s8(v40, *(int8x16_t *)(v4 + 200))), v39);
  *(int8x16_t *)(v4 + 24) = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)(v4 + 56), *(int8x16_t *)(v4 + 104)), vorrq_s8(v41, *(int8x16_t *)(v4 + 216))), v37);
  unint64_t v42 = AGX::getDirtyArguments<AGX::HAL200::FragmentProgramVariantESLState>((void *)v4, -1, -1, -1, -1, -1, -1, -1, -1);
  if (v42) {
    *(void *)(v4 + 328) |= 0x88000000000uLL;
  }
  if ((v42 & 0x10000) != 0) {
    *(void *)(v4 + 328) |= 0xA0000000000uLL;
  }
  uint64_t v43 = 0xC0000000000;
  if (!BYTE4(v42)) {
    uint64_t v43 = 0x80000000000;
  }
  *(void *)(v4 + 328) |= ((v42 & 0x1000000) << 16) | v43;

  return AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::buildUniqueResourceMask(v4);
}

__n128 AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = *(void *)v1;
  uint64_t v6 = (unsigned __int16)((v4 + 3) >> 2);
  unint64_t v7 = ((unsigned __int16)((v5 + 3) >> 2) + 1) & 0xFFE;
  *(void *)(v3 + 88) = *(void *)(*(void *)v1 + 88) & 0xFFFFF00000000000 | (v6 << 16) & 0xFFFFF001FFFFFFFFLL | (((v7 >> 1) & 0x7FF) << 33) | v6;
  unsigned int v9 = (v8 + 3) >> 2;
  unsigned int v11 = (((v10 + 3) >> 2) + 1) & 0x7FFFFFFE;
  *(_DWORD *)(v3 + 248) = v9;
  *(_DWORD *)(v3 + 252) = v11;
  if (*(unsigned char *)(v3 + 174)) {
    AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v3 + 48), *(_DWORD *)(v3 + 240), *(void *)v3 + *(unsigned __int16 *)(v3 + 244));
  }
  uint64_t v12 = *(void *)(v1 + 856);
  if (v12)
  {
    *(void *)(v12 + 88) = *(void *)(v12 + 88) & 0xFFFFF00000000000 | ((unint64_t)v6 << 16) | (v7 << 32) | v6;
    *(_DWORD *)(v12 + 248) = v9;
    *(_DWORD *)(v12 + 252) = v11;
    if (*(unsigned char *)(v12 + 174)) {
      AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((int *)(v12 + 48), *(_DWORD *)(v12 + 240), *(void *)v12 + *(unsigned __int16 *)(v12 + 244));
    }
    uint64_t v13 = *(void *)(v1 + 856);
    uint64_t v14 = *(char **)(v1 + 808);
    memcpy(v14, *(const void **)v13, *(void *)(v13 + 8) - *(void *)v13);
    if (*(unsigned char *)(v13 + 200)) {
      *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[*(unsigned int *)(v13 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8((int8x16_t)0, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v15 = *(unsigned int **)(v13 + 176);
    for (i = *(unsigned int **)(v13 + 184); v15 != i; v15 += 3)
    {
      v17.i64[0] = v24[v15[1]] + *v15;
      v17.i64[1] = (unint64_t)v17.i64[0] >> 5;
      *(int8x16_t *)&v14[v15[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v14[v15[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
    }
    uint64_t v18 = *(void *)(v1 + 856);
    long long v19 = *(_OWORD *)(v18 + 96);
    long long v21 = *(_OWORD *)(v18 + 48);
    long long v20 = *(_OWORD *)(v18 + 64);
    *(_OWORD *)(v1 + 896) = *(_OWORD *)(v18 + 80);
    *(_OWORD *)(v1 + 912) = v19;
    *(_OWORD *)(v1 + 864) = v21;
    *(_OWORD *)(v1 + 880) = v20;
    long long v22 = *(_OWORD *)(v18 + 128);
    __n128 result = *(__n128 *)(v18 + 144);
    long long v23 = *(_OWORD *)(v18 + 112);
    *(void *)(v1 + 976) = *(void *)(v18 + 160);
    *(_OWORD *)(v1 + 944) = v22;
    *(__n128 *)(v1 + 960) = result;
    *(_OWORD *)(v1 + 928) = v23;
  }
  return result;
}

void AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::cloneProgramInfo(uint64_t a1, uint64_t a2, long long *a3, void *a4, int a5)
{
  long long v5 = *a3;
  *(void *)(a1 + 656) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 640) = v5;
  *(_DWORD *)(a1 + 724) = *(_DWORD *)(a2 + 724);
  *(void *)(a1 + 528) = a4[2];
  *(void *)(a1 + 536) = a4[3];
  *(void *)(a1 + 544) = a4[4];
  *(_DWORD *)(a1 + 1232) += a5;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::buildUniqueResourceMask(a1);
  operator new();
}

void sub_242B1E380(_Unwind_Exception *a1)
{
  MEMORY[0x24566ED90](v1, 0x1030C40B293E8E3);
  _Unwind_Resume(a1);
}

void ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::clone()
{
}

void sub_242B1E614(_Unwind_Exception *a1)
{
  std::vector<ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VITFragmentInfo,std::allocator<ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::VITFragmentInfo>>::~vector[abi:nn180100]((void **)(v1 + 3152));
  MEMORY[0x24566ED90](v1, 0x10F0C4099BF1763);
  _Unwind_Resume(a1);
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ComputeArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4))
  {
    case 0uLL:
    case 1uLL:
      return v2;
    case 2uLL:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 32))
      {
        long long v3 = *(_OWORD *)a1;
        *(_OWORD *)size_t v68 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v68[16] = *(_OWORD *)(a1 + 32);
        long long v4 = *(_OWORD *)(a2 - 20);
        long long v5 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 16) = v5;
        *(_OWORD *)(a1 + 28) = v4;
        *(_OWORD *)(a2 - 48) = v3;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v68;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v68[12];
      }
      return 1;
    case 3uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      uint64_t v15 = (long long *)(a2 - 48);
      unint64_t v16 = *(void *)(a1 + 80);
      unint64_t v17 = *(void *)(a2 - 16);
      if (v16 >= *(void *)(a1 + 32))
      {
        if (v17 >= v16) {
          return 1;
        }
        long long v32 = *(_OWORD *)(a1 + 64);
        long long v33 = *v14;
        *(_DWORD *)__n128 v82 = HIDWORD(v32);
        *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
        long long v34 = *(_OWORD *)(a2 - 20);
        long long v35 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v35;
        goto LABEL_44;
      }
      if (v17 >= v16)
      {
        long long v52 = *(_OWORD *)a1;
        *(_OWORD *)__n128 v75 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)&v75[16] = *(_OWORD *)(a1 + 32);
        long long v53 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v53;
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
        *unint64_t v14 = v52;
        *(_OWORD *)(a1 + 64) = *(_OWORD *)v75;
        *(_OWORD *)(a1 + 76) = *(_OWORD *)&v75[12];
        if (*(void *)(a2 - 16) >= *(void *)(a1 + 80)) {
          return 1;
        }
        long long v18 = *(_OWORD *)(a1 + 64);
        long long v19 = *v14;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 80);
        long long v54 = *(_OWORD *)(a2 - 20);
        long long v55 = *(_OWORD *)(a2 - 32);
        *unint64_t v14 = *v15;
        *(_OWORD *)(a1 + 64) = v55;
        *(_OWORD *)(a1 + 76) = v54;
      }
      else
      {
        long long v18 = *(_OWORD *)(a1 + 16);
        long long v19 = *(_OWORD *)a1;
        *(_DWORD *)__n128 v80 = HIDWORD(v18);
        *(_OWORD *)&v80[4] = *(_OWORD *)(a1 + 32);
        long long v20 = *(_OWORD *)(a2 - 20);
        long long v21 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v15;
        *(_OWORD *)(a1 + 16) = v21;
        *(_OWORD *)(a1 + 28) = v20;
      }
      *uint64_t v15 = v19;
      *(_OWORD *)(a2 - 32) = v18;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)v80;
      return 1;
    case 4uLL:
      unint64_t v14 = (long long *)(a1 + 48);
      uint64_t v15 = (long long *)(a1 + 96);
      unint64_t v22 = *(void *)(a1 + 80);
      unint64_t v23 = *(void *)(a1 + 32);
      unint64_t v24 = *(void *)(a1 + 128);
      if (v22 >= v23)
      {
        if (v24 < v22)
        {
          long long v36 = *v14;
          *(_OWORD *)uint64_t v71 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v71[16] = *(_OWORD *)(a1 + 80);
          long long v37 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *uint64_t v15 = v36;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v71;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v71[12];
          if (*(void *)(a1 + 80) < v23)
          {
            long long v38 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v72 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v72[16] = *(_OWORD *)(a1 + 32);
            long long v39 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v39;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *unint64_t v14 = v38;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v72;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v72[12];
          }
        }
      }
      else
      {
        if (v24 >= v22)
        {
          long long v56 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v76 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v76[16] = *(_OWORD *)(a1 + 32);
          long long v57 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v57;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *unint64_t v14 = v56;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v76;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v76[12];
          if (v24 >= *(void *)(a1 + 80)) {
            goto LABEL_41;
          }
          long long v25 = *(_OWORD *)(a1 + 64);
          long long v26 = *v14;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 80);
          long long v58 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v58;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v25 = *(_OWORD *)(a1 + 16);
          long long v26 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v81 = HIDWORD(v25);
          *(_OWORD *)&v81[4] = *(_OWORD *)(a1 + 32);
          long long v27 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v27;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *uint64_t v15 = v26;
        *(_OWORD *)(a1 + 112) = v25;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v81;
      }
LABEL_41:
      if (*(void *)(a2 - 16) < *(void *)(a1 + 128))
      {
        __n128 v59 = (_OWORD *)(a2 - 48);
        long long v60 = *v15;
        *(_OWORD *)__n128 v77 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 128);
        long long v61 = *(_OWORD *)(a2 - 20);
        long long v62 = *(_OWORD *)(a2 - 32);
        *uint64_t v15 = *(_OWORD *)(a2 - 48);
        *(_OWORD *)(a1 + 112) = v62;
        *(_OWORD *)(a1 + 124) = v61;
        *__n128 v59 = v60;
        v59[1] = *(_OWORD *)v77;
        *(_OWORD *)((char *)v59 + 28) = *(_OWORD *)&v77[12];
        if (*(void *)(a1 + 128) < *(void *)(a1 + 80))
        {
          long long v32 = *(_OWORD *)(a1 + 64);
          long long v33 = *v14;
          *(_DWORD *)__n128 v82 = HIDWORD(v32);
          *(_OWORD *)&v82[4] = *(_OWORD *)(a1 + 80);
          long long v63 = *(_OWORD *)(a1 + 112);
          *unint64_t v14 = *v15;
          *(_OWORD *)(a1 + 64) = v63;
          long long v34 = *(_OWORD *)(a1 + 124);
LABEL_44:
          *(long long *)((char *)v14 + 28) = v34;
          *uint64_t v15 = v33;
          v15[1] = v32;
          *(long long *)((char *)v15 + 28) = *(_OWORD *)v82;
          if (*(void *)(a1 + 80) < *(void *)(a1 + 32))
          {
            long long v64 = *(_OWORD *)a1;
            *(_OWORD *)__n128 v78 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v78[16] = *(_OWORD *)(a1 + 32);
            long long v65 = v14[1];
            *(_OWORD *)a1 = *v14;
            *(_OWORD *)(a1 + 16) = v65;
            *(_OWORD *)(a1 + 28) = *(long long *)((char *)v14 + 28);
            *unint64_t v14 = v64;
            v14[1] = *(_OWORD *)v78;
            *(long long *)((char *)v14 + 28) = *(_OWORD *)&v78[12];
          }
        }
      }
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::enable_if<!(false),BOOL>::type AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::setupExecuteIndirectESL<false>(AGCDeserializedReply const&,AGX::HAL200::IndirectArgumentLayout const* const*,AGX::USCProfileControlGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes> const*,std::vector<DriverEIOffset> const&,BOOL,AGX::HAL200::HeapSet &,LoadShaderEmitType)::UniformData *>((_OWORD *)a1, (long long *)(a1 + 48), (long long *)(a1 + 96), (long long *)(a1 + 144), (long long *)(a2 - 48));
      return 1;
    default:
      uint64_t v6 = a1 + 96;
      unint64_t v7 = (long long *)(a1 + 48);
      unint64_t v8 = *(void *)(a1 + 80);
      unint64_t v9 = *(void *)(a1 + 32);
      unint64_t v10 = *(void *)(a1 + 128);
      if (v8 >= v9)
      {
        if (v10 < v8)
        {
          long long v28 = *v7;
          *(_OWORD *)unint64_t v69 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v69[16] = *(_OWORD *)(a1 + 80);
          long long v29 = *(_OWORD *)(a1 + 112);
          *unint64_t v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v29;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
          *(_OWORD *)uint64_t v6 = v28;
          *(_OWORD *)(a1 + 112) = *(_OWORD *)v69;
          *(_OWORD *)(a1 + 124) = *(_OWORD *)&v69[12];
          if (*(void *)(a1 + 80) < v9)
          {
            long long v30 = *(_OWORD *)a1;
            *(_OWORD *)unint64_t v70 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)&v70[16] = *(_OWORD *)(a1 + 32);
            long long v31 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)a1 = *v7;
            *(_OWORD *)(a1 + 16) = v31;
            *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
            *unint64_t v7 = v30;
            *(_OWORD *)(a1 + 64) = *(_OWORD *)v70;
            *(_OWORD *)(a1 + 76) = *(_OWORD *)&v70[12];
          }
        }
      }
      else
      {
        if (v10 >= v8)
        {
          long long v40 = *(_OWORD *)a1;
          *(_OWORD *)__n128 v73 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 32);
          long long v41 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)a1 = *v7;
          *(_OWORD *)(a1 + 16) = v41;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 76);
          *unint64_t v7 = v40;
          *(_OWORD *)(a1 + 64) = *(_OWORD *)v73;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)&v73[12];
          if (v10 >= *(void *)(a1 + 80)) {
            goto LABEL_25;
          }
          long long v11 = *(_OWORD *)(a1 + 64);
          long long v12 = *v7;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 80);
          long long v42 = *(_OWORD *)(a1 + 112);
          *unint64_t v7 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 64) = v42;
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 124);
        }
        else
        {
          long long v11 = *(_OWORD *)(a1 + 16);
          long long v12 = *(_OWORD *)a1;
          *(_DWORD *)__n128 v79 = HIDWORD(v11);
          *(_OWORD *)&v79[4] = *(_OWORD *)(a1 + 32);
          long long v13 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 28) = *(_OWORD *)(a1 + 124);
        }
        *(_OWORD *)uint64_t v6 = v12;
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 124) = *(_OWORD *)v79;
      }
LABEL_25:
      uint64_t v43 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v44 = 0;
      int v45 = 0;
      break;
  }
  while (1)
  {
    unint64_t v47 = *(void *)(v43 + 32);
    if (v47 < *(void *)(v6 + 32))
    {
      long long v67 = *(_OWORD *)v43;
      long long v74 = *(_OWORD *)(v43 + 16);
      int v48 = *(_DWORD *)(v43 + 40);
      uint64_t v49 = v44;
      do
      {
        uint64_t v50 = a1 + v49;
        long long v51 = *(_OWORD *)(a1 + v49 + 112);
        *(_OWORD *)(v50 + 144) = *(_OWORD *)(a1 + v49 + 96);
        *(_OWORD *)(v50 + 160) = v51;
        *(_OWORD *)(v50 + 172) = *(_OWORD *)(a1 + v49 + 124);
        if (v49 == -96)
        {
          uint64_t v46 = a1;
          goto LABEL_28;
        }
        v49 -= 48;
      }
      while (v47 < *(void *)(v50 + 80));
      uint64_t v46 = a1 + v49 + 144;
LABEL_28:
      *(_OWORD *)uint64_t v46 = v67;
      *(_OWORD *)(v46 + 16) = v74;
      *(void *)(v46 + 32) = v47;
      *(_DWORD *)(v46 + 40) = v48;
      if (++v45 == 8) {
        return v43 + 48 == a2;
      }
    }
    uint64_t v6 = v43;
    v44 += 48;
    v43 += 48;
    if (v43 == a2) {
      return 1;
    }
  }
}

uint64_t AGX::BackgroundObjectProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::calculateBackgroundObjectBits(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    unint64_t v5 = 0;
  }
  else
  {
    int v7 = 8 * (a3 != 0);
    unsigned int v17 = 0;
    unint64_t v8 = (const _AGCDrawBufferState *)(a4 + 40);
    unsigned int v9 = *(unsigned __int8 *)(a4 + 72);
    if (*(unsigned char *)(a4 + 72))
    {
      unint64_t v10 = 0;
      int v11 = *(unsigned __int8 *)(a4 + 84) | HIBYTE(*(_DWORD *)(a4 + 80));
      do
      {
        unsigned int v12 = __clz(__rbit32(v9));
        if (((1 << v12) & v11) != 0)
        {
          char v13 = v8->encoded.__elems_[v12].key >> 5;
          if (((-1 << v13) >> (v13 - 1))) {
            int v14 = ~(-1 << v13);
          }
          else {
            int v14 = ~(-1 << v13) | 0xF;
          }
          v10 |= (v14 << (4 * v12));
        }
        v9 ^= 1 << v12;
      }
      while (v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    agxsGetShaderPassInfo((17 - v7), v8, 0, v10, &v17, &v16);
    unint64_t v5 = (unint64_t)(v17 << v7) << 47;
  }
  return *(void *)(a1 + 1248) & 0x7FFFFFFFFFFFLL | v5;
}

uint64_t AGX::BlitFragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::updateVaryingTable(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  if (!v2) {
    return 0;
  }
  unint64_t v5 = operator new(20 * v2);
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  long long __p = v5;
  long long v39 = v5;
  long long v40 = &v5[5 * v2];
  do
  {
    uint64_t v9 = a2[v6 + 1];
    unint64_t v10 = (int *)((char *)&a2[v6] + v9);
    if (v5 >= v40)
    {
      unint64_t v5 = std::vector<FragmentShaderIteration>::__emplace_back_slow_path<AGCCodeGenerator::FragmentShaderIteration const*>(&__p, v10 + 1);
      unint64_t v2 = *a2;
    }
    else
    {
      uint64_t v11 = v9 - v10[1];
      unsigned int v12 = *(unsigned __int16 *)((char *)&a2[v6 + 1] + v11);
      if (v12 <= 4)
      {
        LODWORD(v14) = 0;
        *unint64_t v5 = 0;
      }
      else
      {
        if (*(_WORD *)((char *)&a2[v6 + 2] + v11)) {
          int v13 = *((char *)&a2[v6 + 1] + v9 + *(unsigned __int16 *)((char *)&a2[v6 + 2] + v11));
        }
        else {
          int v13 = 0;
        }
        *unint64_t v5 = v13;
        if (v12 < 7)
        {
          LODWORD(v14) = 0;
        }
        else
        {
          uint64_t v14 = *(unsigned __int16 *)((char *)&a2[v6 + 2] + v11 + 2);
          if (v14) {
            LODWORD(v14) = *(unsigned int *)((char *)&a2[v6 + 1] + v9 + v14);
          }
        }
      }
      v5[1] = v14;
      uint64_t v15 = (char *)&a2[v6] + v9 - v10[1];
      if (*((unsigned __int16 *)v15 + 2) < 9u)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        uint64_t v16 = *((unsigned __int16 *)v15 + 6);
        if (v16) {
          LODWORD(v16) = *(unsigned int *)((char *)&a2[v6 + 1] + v9 + v16);
        }
      }
      v5[2] = v16;
      uint64_t v17 = v9 - v10[1];
      if (*(unsigned __int16 *)((char *)&a2[v6 + 1] + v17) >= 0xBu
        && (uint64_t v18 = *(unsigned __int16 *)((char *)&a2[v6 + 3] + v17 + 2)) != 0)
      {
        int v19 = *(unsigned int *)((char *)&a2[v6 + 1] + v9 + v18);
      }
      else
      {
        int v19 = 0;
      }
      v5[3] = v19;
      long long v20 = (char *)&a2[v6] + v9 - v10[1];
      if (*((unsigned __int16 *)v20 + 2) >= 0xDu && (uint64_t v21 = *((unsigned __int16 *)v20 + 8)) != 0) {
        int v8 = *(unsigned int *)((char *)&a2[v6 + 1] + v9 + v21);
      }
      else {
        int v8 = 0;
      }
      v5[4] = v8;
      v5 += 5;
    }
    long long v39 = v5;
    ++v7;
    ++v6;
  }
  while (v7 < v2);
  unint64_t v22 = __p;
  if (v5 == __p)
  {
    uint64_t v36 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    unsigned int v24 = 0;
    unsigned int v25 = *a1;
    unsigned int v26 = 1;
    do
    {
      if (v22[5 * v23] == 1)
      {
        long long v27 = &v22[5 * v23];
        int v29 = v27[2];
        int v28 = v27[3];
        LODWORD(v27) = v27[1] + 1;
        a1[v24 + 1] = ((_BYTE)v29 - 1) & 3 | ((v27 & 0x7F) << 8) | ((v28 & 0x7F) << 16) | 0x1C;
        int v30 = ((_WORD)v25 + ((_WORD)v29 << 8)) & 0x7F00;
        unsigned int v31 = v25 & 0xFFFF8080;
        unsigned int v32 = v25 & 0x7F;
        int v33 = v30 | v31;
        unsigned int v34 = v29 + v27;
        if (v32 <= v34) {
          LOBYTE(v32) = v34;
        }
        unsigned int v35 = v33 & 0xFFFFFF80 | v32 & 0x7F;
        *a1 = v35;
        ++v24;
        unsigned int v25 = v35;
      }
      unint64_t v23 = v26++;
    }
    while (0xCCCCCCCCCCCCCCCDLL * (v5 - v22) > v23);
    if (v24)
    {
      a1[128] = v24;
      uint64_t v36 = 4 * v24 + 4;
    }
    else
    {
      uint64_t v36 = 0;
    }
    unint64_t v5 = v22;
  }
  operator delete(v5);
  return v36;
}

void sub_242B1FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *AGX::BlitFragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~BlitFragmentProgramVariantESLState(uint64_t a1)
{
  if (*(void *)(a1 + 1320))
  {
    uint64_t v2 = *(void *)(a1 + 1328);
    long long v3 = *(NSObject **)(v2 + 16);
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 3221225472;
    v5[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v5[3] = &__block_descriptor_48_e5_v8__0l;
    v5[4] = v2;
    v5[5] = a1 + 1296;
    dispatch_sync(v3, v5);
    *(_OWORD *)(a1 + 1321) = 0u;
    *(_OWORD *)(a1 + 1312) = 0u;
    *(_OWORD *)(a1 + 1296) = 0u;
  }

  return AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::~ProgramVariantESLState((uint64_t *)a1);
}

void AGX::BlitComputeProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::BlitComputeProgramVariantESLState(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  long long v5 = *(_OWORD *)a5;
  uint64_t v6 = *(void *)(a5 + 16);
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
  v7.__r_.__value_.__s.__data_[0] = 0;
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::BlitComputeArgumentTable,false,7ul>::ProgramVariantESLState(a1, a2, a3, &v7, a4, &v5);
}

void sub_242B203D0(_Unwind_Exception *a1)
{
  AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::~ProgramVariantESLState(v1);
  _Unwind_Resume(a1);
}

void sub_242B203E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

char *ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patch(int *a1, void *a2)
{
  long long v4 = (unsigned int *)*((void *)a1 + 394);
  long long v5 = (unsigned int *)*((void *)a1 + 395);
  if (v4 != v5)
  {
    uint64_t v6 = a1 + 14;
    int v7 = *a1;
    do
    {
      if (*((char *)v4 + 31) < 0)
      {
        if (*((void *)v4 + 2))
        {
LABEL_8:
          int v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a2, (uint64_t)(v4 + 2));
          if (v8)
          {
            v6[*v4 + 1] = v6[*v4 + 1] & 0xFFFF80FF | ((((_BYTE)v7 + (*((_DWORD *)v8 + 10) >> 1)) & 0x7F) << 8);
            v6[*v4 + 130] = v6[*v4 + 130] & 0xFFFF80FF | ((((_BYTE)v7 + (*((_DWORD *)v8 + 10) >> 1)) & 0x7F) << 8);
            v6[*v4 + 259] = v6[*v4 + 259] & 0xFFFF80FF | (((v7 + (*((_DWORD *)v8 + 10) >> 1)) & 0x7F) << 8);
          }
        }
      }
      else if (*((unsigned char *)v4 + 31))
      {
        goto LABEL_8;
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  uint64_t v9 = (unsigned int *)*((void *)a1 + 397);
  unint64_t v10 = (unsigned int *)*((void *)a1 + 398);
  if (v9 != v10)
  {
    uint64_t v11 = a1 + 401;
    int v12 = a1[1];
    do
    {
      if (*((char *)v9 + 31) < 0)
      {
        if (*((void *)v9 + 2))
        {
LABEL_17:
          int v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::find<std::string>(a2, (uint64_t)(v9 + 2));
          if (v13)
          {
            v11[*v9 + 1] = v11[*v9 + 1] & 0xFFFF80FF | ((((_BYTE)v12 + (*((_DWORD *)v13 + 10) >> 1)) & 0x7F) << 8);
            v11[*v9 + 130] = v11[*v9 + 130] & 0xFFFF80FF | ((((_BYTE)v12 + (*((_DWORD *)v13 + 10) >> 1)) & 0x7F) << 8);
            v11[*v9 + 259] = v11[*v9 + 259] & 0xFFFF80FF | (((v12 + (*((_DWORD *)v13 + 10) >> 1)) & 0x7F) << 8);
          }
        }
      }
      else if (*((unsigned char *)v9 + 31))
      {
        goto LABEL_17;
      }
      v9 += 8;
    }
    while (v9 != v10);
  }
  uint64_t v14 = (char *)*((void *)a1 + 403);

  return ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::fillVITBuffer((char *)a1, v14);
}

void sub_242B20900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::HAL200::RayTracingAccelerationStructure::~RayTracingAccelerationStructure((AGX::HAL200::RayTracingAccelerationStructure *)va);
  _Unwind_Resume(a1);
}

void AGX::HAL200::RayTracingAccelerationStructure::~RayTracingAccelerationStructure(AGX::HAL200::RayTracingAccelerationStructure *this)
{
  if (*((_DWORD *)this + 6) && !*((unsigned char *)this + 40))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)this + 4) + 40);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)this + 4);
    uint64_t v4 = *((unsigned int *)this + 6);
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 16 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + *v6 + 24) + 16 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
}

void sub_242B20E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation((unsigned int *)va);
  _Unwind_Resume(a1);
}

void sub_242B21078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t ProgressBinsSynchronizeBufferAccess(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v6 = result;
    if (*(unsigned char *)(result + 48))
    {
      uint64_t v8 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)(result + 96), a2);
      BOOL v9 = v8;
      if (v8)
      {
        unint64_t v10 = v8;
        do
          unint64_t v10 = (void *)*v10;
        while (v10 && v10[2] == a2);
        if (v10 != v8)
        {
          if (a3 == 1)
          {
            do
            {
              uint64_t v13 = *((unsigned int *)v9 + 8);
              uint64_t v14 = (unsigned __int16)*((_DWORD *)v9 + 9);
              *(_WORD *)(v6 + 42) = *((_DWORD *)v9 + 9);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v13, v14);
              BOOL v9 = (void *)*v9;
            }
            while (v9 != v10);
          }
          else
          {
            do
            {
              if (v9[3] == 1)
              {
                uint64_t v18 = *((unsigned int *)v9 + 8);
                uint64_t v19 = (unsigned __int16)*((_DWORD *)v9 + 9);
                *(_WORD *)(v6 + 42) = *((_DWORD *)v9 + 9);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, v18, v19);
              }
              BOOL v9 = (void *)*v9;
            }
            while (v9 != v10);
          }
        }
      }
      uint64_t v15 = operator new(0x40uLL);
      v15[2] = a2;
      v15[3] = a3;
      v15[4] = -1;
      v15[5] = 0;
      v15[6] = 0;
      *((unsigned char *)v15 + 56) = 0;
      unint64_t v16 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      unint64_t v17 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v16 >> 47) ^ v16);
      *uint64_t v15 = 0;
      v15[1] = 0x9DDFEA08EB382D69 * (v17 ^ (v17 >> 47));
      return (uint64_t)std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi((void *)(v6 + 56), v15);
    }
    else
    {
      __n128 result = ProgressBinsSynchronizeBuffer(result, (void *)a2);
      if ((result & 0x80000000) == 0)
      {
        uint64_t v11 = *(unsigned __int16 *)(v6 + 42);
        int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 16);
        return v12(a4, result, v11);
      }
    }
  }
  return result;
}

void sub_242B24B58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_handle_merge_multi[abi:nn180100]<std::allocator<ADSCommandProgressBins::BufferUsage>>(void *result, void *a2)
{
  uint64_t v3 = a2 + 2;
  uint64_t v2 = (void *)a2[2];
  if (v2)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 2;
    while (1)
    {
      uint64_t v8 = v2;
      BOOL v9 = v2 + 2;
      unint64_t v10 = v2[2];
      unint64_t v11 = HIDWORD(v10);
      unint64_t v12 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
      unint64_t v13 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) ^ ((0x9DDFEA08EB382D69 * (v11 ^ (v12 >> 47) ^ v12)) >> 47));
      __n128 result = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare((uint64_t)v5, v13, v9);
      int8x8_t v14 = (int8x8_t)a2[1];
      unint64_t v15 = v8[1];
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      if (v16.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v14) {
          v15 %= *(void *)&v14;
        }
      }
      else
      {
        v15 &= *(void *)&v14 - 1;
      }
      uint64_t v2 = (void *)*v8;
      unint64_t v17 = *(void **)(*a2 + 8 * v15);
      do
      {
        uint64_t v18 = v17;
        unint64_t v17 = (void *)*v17;
      }
      while (v17 != v8);
      if (v18 != v3)
      {
        unint64_t v19 = v18[1];
        if (v16.u32[0] > 1uLL)
        {
          if (v19 >= *(void *)&v14) {
            v19 %= *(void *)&v14;
          }
        }
        else
        {
          v19 &= *(void *)&v14 - 1;
        }
        long long v20 = (void *)*v8;
        if (v19 == v15) {
          goto LABEL_25;
        }
      }
      if (!v2) {
        break;
      }
      unint64_t v21 = v2[1];
      if (v16.u32[0] > 1uLL)
      {
        if (v21 >= *(void *)&v14) {
          v21 %= *(void *)&v14;
        }
      }
      else
      {
        v21 &= *(void *)&v14 - 1;
      }
      long long v20 = (void *)*v8;
      if (v21 != v15) {
        break;
      }
LABEL_26:
      unint64_t v22 = v20[1];
      if (v16.u32[0] > 1uLL)
      {
        if (v22 >= *(void *)&v14) {
          v22 %= *(void *)&v14;
        }
      }
      else
      {
        v22 &= *(void *)&v14 - 1;
      }
      if (v22 != v15)
      {
        *(void *)(*a2 + 8 * v22) = v18;
        long long v20 = (void *)*v8;
      }
LABEL_32:
      *uint64_t v18 = v20;
      --a2[3];
      *uint64_t v8 = 0;
      v8[1] = v13;
      int8x8_t v23 = (int8x8_t)v5[1];
      uint8x8_t v24 = (uint8x8_t)vcnt_s8(v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v23) {
          v13 %= *(void *)&v23;
        }
      }
      else
      {
        v13 &= *(void *)&v23 - 1;
      }
      if (result)
      {
        *uint64_t v8 = *result;
        *__n128 result = v8;
        if (!*v8) {
          goto LABEL_5;
        }
        unint64_t v7 = *(void *)(*v8 + 8);
        if (v24.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v23) {
            v7 %= *(void *)&v23;
          }
        }
        else
        {
          v7 &= *(void *)&v23 - 1;
        }
        if (v7 == v13) {
          goto LABEL_5;
        }
      }
      else
      {
        *uint64_t v8 = v5[2];
        v5[2] = v8;
        *(void *)(*v5 + 8 * v13) = v6;
        if (!*v8) {
          goto LABEL_5;
        }
        unint64_t v7 = *(void *)(*v8 + 8);
        if (v24.u32[0] <= 1uLL)
        {
          v7 &= *(void *)&v23 - 1;
        }
        else if (v7 >= *(void *)&v23)
        {
          v7 %= *(void *)&v23;
        }
      }
      *(void *)(*v5 + 8 * v7) = v8;
LABEL_5:
      ++v5[3];
      if (!v2) {
        return result;
      }
    }
    *(void *)(*a2 + 8 * v15) = 0;
    long long v20 = (void *)*v8;
LABEL_25:
    if (!v20) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t prime = v11;
    }
    else {
      size_t prime = v10;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_85;
    }
    if (prime >= v6) {
      goto LABEL_40;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (prime <= v26) {
      size_t prime = v26;
    }
    if (prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_85:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      unint64_t v13 = operator new(8 * prime);
      int8x8_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (prime != v15);
      uint64_t v17 = a1 + 16;
      uint8x8_t v16 = *(void **)(a1 + 16);
      if (v16)
      {
        size_t v18 = v16[1];
        size_t v19 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v18 >= prime) {
            v18 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v18) = v17;
          for (i = (void *)*v16; *v16; i = (void *)*v16)
          {
            size_t v37 = i[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v18)
            {
              uint8x8_t v16 = i;
            }
            else
            {
              long long v38 = i;
              if (*(void *)(*(void *)a1 + 8 * v37))
              {
                do
                {
                  long long v39 = v38;
                  long long v38 = (void *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *uint8x8_t v16 = v38;
                uint64_t v40 = 8 * v37;
                *long long v39 = **(void **)(*(void *)a1 + v40);
                **(void **)(*(void *)a1 + v40) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v37) = v16;
                uint8x8_t v16 = i;
                size_t v18 = v37;
              }
            }
          }
        }
        else
        {
          size_t v20 = v18 & v19;
          *(void *)(*(void *)a1 + 8 * v20) = v17;
          for (j = (void *)*v16; *v16; j = (void *)*v16)
          {
            size_t v22 = j[1] & v19;
            if (v22 == v20)
            {
              uint8x8_t v16 = j;
            }
            else
            {
              int8x8_t v23 = j;
              if (*(void *)(*(void *)a1 + 8 * v22))
              {
                do
                {
                  uint8x8_t v24 = v23;
                  int8x8_t v23 = (void *)*v23;
                }
                while (v23 && j[2] == v23[2]);
                *uint8x8_t v16 = v23;
                uint64_t v25 = 8 * v22;
                *uint8x8_t v24 = **(void **)(*(void *)a1 + v25);
                **(void **)(*(void *)a1 + v25) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v22) = v16;
                uint8x8_t v16 = j;
                size_t v20 = v22;
              }
            }
          }
        }
      }
      unint64_t v6 = prime;
    }
    else
    {
      int v48 = *(void **)a1;
      *(void *)a1 = 0;
      if (v48) {
        operator delete(v48);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  unint64_t v30 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
    unsigned int v31 = *(void **)(*(void *)a1 + 8 * (v30 & a2));
    if (v31)
    {
      int v32 = 0;
      do
      {
        __n128 result = v31;
        unsigned int v31 = (void *)*v31;
        if (!v31) {
          break;
        }
        uint64_t v36 = v31[1];
        if ((v36 & v30) != (v30 & a2)) {
          break;
        }
        BOOL v33 = v36 == a2 && v31[2] == *a3;
        char v34 = v32 & !v33;
        v32 |= v33;
      }
      while ((v34 & 1) == 0);
      return result;
    }
    return 0;
  }
  unint64_t v41 = a2;
  if (v6 <= a2) {
    unint64_t v41 = a2 % v6;
  }
  long long v42 = *(void **)(*(void *)a1 + 8 * v41);
  if (!v42) {
    return 0;
  }
  int v43 = 0;
  do
  {
    __n128 result = v42;
    long long v42 = (void *)*v42;
    if (!v42) {
      break;
    }
    unint64_t v46 = v42[1];
    unint64_t v47 = v46;
    if (v46 >= v6) {
      unint64_t v47 = v46 % v6;
    }
    if (v47 != v41) {
      break;
    }
    BOOL v44 = v46 == a2 && v42[2] == *a3;
    int v45 = v43 & !v44;
    v43 |= v44;
  }
  while (v45 != 1);
  return result;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(uint64_t a1, int a2, unsigned __int16 a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v5 = a3 & 0xFF00;
  uint64_t v6 = a3;
  BOOL v7 = (a2 - 98) < 0x13 || a3 == 0;
  {
    {
    }
    {
    }
    if (shouldDumpOrVerifyBVHs(void)::once != -1) {
      dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_607);
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify = 0;
  }
  int v8 = !v7;
  if (!v5) {
    int v8 = 1;
  }
  int v36 = 24;
  long long v38 = 0;
  uint64_t v39 = 0;
  long long __p = 0;
  unsigned int v35 = (unsigned int (**)(void **))&unk_26F853108;
  if (!v6) {
    int v8 = 1;
  }
  if (v8) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = 0x80000000;
  }
  int v10 = v9 | (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify << 30);
  int v11 = (v10 >> 31) & 0x9C;
  unsigned int v40 = v10 & 0xC0000000 | a2 & 0x3FFFFFFF;
  uint64_t v12 = *(void *)(*(void *)a1 + 808);
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(int,std::optional<BOOL>)::verify) {
    int v13 = 312;
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = v11 + (a2 & 0x3FFFFFFFu) + v13;
  uint64_t v15 = (atomic_ullong *)(v12 + 8 * v14 + 80);
  unint64_t explicit = atomic_load_explicit(v15, memory_order_acquire);
  if (!explicit)
  {
    uint64_t v17 = (os_unfair_lock_s *)(v12 + 72);
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 72));
    uint64_t v42 = 0;
    int v43 = &v42;
    uint64_t v44 = 0x2020000000;
    unint64_t v45 = 0;
    unint64_t explicit = *v15;
    unint64_t v45 = explicit;
    if (!explicit)
    {
      uint64_t v18 = *(void *)(v12 + 6008);
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 3221225472;
      v41[2] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE30findOrCreateBVHBuilderPipelineERNS_20BVHBuilderProgramKeyE_block_invoke;
      v41[3] = &unk_26516E908;
      v41[4] = &v42;
      v41[5] = v12;
      v41[6] = v14;
      uint64_t v19 = *(void *)(v18 + 8);
      if (v35[3]((void **)&v35)) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      unint64_t v21 = objc_opt_new();
      [v21 setSync:1];
      [v21 setPipelineCache:v20];
      [v21 setBinaryArchives:0];
      v46[0] = MEMORY[0x263EF8330];
      v46[1] = 3221225472;
      v46[2] = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
      v46[3] = &unk_26516F7C0;
      v46[4] = v41;
      size_t v47 = 0;
      int v48 = 0;
      ((void (*)(unsigned int (***)(void **), const void **, size_t *))v35[2])(&v35, &v48, &v47);
      size_t v22 = dispatch_data_create(v48, v47, 0, 0);
      [v21 setDriverKeyData:v22];
      if ([v21 airScript])
      {
        int8x8_t v23 = [v21 airScript];
        long long v56 = 0uLL;
        v57[0] = 0;
        *(void *)&long long v56 = dispatch_data_create_map(v23, (const void **)&v56 + 1, v57);
        uint64_t v24 = *((void *)&v56 + 1);
        uint64_t v25 = **((_DWORD **)&v56 + 1);
        CC_SHA256_Init(&c);
        ((void (*)(unsigned int (***)(void **), CC_SHA256_CTX *))*v35)(&v35, &c);
        *(void *)len = 0;
        data = 0;
        if (AGX::GetSerializedVertexFormat((AGX *)(v24 + v25), &data, (size_t *)len, v26, v27))
        {
          uint64_t v28 = data;
          CC_SHA256_Update(&c, data, len[0]);
          free(v28);
        }
        CC_SHA256_Final((unsigned __int8 *)&md, &c);
        dispatch_release((dispatch_object_t)v56);
        long long v56 = md;
        *(_OWORD *)long long v57 = v53;
        [v21 setVendorPluginFunctionId:&v56];
      }
      *(void *)c.count = MEMORY[0x263EF8330];
      *(void *)c.hash = 3221225472;
      *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke;
      *(void *)&c.hash[4] = &unk_26516F810;
      *(void *)&c.hash[6] = v21;
      *(void *)c.wbuf = v46;
      if ([v21 function])
      {
        uint64_t v29 = mach_absolute_time();
        unint64_t v30 = *(void **)v18;
        *(void *)&long long md = MEMORY[0x263EF8330];
        *((void *)&md + 1) = 3221225472;
        *(void *)&long long v53 = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
        *((void *)&v53 + 1) = &unk_26516F860;
        p_CC_SHA256_CTX c = &c;
        uint64_t v55 = v29;
        [v30 compileFunctionRequest:v21 completionHandler:&md];
      }
      else
      {
        if ([v21 frameworkData] || objc_msgSend(v21, "pipelineOptions")) {
          AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
        }
        *(void *)&long long md = MEMORY[0x263EF8330];
        *((void *)&md + 1) = 3221225472;
        *(void *)&long long v53 = ___ZN3AGX8Compiler14compileProgramINS_20BVHBuilderProgramKeyE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSE_SE_SE_SE_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
        *((void *)&v53 + 1) = &unk_26516F838;
        p_CC_SHA256_CTX c = &c;
        uint64_t v31 = objc_msgSend((id)objc_msgSend(v21, "binaryArchives"), "count");
        int v32 = *(void **)v18;
        uint64_t v33 = [v21 driverKeyData];
        if (v31) {
          objc_msgSend(v32, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v33, objc_msgSend(v21, "binaryArchives"), 0, objc_msgSend(v21, "pipelineCache"), objc_msgSend(v21, "sync"), &md);
        }
        else {
          objc_msgSend(v32, "compileRequest:pipelineCache:sync:completionHandler:", v33, objc_msgSend(v21, "pipelineCache"), objc_msgSend(v21, "sync"), &md);
        }
      }
      dispatch_release(v22);

      unint64_t explicit = v43[3];
    }
    _Block_object_dispose(&v42, 8);
    os_unfair_lock_unlock(v17);
  }
  unsigned int v35 = (unsigned int (**)(void **))&unk_26F853148;
  if (__p)
  {
    long long v38 = __p;
    operator delete(__p);
  }
  return explicit;
}

void sub_242B258EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  dispatch_release(*(dispatch_object_t *)(v24 - 144));
  _Block_object_dispose(&a23, 8);
  os_unfair_lock_unlock(v23);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ProgressBinsSynchronizeBuffer(uint64_t a1, void *a2)
{
  if (!a2) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v4 = [a2 gpuAddress];
  unint64_t v5 = 73244475 * ((73244475 * (v4 ^ (v4 >> 16))) ^ ((73244475 * (v4 ^ (v4 >> 16))) >> 16));
  unint64_t v6 = v5 ^ (v5 >> 16);
  unint64_t v7 = *(unsigned int *)(a1 + 136);
  unint64_t v8 = v6 % v7;
  if (((v6 % v7) & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v9 = *(void *)(a1 + 160);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v6 % v7;
      if (v9 <= v8) {
        unint64_t v11 = v8 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 + 0xFFFFFFFF) & v8;
    }
    int v13 = *(uint64_t ***)(*(void *)(a1 + 152) + 8 * v11);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (v14)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v14[1];
            if (v16 == v8)
            {
              if (*((_DWORD *)v14 + 4) == v8) {
                return 0xFFFFFFFFLL;
              }
            }
            else if ((v16 & (v9 - 1)) != v11)
            {
              goto LABEL_26;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_26;
            }
          }
        }
        while (1)
        {
          unint64_t v15 = v14[1];
          if (v15 == v8)
          {
            if (*((_DWORD *)v14 + 4) == v8) {
              return 0xFFFFFFFFLL;
            }
          }
          else
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
            if (v15 != v11)
            {
LABEL_26:
              uint64_t v12 = (void *)(a1 + 144);
              goto LABEL_27;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
          if (!v14) {
            goto LABEL_26;
          }
        }
      }
    }
    uint64_t v12 = (void *)(a1 + 144);
LABEL_27:
    uint8x8_t v18 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v18.i16[0] = vaddlv_u8(v18);
    if (v18.u32[0] > 1uLL)
    {
      unint64_t v2 = v8;
      if (v9 <= v8) {
        unint64_t v2 = v8 % v9;
      }
    }
    else
    {
      unint64_t v2 = (v9 + 0xFFFFFFFF) & v8;
    }
    uint64_t v19 = *(uint64_t ***)(*(void *)(a1 + 152) + 8 * v2);
    if (v19)
    {
      uint64_t v20 = *v19;
      if (v20)
      {
        if (v18.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v20[1];
            if (v22 == v8)
            {
              if (*((_DWORD *)v20 + 4) == v8) {
                return *(unsigned int *)(*v12 + 4 * v8);
              }
            }
            else if ((v22 & (v9 - 1)) != v2)
            {
              goto LABEL_46;
            }
            uint64_t v20 = (uint64_t *)*v20;
            if (!v20) {
              goto LABEL_46;
            }
          }
        }
        do
        {
          unint64_t v21 = v20[1];
          if (v21 == v8)
          {
            if (*((_DWORD *)v20 + 4) == v8) {
              return *(unsigned int *)(*v12 + 4 * v8);
            }
          }
          else
          {
            if (v21 >= v9) {
              v21 %= v9;
            }
            if (v21 != v2) {
              break;
            }
          }
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    uint64_t v12 = (void *)(a1 + 144);
  }
LABEL_46:
  int8x8_t v23 = operator new(0x18uLL);
  *int8x8_t v23 = 0;
  v23[1] = v8;
  *((_DWORD *)v23 + 4) = v8;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 176) + 1);
  float v25 = *(float *)(a1 + 184);
  if (!v9 || (float)(v25 * (float)v9) < v24)
  {
    BOOL v26 = 1;
    if (v9 >= 3) {
      BOOL v26 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v9);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 160);
    }
    if (prime <= v9)
    {
      if (prime >= v9) {
        goto LABEL_83;
      }
      unint64_t v42 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 176) / *(float *)(a1 + 184));
      if (v9 < 3 || (uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        unint64_t v42 = std::__next_prime(v42);
      }
      else
      {
        uint64_t v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2) {
          unint64_t v42 = v44;
        }
      }
      if (prime <= v42) {
        size_t prime = v42;
      }
      if (prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 160);
LABEL_83:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v2 = v8 % v9;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v9 + 0xFFFFFFFF) & v8;
        }
        goto LABEL_96;
      }
      if (!prime)
      {
        long long v52 = *(void **)(a1 + 152);
        *(void *)(a1 + 152) = 0;
        if (v52) {
          operator delete(v52);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 160) = 0;
        goto LABEL_83;
      }
    }
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unint64_t v30 = operator new(8 * prime);
    uint64_t v31 = *(void **)(a1 + 152);
    *(void *)(a1 + 152) = v30;
    if (v31) {
      operator delete(v31);
    }
    uint64_t v32 = 0;
    *(void *)(a1 + 160) = prime;
    do
      *(void *)(*(void *)(a1 + 152) + 8 * v32++) = 0;
    while (prime != v32);
    uint64_t v34 = a1 + 168;
    uint64_t v33 = *(void **)(a1 + 168);
    if (!v33)
    {
LABEL_82:
      unint64_t v9 = prime;
      goto LABEL_83;
    }
    size_t v35 = v33[1];
    size_t v36 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v37 = v35 & v36;
      *(void *)(*(void *)(a1 + 152) + 8 * v37) = v34;
      for (i = (void *)*v33; *v33; i = (void *)*v33)
      {
        size_t v39 = i[1] & v36;
        if (v39 == v37)
        {
          uint64_t v33 = i;
        }
        else
        {
          uint64_t v40 = *(void *)(a1 + 152);
          if (*(void *)(v40 + 8 * v39))
          {
            *uint64_t v33 = *i;
            uint64_t v41 = 8 * v39;
            void *i = **(void **)(*(void *)(a1 + 152) + v41);
            **(void **)(*(void *)(a1 + 152) + v41) = i;
          }
          else
          {
            *(void *)(v40 + 8 * v39) = v33;
            uint64_t v33 = i;
            size_t v37 = v39;
          }
        }
      }
      goto LABEL_82;
    }
    if (v35 >= prime) {
      v35 %= prime;
    }
    *(void *)(*(void *)(a1 + 152) + 8 * v35) = v34;
    unint64_t v45 = (void *)*v33;
    if (!*v33) {
      goto LABEL_82;
    }
    while (1)
    {
      size_t v47 = v45[1];
      if (v47 >= prime) {
        v47 %= prime;
      }
      if (v47 != v35)
      {
        uint64_t v48 = *(void *)(a1 + 152);
        if (!*(void *)(v48 + 8 * v47))
        {
          *(void *)(v48 + 8 * v47) = v33;
          goto LABEL_87;
        }
        *uint64_t v33 = *v45;
        uint64_t v46 = 8 * v47;
        *unint64_t v45 = **(void **)(*(void *)(a1 + 152) + v46);
        **(void **)(*(void *)(a1 + 152) + v46) = v45;
        unint64_t v45 = v33;
      }
      size_t v47 = v35;
LABEL_87:
      uint64_t v33 = v45;
      unint64_t v45 = (void *)*v45;
      size_t v35 = v47;
      if (!v45) {
        goto LABEL_82;
      }
    }
  }
LABEL_96:
  uint64_t v49 = *(void *)(a1 + 152);
  uint64_t v50 = *(void **)(v49 + 8 * v2);
  if (v50)
  {
    *int8x8_t v23 = *v50;
  }
  else
  {
    *int8x8_t v23 = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = v23;
    *(void *)(v49 + 8 * v2) = a1 + 168;
    if (!*v23) {
      goto LABEL_105;
    }
    unint64_t v51 = *(void *)(*v23 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v51 >= v9) {
        v51 %= v9;
      }
    }
    else
    {
      v51 &= v9 - 1;
    }
    uint64_t v50 = (void *)(*(void *)(a1 + 152) + 8 * v51);
  }
  *uint64_t v50 = v23;
LABEL_105:
  ++*(void *)(a1 + 176);
  return *(unsigned int *)(*v12 + 4 * v8);
}

void sub_242B25ECC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  unint64_t v6 = HIDWORD(v4);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v5 - 1) = v8;
  __n128 result = std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi_prepare((uint64_t)a1, v8, v5);
  int8x8_t v10 = (int8x8_t)a1[1];
  unint64_t v11 = *(v5 - 1);
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  unint64_t v13 = v11 % *(void *)&v10;
  if (v11 < *(void *)&v10) {
    unint64_t v13 = *(v5 - 1);
  }
  uint64_t v14 = *(void *)&v10 - 1;
  uint64_t v15 = (*(void *)&v10 - 1) & v11;
  if (v12.u32[0] <= 1uLL) {
    unint64_t v13 = v15;
  }
  if (!result)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v13) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v16 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
    }
    else
    {
      v16 &= v14;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v16) = a2;
    goto LABEL_19;
  }
  *a2 = *result;
  *__n128 result = a2;
  if (*a2)
  {
    unint64_t v16 = *(void *)(*a2 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
    }
    else
    {
      v16 &= v14;
    }
    if (v16 != v13) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return result;
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline(uint64_t result, uint64_t a2, int a3, int a4)
{
  unint64_t v6 = (void *)result;
  uint64_t v7 = *(void *)(a2 + 88);
  if (a4) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = 3;
  }
  uint64_t v9 = v7 + 16;
  if (a4)
  {
    if (!*(void *)(v9 + 32 * v8 + 48))
    {
      __n128 result = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, 10, 0);
      if ((result & 1) == 0) {
LABEL_16:
      }
        abort();
    }
  }
  uint64_t v10 = (a3 + 15) & 0xFFFFFFF0;
  uint64_t v11 = v9 + 32 * v8;
  unint64_t v13 = *(void *)(v11 + 40);
  uint8x8_t v12 = (void *)(v11 + 40);
  uint64_t v15 = v12 + 1;
  uint64_t v14 = v12[1];
  uint64_t v16 = v10 | 0xF;
  unint64_t v17 = v14 + (v10 | 0xF);
  if (v17 > v13)
  {
    __n128 result = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, v8, 0);
    uint64_t v14 = *v15;
    if (!result) {
      goto LABEL_8;
    }
    unint64_t v17 = v14 + v16;
    if ((unint64_t)(v14 + v16) > *v12) {
      goto LABEL_16;
    }
  }
  v12[2] = v17;
LABEL_8:
  unint64_t v18 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = *(void *)(v9 + 32 * v8 + 64);
  *uint64_t v15 = v18 + v10;
  *unint64_t v6 = v18;
  v6[1] = v18 + v19;
  if (a4 && !v18) {
    __n128 result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v7 + 16);
  }
  v6[2] = *(void *)(*(void *)(v7 + 40) + (v8 << 6) + 32) + (int)*MEMORY[0x263F4B188];
  return result;
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, int a6, int a7)
{
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(v12 + 88);
  *(void *)(v13 + 15528) = a3;
  *(void *)(*(void *)(v13 + 1936) + 536) = a3;
  *(void *)(v13 + 11656) = a4;
  *(void *)(v13 + 16624) |= 1uLL;
  *(_DWORD *)(v13 + 16656) |= 1u;
  uint64_t v14 = *(void *)(v12 + 88);
  uint64_t v15 = *a5;
  uint64_t v16 = a5[3];
  *(void *)(v14 + 15552) = *a5;
  *(void *)(*(void *)(v14 + 1936) + 560) = v15;
  *(void *)(v14 + 11680) = v16;
  *(void *)(v14 + 16624) |= 8uLL;
  *(_DWORD *)(v14 + 16656) |= 1u;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v25, v12, 36, 1);
  uint64_t v17 = v25;
  uint64_t v18 = v26;
  uint64_t v19 = v27;
  *(_DWORD *)(v25 + 28) = a6;
  *(_DWORD *)(v17 + 32) = a7;
  *(unsigned char *)(v17 + 24) = *a5 != 0;
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(v20 + 88);
  *(void *)(v21 + 15536) = v18 + 24;
  *(void *)(*(void *)(v21 + 1936) + 544) = v18 + 24;
  *(void *)(v21 + 11664) = v19;
  *(void *)(v21 + 16624) |= 2uLL;
  *(_DWORD *)(v21 + 16656) |= 1u;
  uint64_t v22 = *(void *)(v20 + 88);
  *(void *)(v22 + 15544) = v18;
  *(void *)(*(void *)(v22 + 1936) + 552) = v18;
  *(void *)(v22 + 11672) = v19;
  *(void *)(v22 + 16624) |= 4uLL;
  *(_DWORD *)(v22 + 16656) |= 1u;
  *(_OWORD *)uint64_t v17 = xmmword_242EA8510;
  *(void *)(v17 + 16) = 0x100000001;
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 127, 0);
  uint64_t v24 = *(void *)(v13 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v13, Pipeline);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v13, 22, dword_242EAADC8, dword_242EAADC8);
  if (*(_DWORD *)(v13 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v13, 22);
  }
  if (v24) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v13, v24);
  }
  [*(id *)(a1 + 8) memoryBarrierWithScope:1];

  AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v13, 22, a2, v18, v19);
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, void *a5, unsigned __int8 a6, int a7, uint64_t *a8, uint64_t *a9, int a10)
{
  int v15 = a6;
  if (!a6)
  {
    int v83 = a7;
    __n128 v84 = a8;
    uint64_t v20 = (char *)*a5;
    uint64_t v22 = a5[3];
    int v23 = 1;
    goto LABEL_12;
  }
  if (!a5) {
    return;
  }
  __n128 v84 = a8;
  int v83 = a7;
  if (a6 == 1)
  {
    uint64_t v16 = *(void **)(*(void *)(a1 + 8) + 88);
    uint64_t v17 = v16[20];
    uint64_t v18 = v17 + 31;
    if ((unint64_t)(v17 + 31) > v16[19])
    {
      int v78 = AGX::DataBufferAllocator<34ul>::growNoInline(v16 + 2, 3, 0);
      uint64_t v17 = v16[20];
      if (!v78) {
        goto LABEL_6;
      }
      uint64_t v18 = v17 + 31;
      if ((unint64_t)(v17 + 31) > v16[19]) {
        goto LABEL_39;
      }
    }
    v16[21] = v18;
LABEL_6:
    uint64_t v19 = (void *)((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v20 = (char *)v19 + v16[22];
    uint64_t v21 = (int)*MEMORY[0x263F4B188];
    *uint64_t v19 = a5;
    v16[20] = v19 + 2;
    uint64_t v22 = *(void *)(v16[5] + 224) + v21;
    goto LABEL_9;
  }
  uint64_t v20 = (char *)*a5;
  uint64_t v22 = a5[3];
LABEL_9:
  if ((((unint64_t)a5 + 4294967294u) / 0xFFFFFFFF) <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = ((unint64_t)a5 + 4294967294u) / 0xFFFFFFFF;
  }
LABEL_12:
  uint64_t v92 = 0;
  int64x2_t v93 = 0uLL;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v92, *(void *)(a1 + 8), 4, 1);
  v88[0] = v93.i64[0];
  v88[1] = v92;
  v88[2] = 4;
  uint64_t v89 = v93.i64[1];
  *(_DWORD *)uint64_t v92 = v23;
  unint64_t v24 = 0x268D57000uLL;
  uint64_t v25 = *(void **)(*(void *)(a1 + 8) + 88);
  uint64_t v26 = v25[20];
  uint64_t v27 = v26 + 31;
  __n128 v86 = a3;
  uint64_t v87 = v22;
  __n128 v85 = a2;
  unsigned int v80 = v23;
  if ((unint64_t)(v26 + 31) <= v25[19])
  {
LABEL_13:
    v25[21] = v27;
    goto LABEL_14;
  }
  int v74 = AGX::DataBufferAllocator<34ul>::growNoInline(v25 + 2, 3, 0);
  uint64_t v26 = v25[20];
  if (v74)
  {
    uint64_t v27 = v26 + 31;
    unint64_t v24 = 0x268D57000;
    if ((unint64_t)(v26 + 31) > v25[19]) {
      goto LABEL_39;
    }
    goto LABEL_13;
  }
  unint64_t v24 = 0x268D57000;
LABEL_14:
  unint64_t v28 = (_DWORD *)((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = v25[22];
  unint64_t v30 = (int *)MEMORY[0x263F4B188];
  uint64_t v31 = (int)*MEMORY[0x263F4B188];
  *unint64_t v28 = a4;
  v25[20] = v28 + 4;
  uint64_t v32 = *(void *)(v25[5] + 224);
  uint64_t v33 = *(void **)(*(void *)(a1 + 8) + *(int *)(v24 + 1992));
  uint64_t v34 = v33[20];
  uint64_t v35 = v34 + 31;
  __n128 v79 = a5;
  int v82 = v15;
  uint64_t v81 = (uint64_t)v20;
  if ((unint64_t)(v34 + 31) <= v33[19])
  {
LABEL_15:
    v33[21] = v35;
    goto LABEL_16;
  }
  unint64_t v75 = v24;
  int v76 = AGX::DataBufferAllocator<34ul>::growNoInline(v33 + 2, 3, 0);
  uint64_t v34 = v33[20];
  if (v76)
  {
    uint64_t v35 = v34 + 31;
    unint64_t v24 = v75;
    unint64_t v30 = (int *)MEMORY[0x263F4B188];
    if ((unint64_t)(v34 + 31) > v33[19]) {
      goto LABEL_39;
    }
    goto LABEL_15;
  }
  unint64_t v24 = v75;
  unint64_t v30 = (int *)MEMORY[0x263F4B188];
LABEL_16:
  size_t v36 = (_DWORD *)((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v33[22];
  uint64_t v38 = *v30;
  *size_t v36 = v83;
  v33[20] = v36 + 4;
  uint64_t v39 = *(void *)(v33[5] + 224);
  uint64_t v40 = *(void **)(*(void *)(a1 + 8) + *(int *)(v24 + 1992));
  uint64_t v41 = v40[20];
  uint64_t v42 = v41 + 31;
  if ((unint64_t)(v41 + 31) <= v40[19])
  {
LABEL_17:
    v40[21] = v42;
    goto LABEL_18;
  }
  int v77 = AGX::DataBufferAllocator<34ul>::growNoInline(v40 + 2, 3, 0);
  uint64_t v41 = v40[20];
  if (v77)
  {
    uint64_t v42 = v41 + 31;
    unint64_t v24 = 0x268D57000;
    unint64_t v30 = (int *)MEMORY[0x263F4B188];
    if ((unint64_t)(v41 + 31) <= v40[19]) {
      goto LABEL_17;
    }
LABEL_39:
    abort();
  }
  unint64_t v24 = 0x268D57000;
  unint64_t v30 = (int *)MEMORY[0x263F4B188];
LABEL_18:
  uint64_t v43 = v39 + v38;
  uint64_t v44 = (_DWORD *)((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v45 = (char *)v44 + v40[22];
  uint64_t v46 = *v30;
  *uint64_t v44 = a10;
  v40[20] = v44 + 4;
  uint64_t v47 = *(void *)(v40[5] + 224);
  uint64_t v48 = *(void *)(a1 + 8);
  uint64_t v49 = *(int *)(v24 + 1992);
  unint64_t v50 = v24;
  uint64_t v51 = *(void *)(v48 + v49);
  uint64_t v52 = *v84;
  uint64_t v53 = v84[3];
  *(void *)(v51 + 15568) = *v84;
  *(void *)(*(void *)(v51 + 1936) + 576) = v52;
  *(void *)(v51 + 11696) = v53;
  *(void *)(v51 + 16624) |= 0x20uLL;
  *(_DWORD *)(v51 + 16656) |= 1u;
  uint64_t v54 = *(void *)(v48 + v49);
  uint64_t v55 = *a9;
  uint64_t v56 = a9[3];
  *(void *)(v54 + 15616) = *a9;
  *(void *)(*(void *)(v54 + 1936) + 624) = v55;
  *(void *)(v54 + 11744) = v56;
  *(void *)(v54 + 16624) |= 0x800uLL;
  *(_DWORD *)(v54 + 16656) |= 1u;
  uint64_t v57 = *(void *)(v48 + v49);
  uint64_t v58 = *v85;
  uint64_t v59 = v85[3];
  *(void *)(v57 + 15624) = *v85;
  *(void *)(*(void *)(v57 + 1936) + 632) = v58;
  *(void *)(v57 + 11752) = v59;
  *(void *)(v57 + 16624) |= 0x1000uLL;
  *(_DWORD *)(v57 + 16656) |= 1u;
  uint64_t v60 = *(void *)(v48 + v49);
  uint64_t v61 = *v86;
  uint64_t v62 = v86[3];
  *(void *)(v60 + 15632) = *v86;
  *(void *)(*(void *)(v60 + 1936) + 640) = v61;
  *(void *)(v60 + 11760) = v62;
  *(void *)(v60 + 16624) |= 0x2000uLL;
  *(_DWORD *)(v60 + 16656) |= 1u;
  uint64_t v63 = *(void *)(v48 + v49);
  uint64_t v64 = v47 + v46;
  *(void *)(v63 + 15640) = v81;
  *(void *)(*(void *)(v63 + 1936) + 648) = v81;
  *(void *)(v63 + 11768) = v87;
  *(void *)(v63 + 16624) |= 0x4000uLL;
  *(_DWORD *)(v63 + 16656) |= 1u;
  uint64_t v65 = *(void *)(v48 + v49);
  *(void *)(v65 + 15600) = (char *)v36 + v37;
  *(void *)(*(void *)(v65 + 1936) + 608) = (char *)v36 + v37;
  *(void *)(v65 + 11728) = v43;
  *(void *)(v65 + 16624) |= 0x200uLL;
  *(_DWORD *)(v65 + 16656) |= 1u;
  uint64_t v66 = *(void *)(v48 + v49);
  *(void *)(v66 + 15704) = v45;
  *(void *)(*(void *)(v66 + 1936) + 712) = v45;
  *(void *)(v66 + 11832) = v64;
  *(void *)(v66 + 16624) |= 0x400000uLL;
  *(_DWORD *)(v66 + 16656) |= 1u;
  uint64_t v67 = *(void *)(v48 + v49);
  *(void *)(v67 + 15592) = (char *)v28 + v29;
  *(void *)(*(void *)(v67 + 1936) + 600) = (char *)v28 + v29;
  *(void *)(v67 + 11720) = v32 + v31;
  *(void *)(v67 + 16624) |= 0x100uLL;
  *(_DWORD *)(v67 + 16656) |= 1u;
  uint64_t v68 = *(void *)(v48 + v49);
  uint64_t v69 = v88[0];
  uint64_t v70 = v89;
  *(void *)(v68 + 15656) = v88[0];
  *(void *)(*(void *)(v68 + 1936) + 664) = v69;
  *(void *)(v68 + 11784) = v70;
  *(void *)(v68 + 16624) |= 0x10000uLL;
  *(_DWORD *)(v68 + 16656) |= 1u;
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 124, 0);
  if (v82)
  {
    uint64_t v72 = *(void *)(*(void *)(a1 + 8) + *(int *)(v50 + 1992));
    uint64_t v73 = *(void *)(v72 + 1920);
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v72, Pipeline);
    uint64_t v92 = (((unint64_t)v79 + v80 - 1) / v80);
    int64x2_t v93 = vdupq_n_s64(1uLL);
    long long v90 = xmmword_242EA7FC0;
    uint64_t v91 = 1;
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v72, 22, (int *)&v92, &v90);
    if (*(_DWORD *)(v72 + 1880) == 1) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v72, 22);
    }
    if (v73) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v72, v73);
    }
  }
  else
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, Pipeline, v81, v87, v88, 1, 0);
  }
}

void ProgressBinsSynchronizeBufferAccessRange(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
    ProgressBinsSynchronizeBufferAccessRange(ADSCommandProgressBins *,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,MTLBindingAccess,void({block_pointer})(unsigned int,unsigned int))::useConservativeTracking = 0;
  }
  if (ProgressBinsSynchronizeBufferAccessRange(ADSCommandProgressBins *,objc_object  {objcproto9MTLBuffer}*,unsigned long,unsigned long,MTLBindingAccess,void({block_pointer})(unsigned int,unsigned int))::useConservativeTracking)
  {
    ProgressBinsSynchronizeBufferAccess(a1, a2, a5, a6);
  }
  else if (a1)
  {
    if (*(unsigned char *)(a1 + 48))
    {
      unint64_t v12 = [(id)a2 gpuAddress] + a3;
      unint64_t v13 = v12 + a4;
      uint64_t v14 = std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)(a1 + 96), a2);
      int v15 = v14;
      if (v14)
      {
        uint64_t v16 = v14;
        do
          uint64_t v16 = (void *)*v16;
        while (v16 && v16[2] == a2);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (v16 != v14)
      {
        if (a5 == 1)
        {
          do
          {
            if ((v15[7] & 1) == 0 || (v12 < v15[6] ? (BOOL v20 = v13 >= v15[5]) : (BOOL v20 = 0), v20))
            {
              *(_WORD *)(a1 + 42) = *((_WORD *)v15 + 18);
              (*(void (**)(uint64_t))(a6 + 16))(a6);
            }
            int v15 = (void *)*v15;
          }
          while (v15 != v16);
        }
        else
        {
          do
          {
            if (v15[3] == 1)
            {
              if ((v15[7] & 1) == 0 || (v12 < v15[6] ? (BOOL v21 = v13 >= v15[5]) : (BOOL v21 = 0), v21))
              {
                *(_WORD *)(a1 + 42) = *((_WORD *)v15 + 18);
                (*(void (**)(uint64_t))(a6 + 16))(a6);
              }
            }
            int v15 = (void *)*v15;
          }
          while (v15 != v16);
        }
      }
      uint64_t v22 = operator new(0x40uLL);
      v22[2] = a2;
      v22[3] = a5;
      v22[4] = -1;
      v22[5] = v12;
      v22[6] = v13;
      *((unsigned char *)v22 + 56) = 1;
      unint64_t v23 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
      unint64_t v24 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v23 >> 47) ^ v23);
      *uint64_t v22 = 0;
      v22[1] = 0x9DDFEA08EB382D69 * (v24 ^ (v24 >> 47));
      std::__hash_table<std::__hash_value_type<objc_object  {objcproto9MTLBuffer}*,ADSCommandProgressBins::BufferUsage>,std::__unordered_map_hasher<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::hash<objc_object  {objcproto9MTLBuffer}>,std::equal_to<objc_object  {objcproto9MTLBuffer}>,true>,std::__unordered_map_equal<objc_object  {objcproto9MTLBuffer},ADSCommandProgressBins::BufferUsage,std::equal_to,std::hash,true>,std::allocator<ADSCommandProgressBins::BufferUsage>>::__node_insert_multi((void *)(a1 + 56), v22);
    }
    else
    {
      uint64_t v17 = ProgressBinsSynchronizeBuffer(a1, (void *)a2);
      if ((v17 & 0x80000000) == 0)
      {
        uint64_t v18 = *(unsigned __int16 *)(a1 + 42);
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 16);
        v19(a6, v17, v18);
      }
    }
  }
}

void sub_242B291EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDeserialize_impl(uint64_t a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(v10 + 88);
  uint64_t v12 = *a4 + 24;
  uint64_t v13 = a4[3];
  *(void *)(v11 + 15624) = v12;
  *(void *)(*(void *)(v11 + 1936) + 632) = v12;
  *(void *)(v11 + 11752) = v13;
  int v14 = *(_DWORD *)(v11 + 16656);
  *(void *)(v11 + 16624) |= 0x1000uLL;
  *(_DWORD *)(v11 + 16656) = v14 | 1;
  uint64_t v15 = *(void *)(v10 + 88);
  uint64_t v16 = *a2;
  uint64_t v17 = a2[3];
  *(void *)(v15 + 15568) = *a2;
  *(void *)(*(void *)(v15 + 1936) + 576) = v16;
  *(void *)(v15 + 11696) = v17;
  *(void *)(v15 + 16624) |= 0x20uLL;
  *(_DWORD *)(v15 + 16656) |= 1u;
  uint64_t v18 = *(void **)(v10 + 88);
  uint64_t v19 = v18[20];
  uint64_t v20 = v19 + 31;
  if ((unint64_t)(v19 + 31) <= v18[19])
  {
LABEL_2:
    v18[21] = v20;
    goto LABEL_3;
  }
  int v54 = AGX::DataBufferAllocator<34ul>::growNoInline(v18 + 2, 3, 0);
  uint64_t v19 = v18[20];
  if (v54)
  {
    uint64_t v20 = v19 + 31;
    if ((unint64_t)(v19 + 31) > v18[19]) {
      abort();
    }
    goto LABEL_2;
  }
LABEL_3:
  BOOL v21 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (char *)v21 + v18[22];
  uint64_t v23 = (int)*MEMORY[0x263F4B188];
  *BOOL v21 = a5;
  v18[20] = v21 + 2;
  uint64_t v24 = *(void *)(v18[5] + 224) + v23;
  *(void *)(v11 + 15648) = v22;
  *(void *)(*(void *)(v11 + 1936) + 656) = v22;
  *(void *)(v11 + 11776) = v24;
  *(void *)(v11 + 16624) |= 0x8000uLL;
  *(_DWORD *)(v11 + 16656) |= 1u;
  long long v56 = 0uLL;
  *(void *)&long long v57 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v56, *(void *)(a1 + 8), 4, 1);
  uint64_t v25 = *((void *)&v56 + 1);
  uint64_t v26 = v57;
  uint64_t v27 = *(void *)(*(void *)(a1 + 8) + 88);
  *(void *)(v27 + 15696) = *((void *)&v56 + 1);
  *(void *)(*(void *)(v27 + 1936) + 704) = v25;
  *(void *)(v27 + 11824) = v26;
  *(void *)(v27 + 16624) |= 0x200000uLL;
  *(_DWORD *)(v27 + 16656) |= 1u;
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 118, 0);
  uint64_t v29 = *a4 + 16;
  uint64_t v30 = a4[3];
  long long v56 = 0u;
  long long v57 = 0u;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, Pipeline, v29, v30, (uint64_t *)&v56, 1, 0);
  if (a3)
  {
    uint64_t v31 = [a3 count];
    if ((unint64_t)[a3 count] < 2) {
      unint64_t v32 = 4;
    }
    else {
      unint64_t v32 = 4 * [a3 count];
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(v55, a1, v32, 0);
    if (v31)
    {
      uint64_t v33 = 0;
      uint64_t v34 = v55[1];
      do
      {
        *(_DWORD *)(v34 + 4 * v33) = *(_DWORD *)([a3 objectAtIndexedSubscript:v33] + 344);
        ++v33;
      }
      while (v31 != v33);
    }
    uint64_t v35 = *(void *)(a1 + 8);
    uint64_t v36 = *(void *)(v35 + 88);
    uint64_t v37 = v55[0];
    uint64_t v38 = v55[3];
    *(void *)(v36 + 15680) = v55[0];
    *(void *)(*(void *)(v36 + 1936) + 688) = v37;
    *(void *)(v36 + 11808) = v38;
    *(void *)(v36 + 16624) |= 0x80000uLL;
    *(_DWORD *)(v36 + 16656) |= 1u;
    if ((*(unsigned char *)(a4[1] + 91) & 0x40) != 0)
    {
      int v49 = 120;
    }
    else
    {
      unint64_t v39 = [a3 count];
      unint64_t v40 = v39;
      if (v39 <= 1) {
        uint64_t v41 = 1;
      }
      else {
        uint64_t v41 = v39;
      }
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)&v56, a1, 8 * v41, 0);
      if (v40)
      {
        uint64_t v42 = 0;
        uint64_t v43 = *((void *)&v56 + 1);
        do
        {
          uint64_t v44 = (void *)[a3 objectAtIndexedSubscript:v42];
          uint64_t v45 = objc_msgSend((id)objc_msgSend(v44, "buffer"), "gpuAddress");
          *(void *)(v43 + 8 * v42++) = [v44 bufferOffset] + v45;
        }
        while (v40 != v42);
      }
      uint64_t v35 = *(void *)(a1 + 8);
      uint64_t v46 = *(void *)(v35 + 88);
      uint64_t v47 = v56;
      uint64_t v48 = *((void *)&v57 + 1);
      *(void *)(v46 + 15688) = v56;
      *(void *)(*(void *)(v46 + 1936) + 696) = v47;
      *(void *)(v46 + 11816) = v48;
      *(void *)(v46 + 16624) |= 0x100000uLL;
      *(_DWORD *)(v46 + 16656) |= 1u;
      int v49 = 119;
    }
    uint64_t v50 = *(void *)(v35 + 88);
    uint64_t v51 = *a2;
    uint64_t v52 = a2[3];
    *(void *)(v50 + 15568) = *a2;
    *(void *)(*(void *)(v50 + 1936) + 576) = v51;
    *(void *)(v50 + 11696) = v52;
    *(void *)(v50 + 16624) |= 0x20uLL;
    *(_DWORD *)(v50 + 16656) |= 1u;
    unint64_t v53 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, v49, 0);
    long long v56 = 0u;
    long long v57 = 0u;
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, v53, v25, v26, (uint64_t *)&v56, 1, 0);
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(uint64_t *a1, uint64_t a2, unint64_t a3, int a4)
{
  if (a3 > 0xFFF)
  {
    uint64_t v11 = (char *)[*(id *)a2 newBufferWithLength:a3 options:0];
    uint64_t v8 = [v11 contents];
    uint64_t v9 = [v11 gpuAddress];
    uint64_t v10 = &v11[*MEMORY[0x263F4B188]];
    *a1 = v9;
    a1[1] = v8;
    a1[2] = a3;
    a1[3] = (uint64_t)v10;
    MTLResourceListAddResource();
    IOGPUResourceListAddResource();
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v12, *(void *)(a2 + 8), a3, a4);
    uint64_t v6 = v12;
    uint64_t v7 = v14;
    *a1 = v13;
    a1[1] = v6;
    a1[2] = a3;
    a1[3] = v7;
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeSerialize_impl(void *a1, uint64_t *a2, void *a3, void *a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = *(void *)(v8 + 88);
  long long v47 = 0uLL;
  *(void *)&long long v48 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v47, v8, 40, 1);
  long long v10 = v47;
  uint64_t v11 = v48;
  *(void *)(v47 + 32) = 0;
  *(_OWORD *)long long v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(void *)long long v10 = *a2;
  *(void *)(v10 + 8) = *a4;
  uint64_t v12 = &unk_268D5A000;
  {
    uint64_t v12 = &unk_268D5A000;
    if (v40)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      uint64_t v12 = (_DWORD *)&unk_268D5A000;
    }
  }
  int v13 = v12[96];
  if (v13 <= 0) {
    int v13 = 2;
  }
  *(_DWORD *)(v10 + 28) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::kBvhChipCodes[v13];
  {
    uint64_t v12 = &unk_268D5A000;
    if (v41)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      uint64_t v12 = (_DWORD *)&unk_268D5A000;
    }
  }
  int v14 = v12[96];
  if (v14 <= 0) {
    int v14 = 2;
  }
  *(_DWORD *)(v10 + 32) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::kBvhVersions[v14] & 0x1FFFFFFF;
  *(_DWORD *)(v10 + 36) = 0;
  uint64_t v15 = a1[1];
  uint64_t v16 = *(void *)(v15 + 88);
  *(void *)(v16 + 15712) = *((void *)&v10 + 1);
  *(void *)(*(void *)(v16 + 1936) + 720) = *((void *)&v10 + 1);
  *(void *)(v16 + 11840) = v11;
  *(void *)(v16 + 16624) |= 0x800000uLL;
  *(_DWORD *)(v16 + 16656) |= 1u;
  uint64_t v17 = *(void **)(v15 + 88);
  uint64_t v18 = v17[20];
  uint64_t v19 = v18 + 31;
  if ((unint64_t)(v18 + 31) <= v17[19]) {
    goto LABEL_8;
  }
  int v39 = AGX::DataBufferAllocator<34ul>::growNoInline(v17 + 2, 3, 0);
  uint64_t v18 = v17[20];
  if (v39)
  {
    uint64_t v19 = v18 + 31;
    if ((unint64_t)(v18 + 31) > v17[19]) {
      abort();
    }
LABEL_8:
    v17[21] = v19;
  }
  uint64_t v20 = (void *)((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (int)*MEMORY[0x263F4B188];
  v46[0] = (uint64_t)v20 + v17[22];
  v46[1] = (uint64_t)v20;
  *uint64_t v20 = 0;
  v17[20] = v20 + 2;
  uint64_t v22 = *(void *)(v17[5] + 224) + v21;
  v46[2] = 8;
  v46[3] = v22;
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 136, 0);
  uint64_t v24 = *(void *)(v9 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v9, Pipeline);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v9, 22, dword_242EAADC8, dword_242EAADC8);
  if (*(_DWORD *)(v9 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v9, 22);
  }
  if (v24) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v9, v24);
  }
  uint64_t v25 = a2[2];
  uint64_t v26 = a2[3];
  uint64_t v27 = a2[1] + 72;
  *(void *)&long long v47 = *a2 + 72;
  *((void *)&v47 + 1) = v27;
  *(void *)&long long v48 = v25;
  *((void *)&v48 + 1) = v26;
  uint64_t v28 = a4[1] + 24;
  uint64_t v42 = *a4 + 24;
  uint64_t v43 = v28;
  uint64_t v29 = a4[3];
  uint64_t v44 = a4[2];
  uint64_t v45 = v29;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy((uint64_t)a1, a2, v46, 1, &v47, 0, 1, &v42, v46, 1);
  unint64_t v30 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 139, 0);
  uint64_t v31 = *(void *)(v9 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v9, v30);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v9, 22, dword_242EAADC8, dword_242EAADC8);
  if (*(_DWORD *)(v9 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v9, 22);
  }
  if (v31) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v9, v31);
  }
  uint64_t v32 = *(void *)(*a1 + 808);
  if ((*(_DWORD *)(v32 + 6260) - 1) > 0xFFFFFFFD)
  {
    unint64_t v35 = 4;
  }
  else
  {
    int v33 = *(_DWORD *)(v32 + 6260);
    if (v33) {
      unsigned int v34 = v33 + 1;
    }
    else {
      unsigned int v34 = 0;
    }
    unint64_t v35 = 4 * v34;
  }
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(&v42, (uint64_t)a1, v35, 0);
  uint64_t v36 = v43;
  if ([a3 count])
  {
    unint64_t v37 = 0;
    do
    {
      *(_DWORD *)(v36 + 4 * *(unsigned int *)([a3 objectAtIndexedSubscript:v37] + 344)) = v37;
      ++v37;
    }
    while (v37 < [a3 count]);
  }
  *(void *)(v10 + 16) = v42;
  unint64_t v38 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 121, 0);
  long long v47 = 0u;
  long long v48 = 0u;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended((uint64_t)a1, v38, *((void *)&v10 + 1) + 24, v11, (uint64_t *)&v47, 1, 0);
}

void sub_242B2E358(_Unwind_Exception *a1)
{
}

void sub_242B2E370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,void *a58)
{
  if (__p) {
    operator delete(__p);
  }
  if (!a58) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a58);
  _Unwind_Resume(exception_object);
}

uint64_t ProgressBinsGetPrimitiveCountFromDescriptor(MTLAccelerationStructureDescriptor *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (([(MTLAccelerationStructureDescriptor *)a1 isInstanceDescriptor] & 1) == 0)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    unint64_t v4 = (void *)[(MTLAccelerationStructureDescriptor *)a1 geometryDescriptors];
    uint64_t v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (!v5) {
      return 0;
    }
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)v22;
LABEL_9:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v22 != v8) {
        objc_enumerationMutation(v4);
      }
      uint64_t v11 = *(void **)(*((void *)&v21 + 1) + 8 * v9);
      uint64_t v12 = objc_opt_class();
      if ([v12 isSubclassOfClass:objc_opt_class()]) {
        break;
      }
      int v13 = objc_opt_class();
      if ([v13 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v10 = [v11 boundingBoxCount];
        goto LABEL_11;
      }
      int v14 = objc_opt_class();
      if ([v14 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v11 triangleCount];
        uint64_t v16 = (void *)[v11 vertexBuffers];
LABEL_26:
        v7 += [v16 count] * v15;
        goto LABEL_12;
      }
      uint64_t v17 = objc_opt_class();
      if ([v17 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v11 boundingBoxCount];
        uint64_t v16 = (void *)[v11 boundingBoxBuffers];
        goto LABEL_26;
      }
      uint64_t v18 = objc_opt_class();
      if ([v18 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v10 = [v11 segmentCount];
        goto LABEL_11;
      }
      uint64_t v19 = objc_opt_class();
      if ([v19 isSubclassOfClass:objc_opt_class()])
      {
        uint64_t v15 = [v11 segmentCount];
        uint64_t v16 = (void *)[v11 controlPointBuffers];
        goto LABEL_26;
      }
LABEL_12:
      if (v6 == ++v9)
      {
        uint64_t v6 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (!v6) {
          return v7;
        }
        goto LABEL_9;
      }
    }
    uint64_t v10 = [v11 triangleCount];
LABEL_11:
    v7 += v10;
    goto LABEL_12;
  }
  unint64_t v2 = objc_opt_class();
  if ([v2 isSubclassOfClass:objc_opt_class()])
  {
    return [(MTLAccelerationStructureDescriptor *)a1 instanceCount];
  }
  uint64_t v20 = objc_opt_class();
  if ([v20 isSubclassOfClass:objc_opt_class()])
  {
    return [(MTLAccelerationStructureDescriptor *)a1 maxInstanceCount];
  }
  return 0;
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopy(uint64_t a1, void *a2, void *a3)
{
  [*(id *)(a1 + 8) useResource:a2 usage:1];
  [*(id *)(a1 + 8) useResource:a3 usage:2];
  uint64_t v6 = (void *)[a2 buffer];
  uint64_t v7 = [a2 bufferOffset];
  [v6 contents];
  uint64_t v8 = [v6 gpuAddress];
  [v6 length];
  uint64_t v9 = (int *)MEMORY[0x263F4B188];
  uint64_t v10 = (uint64_t)v6 + (int)*MEMORY[0x263F4B188];
  uint64_t v11 = v8 + v7;
  [*(id *)(a1 + 8) useResource:v6 usage:1];
  uint64_t v12 = (char *)[a3 buffer];
  uint64_t v13 = [a3 bufferOffset];
  [v12 contents];
  uint64_t v14 = [v12 gpuAddress];
  [v12 length];
  uint64_t v15 = &v12[*v9];
  uint64_t v16 = v14 + v13;
  [*(id *)(a1 + 8) useResource:v12 usage:2];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)&v36, *(void *)(a1 + 8), 4, 1);
  uint64_t v17 = v37;
  uint64_t v18 = v38;
  v35[0] = v37;
  v35[1] = (uint64_t)v36;
  v35[2] = 4;
  v35[3] = v38;
  *uint64_t v36 = 1;
  uint64_t v19 = [a3 accelerationStructureUniqueIdentifier];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8])
  {
    objc_msgSend((id)objc_msgSend(a2, "buffer"), "length");
    objc_msgSend((id)objc_msgSend(a3, "buffer"), "length");
    IOGPUDeviceTraceEvent();
  }
  uint64_t v20 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(v20 + 88);
  *(void *)(v21 + 15624) = v11;
  *(void *)(*(void *)(v21 + 1936) + 632) = v11;
  *(void *)(v21 + 11752) = v10;
  *(void *)(v21 + 16624) |= 0x1000uLL;
  *(_DWORD *)(v21 + 16656) |= 1u;
  uint64_t v22 = *(void *)(v20 + 88);
  *(void *)(v22 + 15568) = v16;
  *(void *)(*(void *)(v22 + 1936) + 576) = v16;
  *(void *)(v22 + 11696) = v15;
  *(void *)(v22 + 16624) |= 0x20uLL;
  *(_DWORD *)(v22 + 16656) |= 1u;
  long long v23 = *(void **)(v20 + 88);
  uint64_t v24 = v23[20];
  uint64_t v25 = v24 + 31;
  if ((unint64_t)(v24 + 31) > v23[19])
  {
    int v34 = AGX::DataBufferAllocator<34ul>::growNoInline(v23 + 2, 3, 0);
    uint64_t v24 = v23[20];
    if (!v34) {
      goto LABEL_5;
    }
    uint64_t v25 = v24 + 31;
    if ((unint64_t)(v24 + 31) > v23[19]) {
      abort();
    }
  }
  v23[21] = v25;
LABEL_5:
  uint64_t v26 = (void *)((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = (char *)v26 + v23[22];
  uint64_t v28 = (int)*MEMORY[0x263F4B188];
  *uint64_t v26 = v19;
  v23[20] = v26 + 2;
  uint64_t v29 = *(void *)(v23[5] + 224) + v28;
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v31 = *(void *)(v30 + 88);
  *(void *)(v31 + 15648) = v27;
  *(void *)(*(void *)(v31 + 1936) + 656) = v27;
  *(void *)(v31 + 11776) = v29;
  *(void *)(v31 + 16624) |= 0x8000uLL;
  *(_DWORD *)(v31 + 16656) |= 1u;
  uint64_t v32 = *(void *)(v30 + 88);
  *(void *)(v32 + 15656) = v17;
  *(void *)(*(void *)(v32 + 1936) + 664) = v17;
  *(void *)(v32 + 11784) = v18;
  *(void *)(v32 + 16624) |= 0x10000uLL;
  *(_DWORD *)(v32 + 16656) |= 1u;
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 122, 0);
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, Pipeline, v11 + 72, v10, v35, 16, 0);
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(void *a1, BOOL a2, unsigned int a3)
{
  uint64_t v6 = [[BVHDescriptor alloc] initWithDescriptor:a1];
  unint64_t v7 = (unint64_t)v6;
  if (v6)
  {
    if (v6->_branchingFactor != 8)
    {
      v6->_branchingFactor = 8;
      [(BVHDescriptor *)v6 updateMaxDepth];
    }
    unsigned int v8 = *(_DWORD *)(v7 + 136);
  }
  else
  {
    unsigned int v8 = 0;
  }
  if ([a1 isInstanceDescriptor])
  {
LABEL_6:
    unsigned int v9 = 0;
    int v10 = 1;
  }
  else
  {
    switch(v8)
    {
      case 0u:
      case 3u:
        int v10 = 0;
        unsigned int v9 = 1;
        break;
      case 1u:
      case 4u:
        int v10 = 0;
        unsigned int v9 = 3;
        break;
      case 2u:
      case 5u:
        int v10 = 0;
        unsigned int v9 = 4;
        break;
      default:
        goto LABEL_6;
    }
  }
  if (v7 && !a2) {
    a2 = ([*(id *)(v7 + 48) usage] & 1) != 0 || *(unsigned char *)(v7 + 82) != 0;
  }
  char v11 = [a1 isInstanceDescriptor];
  int v12 = [a1 isInstanceDescriptor];
  if (v11)
  {
    if (v7)
    {
      LOBYTE(v13) = *(unsigned char *)(v7 + 82) != 0;
      goto LABEL_26;
    }
LABEL_194:
    if (a3 <= 2)
    {
      LODWORD(v18) = 0;
      BOOL v17 = 1;
    }
    else
    {
      BOOL v17 = 0;
      LODWORD(v18) = 0;
    }
    goto LABEL_31;
  }
  if (!v7) {
    goto LABEL_194;
  }
  uint64_t v13 = *(void *)(v7 + 40);
  if (v13)
  {
    unint64_t v14 = objc_msgSend((id)objc_msgSend(a1, "geometryDescriptors"), "count");
    BOOL v16 = v8 < 2 && v14 < 0x101;
    BOOL v17 = 0;
LABEL_27:
    if (a3 <= 2 && v16) {
      BOOL v17 = *(void *)(v7 + 32) == 0;
    }
    goto LABEL_30;
  }
LABEL_26:
  BOOL v16 = 1;
  BOOL v17 = 0;
  if ((v13 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_30:
  uint64_t v18 = *(void *)(v7 + 24);
LABEL_31:
  BOOL v19 = v18 < 0x801 && v17;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::useBinnedSah = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::disableSort = 1;
  }
  if (v7)
  {
    *(unsigned char *)(v7 + 85) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::useBinnedSah;
    *(unsigned char *)(v7 + 86) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::disableSort ^ 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableLoadPrimitiveBVH2 = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableLoadInstanceBVH2 = 1;
  }
  if (v7)
  {
    if ((*(_DWORD *)(v7 + 136) & 0xFFFFFFFE) == 6)
    {
      if (*(unsigned char *)(v7 + 85) && !*(unsigned char *)(v7 + 86))
      {
        uint64_t v20 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableLoadInstanceBVH2;
        goto LABEL_140;
      }
    }
    else if (*(unsigned char *)(v7 + 85) && !*(unsigned char *)(v7 + 86))
    {
      uint64_t v20 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableLoadPrimitiveBVH2;
LABEL_140:
      *(unsigned char *)(v7 + 87) = *v20;
      unsigned int v64 = a3;
      if (v12)
      {
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree = 64;
        }
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree = 1;
        }
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild = 1;
        }
        {
          uint64_t v42 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable;
          goto LABEL_146;
        }
        uint64_t v42 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable;
        {
LABEL_146:
          uint64_t v43 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild;
          uint64_t v44 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree;
          if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree) {
            goto LABEL_160;
          }
          goto LABEL_156;
        }
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable = 1;
        uint64_t v62 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree;
        uint64_t v63 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild;
        uint64_t v61 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree;
LABEL_252:
        __cxa_guard_release(v60);
        uint64_t v43 = v63;
        uint64_t v44 = v61;
        if (!*v62)
        {
LABEL_160:
          {
            AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::evMinLeavesPerSubtreeInstance = 0;
          }
          {
            AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::evMinLeavesPerSubtreePrimitive = 0;
          }
          unsigned int v21 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::evMinLeavesPerSubtreeInstance;
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::evMinLeavesPerSubtreeInstance) {
            int v50 = v12;
          }
          else {
            int v50 = 0;
          }
          a3 = v64;
          if (v50 == 1
            || ((unsigned int v21 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::evMinLeavesPerSubtreePrimitive) == 0
              ? (char v51 = 1)
              : (char v51 = v12),
                (v51 & 1) == 0))
          {
            if (v21 >= 0x400) {
              unsigned int v21 = 1024;
            }
          }
          else if (*(void *)(v7 + 24) <= 0x200000uLL)
          {
            unsigned int v21 = 512;
          }
          else
          {
            unsigned int v21 = 1024;
          }
          goto LABEL_48;
        }
LABEL_156:
        int v45 = *v42;
        unsigned int v46 = *v44;
        int v47 = *v43;
        char v48 = objc_msgSend(*(id *)(v7 + 48), "usage", v61, v62, v63);
        if (v47 || (v48 & 2) == 0)
        {
          char v49 = [*(id *)(v7 + 48) usage];
          if (v45 || (v49 & 1) == 0)
          {
            unint64_t v55 = *(void *)(v7 + 24);
            unsigned int v21 = 1024;
            a3 = v64;
            if (!(v55 >> 20))
            {
              unsigned int v56 = ((v55 >> 11) - 1) | (((v55 >> 11) - 1) >> 1);
              unsigned int v57 = v56 | (v56 >> 2) | ((v56 | (v56 >> 2)) >> 4);
              unsigned int v58 = v57 | (v57 >> 8) | ((v57 | (v57 >> 8)) >> 16);
              if (v46 <= v58 + 1) {
                unsigned int v59 = v58 + 1;
              }
              else {
                unsigned int v59 = v46;
              }
              if (v59 >= 0x400) {
                unsigned int v21 = 1024;
              }
              else {
                unsigned int v21 = v59;
              }
            }
            goto LABEL_48;
          }
        }
        goto LABEL_160;
      }
      {
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree = 64;
      }
      {
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree = 1;
      }
      {
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild = 1;
      }
      {
        uint64_t v42 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable;
      }
      else
      {
        uint64_t v42 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable;
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForRefittable = 1;
          uint64_t v62 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree;
          uint64_t v63 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild;
          uint64_t v61 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree;
          goto LABEL_252;
        }
      }
      uint64_t v43 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtreeForFastBuild;
      uint64_t v44 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicLowerBoundsPerSubtree;
      if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::_mediumDynamicMinLeavesPersubtree) {
        goto LABEL_160;
      }
      goto LABEL_156;
    }
    *(unsigned char *)(v7 + 87) = 0;
    unsigned int v21 = 512;
LABEL_48:
    *(_DWORD *)(v7 + 116) = v21;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForInstance = a3 > 2;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForFastBuild = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForRefit = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumRefit = 1;
  }
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForInstance)
  {
    if (!v7) {
      goto LABEL_226;
    }
    if ((*(_DWORD *)(v7 + 136) & 0xFFFFFFFE) == 6) {
      goto LABEL_65;
    }
    if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForFastBuild)
    {
      if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForRefit)
      {
        int v22 = 0;
        goto LABEL_69;
      }
LABEL_64:
      int v22 = objc_msgSend(*(id *)(v7 + 48), "usage", v61, v62, v63) & 1;
      goto LABEL_69;
    }
LABEL_61:
    if ((objc_msgSend(*(id *)(v7 + 48), "usage", v61, v62, v63) & 2) == 0) {
      goto LABEL_62;
    }
LABEL_65:
    int v22 = 1;
    goto LABEL_69;
  }
  if (v7
    && AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForFastBuild)
  {
    goto LABEL_61;
  }
LABEL_62:
  int v23 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForRefit;
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumForRefit)
  {
    if (v7) {
      goto LABEL_64;
    }
LABEL_226:
    int v22 = 0;
    int v24 = 0;
    int v23 = 0;
    goto LABEL_72;
  }
  int v22 = 0;
  int v24 = 0;
  if (!v7)
  {
LABEL_72:
    int v25 = v23 ^ 1;
    goto LABEL_74;
  }
LABEL_69:
  int v24 = *(void *)(v7 + 24) > (unint64_t)(*(_DWORD *)(v7 + 116) << 11);
  if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::enableMediumRefit
    || ([*(id *)(v7 + 48) usage] & 1) == 0)
  {
    int v23 = objc_msgSend(*(id *)(v7 + 48), "usage", v61, v62, v63) & 1;
    goto LABEL_72;
  }
  int v25 = 1;
LABEL_74:
  if ((v17 & v22) == 1)
  {
    if (!v19)
    {
      if (v25 & ~v24)
      {
        uint64_t v26 = 2;
        goto LABEL_81;
      }
      goto LABEL_80;
    }
LABEL_79:
    uint64_t v26 = 1;
    goto LABEL_81;
  }
  if (v19) {
    goto LABEL_79;
  }
LABEL_80:
  uint64_t v26 = 0;
LABEL_81:
  objc_msgSend((id)v7, "setBuildAlgorithm:", v26, v61, v62, v63);
  if (v7)
  {
    if (!*(void *)(v7 + 40) || *(_DWORD *)(v7 + 136)) {
      goto LABEL_84;
    }
    if (!a2) {
      goto LABEL_93;
    }
    {
      char v65 = 0;
      findEnvVarNum<BOOL>("AGX_ALWAYS_ALLOW_PAIR_FALLBACK", &v65);
      isVertPosPairingFallbackAlwaysAllowed(void)::allow = v65;
    }
    if (isVertPosPairingFallbackAlwaysAllowed(void)::allow || *(unsigned char *)(v7 + 88))
    {
LABEL_93:
      unsigned int v9 = 2;
      *(_DWORD *)(v7 + 140) = 2;
    }
    else
    {
LABEL_84:
      if (v10) {
        unsigned int v27 = 0;
      }
      else {
        unsigned int v27 = v9;
      }
      if (v10)
      {
        unsigned int v9 = v27;
        goto LABEL_97;
      }
    }
    if (!*(unsigned char *)(v7 + 83))
    {
      *(unsigned char *)(v7 + 83) = 1;
      [(id)v7 updateMaxDepth];
    }
    *(void *)(v7 + 208) = 0;
  }
LABEL_97:
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerLeaf = xmmword_242EA8520;
    dword_268D5A2C0 = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerLeaf = xmmword_242EA8530;
    dword_268D5A2E0 = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerInnerNode = xmmword_242EA8540;
    dword_268D5A300 = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerInnerNode = xmmword_242EA8550;
    dword_268D5A320 = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenPrimitiveCost = xmmword_242EA8560;
    dword_268D5A340 = 1065353216;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenTraversalCost = xmmword_242EA8570;
    dword_268D5A360 = 0x40000000;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenSplitCapacity = xmmword_242EA8580;
    dword_268D5A380 = 1065353216;
  }
  if ([(id)v7 buildAlgorithm])
  {
    if (v7)
    {
      *(_OWORD *)(v7 + 168) = xmmword_242EA8070;
      uint64_t v28 = 3;
      if (!*(_DWORD *)(v7 + 136)) {
        uint64_t v28 = 4;
      }
      *(void *)(v7 + 184) = v28;
      *(void *)(v7 + 192) = 16;
      *(_DWORD *)(v7 + 152) = 1065353216;
    }
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth = 16;
    }
    LODWORD(v29) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth;
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::smallBuildMaxDepth <= 1) {
      LODWORD(v29) = 1;
    }
    if (v29 >= 0x10) {
      unint64_t v29 = 16;
    }
    else {
      unint64_t v29 = v29;
    }
    if (!v7 || *(void *)(v7 + 8) == v29) {
      return v7;
    }
LABEL_184:
    *(void *)(v7 + 8) = v29;
    [(id)v7 updateMaxDepth];
    return v7;
  }
  if (!v7) {
    return v7;
  }
  LODWORD(v30) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerLeaf
                 + v9);
  if (v30 >= 4) {
    uint64_t v30 = 4;
  }
  else {
    uint64_t v30 = v30;
  }
  unsigned int v31 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerLeaf
        + v9);
  if (v30 > v31) {
    unsigned int v31 = v30;
  }
  if (v31 >= 4) {
    uint64_t v32 = 4;
  }
  else {
    uint64_t v32 = v31;
  }
  unsigned int v33 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMinPrimitivesPerInnerNode
        + v9);
  *(void *)(v7 + 168) = v30;
  *(void *)(v7 + 176) = v32;
  if (v33 >= 0x10) {
    uint64_t v34 = 16;
  }
  else {
    uint64_t v34 = v33;
  }
  unsigned int v35 = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenMaxPrimitivesPerInnerNode
        + v9);
  if (v34 > v35) {
    unsigned int v35 = v34;
  }
  if (v35 >= 0x10) {
    uint64_t v36 = 16;
  }
  else {
    uint64_t v36 = v35;
  }
  *(void *)(v7 + 184) = v34;
  *(void *)(v7 + 192) = v36;
  *(_DWORD *)(v7 + 92) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenPrimitiveCost
                         + v9);
  *(_DWORD *)(v7 + 96) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenTraversalCost
                         + v9);
  *(_DWORD *)(v7 + 152) = *((_DWORD *)&AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createBVHDescriptor(objc_object  {objcproto9MTLDevice}*,MTLAccelerationStructureDescriptor *,BOOL,unsigned int)::overridenSplitCapacity
                          + v9);
  if (!*(void *)(v7 + 24))
  {
    unint64_t v38 = *(void *)(v7 + 8);
    unint64_t v29 = 1;
    goto LABEL_181;
  }
  unint64_t v37 = -[BVHDescriptor maxLeafNodeCount](v7);
  unint64_t v38 = *(void *)(v7 + 8);
  unint64_t v39 = *(void *)(v7 + 160);
  if (v39 == 2)
  {
    double v40 = (double)v38;
    double v41 = (log((double)v37) / 0.693147181 + 2.0) * 1.35;
  }
  else
  {
    if (*(void *)(v7 + 240))
    {
      unint64_t v29 = 16;
      goto LABEL_181;
    }
    double v40 = (double)v38;
    long double v52 = log((double)v37);
    double v41 = (v52 + v52) / log((double)v39) + 2.0;
  }
  double v53 = ceil(v41);
  if (v53 > v40) {
    double v53 = v40;
  }
  unint64_t v29 = (unint64_t)v53;
  if ((unint64_t)v53 <= 1) {
    LODWORD(v29) = 1;
  }
  unint64_t v29 = v29;
LABEL_181:
  if (v29 >= 0x10) {
    unint64_t v29 = 16;
  }
  if (v38 != v29) {
    goto LABEL_184;
  }
  return v7;
}

uint64_t getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *a1)
{
  {
    uint64_t v3 = a1;
    a1 = v3;
    if (v2)
    {
      getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
      a1 = v3;
    }
  }
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
    || ([(MTLAccelerationStructureDescriptor *)a1 usage] & 1) != 0)
  {
    return 0;
  }
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode) {
    return 2;
  }
  return 0;
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    BOOL v16 = &v13[8 * v12];
    bzero(v14, v15);
    BOOL v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = &v13[8 * v9 - 16];
      unsigned int v21 = v5 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_31:
        do
        {
          uint64_t v24 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::calculateCurveControlPointTotalSizeAndOffsets<true>(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 136);
  BOOL v4 = v3 == 5 || v3 == 2;
  if (!v4 || !objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count")) {
    return 0;
  }
  if (v3 == 5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v7);
      if ([a2 motionKeyframeCount])
      {
        unint64_t v10 = 0;
        do
        {
          *(void *)(a3 + 8 * (v10 + v7 * [a2 motionKeyframeCount])) = v8;
          v8 += 16 * [v9 controlPointCount];
          ++v10;
        }
        while ([a2 motionKeyframeCount] > v10);
      }
      ++v7;
    }
    while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v7);
  }
  else
  {
    unint64_t v12 = 0;
    uint64_t v8 = 0;
    do
    {
      uint64_t v13 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v12);
      *(void *)(a3 + 8 * v12) = v8;
      v8 += 16 * [v13 controlPointCount];
      ++v12;
    }
    while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v12);
  }
  return v8;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::calculateOutOfLinePerPrimitiveDataTotalSizeAndOffsets<true>(uint64_t a1, void *a2, void *a3)
{
  *a3 = 0;
  if (!objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count")) {
    return 0;
  }
  if (a1)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 136);
    objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    int v7 = v6 > 5 ? -1 : dword_242EAC2E8[v6];
  }
  else
  {
    objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
    int v7 = 0;
  }
  if (!objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count")) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    unint64_t v10 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v8);
    uint64_t v11 = v10;
    if (v7 == 1)
    {
      unsigned int v12 = [v10 boundingBoxCount];
    }
    else if (v7)
    {
      unsigned int v12 = [v10 segmentCount];
    }
    else
    {
      unsigned int v12 = [v10 triangleCount];
    }
    unsigned int v13 = v12;
    uint64_t v14 = [v11 primitiveDataElementSize];
    uint64_t v15 = (1 << -(char)__clz(v14 - 1));
    if (v14 > 0x10) {
      uint64_t v15 = 32;
    }
    if (v14 < 2) {
      uint64_t v15 = 1;
    }
    unint64_t v16 = (((v14 + v15 - 1) & -v15) * v13 + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v17 = v8 + 1;
    if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > (unint64_t)(v8 + 1)) {
      a3[v8 + 1] = a3[v8] + v16;
    }
    else {
      unint64_t v9 = a3[v8] + v16;
    }
    ++v8;
  }
  while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v17);
  return v9;
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::HAL200::Encoders *)#1}::operator()<MTLIndirectInstanceAccelerationStructureDescriptor>(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if ([a2 instanceDescriptorType] == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
  {
    uint64_t v5 = [a2 motionTransformStride];
    int v6 = [a2 motionTransformType];
    int v7 = 64;
    if (!v6) {
      int v7 = 48;
    }
    if (v5) {
      unsigned int v8 = v5;
    }
    else {
      unsigned int v8 = v7;
    }
    if ([a2 motionTransformType] == 1) {
      uint64_t v9 = 0x4000000000;
    }
    else {
      uint64_t v9 = 0x3000000000;
    }
    BOOL v10 = [a2 motionTransformType] == 0;
    int v11 = [a2 instanceTransformationMatrixLayout] == 1;
    unsigned int v12 = *(void **)(*(void *)(v4 + 8) + 88);
    uint64_t v13 = v12[20];
    uint64_t v14 = v13 + 31;
    if ((unint64_t)(v13 + 31) > v12[19])
    {
      int v36 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 2, 3, 0);
      uint64_t v13 = v12[20];
      if (!v36)
      {
LABEL_13:
        int v15 = v10 | (v11 << 8);
        unint64_t v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v17 = v16 + v12[22];
        v12[20] = v16 + 16;
        unint64_t v18 = (int *)MEMORY[0x263F4B188];
        uint64_t v37 = *(void *)(v12[5] + 224) + (int)*MEMORY[0x263F4B188];
        *(void *)unint64_t v16 = v9 & 0xFFFFFFFF00000000 | v8;
        *(_DWORD *)(v16 + 8) = v15;
        uint64_t v19 = objc_opt_class();
        if ([v19 isSubclassOfClass:objc_opt_class()])
        {
          uint64_t v20 = (void *)[a2 motionTransformBuffer];
          uint64_t v21 = [a2 motionTransformBufferOffset];
          [v20 contents];
          uint64_t v22 = [v20 gpuAddress];
          [v20 length];
          uint64_t v23 = (uint64_t)v20 + *v18;
          [*(id *)(v4 + 8) useResource:v20 usage:1];
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v44, v4, a2);
          uint64_t v24 = (uint64_t *)a1[1];
          uint64_t v25 = v24[2];
          uint64_t v26 = v24[3];
          uint64_t v27 = v24[1] + 136;
          v43[0] = *v24 + 136;
          v43[1] = v27;
          v43[2] = v25;
          v43[3] = v26;
          uint64_t v38 = v17;
          unint64_t v39 = v16;
          uint64_t v40 = 12;
          uint64_t v41 = v37;
          char v42 = 1;
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(v4, v22 + v21, v23, v44, v24, v43, &v38);
        }
        else
        {
          uint64_t v28 = (void *)[a2 motionTransformBuffer];
          uint64_t v29 = [a2 motionTransformBufferOffset];
          uint64_t v30 = [v28 contents];
          uint64_t v31 = [v28 gpuAddress];
          uint64_t v32 = [v28 length];
          uint64_t v33 = (uint64_t)v28 + *v18;
          v44[0] = v31 + v29;
          v44[1] = v29 + v30;
          v44[2] = v32;
          v44[3] = v33;
          [*(id *)(v4 + 8) useResource:v28 usage:1];
          unsigned int v34 = [a2 maxMotionTransformCount];
          unsigned int v35 = (uint64_t *)a1[1];
          uint64_t v38 = v17;
          unint64_t v39 = v16;
          uint64_t v40 = 12;
          uint64_t v41 = v37;
          char v42 = 1;
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(v4, v44, v34, v35, &v38);
        }
        return;
      }
      uint64_t v14 = v13 + 31;
      if ((unint64_t)(v13 + 31) > v12[19]) {
        abort();
      }
    }
    v12[21] = v14;
    goto LABEL_13;
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::HAL200::Encoders *)#1}::operator()<MTLInstanceAccelerationStructureDescriptor>(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  if ([a2 instanceDescriptorType] != 2 && objc_msgSend(a2, "instanceDescriptorType") != 4) {
    return;
  }
  uint64_t v5 = [a2 motionTransformStride];
  int v6 = [a2 motionTransformType];
  int v7 = 64;
  if (!v6) {
    int v7 = 48;
  }
  if (v5) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = v7;
  }
  if ([a2 motionTransformType] == 1) {
    uint64_t v9 = 0x4000000000;
  }
  else {
    uint64_t v9 = 0x3000000000;
  }
  BOOL v10 = [a2 motionTransformType] == 0;
  int v11 = [a2 instanceTransformationMatrixLayout] == 1;
  unsigned int v12 = *(void **)(*(void *)(v4 + 8) + 88);
  uint64_t v13 = v12[20];
  uint64_t v14 = v13 + 31;
  char v48 = a1;
  if ((unint64_t)(v13 + 31) > v12[19])
  {
    int v45 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 2, 3, 0);
    uint64_t v13 = v12[20];
    if (!v45) {
      goto LABEL_13;
    }
    uint64_t v14 = v13 + 31;
    if ((unint64_t)(v13 + 31) > v12[19]) {
      goto LABEL_24;
    }
  }
  v12[21] = v14;
LABEL_13:
  int v15 = v10 | (v11 << 8);
  unint64_t v16 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = v16 + v12[22];
  v12[20] = v16 + 16;
  uint64_t v18 = *(void *)(v12[5] + 224);
  uint64_t v19 = (int *)MEMORY[0x263F4B188];
  uint64_t v20 = v18 + (int)*MEMORY[0x263F4B188];
  *(void *)unint64_t v16 = v9 & 0xFFFFFFFF00000000 | v8;
  *(_DWORD *)(v16 + 8) = v15;
  uint64_t v21 = objc_opt_class();
  if ([v21 isSubclassOfClass:objc_opt_class()])
  {
    uint64_t v47 = v20;
    uint64_t v22 = (void *)[a2 motionTransformBuffer];
    uint64_t v23 = [a2 motionTransformBufferOffset];
    [v22 contents];
    uint64_t v24 = [v22 gpuAddress];
    [v22 length];
    uint64_t v25 = *v19;
    [*(id *)(v4 + 8) useResource:v22 usage:1];
    int v26 = [a2 motionTransformCount];
    uint64_t v27 = *(void **)(*(void *)(v4 + 8) + 88);
    uint64_t v28 = v27[20];
    uint64_t v29 = v28 + 31;
    if ((unint64_t)(v28 + 31) <= v27[19]) {
      goto LABEL_15;
    }
    int v46 = AGX::DataBufferAllocator<34ul>::growNoInline(v27 + 2, 3, 0);
    uint64_t v28 = v27[20];
    if (!v46) {
      goto LABEL_16;
    }
    uint64_t v29 = v28 + 31;
    if ((unint64_t)(v28 + 31) <= v27[19])
    {
LABEL_15:
      v27[21] = v29;
LABEL_16:
      uint64_t v30 = (_DWORD *)((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v31 = *v19;
      uint64_t v55 = (uint64_t)v30 + v27[22];
      unsigned int v56 = v30;
      *uint64_t v30 = v26;
      v27[20] = v30 + 4;
      uint64_t v32 = (char *)(*(void *)(v27[5] + 224) + v31);
      uint64_t v57 = 4;
      unsigned int v58 = v32;
      uint64_t v33 = (uint64_t *)v48[1];
      uint64_t v34 = v33[2];
      uint64_t v35 = v33[3];
      uint64_t v36 = v33[1] + 136;
      v54[0] = *v33 + 136;
      v54[1] = v36;
      v54[2] = v34;
      v54[3] = v35;
      uint64_t v49 = v17;
      unint64_t v50 = v16;
      uint64_t v51 = 12;
      uint64_t v52 = v47;
      char v53 = 1;
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(v4, v24 + v23, (uint64_t)v22 + v25, &v55, v33, v54, &v49);
      return;
    }
LABEL_24:
    abort();
  }
  uint64_t v37 = (char *)[a2 motionTransformBuffer];
  uint64_t v38 = [a2 motionTransformBufferOffset];
  uint64_t v39 = [v37 contents];
  uint64_t v40 = [v37 gpuAddress];
  uint64_t v41 = [v37 length];
  char v42 = &v37[*v19];
  uint64_t v55 = v40 + v38;
  unsigned int v56 = (_DWORD *)(v38 + v39);
  uint64_t v57 = v41;
  unsigned int v58 = v42;
  [*(id *)(v4 + 8) useResource:v37 usage:1];
  unsigned int v43 = [a2 motionTransformCount];
  uint64_t v44 = (uint64_t *)v48[1];
  uint64_t v49 = v17;
  unint64_t v50 = v16;
  uint64_t v51 = 12;
  uint64_t v52 = v20;
  char v53 = 1;
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(v4, &v55, v43, v44, &v49);
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyControlPoints(uint64_t a1, void *a2, int a3, MTLAttributeFormat a4, void *a5, int a6, MTLAttributeFormat a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11)
{
  uint64_t v44 = a8;
  if (!a8) {
    return;
  }
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)(v16 + 88);
  *(void *)(v17 + 15568) = a9;
  *(void *)(*(void *)(v17 + 1936) + 576) = a9;
  *(void *)(v17 + 11696) = a10;
  *(void *)(v17 + 16624) |= 0x20uLL;
  *(_DWORD *)(v17 + 16656) |= 1u;
  uint64_t v18 = *(void *)(v16 + 88);
  uint64_t v19 = *a11;
  uint64_t v20 = a11[3];
  *(void *)(v18 + 15616) = *a11;
  *(void *)(*(void *)(v18 + 1936) + 624) = v19;
  *(void *)(v18 + 11744) = v20;
  *(void *)(v18 + 16624) |= 0x800uLL;
  *(_DWORD *)(v18 + 16656) |= 1u;
  uint64_t v21 = *(void **)(v16 + 88);
  uint64_t v22 = v21[20];
  uint64_t v23 = v22 + 47;
  if ((unint64_t)(v22 + 47) > v21[19])
  {
    uint64_t v41 = a5;
    MTLAttributeFormat v42 = a7;
    int v43 = AGX::DataBufferAllocator<34ul>::growNoInline(v21 + 2, 3, 0);
    uint64_t v22 = v21[20];
    if (!v43)
    {
      a7 = v42;
      a5 = v41;
      goto LABEL_4;
    }
    uint64_t v23 = v22 + 47;
    a7 = v42;
    a5 = v41;
    if ((unint64_t)(v22 + 47) > v21[19]) {
      abort();
    }
  }
  v21[21] = v23;
LABEL_4:
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v25 = v21[22];
  uint64_t v26 = (int)*MEMORY[0x263F4B188];
  *(void *)unint64_t v24 = *a2;
  v21[20] = v24 + 32;
  uint64_t v27 = *(void *)(v21[5] + 224);
  if (!a3)
  {
    MTLAttributeFormat v28 = a7;
    uint64_t v29 = a5;
    int v30 = MTLAttributeFormatSize(a4);
    a5 = v29;
    a7 = v28;
    a3 = v30;
  }
  uint64_t v31 = v24 + v25;
  uint64_t v32 = v27 + v26;
  *(_DWORD *)(v24 + 8) = a3;
  *(_DWORD *)(v24 + 12) = a4;
  *(void *)(v24 + 16) = *a5;
  if (!a6)
  {
    int v33 = a7;
    int v34 = MTLAttributeFormatSize(a7);
    LODWORD(a7) = v33;
    a6 = v34;
  }
  *(_DWORD *)(v24 + 24) = a6;
  *(_DWORD *)(v24 + 28) = a7;
  uint64_t v35 = *(void **)(a1 + 8);
  uint64_t v36 = v35[11];
  *(void *)(v36 + 15624) = v31;
  *(void *)(*(void *)(v36 + 1936) + 632) = v31;
  *(void *)(v36 + 11752) = v32;
  *(void *)(v36 + 16624) |= 0x1000uLL;
  *(_DWORD *)(v36 + 16656) |= 1u;
  [v35 setBytes:&v44 length:8 atIndex:14];
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 125, 0);
  uint64_t v38 = v44;
  uint64_t v39 = *(void *)(*(void *)(a1 + 8) + 88);
  uint64_t v40 = *(void *)(v39 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v39, Pipeline);
  uint64_t v46 = 1;
  uint64_t v47 = v38;
  int64x2_t v48 = vdupq_n_s64(1uLL);
  long long v45 = xmmword_242EA7FC0;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v39, 22, (int *)&v47, &v45);
  if (*(_DWORD *)(v39 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v39, 22);
  }
  if (v40) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v39, v40);
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyWithIndirectCountAndDestOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(v9 + 88);
  *(void *)(v10 + 15624) = a2;
  *(void *)(*(void *)(v10 + 1936) + 632) = a2;
  *(void *)(v10 + 11752) = a3;
  *(void *)(v10 + 16624) |= 0x1000uLL;
  *(_DWORD *)(v10 + 16656) |= 1u;
  uint64_t v11 = *(void *)(v9 + 88);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[3];
  *(void *)(v11 + 15640) = *a4;
  *(void *)(*(void *)(v11 + 1936) + 648) = v12;
  *(void *)(v11 + 11768) = v13;
  *(void *)(v11 + 16624) |= 0x4000uLL;
  *(_DWORD *)(v11 + 16656) |= 1u;
  uint64_t v14 = *(void *)(v9 + 88);
  uint64_t v15 = *a5;
  uint64_t v16 = a5[3];
  *(void *)(v14 + 15568) = *a5;
  *(void *)(*(void *)(v14 + 1936) + 576) = v15;
  *(void *)(v14 + 11696) = v16;
  *(void *)(v14 + 16624) |= 0x20uLL;
  *(_DWORD *)(v14 + 16656) |= 1u;
  uint64_t v17 = *(void *)(v9 + 88);
  uint64_t v18 = *a6;
  uint64_t v19 = a6[3];
  *(void *)(v17 + 15616) = *a6;
  *(void *)(*(void *)(v17 + 1936) + 624) = v18;
  *(void *)(v17 + 11744) = v19;
  *(void *)(v17 + 16624) |= 0x800uLL;
  *(_DWORD *)(v17 + 16656) |= 1u;
  if (*((unsigned char *)a7 + 32))
  {
    uint64_t v20 = *(void *)(v9 + 88);
    uint64_t v21 = *a7;
    uint64_t v22 = a7[3];
    *(void *)(v20 + 15656) = *a7;
    *(void *)(*(void *)(v20 + 1936) + 664) = v21;
    *(void *)(v20 + 11784) = v22;
    *(void *)(v20 + 16624) |= 0x10000uLL;
    *(_DWORD *)(v20 + 16656) |= 1u;
  }
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 66, 0);
  memset(v24, 0, sizeof(v24));
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(a1, Pipeline, *a4, a4[3], (uint64_t *)v24, 1, 0);
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyToBvhWithIndirectDestOffset(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4, uint64_t *a5)
{
  unsigned int v26 = a3;
  if (a3)
  {
    [*(id *)(a1 + 8) setBytes:&v26 length:4 atIndex:14];
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(void *)(v9 + 88);
    uint64_t v11 = *a2;
    uint64_t v12 = a2[3];
    *(void *)(v10 + 15624) = *a2;
    *(void *)(*(void *)(v10 + 1936) + 632) = v11;
    *(void *)(v10 + 11752) = v12;
    *(void *)(v10 + 16624) |= 0x1000uLL;
    *(_DWORD *)(v10 + 16656) |= 1u;
    uint64_t v13 = *(void *)(v9 + 88);
    uint64_t v14 = *a4;
    uint64_t v15 = a4[3];
    *(void *)(v13 + 15568) = *a4;
    *(void *)(*(void *)(v13 + 1936) + 576) = v14;
    *(void *)(v13 + 11696) = v15;
    *(void *)(v13 + 16624) |= 0x20uLL;
    *(_DWORD *)(v13 + 16656) |= 1u;
    uint64_t v16 = *a4 + 136;
    uint64_t v17 = a4[3];
    uint64_t v18 = *(void *)(v9 + 88);
    *(void *)(v18 + 15616) = v16;
    *(void *)(*(void *)(v18 + 1936) + 624) = v16;
    *(void *)(v18 + 11744) = v17;
    *(void *)(v18 + 16624) |= 0x800uLL;
    *(_DWORD *)(v18 + 16656) |= 1u;
    if (*((unsigned char *)a5 + 32))
    {
      uint64_t v19 = *(void *)(v9 + 88);
      uint64_t v20 = *a5;
      uint64_t v21 = a5[3];
      *(void *)(v19 + 15656) = *a5;
      *(void *)(*(void *)(v19 + 1936) + 664) = v20;
      *(void *)(v19 + 11784) = v21;
      *(void *)(v19 + 16624) |= 0x10000uLL;
      *(_DWORD *)(v19 + 16656) |= 1u;
    }
    unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 66, 0);
    uint64_t v23 = v26;
    uint64_t v24 = *(void *)(*(void *)(a1 + 8) + 88);
    uint64_t v25 = *(void *)(v24 + 1920);
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v24, Pipeline);
    uint64_t v28 = 1;
    uint64_t v29 = v23;
    int64x2_t v30 = vdupq_n_s64(1uLL);
    long long v27 = xmmword_242EA7FC0;
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v24, 22, (int *)&v29, &v27);
    if (*(_DWORD *)(v24 + 1880) == 1) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v24, 22);
    }
    if (v25) {
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v24, v25);
    }
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 motionTransformCountBuffer];
  if (!result)
  {
    uint64_t v14 = *(void **)(*(void *)(a2 + 8) + 88);
    uint64_t v15 = v14[20];
    uint64_t v16 = v15 + 31;
    if ((unint64_t)(v15 + 31) > v14[19])
    {
      uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v14 + 2, 3, 0);
      uint64_t v15 = v14[20];
      if (!result) {
        goto LABEL_7;
      }
      uint64_t v16 = v15 + 31;
      if ((unint64_t)(v15 + 31) > v14[19]) {
        abort();
      }
    }
    v14[21] = v16;
LABEL_7:
    uint64_t v17 = (_DWORD *)((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v18 = (int)*MEMORY[0x263F4B188];
    *a1 = (char *)v17 + v14[22];
    a1[1] = v17;
    *uint64_t v17 = 0;
    v14[20] = v17 + 4;
    uint64_t v19 = *(void *)(v14[5] + 224) + v18;
    a1[2] = 4;
    a1[3] = v19;
    return result;
  }
  int v7 = (char *)result;
  uint64_t v8 = [a3 motionTransformCountBufferOffset];
  uint64_t v9 = [v7 contents];
  uint64_t v10 = [v7 gpuAddress];
  uint64_t v11 = [v7 length];
  uint64_t v12 = &v7[*MEMORY[0x263F4B188]];
  *a1 = v10 + v8;
  a1[1] = v8 + v9;
  a1[2] = v11;
  a1[3] = v12;
  uint64_t v13 = *(void **)(a2 + 8);

  return [v13 useResource:v7 usage:1];
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20encodeCopyAndCompactEP43AGXG17FamilyRayTracingAccelerationStructureS7__block_invoke(uint64_t a1)
{
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeWriteCompactedSize(id *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)[a2 buffer];
  uint64_t v11 = [a2 bufferOffset];
  [v10 contents];
  uint64_t v12 = [v10 gpuAddress];
  [v10 length];
  [a1[1] useResource:v10 usage:1];
  [a3 contents];
  uint64_t v13 = [a3 gpuAddress];
  [a3 length];
  [a1[1] useResource:a3 usage:1];
  uint64_t v14 = (void *)*((void *)a1[1] + 11);
  uint64_t v15 = v14[20];
  uint64_t v16 = v15 + 47;
  if ((unint64_t)(v15 + 47) <= v14[19])
  {
LABEL_2:
    v14[21] = v16;
    goto LABEL_3;
  }
  int v39 = AGX::DataBufferAllocator<34ul>::growNoInline(v14 + 2, 3, 0);
  uint64_t v15 = v14[20];
  if (v39)
  {
    uint64_t v16 = v15 + 47;
    if ((unint64_t)(v15 + 47) > v14[19]) {
      goto LABEL_21;
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v17 = v13 + a4;
  uint64_t v18 = v12 + v11;
  unint64_t v19 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v20 = v14[22];
  v14[20] = v19 + 32;
  uint64_t v21 = [a2 size];
  *(void *)unint64_t v19 = v18;
  *(void *)(v19 + 8) = v21;
  *(void *)(v19 + 16) = v17;
  if (a5 == 85) {
    int v22 = 8;
  }
  else {
    int v22 = 4;
  }
  *(_DWORD *)(v19 + 24) = v22;
  *(_DWORD *)(v19 + 28) = 0;
  {
    {
    }
    {
    }
    if (shouldDumpOrVerifyBVHs(void)::once != -1) {
      dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_607);
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeWriteCompactedSizes(AGX::Span<unsigned long long const>)::verify = 0;
  }
  uint64_t v23 = (int *)MEMORY[0x263F4B188];
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeWriteCompactedSizes(AGX::Span<unsigned long long const>)::verify)
  {
    uint64_t v24 = (void *)[*a1 newBufferWithLength:4718984 options:0];
    uint64_t v25 = (void *)[v24 contents];
    uint64_t v26 = [v24 gpuAddress];
    MTLResourceListAddResource();
    IOGPUResourceListAddResource();

    bzero(v25, 0x480188uLL);
    v25[1] = -1;
    long long v27 = (void *)**((void **)a1[1] + 11);
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 3221225472;
    v41[2] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25encodeWriteCompactedSizesENS_4SpanIKyEE_block_invoke;
    v41[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
    v41[4] = v25;
    [v27 addCompletedHandler:v41];
    long long v44 = (unint64_t)v26;
    [a1[1] setBytes:&v44 length:16 atIndex:4];
  }
  uint64_t v28 = (void *)*((void *)a1[1] + 11);
  uint64_t v29 = v28[20];
  uint64_t v30 = v29 + 31;
  if ((unint64_t)(v29 + 31) <= v28[19]) {
    goto LABEL_10;
  }
  int v40 = AGX::DataBufferAllocator<34ul>::growNoInline(v28 + 2, 3, 0);
  uint64_t v29 = v28[20];
  if (v40)
  {
    uint64_t v30 = v29 + 31;
    if ((unint64_t)(v29 + 31) <= v28[19])
    {
LABEL_10:
      v28[21] = v30;
      goto LABEL_11;
    }
LABEL_21:
    abort();
  }
LABEL_11:
  uint64_t v31 = (void *)((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (char *)v31 + v28[22];
  v28[20] = v31 + 2;
  uint64_t v33 = *(void *)(v28[5] + 224) + *v23;
  *uint64_t v31 = v19 + v20;
  int v34 = a1[1];
  uint64_t v35 = v34[11];
  *(void *)(v35 + 15528) = v32;
  *(void *)(*(void *)(v35 + 1936) + 536) = v32;
  *(void *)(v35 + 11656) = v33;
  *(void *)(v35 + 16624) |= 1uLL;
  *(_DWORD *)(v35 + 16656) |= 1u;
  uint64_t v36 = v34[11];
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline((uint64_t)a1, 69, 0);
  uint64_t v38 = *(void *)(v36 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v36, Pipeline);
  uint64_t v45 = 1;
  uint64_t v42 = 1;
  int64x2_t v43 = vdupq_n_s64(1uLL);
  long long v44 = xmmword_242EA85A0;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v36, 0x16u, (uint64_t *)&v44, (int *)&v42);
  if (*(_DWORD *)(v36 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v36, 22);
  }
  if (v38) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v36, v38);
  }
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE25encodeWriteCompactedSizesENS_4SpanIKyEE_block_invoke(uint64_t a1)
{
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen()
{
  v0 = &unk_268D5A000;
  {
    v0 = &unk_268D5A000;
    if (v3)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      v0 = (_DWORD *)&unk_268D5A000;
    }
  }
  int v1 = v0[96];
  if (v1 <= 0) {
    return 2;
  }
  else {
    return v1;
  }
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::calcRiaBvhSize(unint64_t a1, void *a2, unsigned int a3, unint64_t *a4)
{
  if (a1)
  {
    unint64_t v8 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 40) && !*(_DWORD *)(a1 + 136) && *(_DWORD *)(a1 + 148) == 3)
    {
      double v9 = *(float *)(a1 + 152) + -1.0;
      if (v9 < 0.0) {
        double v9 = 0.0;
      }
      v8 += vcvtpd_u64_f64(v9 * (double)v8);
    }
    if (*(unsigned char *)(a1 + 83))
    {
      unint64_t v10 = *(void *)(a1 + 200);
      if (v10 >= 2) {
        v8 *= v10 - 1;
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v11 = -[BVHDescriptor maxLeafNodeCount](a1);
  unint64_t v12 = -[BVHDescriptor maxInnerNodeCount](a1);
  if (v12 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = v12;
  }
  {
    getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
  }
  unint64_t v14 = v13 << 6;
  unsigned int v152 = a3;
  if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
    || ([a2 usage] & 1) != 0)
  {
    int v15 = 0;
  }
  else if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode)
  {
    int v15 = 2;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = v14 + 128;
  char v151 = [a2 isInstanceDescriptor];
  unint64_t v147 = v11;
  if ((v151 & 1) == 0)
  {
    unsigned int v23 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count");
    if (!v23)
    {
      unsigned int v22 = 0;
      unsigned int v148 = 0;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      uint64_t v154 = 0;
      unint64_t v32 = 0;
      unsigned int v33 = 0;
LABEL_111:
      int v153 = -1;
      unsigned int v146 = 1;
      goto LABEL_145;
    }
    unint64_t v144 = a4;
    unsigned int v145 = v23;
    if (a1)
    {
      if (*(void *)(a1 + 40))
      {
        unint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          if (v25 <= objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v24), "primitiveDataElementSize"))unint64_t v25 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v24), "primitiveDataElementSize"); {
          ++v24;
          }
        }
        while (*(void *)(a1 + 40) > v24);
        BOOL v31 = v25 != 0;
      }
      else
      {
        BOOL v31 = 0;
      }
      unsigned int v146 = [a2 motionKeyframeCount];
      unint64_t v34 = v146;
      unsigned int v35 = *(_DWORD *)(a1 + 136);
      if (v35 > 5)
      {
        BOOL v143 = 0;
        unsigned int v38 = 0;
        int v36 = 0;
        int v39 = 0;
        int v153 = -1;
        if (!v31) {
          goto LABEL_79;
        }
      }
      else
      {
        if (((1 << v35) & 9) == 0)
        {
          if (((1 << v35) & 0x12) != 0)
          {
            int v36 = 0;
            if (v146 <= 1uLL) {
              int v37 = 4;
            }
            else {
              int v37 = 5;
            }
            BOOL v143 = v37;
            if (v146 <= 1uLL) {
              unsigned int v38 = 36;
            }
            else {
              unsigned int v38 = 64;
            }
            int v39 = 1;
            int v153 = 1;
            if (v31) {
              goto LABEL_59;
            }
          }
          else
          {
            int v39 = 0;
            if (v146 <= 1uLL) {
              int v45 = 6;
            }
            else {
              int v45 = 7;
            }
            BOOL v143 = v45;
            if (v146 <= 1uLL) {
              unsigned int v38 = 24;
            }
            else {
              unsigned int v38 = 32;
            }
            int v153 = 2;
            int v36 = 1;
            if (v31) {
              goto LABEL_59;
            }
          }
LABEL_79:
          if (v38 <= 0x60) {
            int v46 = 96;
          }
          else {
            int v46 = 128;
          }
          if (v38 >= 0x41) {
            int v47 = v46;
          }
          else {
            int v47 = 64;
          }
          if (v38 >= 0x31) {
            int v48 = v47;
          }
          else {
            int v48 = 48;
          }
          if (v38 >= 0x21) {
            int v49 = v48;
          }
          else {
            int v49 = 32;
          }
          if (v38 >= 0x11) {
            int v50 = v49;
          }
          else {
            int v50 = 16;
          }
          if (v38 >= 9) {
            int v51 = v50;
          }
          else {
            int v51 = 8;
          }
          if (v38 >= 5) {
            int v52 = v51;
          }
          else {
            int v52 = 4;
          }
          goto LABEL_108;
        }
        int v44 = *(_DWORD *)(a1 + 140);
        if (v44 == 2)
        {
          int v36 = 0;
          int v39 = 0;
          int v153 = 0;
          if (v146 > 1uLL) {
            int v44 = 3;
          }
          BOOL v143 = v44;
          if (v146 <= 1uLL) {
            unsigned int v38 = 64;
          }
          else {
            unsigned int v38 = 116;
          }
          if (v31) {
            goto LABEL_59;
          }
          goto LABEL_79;
        }
        if (!v44)
        {
LABEL_67:
          int v36 = 0;
          int v39 = 0;
          int v153 = 0;
          BOOL v143 = v34 > 1;
          if (v34 <= 1) {
            unsigned int v38 = 48;
          }
          else {
            unsigned int v38 = 88;
          }
          if (v31) {
            goto LABEL_59;
          }
          goto LABEL_79;
        }
        BOOL v143 = 0;
        unsigned int v38 = 0;
        int v36 = 0;
        int v39 = 0;
        int v153 = 0;
        if (!v31) {
          goto LABEL_79;
        }
      }
LABEL_59:
      if (v35 == 3 || !v35)
      {
        a4 = v144;
        if (a1)
        {
          int v40 = *(_DWORD *)(a1 + 140);
          if (v40 == 2)
          {
            BOOL v41 = (unint64_t)[a2 motionKeyframeCount] > 1;
            int v42 = 96;
            int v43 = 128;
            goto LABEL_117;
          }
          if (v40)
          {
            unsigned int v148 = 0;
            goto LABEL_121;
          }
        }
        BOOL v41 = (unint64_t)[a2 motionKeyframeCount] > 1;
        int v42 = 64;
        int v43 = 96;
LABEL_117:
        if (v41) {
          int v42 = v43;
        }
        unsigned int v148 = v42;
LABEL_121:
        if (!v15) {
          int v36 = 0;
        }
        if (v34 < 2)
        {
          unsigned int v33 = v145;
          if (v36)
          {
            uint64_t v149 = 0;
            uint64_t v150 = 0;
            uint64_t v154 = 0;
            unint64_t v32 = 0;
            uint64_t v16 = v8 * (((_WORD)v148 + 63) & 0x1C0) + ((v13 + v8) << 6) + 128;
LABEL_144:
            unsigned int v22 = v143;
            goto LABEL_145;
          }
          unint64_t v32 = 0;
        }
        else
        {
          unsigned int v33 = v145;
          if (!a1)
          {
            uint64_t v16 = v14 + 256;
            unint64_t v56 = 1;
            goto LABEL_130;
          }
          if (*(unsigned char *)(a1 + 83)) {
            v16 += (32 * v13 - 32) & 0xFFFFFFFFFFFFFFC0;
          }
          else {
            uint64_t v16 = v14 + 256;
          }
          if (([*(id *)(a1 + 48) usage] & 1) == 0)
          {
            unint64_t v56 = *(void *)(a1 + 184);
            if (v56 <= 1) {
              unint64_t v56 = 1;
            }
LABEL_130:
            unint64_t v32 = (v8 + v56 - 1) / v56;
            if ((v36 & 1) == 0) {
              goto LABEL_137;
            }
            goto LABEL_136;
          }
          unint64_t v32 = 0;
          if (v36)
          {
LABEL_136:
            uint64_t v149 = 0;
            uint64_t v150 = 0;
            uint64_t v154 = 0;
            goto LABEL_144;
          }
        }
LABEL_137:
        uint64_t v149 = 0;
        uint64_t v150 = 0;
        uint64_t v154 = 0;
        if (v13 >= v8) {
          unint64_t v57 = v8;
        }
        else {
          unint64_t v57 = v13;
        }
        unint64_t v58 = (v8 * v148 + 32 * v57 + 63) & 0xFFFFFFFFFFFFFFC0;
        if ((v148 & 0x3C) != 0) {
          unint64_t v59 = v58;
        }
        else {
          unint64_t v59 = v8 * v148;
        }
        v16 += v59;
        goto LABEL_144;
      }
      int v53 = v39;
      unint64_t v54 = [a2 motionKeyframeCount];
      if (v54 <= 1) {
        int v52 = 32;
      }
      else {
        int v52 = 48;
      }
      if (v54 <= 1) {
        int v55 = 48;
      }
      else {
        int v55 = 96;
      }
      if (v53) {
        int v52 = v55;
      }
LABEL_108:
      unsigned int v148 = v52;
      a4 = v144;
      goto LABEL_121;
    }
    unsigned int v86 = [a2 motionKeyframeCount];
    unsigned int v35 = 0;
    BOOL v31 = 0;
    unint64_t v34 = v86;
    unsigned int v146 = v86;
    goto LABEL_67;
  }
  uint64_t v17 = objc_opt_class();
  if ([v17 isSubclassOfClass:objc_opt_class()])
  {
    uint64_t v154 = [a2 maxInstanceCount];
    if ([a2 instanceDescriptorType] == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
    {
      uint64_t v150 = [a2 maxMotionTransformCount];
      uint64_t v18 = [a2 motionTransformStride];
      int v19 = [a2 motionTransformType];
      uint64_t v20 = 64;
      unsigned int v148 = 48;
      if (v19) {
        unsigned int v21 = 64;
      }
      else {
        unsigned int v21 = 48;
      }
      if (v18) {
        unsigned int v21 = v18;
      }
      uint64_t v149 = v21;
      unsigned int v22 = 9;
    }
    else
    {
      uint64_t v20 = 128;
      unsigned int v22 = 8;
      uint64_t v149 = 48;
      unsigned int v148 = 128;
      uint64_t v150 = v154;
    }
    unint64_t v32 = 0;
    unsigned int v33 = 0;
    v16 += v20 * v154;
    goto LABEL_111;
  }
  uint64_t v154 = [a2 instanceCount];
  if ([a2 instanceDescriptorType] == 2 || objc_msgSend(a2, "instanceDescriptorType") == 4)
  {
    uint64_t v150 = [a2 motionTransformCount];
    uint64_t v26 = [a2 motionTransformStride];
    int v27 = [a2 motionTransformType];
    uint64_t v28 = 64;
    int v29 = 48;
    if (v27) {
      unsigned int v30 = 64;
    }
    else {
      unsigned int v30 = 48;
    }
    if (v26) {
      unsigned int v30 = v26;
    }
    uint64_t v149 = v30;
    unsigned int v22 = 9;
  }
  else
  {
    uint64_t v28 = 128;
    unsigned int v22 = 8;
    uint64_t v149 = 48;
    int v29 = 128;
    uint64_t v150 = v154;
  }
  unint64_t v32 = 0;
  unsigned int v33 = 0;
  v16 += v28 * v154;
  int v153 = -1;
  unsigned int v146 = 1;
  unsigned int v148 = v29;
LABEL_145:
  if (v32 >= v13) {
    unint64_t v60 = v13;
  }
  else {
    unint64_t v60 = v32;
  }
  {
  }
  unint64_t v61 = v16 + (v60 << 7);
  unsigned int v62 = v152;
  if (v152 >= 2 && !v153)
  {
    if ([(id)a1 buildAlgorithm])
    {
      if (a1) {
        uint64_t v63 = *(void *)(a1 + 24);
      }
      else {
        LODWORD(v63) = 0;
      }
      if ([(id)a1 buildAlgorithm] == 2)
      {
        {
          unsigned int v64 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
LABEL_184:
          unsigned int v84 = (v63 + 3) >> 2;
          if (v84 <= (float)((float)(*(float *)v64 * (float)v63) + 0.5)) {
            unsigned int v84 = (float)((float)(*(float *)v64 * (float)v63) + 0.5);
          }
          unint64_t v85 = v84 << 6;
LABEL_212:
          int v81 = 0;
          v61 += v85;
          goto LABEL_225;
        }
        unsigned int v64 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf = 1052938076;
LABEL_219:
          __cxa_guard_release(v90);
        }
      }
      else
      {
        {
          unsigned int v64 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
          goto LABEL_184;
        }
        unsigned int v64 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
        {
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf = 1052602532;
          goto LABEL_219;
        }
      }
      unsigned int v62 = v152;
      goto LABEL_184;
    }
    if (a1)
    {
      uint64_t v82 = *(void *)(a1 + 176);
      if (v22 <= 3)
      {
LABEL_181:
        unsigned int v83 = dword_242EA88E0[v22];
LABEL_206:
        unsigned int v87 = (v82 + v83 - 1) / v83;
        if (v87 >= 4) {
          unsigned int v87 = 4;
        }
        unint64_t v85 = v147 * (v87 << 6);
        if (a1) {
          unint64_t v88 = *(void *)(a1 + 184);
        }
        else {
          unint64_t v88 = 0;
        }
        unint64_t v89 = ((v8 + v88 - 1) / v88) << 8;
        if (v89 < v85) {
          unint64_t v85 = v89;
        }
        goto LABEL_212;
      }
    }
    else
    {
      LODWORD(v82) = 0;
      if (v22 <= 3) {
        goto LABEL_181;
      }
    }
    unsigned int v83 = 0;
    goto LABEL_206;
  }
  if (v152 != 1)
  {
    int v81 = 0;
    goto LABEL_225;
  }
  if ([(id)a1 buildAlgorithm] != 2)
  {
    if (a1)
    {
      unint64_t v65 = *(void *)(a1 + 176);
      if (v61 > 0x4000)
      {
LABEL_161:
        uint64_t v66 = v148;
        unint64_t v67 = 8 * v65;
        if (8 * v65 >= 0x10) {
          unint64_t v67 = 16;
        }
        unint64_t v68 = v67 / v65;
        unint64_t v69 = v67 / v65 * v65;
        unint64_t v70 = v65 * v148;
        BOOL v71 = v70 > 0x3F;
        if (v70 <= 0x3F) {
          unint64_t v72 = 0;
        }
        else {
          unint64_t v72 = v68;
        }
        uint64_t v73 = v68 * v70 + 575;
        if (!v71) {
          uint64_t v73 = 575;
        }
        BOOL v75 = v67 != v69 && v72 < 8;
        uint64_t v77 = (v148 > 0x3F) & v75;
        BOOL v76 = v77 == 0;
        uint64_t v78 = v77 << 63 >> 63;
        if (v76) {
          uint64_t v66 = 0;
        }
        unint64_t v79 = (v73 + v66 + ((v78 - v72) << 6)) & 0xFFFFFFFFFFFFFFC0;
        unint64_t v80 = v79 * ((v61 - v79 + 0x3FFF) / (0x4000 - v79) - 1);
        goto LABEL_223;
      }
    }
    else
    {
      unint64_t v65 = 0;
      if (v61 > 0x4000) {
        goto LABEL_161;
      }
    }
    unint64_t v80 = 0;
LABEL_223:
    v61 += v80;
  }
  int v81 = 1;
LABEL_225:
  *a4 = v61;
  if ([(id)a1 buildAlgorithm] == 2)
  {
    if (a1) {
      unsigned int v91 = (*(_DWORD *)(a1 + 116) + *(_DWORD *)(a1 + 24) - 1) / *(_DWORD *)(a1 + 116);
    }
    else {
      unsigned int v91 = 0;
    }
    unsigned int v92 = v91 + 1;
    unint64_t v61 = (v61 + (v91 << 6) + 8 * (v91 + 1) + 63) & 0xFFFFFFFFFFFFFFC0;
    unsigned int v93 = 2;
  }
  else if ([(id)a1 buildAlgorithm] == 1)
  {
    unsigned int v92 = 0;
    unsigned int v93 = 2;
  }
  else
  {
    unint64_t v94 = *a4 + 63;
    if (v94 >> 38) {
      int v95 = 8;
    }
    else {
      int v95 = 4;
    }
    if (v94 >> 30) {
      int v96 = v95;
    }
    else {
      int v96 = 3;
    }
    if (v94 >= 0x400000) {
      int v97 = v96;
    }
    else {
      int v97 = 2;
    }
    unsigned int v92 = 0;
    if (v94 >= 0x4000) {
      unsigned int v93 = v97;
    }
    else {
      unsigned int v93 = 1;
    }
  }
  if (a1 && ([*(id *)(a1 + 48) usage] & 1) != 0)
  {
    if ([(id)a1 buildAlgorithm] != 2)
    {
      if ([(id)a1 buildAlgorithm] == 1)
      {
        unint64_t v114 = (v61 + 63) & 0xFFFFFFFFFFFFFFC0;
        int v115 = *(_DWORD *)(a1 + 24);
        if (v115) {
          unsigned int v116 = (7 * *(_DWORD *)(a1 + 184) + 8 * v115 - 1) / (7 * *(_DWORD *)(a1 + 184));
        }
        else {
          unsigned int v116 = 1;
        }
        unint64_t v117 = (v116 * v93 + 143) & 0x1FFFFFFC0;
      }
      else
      {
        unint64_t v114 = (v61 + 279) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v117 = (v13 * v93 + 7) & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v61 = v117 + v114;
      if (!v81) {
        goto LABEL_280;
      }
      goto LABEL_248;
    }
    unint64_t v61 = ((v61 + 63) & 0xFFFFFFFFFFFFFFC0) + 80 * v92 + 32 * v92 - 32 + v13 * v93;
  }
  if (!v81) {
    goto LABEL_280;
  }
LABEL_248:
  if ([(id)a1 buildAlgorithm] == 2)
  {
    if (a1)
    {
      unint64_t v98 = *(void *)(a1 + 176);
      if (v61 > 0x4000)
      {
LABEL_251:
        uint64_t v99 = v148;
        unint64_t v100 = 8 * v98;
        if (8 * v98 >= 0x10) {
          unint64_t v100 = 16;
        }
        unint64_t v101 = v100 / v98;
        unint64_t v102 = v100 / v98 * v98;
        unint64_t v103 = v98 * v148;
        uint64_t v104 = v101 * v103 + 575;
        BOOL v105 = v103 > 0x3F;
        if (v103 <= 0x3F) {
          unint64_t v106 = 0;
        }
        else {
          unint64_t v106 = v101;
        }
        uint64_t v107 = 575;
        if (v105) {
          uint64_t v107 = v104;
        }
        BOOL v109 = v100 != v102 && v106 < 8;
        uint64_t v110 = (v148 > 0x3F) & v109;
        BOOL v76 = v110 == 0;
        uint64_t v111 = v110 << 63 >> 63;
        if (v76) {
          uint64_t v99 = 0;
        }
        unint64_t v112 = (v107 + v99 + ((v111 - v106) << 6)) & 0xFFFFFFFFFFFFFFC0;
        unint64_t v113 = v112 * ((v61 - v112 + 0x3FFF) / (0x4000 - v112) - 1);
        goto LABEL_279;
      }
    }
    else
    {
      unint64_t v98 = 0;
      if (v61 > 0x4000) {
        goto LABEL_251;
      }
    }
    unint64_t v113 = 0;
LABEL_279:
    v61 += v113;
  }
LABEL_280:
  if (a1 && *(unsigned char *)(a1 + 83))
  {
    if (v151)
    {
LABEL_283:
      uint64_t v119 = v149;
      uint64_t v118 = v150;
      return ((((v61 + v119 * v118 + 63) & 0xFFFFFFFFFFFFFFC0) + 16 * v154 + 83) & 0xFFFFFFFFFFFFFFF0) + 8 * v33;
    }
  }
  else
  {
    unsigned int v120 = v146 - 1;
    if (v146 - 1 <= 1) {
      uint64_t v121 = 1;
    }
    else {
      uint64_t v121 = v120;
    }
    BOOL v123 = v61 * v121 < 0x4000 || v120 < 2 || v62 > 1;
    unint64_t v124 = (v61 + 0x3FFF) & 0xFFFFFFFFFFFFC000;
    if (v123) {
      unint64_t v124 = v61;
    }
    unint64_t v61 = v124 * v121;
    if (v151) {
      goto LABEL_283;
    }
  }
  if (v153 == 2)
  {
    if (a1
      && *(void *)(a1 + 40)
      && ((int v125 = *(_DWORD *)(a1 + 136), v125 == 5) || v125 == 2)
      && objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
    {
      if (v125 == 5)
      {
        unint64_t v126 = 0;
        uint64_t v127 = 0;
        do
        {
          long long v128 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v126);
          if ([a2 motionKeyframeCount])
          {
            unint64_t v129 = 0;
            do
            {
              v127 += 16 * [v128 controlPointCount];
              ++v129;
            }
            while ([a2 motionKeyframeCount] > v129);
          }
          ++v126;
        }
        while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v126);
      }
      else
      {
        unint64_t v142 = 0;
        uint64_t v127 = 0;
        do
          v127 += 16
                * objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v142++), "controlPointCount");
        while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v142);
      }
      if (v127) {
        unint64_t v61 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
      }
    }
    else
    {
      uint64_t v127 = 0;
    }
    v61 += v127;
  }
  if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
  {
    if (a1)
    {
      uint64_t v130 = *(unsigned int *)(a1 + 136);
      objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
      unsigned int v131 = v33;
      if (v130 > 5) {
        int v132 = -1;
      }
      else {
        int v132 = dword_242EAC2E8[v130];
      }
    }
    else
    {
      unsigned int v131 = v33;
      objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
      int v132 = 0;
    }
    if (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count"))
    {
      unint64_t v134 = 0;
      uint64_t v133 = 0;
      do
      {
        long long v139 = objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "objectAtIndexedSubscript:", v134);
        __n128 v140 = v139;
        if (v132 == 1)
        {
          unsigned int v135 = [v139 boundingBoxCount];
        }
        else if (v132)
        {
          unsigned int v135 = [v139 segmentCount];
        }
        else
        {
          unsigned int v135 = [v139 triangleCount];
        }
        unsigned int v136 = v135;
        uint64_t v137 = [v140 primitiveDataElementSize];
        uint64_t v138 = (1 << -(char)__clz(v137 - 1));
        if (v137 > 0x10) {
          uint64_t v138 = 32;
        }
        if (v137 < 2) {
          uint64_t v138 = 1;
        }
        v133 += (((v137 + v138 - 1) & -v138) * v136 + 31) & 0xFFFFFFFFFFFFFFE0;
        ++v134;
      }
      while (objc_msgSend((id)objc_msgSend(a2, "geometryDescriptors"), "count") > v134);
      if (v133) {
        unint64_t v61 = (v61 + 31) & 0xFFFFFFFFFFFFFFE0;
      }
    }
    else
    {
      uint64_t v133 = 0;
    }
    unsigned int v33 = v131;
  }
  else
  {
    uint64_t v133 = 0;
  }
  uint64_t v119 = v149;
  uint64_t v118 = v150;
  v61 += v133;
  return ((((v61 + v119 * v118 + 63) & 0xFFFFFFFFFFFFFFC0) + 16 * v154 + 83) & 0xFFFFFFFFFFFFFFF0) + 8 * v33;
}

unint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocatePLOCScratch(void *a1, unint64_t a2, void *a3)
{
  bzero(a1, 0x308uLL);
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6 && !*(_DWORD *)(a2 + 136) && *(_DWORD *)(a2 + 140) == 2)
    {
      uint64_t v7 = *(void *)(a2 + 216);
      uint64_t v8 = *(void *)(a2 + 224);
      uint64_t v9 = 8 * *(void *)(a2 + 24);
      unint64_t v10 = a3 + 7;
      uint64_t v11 = 16 * v8 + 63;
      unint64_t v12 = a3[1];
      BOOL v13 = ((v11 + a3[7]) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v14 = ((v11 + a3[7]) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v15 = a3[v14 + 7];
      v10[v14] = (v15 + v11) & 0xFFFFFFFFFFFFFFC0;
      a1[72] = a3;
      *((_DWORD *)a1 + 146) = 0;
      *((_DWORD *)a1 + 147) = v13;
      a1[74] = v15;
      *((_DWORD *)a1 + 150) = 16 * v8;
      int v16 = 4 * v8;
      uint64_t v17 = 4 * v8 + 63;
      BOOL v18 = ((a3[7] + v17) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v19 = ((a3[7] + v17) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v20 = a3[v19 + 7];
      v10[v19] = (v20 + v17) & 0xFFFFFFFFFFFFFFC0;
      a1[76] = a3;
      *((_DWORD *)a1 + 154) = 0;
      *((_DWORD *)a1 + 155) = v18;
      a1[78] = v20;
      v8 *= 36;
      BOOL v21 = ((a3[7] + v8 + 63) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v22 = ((a3[7] + v8 + 63) & 0xFFFFFFFFFFFFFFC0) >= v12;
      uint64_t v23 = a3[v22 + 7];
      *((_DWORD *)a1 + 158) = v16;
      v10[v22] = (v23 + v8 + 63) & 0xFFFFFFFFFFFFFFC0;
      a1[80] = a3;
      *((_DWORD *)a1 + 162) = 0;
      *((_DWORD *)a1 + 163) = v21;
      a1[82] = v23;
      *((_DWORD *)a1 + 166) = v8;
      uint64_t v24 = a3[16];
      uint64_t v25 = v9 + v24 + 63;
      a1[84] = a3;
      a1[85] = 0x100000004;
      a1[86] = v24;
      *((_DWORD *)a1 + 174) = v9;
      uint64_t v26 = 8 * v6;
      unint64_t v27 = ((v25 | 0x38) + v26) & 0xFFFFFFFFFFFFFFC0;
      a1[88] = a3;
      a1[89] = 0x100000004;
      a1[90] = v25 & 0xFFFFFFFFFFFFFFC0;
      *((_DWORD *)a1 + 182) = v26;
      a3[16] = (v7 + v27 + 63) & 0xFFFFFFFFFFFFFFC0;
      a1[92] = a3;
      a1[93] = 0x100000004;
      a1[94] = v27;
      *((_DWORD *)a1 + 190) = v7;
    }
    if ([(id)a2 buildAlgorithm] == 1)
    {
      if (*(void *)(a2 + 24) <= 1uLL) {
        uint64_t v28 = 1;
      }
      else {
        uint64_t v28 = *(void *)(a2 + 24);
      }
      unint64_t result = -[BVHDescriptor maxInnerNodeCount](a2);
      uint64_t v30 = 24 * (result + v28);
      goto LABEL_11;
    }
    uint64_t v32 = *(void *)(a2 + 24);
    unsigned int v33 = (v32 + 2047) >> 11;
    uint64_t v34 = 4 * v32;
    unsigned int v35 = (*(_DWORD *)(a2 + 116) + v32 - 1) / *(_DWORD *)(a2 + 116);
  }
  else
  {
    unint64_t result = [0 buildAlgorithm];
    if (result == 1)
    {
      uint64_t v30 = 24;
LABEL_11:
      uint64_t v31 = a3[16];
      a3[16] = (v31 + v30 + 63) & 0xFFFFFFFFFFFFFFC0;
      *a1 = a3;
      a1[1] = 0x100000004;
      a1[2] = v31;
      *((_DWORD *)a1 + 6) = v30;
      goto LABEL_36;
    }
    unsigned int v33 = 0;
    unsigned int v35 = 0;
    uint64_t v34 = 0;
  }
  unint64_t v36 = a3[1];
  BOOL v37 = ((v34 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
  uint64_t v38 = ((v34 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
  uint64_t v39 = a3[v38 + 9];
  a3[v38 + 9] = (v39 + v34 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[4] = a3;
  *((_DWORD *)a1 + 10) = 1;
  *((_DWORD *)a1 + 11) = v37;
  a1[6] = v39;
  *((_DWORD *)a1 + 14) = v34;
  if (a2) {
    uint64_t v40 = 4 * *(void *)(a2 + 24);
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = a3[16];
  unint64_t v42 = (v40 + v41 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[8] = a3;
  a1[9] = 0x100000004;
  a1[10] = v41;
  *((_DWORD *)a1 + 22) = v40;
  if (a2)
  {
    int v43 = *(unsigned __int8 *)(a2 + 86);
    if (*(unsigned char *)(a2 + 86))
    {
      int v44 = (v33 << 10) + 1024;
      uint64_t v45 = 4 * *(void *)(a2 + 24);
      int v46 = a3 + 9;
      BOOL v47 = ((v45 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v48 = ((v45 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v49 = a3[v48 + 9];
      v46[v48] = (v45 + 63 + v49) & 0xFFFFFFFFFFFFFFC0;
      a1[12] = a3;
      *((_DWORD *)a1 + 26) = 1;
      *((_DWORD *)a1 + 27) = v47;
      a1[14] = v49;
      *((_DWORD *)a1 + 30) = v45;
      BOOL v50 = ((v45 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v51 = ((v45 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v52 = a3[v51 + 9];
      v46[v51] = (v45 + 63 + v52) & 0xFFFFFFFFFFFFFFC0;
      a1[16] = a3;
      *((_DWORD *)a1 + 34) = 1;
      *((_DWORD *)a1 + 35) = v50;
      a1[18] = v52;
      *((_DWORD *)a1 + 38) = v45;
      uint64_t v53 = (v33 << 10) + 1087;
      LODWORD(v45) = ((a3[9] + v53) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v54 = ((a3[9] + v53) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v55 = a3[v54 + 9];
      v46[v54] = (v55 + v53) & 0xFFFFFFFFFFFFFFC0;
      a1[20] = a3;
      *((_DWORD *)a1 + 42) = 1;
      *((_DWORD *)a1 + 43) = v45;
      a1[22] = v55;
      int v56 = 8 * v33;
      uint64_t v57 = (v56 + 63);
      LODWORD(v53) = ((a3[9] + v57) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v58 = ((a3[9] + v57) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v59 = a3[v58 + 9];
      v46[v58] = (v59 + v57) & 0xFFFFFFFFFFFFFFC0;
      *((_DWORD *)a1 + 46) = v44;
      a1[24] = a3;
      *((_DWORD *)a1 + 50) = 1;
      *((_DWORD *)a1 + 51) = v53;
      a1[26] = v59;
      *((_DWORD *)a1 + 54) = v56;
    }
    if (*(unsigned char *)(a2 + 85))
    {
      uint64_t v60 = *(void *)(a2 + 24);
      uint64_t v61 = 2 * v60 + 63;
      BOOL v62 = ((v61 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
      uint64_t v63 = &a3[((v61 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36];
      uint64_t v64 = v63[9];
      v63[9] = (v61 + v64) & 0xFFFFFFFFFFFFFFC0;
      a1[48] = a3;
      *((_DWORD *)a1 + 98) = 1;
      *((_DWORD *)a1 + 99) = v62;
      a1[50] = v64;
      *((_DWORD *)a1 + 102) = 2 * v60;
      uint64_t v65 = 36 * (2 * v35 - 1);
      if (*(unsigned char *)(a2 + 87))
      {
        unint64_t v66 = (v65 + v42 + 63) & 0xFFFFFFFFFFFFFFC0;
        a3[16] = v66;
        BOOL v67 = 1;
        int v68 = 4;
      }
      else
      {
        BOOL v67 = ((a3[9] + v65 + 63) & 0xFFFFFFFFFFFFFFC0) >= v36;
        unint64_t v69 = &a3[((a3[9] + v65 + 63) & 0xFFFFFFFFFFFFFFC0) >= v36];
        unint64_t v66 = v42;
        unint64_t v42 = v69[9];
        v69[9] = (v42 + v65 + 63) & 0xFFFFFFFFFFFFFFC0;
        int v68 = 1;
      }
      a1[52] = a3;
      *((_DWORD *)a1 + 106) = v68;
      *((_DWORD *)a1 + 107) = v67;
      a1[54] = v42;
      *((_DWORD *)a1 + 110) = v65;
      if (v43)
      {
        unint64_t v42 = v66;
      }
      else
      {
        unsigned int v70 = v60 + 511;
        unint64_t v71 = 96 * ((v60 + 511) >> 9);
        unint64_t v72 = ((v60 + 1023) >> 8) & 0xFFFFFC;
        if (v71 <= v72) {
          unint64_t v71 = v72;
        }
        uint64_t v73 = a3 + 9;
        BOOL v74 = ((v71 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
        uint64_t v75 = ((v71 + 63 + a3[9]) & 0xFFFFFFFFFFFFFFC0) >= v36;
        uint64_t v76 = a3[v75 + 9];
        a3[v75 + 9] = (v71 + 63 + v76) & 0xFFFFFFFFFFFFFFC0;
        a1[56] = a3;
        *((_DWORD *)a1 + 114) = 1;
        *((_DWORD *)a1 + 115) = v74;
        a1[58] = v76;
        *((_DWORD *)a1 + 118) = v71;
        if (v70 >= 0x200) {
          unsigned int v77 = (v70 >> 8) & 0xFFFFFE;
        }
        else {
          unsigned int v77 = 2;
        }
        uint64_t v78 = 1440 * v77;
        BOOL v79 = (((v78 | 0x3F) + *v73) & 0xFFFFFFFFFFFFFFC0) >= v36;
        uint64_t v80 = (((v78 | 0x3F) + *v73) & 0xFFFFFFFFFFFFFFC0) >= v36;
        uint64_t v81 = v73[v80];
        v73[v80] = ((v78 | 0x3F) + v81) & 0xFFFFFFFFFFFFFFC0;
        a1[60] = a3;
        *((_DWORD *)a1 + 122) = 1;
        *((_DWORD *)a1 + 123) = v79;
        a1[62] = v81;
        *((_DWORD *)a1 + 126) = v78;
        uint64_t v82 = 4 * v35;
        BOOL v83 = ((*v73 + v82 + 63) & 0xFFFFFFFFFFFFFFC0) >= v36;
        uint64_t v84 = v83;
        uint64_t v85 = v73[v84];
        v73[v84] = (v85 + v82 + 63) & 0xFFFFFFFFFFFFFFC0;
        a1[64] = a3;
        *((_DWORD *)a1 + 130) = 1;
        *((_DWORD *)a1 + 131) = v83;
        a1[66] = v85;
        *((_DWORD *)a1 + 134) = v82;
        unint64_t v42 = (v66 + 351) & 0xFFFFFFFFFFFFFFC0;
        a1[68] = a3;
        a1[69] = 0x100000004;
        a1[70] = v66;
        *((_DWORD *)a1 + 142) = 288;
      }
    }
  }
  uint64_t v86 = v42 + 80 * (v35 + 1) + 63;
  a3[16] = v86 & 0xFFFFFFFFFFFFFFC0;
  a1[28] = a3;
  a1[29] = 0x100000004;
  a1[30] = v42;
  *((_DWORD *)a1 + 62) = 80 * (v35 + 1);
  if (a2)
  {
    if (*(void *)(a2 + 24) <= 1uLL) {
      uint64_t v87 = 1;
    }
    else {
      uint64_t v87 = *(void *)(a2 + 24);
    }
    unint64_t result = -[BVHDescriptor maxInnerNodeCount](a2);
  }
  else
  {
    unint64_t result = 0;
    uint64_t v87 = 1;
  }
  unint64_t v88 = 24 * (v87 + result + v35);
  unint64_t v89 = ((v86 | 0x38) + v88) & 0xFFFFFFFFFFFFFFC0;
  a1[32] = a3;
  a1[33] = 0x100000004;
  a1[34] = v86 & 0xFFFFFFFFFFFFFFC0;
  *((_DWORD *)a1 + 70) = v88;
  unint64_t v90 = (v89 + 79) & 0xFFFFFFFFFFFFFFC0;
  a1[36] = a3;
  a1[37] = 0x100000004;
  a1[38] = v89;
  *((_DWORD *)a1 + 78) = 16;
  unint64_t v91 = (4 * v35 + v90 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[40] = a3;
  a1[41] = 0x100000004;
  a1[42] = v90;
  *((_DWORD *)a1 + 86) = 4 * v35;
  uint64_t v92 = 24 * v35;
  a3[16] = (v92 + v91 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[44] = a3;
  a1[45] = 0x100000004;
  a1[46] = v91;
  *((_DWORD *)a1 + 94) = v92;
LABEL_36:
  *((_DWORD *)a1 + 192) = 2;
  return result;
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateTopDownScratch(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5, uint64_t a6)
{
  bzero(a1, 0x2B8uLL);
  if (a3)
  {
    uint64_t v12 = *(void *)(a3 + 40);
    if (v12)
    {
      if (!*(_DWORD *)(a3 + 136) && *(_DWORD *)(a3 + 140) == 2)
      {
        uint64_t v13 = *(void *)(a3 + 216);
        uint64_t v14 = *(void *)(a3 + 224);
        uint64_t v15 = 8 * *(void *)(a3 + 24);
        int v16 = a5 + 7;
        uint64_t v17 = 16 * v14 + 63;
        unint64_t v18 = a5[1];
        BOOL v19 = ((v17 + a5[7]) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v20 = ((v17 + a5[7]) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v21 = a5[v20 + 7];
        v16[v20] = (v21 + v17) & 0xFFFFFFFFFFFFFFC0;
        *a1 = a5;
        *((_DWORD *)a1 + 2) = 0;
        *((_DWORD *)a1 + 3) = v19;
        a1[2] = v21;
        *((_DWORD *)a1 + 6) = 16 * v14;
        uint64_t v22 = 4 * v14 + 63;
        BOOL v23 = ((a5[7] + v22) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v24 = ((a5[7] + v22) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v25 = a5[v24 + 7];
        v16[v24] = (v25 + v22) & 0xFFFFFFFFFFFFFFC0;
        a1[4] = a5;
        *((_DWORD *)a1 + 10) = 0;
        *((_DWORD *)a1 + 11) = v23;
        a1[6] = v25;
        *((_DWORD *)a1 + 14) = 4 * v14;
        v14 *= 36;
        BOOL v26 = ((a5[7] + v14 + 63) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v27 = ((a5[7] + v14 + 63) & 0xFFFFFFFFFFFFFFC0) >= v18;
        uint64_t v28 = a5[v27 + 7];
        v16[v27] = (v28 + v14 + 63) & 0xFFFFFFFFFFFFFFC0;
        a1[8] = a5;
        *((_DWORD *)a1 + 18) = 0;
        *((_DWORD *)a1 + 19) = v26;
        a1[10] = v28;
        *((_DWORD *)a1 + 22) = v14;
        uint64_t v29 = a5[16];
        uint64_t v30 = v15 + v29 + 63;
        a1[45] = a5;
        a1[46] = 0x100000004;
        a1[47] = v29;
        *((_DWORD *)a1 + 96) = v15;
        uint64_t v31 = 8 * v12;
        unint64_t v32 = ((v30 | 0x38) + v31) & 0xFFFFFFFFFFFFFFC0;
        a1[49] = a5;
        a1[50] = 0x100000004;
        a1[51] = v30 & 0xFFFFFFFFFFFFFFC0;
        *((_DWORD *)a1 + 104) = v31;
        a5[16] = (v13 + v32 + 63) & 0xFFFFFFFFFFFFFFC0;
        a1[53] = a5;
        a1[54] = 0x100000004;
        a1[55] = v32;
        *((_DWORD *)a1 + 112) = v13;
      }
    }
  }
  uint64_t v33 = *(void *)(a2 + 808);
  unint64_t explicit = (BVHTopDownBuilder *)atomic_load_explicit((atomic_ullong *volatile)(v33 + 7896), memory_order_acquire);
  if (!explicit)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v33 + 7756));
    unint64_t explicit = *(BVHTopDownBuilder **)(v33 + 7896);
    if (!explicit)
    {
      unint64_t explicit = [[BVHTopDownBuilder alloc] initWithDevice:a2];
      atomic_store((unint64_t)explicit, (unint64_t *)(v33 + 7896));
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 7756));
  }
  unint64_t v35 = -[BVHDescriptor maxInnerNodeCount](a3);
  unint64_t v36 = -[BVHDescriptor maxLeafNodeCount](a3);
  if (v35 <= 1) {
    uint64_t v37 = 1;
  }
  else {
    uint64_t v37 = v35;
  }
  uint64_t v38 = [(BVHTopDownBuilder *)explicit getBuildScratchBufferSizeForDescriptor:a3];
  unint64_t v39 = a5[1];
  BOOL v40 = ((v38 + 63 + a5[9]) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v41 = 8 * (((v38 + 63 + a5[9]) & 0xFFFFFFFFFFFFFFC0) >= v39);
  uint64_t v42 = *(void *)((char *)a5 + v41 + 72);
  *(void *)((char *)a5 + v41 + 72) = (v42 + v38 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[12] = a5;
  *((_DWORD *)a1 + 26) = 1;
  *((_DWORD *)a1 + 27) = v40;
  a1[14] = v42;
  *((_DWORD *)a1 + 30) = v38;
  *((_DWORD *)a1 + 40) = v37;
  int v43 = a5 + 11;
  uint64_t v44 = ((4 * v37) & 0x3FFFFFFFCLL) + 63;
  LODWORD(v41) = ((a5[11] + v44) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v45 = ((a5[11] + v44) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v46 = a5[v45 + 11];
  v43[v45] = (v46 + v44) & 0xFFFFFFFFFFFFFFC0;
  a1[16] = a5;
  *((_DWORD *)a1 + 34) = 2;
  *((_DWORD *)a1 + 35) = v41;
  a1[18] = v46;
  LODWORD(v41) = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v47 = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v48 = a5[v47 + 11];
  *((_DWORD *)a1 + 38) = 4 * v37;
  v43[v47] = (v48 + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[21] = a5;
  *((_DWORD *)a1 + 44) = 2;
  *((_DWORD *)a1 + 45) = v41;
  a1[23] = v48;
  *((_DWORD *)a1 + 48) = 4 * v37;
  LODWORD(v41) = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v49 = ((a5[11] + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v50 = a5[v49 + 11];
  v43[v49] = (v50 + 4 * v37 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[25] = a5;
  *((_DWORD *)a1 + 52) = 2;
  *((_DWORD *)a1 + 53) = v41;
  a1[27] = v50;
  *((_DWORD *)a1 + 56) = 4 * v37;
  unint64_t v51 = (v37 + 4095) & 0xFFFFFFFFFFFFF000;
  if (v51 <= 0x1000)
  {
    uint64_t v54 = 0;
  }
  else
  {
    uint64_t v52 = 0;
    do
    {
      v52 += (((v51 + 4095) >> 12) + 4095) & 0x1FFFFFFFFFF000;
      BOOL v53 = v51 > 0x1000000;
      unint64_t v51 = (v51 + 4095) >> 12;
    }
    while (v53);
    uint64_t v54 = 4 * v52;
  }
  uint64_t v55 = a5 + 11;
  BOOL v56 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v57 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v58 = a5[v57 + 11];
  v55[v57] = (v58 + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0;
  a1[29] = a5;
  *((_DWORD *)a1 + 60) = 2;
  *((_DWORD *)a1 + 61) = v56;
  a1[31] = v58;
  *((_DWORD *)a1 + 64) = v54;
  BOOL v59 = ((a5[11] + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0) >= v39;
  uint64_t v60 = v59;
  uint64_t v61 = a5[v60 + 11];
  v55[v60] = (v61 + (v54 | 0x3F)) & 0xFFFFFFFFFFFFFFC0;
  a1[33] = a5;
  *((_DWORD *)a1 + 68) = 2;
  *((_DWORD *)a1 + 69) = v59;
  a1[35] = v61;
  *((_DWORD *)a1 + 72) = v54;
  unint64_t v62 = a6 + 7;
  if ((unint64_t)(a6 + 7) >> 35) {
    int v63 = 8;
  }
  else {
    int v63 = 4;
  }
  if ((unint64_t)(a6 + 7) >> 27) {
    int v64 = v63;
  }
  else {
    int v64 = 3;
  }
  if (v62 >= 0x80000) {
    unsigned int v65 = v64;
  }
  else {
    unsigned int v65 = 2;
  }
  if (v62 >= 0x800) {
    uint64_t v66 = v65;
  }
  else {
    uint64_t v66 = 1;
  }
  *((_DWORD *)a1 + 122) = v66;
  unint64_t v67 = (v36 + v35) * v66;
  uint64_t v68 = a5[16];
  unint64_t v69 = (v67 + v68 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[57] = a5;
  a1[58] = 0x100000004;
  a1[59] = v68;
  *((_DWORD *)a1 + 120) = v67;
  unint64_t v70 = (4 * v35 + v69 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[62] = a5;
  a1[63] = 0x100000004;
  a1[64] = v69;
  *((_DWORD *)a1 + 130) = 4 * v35;
  unint64_t v71 = (4 * v36 + v70 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[66] = a5;
  a1[67] = 0x100000004;
  a1[68] = v70;
  *((_DWORD *)a1 + 138) = 4 * v36;
  a5[16] = (v71 + 95) & 0xFFFFFFFFFFFFFFC0;
  a1[79] = a5;
  a1[80] = 0x100000004;
  a1[81] = v71;
  *((_DWORD *)a1 + 164) = 32;
  if (a3 && ([*(id *)(a3 + 48) usage] & 1) != 0)
  {
    uint64_t v72 = a5[16];
    uint64_t v73 = v72 + 335;
    unint64_t v74 = (v72 + 335) & 0xFFFFFFFFFFFFFFC0;
    a5[16] = v74;
    a1[70] = a5;
    a1[71] = 0x100000004;
    a1[72] = v72;
    *((_DWORD *)a1 + 146) = 272;
    unint64_t v75 = a6 + 63;
    if ((unint64_t)(a6 + 63) >= 0x4000)
    {
      if (v75 >= 0x400000)
      {
        if (v75 >> 30)
        {
          if (v75 >> 38) {
            unsigned int v76 = 8;
          }
          else {
            unsigned int v76 = 4;
          }
        }
        else
        {
          unsigned int v76 = 3;
        }
      }
      else
      {
        unsigned int v76 = 2;
      }
    }
    else
    {
      unsigned int v76 = 1;
    }
    *((_DWORD *)a1 + 156) = v76;
    unint64_t v77 = (v35 * v76 + 7) & 0xFFFFFFFFFFFFFFF8;
    a5[16] = ((v73 | 0x38) + v77) & 0xFFFFFFFFFFFFFFC0;
    a1[74] = a5;
    a1[75] = 0x100000004;
    a1[76] = v74;
    *((_DWORD *)a1 + 154) = v77;
  }
  if ([a4 isInstanceDescriptor])
  {
    uint64_t v78 = objc_opt_class();
    LODWORD(v78) = [v78 isSubclassOfClass:objc_opt_class()];
    uint64_t v79 = [a4 instanceDescriptorType];
    if (v78)
    {
      if (v79 == 2 || [a4 instanceDescriptorType] == 4) {
        uint64_t v80 = 56;
      }
      else {
        uint64_t v80 = 24;
      }
      uint64_t v81 = [a4 maxInstanceCount];
    }
    else
    {
      if (v79 == 2 || [a4 instanceDescriptorType] == 4) {
        uint64_t v80 = 56;
      }
      else {
        uint64_t v80 = 24;
      }
      uint64_t v81 = [a4 instanceCount];
    }
    uint64_t v82 = a5[16];
    a5[16] = (v81 * v80 + v82 + 63) & 0xFFFFFFFFFFFFFFC0;
    a1[37] = a5;
    a1[38] = 0x100000004;
    a1[39] = v82;
    *((_DWORD *)a1 + 80) = v81 * v80;
  }
  uint64_t result = [(BVHTopDownBuilder *)explicit getGenericBVHSizeForDescriptor:a3];
  uint64_t v84 = a5[16];
  a1[41] = a5;
  unint64_t v85 = (result + v84 + 63) & 0xFFFFFFFFFFFFFFC0;
  a1[42] = 0x100000004;
  a1[43] = v84;
  *((_DWORD *)a1 + 88) = result;
  a5[16] = (v85 + 87) & 0xFFFFFFFFFFFFFFC0;
  a1[83] = a5;
  a1[84] = 0x100000004;
  a1[85] = v85;
  *((_DWORD *)a1 + 172) = 24;
  return result;
}

void sub_242B34C8C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildAndEncodeRiaBvh(id *a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8)
{
  uint64_t v878 = *MEMORY[0x263EF8340];
  uint64_t v765 = [a5 accelerationStructureUniqueIdentifier];
  uint64_t v14 = (void *)[a5 buffer];
  v771 = a5;
  [a5 bufferOffset];
  [v14 contents];
  [v14 gpuAddress];
  [v14 length];
  uint64_t v778 = (uint64_t)a1;
  [a1[1] useResource:v14 usage:2];
  [a7 contents];
  [a7 gpuAddress];
  [a7 length];
  v745 = a1 + 1;
  [a1[1] useResource:a7 usage:2];
  *(_OWORD *)v783 = 0u;
  long long v784 = 0u;
  unint64_t v762 = a2;
  if (a2 && (uint64_t v15 = *(void *)(a2 + 40)) != 0 && !*(_DWORD *)(a2 + 136) && *(_DWORD *)(a2 + 140) == 2)
  {
    size_t v16 = 4 * v15;
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v783, (uint64_t)a1, 4 * v15, 1);
    bzero(v783[1], v16);
    int v768 = 1;
    v757 = v783[0];
  }
  else
  {
    int v768 = 0;
    v757 = 0;
  }
  char v17 = [(id)a2 buildAlgorithm];
  if (*(_DWORD *)*MEMORY[0x263F4B1E8])
  {
    if (a2)
    {
      [a6 isInstanceDescriptor];
      [*(id *)(a2 + 48) usage];
      [*(id *)(a2 + 48) usage];
      [*(id *)(a2 + 48) usage];
      {
        -[BVHDescriptor isDeterministic]::forceDeterministiCC_SHA256_CTX c = 0;
      }
      if (!-[BVHDescriptor isDeterministic]::forceDeterministic) {
        [*(id *)(a2 + 48) usage];
      }
    }
    else
    {
      [a6 isInstanceDescriptor];
    }
    IOGPUDeviceTraceEvent();
  }
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      uint64_t v18 = [a5 buffer];
      uint64_t v19 = [a5 bufferOffset];
      *(void *)(a3 + 32) = a7;
      *(void *)(a3 + 40) = v19;
      *(void *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
      unint64_t v20 = *(void *)(a3 + 64);
      if (v20 <= *(void *)(a3 + 80)) {
        unint64_t v20 = *(void *)(a3 + 80);
      }
      if (v20 <= *(void *)(a3 + 96)) {
        unint64_t v20 = *(void *)(a3 + 96);
      }
      if (v20 <= *(void *)(a3 + 112)) {
        unint64_t v20 = *(void *)(a3 + 112);
      }
      *(void *)(a3 + 16) = (v20 + 63) & 0xFFFFFFFFFFFFFFC0;
      *(void *)(a3 + 24) = v18;
      *(unsigned char *)a3 = 1;
      uint64_t v21 = (void *)[a5 buffer];
      uint64_t v22 = [a5 bufferOffset];
      int v23 = [a6 isInstanceDescriptor];
      {
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
      }
      int v24 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride;
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride <= 0) {
        int v24 = 2;
      }
      int v25 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::kBvhVersions[v24];
      if (v23) {
        unsigned int v26 = 0x80000000;
      }
      else {
        unsigned int v26 = 0;
      }
      if (v768) {
        int v27 = 0x20000000;
      }
      else {
        int v27 = 0;
      }
      uint64_t v28 = [v21 length];
      [v21 contents];
      uint64_t v29 = [v21 gpuAddress];
      [v21 length];
      [*v745 useResource:v21 usage:2];
      uint64_t v30 = (void *)*((void *)*v745 + 11);
      uint64_t v31 = v30[20];
      uint64_t v32 = v31 + 95;
      if ((unint64_t)(v31 + 95) > v30[19])
      {
        int v530 = AGX::DataBufferAllocator<34ul>::growNoInline(v30 + 2, 3, 0);
        uint64_t v31 = v30[20];
        if (!v530)
        {
LABEL_32:
          unsigned int v33 = (v26 | v27) & 0xE0000000 | v25 & 0x1FFFFFFF;
          unint64_t v34 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
          uint64_t v35 = v30[22];
          v30[20] = v34 + 80;
          *(_DWORD *)unint64_t v34 = 0;
          *(_WORD *)(v34 + 6) = 0;
          *(void *)(v34 + 32) = v29 + v22;
          *(void *)(v34 + 40) = v28 - v22;
          uint64_t v37 = v34 + v35;
          if (*(_DWORD *)(a4 + 8) == 4) {
            uint64_t v38 = *(void *)(*(void *)a4 + 16);
          }
          else {
            uint64_t v38 = 0;
          }
          uint64_t v36 = *(void *)a4 + 8 * *(int *)(a4 + 12);
          uint64_t v57 = v38
              + *(void *)(v36 + 40)
              + *(void *)(a4 + 16)
              + *(void *)(*(void *)(v36 + 24) + (int)*MEMORY[0x263F4B188] + 8);
          uint64_t v58 = *(unsigned int *)(a4 + 24);
          *(void *)(v34 + 48) = v57;
          *(void *)(v34 + 56) = v58;
          *(void *)(v34 + 64) = 0;
          *(_WORD *)(v34 + 72) = 0;
          *(void *)(v34 + 24) = 0;
          *(_WORD *)(v34 + 8) = 16;
          *(void *)v804 = v765;
          v804[2] = v33;
          uint64_t v809 = 0;
          int v810 = 0;
          uint64_t v811 = 0;
          int v812 = 0;
          uint64_t v813 = 0;
          __int16 v814 = 0;
          char v815 = 0;
          memset(&v804[3], 0, 30);
          *(void *)&v804[11] = 0;
          __int16 v805 = 0;
          long long v807 = 0u;
          int v806 = 0;
          int v808 = 0;
          char v817 = 0;
          uint64_t v816 = 0;
          uint64_t v821 = 0;
          long long v820 = 0u;
          long long v819 = 0u;
          long long v818 = 0u;
          long long v59 = *(_OWORD *)(v34 + 32);
          uint64_t v830 = 0;
          int v831 = 0;
          uint64_t v835 = 0;
          int v836 = 0;
          uint64_t v846 = 0;
          int v847 = 0;
          uint64_t v848 = 0;
          int v849 = 0;
          uint64_t v850 = 0;
          int v851 = 0;
          uint64_t v855 = 0;
          __int16 v856 = 0;
          uint64_t v857 = 0;
          int v858 = 0;
          int v859 = 0;
          uint64_t v860 = 0;
          int v861 = 0;
          uint64_t v862 = 0;
          int v863 = 0;
          uint64_t v864 = 0;
          int v865 = 0;
          uint64_t v866 = 0;
          int v867 = 0;
          uint64_t v868 = 0;
          int v869 = 0;
          __int16 v825 = 0;
          uint64_t v824 = 0;
          long long v822 = v59;
          long long v823 = 0u;
          long long v826 = 0u;
          long long v827 = 0u;
          long long v828 = 0u;
          memset(v829, 0, sizeof(v829));
          long long v832 = 0u;
          long long v833 = 0u;
          int v834 = 0;
          long long v837 = 0u;
          long long v838 = 0u;
          long long v839 = 0u;
          long long v840 = 0u;
          long long v841 = 0u;
          long long v842 = 0u;
          long long v843 = 0u;
          long long v844 = 0u;
          int v845 = 0;
          int v854 = 0;
          uint64_t v853 = 0;
          long long v852 = 0u;
          uint64_t v870 = v37;
          __int16 v871 = 1;
          uint64_t v872 = 0;
          int v873 = 0;
          uint64_t v874 = 0;
          int v875 = 0;
          uint64_t v876 = 0;
          __int16 v877 = 0;
          {
            {
            }
            {
            }
            if (shouldDumpOrVerifyBVHs(void)::once != -1) {
              dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_607);
            }
            AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify = 0;
          }
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
          {
            uint64_t v60 = v778;
            uint64_t v61 = (void *)[*(id *)v778 newBufferWithLength:4718984 options:0];
            unint64_t v62 = (void *)[v61 contents];
            uint64_t v63 = [v61 gpuAddress];
            MTLResourceListAddResource();
            IOGPUResourceListAddResource();

            bzero(v62, 0x480188uLL);
            v62[1] = -1;
          }
          else
          {
            uint64_t v63 = 0;
            unint64_t v62 = 0;
            uint64_t v60 = v778;
          }
          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(v802, v60, a6, v762, (uint64_t)v804, a4, (uint64_t)v783[0]);
          *(void *)(v34 + 12) = *(void *)&v804[4];
          unsigned int v91 = v804[3];
          *(_WORD *)(v34 + 4) = v804[3];
          if (v762)
          {
            BOOL v92 = *(_DWORD *)(v762 + 136) == 0;
            if (v91 <= 0x200)
            {
LABEL_84:
              BOOL v93 = !v92;
              int v94 = 73;
              int v95 = 70;
              goto LABEL_705;
            }
          }
          else
          {
            BOOL v92 = 1;
            if (v91 <= 0x200) {
              goto LABEL_84;
            }
          }
          BOOL v93 = !v92;
          if (v91 > 0x400)
          {
            int v94 = 75;
            int v95 = 72;
          }
          else
          {
            int v94 = 74;
            int v95 = 71;
          }
LABEL_705:
          if (v93) {
            int v539 = v94;
          }
          else {
            int v539 = v95;
          }
          unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v539, 0);
          v541 = *(void **)(v778 + 8);
          uint64_t v542 = v541[11];
          if (v762 && *(void *)(v762 + 40) && !*(_DWORD *)(v762 + 136) && *(_DWORD *)(v762 + 140) == 2)
          {
            [*(id *)(v762 + 48) usage];
            AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo>(v778, v762);
            v541 = *(void **)(v778 + 8);
          }
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildSmallBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
          {
            *(void *)&v793[8] = 0;
            *(void *)v793 = v63;
            [v541 setBytes:v793 length:16 atIndex:4];
            v543 = (void *)**((void **)*v745 + 11);
            *(void *)&v785[0] = MEMORY[0x263EF8330];
            *((void *)&v785[0] + 1) = 3221225472;
            *(void *)&v785[1] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE19encodeBuildSmallBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXG17FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke;
            *((void *)&v785[1] + 1) = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
            *(void *)&long long v786 = v62;
            [v543 addCompletedHandler:v785];
            v541 = *v745;
          }
          [v541 setBytes:v804 length:808 atIndex:7];
          uint64_t v544 = *(void *)(v542 + 1920);
          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v542, Pipeline);
          *(_OWORD *)v793 = xmmword_242EA85B0;
          *(void *)&v793[16] = 1;
          int64x2_t v790 = vdupq_n_s64(1uLL);
          uint64_t v791 = 1;
          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v542, 0x16u, (uint64_t *)v793, v790.i32);
          if (*(_DWORD *)(v542 + 1880) == 1) {
            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v542, 22);
          }
          if (v544) {
            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v542, v544);
          }
          goto LABEL_860;
        }
        uint64_t v32 = v31 + 95;
        if ((unint64_t)(v31 + 95) > v30[19]) {
          abort();
        }
      }
      v30[21] = v32;
      goto LABEL_32;
    }
    {
      {
      }
      {
      }
      if (shouldDumpOrVerifyBVHs(void)::once != -1) {
        dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_607);
      }
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXG17FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXG17FamilyBuffer *,unsigned long)::verify = 0;
    }
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXG17FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXG17FamilyBuffer *,unsigned long)::verify)
    {
      uint64_t v54 = (void *)[*a1 newBufferWithLength:4718984 options:0];
      uint64_t v55 = (void *)[v54 contents];
      uint64_t v56 = [v54 gpuAddress];
      MTLResourceListAddResource();
      IOGPUResourceListAddResource();

      bzero(v55, 0x480188uLL);
      v712 = v55;
      v55[1] = -1;
      *(void *)&v804[2] = 51;
      uint64_t v735 = v56;
      *(void *)v804 = v56;
      [a1[1] setBytes:v804 length:16 atIndex:4];
    }
    else
    {
      uint64_t v735 = 0;
      v712 = 0;
    }
    uint64_t v64 = [a5 buffer];
    uint64_t v65 = [a5 bufferOffset];
    *(void *)(a3 + 32) = a7;
    *(void *)(a3 + 40) = v65;
    *(void *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
    unint64_t v66 = *(void *)(a3 + 64);
    if (v66 <= *(void *)(a3 + 80)) {
      unint64_t v66 = *(void *)(a3 + 80);
    }
    if (v66 <= *(void *)(a3 + 96)) {
      unint64_t v66 = *(void *)(a3 + 96);
    }
    if (v66 <= *(void *)(a3 + 112)) {
      unint64_t v66 = *(void *)(a3 + 112);
    }
    *(void *)(a3 + 16) = (v66 + 63) & 0xFFFFFFFFFFFFFFC0;
    *(void *)(a3 + 24) = v64;
    *(unsigned char *)a3 = 1;
    uint64_t v67 = *(void *)(a4 + 664);
    uint64_t v68 = v67 + 8 * *(int *)(a4 + 676);
    if (*(_DWORD *)(a4 + 672) == 4) {
      uint64_t v69 = *(void *)(v67 + 16);
    }
    else {
      uint64_t v69 = 0;
    }
    uint64_t v70 = *(void *)(v68 + 24);
    uint64_t v71 = *(void *)(v68 + 40);
    uint64_t v72 = *(void *)(a4 + 680);
    uint64_t v73 = *((void *)*v745 + 11);
    uint64_t v74 = *(void *)(v73 + 160);
    uint64_t v75 = v74 + 31;
    if ((unint64_t)(v74 + 31) > *(void *)(v73 + 152))
    {
      int v531 = AGX::DataBufferAllocator<34ul>::growNoInline(v73 + 16, 3, 0);
      uint64_t v74 = *(void *)(v73 + 160);
      if (!v531)
      {
LABEL_71:
        unsigned int v76 = (void *)((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
        unint64_t v77 = (char *)v76 + *(void *)(v73 + 176);
        uint64_t v78 = (int *)MEMORY[0x263F4B188];
        uint64_t v79 = (int)*MEMORY[0x263F4B188];
        *unsigned int v76 = 6;
        *(void *)(v73 + 160) = v76 + 2;
        uint64_t v80 = *(void *)(*(void *)(v73 + 40) + 224) + v79;
        *(void *)(v73 + 15528) = v77;
        uint64_t v81 = *(void *)(v73 + 1936);
        *(void *)(v81 + 536) = v77;
        *(void *)(v73 + 11656) = v80;
        *(void *)(v73 + 16624) |= 1uLL;
        LODWORD(v77) = *(_DWORD *)(v73 + 16656) | 1;
        *(_DWORD *)(v73 + 16656) = v77;
        uint64_t v82 = v70 + *v78;
        uint64_t v83 = *(void *)(v82 + 8) + v71 + v69 + v72;
        *(void *)(v73 + 15536) = v83;
        *(void *)(v81 + 544) = v83;
        *(void *)(v73 + 11664) = v82;
        *(void *)(v73 + 16624) |= 2uLL;
        *(_DWORD *)(v73 + 16656) = v77;
        unint64_t v84 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 126, 0);
        uint64_t v85 = *(unsigned int *)(v84 + 440);
        uint64_t v86 = *(void *)(v73 + 1920);
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v73, v84);
        *(void *)v804 = 32;
        *(int64x2_t *)&v804[2] = vdupq_n_s64(1uLL);
        *(void *)&v785[0] = v85;
        *(_OWORD *)((char *)v785 + 8) = *(_OWORD *)&v804[2];
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v73, 22, v804, v785);
        if (*(_DWORD *)(v73 + 1880) == 1) {
          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v73, 22);
        }
        if (v86) {
          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v73, v86);
        }
        if ([a6 isInstanceDescriptor])
        {
          uint64_t v87 = *(void *)(a4 + 296);
          uint64_t v88 = v87 + 8 * *(int *)(a4 + 308);
          unint64_t v89 = *(char **)(v88 + 24);
          if (*(_DWORD *)(a4 + 304) == 4) {
            uint64_t v90 = *(void *)(v87 + 16);
          }
          else {
            uint64_t v90 = 0;
          }
          uint64_t v96 = *(void *)(v88 + 40);
          uint64_t v97 = *(void *)(a4 + 312);
          [v89 contents];
          uint64_t v98 = [v89 gpuAddress];
          [v89 length];
          uint64_t v99 = (int)*MEMORY[0x263F4B188];
          MTLResourceListAddResource();
          unint64_t v100 = &v89[v99];
          IOGPUResourceListAddResource();
          unint64_t v101 = objc_opt_class();
          uint64_t v102 = v98 + v96 + v90 + v97;
          if (![v101 isSubclassOfClass:objc_opt_class()])
          {
            int v107 = [a6 instanceCount];
            if (!v107) {
              goto LABEL_78;
            }
            uint64_t v108 = *((void *)*v745 + 11);
            switch([a6 instanceDescriptorType])
            {
              case 0:
                unint64_t v109 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 15, 0);
                uint64_t v110 = [a6 motionTransformType];
                goto LABEL_454;
              case 1:
                unint64_t v109 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 16, 0);
                uint64_t v110 = [a6 motionTransformType];
                goto LABEL_454;
              case 2:
                if ([a6 motionTransformType] == 1) {
                  unint64_t v422 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 20, 0);
                }
                else {
                  unint64_t v422 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 18, 0);
                }
                goto LABEL_521;
              case 3:
                unint64_t v109 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 17, 0);
                uint64_t v110 = [a6 motionTransformType];
LABEL_454:
                if (v110) {
                  fwrite("AGX: Motion transform type is not respected for this leaf type\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
                }
                goto LABEL_522;
              case 4:
                if ([a6 motionTransformType] == 1) {
                  unint64_t v422 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 21, 0);
                }
                else {
                  unint64_t v422 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 19, 0);
                }
LABEL_521:
                unint64_t v109 = v422;
LABEL_522:
                v471 = (void *)*((void *)*v745 + 11);
                uint64_t v472 = v471[20];
                uint64_t v473 = v472 + 31;
                if ((unint64_t)(v472 + 31) <= v471[19]) {
                  goto LABEL_523;
                }
                int v534 = AGX::DataBufferAllocator<34ul>::growNoInline(v471 + 2, 3, 0);
                uint64_t v472 = v471[20];
                if (v534)
                {
                  uint64_t v473 = v472 + 31;
                  if ((unint64_t)(v472 + 31) > v471[19]) {
                    abort();
                  }
LABEL_523:
                  v471[21] = v473;
                }
                uint64_t v475 = v471[22];
                uint64_t v476 = (int)*MEMORY[0x263F4B188];
                unint64_t v474 = (v472 + 15) & 0xFFFFFFFFFFFFFFF0;
                *(_DWORD *)unint64_t v474 = v107;
                v471[20] = v474 + 16;
                uint64_t v477 = *(void *)(v471[5] + 224);
                *(_DWORD *)(v474 + 4) = [a6 instanceDescriptorStride];
                *(unsigned char *)(v474 + 8) = [a6 instanceTransformationMatrixLayout] == 1;
                uint64_t v478 = *(void *)(*(void *)(v778 + 8) + 88);
                *(void *)(v478 + 15528) = v474 + v475;
                *(void *)(*(void *)(v478 + 1936) + 536) = v474 + v475;
                *(void *)(v478 + 11656) = v477 + v476;
                *(void *)(v478 + 16624) |= 1uLL;
                *(_DWORD *)(v478 + 16656) |= 1u;
                v479 = (char *)[a6 instanceDescriptorBuffer];
                uint64_t v480 = [a6 instanceDescriptorBufferOffset];
                [v479 contents];
                uint64_t v481 = [v479 gpuAddress];
                [v479 length];
                uint64_t v482 = (int)*MEMORY[0x263F4B188];
                [*(id *)(v778 + 8) useResource:v479 usage:1];
                uint64_t v483 = *(void *)(*(void *)(v778 + 8) + 88);
                *(void *)(v483 + 15536) = v481 + v480;
                *(void *)(*(void *)(v483 + 1936) + 544) = v481 + v480;
                *(void *)(v483 + 11664) = &v479[v482];
                *(void *)(v483 + 16624) |= 2uLL;
                *(_DWORD *)(v483 + 16656) |= 1u;
                v484 = (void *)[a6 instancedAccelerationStructures];
                unint64_t v485 = [v484 count];
                unint64_t v486 = v485;
                if (v485 <= 1) {
                  uint64_t v487 = 1;
                }
                else {
                  uint64_t v487 = v485;
                }
                AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v804, v778, 8 * v487, 0);
                if (v486)
                {
                  uint64_t v488 = 0;
                  uint64_t v489 = *(void *)&v804[2];
                  do
                  {
                    v490 = (void *)[v484 objectAtIndexedSubscript:v488];
                    uint64_t v491 = objc_msgSend((id)objc_msgSend(v490, "buffer"), "gpuAddress");
                    *(void *)(v489 + 8 * v488++) = [v490 bufferOffset] + v491;
                  }
                  while (v486 != v488);
                }
                uint64_t v492 = *(void *)v804;
                uint64_t v493 = *(void *)&v804[6];
                long long v786 = 0u;
                long long v787 = 0u;
                memset(v785, 0, sizeof(v785));
                for (uint64_t i = [v484 countByEnumeratingWithState:v785 objects:v804 count:16];
                      i;
                      uint64_t i = [v484 countByEnumeratingWithState:v785 objects:v804 count:16])
                {
                  [*v745 useResources:*((void *)&v785[0] + 1) count:i usage:1];
                }
                uint64_t v495 = *((void *)*v745 + 11);
                *(void *)(v495 + 15544) = v492;
                *(void *)(*(void *)(v495 + 1936) + 552) = v492;
                *(void *)(v495 + 11672) = v493;
                *(void *)(v495 + 16624) |= 4uLL;
                *(_DWORD *)(v495 + 16656) |= 1u;
                if ([a6 instanceDescriptorType] != 2 && objc_msgSend(a6, "instanceDescriptorType") != 4)
                {
                  v510 = v745;
LABEL_544:
                  uint64_t v512 = *((void *)*v510 + 11);
                  *(void *)(v512 + 15568) = v102;
                  *(void *)(*(void *)(v512 + 1936) + 576) = v102;
                  *(void *)(v512 + 11696) = v100;
                  *(void *)(v512 + 16624) |= 0x20uLL;
                  *(_DWORD *)(v512 + 16656) |= 1u;
                  uint64_t v513 = [a6 instanceCount];
                  uint64_t v514 = *(void *)(v108 + 1920);
                  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v108, v109);
                  *(void *)v804 = v513;
                  *(int64x2_t *)&v804[2] = vdupq_n_s64(1uLL);
                  v785[0] = xmmword_242EA7FC0;
                  *(void *)&v785[1] = 1;
                  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v108, 22, v804, v785);
                  if (*(_DWORD *)(v108 + 1880) == 1) {
                    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v108, 22);
                  }
                  if (v514) {
                    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v108, v514);
                  }
                  goto LABEL_78;
                }
                v496 = (char *)[a6 motionTransformBuffer];
                uint64_t v497 = [a6 motionTransformBufferOffset];
                [v496 contents];
                uint64_t v498 = [v496 gpuAddress];
                [v496 length];
                uint64_t v499 = (int)*MEMORY[0x263F4B188];
                [*v745 useResource:v496 usage:1];
                uint64_t v500 = *((void *)*v745 + 11);
                *(void *)(v500 + 15552) = v498 + v497;
                *(void *)(*(void *)(v500 + 1936) + 560) = v498 + v497;
                *(void *)(v500 + 11680) = &v496[v499];
                *(void *)(v500 + 16624) |= 8uLL;
                *(_DWORD *)(v500 + 16656) |= 1u;
                uint64_t v501 = [a6 motionTransformStride];
                if ([a6 motionTransformType]) {
                  int v502 = 64;
                }
                else {
                  int v502 = 48;
                }
                if (!v501) {
                  LODWORD(v501) = v502;
                }
                v503 = (void *)*((void *)*v745 + 11);
                uint64_t v504 = v503[20];
                uint64_t v505 = v504 + 31;
                if ((unint64_t)(v504 + 31) <= v503[19]) {
                  goto LABEL_541;
                }
                int v537 = AGX::DataBufferAllocator<34ul>::growNoInline(v503 + 2, 3, 0);
                uint64_t v504 = v503[20];
                if (v537)
                {
                  uint64_t v505 = v504 + 31;
                  if ((unint64_t)(v504 + 31) > v503[19]) {
                    abort();
                  }
LABEL_541:
                  v503[21] = v505;
                }
                v506 = (_DWORD *)((v504 + 15) & 0xFFFFFFFFFFFFFFF0);
                v507 = (char *)v506 + v503[22];
                uint64_t v508 = (int)*MEMORY[0x263F4B188];
                _DWORD *v506 = v501;
                v503[20] = v506 + 4;
                uint64_t v509 = *(void *)(v503[5] + 224) + v508;
                v510 = v745;
                uint64_t v511 = *((void *)*v745 + 11);
                *(void *)(v511 + 15560) = v507;
                *(void *)(*(void *)(v511 + 1936) + 568) = v507;
                *(void *)(v511 + 11688) = v509;
                *(void *)(v511 + 16624) |= 0x10uLL;
                *(_DWORD *)(v511 + 16656) |= 1u;
                goto LABEL_544;
              default:
                goto LABEL_78;
            }
          }
          int v103 = [a6 maxInstanceCount];
          if (v103)
          {
            uint64_t v104 = *((void *)*v745 + 11);
            switch([a6 instanceDescriptorType])
            {
              case 0:
                unint64_t v105 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 15, 0);
                uint64_t v106 = [a6 motionTransformType];
                goto LABEL_451;
              case 1:
                unint64_t v105 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 16, 0);
                uint64_t v106 = [a6 motionTransformType];
                goto LABEL_451;
              case 2:
                if ([a6 motionTransformType] == 1) {
                  unint64_t v421 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 20, 0);
                }
                else {
                  unint64_t v421 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 18, 0);
                }
                goto LABEL_502;
              case 3:
                unint64_t v105 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 17, 0);
                uint64_t v106 = [a6 motionTransformType];
LABEL_451:
                if (v106) {
                  fwrite("AGX: Motion transform type is not respected for this leaf type\n", 0x3FuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
                }
                goto LABEL_503;
              case 4:
                if ([a6 motionTransformType] == 1) {
                  unint64_t v421 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 21, 0);
                }
                else {
                  unint64_t v421 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 19, 0);
                }
LABEL_502:
                unint64_t v105 = v421;
LABEL_503:
                v439 = (void *)*((void *)*v745 + 11);
                uint64_t v440 = v439[20];
                uint64_t v441 = v440 + 31;
                if ((unint64_t)(v440 + 31) <= v439[19]) {
                  goto LABEL_504;
                }
                int v533 = AGX::DataBufferAllocator<34ul>::growNoInline(v439 + 2, 3, 0);
                uint64_t v440 = v439[20];
                if (v533)
                {
                  uint64_t v441 = v440 + 31;
                  if ((unint64_t)(v440 + 31) > v439[19]) {
                    abort();
                  }
LABEL_504:
                  v439[21] = v441;
                }
                uint64_t v443 = v439[22];
                uint64_t v444 = (int)*MEMORY[0x263F4B188];
                unint64_t v442 = (v440 + 15) & 0xFFFFFFFFFFFFFFF0;
                *(_DWORD *)unint64_t v442 = v103;
                v439[20] = v442 + 16;
                uint64_t v445 = *(void *)(v439[5] + 224);
                *(_DWORD *)(v442 + 4) = [a6 instanceDescriptorStride];
                *(unsigned char *)(v442 + 8) = [a6 instanceTransformationMatrixLayout] == 1;
                uint64_t v446 = *((void *)*v745 + 11);
                *(void *)(v446 + 15528) = v442 + v443;
                *(void *)(*(void *)(v446 + 1936) + 536) = v442 + v443;
                *(void *)(v446 + 11656) = v445 + v444;
                *(void *)(v446 + 16624) |= 1uLL;
                *(_DWORD *)(v446 + 16656) |= 1u;
                v447 = (char *)[a6 instanceDescriptorBuffer];
                uint64_t v448 = [a6 instanceDescriptorBufferOffset];
                [v447 contents];
                uint64_t v449 = [v447 gpuAddress];
                [v447 length];
                uint64_t v450 = (int)*MEMORY[0x263F4B188];
                [*v745 useResource:v447 usage:1];
                uint64_t v451 = *((void *)*v745 + 11);
                *(void *)(v451 + 15536) = v449 + v448;
                *(void *)(*(void *)(v451 + 1936) + 544) = v449 + v448;
                *(void *)(v451 + 11664) = &v447[v450];
                *(void *)(v451 + 16624) |= 2uLL;
                *(_DWORD *)(v451 + 16656) |= 1u;
                if ([a6 instanceDescriptorType] == 2 || objc_msgSend(a6, "instanceDescriptorType") == 4)
                {
                  v452 = (char *)[a6 motionTransformBuffer];
                  uint64_t v453 = [a6 motionTransformBufferOffset];
                  [v452 contents];
                  uint64_t v454 = [v452 gpuAddress];
                  [v452 length];
                  uint64_t v455 = (int)*MEMORY[0x263F4B188];
                  [*v745 useResource:v452 usage:1];
                  uint64_t v456 = *((void *)*v745 + 11);
                  *(void *)(v456 + 15552) = v454 + v453;
                  *(void *)(*(void *)(v456 + 1936) + 560) = v454 + v453;
                  *(void *)(v456 + 11680) = &v452[v455];
                  *(void *)(v456 + 16624) |= 8uLL;
                  *(_DWORD *)(v456 + 16656) |= 1u;
                  uint64_t v457 = [a6 motionTransformStride];
                  if ([a6 motionTransformType]) {
                    int v458 = 64;
                  }
                  else {
                    int v458 = 48;
                  }
                  if (!v457) {
                    LODWORD(v457) = v458;
                  }
                  v459 = (void *)*((void *)*v745 + 11);
                  uint64_t v460 = v459[20];
                  uint64_t v461 = v460 + 31;
                  if ((unint64_t)(v460 + 31) > v459[19])
                  {
                    int v536 = AGX::DataBufferAllocator<34ul>::growNoInline(v459 + 2, 3, 0);
                    uint64_t v460 = v459[20];
                    if (!v536) {
                      goto LABEL_514;
                    }
                    uint64_t v461 = v460 + 31;
                    if ((unint64_t)(v460 + 31) > v459[19]) {
                      abort();
                    }
                  }
                  v459[21] = v461;
LABEL_514:
                  v462 = (_DWORD *)((v460 + 15) & 0xFFFFFFFFFFFFFFF0);
                  v463 = (char *)v462 + v459[22];
                  uint64_t v464 = (int)*MEMORY[0x263F4B188];
                  _DWORD *v462 = v457;
                  v459[20] = v462 + 4;
                  uint64_t v465 = *(void *)(v459[5] + 224) + v464;
                  v466 = v745;
                  uint64_t v467 = *((void *)*v745 + 11);
                  *(void *)(v467 + 15560) = v463;
                  *(void *)(*(void *)(v467 + 1936) + 568) = v463;
                  *(void *)(v467 + 11688) = v465;
                  *(void *)(v467 + 16624) |= 0x10uLL;
                  *(_DWORD *)(v467 + 16656) |= 1u;
                  goto LABEL_516;
                }
                v466 = v745;
LABEL_516:
                uint64_t v468 = *((void *)*v466 + 11);
                *(void *)(v468 + 15568) = v102;
                *(void *)(*(void *)(v468 + 1936) + 576) = v102;
                *(void *)(v468 + 11696) = v100;
                *(void *)(v468 + 16624) |= 0x20uLL;
                *(_DWORD *)(v468 + 16656) |= 1u;
                uint64_t v469 = [a6 maxInstanceCount];
                uint64_t v470 = *(void *)(v104 + 1920);
                AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v104, v105);
                *(void *)v804 = v469;
                *(int64x2_t *)&v804[2] = vdupq_n_s64(1uLL);
                v785[0] = xmmword_242EA7FC0;
                *(void *)&v785[1] = 1;
                AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v104, 22, v804, v785);
                if (*(_DWORD *)(v104 + 1880) == 1) {
                  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v104, 22);
                }
                if (v470) {
                  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v104, v470);
                }
                break;
              default:
                break;
            }
          }
        }
LABEL_78:
        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(&v780, v778, [(id)v762 resourceBufferLength], 0);
        uint64_t v732 = v780;
        objc_msgSend((id)v762, "setResourceBufferContents:resourceBufferAddress:instanceBoundingBoxBufferAddress:useResourcesOnEncoder:", v781);
        if (!((v762 == 0) | (v768 ^ 1) & 1))
        {
          [*(id *)(v762 + 48) usage];
          if (*(void *)(v762 + 40)) {
            operator new[]();
          }
        }
        __n128 v234 = objc_opt_class();
        if ([v234 isSubclassOfClass:objc_opt_class()])
        {
          objc_msgSend(*v745, "useResource:usage:", objc_msgSend(a6, "instanceCountBuffer"), 1);
          uint64_t v235 = objc_msgSend((id)objc_msgSend(a6, "instanceCountBuffer"), "gpuAddress");
          v757 = (void *)([a6 instanceCountBufferOffset] + v235);
        }
        objc_msgSend(*(id *)(v778 + 24), "buildGenericBVHWithEncoder:descriptor:outputBuffer:outputBufferOffset:scratchBuffer:scratchBufferOffset:primitiveCountBufferAddress:resourceBufferGPUAddress:debugBufferGPUAddress:", *(void *)(v778 + 8), v757, v732, v735);
        __n128 v236 = (char *)[v771 buffer];
        uint64_t v237 = [v771 bufferOffset];
        uint64_t v238 = [v236 contents];
        uint64_t v239 = [v236 gpuAddress];
        __n128 v240 = (void *)[v236 length];
        __n128 v241 = &v236[*MEMORY[0x263F4B188]];
        v802[0] = (void *)(v239 + v237);
        v802[1] = (void *)(v237 + v238);
        v802[2] = v240;
        uint64_t v803 = (uint64_t)v241;
        [*v745 useResource:v236 usage:1];
        uint64_t v725 = [v771 accelerationStructureUniqueIdentifier];
        if (v762) {
          BOOL v242 = *(unsigned char *)(v762 + 83) != 0;
        }
        else {
          BOOL v242 = 0;
        }
        __n128 v243 = objc_opt_class();
        int v244 = [v243 isSubclassOfClass:objc_opt_class()];
        long long v245 = (void *)*((void *)*v745 + 11);
        uint64_t v246 = v245[20];
        uint64_t v247 = v246 + 351;
        if ((unint64_t)(v246 + 351) > v245[19])
        {
          int v532 = AGX::DataBufferAllocator<34ul>::growNoInline(v245 + 2, 3, 0);
          uint64_t v246 = v245[20];
          if (!v532)
          {
LABEL_213:
            __n128 v248 = 0;
            __n128 v249 = 0;
            uint64_t v250 = v245[22];
            unint64_t v251 = (v246 + 15) & 0xFFFFFFFFFFFFFFF0;
            v245[20] = v251 + 336;
            unint64_t v252 = v251 + v250;
            uint64_t v253 = *(void *)(v245[5] + 224) + (int)*MEMORY[0x263F4B188];
            *(void *)(v251 + 192) = 0;
            *(_OWORD *)(v251 + 160) = 0u;
            *(_OWORD *)(v251 + 176) = 0u;
            *(_OWORD *)(v251 + 128) = 0u;
            *(_OWORD *)(v251 + 144) = 0u;
            *(_OWORD *)(v251 + 96) = 0u;
            *(_OWORD *)(v251 + 112) = 0u;
            *(_OWORD *)(v251 + 64) = 0u;
            *(_OWORD *)(v251 + 80) = 0u;
            *(_OWORD *)(v251 + 32) = 0u;
            *(_OWORD *)(v251 + 48) = 0u;
            *(_OWORD *)unint64_t v251 = 0u;
            *(_OWORD *)(v251 + 16) = 0u;
            *(_OWORD *)(v251 + 200) = xmmword_242EA85D0;
            *(_DWORD *)(v251 + 216) = -1;
            *(_OWORD *)(v251 + 248) = 0u;
            *(_OWORD *)(v251 + 236) = 0u;
            *(_OWORD *)(v251 + 220) = 0u;
            *(unsigned char *)(v251 + 264) = -1;
            unint64_t v773 = v251;
            *(_OWORD *)(v251 + 312) = 0u;
            *(_OWORD *)(v251 + 281) = 0u;
            *(_OWORD *)(v251 + 297) = 0u;
            v729 = (unsigned char *)(v251 + 265);
            *(_OWORD *)(v251 + 265) = 0u;
            if ((v244 & 1) == 0)
            {
              __n128 v249 = (_DWORD *)(v251 + 328);
              *(int64x2_t *)(v251 + 240) = vaddq_s64(vdupq_n_s64(v252), (int64x2_t)xmmword_242EA85E0);
              __n128 v248 = (_DWORD *)(v251 + 332);
              *(void *)(v251 + 328) = 0;
            }
            uint64_t v254 = *((void *)*v745 + 11);
            *(void *)(v254 + 15576) = v252;
            *(void *)(*(void *)(v254 + 1936) + 584) = v252;
            *(void *)(v254 + 11704) = v253;
            *(void *)(v254 + 16624) |= 0x40uLL;
            *(_DWORD *)(v254 + 16656) |= 1u;
            if (v762)
            {
              *(unsigned char *)(v251 + 267) = [*(id *)(v762 + 48) usage] & 1;
              unint64_t v255 = [*(id *)(v762 + 48) usage];
              unint64_t v256 = v773;
              v715 = (unsigned char *)(v773 + 267);
              uint64_t v257 = (v255 >> 1) & 1;
            }
            else
            {
              LOBYTE(v257) = 0;
              unint64_t v256 = v251;
              v715 = (unsigned char *)(v251 + 267);
              *(unsigned char *)(v251 + 267) = 0;
            }
            *(unsigned char *)(v256 + 274) = v257;
            *(_WORD *)(v256 + 270) = 0;
            *(void *)(v256 + 224) = 0;
            *(_DWORD *)(v256 + 220) = 1;
            char v737 = [a6 isInstanceDescriptor];
            if (v737)
            {
              long long v258 = objc_opt_class();
              int v259 = [v258 isSubclassOfClass:objc_opt_class()];
              uint64_t v260 = [a6 motionTransformType];
              uint64_t v261 = [a6 instanceDescriptorType];
              if (v259)
              {
                int v262 = 8;
                switch(v261)
                {
                  case 0:
                    goto LABEL_314;
                  case 1:
                    int v262 = 9;
                    goto LABEL_314;
                  case 2:
                    BOOL v295 = v260 == 1;
                    int v296 = 11;
                    int v297 = 13;
                    goto LABEL_305;
                  case 3:
                    int v262 = 10;
LABEL_314:
                    int v727 = v262;
                    unint64_t v304 = v773;
                    *(void *)(v773 + 208) = 0x800000080;
                    goto LABEL_318;
                  case 4:
                    BOOL v295 = v260 == 1;
                    int v296 = 12;
                    int v297 = 14;
LABEL_305:
                    if (v295) {
                      int v296 = v297;
                    }
                    int v727 = v296;
                    *(void *)(v773 + 208) = 0x900000030;
                    *(_DWORD *)(v773 + 204) = [a6 motionTransformType];
                    *(_DWORD *)(v773 + 216) = 0;
                    *(_DWORD *)(v773 + 176) = 1;
                    *(unsigned char *)(v773 + 272) = 1;
                    if (v244)
                    {
                      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v804, v778, a6);
                      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMotionTransformCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v785, v778, a6);
                      int v751 = 108;
                      int v743 = 109;
                      unint64_t v269 = 106;
                      int v719 = 98;
                      int v731 = 1;
                      int v301 = 107;
                      goto LABEL_320;
                    }
                    *__n128 v248 = [a6 maxInstanceCount];
                    int v307 = [a6 maxMotionTransformCount];
                    int v751 = 108;
                    int v743 = 109;
                    unint64_t v269 = 106;
                    int v719 = 98;
                    int v731 = 1;
                    int v308 = 107;
                    goto LABEL_336;
                  default:
                    int v727 = 1;
                    unint64_t v304 = v773;
LABEL_318:
                    *(_DWORD *)(v304 + 216) = 0;
                    *(_DWORD *)(v304 + 176) = 1;
                    *(unsigned char *)(v773 + 272) = ([a6 usage] & 4) != 0;
                    if (v244)
                    {
                      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v804, v778, a6);
                      int v731 = 0;
                      int v719 = 0;
                      v785[0] = *(_OWORD *)v804;
                      v785[1] = *(_OWORD *)&v804[4];
                      int v751 = 24;
                      int v743 = 25;
                      unint64_t v269 = 22;
                      int v301 = 23;
LABEL_320:
                      int v754 = v301;
                      uint64_t v306 = *(void *)v804;
                      *(void *)(v773 + 240) = *(void *)&v785[0];
                      *(void *)(v773 + 248) = v306;
                      goto LABEL_338;
                    }
                    *__n128 v248 = [a6 maxInstanceCount];
                    int v307 = [a6 maxInstanceCount];
                    int v731 = 0;
                    int v719 = 0;
                    int v751 = 24;
                    int v743 = 25;
                    unint64_t v269 = 22;
                    int v308 = 23;
LABEL_336:
                    int v754 = v308;
                    break;
                }
LABEL_337:
                *__n128 v249 = v307;
LABEL_338:
                uint64_t v710 = 0;
                uint64_t v711 = 0;
                uint64_t v767 = 0;
                uint64_t v721 = 0;
                uint64_t v739 = 0;
                uint64_t v717 = 0;
                LODWORD(v709) = 0;
                *(unsigned char *)(v773 + 275) = [a6 instanceTransformationMatrixLayout] == 1;
                int v268 = -1;
                goto LABEL_339;
              }
              int v266 = 8;
              switch(v261)
              {
                case 0:
                  goto LABEL_316;
                case 1:
                  int v266 = 9;
                  goto LABEL_316;
                case 2:
                  BOOL v298 = v260 == 1;
                  int v299 = 11;
                  int v300 = 13;
                  goto LABEL_310;
                case 3:
                  int v266 = 10;
LABEL_316:
                  int v727 = v266;
                  unint64_t v305 = v773;
                  *(void *)(v773 + 208) = 0x800000080;
                  goto LABEL_323;
                case 4:
                  BOOL v298 = v260 == 1;
                  int v299 = 12;
                  int v300 = 14;
LABEL_310:
                  if (v298) {
                    int v299 = v300;
                  }
                  int v727 = v299;
                  *(void *)(v773 + 208) = 0x900000030;
                  char v302 = 0;
                  *(_DWORD *)(v773 + 204) = [a6 motionTransformType];
                  int v751 = 108;
                  int v743 = 109;
                  *(_DWORD *)(v773 + 216) = 0;
                  int v731 = 1;
                  *(_DWORD *)(v773 + 176) = 1;
                  unint64_t v269 = 106;
                  int v719 = 98;
                  int v754 = 107;
                  LOBYTE(v303) = 1;
                  goto LABEL_324;
                default:
                  int v727 = 1;
                  unint64_t v305 = v773;
LABEL_323:
                  *(_DWORD *)(v305 + 216) = 0;
                  *(_DWORD *)(v305 + 176) = 1;
                  int v731 = 0;
                  int v719 = 0;
                  unint64_t v303 = ((unint64_t)[a6 usage] >> 2) & 1;
                  int v751 = 24;
                  int v743 = 25;
                  unint64_t v269 = 22;
                  char v302 = 1;
                  int v754 = 23;
LABEL_324:
                  *(unsigned char *)(v773 + 272) = v303;
                  if (!v244)
                  {
                    *__n128 v248 = [a6 instanceCount];
                    if (v302) {
                      int v307 = [a6 instanceCount];
                    }
                    else {
                      int v307 = [a6 motionTransformCount];
                    }
                    goto LABEL_337;
                  }
                  uint64_t v309 = (void *)*((void *)*v745 + 11);
                  uint64_t v310 = v309[20];
                  uint64_t v311 = v310 + 31;
                  if ((unint64_t)(v310 + 31) <= v309[19]) {
                    goto LABEL_326;
                  }
                  int v535 = AGX::DataBufferAllocator<34ul>::growNoInline(v309 + 2, 3, 0);
                  uint64_t v310 = v309[20];
                  if (v535)
                  {
                    uint64_t v311 = v310 + 31;
                    if ((unint64_t)(v310 + 31) > v309[19]) {
                      abort();
                    }
LABEL_326:
                    v309[21] = v311;
                  }
                  __n128 v312 = (_DWORD *)((v310 + 15) & 0xFFFFFFFFFFFFFFF0);
                  __n128 v313 = (char *)v312 + v309[22];
                  *__n128 v312 = 0;
                  v309[20] = v312 + 4;
                  __n128 v314 = v313;
                  if (v302) {
                    goto LABEL_331;
                  }
                  int v315 = [a6 motionTransformCount];
                  uint64_t v316 = (void *)*((void *)*v745 + 11);
                  uint64_t v317 = v316[20];
                  uint64_t v318 = v317 + 31;
                  if ((unint64_t)(v317 + 31) <= v316[19]) {
                    goto LABEL_329;
                  }
                  int v538 = AGX::DataBufferAllocator<34ul>::growNoInline(v316 + 2, 3, 0);
                  uint64_t v317 = v316[20];
                  if (v538)
                  {
                    uint64_t v318 = v317 + 31;
                    if ((unint64_t)(v317 + 31) > v316[19]) {
                      abort();
                    }
LABEL_329:
                    v316[21] = v318;
                  }
                  int v319 = (_DWORD *)((v317 + 15) & 0xFFFFFFFFFFFFFFF0);
                  __n128 v314 = (char *)v319 + v316[22];
                  *int v319 = v315;
                  v316[20] = v319 + 4;
LABEL_331:
                  *(void *)(v773 + 240) = v314;
                  *(void *)(v773 + 248) = v313;
                  goto LABEL_338;
              }
            }
            if (!v762 || (uint64_t v263 = *(void *)(v762 + 40)) == 0)
            {
              int v719 = 0;
              int v731 = 0;
              uint64_t v710 = 0;
              uint64_t v711 = 0;
              uint64_t v767 = 0;
              uint64_t v721 = 0;
              uint64_t v739 = 0;
              uint64_t v717 = 0;
              LODWORD(v709) = 0;
              int v268 = -1;
              int v727 = 1;
              int v754 = 23;
              unint64_t v269 = 22;
              int v743 = 25;
              int v751 = 24;
              goto LABEL_339;
            }
            uint64_t v709 = *(void *)(v762 + 40);
            *(_DWORD *)(v773 + 256) = v263;
            *(_DWORD *)(v773 + 260) = *(void *)(v762 + 24);
            if (*(void *)(v762 + 32))
            {
              unint64_t v264 = 0;
              unint64_t v265 = 0;
              do
              {
                if (v265 <= objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v264), "primitiveDataElementSize"))unint64_t v265 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v264), "primitiveDataElementSize"); {
                ++v264;
                }
              }
              while (*(void *)(v762 + 40) > v264);
              BOOL v267 = v265 != 0;
            }
            else
            {
              BOOL v267 = 0;
            }
            if ((unint64_t)[a6 motionKeyframeCount] <= 1) {
              unint64_t v269 = 22;
            }
            else {
              unint64_t v269 = 106;
            }
            if ((unint64_t)[a6 motionKeyframeCount] <= 1) {
              int v270 = 0;
            }
            else {
              int v270 = 98;
            }
            int v719 = v270;
            *(_DWORD *)(v773 + 216) = 1;
            unsigned int v271 = [a6 motionKeyframeCount];
            *(_DWORD *)(v773 + 176) = v271;
            if (v271 < 2)
            {
              int v731 = 0;
              unint64_t v275 = v773;
            }
            else
            {
              [a6 motionStartTime];
              *(_DWORD *)(v773 + 184) = v272;
              [a6 motionEndTime];
              *(_DWORD *)(v773 + 188) = v273;
              *(_DWORD *)(v773 + 192) = [a6 motionStartBorderMode];
              int v274 = [a6 motionEndBorderMode];
              unint64_t v275 = v773;
              *(_DWORD *)(v773 + 196) = v274;
              *(_DWORD *)(v773 + 180) = 64;
              int v731 = 1;
            }
            *(_DWORD *)(v275 + 200) = 1;
            unsigned int v276 = *(_DWORD *)(v762 + 136);
            if (v276 <= 5)
            {
              if (((1 << v276) & 9) == 0)
              {
                if (((1 << v276) & 0x12) != 0)
                {
                  uint64_t v711 = 0;
                  uint64_t v767 = 0;
                  uint64_t v721 = 0;
                  if ((unint64_t)[a6 motionKeyframeCount] < 2)
                  {
                    *(_DWORD *)(v773 + 212) = 4;
                    unsigned int v277 = 36;
                    int v278 = 1;
                    int v754 = 23;
                    int v727 = 5;
                    int v743 = 25;
                    int v279 = 24;
                  }
                  else
                  {
                    *(_DWORD *)(v773 + 212) = 5;
                    unsigned int v277 = 64;
                    int v278 = 1;
                    int v754 = 107;
                    int v727 = 103;
                    int v743 = 109;
                    int v279 = 108;
                  }
                  int v751 = v279;
                  int v268 = 1;
                }
                else
                {
                  if ((unint64_t)[a6 motionKeyframeCount] < 2)
                  {
                    *(_DWORD *)(v773 + 212) = 6;
                    *(unsigned char *)(v773 + 270) = 1;
                    {
                      getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode = 1;
                    }
                    if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode != 1
                      || ([a6 usage] & 1) != 0)
                    {
                      char v294 = 0;
                    }
                    else if (getCoarseCurveTestMode(MTLAccelerationStructureDescriptor *)::evCoarseCurveTestMode)
                    {
                      char v294 = 2;
                    }
                    else
                    {
                      char v294 = 0;
                    }
                    unsigned int v283 = v709;
                    int v754 = 23;
                    unint64_t v282 = v773;
                    *(unsigned char *)(v773 + 273) = v294;
                    int v727 = 7;
                    int v743 = 25;
                    int v751 = 24;
                    unsigned int v277 = 24;
                  }
                  else
                  {
                    unsigned int v277 = 32;
                    unint64_t v282 = v773;
                    *(_DWORD *)(v773 + 212) = 7;
                    int v754 = 107;
                    int v727 = 105;
                    int v743 = 109;
                    int v751 = 108;
                    unsigned int v283 = v709;
                  }
                  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v804, v778, 8 * v283 * *(unsigned int *)(v282 + 176), 0);
                  uint64_t v721 = *(void *)v804;
                  uint64_t v711 = *(void *)&v804[6];
                  uint64_t v767 = *(void *)&v804[2];
                  int v278 = 0;
                  *(void *)(v773 + 232) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::calculateCurveControlPointTotalSizeAndOffsets<true>(v762, a6, *(uint64_t *)&v804[2]);
                  int v268 = 2;
                }
                goto LABEL_468;
              }
              int v280 = *(_DWORD *)(v762 + 140);
              if (v280 == 2)
              {
                if ((unint64_t)[a6 motionKeyframeCount] >= 2)
                {
                  uint64_t v711 = 0;
                  uint64_t v767 = 0;
                  uint64_t v721 = 0;
                  int v278 = 0;
                  int v268 = 0;
                  *(_DWORD *)(v773 + 212) = 3;
                  unsigned int v277 = 116;
                  int v754 = 107;
                  int v281 = 101;
                  goto LABEL_438;
                }
                uint64_t v711 = 0;
                uint64_t v767 = 0;
                uint64_t v721 = 0;
                int v278 = 0;
                int v268 = 0;
                *(_DWORD *)(v773 + 212) = 2;
                *(unsigned char *)(v773 + 270) = 1;
                unsigned int v277 = 64;
                int v754 = 23;
                int v420 = 3;
              }
              else
              {
                if (!v280)
                {
                  if ((unint64_t)[a6 motionKeyframeCount] >= 2)
                  {
                    uint64_t v711 = 0;
                    uint64_t v767 = 0;
                    uint64_t v721 = 0;
                    int v278 = 0;
                    int v268 = 0;
                    *(_DWORD *)(v773 + 212) = 1;
                    unsigned int v277 = 88;
                    int v754 = 107;
                    int v281 = 99;
LABEL_438:
                    int v727 = v281;
                    int v743 = 109;
                    int v419 = 108;
LABEL_467:
                    int v751 = v419;
LABEL_468:
                    if (v267)
                    {
                      if (v276 != 3 && v276)
                      {
                        unint64_t v435 = [a6 motionKeyframeCount];
                        if (v278)
                        {
                          if (v435 <= 1) {
                            int v436 = 48;
                          }
                          else {
                            int v436 = 96;
                          }
                          *(_DWORD *)(v773 + 208) = v436;
                          BOOL v431 = (unint64_t)[a6 motionKeyframeCount] > 1;
                          int v432 = 6;
                          int v433 = 104;
                          goto LABEL_489;
                        }
                        if (v435 <= 1) {
                          int v438 = 32;
                        }
                        else {
                          int v438 = 48;
                        }
                        *(_DWORD *)(v773 + 208) = v438;
                      }
                      else
                      {
                        int v429 = *(_DWORD *)(v762 + 140);
                        if (v429 == 2)
                        {
                          if ((unint64_t)[a6 motionKeyframeCount] <= 1) {
                            int v437 = 96;
                          }
                          else {
                            int v437 = 128;
                          }
                          *(_DWORD *)(v773 + 208) = v437;
                          BOOL v431 = (unint64_t)[a6 motionKeyframeCount] > 1;
                          int v432 = 4;
                          int v433 = 102;
                          goto LABEL_489;
                        }
                        if (!v429)
                        {
                          if ((unint64_t)[a6 motionKeyframeCount] <= 1) {
                            int v430 = 64;
                          }
                          else {
                            int v430 = 96;
                          }
                          *(_DWORD *)(v773 + 208) = v430;
                          BOOL v431 = (unint64_t)[a6 motionKeyframeCount] > 1;
                          int v432 = 2;
                          int v433 = 100;
LABEL_489:
                          if (v431) {
                            int v432 = v433;
                          }
                          int v727 = v432;
                        }
                      }
                      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v804, v778, 8 * v709, 0);
                      uint64_t v717 = *(void *)v804;
                      uint64_t v710 = *(void *)&v804[6];
                      uint64_t v739 = *(void *)&v804[2];
                      char v708 = 0;
                      *(void *)(v773 + 224) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::calculateOutOfLinePerPrimitiveDataTotalSizeAndOffsets<true>(v762, a6, *(void **)&v804[2]);
                      goto LABEL_340;
                    }
                    if (v277 >= 5)
                    {
                      if (v277 >= 0x21)
                      {
                        if (v277 >= 0x31)
                        {
                          if (v277 >= 0x41)
                          {
                            if (v277 <= 0x60) {
                              int v434 = 96;
                            }
                            else {
                              int v434 = 128;
                            }
                          }
                          else
                          {
                            int v434 = 64;
                          }
                        }
                        else
                        {
                          int v434 = 48;
                        }
                      }
                      else
                      {
                        int v434 = 32;
                      }
                    }
                    else
                    {
                      int v434 = 4;
                    }
                    uint64_t v710 = 0;
                    uint64_t v739 = 0;
                    uint64_t v717 = 0;
                    *(_DWORD *)(v773 + 208) = v434;
LABEL_339:
                    char v708 = 1;
LABEL_340:
                    unsigned int v320 = *(_DWORD *)(v778 + 32);
                    {
                    }
                    BOOL v321 = *(_DWORD *)(v773 + 176) < 3u;
                    if (v268) {
                      BOOL v322 = 0;
                    }
                    else {
                      BOOL v322 = v320 > 1;
                    }
                    char v323 = v322;
                    *(unsigned char *)(v773 + 265) = v323;
                    if (!v322) {
                      BOOL v321 = 0;
                    }
                    *(unsigned char *)(v773 + 276) = v321;
                    if (*(unsigned char *)(v773 + 267)) {
                      *(unsigned char *)(v773 + 270) = 0;
                    }
                    int v741 = v268;
                    LOBYTE(v324) = v762;
                    if (v762)
                    {
                      if ([*(id *)(v762 + 48) usage]) {
                        LOBYTE(v324) = 1;
                      }
                      else {
                        unint64_t v324 = ((unint64_t)[*(id *)(v762 + 48) usage] >> 1) & 1;
                      }
                    }
                    char v325 = v737 ^ 1;
                    *(unsigned char *)(v773 + 266) = v324;
                    if (!v731) {
                      char v325 = 0;
                    }
                    if (*(unsigned char *)(v773 + 267)) {
                      char v326 = 0;
                    }
                    else {
                      char v326 = v325;
                    }
                    *(unsigned char *)(v773 + 271) = v326;
                    uint64_t v801 = 0;
                    uint64_t v800 = 0;
                    uint64_t v799 = 0;
                    uint64_t v798 = 0;
                    uint64_t v797 = 0;
                    uint64_t v796 = 0;
                    [*(id *)(v778 + 24) getGenericBVHSizeForDescriptor:v762 nodeOffset:&v801 fragmentPrimitiveIndicesOffset:&v800 fragmentGeometryIndicesOffset:&v799 motionFragmentOffset:&v798 fragmentIndexOffset:&v797 childIndexOffset:&v796];
                    unsigned int v327 = -[BVHDescriptor maxInnerNodeCount](v762);
                    uint64_t v328 = *(void *)(a4 + 632);
                    uint64_t v329 = v328 + 8 * *(int *)(a4 + 644);
                    v330 = *(void **)(v329 + 24);
                    if (*(_DWORD *)(a4 + 640) == 4) {
                      uint64_t v331 = *(void *)(v328 + 16);
                    }
                    else {
                      uint64_t v331 = 0;
                    }
                    unint64_t v332 = *(void *)(v329 + 40);
                    unint64_t v333 = *(void *)(a4 + 648);
                    uint64_t v334 = [v330 contents];
                    uint64_t v335 = [v330 gpuAddress];
                    uint64_t v759 = [v330 length];
                    uint64_t v336 = (int)*MEMORY[0x263F4B188];
                    MTLResourceListAddResource();
                    uint64_t v770 = (uint64_t)v330 + v336;
                    IOGPUResourceListAddResource();
                    uint64_t v337 = *(void *)(a4 + 456);
                    uint64_t v338 = v337 + 8 * *(int *)(a4 + 468);
                    if (*(_DWORD *)(a4 + 464) == 4) {
                      uint64_t v339 = *(void *)(v337 + 16);
                    }
                    else {
                      uint64_t v339 = 0;
                    }
                    *(void *)unint64_t v773 = v339
                                    + *(void *)(v338 + 40)
                                    + *(void *)(a4 + 472)
                                    + *(void *)(*(void *)(v338 + 24) + (int)*MEMORY[0x263F4B188] + 8);
                    *(_DWORD *)(v773 + 292) = *(_DWORD *)(a4 + 488);
                    uint64_t v340 = *(void *)(a4 + 632);
                    uint64_t v341 = v340 + 8 * *(int *)(a4 + 644);
                    uint64_t v342 = (int)*MEMORY[0x263F4B188];
                    if (*(_DWORD *)(a4 + 640) == 4) {
                      uint64_t v343 = *(void *)(v340 + 16);
                    }
                    else {
                      uint64_t v343 = 0;
                    }
                    *(void *)(v773 + 8) = v343
                                          + *(void *)(v341 + 40)
                                          + *(void *)(a4 + 648)
                                          + *(void *)(*(void *)(v341 + 24) + v342 + 8);
                    uint64_t v344 = *(void *)(a4 + 496);
                    uint64_t v345 = v344 + 8 * *(int *)(a4 + 508);
                    if (*(_DWORD *)(a4 + 504) == 4) {
                      uint64_t v346 = *(void *)(v344 + 16);
                    }
                    else {
                      uint64_t v346 = 0;
                    }
                    *(void *)(v773 + 80) = v346
                                           + *(void *)(v345 + 40)
                                           + *(void *)(a4 + 512)
                                           + *(void *)(*(void *)(v345 + 24) + v342 + 8);
                    uint64_t v347 = *(void *)(a4 + 528);
                    uint64_t v348 = v347 + 8 * *(int *)(a4 + 540);
                    if (*(_DWORD *)(a4 + 536) == 4) {
                      uint64_t v349 = *(void *)(v347 + 16);
                    }
                    else {
                      uint64_t v349 = 0;
                    }
                    uint64_t v350 = a4;
                    *(void *)(v773 + 88) = v349
                                           + *(void *)(v348 + 40)
                                           + *(void *)(a4 + 544)
                                           + *(void *)(*(void *)(v348 + 24) + v342 + 8);
                    int v351 = *(unsigned __int8 *)(v773 + 267);
                    if (*(unsigned char *)(v773 + 267))
                    {
                      uint64_t v352 = *(void *)(a4 + 560);
                      uint64_t v353 = v352 + 8 * *(int *)(a4 + 572);
                      if (*(_DWORD *)(a4 + 568) == 4) {
                        uint64_t v354 = *(void *)(v352 + 16);
                      }
                      else {
                        uint64_t v354 = 0;
                      }
                      uint64_t v350 = a4;
                      *(void *)(v773 + 16) = v354
                                             + *(void *)(v353 + 40)
                                             + *(void *)(a4 + 576)
                                             + *(void *)(*(void *)(v353 + 24) + v342 + 8);
                    }
                    uint64_t v355 = *(void *)(v350 + 664);
                    uint64_t v356 = v355 + 8 * *(int *)(v350 + 676);
                    if (*(_DWORD *)(v350 + 672) == 4) {
                      uint64_t v357 = *(void *)(v355 + 16);
                    }
                    else {
                      uint64_t v357 = 0;
                    }
                    *(void *)(v773 + 96) = v357
                                           + *(void *)(v356 + 40)
                                           + *(void *)(a4 + 680)
                                           + *(void *)(*(void *)(v356 + 24) + v342 + 8);
                    uint64_t v358 = *(void *)(a4 + 328);
                    uint64_t v359 = v358 + 8 * *(int *)(a4 + 340);
                    if (*(_DWORD *)(a4 + 336) == 4) {
                      uint64_t v360 = *(void *)(v358 + 16);
                    }
                    else {
                      uint64_t v360 = 0;
                    }
                    uint64_t v361 = v360
                         + *(void *)(v359 + 40)
                         + *(void *)(a4 + 344)
                         + *(void *)(*(void *)(v359 + 24) + v342 + 8);
                    int v362 = v762;
                    if (v762) {
                      int v362 = *(_DWORD *)(v762 + 144);
                    }
                    *(_DWORD *)(v773 + 312) = v362;
                    uint64_t v363 = v796 + v361;
                    *(void *)(v773 + 56) = v801 + v361;
                    *(void *)(v773 + 64) = v363;
                    *(void *)(v773 + 72) = v361;
                    uint64_t v364 = *(void *)(a4 + 128);
                    uint64_t v365 = v364 + 8 * *(int *)(a4 + 140);
                    if (*(_DWORD *)(a4 + 136) == 4) {
                      uint64_t v366 = *(void *)(v364 + 16);
                    }
                    else {
                      uint64_t v366 = 0;
                    }
                    *(void *)(v773 + 24) = v366
                                           + *(void *)(v365 + 40)
                                           + *(void *)(a4 + 144)
                                           + *(void *)(*(void *)(v365 + 24) + v342 + 8);
                    *(_DWORD *)(v773 + 296) = *(_DWORD *)(a4 + 160);
                    *(_DWORD *)(v773 + 300) = *(_DWORD *)(a4 + 624);
                    uint64_t v367 = *(void *)(a4 + 168);
                    uint64_t v368 = v367 + 8 * *(int *)(a4 + 180);
                    if (*(_DWORD *)(a4 + 176) == 4) {
                      uint64_t v369 = *(void *)(v367 + 16);
                    }
                    else {
                      uint64_t v369 = 0;
                    }
                    *(void *)(v773 + 32) = v369
                                           + *(void *)(v368 + 40)
                                           + *(void *)(a4 + 184)
                                           + *(void *)(*(void *)(v368 + 24) + v342 + 8);
                    uint64_t v370 = *(void *)(a4 + 200);
                    if (*(_DWORD *)(a4 + 208) == 4) {
                      uint64_t v372 = *(void *)(v370 + 16);
                    }
                    else {
                      uint64_t v372 = 0;
                    }
                    uint64_t v371 = v370 + 8 * *(int *)(a4 + 212);
                    *(void *)(v773 + 40) = v372
                                           + *(void *)(v371 + 40)
                                           + *(void *)(a4 + 216)
                                           + *(void *)(*(void *)(v371 + 24) + v342 + 8);
                    if (v351)
                    {
                      uint64_t v373 = *(void *)(a4 + 592);
                      uint64_t v374 = v373 + 8 * *(int *)(a4 + 604);
                      uint64_t v375 = *(void *)(*(void *)(v374 + 24) + v342 + 8);
                      if (*(_DWORD *)(a4 + 600) == 4) {
                        uint64_t v376 = *(void *)(v373 + 16);
                      }
                      else {
                        uint64_t v376 = 0;
                      }
                      *(void *)(v773 + 48) = v376 + *(void *)(v374 + 40) + *(void *)(a4 + 608) + v375;
                    }
                    uint64_t v723 = v361;
                    uint64_t v377 = *(void *)(*(void *)(v778 + 8) + 88);
                    uint64_t v749 = !v242 | 0x100;
                    unint64_t v378 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v269, !v242 | 0x100u);
                    uint64_t v379 = *(void *)(v377 + 1920);
                    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v377, v378);
                    *(int64x2_t *)v804 = vdupq_n_s64(1uLL);
                    *(void *)&v804[4] = 1;
                    v785[0] = *(_OWORD *)v804;
                    *(void *)&v785[1] = 1;
                    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v377, 22, v804, v785);
                    if (*(_DWORD *)(v377 + 1880) == 1) {
                      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v377, 22);
                    }
                    if (v379) {
                      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v377, v379);
                    }
                    unint64_t v380 = v332 + v331 + v333;
                    unint64_t v734 = v335 + v380;
                    if (v327 <= 1) {
                      unsigned int v381 = 1;
                    }
                    else {
                      unsigned int v381 = v327;
                    }
                    double v382 = log2((double)v381);
                    if (v762)
                    {
                      unsigned int v795 = *(_DWORD *)(v762 + 16);
                      *(_DWORD *)v793 = 0;
                      if (v795)
                      {
                        unint64_t v383 = v380 + v334;
                        float v384 = v382 / 3.0;
                        uint64_t v385 = v734 + 28;
                        unint64_t v386 = v383 + 28;
                        do
                        {
                          [*(id *)(v778 + 8) setBytes:v793 length:4 atIndex:7];
                          [*(id *)(v778 + 8) setBytes:&v795 length:4 atIndex:8];
                          unint64_t v269 = v269 & 0xFFFFFFFFFFFF0000 | v749;
                          unint64_t v387 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v754, v269);
                          memset(v804, 0, 32);
                          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(v778, v387, v385, v770, (uint64_t *)v804, 1, 0);
                          unsigned int v388 = v381;
                          if ((float)*(unsigned int *)v793 < v384) {
                            unsigned int v388 = exp2f((float)*(unsigned int *)v793 * 3.0);
                          }
                          uint64_t v389 = *(void *)(a4 + 168);
                          uint64_t v390 = v389 + 8 * *(int *)(a4 + 180);
                          uint64_t v391 = *(void *)(v390 + 24);
                          if (*(_DWORD *)(a4 + 176) == 4) {
                            uint64_t v392 = *(void *)(v389 + 16);
                          }
                          else {
                            uint64_t v392 = 0;
                          }
                          uint64_t v393 = *(void *)(v390 + 40);
                          uint64_t v394 = *(void *)(a4 + 232);
                          uint64_t v395 = v394 + 8 * *(int *)(a4 + 244);
                          uint64_t v396 = *(void *)(v395 + 24);
                          if (*(_DWORD *)(a4 + 240) == 4) {
                            uint64_t v397 = *(void *)(v394 + 16);
                          }
                          else {
                            uint64_t v397 = 0;
                          }
                          uint64_t v398 = v393 + v392 + *(void *)(a4 + 184);
                          uint64_t v399 = *(void *)(v395 + 40) + v397 + *(void *)(a4 + 248);
                          *(void *)v804 = v734 + 28;
                          *(void *)&v804[2] = v386;
                          *(void *)&v804[4] = v759;
                          *(void *)&v804[6] = v770;
                          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodePrefixSum(v778, v391, v398, v396, v399, (uint64_t *)v804, v388);
                          uint64_t v400 = *(void *)(a4 + 200);
                          if (*(_DWORD *)(a4 + 208) == 4) {
                            uint64_t v401 = *(void *)(v400 + 16);
                          }
                          else {
                            uint64_t v401 = 0;
                          }
                          uint64_t v402 = *(void *)(a4 + 264);
                          if (*(_DWORD *)(a4 + 272) == 4) {
                            uint64_t v403 = *(void *)(v402 + 16);
                          }
                          else {
                            uint64_t v403 = 0;
                          }
                          uint64_t v404 = v400 + 8 * *(int *)(a4 + 212);
                          uint64_t v405 = *(void *)(v404 + 24);
                          uint64_t v406 = *(void *)(v404 + 40) + v401 + *(void *)(a4 + 216);
                          uint64_t v407 = v402 + 8 * *(int *)(a4 + 276);
                          uint64_t v408 = *(void *)(v407 + 24);
                          uint64_t v409 = *(void *)(v407 + 40) + v403 + *(void *)(a4 + 280);
                          *(void *)v804 = v734 + 28;
                          *(void *)&v804[2] = v386;
                          *(void *)&v804[4] = v759;
                          *(void *)&v804[6] = v770;
                          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodePrefixSum(v778, v405, v406, v408, v409, (uint64_t *)v804, v388);
                          unint64_t v332 = v332 & 0xFFFFFFFFFFFF0000 | v749;
                          unint64_t v410 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v751, v332);
                          memset(v804, 0, 32);
                          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(v778, v410, v385, v770, (uint64_t *)v804, 1, 0);
                          uint64_t v411 = *(void *)(v778 + 8);
                          uint64_t v412 = *(void *)(v411 + 88);
                          v413 = v802[0];
                          uint64_t v414 = v803;
                          *(void **)(v412 + 15568) = v802[0];
                          *(void *)(*(void *)(v412 + 1936) + 576) = v413;
                          *(void *)(v412 + 11696) = v414;
                          *(void *)(v412 + 16624) |= 0x20uLL;
                          *(_DWORD *)(v412 + 16656) |= 1u;
                          uint64_t v415 = *(void *)(v411 + 88);
                          unint64_t v333 = v333 & 0xFFFFFFFFFFFF0000 | v749;
                          unint64_t v416 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v743, v333);
                          uint64_t v417 = *(void *)(v415 + 1920);
                          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v415, v416);
                          *(int64x2_t *)v804 = vdupq_n_s64(1uLL);
                          *(void *)&v804[4] = 1;
                          v785[0] = *(_OWORD *)v804;
                          *(void *)&v785[1] = 1;
                          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v415, 22, v804, v785);
                          if (*(_DWORD *)(v415 + 1880) == 1) {
                            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v415, 22);
                          }
                          if (v417) {
                            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v415, v417);
                          }
                          ++*(_DWORD *)v793;
                        }
                        while (*(_DWORD *)v793 < v795);
                      }
                    }
                    else
                    {
                      unsigned int v795 = 0;
                    }
                    unint64_t v545 = v773;
                    unsigned int v546 = *(_DWORD *)(v773 + 212) & 0xFFFFFFFE;
                    if (v546 == 2)
                    {
                      uint64_t v547 = *(void *)(a4 + 360);
                      uint64_t v548 = v547 + 8 * *(int *)(a4 + 372);
                      uint64_t v549 = (int)*MEMORY[0x263F4B188];
                      if (*(_DWORD *)(a4 + 368) == 4) {
                        uint64_t v550 = *(void *)(v547 + 16);
                      }
                      else {
                        uint64_t v550 = 0;
                      }
                      *(void *)(v773 + 144) = v550
                                              + *(void *)(v548 + 40)
                                              + *(void *)(a4 + 376)
                                              + *(void *)(*(void *)(v548 + 24) + v549 + 8);
                      uint64_t v551 = *(void *)(a4 + 392);
                      uint64_t v552 = v551 + 8 * *(int *)(a4 + 404);
                      uint64_t v553 = *(void *)(*(void *)(v552 + 24) + v549 + 8);
                      if (*(_DWORD *)(a4 + 400) == 4) {
                        uint64_t v554 = *(void *)(v551 + 16);
                      }
                      else {
                        uint64_t v554 = 0;
                      }
                      uint64_t v555 = v554 + *(void *)(v552 + 40) + *(void *)(a4 + 408) + v553;
                      unint64_t v545 = v773;
                      *(void *)(v773 + 152) = v555;
                    }
                    uint64_t v556 = v799 + v723;
                    *(void *)(v545 + 104) = v800 + v723;
                    *(void *)(v545 + 112) = v556;
                    if (v762)
                    {
                      unint64_t v557 = *(void *)(v762 + 24);
                      if (v557 >= 0x100)
                      {
                        if (v557 >= 0x10000)
                        {
                          if (v557 >> 24)
                          {
                            if (HIDWORD(v557)) {
                              int v558 = 8;
                            }
                            else {
                              int v558 = 4;
                            }
                          }
                          else
                          {
                            int v558 = 3;
                          }
                        }
                        else
                        {
                          int v558 = 2;
                        }
                      }
                      else
                      {
                        int v558 = 1;
                      }
                      *(_DWORD *)(v773 + 316) = v558;
                      unint64_t v559 = *(void *)(v762 + 40);
                      if (v559 >= 0x100)
                      {
                        if (v559 >= 0x10000)
                        {
                          if (v559 >> 24)
                          {
                            if (HIDWORD(v559)) {
                              unsigned int v561 = 8;
                            }
                            else {
                              unsigned int v561 = 4;
                            }
                            uint64_t v560 = v561 | 0x400000000;
                          }
                          else
                          {
                            uint64_t v560 = 0x400000003;
                          }
                        }
                        else
                        {
                          uint64_t v560 = 0x400000002;
                        }
                      }
                      else
                      {
                        uint64_t v560 = 0x400000001;
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v773 + 316) = 0;
                      uint64_t v560 = 0;
                    }
                    uint64_t v562 = v797 + v723;
                    *(void *)(v773 + 120) = v798 + v723;
                    *(void *)(v773 + 128) = v562;
                    *(void *)(v773 + 320) = v560;
                    *(void *)(v773 + 280) = v725;
                    int v563 = [a6 isInstanceDescriptor];
                    {
                      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
                    }
                    int v564 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride;
                    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride <= 0) {
                      int v564 = 2;
                    }
                    int v565 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::kBvhVersions[v564];
                    if (v563) {
                      unsigned int v566 = 0x80000000;
                    }
                    else {
                      unsigned int v566 = 0;
                    }
                    *(_DWORD *)(v773 + 288) = v566 & 0xE0000000 | ((v546 == 2) << 29) | (v731 << 30) | v565 & 0x1FFFFFFF;
                    *(void *)(v773 + 136) = v780;
                    if (v737)
                    {
                      v567 = objc_opt_class();
                      char v568 = [v567 isSubclassOfClass:objc_opt_class()];
                      uint64_t v569 = *((void *)*v745 + 11);
                      uint64_t v570 = objc_msgSend((id)objc_msgSend(a6, "instanceDescriptorBuffer"), "gpuAddress");
                      uint64_t v571 = [a6 instanceDescriptorBufferOffset];
                      uint64_t v572 = [a6 instanceDescriptorBuffer];
                      uint64_t v573 = v572 + (int)*MEMORY[0x263F4B188];
                      *(void *)(v569 + 15584) = v571 + v570;
                      *(void *)(*(void *)(v569 + 1936) + 592) = v571 + v570;
                      *(void *)(v569 + 11712) = v573;
                      *(void *)(v569 + 16624) |= 0x80uLL;
                      *(_DWORD *)(v569 + 16656) |= 1u;
                      *(_DWORD *)(v773 + 304) = [a6 instanceDescriptorStride];
                      if (([a6 usage] & 4) != 0) {
                        int v574 = -1;
                      }
                      else {
                        int v574 = 255;
                      }
                      *(_DWORD *)(v773 + 308) = v574;
                      if ((v568 & 1) == 0)
                      {
                        v575 = (void *)[a6 instancedAccelerationStructures];
                        unint64_t v576 = [v575 count];
                        unint64_t v577 = v576;
                        if (v576 <= 1) {
                          uint64_t v578 = 1;
                        }
                        else {
                          uint64_t v578 = v576;
                        }
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v804, v778, 8 * v578, 0);
                        if (v577)
                        {
                          uint64_t v579 = 0;
                          uint64_t v580 = *(void *)&v804[2];
                          do
                          {
                            v581 = (void *)[v575 objectAtIndexedSubscript:v579];
                            uint64_t v582 = objc_msgSend((id)objc_msgSend(v581, "buffer"), "gpuAddress");
                            *(void *)(v580 + 8 * v579++) = [v581 bufferOffset] + v582;
                          }
                          while (v577 != v579);
                        }
                        uint64_t v583 = [v575 count];
                        if ((unint64_t)[v575 count] < 2) {
                          unint64_t v584 = 4;
                        }
                        else {
                          unint64_t v584 = 4 * [v575 count];
                        }
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v785, v778, v584, 0);
                        if (v583)
                        {
                          uint64_t v585 = 0;
                          uint64_t v586 = *((void *)&v785[0] + 1);
                          do
                          {
                            *(_DWORD *)(v586 + 4 * v585) = *(_DWORD *)([v575 objectAtIndexedSubscript:v585]+ 344);
                            ++v585;
                          }
                          while (v583 != v585);
                        }
                        uint64_t v587 = *(void *)v804;
                        *(void *)(v773 + 160) = *(void *)&v785[0];
                        *(void *)(v773 + 168) = v587;
                      }
                    }
                    else if (*v729)
                    {
                      [*(id *)(v778 + 8) setBuffer:*(void *)(v778 + 16) offset:0 atIndex:10];
                    }
                    char v588 = [a6 isInstanceDescriptor];
                    if (v741 == 2) {
                      char v589 = v588;
                    }
                    else {
                      char v589 = 1;
                    }
                    if (!((v762 == 0) | v589 & 1))
                    {
                      v590 = *(void **)(v762 + 48);
                      int v591 = *(_DWORD *)(v762 + 136);
                      if (v591 == 5)
                      {
                        v744 = (void *)[v590 geometryDescriptors];
                        if (v709)
                        {
                          uint64_t v612 = 0;
                          do
                          {
                            uint64_t v613 = [v744 objectAtIndexedSubscript:v612];
                            if (*(_DWORD *)(v773 + 176))
                            {
                              v614 = (void *)v613;
                              unint64_t v615 = 0;
                              v761 = v802[2];
                              v764 = v802[0];
                              uint64_t v616 = v803;
                              v752 = (char *)v802[1] + 152;
                              v756 = (char *)v802[0] + 152;
                              do
                              {
                                v617 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v614, "controlPointBuffers"), "objectAtIndexedSubscript:", v615), "buffer");
                                uint64_t v618 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v614, "controlPointBuffers"), "objectAtIndexedSubscript:", v615), "offset");
                                uint64_t v619 = [v617 contents];
                                uint64_t v620 = [v617 gpuAddress];
                                uint64_t v621 = [v617 length];
                                v622 = &v617[*MEMORY[0x263F4B188]];
                                *(void *)v804 = v620 + v618;
                                *(void *)&v804[2] = v618 + v619;
                                *(void *)&v804[4] = v621;
                                *(void *)&v804[6] = v622;
                                LODWORD(v620) = [v614 controlPointStride];
                                MTLAttributeFormat v623 = [v614 controlPointFormat];
                                v624 = (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v614, "radiusBuffers"), "objectAtIndexedSubscript:", v615), "buffer");
                                uint64_t v625 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v614, "radiusBuffers"), "objectAtIndexedSubscript:", v615), "offset");
                                uint64_t v626 = [v624 contents];
                                uint64_t v627 = [v624 gpuAddress];
                                uint64_t v628 = [v624 length];
                                v629 = &v624[*MEMORY[0x263F4B188]];
                                *(void *)&v785[0] = v627 + v625;
                                *((void *)&v785[0] + 1) = v625 + v626;
                                *(void *)&v785[1] = v628;
                                *((void *)&v785[1] + 1) = v629;
                                LODWORD(v624) = [v614 radiusStride];
                                MTLAttributeFormat v630 = [v614 radiusFormat];
                                uint64_t v631 = [v614 controlPointCount];
                                uint64_t v632 = (uint64_t)v764
                                     + *(void *)(v767 + 8 * (v615 + v612 * *(unsigned int *)(v773 + 176)));
                                *(void *)v793 = v756;
                                *(void *)&v793[8] = v752;
                                *(void *)&v793[16] = v761;
                                uint64_t v794 = v616;
                                AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyControlPoints(v778, v804, v620, v623, v785, (int)v624, v630, v631, v632, v616, (uint64_t *)v793);
                                ++v615;
                              }
                              while (v615 < *(unsigned int *)(v773 + 176));
                            }
                            ++v612;
                          }
                          while (v612 != v709);
                        }
                      }
                      else if (v591 == 2)
                      {
                        v775 = (void *)[v590 geometryDescriptors];
                        if (v709)
                        {
                          uint64_t v592 = 0;
                          v593 = v802[0];
                          uint64_t v594 = v803;
                          v760 = (char *)v802[0] + 152;
                          v763 = v802[2];
                          v755 = (char *)v802[1] + 152;
                          do
                          {
                            v595 = (void *)[v775 objectAtIndexedSubscript:v592];
                            v596 = (char *)[v595 controlPointBuffer];
                            uint64_t v597 = [v595 controlPointBufferOffset];
                            uint64_t v598 = [v596 contents];
                            uint64_t v599 = [v596 gpuAddress];
                            uint64_t v600 = [v596 length];
                            v601 = &v596[*MEMORY[0x263F4B188]];
                            *(void *)v804 = v599 + v597;
                            *(void *)&v804[2] = v597 + v598;
                            *(void *)&v804[4] = v600;
                            *(void *)&v804[6] = v601;
                            LODWORD(v597) = [v595 controlPointStride];
                            MTLAttributeFormat v602 = [v595 controlPointFormat];
                            v603 = (char *)[v595 radiusBuffer];
                            uint64_t v604 = [v595 radiusBufferOffset];
                            uint64_t v605 = [v603 contents];
                            uint64_t v606 = [v603 gpuAddress];
                            uint64_t v607 = [v603 length];
                            v608 = &v603[*MEMORY[0x263F4B188]];
                            *(void *)&v785[0] = v606 + v604;
                            *((void *)&v785[0] + 1) = v604 + v605;
                            *(void *)&v785[1] = v607;
                            *((void *)&v785[1] + 1) = v608;
                            LODWORD(v604) = [v595 radiusStride];
                            MTLAttributeFormat v609 = [v595 radiusFormat];
                            uint64_t v610 = [v595 controlPointCount];
                            uint64_t v611 = (uint64_t)v593 + *(void *)(v767 + 8 * v592);
                            *(void *)v793 = v760;
                            *(void *)&v793[8] = v755;
                            *(void *)&v793[16] = v763;
                            uint64_t v794 = v594;
                            AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyControlPoints(v778, v804, v597, v602, v785, v604, v609, v610, v611, v594, (uint64_t *)v793);
                            ++v592;
                          }
                          while (v709 != v592);
                        }
                      }
                    }
                    {
                    }
                    v633 = *v745;
                    uint64_t v634 = *((void *)*v745 + 11);
                    v635 = (char *)v802[0];
                    uint64_t v636 = v803;
                    *(void **)(v634 + 15568) = v802[0];
                    v776 = v635;
                    *(void *)(*(void *)(v634 + 1936) + 576) = v635;
                    *(void *)(v634 + 11696) = v636;
                    *(void *)(v634 + 16624) |= 0x20uLL;
                    *(_DWORD *)(v634 + 16656) |= 1u;
                    if (v717)
                    {
                      uint64_t v637 = v633[11];
                      *(void *)(v637 + 15672) = v717;
                      *(void *)(*(void *)(v637 + 1936) + 680) = v717;
                      *(void *)(v637 + 11800) = v710;
                      *(void *)(v637 + 16624) |= 0x40000uLL;
                      *(_DWORD *)(v637 + 16656) |= 1u;
                    }
                    if (v721)
                    {
                      uint64_t v638 = v633[11];
                      *(void *)(v638 + 15664) = v721;
                      *(void *)(*(void *)(v638 + 1936) + 672) = v721;
                      *(void *)(v638 + 11792) = v711;
                      *(void *)(v638 + 16624) |= 0x20000uLL;
                      *(_DWORD *)(v638 + 16656) |= 1u;
                    }
                    unint64_t v639 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v727, v749);
                    memset(v804, 0, 32);
                    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(v778, v639, v734 + 16, v770, (uint64_t *)v804, 1, 0);
                    if (*v729) {
                      [*(id *)(v778 + 8) setBuffer:*(void *)(v778 + 16) offset:0 atIndex:10];
                    }
                    unint64_t v640 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, v719, v749);
                    memset(v804, 0, 32);
                    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWithIndirectThreadCountExtended(v778, v640, v734 + 12, v770, (uint64_t *)v804, 1, 1);
                    if ([a6 isInstanceDescriptor])
                    {
                      *(void *)v804 = v778;
                      *(void *)&v804[2] = v802;
                      v641 = objc_opt_class();
                      if ([v641 isSubclassOfClass:objc_opt_class()]) {
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::HAL200::Encoders *)#1}::operator()<MTLIndirectInstanceAccelerationStructureDescriptor>((uint64_t *)v804, a6);
                      }
                      else {
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeCopyMotionTransforms(MTLAccelerationStructureDescriptor *,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::{lambda(AGX::HAL200::Encoders *)#1}::operator()<MTLInstanceAccelerationStructureDescriptor>((uint64_t *)v804, a6);
                      }
                      goto LABEL_844;
                    }
                    v642 = (void *)*((void *)*v745 + 11);
                    uint64_t v643 = v642[20];
                    uint64_t v644 = v643 + 31;
                    if ((unint64_t)(v643 + 31) > v642[19])
                    {
                      int v707 = AGX::DataBufferAllocator<34ul>::growNoInline(v642 + 2, 3, 0);
                      uint64_t v643 = v642[20];
                      if (!v707)
                      {
LABEL_823:
                        v645 = (void *)((v643 + 15) & 0xFFFFFFFFFFFFFFF0);
                        v646 = (char *)v645 + v642[22];
                        uint64_t v647 = (int)*MEMORY[0x263F4B188];
                        void *v645 = 0;
                        v642[20] = v645 + 2;
                        uint64_t v648 = *(void *)(v642[5] + 224) + v647;
                        *(void *)v804 = v646;
                        *(void *)&v804[2] = v645;
                        *(void *)&v804[4] = 8;
                        *(void *)&v804[6] = v648;
                        if ((v708 & 1) == 0 && objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count"))
                        {
                          unint64_t v649 = 0;
                          do
                          {
                            v650 = objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "objectAtIndexedSubscript:", v649);
                            v651 = v650;
                            if (v741 == 1)
                            {
                              unsigned int v652 = [v650 boundingBoxCount];
                            }
                            else if (v741)
                            {
                              unsigned int v652 = [v650 segmentCount];
                            }
                            else
                            {
                              unsigned int v652 = [v650 triangleCount];
                            }
                            unint64_t v653 = v652;
                            if (v652)
                            {
                              unsigned int v654 = [v651 primitiveDataElementSize];
                              unsigned int v655 = v654;
                              if (v654 < 2)
                              {
                                int v656 = 1;
                              }
                              else if (v654 > 0x10)
                              {
                                int v656 = 32;
                              }
                              else
                              {
                                int v656 = 1 << -__clz(v654 - 1);
                              }
                              v657 = (char *)[v651 primitiveDataBuffer];
                              uint64_t v658 = [v651 primitiveDataBufferOffset];
                              uint64_t v659 = [v657 contents];
                              uint64_t v660 = [v657 gpuAddress];
                              uint64_t v661 = [v657 length];
                              v662 = &v657[*MEMORY[0x263F4B188]];
                              *(void *)&v785[0] = v660 + v658;
                              *((void *)&v785[0] + 1) = v658 + v659;
                              *(void *)&v785[1] = v661;
                              *((void *)&v785[1] + 1) = v662;
                              [*(id *)(v778 + 8) useResource:v657 usage:1];
                              LODWORD(v657) = [v651 primitiveDataStride];
                              int v663 = [v651 primitiveDataElementSize];
                              uint64_t v664 = *(void *)(v739 + 8 * v649);
                              *(void *)v793 = &v776[v664];
                              *(void *)&v793[8] = (char *)v802[1] + v664;
                              *(void **)&v793[16] = v802[2];
                              uint64_t v794 = v636;
                              v790.i64[0] = (uint64_t)(v776 + 136);
                              v790.i64[1] = (uint64_t)v802[1] + 136;
                              uint64_t v791 = (uint64_t)v802[2];
                              uint64_t v792 = v636;
                              AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy(v778, (uint64_t *)v785, (uint64_t *)v804, (int)v657, (void *)v653, 1u, v663, (uint64_t *)v793, v790.i64, (v655 + v656 - 1) & -v656);
                            }
                            ++v649;
                          }
                          while (objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count") > v649);
                        }
                        v665 = objc_msgSend((id)objc_msgSend(a6, "geometryDescriptors"), "count");
                        if (v780)
                        {
                          *(void *)&v785[0] = v780 + 96;
                          *((void *)&v785[0] + 1) = v781 + 96;
                          v785[1] = v782;
                          *(void *)v793 = v776 + 80;
                          *(void *)&v793[8] = (char *)v802[1] + 80;
                          *(void **)&v793[16] = v802[2];
                          uint64_t v794 = v636;
                          v790.i64[0] = (uint64_t)(v776 + 112);
                          v790.i64[1] = (uint64_t)v802[1] + 112;
                          uint64_t v791 = (uint64_t)v802[2];
                          uint64_t v792 = v636;
                          AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy(v778, (uint64_t *)v785, (uint64_t *)v804, 128, v665, 1u, 8, (uint64_t *)v793, v790.i64, 8);
                        }
                        uint64_t v666 = *((void *)*v745 + 11);
                        *(void *)(v666 + 15568) = v776;
                        *(void *)(*(void *)(v666 + 1936) + 576) = v776;
                        *(void *)(v666 + 11696) = v636;
                        *(void *)(v666 + 16624) |= 0x20uLL;
                        *(_DWORD *)(v666 + 16656) |= 1u;
LABEL_844:
                        if (!*v715)
                        {
LABEL_854:
                          uint64_t v698 = *(void *)(v778 + 8);
                          uint64_t v699 = *(void *)(v698 + 88);
                          v700 = v802[0];
                          uint64_t v701 = v803;
                          *(void **)(v699 + 15568) = v802[0];
                          *(void *)(*(void *)(v699 + 1936) + 576) = v700;
                          *(void *)(v699 + 11696) = v701;
                          *(void *)(v699 + 16624) |= 0x20uLL;
                          *(_DWORD *)(v699 + 16656) |= 1u;
                          uint64_t v702 = *(void *)(v698 + 88);
                          unint64_t v703 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 155, 0);
                          uint64_t v704 = *(void *)(v702 + 1920);
                          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v702, v703);
                          *(int64x2_t *)v804 = vdupq_n_s64(1uLL);
                          *(void *)&v804[4] = 1;
                          v785[0] = *(_OWORD *)v804;
                          *(void *)&v785[1] = 1;
                          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v702, 22, v804, v785);
                          if (*(_DWORD *)(v702 + 1880) == 1) {
                            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v702, 22);
                          }
                          if (v704) {
                            AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v702, v704);
                          }
                          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildAndEncodeRiaBvh(BVHDescriptor const*,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::ScratchAllocator *,void const*,unsigned long long,unsigned long long,AGXG17FamilyRayTracingAccelerationStructure *,MTLAccelerationStructureDescriptor *,AGXG17FamilyBuffer *,unsigned long)::verify)
                          {
                            v705 = (void *)**((void **)*v745 + 11);
                            v779[0] = MEMORY[0x263EF8330];
                            v779[1] = 3221225472;
                            v779[2] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26encodeBuildAndEncodeRiaBvhEPK13BVHDescriptorPNS5_16ScratchAllocatorEPKvyyP43AGXG17FamilyRayTracingAccelerationStructureP34MTLAccelerationStructureDescriptorP18AGXG17FamilyBufferm_block_invoke;
                            v779[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
                            v779[4] = v712;
                            [v705 addCompletedHandler:v779];
                          }
                          goto LABEL_860;
                        }
                        uint64_t v667 = *(void *)(a4 + 592);
                        uint64_t v668 = v667 + 8 * *(int *)(a4 + 604);
                        v669 = *(char **)(v668 + 24);
                        if (*(_DWORD *)(a4 + 600) == 4) {
                          uint64_t v670 = *(void *)(v667 + 16);
                        }
                        else {
                          uint64_t v670 = 0;
                        }
                        uint64_t v671 = *(void *)(v668 + 40);
                        uint64_t v672 = *(void *)(a4 + 608);
                        uint64_t v673 = [v669 contents];
                        uint64_t v674 = [v669 gpuAddress];
                        uint64_t v675 = [v669 length];
                        uint64_t v676 = v671 + v670 + v672;
                        v677 = &v669[*MEMORY[0x263F4B188]];
                        *(void *)v804 = v674 + v676;
                        *(void *)&v804[2] = v676 + v673;
                        *(void *)&v804[4] = v675;
                        *(void *)&v804[6] = v677;
                        MTLResourceListAddResource();
                        IOGPUResourceListAddResource();
                        uint64_t v678 = *(void *)(a4 + 560);
                        uint64_t v679 = v678 + 8 * *(int *)(a4 + 572);
                        v680 = *(char **)(v679 + 24);
                        if (*(_DWORD *)(a4 + 568) == 4) {
                          uint64_t v681 = *(void *)(v678 + 16);
                        }
                        else {
                          uint64_t v681 = 0;
                        }
                        uint64_t v682 = *(void *)(v679 + 40);
                        uint64_t v683 = *(void *)(a4 + 576);
                        uint64_t v684 = [v680 contents];
                        uint64_t v685 = [v680 gpuAddress];
                        uint64_t v686 = [v680 length];
                        uint64_t v687 = v682 + v681 + v683;
                        v688 = &v680[*MEMORY[0x263F4B188]];
                        uint64_t v689 = v685 + v687;
                        uint64_t v690 = v687 + v684;
                        *(void *)&v785[0] = v689;
                        *((void *)&v785[0] + 1) = v690;
                        *(void *)&v785[1] = v686;
                        *((void *)&v785[1] + 1) = v688;
                        MTLResourceListAddResource();
                        IOGPUResourceListAddResource();
                        v691 = (void *)*((void *)*v745 + 11);
                        uint64_t v692 = v691[20];
                        uint64_t v693 = v692 + 31;
                        if ((unint64_t)(v692 + 31) > v691[19])
                        {
                          int v706 = AGX::DataBufferAllocator<34ul>::growNoInline(v691 + 2, 3, 0);
                          uint64_t v692 = v691[20];
                          if (!v706) {
                            goto LABEL_853;
                          }
                          uint64_t v693 = v692 + 31;
                          if ((unint64_t)(v692 + 31) > v691[19]) {
                            abort();
                          }
                        }
                        v691[21] = v693;
LABEL_853:
                        v694 = (void *)((v692 + 15) & 0xFFFFFFFFFFFFFFF0);
                        v695 = (char *)v694 + v691[22];
                        uint64_t v696 = (int)*MEMORY[0x263F4B188];
                        void *v694 = 0;
                        v691[20] = v694 + 2;
                        uint64_t v697 = *(void *)(v691[5] + 224) + v696;
                        *(void *)v793 = v695;
                        *(void *)&v793[8] = v694;
                        *(void *)&v793[16] = 8;
                        uint64_t v794 = v697;
                        v790.i64[0] = (uint64_t)v802[0] + 120;
                        v790.i64[1] = (uint64_t)v802[1] + 120;
                        uint64_t v791 = (uint64_t)v802[2];
                        uint64_t v792 = v803;
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy(v778, (uint64_t *)v785, (uint64_t *)v793, 4, (void *)0x44, 1u, 4, (uint64_t *)v802, v790.i64, 4);
                        v790.i64[0] = v689 + 256;
                        v790.i64[1] = v690 + 256;
                        uint64_t v791 = v686;
                        uint64_t v792 = (uint64_t)v688;
                        v789[1] = (uint64_t)v802[1] + 272;
                        v789[2] = (uint64_t)v802[2];
                        v789[3] = v803;
                        v788[0] = (uint64_t)v802[0] + 120;
                        v788[1] = (uint64_t)v802[1] + 120;
                        v788[2] = (uint64_t)v802[2];
                        v788[3] = v803;
                        v789[0] = (uint64_t)v802[0] + 272;
                        AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeStridedCopy(v778, (uint64_t *)v804, (uint64_t *)v793, 4, &v790, 0, 4, v789, v788, 4);
                        goto LABEL_854;
                      }
                      uint64_t v644 = v643 + 31;
                      if ((unint64_t)(v643 + 31) > v642[19]) {
                        abort();
                      }
                    }
                    v642[21] = v644;
                    goto LABEL_823;
                  }
                  uint64_t v711 = 0;
                  uint64_t v767 = 0;
                  uint64_t v721 = 0;
                  int v278 = 0;
                  int v268 = 0;
                  *(_DWORD *)(v773 + 212) = 0;
                  int v727 = 1;
                  *(unsigned char *)(v773 + 270) = 1;
                  unsigned int v277 = 48;
                  goto LABEL_463;
                }
                uint64_t v711 = 0;
                uint64_t v767 = 0;
                uint64_t v721 = 0;
                int v278 = 0;
                int v268 = 0;
                unsigned int v277 = 0;
                int v754 = 23;
                int v420 = 1;
              }
              int v727 = v420;
              goto LABEL_466;
            }
            int v727 = 1;
            uint64_t v711 = 0;
            uint64_t v767 = 0;
            uint64_t v721 = 0;
            int v278 = 0;
            unsigned int v277 = 0;
            int v268 = -1;
LABEL_463:
            int v754 = 23;
LABEL_466:
            int v743 = 25;
            int v419 = 24;
            goto LABEL_467;
          }
          uint64_t v247 = v246 + 351;
          if ((unint64_t)(v246 + 351) > v245[19]) {
            abort();
          }
        }
        v245[21] = v247;
        goto LABEL_213;
      }
      uint64_t v75 = v74 + 31;
      if ((unint64_t)(v74 + 31) > *(void *)(v73 + 152)) {
        abort();
      }
    }
    *(void *)(v73 + 168) = v75;
    goto LABEL_71;
  }
  uint64_t v39 = [a5 buffer];
  uint64_t v40 = [a5 bufferOffset];
  *(void *)(a3 + 32) = a7;
  *(void *)(a3 + 40) = v40;
  *(void *)(a3 + 48) = (a8 + 63) & 0xFFFFFFFFFFFFFFC0;
  unint64_t v41 = *(void *)(a3 + 64);
  if (v41 <= *(void *)(a3 + 80)) {
    unint64_t v41 = *(void *)(a3 + 80);
  }
  if (v41 <= *(void *)(a3 + 96)) {
    unint64_t v41 = *(void *)(a3 + 96);
  }
  if (v41 <= *(void *)(a3 + 112)) {
    unint64_t v41 = *(void *)(a3 + 112);
  }
  *(void *)(a3 + 16) = (v41 + 63) & 0xFFFFFFFFFFFFFFC0;
  *(void *)(a3 + 24) = v39;
  *(unsigned char *)a3 = 1;
  uint64_t v42 = (void *)[a5 buffer];
  uint64_t v43 = [a5 bufferOffset];
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride = 0;
  }
  int v44 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride;
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSelectedRiaBvhGen(void)::riaBvhGenOverride <= 0) {
    int v44 = 2;
  }
  int v45 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::kBvhVersions[v44];
  if (v768) {
    int v46 = 0x20000000;
  }
  else {
    int v46 = 0;
  }
  uint64_t v47 = *((void *)*v745 + 11);
  [v42 contents];
  uint64_t v48 = [v42 gpuAddress];
  [v42 length];
  uint64_t v49 = [v42 length];
  if (v762) {
    unsigned int v50 = (*(_DWORD *)(v762 + 116) + *(_DWORD *)(v762 + 24) - 1) / *(_DWORD *)(v762 + 116);
  }
  else {
    unsigned int v50 = 0;
  }
  memset(v804, 0, 24);
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)v804, *(void *)(v778 + 8), 808, 1);
  uint64_t v51 = *(void *)v804;
  uint64_t v769 = *(void *)&v804[4];
  uint64_t v772 = *(void *)&v804[2];
  bzero(*(void **)v804, 0x328uLL);
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(v785, v778, a6, v762, v51, a4, (uint64_t)v783[0]);
  unsigned int v52 = v46 & 0xE0000000 | v45 & 0x1FFFFFFF;
  if (v762)
  {
    uint64_t v53 = v765;
    BOOL v753 = *(void *)(v762 + 40) && !*(_DWORD *)(v762 + 136) && *(_DWORD *)(v762 + 140) == 2;
    __int16 v111 = *(unsigned __int8 *)(v762 + 85);
    if (*(unsigned char *)(v762 + 85)) {
      __int16 v111 = 8 * (*(unsigned char *)(v762 + 86) == 0);
    }
  }
  else
  {
    BOOL v753 = 0;
    __int16 v111 = 0;
    uint64_t v53 = v765;
  }
  __int16 v112 = *(_WORD *)(v51 + 128) & 0xFFF7 | v111;
  *(_WORD *)(v51 + 128) = v112;
  *(void *)uint64_t v51 = v53;
  *(_DWORD *)(v51 + 8) = v52;
  *(void *)(v51 + 208) = v48 + v43;
  *(void *)(v51 + 216) = v49 - v43;
  uint64_t v113 = *(void *)(a4 + 256);
  uint64_t v114 = v113 + 8 * *(int *)(a4 + 268);
  int v115 = (int *)MEMORY[0x263F4B188];
  uint64_t v116 = (int)*MEMORY[0x263F4B188];
  if (*(_DWORD *)(a4 + 264) == 4) {
    uint64_t v117 = *(void *)(v113 + 16);
  }
  else {
    uint64_t v117 = 0;
  }
  uint64_t v118 = *(unsigned int *)(a4 + 280);
  *(void *)(v51 + 224) = v117
                         + *(void *)(v114 + 40)
                         + *(void *)(a4 + 272)
                         + *(void *)(*(void *)(v114 + 24) + v116 + 8);
  *(void *)(v51 + 232) = v118;
  uint64_t v119 = *(void *)(a4 + 288);
  uint64_t v120 = v119 + 8 * *(int *)(a4 + 300);
  if (*(_DWORD *)(a4 + 296) == 4) {
    uint64_t v121 = *(void *)(v119 + 16);
  }
  else {
    uint64_t v121 = 0;
  }
  uint64_t v122 = v121 + *(void *)(v120 + 40) + *(void *)(a4 + 304) + *(void *)(*(void *)(v120 + 24) + v116 + 8);
  int v123 = *(_DWORD *)(a4 + 312) >> 2;
  *(void *)(v51 + 240) = v122;
  *(_WORD *)(v51 + 248) = v123;
  uint64_t v124 = *(void *)(a4 + 32);
  uint64_t v125 = v124 + 8 * *(int *)(a4 + 44);
  if (*(_DWORD *)(a4 + 40) == 4) {
    uint64_t v126 = *(void *)(v124 + 16);
  }
  else {
    uint64_t v126 = 0;
  }
  uint64_t v127 = v126 + *(void *)(v125 + 40) + *(void *)(a4 + 48) + *(void *)(*(void *)(v125 + 24) + v116 + 8);
  int v128 = *(_DWORD *)(a4 + 56) >> 2;
  *(void *)(v51 + 336) = v127;
  *(_DWORD *)(v51 + 344) = v128;
  uint64_t v129 = *(void *)(a4 + 64);
  uint64_t v130 = v129 + 8 * *(int *)(a4 + 76);
  if (*(_DWORD *)(a4 + 72) == 4) {
    uint64_t v131 = *(void *)(v129 + 16);
  }
  else {
    uint64_t v131 = 0;
  }
  uint64_t v132 = v131 + *(void *)(v130 + 40) + *(void *)(a4 + 80) + *(void *)(*(void *)(v130 + 24) + v116 + 8);
  int v133 = *(_DWORD *)(a4 + 88) >> 2;
  *(void *)(v51 + 664) = v132;
  *(_DWORD *)(v51 + 672) = v133;
  if (v762 && *(unsigned char *)(v762 + 86))
  {
    uint64_t v134 = *(void *)(a4 + 96);
    uint64_t v135 = v134 + 8 * *(int *)(a4 + 108);
    if (*(_DWORD *)(a4 + 104) == 4) {
      uint64_t v136 = *(void *)(v134 + 16);
    }
    else {
      uint64_t v136 = 0;
    }
    uint64_t v137 = v136 + *(void *)(v135 + 40) + *(void *)(a4 + 112) + *(void *)(*(void *)(v135 + 24) + v116 + 8);
    int v138 = *(_DWORD *)(a4 + 120) >> 2;
    *(void *)(v51 + 680) = v137;
    *(_DWORD *)(v51 + 688) = v138;
    uint64_t v139 = *(void *)(a4 + 128);
    uint64_t v140 = v139 + 8 * *(int *)(a4 + 140);
    if (*(_DWORD *)(a4 + 136) == 4) {
      uint64_t v141 = *(void *)(v139 + 16);
    }
    else {
      uint64_t v141 = 0;
    }
    uint64_t v142 = v141 + *(void *)(v140 + 40) + *(void *)(a4 + 144) + *(void *)(*(void *)(v140 + 24) + v116 + 8);
    int v143 = *(_DWORD *)(a4 + 152) >> 2;
    *(void *)(v51 + 696) = v142;
    *(_DWORD *)(v51 + 704) = v143;
    uint64_t v144 = *(void *)(a4 + 160);
    uint64_t v145 = v144 + 8 * *(int *)(a4 + 172);
    if (*(_DWORD *)(a4 + 168) == 4) {
      uint64_t v146 = *(void *)(v144 + 16);
    }
    else {
      uint64_t v146 = 0;
    }
    uint64_t v147 = v146 + *(void *)(v145 + 40) + *(void *)(a4 + 176) + *(void *)(*(void *)(v145 + 24) + v116 + 8);
    int v148 = *(_DWORD *)(a4 + 184) >> 2;
    *(void *)(v51 + 712) = v147;
    *(_DWORD *)(v51 + 720) = v148;
    uint64_t v149 = *(void *)(a4 + 192);
    uint64_t v150 = v149 + 8 * *(int *)(a4 + 204);
    if (*(_DWORD *)(a4 + 200) == 4) {
      uint64_t v151 = *(void *)(v149 + 16);
    }
    else {
      uint64_t v151 = 0;
    }
    uint64_t v152 = v151 + *(void *)(v150 + 40) + *(void *)(a4 + 208) + *(void *)(*(void *)(v150 + 24) + v116 + 8);
    int v153 = *(_DWORD *)(a4 + 216) >> 3;
    *(void *)(v51 + 728) = v152;
    *(_DWORD *)(v51 + 736) = v153;
  }
  uint64_t v154 = *(void *)(a4 + 224);
  uint64_t v155 = v154 + 8 * *(int *)(a4 + 236);
  if (*(_DWORD *)(a4 + 232) == 4) {
    uint64_t v156 = *(void *)(v154 + 16);
  }
  else {
    uint64_t v156 = 0;
  }
  uint64_t v157 = v156 + *(void *)(v155 + 40) + *(void *)(a4 + 240) + *(void *)(*(void *)(v155 + 24) + v116 + 8);
  unsigned int v158 = *(_DWORD *)(a4 + 248) / 0x50u;
  *(void *)(v51 + 744) = v157;
  *(_WORD *)(v51 + 752) = v158;
  uint64_t v159 = *(void *)(a4 + 352);
  uint64_t v160 = v159 + 8 * *(int *)(a4 + 364);
  if (*(_DWORD *)(a4 + 360) == 4) {
    uint64_t v161 = *(void *)(v159 + 16);
  }
  else {
    uint64_t v161 = 0;
  }
  uint64_t v162 = v161 + *(void *)(v160 + 40) + *(void *)(a4 + 368) + *(void *)(*(void *)(v160 + 24) + v116 + 8);
  unsigned int v163 = *(_DWORD *)(a4 + 376) / 0x18u;
  *(void *)(v51 + 760) = v162;
  *(_DWORD *)(v51 + 768) = v163;
  uint64_t v164 = *(void *)(a4 + 320);
  uint64_t v165 = v164 + 8 * *(int *)(a4 + 332);
  uint64_t v166 = *(void *)(*(void *)(v165 + 24) + v116 + 8);
  if (*(_DWORD *)(a4 + 328) == 4) {
    uint64_t v167 = *(void *)(v164 + 16);
  }
  else {
    uint64_t v167 = 0;
  }
  uint64_t v168 = v167 + *(void *)(v165 + 40) + *(void *)(a4 + 336) + v166;
  int v169 = *(_DWORD *)(a4 + 344) >> 2;
  *(void *)(v51 + 792) = v168;
  *(_WORD *)(v51 + 800) = v169;
  if (v762) {
    __int16 v170 = v112 & 0xF7FF | (*(unsigned __int8 *)(v762 + 87) << 11);
  }
  else {
    __int16 v170 = v112 & 0xF7FF;
  }
  *(_WORD *)(v51 + 128) = v170;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::printLeafHandlesPerNode = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::validateLeafHandlesPerNode = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::forceSimpleSubtreeDivision = 0;
  }
  *(_WORD *)(v51 + 128) = *(_WORD *)(v51 + 128) & 0xFFFB | (4
                                                          * (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::forceSimpleSubtreeDivision & 0x3F));
  *(void *)(v51 + 592) = 0;
  if (v762 && *(unsigned char *)(v762 + 85))
  {
    uint64_t v171 = *(void *)(a4 + 256);
    uint64_t v172 = v171 + 8 * *(int *)(a4 + 268);
    uint64_t v173 = *v115;
    uint64_t v174 = *(_DWORD *)(a4 + 264) == 4 ? *(void *)(v171 + 16) : 0;
    unsigned int v175 = *(_DWORD *)(a4 + 280) / 0x18u;
    *(void *)(v51 + 376) = v174
                           + *(void *)(v172 + 40)
                           + *(void *)(a4 + 272)
                           + *(void *)(*(void *)(v172 + 24) + v173 + 8);
    *(_DWORD *)(v51 + 384) = v175;
    uint64_t v176 = *(void *)(a4 + 384);
    uint64_t v177 = v176 + 8 * *(int *)(a4 + 396);
    uint64_t v178 = *(_DWORD *)(a4 + 392) == 4 ? *(void *)(v176 + 16) : 0;
    uint64_t v179 = v178 + *(void *)(v177 + 40) + *(void *)(a4 + 400) + *(void *)(*(void *)(v177 + 24) + v173 + 8);
    int v180 = *(_DWORD *)(a4 + 408) >> 1;
    *(void *)(v51 + 392) = v179;
    *(_DWORD *)(v51 + 400) = v180;
    uint64_t v181 = *(void *)(a4 + 416);
    uint64_t v182 = v181 + 8 * *(int *)(a4 + 428);
    uint64_t v183 = *(_DWORD *)(a4 + 424) == 4 ? *(void *)(v181 + 16) : 0;
    *(void *)(v51 + 544) = v183
                           + *(void *)(v182 + 40)
                           + *(void *)(a4 + 432)
                           + *(void *)(*(void *)(v182 + 24) + v173 + 8);
    *(_DWORD *)(v51 + 552) = 2 * v50 - 1;
    if (!*(unsigned char *)(v762 + 86))
    {
      uint64_t v184 = *(void *)(a4 + 448);
      uint64_t v185 = v184 + 8 * *(int *)(a4 + 460);
      unint64_t v186 = (void *)(v185 + 24);
      uint64_t v187 = *(void *)(*(void *)(v185 + 24) + v173 + 8);
      int v188 = *(_DWORD *)(a4 + 456);
      if (v188 == 4) {
        uint64_t v189 = *(void *)(v184 + 16);
      }
      else {
        uint64_t v189 = 0;
      }
      uint64_t v191 = *(void *)(v185 + 40);
      unint64_t v190 = (void *)(v185 + 40);
      uint64_t v192 = v189 + v191 + *(void *)(a4 + 464) + v187;
      unsigned int v193 = *(_DWORD *)(a4 + 472) >> 2;
      if (v193 >= (*(_DWORD *)(v762 + 24) + 1023) >> 10) {
        unsigned int v193 = (*(_DWORD *)(v762 + 24) + 1023) >> 10;
      }
      *(void *)(v51 + 560) = v192;
      *(_DWORD *)(v51 + 568) = v193;
      uint64_t v194 = *(void *)(*v186 + v173 + 8);
      if (v188 == 4) {
        uint64_t v195 = *(void *)(v184 + 16);
      }
      else {
        uint64_t v195 = 0;
      }
      uint64_t v196 = v195 + *v190 + *(void *)(a4 + 464) + v194;
      unsigned int v197 = *(_DWORD *)(a4 + 472) / 0x60u;
      *(void *)(v51 + 576) = v196;
      *(_DWORD *)(v51 + 584) = v197;
      uint64_t v198 = *(void *)(a4 + 480);
      uint64_t v199 = v198 + 8 * *(int *)(a4 + 492);
      if (*(_DWORD *)(a4 + 488) == 4) {
        uint64_t v200 = *(void *)(v198 + 16);
      }
      else {
        uint64_t v200 = 0;
      }
      uint64_t v201 = v200 + *(void *)(v199 + 40) + *(void *)(a4 + 496) + *(void *)(*(void *)(v199 + 24) + v173 + 8);
      unsigned int v202 = *(_DWORD *)(a4 + 504) / 0x5A0u;
      *(void *)(v51 + 608) = v201;
      *(_DWORD *)(v51 + 616) = v202;
      uint64_t v203 = *(void *)(a4 + 512);
      uint64_t v204 = v203 + 8 * *(int *)(a4 + 524);
      uint64_t v205 = *(void *)(*(void *)(v204 + 24) + v173 + 8);
      if (*(_DWORD *)(a4 + 520) == 4) {
        uint64_t v206 = *(void *)(v203 + 16);
      }
      else {
        uint64_t v206 = 0;
      }
      *(void *)(v51 + 640) = v206 + *(void *)(v204 + 40) + *(void *)(a4 + 528) + v205;
      *(_DWORD *)(v51 + 648) = v50;
    }
  }
  __n128 v207 = *(void **)(*(void *)(a4 + 544) + 8 * *(int *)(a4 + 556) + 24);
  [v207 contents];
  [v207 gpuAddress];
  [v207 length];
  uint64_t v208 = *(void *)(a4 + 544);
  uint64_t v209 = v208 + 8 * *(int *)(a4 + 556);
  uint64_t v748 = *v115;
  if (*(_DWORD *)(a4 + 552) == 4) {
    uint64_t v210 = *(void *)(v208 + 16);
  }
  else {
    uint64_t v210 = 0;
  }
  *(void *)(v51 + 624) = v210
                         + *(void *)(v209 + 40)
                         + *(void *)(a4 + 560)
                         + *(void *)(*(void *)(v209 + 24) + *v115 + 8);
  *(_WORD *)(v51 + 632) = 12;
  *(_DWORD *)(v51 + 296) = v50;
  *(void *)(v51 + 300) = 0;
  uint64_t v211 = *((void *)*v745 + 11);
  *(void *)(v211 + 15584) = v772;
  *(void *)(*(void *)(v211 + 1936) + 592) = v772;
  *(void *)(v211 + 11712) = v769;
  *(void *)(v211 + 16624) |= 0x80uLL;
  *(_DWORD *)(v211 + 16656) |= 1u;
  {
    {
    }
    {
    }
    if (shouldDumpOrVerifyBVHs(void)::once != -1) {
      dispatch_once(&shouldDumpOrVerifyBVHs(void)::once, &__block_literal_global_607);
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify = 0;
  }
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    __n128 v212 = (void *)[*(id *)v778 newBufferWithLength:4718984 options:0];
    __n128 v213 = (void *)[v212 contents];
    uint64_t v214 = [v212 gpuAddress];
    MTLResourceListAddResource();
    IOGPUResourceListAddResource();

    bzero(v213, 0x480188uLL);
    v213[1] = -1;
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      __n128 v215 = (void *)**((void **)*v745 + 11);
      *(void *)v804 = MEMORY[0x263EF8330];
      *(void *)&v804[2] = 3221225472;
      *(void *)&v804[4] = ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20encodeBuildMediumBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXG17FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke;
      *(void *)&v804[6] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
      *(void *)&v804[8] = v213;
      [v215 addCompletedHandler:v804];
    }
  }
  else
  {
    uint64_t v214 = 0;
  }
  unint64_t v216 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 76, 0);
  unint64_t v730 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 77, 0);
  unint64_t v217 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 78, 0);
  unint64_t v766 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 79, 0);
  unint64_t v758 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 80, 0);
  unint64_t v218 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 81, 0);
  unint64_t v742 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 82, 0);
  unint64_t v718 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 83, 0);
  unint64_t v713 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 84, 0);
  unint64_t v728 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 92, 0);
  unint64_t v736 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 93, 0);
  unint64_t v726 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 94, 0);
  unint64_t v740 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 91, 0);
  unint64_t v747 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 90, 0);
  unint64_t v720 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 86, 0);
  unint64_t v738 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 85, 0);
  unint64_t v733 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 87, 0);
  unint64_t v724 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 89, 0);
  unint64_t v722 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 88, 0);
  unint64_t v716 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 72, 0);
  unint64_t v714 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(v778, 75, 0);
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage = 9;
  }
  uint64_t v750 = *(void *)(v51 + 624);
  if (v753)
  {
    if (v762)
    {
      [*(id *)(v762 + 48) usage];
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo>(v778, v762);
    }
    [*v745 memoryBarrierWithScope:1];
  }
  if (!AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage) {
    goto LABEL_860;
  }
  id v219 = *v745;
  uint64_t v220 = *((void *)*v745 + 11);
  *(void *)(v220 + 15584) = v772;
  *(void *)(*(void *)(v220 + 1936) + 592) = v772;
  *(void *)(v220 + 11712) = v769;
  *(void *)(v220 + 16624) |= 0x80uLL;
  *(_DWORD *)(v220 + 16656) |= 1u;
  int64x2_t v790 = (int64x2_t)(unint64_t)v214;
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    [v219 setBytes:&v790 length:16 atIndex:4];
    ++v790.i32[2];
  }
  if (v762 && *(unsigned char *)(v762 + 85))
  {
    unsigned int v221 = 4;
    if (*(unsigned char *)(v762 + 86))
    {
      int v222 = 0;
    }
    else
    {
      unsigned int v223 = *(_DWORD *)(v762 + 24) + 1023;
      if (v223 >= 0x1000) {
        unsigned int v221 = v223 >> 10;
      }
      else {
        unsigned int v221 = 4;
      }
      int v222 = 1;
    }
  }
  else
  {
    int v222 = 0;
    unsigned int v221 = 4;
  }
  uint64_t v224 = *(void *)(v47 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v216);
  *(_OWORD *)v802 = xmmword_242EA7FC0;
  v802[2] = (void *)1;
  *(void *)v793 = v221;
  *(int64x2_t *)&v793[8] = vdupq_n_s64(1uLL);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v47, 0x16u, (uint64_t *)v802, (int *)v793);
  if (*(_DWORD *)(v47 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
  }
  if (v224) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v224);
  }
  [*v745 memoryBarrierWithScope:1];
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage == 1) {
    goto LABEL_860;
  }
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
  {
    [*v745 setBytes:&v790 length:16 atIndex:4];
    ++v790.i32[2];
  }
  if (v762) {
    uint64_t v225 = *(void *)(v762 + 24);
  }
  else {
    uint64_t v225 = 0;
  }
  uint64_t v226 = *(void *)(v47 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v217);
  v802[0] = (void *)((v225 + 255) & 0xFFFFFFFFFFFFFF00);
  *(int64x2_t *)&v802[1] = vdupq_n_s64(1uLL);
  *(_OWORD *)v793 = xmmword_242EA85B0;
  *(void *)&v793[16] = 1;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v47, 22, (int *)v802, v793);
  if (*(_DWORD *)(v47 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
  }
  if (v226) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v226);
  }
  [*v745 memoryBarrierWithScope:1];
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage == 2) {
    goto LABEL_860;
  }
  uint64_t v227 = (uint64_t)v207 + v748;
  if (!v222)
  {
    if (!v762 || !*(unsigned char *)(v762 + 86)) {
      goto LABEL_284;
    }
    int v284 = *(_DWORD *)(v762 + 24);
    memset(v802, 0, sizeof(v802));
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateInline((uint64_t)v802, (uint64_t)*v745, 16, 1);
    uint64_t v285 = (v284 + 2047) >> 11;
    long long v286 = v802[0];
    uint64_t v287 = v802[1];
    uint64_t v288 = v802[2];
    bzero(v802[0], 0x10uLL);
    *long long v286 = *(void *)(v762 + 24);
    v286[2] = v285;
    uint64_t v289 = *((void *)*v745 + 11);
    *(void *)(v289 + 15592) = v287;
    *(void *)(*(void *)(v289 + 1936) + 600) = v287;
    *(void *)(v289 + 11720) = v288;
    *(void *)(v289 + 16624) |= 0x100uLL;
    *(_DWORD *)(v289 + 16656) |= 1u;
    LODWORD(v789[0]) = 0;
    int64x2_t v774 = vdupq_n_s64(1uLL);
    do
    {
      [*v745 setBytes:v789 length:4 atIndex:9];
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        [*v745 setBytes:&v790 length:16 atIndex:4];
        ++v790.i32[2];
      }
      uint64_t v290 = *(void *)(v47 + 1920);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v766);
      *(_OWORD *)v802 = xmmword_242EA8590;
      v802[2] = (void *)1;
      *(void *)v793 = v285;
      *(int64x2_t *)&v793[8] = v774;
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v47, 0x16u, (uint64_t *)v802, (int *)v793);
      if (*(_DWORD *)(v47 + 1880) == 1) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
      }
      if (v290) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v290);
      }
      [*v745 memoryBarrierWithScope:1];
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        [*v745 setBytes:&v790 length:16 atIndex:4];
        ++v790.i32[2];
      }
      uint64_t v291 = *(void *)(v47 + 1920);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v758);
      *(_OWORD *)v802 = xmmword_242EA8590;
      v802[2] = (void *)1;
      *(_OWORD *)v793 = xmmword_242EA85B0;
      *(void *)&v793[16] = 1;
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v47, 0x16u, (uint64_t *)v802, (int *)v793);
      if (*(_DWORD *)(v47 + 1880) == 1) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
      }
      if (v291) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v291);
      }
      [*v745 memoryBarrierWithScope:1];
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        [*v745 setBytes:&v790 length:16 atIndex:4];
        ++v790.i32[2];
      }
      uint64_t v292 = *(void *)(v47 + 1920);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v218);
      *(_OWORD *)v802 = xmmword_242EA8590;
      v802[2] = (void *)1;
      *(void *)v793 = v285;
      *(int64x2_t *)&v793[8] = vdupq_n_s64(1uLL);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v47, 0x16u, (uint64_t *)v802, (int *)v793);
      if (*(_DWORD *)(v47 + 1880) == 1) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
      }
      if (v292) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v292);
      }
      ++LODWORD(v789[0]);
    }
    while (LODWORD(v789[0]) < 4);
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify) {
      [**((id **)*v745 + 11) addCompletedHandler:&__block_literal_global_4175];
    }
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 3)
    {
LABEL_284:
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        [*v745 setBytes:&v790 length:16 atIndex:4];
        ++v790.i32[2];
      }
      [*v745 memoryBarrierWithScope:1];
      uint64_t v293 = *(void *)(v47 + 1920);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v742);
      *(_OWORD *)v802 = xmmword_242EA85C0;
      v802[2] = (void *)1;
      *(int64x2_t *)v793 = vdupq_n_s64(1uLL);
      *(void *)&v793[16] = 1;
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelCommonImpl(v47, 0x16u, (uint64_t *)v802, (int *)v793);
      if (*(_DWORD *)(v47 + 1880) == 1) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
      }
      if (v293) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v293);
      }
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 4)
      {
        [*v745 memoryBarrierWithScope:1];
        if (!v762 || !*(unsigned char *)(v762 + 85))
        {
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
          {
            [*v745 setBytes:&v790 length:16 atIndex:4];
            ++v790.i32[2];
          }
          AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v718, v750 + 168, v227);
          goto LABEL_602;
        }
        if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
        {
          [*v745 setBytes:&v790 length:16 atIndex:4];
          ++v790.i32[2];
        }
        AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v728, v750 + 24, v227);
        if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 5)
        {
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
          {
            [*v745 setBytes:&v790 length:16 atIndex:4];
            ++v790.i32[2];
          }
          [*v745 memoryBarrierWithScope:1];
          *(int64x2_t *)v802 = vdupq_n_s64(1uLL);
          v802[2] = (void *)1;
          *(_OWORD *)v793 = xmmword_242EA8590;
          *(void *)&v793[16] = 1;
          AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelInternal(v47, v736, (long long *)v802, (long long *)v793);
          goto LABEL_602;
        }
      }
    }
    goto LABEL_860;
  }
  if (v762)
  {
    unsigned int v228 = *(_DWORD *)(v762 + 24);
    unsigned int v229 = *(_DWORD *)(v762 + 116);
    unsigned int v230 = *(unsigned __int8 *)(v51 + 53);
    char v231 = [*(id *)(v762 + 48) usage];
    if (v228 >= 0x801)
    {
      if ((v231 & 2) != 0)
      {
        if (2048 - v229 < v228)
        {
          unsigned int v418 = 0;
          __n128 v233 = (unsigned char *)&unk_268D5A000;
          do
          {
            unsigned int v423 = (v228 - 1) | ((v228 - 1) >> 1) | (((v228 - 1) | ((v228 - 1) >> 1)) >> 2);
            unsigned int v424 = v423 | (v423 >> 4) | ((v423 | (v423 >> 4)) >> 8);
            unsigned int v425 = (v424 | HIWORD(v424)) + 1;
            unsigned int v426 = v425 >> 1;
            unsigned int v427 = v228 - (v425 >> 1);
            unsigned int v428 = v425 >> 4;
            if (v428 <= v229) {
              unsigned int v428 = v229;
            }
            v418 += v427 / v428;
            unsigned int v228 = v426;
          }
          while (v426 > 2048 - v229);
          goto LABEL_553;
        }
        unsigned int v418 = 0;
      }
      else
      {
        unsigned int v418 = (v228 + v229 - 1) / v229;
      }
      __n128 v233 = &unk_268D5A000;
LABEL_553:
      if (v418 >= v230) {
        unsigned int v232 = v230;
      }
      else {
        unsigned int v232 = v418;
      }
      goto LABEL_556;
    }
  }
  unsigned int v232 = 0;
  __n128 v233 = (unsigned char *)&unk_268D5A000;
LABEL_556:
  if (v233[1368])
  {
    [*v745 setBytes:&v790 length:16 atIndex:4];
    ++v790.i32[2];
  }
  if (v762) {
    uint64_t v515 = *(void *)(v762 + 24);
  }
  else {
    uint64_t v515 = 0;
  }
  uint64_t v516 = *(void *)(v47 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v747);
  v802[0] = (void *)((v515 + 1023) & 0xFFFFFFFFFFFFFC00);
  *(int64x2_t *)&v802[1] = vdupq_n_s64(1uLL);
  *(_OWORD *)v793 = xmmword_242EA8590;
  *(void *)&v793[16] = 1;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v47, 22, (int *)v802, v793);
  if (*(_DWORD *)(v47 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v47, 22);
  }
  if (v516) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v47, v516);
  }
  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 3)
  {
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      [*v745 setBytes:&v790 length:16 atIndex:4];
      ++v790.i32[2];
    }
    [*v745 memoryBarrierWithScope:1];
    AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v740, v750, v227);
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::maxBatchIterationCount = -1;
    }
    if (v232 >= AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::maxBatchIterationCount) {
      int v517 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::maxBatchIterationCount;
    }
    else {
      int v517 = v232;
    }
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::maxBatchIterationCount == -1) {
      unsigned int v518 = v232;
    }
    else {
      unsigned int v518 = v517;
    }
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut = -1;
    }
    if (!v518) {
      goto LABEL_597;
    }
    id v519 = *v745;
    if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
    {
      [v519 setBytes:&v790 length:16 atIndex:4];
      ++v790.i32[2];
      id v519 = *v745;
    }
    [v519 memoryBarrierWithScope:1];
    AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v738, v750 + 24, v227);
    unsigned int v520 = v518 - 1;
    if (v518 != 1
      || AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut != 1)
    {
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
      {
        [*v745 setBytes:&v790 length:16 atIndex:4];
        ++v790.i32[2];
      }
      [*v745 memoryBarrierWithScope:1];
      AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v733, v750 + 72, v227);
      if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut != 2
        || v518 != 1)
      {
        if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
        {
          [*v745 setBytes:&v790 length:16 atIndex:4];
          ++v790.i32[2];
        }
        [*v745 memoryBarrierWithScope:1];
        AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v724, v750 + 96, v227);
        if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut != 3
          || v518 != 1)
        {
          if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
          {
            [*v745 setBytes:&v790 length:16 atIndex:4];
            ++v790.i32[2];
          }
          [*v745 memoryBarrierWithScope:1];
          AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v722, v750 + 120, v227);
          if (v518 == 1)
          {
LABEL_597:
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v726, v750 + 192, v227);
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v736, v750 + 168, v227);
LABEL_602:
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 6)
            {
              [*v745 memoryBarrierWithScope:1];
              if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
              {
                [*v745 setBytes:&v790 length:16 atIndex:4];
                ++v790.i32[2];
              }
              AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v730, v750 + 264, v227);
              if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 7)
              {
                if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
                {
                  [*v745 setBytes:&v790 length:16 atIndex:4];
                  ++v790.i32[2];
                }
                [*v745 memoryBarrierWithScope:1];
                if (v762) {
                  int v524 = *(_DWORD *)(v762 + 136);
                }
                else {
                  int v524 = 0;
                }
                if (v524 == 3 || v524 == 0) {
                  uint64_t v526 = v716;
                }
                else {
                  uint64_t v526 = v714;
                }
                AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v526, v750 + 240, v227);
                [*v745 memoryBarrierWithScope:1];
                if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::earlyOutStage != 8)
                {
                  if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
                  {
                    [*v745 setBytes:&v790 length:16 atIndex:4];
                    ++v790.i32[2];
                  }
                  AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v713, v750 + 216, v227);
                }
              }
            }
            goto LABEL_860;
          }
          while (1)
          {
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v720, v750 + 48, v227);
            if (v520 == 1
              && !AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut)
            {
              break;
            }
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v738, v750 + 24, v227);
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut == 1
              && v520 == 1)
            {
              break;
            }
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v733, v750 + 72, v227);
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut == 2
              && v520 == 1)
            {
              break;
            }
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v724, v750 + 96, v227);
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::batchEarlyOut == 3
              && v520 == 1)
            {
              break;
            }
            if (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeBuildMediumBVH(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,AGXG17FamilyBuffer *,unsigned long,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&,unsigned int,unsigned long long)::verify)
            {
              [*v745 setBytes:&v790 length:16 atIndex:4];
              ++v790.i32[2];
            }
            [*v745 memoryBarrierWithScope:1];
            AGX::ComputeService<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsIndirectInternal(v47, 22, v722, v750 + 120, v227);
            if (!--v520) {
              goto LABEL_597;
            }
          }
        }
      }
    }
  }
LABEL_860:
  {
  }
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE26encodeBuildAndEncodeRiaBvhEPK13BVHDescriptorPNS5_16ScratchAllocatorEPKvyyP43AGXG17FamilyRayTracingAccelerationStructureP34MTLAccelerationStructureDescriptorP18AGXG17FamilyBufferm_block_invoke(uint64_t a1)
{
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodePrefixSum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7)
{
  if (a7)
  {
    unsigned int v7 = a7;
    if (a7 > 0x1000)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeSubPrefixSum(a1, a2, a3, a4, a5, a6, a7);
      memset(v22, 0, sizeof(v22));
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodePrefixSum(a1, a4, a5, a4, 4 * ((v7 + 4095) >> 12) + a5, v22);
      unsigned int v23 = v7;
      [*(id *)(a1 + 8) setBuffer:a2 offset:a3 atIndex:9];
      [*(id *)(a1 + 8) setBuffer:a4 offset:a5 atIndex:10];
      uint64_t v14 = *a6;
      uint64_t v15 = *(void **)(a1 + 8);
      if (*a6)
      {
        uint64_t v16 = v15[11];
        uint64_t v17 = a6[3];
        *(void *)(v16 + 15616) = v14;
        *(void *)(*(void *)(v16 + 1936) + 624) = v14;
        *(void *)(v16 + 11744) = v17;
        *(void *)(v16 + 16624) |= 0x800uLL;
        *(_DWORD *)(v16 + 16656) |= 1u;
      }
      else
      {
        [v15 setBytes:&v23 length:4 atIndex:11];
        unsigned int v7 = v23;
      }
      uint64_t v18 = ((((v7 + 3) >> 2) + 1023) & 0x7FFFFC00) - 1024;
      unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, 143, 0);
      uint64_t v20 = *(void *)(*(void *)(a1 + 8) + 88);
      uint64_t v21 = *(void *)(v20 + 1920);
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v20, Pipeline);
      *(void *)&v22[0] = v18;
      *(int64x2_t *)((char *)v22 + 8) = vdupq_n_s64(1uLL);
      long long v24 = xmmword_242EA8590;
      uint64_t v25 = 1;
      AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v20, 22, (int *)v22, &v24);
      if (*(_DWORD *)(v20 + 1880) == 1) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v20, 22);
      }
      if (v21) {
        AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v20, v21);
      }
    }
    else
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeSubPrefixSum(a1, a2, a3, 0, 0, a6, a7);
    }
  }
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeSubPrefixSum(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  int v22 = a7;
  [*(id *)(a1 + 8) setBuffer:a2 offset:a3 atIndex:9];
  if (a4) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = a2;
  }
  [*(id *)(a1 + 8) setBuffer:v12 offset:a5 atIndex:10];
  uint64_t v13 = *a6;
  uint64_t v14 = *(void **)(a1 + 8);
  if (*a6)
  {
    uint64_t v15 = v14[11];
    uint64_t v16 = a6[3];
    *(void *)(v15 + 15616) = v13;
    *(void *)(*(void *)(v15 + 1936) + 624) = v13;
    *(void *)(v15 + 11744) = v16;
    *(void *)(v15 + 16624) |= 0x800uLL;
    *(_DWORD *)(v15 + 16656) |= 1u;
  }
  else
  {
    [v14 setBytes:&v22 length:4 atIndex:11];
  }
  if (a4) {
    int v17 = 142;
  }
  else {
    int v17 = 141;
  }
  unint64_t Pipeline = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getOrCreatePipeline(a1, v17, 0);
  uint64_t v19 = *(void *)(*(void *)(a1 + 8) + 88);
  uint64_t v20 = (((v22 + 3) >> 2) + 1023) & 0x7FFFFC00;
  uint64_t v21 = *(void *)(v19 + 1920);
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v19, Pipeline);
  uint64_t v24 = 1;
  uint64_t v25 = v20;
  int64x2_t v26 = vdupq_n_s64(1uLL);
  long long v23 = xmmword_242EA8590;
  AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::executeKernelWithThreadsPerGridImpl(v19, 22, (int *)&v25, &v23);
  if (*(_DWORD *)(v19 + 1880) == 1) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::encodeBarrier(v19, 22);
  }
  if (v21) {
    AGX::ComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::setPipelineCommon(v19, v21);
  }
}

uint64_t AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 instanceCountBuffer];
  if (!result)
  {
    uint64_t v14 = *(void **)(*(void *)(a2 + 8) + 88);
    uint64_t v15 = v14[20];
    uint64_t v16 = v15 + 31;
    if ((unint64_t)(v15 + 31) > v14[19])
    {
      uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v14 + 2, 3, 0);
      uint64_t v15 = v14[20];
      if (!result) {
        goto LABEL_7;
      }
      uint64_t v16 = v15 + 31;
      if ((unint64_t)(v15 + 31) > v14[19]) {
        abort();
      }
    }
    v14[21] = v16;
LABEL_7:
    int v17 = (_DWORD *)((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v18 = (int)*MEMORY[0x263F4B188];
    *a1 = (char *)v17 + v14[22];
    a1[1] = v17;
    *int v17 = 0;
    v14[20] = v17 + 4;
    uint64_t v19 = *(void *)(v14[5] + 224) + v18;
    a1[2] = 4;
    a1[3] = v19;
    return result;
  }
  unsigned int v7 = (char *)result;
  uint64_t v8 = [a3 instanceCountBufferOffset];
  uint64_t v9 = [v7 contents];
  uint64_t v10 = [v7 gpuAddress];
  uint64_t v11 = [v7 length];
  uint64_t v12 = &v7[*MEMORY[0x263F4B188]];
  *a1 = v10 + v8;
  a1[1] = v8 + v9;
  a1[2] = v11;
  a1[3] = v12;
  uint64_t v13 = *(void **)(a2 + 8);

  return [v13 useResource:v7 usage:1];
}

float AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(_OWORD *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v96 = *MEMORY[0x263EF8340];
  *a1 = 0u;
  a1[1] = 0u;
  if (a4)
  {
    uint64_t v13 = *(void *)(a4 + 40);
    int v14 = [a3 isInstanceDescriptor];
    uint64_t v15 = (__int16 *)(a5 + 128);
    __int16 v16 = *(_WORD *)(a5 + 128) & 0xFFF7 | (8 * *(unsigned __int8 *)(a4 + 85));
    *(_WORD *)(a5 + 128) = v16;
    *(_WORD *)(a5 + 128) = v16 & 0xFFEF | (16 * *(unsigned __int8 *)(a4 + 86));
    *(_DWORD *)(a5 + 12) = *(void *)(a4 + 24);
    *(_WORD *)(a5 + 128) = (([*(id *)(a4 + 48) usage] & 1) << 6) | *(_WORD *)(a5 + 128) & 0xFFBF;
    __int16 v17 = ((unsigned __int16)[*(id *)(a4 + 48) usage] << 6) & 0x80;
    __int16 v18 = *(_WORD *)(a5 + 128);
  }
  else
  {
    int v14 = [a3 isInstanceDescriptor];
    LODWORD(v13) = 0;
    __int16 v17 = 0;
    uint64_t v15 = (__int16 *)(a5 + 128);
    __int16 v89 = *(_WORD *)(a5 + 128);
    *(_DWORD *)(a5 + 12) = 0;
    __int16 v18 = v89 & 0xFFA7;
  }
  *uint64_t v15 = v18 & 0xFF7F | v17;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceForceFastBuildReduction = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveForceFastBuildReduction = 0;
  }
  uint64_t v19 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceForceFastBuildReduction;
  if (!v14) {
    uint64_t v19 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveForceFastBuildReduction;
  }
  *(unsigned char *)(a5 + 132) = *v19;
  *(_DWORD *)(a5 + 296) = 0;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enableMediumCompaction = 1;
  }
  *uint64_t v15 = *v15 & 0xFEFF | (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enableMediumCompaction << 8);
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enableSmallBuildFastPath = 1;
  }
  __int16 v20 = *(_WORD *)(a5 + 128) & 0xFDFF | (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enableSmallBuildFastPath << 9);
  *(_WORD *)(a5 + 128) = v20;
  *(_DWORD *)(a5 + 16) = -[BVHDescriptor maxInnerNodeCount](a4);
  *(_DWORD *)(a5 + 20) = 0;
  *(_WORD *)(a5 + 128) = v20 & 0xFFDC;
  *(unsigned char *)(a5 + 52) = *(_DWORD *)(a6 + 768);
  if (a4)
  {
    *(_DWORD *)(a5 + 604) = *(_DWORD *)(a4 + 116);
    if (([*(id *)(a4 + 48) usage] & 2) != 0) {
      char v21 = 24;
    }
    else {
      char v21 = 32;
    }
  }
  else
  {
    *(_DWORD *)(a5 + 604) = 0;
    char v21 = 32;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceUpperSubtreeMaxDepth = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primUpperSubtreeMaxDepth = 0;
  }
  if (a4 && (*(_DWORD *)(a4 + 136) & 0xFFFFFFFE) == 6) {
    int v22 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceUpperSubtreeMaxDepth;
  }
  else {
    int v22 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primUpperSubtreeMaxDepth;
  }
  int v23 = *v22;
  if (!v23) {
    LOBYTE(v23) = v21;
  }
  *(unsigned char *)(a5 + 53) = v23;
  *(_WORD *)(a5 + 128) &= ~0x800u;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enable2LeafsPerBox = 1;
  }
  __int16 v24 = *(_WORD *)(a5 + 128) & 0xEFFF | (AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::enable2LeafsPerBox << 12);
  *(_WORD *)(a5 + 128) = v24;
  *(_WORD *)(a5 + 408) = 0;
  if (!a4)
  {
    __int16 v26 = 0;
    *(_WORD *)(a5 + 410) = 0;
    goto LABEL_28;
  }
  *(_WORD *)(a5 + 410) = *(void *)(a4 + 184);
  if ([*(id *)(a4 + 48) usage])
  {
    __int16 v24 = *v15;
    goto LABEL_27;
  }
  char v25 = [*(id *)(a4 + 48) usage];
  __int16 v24 = *v15;
  if ((v25 & 2) != 0)
  {
LABEL_27:
    __int16 v26 = 0x2000;
    goto LABEL_28;
  }
  __int16 v26 = 0;
LABEL_28:
  *uint64_t v15 = v24 & 0xDFFF | v26;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceDynamicMaxDepth = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveDynamicMaxDepth = 1;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::fastBuildDynamicMaxDepth = 1;
  }
  if (!a4) {
    goto LABEL_37;
  }
  if (([*(id *)(a4 + 48) usage] & 2) == 0
    || AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::fastBuildDynamicMaxDepth)
  {
    if ((*(_DWORD *)(a4 + 136) & 0xFFFFFFFE) == 6)
    {
      __int16 v28 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceDynamicMaxDepth;
LABEL_38:
      __int16 v27 = *v15 & 0xBFFF | (v28 << 14);
      goto LABEL_39;
    }
LABEL_37:
    __int16 v28 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveDynamicMaxDepth;
    goto LABEL_38;
  }
  __int16 v27 = *v15 & 0xBFFF;
LABEL_39:
  *uint64_t v15 = v27;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveForceFallback = 0;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceForceFallback = 0;
  }
  if (a4)
  {
    if ((*(_DWORD *)(a4 + 136) & 0xFFFFFFFE) == 6) {
      uint64_t v29 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::instanceForceFallback;
    }
    else {
      uint64_t v29 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveForceFallback;
    }
    __int16 v30 = *v29;
  }
  else
  {
    __int16 v30 = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::primitiveForceFallback;
  }
  *(_WORD *)(a5 + 128) = *(_WORD *)(a5 + 128) & 0x7FFF | (v30 << 15);
  *(_DWORD *)(a5 + 56) = 10;
  if (v14)
  {
    *(void *)(a5 + 44) = 8;
    *(_WORD *)(a5 + 40) = 128;
    if (([a3 usage] & 4) != 0) {
      int v31 = -1;
    }
    else {
      int v31 = 255;
    }
    *(_DWORD *)(a5 + 188) = v31;
    uint64_t v32 = objc_opt_class();
    LODWORD(v32) = [v32 isSubclassOfClass:objc_opt_class()];
    unsigned int v33 = (void *)[a3 instanceDescriptorBuffer];
    uint64_t v34 = [a3 instanceDescriptorBufferOffset];
    [v33 contents];
    uint64_t v35 = [v33 gpuAddress];
    [v33 length];
    [*(id *)(a2 + 8) useResource:v33 usage:1];
    *(void *)(a5 + 160) = v35 + v34;
    *(_DWORD *)(a5 + 184) = [a3 instanceDescriptorStride];
    *(_WORD *)(a5 + 128) = *(_WORD *)(a5 + 128) & 0xFFDF | (32
                                                          * ([a3 instanceTransformationMatrixLayout] == 1));
    if (v32)
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getInstanceCountBuilderBuffer<MTLIndirectInstanceAccelerationStructureDescriptor>(v95, a2, a3);
      *(void *)(a5 + 192) = *(void *)&v95[0];
      *(_DWORD *)(a5 + 12) = [a3 maxInstanceCount];
      uint64_t v36 = [a3 instanceDescriptorType];
      if (v36)
      {
        if (v36 == 3)
        {
          int v37 = 1;
        }
        else
        {
          if (v36 != 1) {
            goto LABEL_123;
          }
          int v37 = 2;
        }
      }
      else
      {
        int v37 = 0;
      }
      *(_DWORD *)(a5 + 200) = v37;
LABEL_123:
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost))
      {
        _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost = 1098907648;
        __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost))
      {
        _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost = 1065353216;
        __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost);
      }
      if (atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost, memory_order_acquire))
      {
        unint64_t v84 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost;
      }
      else
      {
        unint64_t v84 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost;
        if (__cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost))
        {
          _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost = 1098907648;
          __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost);
        }
      }
      uint64_t v85 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost;
      uint64_t v86 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI50MTLIndirectInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost;
      goto LABEL_136;
    }
    int v45 = (void *)[a3 instancedAccelerationStructures];
    unint64_t v46 = [v45 count];
    unint64_t v47 = v46;
    if (v46 <= 1) {
      uint64_t v48 = 1;
    }
    else {
      uint64_t v48 = v46;
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(v93, a2, 8 * v48, 0);
    if (v47)
    {
      uint64_t v49 = 0;
      uint64_t v50 = v93[1];
      do
      {
        uint64_t v51 = (void *)[v45 objectAtIndexedSubscript:v49];
        uint64_t v52 = objc_msgSend((id)objc_msgSend(v51, "buffer"), "gpuAddress");
        *(void *)(v50 + 8 * v49++) = [v51 bufferOffset] + v52;
      }
      while (v47 != v49);
    }
    uint64_t v53 = [v45 count];
    if ((unint64_t)[v45 count] < 2) {
      unint64_t v54 = 4;
    }
    else {
      unint64_t v54 = 4 * [v45 count];
    }
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation(v92, a2, v54, 0);
    if (v53)
    {
      uint64_t v55 = 0;
      uint64_t v56 = v92[1];
      do
      {
        *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)([v45 objectAtIndexedSubscript:v55] + 344);
        ++v55;
      }
      while (v53 != v55);
    }
    uint64_t v57 = v93[0];
    *(void *)(a5 + 168) = v92[0];
    *(void *)(a5 + 176) = v57;
    memset(v94, 0, sizeof(v94));
    for (uint64_t i = [v45 countByEnumeratingWithState:v94 objects:v95 count:16];
          i;
          uint64_t i = [v45 countByEnumeratingWithState:v94 objects:v95 count:16])
    {
      [*(id *)(a2 + 8) useResources:*((void *)&v94[0] + 1) count:i usage:1];
    }
    *(void *)(a5 + 192) = 0;
    *(_DWORD *)(a5 + 12) = [a3 instanceCount];
    uint64_t v59 = [a3 instanceDescriptorType];
    if (v59)
    {
      if (v59 == 3)
      {
        int v60 = 1;
      }
      else
      {
        if (v59 != 1) {
          goto LABEL_131;
        }
        int v60 = 2;
      }
    }
    else
    {
      int v60 = 0;
    }
    *(_DWORD *)(a5 + 200) = v60;
LABEL_131:
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost))
    {
      _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost = 1098907648;
      __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost, memory_order_acquire) & 1) == 0&& __cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost))
    {
      _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost = 1065353216;
      __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost);
    }
    if (atomic_load_explicit((atomic_uchar *volatile)&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost, memory_order_acquire))
    {
      unint64_t v84 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost;
    }
    else
    {
      unint64_t v84 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost;
      if (__cxa_guard_acquire(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost))
      {
        _ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost = 1098907648;
        __cxa_guard_release(&_ZGVZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E18sahBinningLeafCost);
      }
    }
    uint64_t v85 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E16sahUpperLeafCost;
    uint64_t v86 = &_ZZZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE22setSmallBVHBuildParamsEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorR19BVHSmallBuildParamsRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEENKUlPT_E_clI42MTLInstanceAccelerationStructureDescriptorEEDaSK_E11sahLeafCost;
    goto LABEL_136;
  }
  *(_DWORD *)(a5 + 48) = 1;
  if (objc_msgSend((id)objc_msgSend(a3, "geometryDescriptors"), "count")) {
    objc_msgSend((id)objc_msgSend(a3, "geometryDescriptors"), "objectAtIndexedSubscript:", 0);
  }
  if (!a4) {
    goto LABEL_83;
  }
  int v38 = 0;
  unsigned int v40 = *(_DWORD *)(a4 + 136);
  int v39 = *(_DWORD *)(a4 + 140);
  BOOL v41 = v39 == 2;
  if (v40 > 7) {
    goto LABEL_85;
  }
  int v42 = 1 << v40;
  if ((v42 & 0xD2) == 0)
  {
    if ((v42 & 9) == 0) {
      goto LABEL_85;
    }
    if (v39 == 2)
    {
      BOOL v41 = 1;
      __int16 v43 = 64;
      int v44 = 2;
      int v38 = 1;
      goto LABEL_84;
    }
LABEL_83:
    int v44 = 0;
    BOOL v41 = 0;
    int v38 = 1;
    __int16 v43 = 48;
    goto LABEL_84;
  }
  __int16 v43 = 48;
  int v44 = 4;
LABEL_84:
  *(_DWORD *)(a5 + 44) = v44;
  *(_WORD *)(a5 + 40) = v43;
LABEL_85:
  [(id)a4 primitiveMotion];
  AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBufferForPrivateAllocation((uint64_t *)v95, a2, [(id)a4 resourceBufferLength], 0);
  [(id)a4 setResourceBufferContents:*((void *)&v95[0] + 1) resourceBufferAddress:*(void *)&v95[0] instanceBoundingBoxBufferAddress:0 useResourcesOnEncoder:*(void *)(a2 + 8)];
  long long v61 = v95[1];
  *a1 = v95[0];
  a1[1] = v61;
  *(void *)(a5 + 64) = *(void *)a1;
  if (v41)
  {
    *(void *)(a5 + 72) = a7;
    *(_DWORD *)(a5 + 80) = 4 * v13;
    uint64_t v62 = *(void *)(a6 + 672);
    uint64_t v63 = v62 + 8 * *(int *)(a6 + 684);
    uint64_t v64 = (int)*MEMORY[0x263F4B188];
    if (*(_DWORD *)(a6 + 680) == 4) {
      uint64_t v65 = *(void *)(v62 + 16);
    }
    else {
      uint64_t v65 = 0;
    }
    uint64_t v66 = v65 + *(void *)(v63 + 40) + *(void *)(a6 + 688) + *(void *)(*(void *)(v63 + 24) + v64 + 8);
    if (a4) {
      uint64_t v67 = *(void *)(a4 + 24);
    }
    else {
      LODWORD(v67) = 0;
    }
    *(void *)(a5 + 88) = v66;
    *(_DWORD *)(a5 + 96) = v67;
    uint64_t v68 = *(void *)(a6 + 704);
    uint64_t v69 = v68 + 8 * *(int *)(a6 + 716);
    uint64_t v70 = *(void *)(*(void *)(v69 + 24) + v64 + 8);
    if (*(_DWORD *)(a6 + 712) == 4) {
      uint64_t v71 = *(void *)(v68 + 16);
    }
    else {
      uint64_t v71 = 0;
    }
    uint64_t v72 = v71 + *(void *)(v69 + 40) + *(void *)(a6 + 720) + v70;
    int v73 = *(_DWORD *)(a6 + 728) >> 3;
    *(void *)(a5 + 104) = v72;
    *(_DWORD *)(a5 + 112) = v73;
  }
  if (a4)
  {
    int v74 = *(_DWORD *)(a4 + 24);
    int v75 = *(_DWORD *)(a4 + 40);
  }
  else
  {
    int v74 = 0;
    int v75 = 0;
  }
  *(_DWORD *)(a5 + 12) = v74;
  *(_DWORD *)(a5 + 32) = v75;
  unsigned int v76 = *(_DWORD *)(a2 + 32);
  __int16 v77 = *(_WORD *)(a5 + 128);
  {
  }
  if (v76 <= 1) {
    int v38 = 0;
  }
  if ((v77 & 0x40) != 0
  {
  }
  if (v38) {
    __int16 v78 = 2;
  }
  else {
    __int16 v78 = 0;
  }
  *uint64_t v15 = v78 | v38 | *v15 & 0xFFFC;
  if (!v38) {
    goto LABEL_115;
  }
  if ([(id)a4 buildAlgorithm] != 2)
  {
    {
      uint64_t v79 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
      goto LABEL_111;
    }
    uint64_t v79 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
      goto LABEL_111;
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf = 1052602532;
LABEL_195:
    __cxa_guard_release(v90);
    goto LABEL_111;
  }
  {
    uint64_t v79 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
      goto LABEL_111;
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf = 1052938076;
    goto LABEL_195;
  }
  uint64_t v79 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSmallBuilderQTBsPerLeaf(BVHDescriptor const*)::qtbsPerLeaf;
LABEL_111:
  float v80 = *(float *)v79;
  *(_DWORD *)(a5 + 136) = *v79;
  unsigned int v81 = *(_DWORD *)(a5 + 12);
  float v82 = (float)v81;
  unsigned int v83 = (v81 + 3) >> 2;
  if (v83 <= (float)((float)(v80 * v82) + 0.5)) {
    unsigned int v83 = (float)((float)(v80 * v82) + 0.5);
  }
  *(_DWORD *)(a5 + 20) = v83;
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::qtbEncodingOverride = -1;
  }
  *(unsigned char *)(a5 + 144) = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::qtbEncodingOverride;
  *(void *)(a5 + 120) = *(void *)(*(void *)(a2 + 16) + (int)*MEMORY[0x263F4B188] + 8);
  objc_msgSend(*(id *)(a2 + 8), "useResource:usage:");
LABEL_115:
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahLeafCost = 1098907648;
  }
  {
    AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahUpperLeafCost = AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahLeafCost;
  }
  {
    unint64_t v84 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahBinningLeafCost;
  }
  else
  {
    unint64_t v84 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahBinningLeafCost;
    {
      AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahBinningLeafCost = 1098907648;
    }
  }
  uint64_t v85 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahUpperLeafCost;
  uint64_t v86 = &AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setSmallBVHBuildParams(MTLAccelerationStructureDescriptor *,BVHDescriptor const*,BVHSmallBuildParams &,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo const&,AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::BuilderBuffer const&)::sahLeafCost;
LABEL_136:
  int v87 = *v85;
  *(_DWORD *)(a5 + 148) = *v86;
  *(_DWORD *)(a5 + 152) = v87;
  float result = *(float *)v84;
  *(_DWORD *)(a5 + 156) = *v84;
  return result;
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20encodeBuildMediumBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXG17FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke(uint64_t a1)
{
}

void AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeTrianglePairingForBvh<AGX::RayTracingGPUBuilderGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PLOCScratchInfo>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(void *)(a2 + 40)) {
      operator new[]();
    }
  }
}

void ___ZN3AGX24RayTracingGPUBuilderGen1INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE19encodeBuildSmallBVHEP34MTLAccelerationStructureDescriptorPK13BVHDescriptorP18AGXG17FamilyBuffermRKNS5_15PLOCScratchInfoERKNS5_13BuilderBufferEjy_block_invoke(uint64_t a1)
{
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, long long *a2)
{
  uint64_t v5 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((void *)a1, &v15);
  if (v6)
  {
    unsigned int v7 = v6;
    os_unfair_lock_unlock(v5);
    return (void *)v7[5];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 72);
    if (!v9)
    {
      int v14 = (_Unwind_Exception *)std::__throw_bad_function_call[abi:nn180100]();

      _Unwind_Resume(v14);
    }
    uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v9 + 48))(v9, a2);
    id v10 = v8;
    uint64_t v11 = [v8 threadExecutionWidth];
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    __int16 v17 = &v15;
    uint64_t v12 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>((uint64_t *)a1, &v15, &v17);
    v12[5] = v10;
    v12[6] = v11;
    os_unfair_lock_unlock(v5);
  }
  return v8;
}

void *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>(void *a1, void *a2)
{
  unsigned int v4 = _MTLHashState();
  unint64_t v5 = a1[1];
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v5 <= v4) {
      unint64_t v8 = v4 % v5;
    }
  }
  else
  {
    unint64_t v8 = (v5 - 1) & v4;
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  float result = (void *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      unint64_t v11 = v5 - 1;
      while (1)
      {
        uint64_t v17 = result[1];
        if (v17 == v6)
        {
          if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2]) {
            return result;
          }
        }
        else if ((v17 & v11) != v8)
        {
          return 0;
        }
        float result = (void *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v14 == v6)
      {
        if (result[2] == *a2 && result[3] == a2[1] && result[4] == a2[2]) {
          return result;
        }
      }
      else
      {
        if (v14 >= v5) {
          v14 %= v5;
        }
        if (v14 != v8) {
          return 0;
        }
      }
      float result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>(uint64_t *a1, void *a2, _OWORD **a3)
{
  unsigned int v7 = _MTLHashState();
  unint64_t v8 = v7;
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v9 <= v7) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v12[1];
            if (v18 == v7)
            {
              if (v12[2] == *a2 && v12[3] == a2[1] && v12[4] == a2[2]) {
                return v12;
              }
            }
            else if ((v18 & (v9 - 1)) != v3)
            {
              goto LABEL_34;
            }
            uint64_t v12 = (void *)*v12;
            if (!v12) {
              goto LABEL_34;
            }
          }
        }
        do
        {
          unint64_t v15 = v12[1];
          if (v15 == v7)
          {
            if (v12[2] == *a2 && v12[3] == a2[1] && v12[4] == a2[2]) {
              return v12;
            }
          }
          else
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_34:
  uint64_t v19 = a1 + 2;
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  uint64_t v20 = *((void *)*a3 + 2);
  *((_OWORD *)v12 + 1) = **a3;
  v12[5] = 0;
  v12[6] = 0;
  v12[4] = v20;
  float v21 = (float)(unint64_t)(a1[3] + 1);
  float v22 = *((float *)a1 + 8);
  if (v9 && (float)(v22 * (float)v9) >= v21)
  {
    unint64_t v8 = v3;
    goto LABEL_84;
  }
  BOOL v23 = 1;
  if (v9 >= 3) {
    BOOL v23 = (v9 & (v9 - 1)) != 0;
  }
  unint64_t v24 = v23 | (2 * v9);
  unint64_t v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25) {
    size_t prime = v25;
  }
  else {
    size_t prime = v24;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v9 = a1[1];
  }
  if (prime > v9)
  {
LABEL_47:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    __int16 v27 = operator new(8 * prime);
    __int16 v28 = (void *)*a1;
    *a1 = (uint64_t)v27;
    if (v28) {
      operator delete(v28);
    }
    uint64_t v29 = 0;
    a1[1] = prime;
    do
      *(void *)(*a1 + 8 * v29++) = 0;
    while (prime != v29);
    __int16 v30 = (void *)*v19;
    if (!*v19) {
      goto LABEL_71;
    }
    size_t v31 = v30[1];
    size_t v32 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v33 = v31 & v32;
      *(void *)(*a1 + 8 * v33) = v19;
      for (uint64_t i = (void *)*v30; *v30; uint64_t i = (void *)*v30)
      {
        size_t v35 = i[1] & v32;
        if (v35 == v33)
        {
          __int16 v30 = i;
        }
        else if (*(void *)(*a1 + 8 * v35))
        {
          *__int16 v30 = *i;
          uint64_t v36 = 8 * v35;
          void *i = **(void **)(*a1 + v36);
          **(void **)(*a1 + v36) = i;
        }
        else
        {
          *(void *)(*a1 + 8 * v35) = v30;
          __int16 v30 = i;
          size_t v33 = v35;
        }
      }
LABEL_71:
      unint64_t v9 = prime;
      goto LABEL_72;
    }
    if (v31 >= prime) {
      v31 %= prime;
    }
    *(void *)(*a1 + 8 * v31) = v19;
    unsigned int v40 = (void *)*v30;
    if (!*v30) {
      goto LABEL_71;
    }
    while (1)
    {
      size_t v42 = v40[1];
      if (v42 >= prime) {
        v42 %= prime;
      }
      if (v42 != v31)
      {
        if (!*(void *)(*a1 + 8 * v42))
        {
          *(void *)(*a1 + 8 * v42) = v30;
          goto LABEL_76;
        }
        *__int16 v30 = *v40;
        uint64_t v41 = 8 * v42;
        *unsigned int v40 = **(void **)(*a1 + v41);
        **(void **)(*a1 + v41) = v40;
        unsigned int v40 = v30;
      }
      size_t v42 = v31;
LABEL_76:
      __int16 v30 = v40;
      unsigned int v40 = (void *)*v40;
      size_t v31 = v42;
      if (!v40) {
        goto LABEL_71;
      }
    }
  }
  if (prime >= v9) {
    goto LABEL_72;
  }
  unint64_t v37 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
  if (v9 < 3 || (uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v38.i16[0] = vaddlv_u8(v38), v38.u32[0] > 1uLL))
  {
    unint64_t v37 = std::__next_prime(v37);
  }
  else
  {
    uint64_t v39 = 1 << -(char)__clz(v37 - 1);
    if (v37 >= 2) {
      unint64_t v37 = v39;
    }
  }
  if (prime <= v37) {
    size_t prime = v37;
  }
  if (prime < v9)
  {
    if (!prime)
    {
      unint64_t v47 = (void *)*a1;
      *a1 = 0;
      if (v47) {
        operator delete(v47);
      }
      unint64_t v9 = 0;
      a1[1] = 0;
      goto LABEL_72;
    }
    goto LABEL_47;
  }
  unint64_t v9 = a1[1];
LABEL_72:
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8) {
      v8 %= v9;
    }
  }
  else
  {
    unint64_t v8 = (v9 - 1) & v8;
  }
LABEL_84:
  uint64_t v43 = *a1;
  int v44 = *(void **)(*a1 + 8 * v8);
  if (v44)
  {
    *uint64_t v12 = *v44;
LABEL_92:
    *int v44 = v12;
    goto LABEL_93;
  }
  *uint64_t v12 = *v19;
  *uint64_t v19 = v12;
  *(void *)(v43 + 8 * v8) = v19;
  if (*v12)
  {
    unint64_t v45 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v45 >= v9) {
        v45 %= v9;
      }
    }
    else
    {
      v45 &= v9 - 1;
    }
    int v44 = (void *)(*a1 + 8 * v45);
    goto LABEL_92;
  }
LABEL_93:
  ++a1[3];
  return v12;
}

void sub_242B3E184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>>::~unique_ptr[abi:nn180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,void *>>>>::~unique_ptr[abi:nn180100](uint64_t a1)
{
  int v2 = *(id **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {

    }
    operator delete(v2);
  }
  return a1;
}

void *PipelineCache<PipelineKey>::getPipeline(uint64_t a1, long long *a2, void *a3)
{
  unsigned int v7 = (os_unfair_lock_s *)(a1 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  unint64_t v8 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::find<PipelineCache<PipelineKey>::HashKey>((void *)a1, &v17);
  if (v8)
  {
    unint64_t v9 = v8;
    os_unfair_lock_unlock(v7);
    if (a3) {
      *a3 = v9[6];
    }
    return (void *)v9[5];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 72);
    if (!v11)
    {
      uint64_t v16 = (_Unwind_Exception *)std::__throw_bad_function_call[abi:nn180100]();

      _Unwind_Resume(v16);
    }
    uint8x8_t v10 = (void *)(*(uint64_t (**)(uint64_t, long long *))(*(void *)v11 + 48))(v11, a2);
    id v12 = v10;
    uint64_t v13 = [v10 threadExecutionWidth];
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    uint64_t v19 = &v17;
    unint64_t v14 = std::__hash_table<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::__unordered_map_hasher<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,PipelineCache<PipelineKey>::Hasher,std::equal_to<PipelineCache<PipelineKey>::HashKey>,true>,std::__unordered_map_equal<PipelineCache<PipelineKey>::HashKey,std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>,std::equal_to<PipelineCache<PipelineKey>::HashKey>,PipelineCache<PipelineKey>::Hasher,true>,std::allocator<std::__hash_value_type<PipelineCache<PipelineKey>::HashKey,PipelineValue>>>::__emplace_unique_key_args<PipelineCache<PipelineKey>::HashKey,std::piecewise_construct_t const&,std::tuple<PipelineCache<PipelineKey>::HashKey&&>,std::tuple<>>((uint64_t *)a1, &v17, &v19);
    v14[5] = v12;
    v14[6] = v13;
    os_unfair_lock_unlock(v7);
    if (a3) {
      *a3 = [v10 threadExecutionWidth];
    }
  }
  return v10;
}

void sub_242B42820(_Unwind_Exception *a1)
{
}

void sub_242B43248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_unfair_lock_t lock)
{
}

void sub_242B43264(_Unwind_Exception *a1)
{
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v4);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v3);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v2);
  MEMORY[0x24566ED90](v1, 0x10B0C404C6F8B55);
  _Unwind_Resume(a1);
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramSamplersWithLODOverrides(uint64_t result, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int a5, unsigned int a6)
{
  if (a6)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void **)(result + 8);
    for (uint64_t i = a6; i; --i)
    {
      if (*(void *)a2)
      {
        unsigned int v14 = *a4;
        unsigned int v15 = *a3;
        uint64_t v16 = v11[182];
        uint64_t v17 = *(void *)(v16 + 808);
        uint64_t v18 = *(void *)a2 + 48;
        long long v20 = *(_OWORD *)(*(void *)a2 + 64);
        long long v19 = *(_OWORD *)(*(void *)a2 + 80);
        v26[0] = *(_OWORD *)v18;
        v26[1] = v20;
        v26[2] = v19;
        if (*(char *)(v18 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 48), *(void *)(v18 + 56));
        }
        else
        {
          long long v21 = *(_OWORD *)(v18 + 48);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v18 + 64);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
        }
        *((void *)&v26[0] + 1) = __PAIR64__(v14, v15);
        Sampler = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateSampler(v17, (uint64_t)v26, v16, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        float result = *(void *)(*(void *)(v10 + 8) + 1480);
        if (result) {
LABEL_16:
        }
          float result = MTLResourceListAddResource();
      }
      else
      {
        Sampler = 0;
        float result = v11[185];
        if (result) {
          goto LABEL_16;
        }
      }
      if (Sampler) {
        uint64_t v23 = *(void *)&Sampler->_impl.desc.label.__r_.var0;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = 8 * a5;
      *(void *)(*(void *)(v10 + 14464) + v24 + 9784) = v23;
      uint64_t v25 = *(void *)(v10 + 14464);
      if ((~*(void *)(v25 + v24 + 9784) & 0x6000000000000000) == 0)
      {
        *(_OWORD *)(v25 + 16 * a5 + 9912) = *(_OWORD *)&Sampler->_impl.desc.label.var0;
LABEL_4:
        p_impl = &Sampler->_impl;
        if (LODWORD(Sampler[1].super._device)) {
          p_impl = (Sampler *)LODWORD(Sampler[1].super._device);
        }
        goto LABEL_6;
      }
      if (Sampler) {
        goto LABEL_4;
      }
      p_impl = 0;
LABEL_6:
      *(void *)(v10 + 8 * a5 + 22736) = p_impl;
      uint64_t v11 = *(void **)(v10 + 8);
      v11[(a5 > 0x3F) + 11289] |= 1 << a5;
      ++a3;
      v11[11309] |= 0x4000000uLL;
      ++a4;
      ++a5;
      a2 += 8;
    }
  }
  return result;
}

void sub_242B43AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramSamplerWithLODOverride(uint64_t a1, uint64_t a2, unsigned int a3, float a4, float a5)
{
  if (a2)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 1456);
    uint64_t v10 = *(void *)(v9 + 808);
    long long v11 = *(_OWORD *)(a2 + 64);
    v20[0] = *(_OWORD *)(a2 + 48);
    v20[1] = v11;
    v20[2] = *(_OWORD *)(a2 + 80);
    if (*(char *)(a2 + 119) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
    }
    else {
      std::string __p = *(std::string *)(a2 + 96);
    }
    *((void *)&v20[0] + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
    Sampler = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateSampler(v10, (uint64_t)v20, v9, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    Sampler = 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 1480);
  if (result) {
    uint64_t result = MTLResourceListAddResource();
  }
  if (Sampler) {
    uint64_t v14 = *(void *)&Sampler->_impl.desc.label.__r_.var0;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 8 * a3;
  *(void *)(*(void *)(a1 + 14464) + v15 + 9784) = v14;
  uint64_t v16 = *(void *)(a1 + 14464);
  if ((~*(void *)(v16 + v15 + 9784) & 0x6000000000000000) != 0)
  {
    uint64_t v17 = a1 + 14472;
    if (!Sampler)
    {
      p_impl = 0;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)(v16 + 16 * a3 + 9912) = *(_OWORD *)&Sampler->_impl.desc.label.var0;
    uint64_t v17 = a1 + 14472;
  }
  p_impl = &Sampler->_impl;
  if (LODWORD(Sampler[1].super._device)) {
    p_impl = (Sampler *)LODWORD(Sampler[1].super._device);
  }
LABEL_18:
  *(void *)(v17 + 8 * a3 + 8264) = p_impl;
  uint64_t v19 = *(void *)(a1 + 8) + 90088;
  *(void *)(v19 + 8 * (a3 > 0x3F) + 224) |= 1 << a3;
  *(void *)(v19 + 384) |= 0x4000000uLL;
  return result;
}

void sub_242B43D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTexture<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v9 = *(void *)(a2 + 536);
    uint64_t v11 = *(void *)(v9 + 496);
    uint64_t v10 = *(void *)(v9 + 504);
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v7 + 1592), a2, 9u, a3);
    int v12 = 3 * a3;
    uint64_t v13 = (int *)MEMORY[0x263F4B188];
    a4[3 * a3 + 1214] = a2 + (int)*MEMORY[0x263F4B188];
    if (v11) {
      uint64_t v14 = v11 + *v13;
    }
    else {
      uint64_t v14 = 0;
    }
    a4[(v12 + 1) + 1214] = v14;
    if (v10) {
      uint64_t v28 = v10 + *v13;
    }
    else {
      uint64_t v28 = 0;
    }
    a4[(v12 + 2) + 1214] = v28;
    uint64_t v15 = a3;
    uint64_t v29 = (uint64_t)&a4[7 * a3 + 1];
    long long v30 = *(_OWORD *)(v9 + 72);
    long long v31 = *(_OWORD *)(v9 + 88);
    long long v32 = *(_OWORD *)(v9 + 104);
    *(void *)(v29 + 64) = *(void *)(v9 + 120);
    *(_OWORD *)(v29 + 32) = v31;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)(v29 + 16) = v30;
    BOOL v19 = a3 > 0x3F;
    uint64_t v18 = 1 << a3;
    a4[v19 + 899] |= 1 << a3;
    uint64_t v33 = *(void *)(v9 + 488);
    if (v33) {
      uint64_t v33 = *(_DWORD *)(v33 + 1080) != 0;
    }
    a4[v19 + 901] = a4[v19 + 901] & ~v18 | (v33 << (a3 & 0x3F));
    uint64_t v34 = (_OWORD *)(*a4 + 32 * a3 + 1592);
    long long v35 = *(_OWORD *)(v9 + 416);
    *uint64_t v34 = *(_OWORD *)(v9 + 400);
    v34[1] = v35;
    uint64_t v36 = (_OWORD *)(*a4 + 32 * (a3 + 128) + 1592);
    long long v37 = *(_OWORD *)(v9 + 448);
    *uint64_t v36 = *(_OWORD *)(v9 + 432);
    v36[1] = v37;
    if (*(void *)(*(void *)(a1 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    uint64_t v17 = *(unsigned int *)(*(void *)(a2 + 536) + 120);
  }
  else
  {
    a4[3 * a3 + 1214] = 0;
    a4[3 * a3 + 1215] = 0;
    a4[3 * a3 + 1216] = 0;
    uint64_t v15 = a3;
    uint64_t v16 = (uint64_t)&a4[7 * a3 + 1];
    bzero((void *)(v16 + 16), 0x38uLL);
    uint64_t v17 = 0;
    *(_DWORD *)(v16 + 64) = 0;
    uint64_t v18 = 1 << a3;
    BOOL v19 = a3 > 0x3F;
    uint64_t v20 = (uint64_t)&a4[v19 + 1];
    *(void *)(v20 + 7184) &= ~(1 << a3);
    *(void *)(v20 + 7200) &= ~(1 << a3);
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 8) + 1456) + 808);
    long long v22 = *(_OWORD *)(v21 + 7312);
    long long v23 = *(_OWORD *)(v21 + 7328);
    uint64_t v24 = (_OWORD *)(*a4 + 32 * a3 + 1592);
    *uint64_t v24 = v22;
    v24[1] = v23;
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 8) + 1456) + 808);
    __int16 v26 = (_OWORD *)(*a4 + 32 * (a3 + 128) + 1592);
    long long v27 = *(_OWORD *)(v25 + 7360);
    *__int16 v26 = *(_OWORD *)(v25 + 7344);
    v26[1] = v27;
  }
  a4[v15 + 906] = v17;
  uint64_t v38 = v7 + 8 * v19 + 90088;
  *(void *)(v38 + 208) = *(void *)(v7 + 8 * v19 + 90296) | v18;
  *(void *)(v38 + 256) = *(void *)(v7 + 8 * v19 + 90344) | v18;
  *(void *)(v7 + 90472) |= 0x14000000uLL;
  *(void *)(v7 + 90360) |= 0x10uLL;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  uint64_t v6 = result;
  if (a4 <= 0x22) {
    a5[a4 + 1598] = 0;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (a2)
  {
    unint64_t v8 = (int *)MEMORY[0x263F4B188];
    uint64_t v9 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v10 = *(void *)(v9 + 8);
    uint64_t v13 = v9 + 16;
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v13 + 8);
    uint64_t v14 = a4;
    uint64_t v15 = &a5[v14];
    v15[1633] = v10;
    v15[1698] = v12;
    uint64_t v16 = (void *)(*a5 + v14 * 8);
    v16[67] = v10 + a3;
    v16[132] = (v11 & 0xFFFFFFFFFFFFFFLL) - a3;
    *uint64_t v16 = v12 + a3;
    uint64_t v17 = (_DWORD *)a5 + a4;
    v17[2103] = v11;
    v17[2168] = v11;
    v17[2233] = v10 >> 8;
    v15[1149] = a2 + *v8;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), a2, 7u, a4);
    uint64_t result = *(void *)(*(void *)(v6 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v18 = a4;
    BOOL v19 = &a5[v18];
    v19[1149] = 0;
    uint64_t v20 = (void *)(*a5 + v18 * 8);
    v20[67] = 0;
    v20[132] = 0;
    *uint64_t v20 = 0;
    v19[1633] = 0;
    v19[1698] = 0;
    uint64_t v21 = (char *)a5 + 4 * a4;
    *((_DWORD *)v21 + 2103) = 0;
    *((_DWORD *)v21 + 2168) = 0;
  }
  uint64_t v22 = v7 + 90088 + 8 * (a4 > 0x3F);
  *(void *)(v22 + 192) |= 1 << a4;
  *(void *)(v22 + 240) |= 1 << a4;
  *(void *)(v7 + 90472) |= 0xC000000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBufferOffset(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v4 = 8 * a3;
  uint64_t v5 = result + 14464 + v4;
  uint64_t v6 = *(void *)(v5 + 13064);
  uint64_t v7 = *(void *)(v5 + 13584);
  unint64_t v8 = (void *)(*(void *)(result + 14464) + v4);
  uint64_t v9 = v8[67];
  uint64_t v10 = v8[132];
  uint64_t v11 = v6 + a2;
  v8[67] = v11;
  v8[132] = v9 - v11 + v10;
  *unint64_t v8 = v7 + a2;
  *(_DWORD *)(result + 4 * a3 + 23136) = *(_DWORD *)(result + 4 * a3 + 22876);
  *(void *)(v3 + 90088 + 8 * (a3 > 0x3F) + 192) |= 1 << a3;
  *(void *)(v3 + 90472) |= 0x4000000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramSamplersWithLODOverrides(uint64_t result, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int a5, unsigned int a6)
{
  if (a6)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void **)(result + 8);
    for (uint64_t i = a6; i; --i)
    {
      if (*(void *)a2)
      {
        unsigned int v14 = *a4;
        unsigned int v15 = *a3;
        uint64_t v16 = v11[182];
        uint64_t v17 = *(void *)(v16 + 808);
        uint64_t v18 = *(void *)a2 + 48;
        long long v20 = *(_OWORD *)(*(void *)a2 + 64);
        long long v19 = *(_OWORD *)(*(void *)a2 + 80);
        v26[0] = *(_OWORD *)v18;
        v26[1] = v20;
        v26[2] = v19;
        if (*(char *)(v18 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v18 + 48), *(void *)(v18 + 56));
        }
        else
        {
          long long v21 = *(_OWORD *)(v18 + 48);
          __p.__r_.__value_.__r.__words[2] = *(void *)(v18 + 64);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
        }
        *((void *)&v26[0] + 1) = __PAIR64__(v14, v15);
        Sampler = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateSampler(v17, (uint64_t)v26, v16, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t result = *(void *)(*(void *)(v10 + 8) + 1480);
        if (result) {
LABEL_16:
        }
          uint64_t result = MTLResourceListAddResource();
      }
      else
      {
        Sampler = 0;
        uint64_t result = v11[185];
        if (result) {
          goto LABEL_16;
        }
      }
      if (Sampler) {
        uint64_t v23 = *(void *)&Sampler->_impl.desc.label.__r_.var0;
      }
      else {
        uint64_t v23 = 0;
      }
      uint64_t v24 = 8 * a5;
      *(void *)(*(void *)(v10 + 80) + v24 + 9784) = v23;
      uint64_t v25 = *(void *)(v10 + 80);
      if ((~*(void *)(v25 + v24 + 9784) & 0x6000000000000000) == 0)
      {
        *(_OWORD *)(v25 + 16 * a5 + 9912) = *(_OWORD *)&Sampler->_impl.desc.label.var0;
LABEL_4:
        p_impl = &Sampler->_impl;
        if (LODWORD(Sampler[1].super._device)) {
          p_impl = (Sampler *)LODWORD(Sampler[1].super._device);
        }
        goto LABEL_6;
      }
      if (Sampler) {
        goto LABEL_4;
      }
      p_impl = 0;
LABEL_6:
      *(void *)(v10 + 8 * a5 + 8336) = p_impl;
      uint64_t v11 = *(void **)(v10 + 8);
      v11[(a5 > 0x3F) + 11277] |= 1 << a5;
      ++a3;
      v11[11309] |= 0x10000uLL;
      ++a4;
      ++a5;
      a2 += 8;
    }
  }
  return result;
}

void sub_242B44E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramSamplerWithLODOverride(uint64_t a1, uint64_t a2, unsigned int a3, float a4, float a5)
{
  if (a2)
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 1456);
    uint64_t v10 = *(void *)(v9 + 808);
    long long v11 = *(_OWORD *)(a2 + 64);
    v20[0] = *(_OWORD *)(a2 + 48);
    v20[1] = v11;
    v20[2] = *(_OWORD *)(a2 + 80);
    if (*(char *)(a2 + 119) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
    }
    else {
      std::string __p = *(std::string *)(a2 + 96);
    }
    *((void *)&v20[0] + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
    Sampler = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateSampler(v10, (uint64_t)v20, v9, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    Sampler = 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 1480);
  if (result) {
    uint64_t result = MTLResourceListAddResource();
  }
  if (Sampler) {
    uint64_t v14 = *(void *)&Sampler->_impl.desc.label.__r_.var0;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 8 * a3;
  *(void *)(*(void *)(a1 + 80) + v15 + 9784) = v14;
  uint64_t v16 = *(void *)(a1 + 80);
  if ((~*(void *)(v16 + v15 + 9784) & 0x6000000000000000) != 0)
  {
    uint64_t v17 = a1 + 88;
    if (!Sampler)
    {
      p_impl = 0;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)(v16 + 16 * a3 + 9912) = *(_OWORD *)&Sampler->_impl.desc.label.var0;
    uint64_t v17 = a1 + 88;
  }
  p_impl = &Sampler->_impl;
  if (LODWORD(Sampler[1].super._device)) {
    p_impl = (Sampler *)LODWORD(Sampler[1].super._device);
  }
LABEL_18:
  *(void *)(v17 + 8 * a3 + 8248) = p_impl;
  uint64_t v19 = *(void *)(a1 + 8) + 90088;
  *(void *)(v19 + 8 * (a3 > 0x3F) + 128) |= 1 << a3;
  *(void *)(v19 + 384) |= 0x10000uLL;
  return result;
}

void sub_242B450E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTexture<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v9 = *(void *)(a2 + 536);
    uint64_t v11 = *(void *)(v9 + 496);
    uint64_t v10 = *(void *)(v9 + 504);
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v7 + 1592), a2, 8u, a3);
    int v12 = 3 * a3;
    uint64_t v13 = (int *)MEMORY[0x263F4B188];
    a4[3 * a3 + 1231] = a2 + (int)*MEMORY[0x263F4B188];
    if (v11) {
      uint64_t v14 = v11 + *v13;
    }
    else {
      uint64_t v14 = 0;
    }
    a4[(v12 + 1) + 1231] = v14;
    if (v10) {
      uint64_t v28 = v10 + *v13;
    }
    else {
      uint64_t v28 = 0;
    }
    a4[(v12 + 2) + 1231] = v28;
    uint64_t v15 = a3;
    uint64_t v29 = (uint64_t)&a4[7 * a3 + 1];
    long long v30 = *(_OWORD *)(v9 + 72);
    long long v31 = *(_OWORD *)(v9 + 88);
    long long v32 = *(_OWORD *)(v9 + 104);
    *(void *)(v29 + 64) = *(void *)(v9 + 120);
    *(_OWORD *)(v29 + 32) = v31;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)(v29 + 16) = v30;
    BOOL v19 = a3 > 0x3F;
    uint64_t v18 = 1 << a3;
    a4[v19 + 899] |= 1 << a3;
    uint64_t v33 = *(void *)(v9 + 488);
    if (v33) {
      uint64_t v33 = *(_DWORD *)(v33 + 1080) != 0;
    }
    a4[v19 + 901] = a4[v19 + 901] & ~v18 | (v33 << (a3 & 0x3F));
    uint64_t v34 = (_OWORD *)(*a4 + 32 * a3 + 1592);
    long long v35 = *(_OWORD *)(v9 + 416);
    *uint64_t v34 = *(_OWORD *)(v9 + 400);
    v34[1] = v35;
    uint64_t v36 = (_OWORD *)(*a4 + 32 * (a3 + 128) + 1592);
    long long v37 = *(_OWORD *)(v9 + 448);
    *uint64_t v36 = *(_OWORD *)(v9 + 432);
    v36[1] = v37;
    if (*(void *)(*(void *)(a1 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    uint64_t v17 = *(unsigned int *)(*(void *)(a2 + 536) + 120);
  }
  else
  {
    a4[3 * a3 + 1231] = 0;
    a4[3 * a3 + 1232] = 0;
    a4[3 * a3 + 1233] = 0;
    uint64_t v15 = a3;
    uint64_t v16 = (uint64_t)&a4[7 * a3 + 1];
    bzero((void *)(v16 + 16), 0x38uLL);
    uint64_t v17 = 0;
    *(_DWORD *)(v16 + 64) = 0;
    uint64_t v18 = 1 << a3;
    BOOL v19 = a3 > 0x3F;
    uint64_t v20 = (uint64_t)&a4[v19 + 1];
    *(void *)(v20 + 7184) &= ~(1 << a3);
    *(void *)(v20 + 7200) &= ~(1 << a3);
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 8) + 1456) + 808);
    long long v22 = *(_OWORD *)(v21 + 7312);
    long long v23 = *(_OWORD *)(v21 + 7328);
    uint64_t v24 = (_OWORD *)(*a4 + 32 * a3 + 1592);
    *uint64_t v24 = v22;
    v24[1] = v23;
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 8) + 1456) + 808);
    __int16 v26 = (_OWORD *)(*a4 + 32 * (a3 + 128) + 1592);
    long long v27 = *(_OWORD *)(v25 + 7360);
    *__int16 v26 = *(_OWORD *)(v25 + 7344);
    v26[1] = v27;
  }
  a4[v15 + 904] = v17;
  uint64_t v38 = v7 + 8 * v19 + 90088;
  *(void *)(v38 + 112) = *(void *)(v7 + 8 * v19 + 90200) | v18;
  *(void *)(v38 + 160) = *(void *)(v7 + 8 * v19 + 90248) | v18;
  *(void *)(v7 + 90472) |= 0x50000uLL;
  *(void *)(v7 + 90264) |= 0x10uLL;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  uint64_t v6 = result;
  if (a4 <= 0x22) {
    a5[a4 + 1615] = 0;
  }
  uint64_t v7 = *(void *)(result + 8);
  if (a2)
  {
    unint64_t v8 = (int *)MEMORY[0x263F4B188];
    uint64_t v9 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v10 = *(void *)(v9 + 8);
    uint64_t v13 = v9 + 16;
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v13 + 8);
    uint64_t v14 = a4;
    uint64_t v15 = &a5[v14];
    v15[1650] = v10;
    v15[1715] = v12;
    uint64_t v16 = (void *)(*a5 + v14 * 8);
    v16[67] = v10 + a3;
    v16[132] = (v11 & 0xFFFFFFFFFFFFFFLL) - a3;
    *uint64_t v16 = v12 + a3;
    uint64_t v17 = (_DWORD *)a5 + a4;
    v17[2100] = v11;
    v17[2165] = v11;
    v17[2230] = v10 >> 8;
    v15[1166] = a2 + *v8;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), a2, 6u, a4);
    uint64_t result = *(void *)(*(void *)(v6 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v18 = a4;
    BOOL v19 = &a5[v18];
    v19[1166] = 0;
    uint64_t v20 = (void *)(*a5 + v18 * 8);
    v20[67] = 0;
    v20[132] = 0;
    *uint64_t v20 = 0;
    v19[1650] = 0;
    v19[1715] = 0;
    uint64_t v21 = (char *)a5 + 4 * a4;
    *((_DWORD *)v21 + 2100) = 0;
    *((_DWORD *)v21 + 2165) = 0;
  }
  uint64_t v22 = v7 + 90088 + 8 * (a4 > 0x3F);
  *(void *)(v22 + 96) |= 1 << a4;
  *(void *)(v22 + 144) |= 1 << a4;
  *(void *)(v7 + 90472) |= 0x30000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBufferOffset(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = a1 + 4 * a3;
  uint64_t v5 = 8 * a3;
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t result = a1 + 80;
  uint64_t v8 = *(void *)(result + v5 + 13200);
  uint64_t v9 = *(void *)(result + v5 + 13720);
  unint64_t v10 = (void *)(v7 + v5);
  uint64_t v11 = v10[67];
  uint64_t v12 = v10[132];
  uint64_t v13 = v8 + a2;
  v10[67] = v13;
  v10[132] = v11 - v13 + v12;
  *unint64_t v10 = v9 + a2;
  *(_DWORD *)(v4 + 8740) = *(_DWORD *)(v4 + 8480);
  v3 += 90088;
  *(void *)(v3 + 8 * (a3 > 0x3F) + 96) |= 1 << a3;
  *(void *)(v3 + 384) |= 0x10000uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawMeshThreadgroupsWithIndirectBuffer(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, unsigned int *a5)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 3410))
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(v10 + 38976);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v11 = *(void *)(v10 + 38976);
    unint64_t v12 = *(void *)(v11 + 24);
    if (v12) {
      unint64_t v12 = *(unsigned int *)(v12 + 3412);
    }
    if (a4[1] * a4[2] * *a4 > v12) {
      return;
    }
  }
  unint64_t v13 = *(void *)(v11 + 32);
  if (v13) {
    unint64_t v13 = *(unsigned int *)(v13 + 3516);
  }
  if (*((void *)a5 + 1) * *(void *)a5 * *((void *)a5 + 2) <= v13)
  {
    unsigned int v14 = *(_DWORD *)(*(void *)(a1 + 40) + 3284);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v10, v14);
    uint64_t v15 = a5[4];
    uint64_t v16 = *(void *)(a1 + 32);
    int v17 = *(unsigned __int8 *)(v16 + 3410);
    uint64_t v18 = (int *)MEMORY[0x263F4B188];
    uint64_t v42 = *a5 | (*((void *)a5 + 1) << 32);
    if (*(unsigned char *)(v16 + 3410))
    {
      unint64_t v19 = *(void *)(v16 + 3216);
      int v20 = *(_DWORD *)(v16 + 3224);
      int v41 = v19;
      unint64_t v40 = HIDWORD(v19);
      uint64_t v21 = *(void *)(a1 + 8);
      if (!a2)
      {
        uint64_t v37 = 0;
        *(void *)(a1 + 9688) = 0;
        uint64_t v29 = *(void **)(a1 + 80);
        v29[102] = 0;
        v29[167] = 0;
        v29[35] = 0;
        *(void *)(a1 + 13560) = 0;
        *(void *)(a1 + 14080) = 0;
        *(_DWORD *)(a1 + 8620) = 0;
        *(_DWORD *)(a1 + 8880) = 0;
        int v28 = v20;
LABEL_21:
        *(void *)(v21 + 90184) |= 0x800000000uLL;
        *(void *)(v21 + 90232) |= 0x800000000uLL;
        *(void *)(v21 + 90472) |= 0x30000uLL;
        IOGPUResourceListAddResource();
        int64x2_t v43 = *(int64x2_t *)a4;
        uint64_t v44 = a4[2];
        AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(a1, &v43, 0x24u);
        AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(a1, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 8) + 38968), *(uint64x2_t **)(a1 + 80), *(uint64x2_t **)(a1 + 14464), (uint64x2_t *)(*(void *)(a1 + 8) + 49184), v30, v42, v15, SHIDWORD(v15), v19, SHIDWORD(v19), v20, *(void *)(a1 + 8) + 90088, 0);
        uint64_t v31 = *(void *)(a1 + 24);
        if (v17)
        {
          ++*(_DWORD *)(*(void *)(a1 + 8) + 1524);
          if (v14 == 1) {
            int v32 = 1879048448;
          }
          else {
            int v32 = 1879048192;
          }
          uint64_t v33 = *(void *)(v31 + 48);
          if (v14 == 3) {
            int v32 = 1879049728;
          }
          *(_DWORD *)uint64_t v33 = v32;
          *(_DWORD *)(v33 + 4) = v41;
          *(_DWORD *)(v33 + 8) = v40;
          *(_DWORD *)(v33 + 12) = v28;
          *(void *)(v33 + 16) = v19;
          *(_DWORD *)(v33 + 24) = v20;
          uint64_t v34 = v33 + 28;
        }
        else
        {
          if (v14 == 1) {
            int v35 = 1912602880;
          }
          else {
            int v35 = 1912602624;
          }
          ++*(_DWORD *)(*(void *)(a1 + 8) + 1524);
          uint64_t v36 = *(void *)(v31 + 48);
          if (v14 == 3) {
            int v35 = 1912604160;
          }
          *(_DWORD *)uint64_t v36 = v35;
          *(_DWORD *)(v36 + 4) = WORD2(v37);
          *(_DWORD *)(v36 + 8) = v37 & 0xFFFFFFFC;
          *(void *)(v36 + 12) = v19;
          *(_DWORD *)(v36 + 20) = v20;
          uint64_t v34 = v36 + 24;
        }
        *(void *)(v31 + 48) = v34;
        *(unsigned char *)(*(void *)(a1 + 8) + 1544) = 0;
        return;
      }
      uint64_t v39 = v15;
      uint64_t v37 = 0;
      uint64_t v22 = a3;
      int v38 = *(_DWORD *)(v16 + 3224);
    }
    else
    {
      uint64_t v39 = a5[4];
      unint64_t v19 = *(unsigned int *)a4 | (a4[1] << 32);
      uint64_t v22 = a3;
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v37 = *(void *)(a2 + (int)*MEMORY[0x263F4B188] + 8) + a3;
      int v38 = *((_DWORD *)a4 + 4);
      if (*(void *)(v21 + 38672) != a2)
      {
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v21 + 1592), a2, 65);
        IOGPUResourceListAddResource();
        uint64_t v21 = *(void *)(a1 + 8);
        if (*(void *)(v21 + 1480))
        {
          MTLResourceListAddResource();
          uint64_t v21 = *(void *)(a1 + 8);
        }
        uint64_t v18 = (int *)MEMORY[0x263F4B188];
        *(void *)(v21 + 38672) = a2;
      }
      int v20 = 0;
      int v41 = 0;
      LODWORD(v40) = 0;
    }
    long long v23 = (void *)(a2 + *v18);
    uint64_t v25 = v23[2];
    uint64_t v24 = v23[3];
    unint64_t v26 = v23[1];
    *(void *)(a1 + 13560) = v26;
    *(void *)(a1 + 14080) = v24;
    long long v27 = *(void **)(a1 + 80);
    v27[102] = v26 + v22;
    v27[167] = (v25 & 0xFFFFFFFFFFFFFFLL) - v22;
    v27[35] = v24 + v22;
    *(_DWORD *)(a1 + 8620) = v25;
    *(_DWORD *)(a1 + 8880) = v25;
    *(_DWORD *)(a1 + 9140) = v26 >> 8;
    *(void *)(a1 + 9688) = v23;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(a1 + 8) + 1592), a2, 6u, 0x23u);
    if (*(void *)(*(void *)(a1 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    uint64_t v15 = v39;
    int v28 = v20;
    int v20 = v38;
    goto LABEL_21;
  }
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (char *)(result + 90578);
  uint64_t v3 = result + 36552;
  if (!a2)
  {
    if (*(void *)(*(void *)(result + 38976) + 32))
    {
      if (*(void *)v3)
      {
        uint64_t v4 = *(void *)(*(void *)v3 + 40);
        if (v4)
        {
          if ((*(unsigned char *)(v4 + 3346) & 4) != 0) {
            goto LABEL_6;
          }
        }
      }
    }
    else if ((*(unsigned char *)(*(void *)(result + 38960) + 3578) & 4) != 0)
    {
LABEL_6:
      char v5 = *v2;
      uint64_t v6 = (int8x8_t *)(result + 37236);
      unsigned int v7 = *(_DWORD *)(result + 37236);
      *(_DWORD *)(result + 37232) &= ~0x800000u;
LABEL_19:
      unsigned int v9 = 4u >> v5;
      int8x8_t v11 = vorr_s8((int8x8_t)(*(void *)v6 & 0xFFFFFFF0FFFFFFFLL), (int8x8_t)vdup_n_s32(4u >> v5 << 28));
      *uint64_t v6 = v11;
      int v10 = 1;
      goto LABEL_20;
    }
    LODWORD(a2) = 2 * (*(unsigned char *)(result + 38640) == 0);
  }
  uint64_t v8 = *(void *)(result + 38616);
  char v5 = *v2;
  uint64_t v6 = (int8x8_t *)(result + 37236);
  unsigned int v7 = *(_DWORD *)(result + 37236);
  *(_DWORD *)(result + 37232) &= ~0x800000u;
  if (a2 > 8) {
    goto LABEL_19;
  }
  if (((1 << a2) & 0x1D8) != 0)
  {
    if (v8 == 2) {
      unsigned int v9 = 6;
    }
    else {
      unsigned int v9 = 0;
    }
    int v10 = v8 == 1;
    if (v8 == 1) {
      unsigned int v9 = 5;
    }
    int8x8_t v11 = vorr_s8((int8x8_t)vdup_n_s32(((v8 & 3) << 18) | (v9 << 28)), vand_s8(*v6, (int8x8_t)vdup_n_s32(0xFF3FFFFu)));
    *uint64_t v6 = v11;
  }
  else
  {
    if (((1 << a2) & 0x26) == 0) {
      goto LABEL_19;
    }
    v11.i32[0] = *(void *)v6 & 0xFFFFFFF | 0x10000000;
    v11.i32[1] = HIDWORD(*(unint64_t *)v6) & 0xFFFFFFF | 0x10000000;
    *uint64_t v6 = v11;
    int v10 = 1;
    unsigned int v9 = 1;
  }
LABEL_20:
  BOOL v12 = v9 == v7 >> 28;
  unsigned int v13 = (unsigned __int32)v11.i32[0] >> 28;
  if (!v12)
  {
    BOOL v14 = v13 && v13 - 5 > 1;
    *(_DWORD *)(result + 77384) = 0;
    int v15 = *(_DWORD *)(result + 37272);
    *(_DWORD *)(result + 37212) = *(_DWORD *)(result + 37268);
    *(_DWORD *)(result + 37220) = v15;
    int v16 = *(_DWORD *)(result + 38460);
    *(unsigned char *)(result + 37208) = *(_DWORD *)(result + 38456);
    *(unsigned char *)(result + 37216) = v16;
    uint64_t v17 = *(void *)(result + 90472);
    *(_DWORD *)(result + 37196) = v14
                                ? *(_DWORD *)(result + 37196) & 0xFFFEFFFC | *(_DWORD *)(result + 38440) & 3
                                : *(_DWORD *)(result + 38440) & 3 | ((*(_DWORD *)(result + 38448) & 1) << 16) | *(_DWORD *)(result + 37196) & 0xFFFEFFFC;
    uint64_t v18 = v17 | 0x2100000000000;
    *(void *)(result + 90472) = v18;
    if (*(unsigned __int8 *)(result + 38642) != v10)
    {
      *(void *)(result + 90472) = v18;
      *(unsigned char *)(result + 38642) = v10;
    }
  }
  if (*(float *)(result + 38424) == 0.0 && *(float *)(result + 38428) == 0.0)
  {
    int v20 = 0;
  }
  else
  {
    if (v13) {
      BOOL v19 = v13 - 5 >= 2;
    }
    else {
      BOOL v19 = 0;
    }
    int v20 = !v19;
  }
  if (*(unsigned __int8 *)(result + 38436) != v20)
  {
    if (v20) {
      int v21 = 0x20000;
    }
    else {
      int v21 = 0;
    }
    *(_DWORD *)(result + 37204) = *(_DWORD *)(result + 37204) & 0xFFFDFFFF | v21;
    *(void *)(result + 90472) |= 0x100000000000uLL;
    *(unsigned char *)(result + 38436) = v20;
  }
  return result;
}

int32x2_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(uint64_t a1, int64x2_t *a2, unsigned int a3)
{
  uint64_t v6 = *(void **)(a1 + 8);
  unint64_t v7 = v6[20] + 12;
  if (v7 > v6[19])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v6 + 2, 3, 0)) {
      goto LABEL_3;
    }
    unint64_t v7 = v6[20] + 12;
    if (v7 > v6[19]) {
      abort();
    }
  }
  v6[21] = v7;
LABEL_3:
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v9 = *(int32x2_t **)(v8 + 160);
  int v10 = (int32x2_t *)((char *)v9 + *(void *)(v8 + 176));
  *(void *)(v8 + 160) = (char *)v9 + 12;
  int32x2_t result = vmovn_s64(*a2);
  *unsigned int v9 = result;
  v9[1].i32[0] = a2[1].i64[0];
  uint64_t v12 = 8 * a3;
  uint64_t v13 = *(void *)(a1 + 80);
  BOOL v14 = (void *)(a1 + 80 + v12);
  v14[1650] = v10;
  v14[1715] = v9;
  int v15 = (int32x2_t **)(v13 + v12);
  v15[67] = v10;
  v15[132] = (int32x2_t *)12;
  *int v15 = v9;
  int v16 = (_DWORD *)(a1 + 4 * a3);
  v16[2120] = 12;
  v16[2185] = 12;
  v16[2250] = (unint64_t)v10 >> 8;
  uint64_t v17 = *(void **)(a1 + 8);
  v14[1166] = *(void *)(v17[5] + 224) + (int)*MEMORY[0x263F4B188];
  v17[11273] |= 1 << a3;
  v17[11279] |= 1 << a3;
  v17[11309] |= 0x30000uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64x2_t *a5, uint64x2_t *a6, uint64x2_t *a7, uint64_t a8, uint64_t a9, unsigned int a10, int a11, int a12, int a13, int a14, uint64_t a15, unsigned __int8 a16)
{
  uint64_t v511 = *MEMORY[0x263EF8340];
  uint64_t v17 = *(void *)(a1 + 8);
  *(unsigned char *)(v17 + 36657) = 1;
  if (*(_DWORD *)(a1 + 48) != a9 || *(void *)(a1 + 52) != __PAIR64__(a10, HIDWORD(a9)))
  {
    *(void *)(a1 + 48) = a9;
    *(_DWORD *)(a1 + 56) = a10;
    *(void *)(v17 + 90472) |= 0xFE0000000uLL;
  }
  uint64_t v18 = *(void *)(*(void *)(v17 + 1456) + 808) + 6072;
  uint64_t v19 = *(void *)(a1 + 14464);
  *(void *)uint64_t v508 = v19 + 912;
  *(void *)&v508[8] = a1 + 24032;
  *(void *)&v508[16] = v19 + 920;
  *(void *)&v508[24] = a1 + 24040;
  *(void *)&v508[32] = v19 + 944;
  *(void *)&v508[40] = a1 + 24064;
  unsigned __int8 v20 = a16;
  if (AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::addToResourceList(v18, (uint64_t)v508))
  {
    if (a16)
    {
      IOGPUResourceListAddResource();
      IOGPUResourceListAddResource();
      IOGPUResourceListAddResource();
    }
    uint64_t v449 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 912) = *(void *)(v449 + 912);
    uint64_t v450 = (void *)(*(void *)(a1 + 8) + 50096);
    *uint64_t v450 = *(void *)(v449 + 912);
    uint64_t v451 = *(void *)(a1 + 24032);
    *(void *)(a1 + 9784) = v451;
    v450[3623] = v451;
    v452 = *(void **)(a1 + 8);
    uint64_t v453 = v452 + 6263;
    v452[11273] |= 0x800000000000uLL;
    v452[11279] |= 0x800000000000uLL;
    v452[11285] |= 0x800000000000uLL;
    v452[11291] |= 0x800000000000uLL;
    v452[11297] |= 0x800000000000uLL;
    v452[11303] |= 0x800000000000uLL;
    uint64_t v454 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 920) = *(void *)(v454 + 920);
    *uint64_t v453 = *(void *)(v454 + 920);
    uint64_t v455 = *(void *)(a1 + 24040);
    *(void *)(a1 + 9792) = v455;
    v453[3623] = v455;
    uint64_t v456 = *(void **)(a1 + 8);
    uint64_t v457 = v456 + 11273;
    v456 += 6266;
    *v457 |= 0x1000000000000uLL;
    v457[6] |= 0x1000000000000uLL;
    v457[12] |= 0x1000000000000uLL;
    v457[18] |= 0x1000000000000uLL;
    v457[24] |= 0x1000000000000uLL;
    v457[30] |= 0x1000000000000uLL;
    uint64_t v458 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 944) = *(void *)(v458 + 944);
    *uint64_t v456 = *(void *)(v458 + 944);
    uint64_t v459 = *(void *)(a1 + 24064);
    *(void *)(a1 + 9816) = v459;
    v456[3623] = v459;
    int v21 = *(void **)(a1 + 8);
    v21[11273] |= 0x8000000000000uLL;
    v21[11279] |= 0x8000000000000uLL;
    v21[11285] |= 0x8000000000000uLL;
    v21[11291] |= 0x8000000000000uLL;
    v21[11297] |= 0x8000000000000uLL;
    v21[11303] |= 0x8000000000000uLL;
    *(void *)(a15 + 384) |= 0x300C030000uLL;
  }
  else
  {
    int v21 = *(void **)(a1 + 8);
  }
  uint64_t v22 = *(void *)(v21[182] + 808);
  uint64_t v23 = *(void *)(a1 + 14464);
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 6192));
  uint64_t v24 = (int *)MEMORY[0x263F4B188];
  uint64_t v25 = (int)*MEMORY[0x263F4B188];
  uint64_t v26 = *(void *)(v22 + 6160) + v25;
  uint64_t v27 = *(void *)(v26 + 8);
  uint64_t v28 = a4;
  if (*(void *)(v23 + 952) == v27
    && ((*(void *)(v26 + 40) ^ *(void *)(*(void *)(a1 + 24072) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    int v29 = 0;
  }
  else
  {
    *(void *)(v23 + 952) = v27;
    *(void *)(a1 + 24072) = *(void *)(v22 + 6160) + v25;
    MTLResourceListAddResource();
    int v29 = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 6192));
  uint64_t v30 = *(void *)(a1 + 14464);
  uint64_t v31 = *(void **)(a1 + 8);
  uint64_t v32 = v31[4869];
  *(void *)(v32 + 1696) = *(void *)(v30 + 952);
  uint64_t v33 = *(void *)(v31[182] + 808);
  int v34 = *(_DWORD *)(v33 + 6196);
  if (v34) {
    int v35 = v34 + 1;
  }
  else {
    int v35 = 0;
  }
  *(_DWORD *)(v32 + 1704) = v35;
  if (v29)
  {
    if (a16)
    {
      IOGPUResourceListAddResource();
      uint64_t v31 = *(void **)(a1 + 8);
      uint64_t v30 = *(void *)(a1 + 14464);
    }
    uint64_t v460 = v31 + 6267;
    *(void *)(*(void *)(a1 + 80) + 952) = *(void *)(v30 + 952);
    *uint64_t v460 = *(void *)(v30 + 952);
    uint64_t v461 = *(void *)(a1 + 24072);
    *(void *)(a1 + 9824) = v461;
    v460[3623] = v461;
    uint64_t v31 = *(void **)(a1 + 8);
    v31[11273] |= 0x10000000000000uLL;
    v31[11279] |= 0x10000000000000uLL;
    v31[11285] |= 0x10000000000000uLL;
    v31[11291] |= 0x10000000000000uLL;
    v31[11297] |= 0x10000000000000uLL;
    v31[11303] |= 0x10000000000000uLL;
    *(void *)(a15 + 384) |= 0x300C030000uLL;
    uint64_t v33 = *(void *)(v31[182] + 808);
  }
  uint64_t v36 = v31 + 11392;
  os_unfair_lock_lock((os_unfair_lock_t)(v33 + 6448));
  uint64_t v37 = *v24;
  uint64_t v38 = *(void *)(v33 + 6416) + v37;
  uint64_t v39 = *(void *)(v38 + 8);
  if (*v36 == v39 && ((*(void *)(v38 + 40) ^ *(void *)(v36[1] + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 6448));
  }
  else
  {
    *uint64_t v36 = v39;
    v36[1] = *(void *)(v33 + 6416) + v37;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v33 + 6448));
    IOGPUResourceListAddResource();
  }
  uint64_t v40 = *(void *)(a1 + 8);
  uint64_t v41 = v40 + 91128;
  **(void **)(v40 + 91128) = *(void *)(v40 + 91136);
  uint64_t v42 = *(void *)(*(void *)(v40 + 1456) + 808);
  os_unfair_lock_lock((os_unfair_lock_t)(v42 + 6384));
  uint64_t v43 = *v24;
  uint64_t v44 = *(void *)(v42 + 6352) + v43;
  uint64_t v45 = *(void *)(v44 + 8);
  if (*(void *)(v41 + 24) == v45
    && ((*(void *)(v44 + 40) ^ *(void *)(*(void *)(v41 + 32) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 6384));
  }
  else
  {
    *(void *)(v41 + 24) = v45;
    *(void *)(v41 + 32) = *(void *)(v42 + 6352) + v43;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v42 + 6384));
    IOGPUResourceListAddResource();
  }
  unint64_t v46 = *(void **)(a1 + 8);
  *(void *)(v46[11391] + 8) = v46[11394];
  uint64_t v47 = *(void *)(v46[182] + 808);
  uint64_t v48 = *(void *)(a1 + 14464);
  os_unfair_lock_lock((os_unfair_lock_t)(v47 + 6576));
  uint64_t v49 = *v24;
  uint64_t v50 = *(void *)(v47 + 6544) + v49;
  uint64_t v51 = *(void *)(v50 + 8);
  if (*(void *)(v48 + 976) == v51
    && ((*(void *)(v50 + 40) ^ *(void *)(*(void *)(a1 + 24096) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 6576));
    uint64_t v55 = *(void **)(a1 + 8);
  }
  else
  {
    *(void *)(v48 + 976) = v51;
    *(void *)(a1 + 24096) = *(void *)(v47 + 6544) + v49;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v47 + 6576));
    if (a16) {
      IOGPUResourceListAddResource();
    }
    uint64_t v52 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 976) = *(void *)(v52 + 976);
    uint64_t v53 = (void *)(*(void *)(a1 + 8) + 50160);
    *uint64_t v53 = *(void *)(v52 + 976);
    uint64_t v54 = *(void *)(a1 + 24096);
    *(void *)(a1 + 9848) = v54;
    v53[3623] = v54;
    uint64_t v55 = *(void **)(a1 + 8);
    v55[11273] |= 0x80000000000000uLL;
    v55[11279] |= 0x80000000000000uLL;
    v55[11285] |= 0x80000000000000uLL;
    v55[11291] |= 0x80000000000000uLL;
    v55[11297] |= 0x80000000000000uLL;
    v55[11303] |= 0x80000000000000uLL;
    *(void *)(a15 + 384) |= 0x300C030000uLL;
  }
  uint64_t v56 = *(void *)(v55[182] + 808);
  uint64_t v57 = *(void *)(a1 + 14464);
  os_unfair_lock_lock((os_unfair_lock_t)(v56 + 6512));
  uint64_t v58 = *v24;
  uint64_t v59 = *(void *)(v56 + 6480) + v58;
  uint64_t v60 = *(void *)(v59 + 8);
  if (*(void *)(v57 + 992) == v60
    && ((*(void *)(v59 + 40) ^ *(void *)(*(void *)(a1 + 24112) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v56 + 6512));
    uint64_t v64 = *(void **)(a1 + 8);
  }
  else
  {
    *(void *)(v57 + 992) = v60;
    *(void *)(a1 + 24112) = *(void *)(v56 + 6480) + v58;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v56 + 6512));
    if (a16) {
      IOGPUResourceListAddResource();
    }
    uint64_t v61 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 992) = *(void *)(v61 + 992);
    uint64_t v62 = (void *)(*(void *)(a1 + 8) + 50176);
    *uint64_t v62 = *(void *)(v61 + 992);
    uint64_t v63 = *(void *)(a1 + 24112);
    *(void *)(a1 + 9864) = v63;
    v62[3623] = v63;
    uint64_t v64 = *(void **)(a1 + 8);
    v64[11273] |= 0x200000000000000uLL;
    v64[11279] |= 0x200000000000000uLL;
    v64[11285] |= 0x200000000000000uLL;
    v64[11291] |= 0x200000000000000uLL;
    v64[11297] |= 0x200000000000000uLL;
    v64[11303] |= 0x200000000000000uLL;
    *(void *)(a15 + 384) |= 0x300C030000uLL;
  }
  uint64_t v65 = *(void *)(v64[182] + 808);
  uint64_t v66 = *(void *)(a1 + 14464);
  os_unfair_lock_lock((os_unfair_lock_t)(v65 + 6256));
  uint64_t v67 = *v24;
  uint64_t v68 = *(void *)(v65 + 6224) + v67;
  uint64_t v69 = *(void *)(v68 + 8);
  if (*(void *)(v66 + 968) == v69
    && ((*(void *)(v68 + 40) ^ *(void *)(*(void *)(a1 + 24088) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 6256));
    uint64_t v75 = *(void *)(a1 + 8);
    uint64_t v70 = a2;
    uint64_t v71 = a15;
  }
  else
  {
    *(void *)(v66 + 968) = v69;
    *(void *)(a1 + 24088) = *(void *)(v65 + 6224) + v67;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v65 + 6256));
    uint64_t v70 = a2;
    uint64_t v71 = a15;
    if (a16) {
      IOGPUResourceListAddResource();
    }
    uint64_t v72 = *(void *)(a1 + 14464);
    *(void *)(*(void *)(a1 + 80) + 968) = *(void *)(v72 + 968);
    int v73 = (void *)(*(void *)(a1 + 8) + 50152);
    *int v73 = *(void *)(v72 + 968);
    uint64_t v74 = *(void *)(a1 + 24088);
    *(void *)(a1 + 9840) = v74;
    v73[3623] = v74;
    uint64_t v75 = *(void *)(a1 + 8);
    *(void *)(v75 + 90184) |= 0x40000000000000uLL;
    *(void *)(v75 + 90232) |= 0x40000000000000uLL;
    *(void *)(v75 + 90280) |= 0x40000000000000uLL;
    *(void *)(v75 + 90328) |= 0x40000000000000uLL;
    *(void *)(v75 + 90376) |= 0x40000000000000uLL;
    *(void *)(v75 + 90424) |= 0x40000000000000uLL;
    *(void *)(a15 + 384) |= 0x300C030000uLL;
  }
  uint64_t v76 = v75 + 38952;
  __int16 v77 = *(unsigned char **)(v75 + 38976);
  if (v77)
  {
    if (v77[1452]) {
      *(unsigned char *)(*(void *)v76 + 1300) |= *(unsigned char *)(v75 + 1506);
    }
    if (v77[2028] || v77[2316]) {
      *(unsigned char *)(*(void *)v76 + 468) |= *(unsigned char *)(v75 + 1506);
    }
  }
  uint64_t v78 = *(void *)(v71 + 384);
  if (a4)
  {
    unint64_t v79 = v78 | AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::extractProgramVariantArgumentDirtyBits(*(void *)(a1 + 16), v70, a3, a4, v71);
    BOOL v80 = *(unsigned char *)(a4 + 3380) != 0;
    uint64_t v507 = v79;
    if (v80) {
      goto LABEL_45;
    }
  }
  else
  {
    unint64_t v81 = v78 & 0xFFFFFF8FFFFFFFFDLL;
    *(void *)(v71 + 384) = v81;
    unint64_t v79 = v81 | AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::extractProgramVariantArgumentDirtyBits(*(void *)(a1 + 16), v70, a3, 0, v71);
    uint64_t v507 = v79;
  }
  if (a16) {
LABEL_45:
  }
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDepthRanges(*(void *)(a1 + 8), v79);
  unint64_t v492 = v79;
  if ((v79 & 0x20000) != 0 && (a16 & 1) == 0)
  {
    unint64_t v82 = *(void *)(v71 + 144) & *(void *)(v70 + 1944);
    unint64_t v83 = *(void *)(v71 + 152) & *(void *)(v70 + 1952);
    unint64_t v509 = v82;
    unint64_t v506 = v83;
    *(_OWORD *)uint64_t v508 = *(_OWORD *)(v70 + 1056);
    while (1)
    {
      if (v82)
      {
        unsigned int v84 = __clz(__rbit64(v82));
        uint64_t v85 = &v509;
        unsigned int v86 = v84;
      }
      else
      {
        unint64_t v82 = v506;
        if (!v506) {
          break;
        }
        unsigned int v84 = __clz(__rbit64(v506));
        unsigned int v86 = v84 | 0x40;
        uint64_t v85 = &v506;
      }
      *uint64_t v85 = v82 & ~(1 << v84);
      if (*(void *)(a1 + 8 * v86 + 9408)) {
        AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectBufferResource(a1, v86, (*(void *)((unint64_t)v508 | (8 * (v86 > 0x3F))) >> v86) & 1, 1);
      }
      unint64_t v82 = v509;
    }
  }
  if ((v79 & 0x8000000) != 0 && (a16 & 1) == 0)
  {
    unint64_t v87 = *(void *)(v71 + 240) & *(void *)(a3 + 1944);
    unint64_t v88 = *(void *)(v71 + 248) & *(void *)(a3 + 1952);
    unint64_t v509 = v87;
    unint64_t v506 = v88;
    *(_OWORD *)uint64_t v508 = *(_OWORD *)(a3 + 1056);
    while (1)
    {
      if (v87)
      {
        unsigned int v89 = __clz(__rbit64(v87));
        uint64_t v90 = &v509;
        unsigned int v91 = v89;
      }
      else
      {
        unint64_t v87 = v506;
        if (!v506) {
          break;
        }
        unsigned int v89 = __clz(__rbit64(v506));
        unsigned int v91 = v89 | 0x40;
        uint64_t v90 = &v506;
      }
      *uint64_t v90 = v87 & ~(1 << v89);
      if (*(void *)(a1 + 8 * v91 + 23656)) {
        AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshBufferResource(a1, v91, (*(void *)((unint64_t)v508 | (8 * (v91 > 0x3F))) >> v91) & 1, 1);
      }
      unint64_t v87 = v509;
    }
  }
  if ((v79 & 0x40000) != 0)
  {
    unint64_t v92 = *(void *)(v70 + 1960) & *(void *)(a1 + 7272) & *(void *)(v71 + 160);
    unint64_t v93 = *(void *)(v70 + 1968) & *(void *)(a1 + 7280) & *(void *)(v71 + 168);
    unint64_t v509 = v92;
    unint64_t v506 = v93;
    uint64_t v94 = *(void *)(v70 + 1072);
    uint64_t v95 = *(void *)(v70 + 1080);
    *(void *)uint64_t v508 = v94;
    *(void *)&v508[8] = v95;
    uint64_t v96 = *(void *)(a1 + 7288);
    uint64_t v97 = *(void *)(a1 + 7296);
    while (1)
    {
      if (v92)
      {
        unsigned int v98 = __clz(__rbit64(v92));
        uint64_t v99 = &v509;
        unsigned int v100 = v98;
      }
      else
      {
        unint64_t v92 = v506;
        if (!v506)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 38952) + 468) |= (v96 & v94 | v95 & v97) != 0;
          uint64_t v70 = a2;
          uint64_t v28 = a4;
          uint64_t v71 = a15;
          unint64_t v79 = v492;
          if ((v492 & 0x10000000) != 0) {
            goto LABEL_77;
          }
          goto LABEL_68;
        }
        unsigned int v98 = __clz(__rbit64(v506));
        unsigned int v100 = v98 | 0x40;
        uint64_t v99 = &v506;
      }
      *uint64_t v99 = v92 & ~(1 << v98);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectTextureResources(a1, v100, (*(void *)&v508[8 * (v100 > 0x3F)] >> v100) & 1);
      unint64_t v92 = v509;
    }
  }
  if ((v79 & 0x10000000) != 0)
  {
LABEL_77:
    unint64_t v101 = *(void *)(a3 + 1960) & *(void *)(a1 + 21656) & *(void *)(v71 + 256);
    unint64_t v102 = *(void *)(a3 + 1968) & *(void *)(a1 + 21664) & *(void *)(v71 + 264);
    unint64_t v509 = v101;
    unint64_t v506 = v102;
    uint64_t v103 = *(void *)(a3 + 1072);
    uint64_t v104 = *(void *)(a3 + 1080);
    *(void *)uint64_t v508 = v103;
    *(void *)&v508[8] = v104;
    uint64_t v105 = *(void *)(a1 + 21672);
    uint64_t v106 = *(void *)(a1 + 21680);
    while (1)
    {
      if (v101)
      {
        unsigned int v107 = __clz(__rbit64(v101));
        uint64_t v108 = &v509;
        unsigned int v109 = v107;
      }
      else
      {
        unint64_t v101 = v506;
        if (!v506)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 38952) + 468) |= (v105 & v103 | v104 & v106) != 0;
          unsigned __int8 v20 = a16;
          uint64_t v70 = a2;
          uint64_t v28 = a4;
          uint64_t v71 = a15;
          unint64_t v79 = v492;
          if ((v492 & 0x2000000000) == 0) {
            goto LABEL_94;
          }
          goto LABEL_84;
        }
        unsigned int v107 = __clz(__rbit64(v506));
        unsigned int v109 = v107 | 0x40;
        uint64_t v108 = &v506;
      }
      *uint64_t v108 = v101 & ~(1 << v107);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshTextureResources(a1, v109, (*(void *)&v508[8 * (v109 > 0x3F)] >> v109) & 1);
      unint64_t v101 = v509;
    }
  }
LABEL_68:
  if ((v79 & 0x2000000000) != 0)
  {
LABEL_84:
    if (v20) {
      goto LABEL_94;
    }
    unint64_t v110 = *(void *)(v71 + 336) & *(void *)(v28 + 1944);
    unint64_t v111 = *(void *)(v71 + 344) & *(void *)(v28 + 1952);
    unint64_t v509 = v110;
    unint64_t v506 = v111;
    *(_OWORD *)uint64_t v508 = *(_OWORD *)(v28 + 1056);
    while (1)
    {
      if (v110)
      {
        unsigned int v112 = __clz(__rbit64(v110));
        uint64_t v113 = &v509;
        unsigned int v114 = v112;
      }
      else
      {
        unint64_t v110 = v506;
        if (!v506)
        {
          uint64_t v71 = a15;
          unint64_t v79 = v492;
          break;
        }
        unsigned int v112 = __clz(__rbit64(v506));
        unsigned int v114 = v112 | 0x40;
        uint64_t v113 = &v506;
      }
      *uint64_t v113 = v110 & ~(1 << v112);
      uint64_t v115 = *(void *)(a1 + 8);
      if (*(void *)(v115 + 8 * v114 + 78704)) {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentBufferResource(v115, v114, (*(void *)((unint64_t)v508 | (8 * (v114 > 0x3F))) >> v114) & 1, 1);
      }
      unint64_t v110 = v509;
    }
  }
LABEL_94:
  if ((v79 & 0x4000000000) != 0)
  {
    uint64_t v116 = (void *)(*(void *)(a1 + 8) + 75944);
    unint64_t v117 = *(void *)(v28 + 1960) & *(void *)(v71 + 352) & *v116;
    unint64_t v118 = *(void *)(v28 + 1968) & *(void *)(v71 + 360) & *(void *)(*(void *)(a1 + 8) + 75952);
    unint64_t v509 = v117;
    unint64_t v506 = v118;
    uint64_t v480 = *(void *)(v28 + 1080);
    uint64_t v482 = *(void *)(v28 + 1072);
    *(void *)uint64_t v508 = v482;
    *(void *)&v508[8] = v480;
    uint64_t v476 = v116[2];
    uint64_t v478 = v116[3];
    while (1)
    {
      if (v117)
      {
        unsigned int v119 = __clz(__rbit64(v117));
        uint64_t v120 = &v509;
        unsigned int v121 = v119;
      }
      else
      {
        unint64_t v117 = v506;
        if (!v506)
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 8) + 38952) + 1300) |= (v476 & v482 | v480 & v478) != 0;
          uint64_t v70 = a2;
          uint64_t v28 = a4;
          uint64_t v71 = a15;
          unint64_t v79 = v492;
          break;
        }
        unsigned int v119 = __clz(__rbit64(v506));
        unsigned int v121 = v119 | 0x40;
        uint64_t v120 = &v506;
      }
      unint64_t *v120 = v117 & ~(1 << v119);
      uint64_t v122 = *(void *)(a1 + 8);
      if ((*(void *)&v508[8 * (v121 > 0x3F)] >> v121)) {
        int v123 = 12;
      }
      else {
        int v123 = 4;
      }
      int v124 = 3 * v121;
      uint64_t v125 = v122 + 24 * v121;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(v122 + 1592), *(uint64_t **)(v125 + 82296), 4u, v121, v123);
      if (*(void *)(v125 + 82296))
      {
        IOGPUResourceListAddResource();
        if (*(void *)(v122 + 8 * (v124 + 1) + 82296)) {
          IOGPUResourceListAddResource();
        }
        if (*(void *)(v122 + 8 * (v124 + 2) + 82296)) {
          IOGPUResourceListAddResource();
        }
      }
      unint64_t v117 = v509;
    }
  }
  int v126 = *(_DWORD *)(v71 + 392);
  if ((v126 & 1) != 0 && *(unsigned char *)(*(void *)(a1 + 8) + 38640)) {
    *(_DWORD *)(v71 + 392) = v126 & 0xFFFFFFFE;
  }
  *(void *)(v71 + 384) = 0;
  *(_OWORD *)(v71 + 352) = 0u;
  *(_OWORD *)(v71 + 368) = 0u;
  *(_OWORD *)(v71 + 320) = 0u;
  *(_OWORD *)(v71 + 336) = 0u;
  *(_OWORD *)(v71 + 288) = 0u;
  *(_OWORD *)(v71 + 304) = 0u;
  *(_OWORD *)(v71 + 256) = 0u;
  *(_OWORD *)(v71 + 272) = 0u;
  *(_OWORD *)(v71 + 224) = 0u;
  *(_OWORD *)(v71 + 240) = 0u;
  *(_OWORD *)(v71 + 192) = 0u;
  *(_OWORD *)(v71 + 208) = 0u;
  *(_OWORD *)(v71 + 160) = 0u;
  *(_OWORD *)(v71 + 176) = 0u;
  *(_OWORD *)(v71 + 128) = 0u;
  *(_OWORD *)(v71 + 144) = 0u;
  *(_OWORD *)(v71 + 96) = 0u;
  *(_OWORD *)(v71 + 112) = 0u;
  *(_OWORD *)(v71 + 64) = 0u;
  *(_OWORD *)(v71 + 80) = 0u;
  *(_OWORD *)(v71 + 32) = 0u;
  *(_OWORD *)(v71 + 48) = 0u;
  *(_OWORD *)uint64_t v71 = 0u;
  *(_OWORD *)(v71 + 16) = 0u;
  AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveDispatchMeshDatabufferSpace(a1, v79, v70, a3, v28);
  if ((v79 & 0x20000000000000) != 0)
  {
    v462 = *(void **)(a1 + 24);
    unint64_t v463 = v462[54] + 2;
    if (v463 > v462[53])
    {
      int v131 = 0;
      if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 24), 12, 0))
      {
        unint64_t v471 = v462[54] + 2;
        if (v471 > v462[53]) {
          goto LABEL_400;
        }
        v462[55] = v471;
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace(*(void **)(a1 + 8));
        int v131 = 1;
      }
    }
    else
    {
      int v131 = 0;
      v462[55] = v463;
    }
  }
  else
  {
    int v131 = 0;
  }
  char v505 = 0;
  unint64_t v506 = 0xDE876B1A5;
  uint64_t v504 = 4123088130;
  int v502 = -1;
  int v503 = -1;
  unsigned __int8 v501 = 0;
  uint64_t v500 = 0;
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceDepthBiasBufferReserve(*(void *)(a1 + 8), (uint64_t)&v507, &v503, &v506, &v505, &v500, v127, v128, v129, v130);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceScissorBufferReserve(*(void *)(a1 + 8), (unint64_t *)&v507, &v502, &v504, &v501, &v505, &v500);
  uint64_t v132 = *(void *)(a1 + 8);
  char v133 = v505 | (*(void *)(*(void *)(v132 + 1496) + 520) == 0);
  char v505 = v133;
  uint64_t v134 = (unsigned char *)(*(void *)(*(void *)(v132 + 1456) + 808) + 5105);
  if (*(unsigned char *)(*(void *)(*(void *)(v132 + 1456) + 808) + 5106))
  {
    if (*v134) {
      goto LABEL_115;
    }
  }
  else
  {
    v133 |= ((*(void *)(v132 + 320) - *(void *)(*(void *)(v132 + 40) + 536)) >> 4) > 0xFFFE;
    char v505 = v133;
    if (*v134)
    {
LABEL_115:
      if (!v133) {
        goto LABEL_120;
      }
      goto LABEL_375;
    }
  }
  uint64_t v135 = *(void *)(v132 + 288);
  if (!v135)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v132 + 16);
    uint64_t v135 = *(void *)(v132 + 288);
    if (!v135)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v132 + 16);
      uint64_t v135 = 0;
    }
  }
  v133 |= -1431655765 * ((unint64_t)(v135 - *(void *)(*(void *)(v132 + 40) + 472)) >> 2) > 0xFFFE;
  char v505 = v133;
  uint64_t v132 = *(void *)(a1 + 8);
  if (v133)
  {
LABEL_375:
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(v132, (unint64_t *)&v507, v500, 1);
    uint64_t v464 = v507;
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveDispatchMeshDatabufferSpace(a1, v507, a2, a3, a4);
    if ((v464 & 0x20000000000000) == 0) {
      goto LABEL_376;
    }
    uint64_t v472 = *(void **)(a1 + 24);
    unint64_t v473 = v472[54] + 2;
    if (v473 <= v472[53])
    {
      int v131 = 0;
      v472[55] = v473;
      goto LABEL_376;
    }
    int v131 = 0;
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 24), 12, 0))
    {
LABEL_376:
      uint64_t v132 = *(void *)(a1 + 8);
      if (a16)
      {
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
        uint64_t v132 = *(void *)(a1 + 8);
      }
      goto LABEL_120;
    }
    unint64_t v474 = v472[54] + 2;
    if (v474 <= v472[53])
    {
      v472[55] = v474;
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace(*(void **)(a1 + 8));
      int v131 = 1;
      goto LABEL_376;
    }
LABEL_400:
    abort();
  }
LABEL_120:
  if (!*(void *)(*(void *)(v132 + 1496) + 520))
  {
    uint64_t v136 = *(void *)(v132 + 1552) - *(void *)(v132 + 1568);
    *(_DWORD *)(v136 + 12) = 1;
    if ((*(unsigned char *)(v136 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)v132 + 688) = 1;
    }
  }
  if ((v507 & 0x20000000000000) != 0)
  {
    if (!v133 && ((v131 ^ 1) & 1) == 0)
    {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeVisibilityClear(v132);
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVisibilityClear(*(void *)(a1 + 8));
      uint64_t v132 = *(void *)(a1 + 8);
    }
    uint64_t v465 = *(void *)(a1 + 24);
    v466 = *(_WORD **)(v465 + 432);
    _WORD *v466 = 2 * *(_WORD *)(v132 + 38492);
    *(void *)(v465 + 432) = v466 + 1;
    LODWORD(v465) = *(_DWORD *)(v132 + 38488) + 1;
    *(_DWORD *)(v132 + 38488) = v465;
    *(_DWORD *)(*(void *)(v132 + 38472) + 8) = v465;
    uint64_t v132 = *(void *)(a1 + 8);
  }
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleScissorUpdates(v132, &v507, v502, v504, v501, v133 != 0);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDepthBiasUpdates(*(void *)(a1 + 8), (uint64_t)&v507, v503, v137, v138, v139, v140);
  int v141 = *(_DWORD *)(a2 + 2516);
  *(_DWORD *)(a1 + 60) = v141;
  if (*(_DWORD *)(a2 + 3260))
  {
    unint64_t v142 = 0;
    uint64_t v143 = a2 + 3264;
    unsigned int v144 = a10;
    int v146 = HIDWORD(a9);
    int v145 = a9;
    do
    {
      *(_DWORD *)(a1 + 4 * *(unsigned int *)(v143 + 4 * v142) + 9260) = v141 | 0x80000000;
      v141 += *(_DWORD *)(a1 + 14320 + 4 * *(unsigned int *)(v143 + 4 * v142));
      *(_DWORD *)(a1 + 60) = v141;
      ++v142;
    }
    while (v142 < *(unsigned int *)(a2 + 3260));
  }
  else
  {
    unsigned int v144 = a10;
    int v146 = HIDWORD(a9);
    int v145 = a9;
  }
  *(_DWORD *)(a1 + 9400) = v141;
  uint64_t v147 = a3;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForObject(*(void *)(a1 + 8) + 38696, *(_DWORD *)(a2 + 988), *(_DWORD *)(a2 + 1000), *(_DWORD *)(a2 + 1020), v141, a14 * a12 * a13))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(*(void *)(a1 + 8) + 38696, (__n128 *)(*(void *)(*(void *)(a1 + 8) + 38952) + 304), 1); {
  BOOL v148 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForMesh(*(void *)(a1 + 8) + 38696, *(_DWORD *)(a3 + 988), *(_DWORD *)(a3 + 1000), *(_DWORD *)(a3 + 1020), *(_DWORD *)(a3 + 2516), v144 * v145 * v146);
  }
  uint64_t v150 = a4;
  if (v148) {
    int8x8_t v149 = (int8x8_t)AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(*(void *)(a1 + 8) + 38696, (__n128 *)(*(void *)(*(void *)(a1 + 8) + 38952) + 304), 1).n128_u64[0];
  }
  uint64_t v151 = *(void **)(a1 + 24);
  char v152 = v507;
  if ((v507 & 0xFE3F80030) != 0 && (*(unsigned char *)(*(void *)(a1 + 8) + 38652) & 1) == 0)
  {
    v496 = *(char ****)(a1 + 16);
    uint64_t v481 = *(void *)(*(void *)(a1 + 8) + 38976);
    unint64_t v153 = *(void *)(a1 + 48);
    int v154 = *(_DWORD *)(a1 + 56);
    int v479 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 38640);
    int v155 = *(_DWORD *)(a1 + 9400);
    memset(v508, 0, 44);
    int v156 = (v155 + 63) & 0xFFC0;
    if (((v155 + 63) & 0xFFFFFFC0) == 0x10000) {
      int v156 = 0;
    }
    *(_DWORD *)&v508[2] = v156;
    v508[0] = v155 != 0;
    AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::AGX3EncodedInstr<AGXIotoInstruction_SPECLM_0>::AGX3EncodedInstr(&v509, v508);
    uint64_t v157 = *(unsigned int *)(a2 + 608);
    char v487 = v152;
    int v486 = v154;
    unint64_t v483 = v153;
    if (v157)
    {
      unint64_t v158 = (v151[46] + 31) & 0xFFFFFFFFFFFFFFE0;
      unint64_t v159 = v158 + v151[48];
      v151[46] = v158 + v157;
    }
    else
    {
      unint64_t v159 = 0;
      unint64_t v158 = 0;
    }
    uint64_t v160 = a5;
    unint64_t v161 = v509;
    uint64_t v162 = (char *)((v151[26] + 63) & 0xFFFFFFFFFFFFFFC0);
    uint64_t v488 = v151[28];
    uint64_t v493 = v151;
    v151[26] = &v162[*(_DWORD *)(*(void *)(a2 + 1936) + 8) - **(_DWORD **)(a2 + 1936)];
    unint64_t v163 = *(void *)(a2 + 840) - *(void *)(a2 + 832);
    int v164 = *(_DWORD *)(a2 + 792);
    if (v163) {
      int v165 = *(_DWORD *)(a2 + 792) & 1;
    }
    else {
      int v165 = 0;
    }
    if (!v157)
    {
LABEL_213:
      uint64_t v239 = *(void *)(a2 + 1936);
      memcpy(v162, *(const void **)v239, *(void *)(v239 + 8) - *(void *)v239);
      __n128 v240 = (int8x16_t *)&off_242EA7000;
      __n128 v241 = (uint8x16_t *)&off_242EA7000;
      if (*(unsigned char *)(v239 + 200))
      {
        v242.i64[0] = v159;
        v242.i64[1] = v159 >> 5;
        *(int8x16_t *)&v162[*(unsigned int *)(v239 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v162[*(unsigned int *)(v239 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v242, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      __n128 v243 = *(unsigned int **)(v239 + 176);
      for (uint64_t i = *(unsigned int **)(v239 + 184); v243 != i; v243 += 3)
      {
        v245.i64[0] = a5->i64[v243[1]] + *v243;
        v245.i64[1] = (unint64_t)v245.i64[0] >> 5;
        *(int8x16_t *)&v162[v243[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v162[v243[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v245, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      if (!*(_DWORD *)(v239 + 240)) {
        *(void *)&v162[*(unsigned __int16 *)(v239 + 244)] = v161;
      }
      uint64_t v246 = &v162[v488];
      uint64_t v247 = *v496;
      if (*v496)
      {
        __n128 v249 = *(const void **)v239;
        uint64_t v248 = *(void *)(v239 + 8);
        int v250 = *(_DWORD *)(a2 + 2344);
        LODWORD(v251) = *((_DWORD *)v247 + 2);
        int v252 = v251 + 1;
        if (*((_DWORD *)v247 + 3) >= (v251 + 1))
        {
          unint64_t v255 = *v247;
        }
        else
        {
          unsigned int v253 = -__clz(v251);
          uint64_t v254 = (char *)malloc_type_malloc(40 << (v253 & 0x1F), 0x10800400D7C94D2uLL);
          unint64_t v255 = v254;
          int v256 = 1 << v253;
          uint64_t v251 = *((unsigned int *)v247 + 2);
          if (v251)
          {
            memcpy(v254, *v247, 40 * v251);
            free(*v247);
            LODWORD(v251) = *((_DWORD *)v247 + 2);
          }
          uint64_t v246 = &v162[v488];
          *((_DWORD *)v247 + 3) = v256;
          *uint64_t v247 = v255;
          __n128 v240 = (int8x16_t *)&off_242EA7000;
          __n128 v241 = (uint8x16_t *)&off_242EA7000;
        }
        uint64_t v257 = &v255[40 * v251];
        *(_DWORD *)uint64_t v257 = 4;
        *((void *)v257 + 1) = v246;
        *((void *)v257 + 2) = v162;
        *((void *)v257 + 3) = (v248 - v249);
        *((_DWORD *)v257 + 8) = v250;
        *((_DWORD *)v247 + 2) = v252;
        uint64_t v147 = a3;
      }
      uint64_t v258 = *(unsigned int *)(v147 + 608);
      uint64_t v477 = v246;
      if (v258)
      {
        int v259 = v493;
        unint64_t v260 = (v493[46] + 31) & 0xFFFFFFFFFFFFFFE0;
        unint64_t v261 = v260 + v493[48];
        v493[46] = v260 + v258;
        int v262 = a6;
      }
      else
      {
        unint64_t v261 = 0;
        unint64_t v260 = 0;
        int v262 = a6;
        int v259 = v493;
      }
      uint64_t v263 = (uint32x2_t *)(v147 + 612);
      unint64_t v264 = (char *)((v259[26] + 63) & 0xFFFFFFFFFFFFFFC0);
      uint64_t v489 = v259[28];
      uint64_t v491 = (uint32x2_t *)(v147 + 612);
      v259[26] = &v264[*(_DWORD *)(*(void *)(v147 + 1936) + 8) - **(_DWORD **)(v147 + 1936)];
      unint64_t v265 = *(void *)(v147 + 840) - *(void *)(v147 + 832);
      int v266 = *(_DWORD *)(v147 + 792);
      if (v265) {
        int v267 = *(_DWORD *)(v147 + 792) & 1;
      }
      else {
        int v267 = 0;
      }
      if (!v258) {
        goto LABEL_296;
      }
      unint64_t v268 = *(unsigned int *)(v147 + 1016);
      unint64_t v269 = *(int **)(v147 + 640);
      uint64_t v270 = (*(void *)(v147 + 648) - (void)v269) >> 2;
      int v271 = *(_DWORD *)(v147 + 1004);
      uint64_t v272 = (*(void *)(v147 + 696) - *(void *)(v147 + 688)) >> 2;
      uint64_t v273 = *(void *)(v147 + 672);
      uint64_t v274 = *(void *)(v147 + 664);
      int v275 = *(_DWORD *)(v147 + 804) + *(_DWORD *)(v147 + 800);
      uint64_t v276 = *(void *)(v147 + 744);
      uint64_t v277 = *(void *)(v147 + 736);
      int v278 = *(unsigned __int8 *)(v147 + 1048);
      int v279 = *(unsigned __int8 *)(v147 + 1049);
      if (*(unsigned char *)(v147 + 1048)) {
        v262[58] = vaddw_u32((uint64x2_t)vdupq_n_s64(v261), *v263);
      }
      if (v279) {
        v262[60].i64[0] = v261 + *(unsigned int *)(v147 + 632);
      }
      uint64_t v280 = 8 * (v272 + v270);
      int v281 = v267 + v266;
      if (v275) {
        v262[64].i64[0] = v280 + v261 + 4 * (v281 + ((v265 >> 1) & 0xFFFFFFFE));
      }
      unint64_t v282 = v273 - v274;
      if (v270 == v268)
      {
        unsigned int v283 = 0;
        unint64_t v284 = v282 >> 2;
        if (!v268)
        {
LABEL_262:
          uint64_t v308 = a1 + 14472;
          unint64_t v309 = v265 >> 2;
          if (v272)
          {
            v262[98].i64[1] = v261 + v283;
            uint64_t v310 = (void *)(v260 + v283);
            uint64_t v311 = *(unsigned __int16 **)(v147 + 688);
            if (*(unsigned char *)(v147 + 784))
            {
              __n128 v312 = *(unsigned __int16 **)(v147 + 712);
              for (uint64_t j = (*(void *)(v147 + 720) - (void)v312) >> 1; j; LODWORD(j) = j - 1)
              {
                int v314 = *v312++;
                v310[v314] = *(void *)(v262->i64[v311[2 * v314]] + 8 * v311[2 * v314 + 1]);
              }
            }
            else
            {
              int v317 = v272;
              do
              {
                *v310++ = *(void *)(v262->i64[*v311] + 8 * v311[1]);
                v311 += 2;
                --v317;
              }
              while (v317);
            }
            v283 += 8 * v272;
          }
          unint64_t v318 = v276 - v277;
          if (v284)
          {
            int v319 = (_DWORD *)(v260 + v283);
            *(void *)(a1 + 21688) = v261 + v283 + 8;
            unsigned int v320 = *(unsigned int **)(v147 + 664);
            int v321 = v284;
            do
            {
              unsigned int v322 = *v320++;
              *v319++ = *(_DWORD *)(v308 + 4 * v322);
              --v321;
            }
            while (v321);
            v283 += 4 * v284;
          }
          unint64_t v323 = v318 >> 2;
          if (v309)
          {
            int v324 = v280 + 4 * v281;
            char v325 = (void *)(v260 + (v324 & 0xFFFFFFFC));
            char v326 = *(int **)(v147 + 832);
            do
            {
              int v327 = *v326++;
              *v325++ = v262->i64[v327];
              LODWORD(v309) = v309 - 1;
            }
            while (v309);
            unsigned int v283 = v324 + 8 * (v265 >> 2);
          }
          if (v275)
          {
            uint64_t v328 = &v262->i8[4 * *(unsigned int *)(v147 + 796)];
            uint64_t v329 = *(unsigned int *)(v147 + 800);
            memcpy((void *)(v260 + v283), v328, 4 * v329);
            int v330 = *(_DWORD *)(v147 + 804);
            if (v330)
            {
              uint64_t v331 = *(unsigned int **)(v147 + 808);
              unint64_t v332 = (_DWORD *)(v260 + v283 + 4 * v329);
              do
              {
                unsigned int v333 = *v331++;
                *v332++ = *(_DWORD *)(v308 + 4 * v333);
                --v330;
              }
              while (v330);
            }
            v283 += 4 * v275;
            int v262 = a6;
            uint64_t v263 = (uint32x2_t *)(v147 + 612);
          }
          __n128 v240 = (int8x16_t *)&off_242EA7000;
          __n128 v241 = (uint8x16_t *)&off_242EA7000;
          if (v323)
          {
            unint64_t v334 = v261 + v283;
            *(void *)(a1 + 21688) = v334 + 8;
            v262[99].i64[0] = v334;
            uint64_t v335 = (_DWORD *)(v260 + v283);
            uint64_t v336 = *(unsigned __int16 **)(v147 + 736);
            if (*(unsigned char *)(v147 + 784))
            {
              uint64_t v337 = *(unsigned __int16 **)(v147 + 760);
              for (uint64_t k = (*(void *)(v147 + 768) - (void)v337) >> 1; k; LODWORD(k) = k - 1)
              {
                int v339 = *v337++;
                v335[v339] = *(_DWORD *)(v262->i64[v336[2 * v339]] + 4 * v336[2 * v339 + 1]);
              }
            }
            else
            {
              do
              {
                *v335++ = *(_DWORD *)(v262->i64[*v336] + 4 * v336[1]);
                v336 += 2;
                LODWORD(v323) = v323 - 1;
              }
              while (v323);
            }
          }
LABEL_296:
          uint64_t v340 = *(void *)(v147 + 1936);
          memcpy(v264, *(const void **)v340, *(void *)(v340 + 8) - *(void *)v340);
          if (*(unsigned char *)(v340 + 200))
          {
            v341.i64[0] = v261;
            v341.i64[1] = v261 >> 5;
            *(int8x16_t *)&v264[*(unsigned int *)(v340 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v264[*(unsigned int *)(v340 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v341, v240[207]), v241[208]));
          }
          uint64_t v342 = *(unsigned int **)(v340 + 176);
          uint64_t v343 = *(unsigned int **)(v340 + 184);
          if (v342 != v343)
          {
            int8x16_t v344 = v240[207];
            uint8x16_t v345 = v241[208];
            do
            {
              v346.i64[0] = v262->i64[v342[1]] + *v342;
              v346.i64[1] = (unint64_t)v346.i64[0] >> 5;
              *(int8x16_t *)&v264[v342[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v264[v342[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v346, v344), v345));
              v342 += 3;
            }
            while (v342 != v343);
          }
          unint64_t v347 = (unint64_t)&v264[v489];
          uint64_t v348 = *v496;
          if (*v496)
          {
            uint64_t v350 = *(const void **)v340;
            uint64_t v349 = *(void *)(v340 + 8);
            int v351 = *(_DWORD *)(v147 + 2344);
            LODWORD(v352) = *((_DWORD *)v348 + 2);
            int v353 = v352 + 1;
            if (*((_DWORD *)v348 + 3) >= (v352 + 1))
            {
              uint64_t v356 = *v348;
            }
            else
            {
              unsigned int v354 = -__clz(v352);
              uint64_t v355 = (char *)malloc_type_malloc(40 << (v354 & 0x1F), 0x10800400D7C94D2uLL);
              uint64_t v356 = v355;
              int v357 = 1 << v354;
              uint64_t v352 = *((unsigned int *)v348 + 2);
              if (v352)
              {
                memcpy(v355, *v348, 40 * v352);
                free(*v348);
                LODWORD(v352) = *((_DWORD *)v348 + 2);
              }
              *((_DWORD *)v348 + 3) = v357;
              *uint64_t v348 = v356;
            }
            uint64_t v358 = &v356[40 * v352];
            *(_DWORD *)uint64_t v358 = 6;
            *((void *)v358 + 1) = v347;
            *((void *)v358 + 2) = v264;
            *((void *)v358 + 3) = (v349 - v350);
            *((_DWORD *)v358 + 8) = v351;
            *((_DWORD *)v348 + 2) = v353;
            uint64_t v147 = a3;
            uint64_t v263 = v491;
          }
          unsigned int v359 = *(_DWORD *)(a2 + 3196);
          int v360 = *(_DWORD *)(a2 + 3188);
          __int32 v361 = *(_DWORD *)(v147 + 3192);
          int v362 = *(_DWORD *)(v147 + 3204);
          __int32 v363 = *(_DWORD *)(v147 + 3212);
          int8x8_t v149 = (int8x8_t)v263[326];
          int v364 = *(_DWORD *)(v481 + 836);
          if (v479) {
            int v365 = 16;
          }
          else {
            int v365 = 48;
          }
          unsigned int v366 = *(_DWORD *)(v147 + 3196) & 0xFFFFFFCF | v365;
          int v367 = *(_DWORD *)(v147 + 3200) & 0xFFF0000 | *(_DWORD *)(a2 + 3184) & 0xFFF;
          if (v364) {
            unsigned int v359 = v359 & 0xFFFFFF80 | ((v364 + 1023) >> 10) & 0x7F;
          }
          uint64_t v150 = a4;
          uint64_t v151 = v493;
          char v152 = v487;
          int v368 = *(_DWORD *)(a1 + 22868);
          uint64_t v369 = (int8x8_t *)v493[6];
          v369->i32[0] = 1073745196;
          v369->i32[1] = v361;
          v369[1].i32[0] = v366;
          v369[1].i32[1] = ((_BYTE)v368 - 1) & 7;
          v369[2].i32[0] = v367;
          v369[2].i32[1] = ((unint64_t)v477 >> 16) & 0xFFC00000 | v360 & 0x3FFFFF;
          v369[3].i32[0] = (unint64_t)v477 >> 6;
          v369[3].i32[1] = (v347 >> 16) & 0xFFC00000 | v362 & 0x3FFFFF;
          v369[4].i32[0] = v347 >> 6;
          v369[4].i32[1] = v359;
          v369[5].i32[0] = v363;
          v369[5].i32[1] = (v483 >> 21) & 0x3FF800 | v483 & 0x7FF | (v486 << 22);
          v369[6] = v149;
          v493[6] = v369 + 7;
          goto LABEL_314;
        }
      }
      else
      {
        if (v271)
        {
          int v285 = v271;
          long long v286 = (void *)v260;
          uint64_t v287 = v269;
          do
          {
            int v288 = *v287++;
            *v286++ = v262->i64[v288];
            --v285;
          }
          while (v285);
        }
        if (*(_DWORD *)(v147 + 872))
        {
          uint64_t v289 = *(void **)(v147 + 856);
          if (v289 != (void *)(v147 + 864))
          {
            do
            {
              *(_DWORD *)(v260 + 4 * *((unsigned int *)v289 + 7)) |= *((_DWORD *)v289 + 8);
              int v315 = (void *)v289[1];
              if (v315)
              {
                do
                {
                  uint64_t v316 = v315;
                  int v315 = (void *)*v315;
                }
                while (v315);
              }
              else
              {
                do
                {
                  uint64_t v316 = (void *)v289[2];
                  BOOL v215 = *v316 == (void)v289;
                  uint64_t v289 = v316;
                }
                while (!v215);
              }
              uint64_t v289 = v316;
            }
            while (v316 != (void *)(v147 + 864));
          }
        }
        unsigned int v290 = (v271 + 3) & 0xFFFFFFFC;
        if (v278)
        {
          unsigned int v291 = *(_DWORD *)(v147 + 1008);
          if (v291 >= 4)
          {
            uint64_t v292 = &v269[v290];
            unsigned int v293 = v291 >> 2;
            char v294 = (_OWORD *)(v260 + 8 * v290);
            do
            {
              int v295 = *v292;
              v292 += 4;
              int v296 = &v262->i8[8 * v295];
              long long v297 = *((_OWORD *)v296 + 1);
              *char v294 = *(_OWORD *)v296;
              v294[1] = v297;
              v294 += 2;
              --v293;
            }
            while (v293);
          }
          v290 += v291;
        }
        int v298 = v270 - v268;
        if (v279)
        {
          unsigned int v299 = *(_DWORD *)(v147 + 1012);
          int v300 = (void *)(v260 + 8 * v290);
          if (*(unsigned char *)(v147 + 1736))
          {
            if (v299)
            {
              uint64_t v469 = (int *)(*(void *)(v147 + 640) + 4 * v290);
              do
              {
                int v470 = *v469++;
                *v300++ = v262->i64[v470];
                --v299;
              }
              while (v299);
            }
          }
          else if (v299 >= 4)
          {
            int v301 = (int *)(*(void *)(v147 + 640) + 4 * v290);
            unsigned int v302 = v299 >> 2;
            do
            {
              int v303 = *v301;
              v301 += 4;
              *int v300 = v262->i64[v303];
              v300 += 4;
              --v302;
            }
            while (v302);
          }
        }
        unsigned int v283 = 8 * v298;
        unint64_t v284 = v282 >> 2;
        if (!v268) {
          goto LABEL_262;
        }
      }
      if (v268 >= 4)
      {
        unint64_t v304 = *(uint64_t **)(v147 + 2440);
        unint64_t v305 = v268 >> 2;
        uint64_t v306 = (void *)(v260 + v283);
        do
        {
          uint64_t v307 = *v304;
          v304 += 4;
          *uint64_t v306 = v307;
          v306 += 4;
          --v305;
        }
        while (v305);
      }
      v283 += 8 * v268;
      goto LABEL_262;
    }
    unint64_t v166 = *(unsigned int *)(a2 + 1016);
    uint64_t v167 = *(int **)(a2 + 640);
    uint64_t v168 = (*(void *)(a2 + 648) - (void)v167) >> 2;
    int v169 = *(_DWORD *)(a2 + 1004);
    uint64_t v170 = (*(void *)(a2 + 696) - *(void *)(a2 + 688)) >> 2;
    uint64_t v171 = *(void *)(a2 + 672);
    uint64_t v172 = *(void *)(a2 + 664);
    int v173 = *(_DWORD *)(a2 + 804) + *(_DWORD *)(a2 + 800);
    uint64_t v174 = *(void *)(a2 + 744);
    uint64_t v175 = *(void *)(a2 + 736);
    int v176 = *(unsigned __int8 *)(a2 + 1048);
    int v177 = *(unsigned __int8 *)(a2 + 1049);
    if (*(unsigned char *)(a2 + 1048)) {
      a5[58] = vaddw_u32((uint64x2_t)vdupq_n_s64(v159), *(uint32x2_t *)(a2 + 612));
    }
    if (v177) {
      a5[60].i64[0] = v159 + *(unsigned int *)(a2 + 632);
    }
    uint64_t v178 = 8 * (v170 + v168);
    int v179 = v165 + v164;
    if (v173) {
      a5[64].i64[0] = v178 + v159 + 4 * (v179 + ((v163 >> 1) & 0xFFFFFFFE));
    }
    unint64_t v180 = v171 - v172;
    if (v168 == v166)
    {
      unsigned int v181 = 0;
      unint64_t v182 = v180 >> 2;
      if (!v166)
      {
LABEL_179:
        unint64_t v207 = v163 >> 2;
        if (v170)
        {
          a5[98].i64[1] = v159 + v181;
          uint64_t v208 = (void *)(v158 + v181);
          uint64_t v209 = *(unsigned __int16 **)(a2 + 688);
          if (*(unsigned char *)(a2 + 784))
          {
            uint64_t v210 = *(unsigned __int16 **)(a2 + 712);
            for (uint64_t m = (*(void *)(a2 + 720) - (void)v210) >> 1; m; LODWORD(m) = m - 1)
            {
              int v212 = *v210++;
              v208[v212] = *(void *)(a5->i64[v209[2 * v212]] + 8 * v209[2 * v212 + 1]);
            }
          }
          else
          {
            int v216 = v170;
            do
            {
              *v208++ = *(void *)(a5->i64[*v209] + 8 * v209[1]);
              v209 += 2;
              --v216;
            }
            while (v216);
          }
          v181 += 8 * v170;
        }
        unint64_t v217 = v174 - v175;
        uint64_t v218 = a1 + 88;
        if (v182)
        {
          id v219 = (_DWORD *)(v158 + v181);
          *(void *)(a1 + 7304) = v159 + v181 + 8;
          uint64_t v220 = *(unsigned int **)(a2 + 664);
          int v221 = v182;
          do
          {
            unsigned int v222 = *v220++;
            *v219++ = *(_DWORD *)(v218 + 4 * v222);
            --v221;
          }
          while (v221);
          v181 += 4 * v182;
        }
        unint64_t v223 = v217 >> 2;
        if (v207)
        {
          int v224 = v178 + 4 * v179;
          uint64_t v225 = (void *)(v158 + (v224 & 0xFFFFFFFC));
          uint64_t v226 = *(int **)(a2 + 832);
          do
          {
            int v227 = *v226++;
            *v225++ = a5->i64[v227];
            LODWORD(v207) = v207 - 1;
          }
          while (v207);
          unsigned int v181 = v224 + 8 * (v163 >> 2);
        }
        if (v173)
        {
          int v475 = v173;
          uint64_t v228 = *(unsigned int *)(a2 + 800);
          memcpy((void *)(v158 + v181), (char *)a5 + 4 * *(unsigned int *)(a2 + 796), 4 * v228);
          int v229 = *(_DWORD *)(a2 + 804);
          if (v229)
          {
            unsigned int v230 = *(unsigned int **)(a2 + 808);
            char v231 = (_DWORD *)(v158 + v181 + 4 * v228);
            do
            {
              unsigned int v232 = *v230++;
              *v231++ = *(_DWORD *)(v218 + 4 * v232);
              --v229;
            }
            while (v229);
          }
          v181 += 4 * v475;
          uint64_t v160 = a5;
        }
        if (v223)
        {
          unint64_t v233 = v159 + v181;
          *(void *)(a1 + 7304) = v233 + 8;
          v160[99].i64[0] = v233;
          __n128 v234 = (_DWORD *)(v158 + v181);
          uint64_t v235 = *(unsigned __int16 **)(a2 + 736);
          if (*(unsigned char *)(a2 + 784))
          {
            __n128 v236 = *(unsigned __int16 **)(a2 + 760);
            for (uint64_t n = (*(void *)(a2 + 768) - (void)v236) >> 1; n; LODWORD(n) = n - 1)
            {
              int v238 = *v236++;
              v234[v238] = *(_DWORD *)(v160->i64[v235[2 * v238]] + 4 * v235[2 * v238 + 1]);
            }
          }
          else
          {
            do
            {
              *v234++ = *(_DWORD *)(v160->i64[*v235] + 4 * v235[1]);
              v235 += 2;
              LODWORD(v223) = v223 - 1;
            }
            while (v223);
          }
        }
        goto LABEL_213;
      }
    }
    else
    {
      int v183 = v173;
      if (v169)
      {
        int v184 = v169;
        uint64_t v185 = (void *)v158;
        unint64_t v186 = v167;
        do
        {
          int v187 = *v186++;
          *v185++ = a5->i64[v187];
          --v184;
        }
        while (v184);
      }
      if (*(_DWORD *)(a2 + 872))
      {
        int v188 = *(void **)(a2 + 856);
        if (v188 != (void *)(a2 + 864))
        {
          do
          {
            *(_DWORD *)(v158 + 4 * *((unsigned int *)v188 + 7)) |= *((_DWORD *)v188 + 8);
            __n128 v213 = (void *)v188[1];
            if (v213)
            {
              do
              {
                uint64_t v214 = v213;
                __n128 v213 = (void *)*v213;
              }
              while (v213);
            }
            else
            {
              do
              {
                uint64_t v214 = (void *)v188[2];
                BOOL v215 = *v214 == (void)v188;
                int v188 = v214;
              }
              while (!v215);
            }
            int v188 = v214;
          }
          while (v214 != (void *)(a2 + 864));
        }
      }
      unsigned int v189 = (v169 + 3) & 0xFFFFFFFC;
      if (v176)
      {
        unsigned int v190 = *(_DWORD *)(a2 + 1008);
        if (v190 >= 4)
        {
          uint64_t v191 = &v167[v189];
          unsigned int v192 = v190 >> 2;
          unsigned int v193 = (_OWORD *)(v158 + 8 * v189);
          do
          {
            int v194 = *v191;
            v191 += 4;
            uint64_t v195 = &a5->i8[8 * v194];
            long long v196 = *((_OWORD *)v195 + 1);
            *unsigned int v193 = *(_OWORD *)v195;
            v193[1] = v196;
            v193 += 2;
            --v192;
          }
          while (v192);
        }
        v189 += v190;
      }
      int v173 = v183;
      int v197 = v168 - v166;
      if (v177)
      {
        unsigned int v198 = *(_DWORD *)(a2 + 1012);
        uint64_t v199 = (void *)(v158 + 8 * v189);
        if (*(unsigned char *)(a2 + 1736))
        {
          if (v198)
          {
            uint64_t v467 = (int *)(*(void *)(a2 + 640) + 4 * v189);
            do
            {
              int v468 = *v467++;
              *v199++ = a5->i64[v468];
              --v198;
            }
            while (v198);
          }
        }
        else if (v198 >= 4)
        {
          uint64_t v200 = (int *)(*(void *)(a2 + 640) + 4 * v189);
          unsigned int v201 = v198 >> 2;
          do
          {
            int v202 = *v200;
            v200 += 4;
            *uint64_t v199 = a5->i64[v202];
            v199 += 4;
            --v201;
          }
          while (v201);
        }
      }
      unsigned int v181 = 8 * v197;
      unint64_t v182 = v180 >> 2;
      if (!v166) {
        goto LABEL_179;
      }
    }
    if (v166 >= 4)
    {
      uint64_t v203 = *(uint64_t **)(a2 + 2440);
      unint64_t v204 = v166 >> 2;
      uint64_t v205 = (void *)(v158 + v181);
      do
      {
        uint64_t v206 = *v203;
        v203 += 4;
        *uint64_t v205 = v206;
        v205 += 4;
        --v204;
      }
      while (v204);
    }
    v181 += 8 * v166;
    goto LABEL_179;
  }
LABEL_314:
  if ((v152 & 0x20) != 0)
  {
    uint64_t v370 = (void *)v151[6];
    *uint64_t v370 = *(void *)(v147 + 3376);
    v151[6] = v370 + 1;
  }
  uint64_t v371 = v507;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantAndArguments(*(void **)(a1 + 16), *(void **)(a1 + 24), v150, *(void **)(*(void *)(a1 + 8) + 38976), a7, *(void *)(a1 + 8) + 68760, v507, *(_DWORD *)(*(void *)(a1 + 8) + 38648), v149, *(unsigned char *)(*(void *)(a1 + 8) + 38652));
  if ((v371 & 4) != 0)
  {
    uint64_t v378 = *(void *)(a1 + 8);
    unint64_t v379 = *(void *)(a3 + 3344);
    int v380 = *(_DWORD *)(a3 + 3352);
    unint64_t v381 = HIDWORD(v379);
    LODWORD(v379) = *(_DWORD *)(v378 + 37252) & 0xF0E3FF00 | v379 & 0xF1C00FF;
    *(_DWORD *)(v378 + 37260) = *(_DWORD *)(v378 + 37260) & 0xFFFFFFF8 | (*(_DWORD *)(v378 + 38656) - 1) & 7;
    *(_DWORD *)(v378 + 37264) = v381;
    *(_DWORD *)(v378 + 37252) = v379;
    *(_DWORD *)(v378 + 37256) = v380;
    *(void *)(v378 + 90472) |= 4uLL;
    double v382 = *(void **)(a1 + 24);
    uint64_t v383 = *(void *)(a1 + 8);
    int v499 = *(_DWORD *)(v383 + 37264);
    long long v498 = *(_OWORD *)(v383 + 37248);
    uint64_t v384 = v382[126];
    uint64_t v385 = v382[128] + v384;
    v382[126] = v384 + 20;
    *(_DWORD *)(v384 + 16) = v499;
    *(_OWORD *)uint64_t v384 = v498;
    unint64_t v386 = __ROR8__(v385, 32) & 0xFFFFFFFC000000FFLL | 0x500;
    unint64_t v387 = (unint64_t *)v382[6];
    *unint64_t v387 = v386;
    v382[6] = v387 + 1;
    int v372 = a16;
    if ((v371 & 0x100000000000) == 0)
    {
LABEL_318:
      if ((v371 & 0x1000000000000) == 0) {
        goto LABEL_319;
      }
      goto LABEL_345;
    }
  }
  else
  {
    int v372 = a16;
    if ((v371 & 0x100000000000) == 0) {
      goto LABEL_318;
    }
  }
  if (v372)
  {
    unsigned __int8 v388 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 1456) + 808) + 7833));
    if ((v388 & 1) == 0) {
      goto LABEL_331;
    }
  }
  else if (!a4 || !*(unsigned char *)(a4 + 1050))
  {
    goto LABEL_331;
  }
  if ((*(unsigned char *)(*(void *)(a1 + 8) + 37211) & 7) == 0) {
    *(void *)(*(void *)(*(void *)(a1 + 8) + 38952) + 976) |= 0x10000uLL;
  }
LABEL_331:
  uint64_t v389 = (unsigned int *)(*(void *)(a1 + 8) + 37208);
  if (*(void *)(*(void *)(a1 + 8) + 38616) == 2)
  {
    float v390 = *(float *)(*(void *)(a1 + 8) + 38628) * 16.0;
    float v391 = 1023.5;
  }
  else
  {
    float v390 = *(float *)(*(void *)(a1 + 8) + 38624) * 16.0;
    float v391 = 256.0;
  }
  float v392 = v391;
  if (v390 <= v391) {
    float v392 = v390;
  }
  unsigned int v393 = v392;
  if (v390 < 0.0) {
    unsigned int v393 = 0;
  }
  if (v393) {
    int v394 = ((v393 << 8) + 261888) & 0x3FF00;
  }
  else {
    int v394 = 0;
  }
  *uint64_t v389 = *v389 & 0xFFFC00FF | v394;
  v389[2] = v389[2] & 0xFFFC00FF | v394;
  uint64_t v395 = *(void **)(a1 + 24);
  uint64_t v396 = *(void *)(a1 + 8);
  uint64_t v397 = v396 + 37200;
  int v398 = *(_DWORD *)(v396 + 37200);
  int v399 = *(_DWORD *)(v396 + 37204);
  *(_OWORD *)uint64_t v508 = *(_OWORD *)(v396 + 37208);
  int v400 = *(_DWORD *)(v396 + 37228);
  *(_DWORD *)&v508[16] = *(_DWORD *)(v396 + 37224);
  int v401 = *(_DWORD *)(v396 + 37232);
  v396 += 37228;
  unint64_t v509 = *(void *)(v396 + 8);
  int v510 = *(_DWORD *)(v396 + 16);
  int v402 = *(unsigned __int8 *)(v397 + 1442);
  if (v372) {
    int v403 = 0x10000000;
  }
  else {
    int v403 = 0;
  }
  unsigned int v404 = v399 & 0xEBFFFFFF | v403 | (((v399 & 0x4000000 | v402) != 0) << 26);
  uint64_t v405 = v395[126];
  uint64_t v406 = v395[128] + v405;
  v395[126] = v405 + 28;
  *(_DWORD *)uint64_t v405 = v398;
  *(_DWORD *)(v405 + 4) = v404;
  *(_DWORD *)(v405 + 24) = *(_DWORD *)&v508[16];
  *(_OWORD *)(v405 + 8) = *(_OWORD *)v508;
  uint64_t v407 = (unint64_t *)v395[6];
  *uint64_t v407 = __ROR8__(v406, 32) & 0xFFFFFFFC000000FFLL | 0x700;
  v395[6] = v407 + 1;
  unsigned int v408 = v401 & 0xFBFFFFFF | (((v401 & 0x4000000 | v402) != 0) << 26);
  uint64_t v409 = v395[126];
  uint64_t v410 = v395[128] + v409;
  v395[126] = v409 + 20;
  *(_DWORD *)uint64_t v409 = v400;
  *(_DWORD *)(v409 + 4) = v408;
  *(_DWORD *)(v409 + 16) = v510;
  *(void *)(v409 + 8) = v509;
  uint64_t v411 = __ROR8__(v410, 32);
  uint64_t v412 = (unint64_t *)v395[6];
  *uint64_t v412 = v411 & 0xFFFFFFFC000000FFLL | 0x500;
  v395[6] = v412 + 1;
  uint64_t v371 = v507;
  if ((v507 & 0x1000000000000) == 0)
  {
LABEL_319:
    if ((v371 & 0x2000000000000) == 0) {
      goto LABEL_320;
    }
    goto LABEL_360;
  }
LABEL_345:
  uint64_t v413 = 0;
  uint64_t v414 = *(void **)(a1 + 24);
  uint64_t v415 = *(void *)(a1 + 8);
  unint64_t v416 = (((unint64_t)*(unsigned int *)(v415 + 36660) >> 9) & 0x78) + 10;
  uint64_t v417 = v414[126];
  uint64_t v418 = v414[128];
  v414[126] = v417 + 4 * v416;
  int v419 = *(_DWORD *)(v415 + 36660);
  uint64_t v420 = (unsigned __int16)v419 >> 12;
  *(_DWORD *)uint64_t v417 = v419;
  unint64_t v421 = (void *)(v417 + 4);
  uint64_t v422 = v420 + 1;
  if (v420 >= 7 && (unint64_t)(v417 - (v415 + 36660)) > 0x1F)
  {
    uint64_t v413 = v422 & 0x1C;
    uint64_t v423 = v413;
    unsigned int v424 = &v421[v413];
    long long v425 = *(_OWORD *)(v415 + 36680);
    *(_OWORD *)(v417 + 4) = *(_OWORD *)(v415 + 36664);
    *(_OWORD *)(v417 + 20) = v425;
    if (v413 != 4)
    {
      long long v426 = *(_OWORD *)(v415 + 36712);
      *(_OWORD *)(v417 + 36) = *(_OWORD *)(v415 + 36696);
      *(_OWORD *)(v417 + 52) = v426;
      if (v413 != 8)
      {
        long long v427 = *(_OWORD *)(v415 + 36744);
        *(_OWORD *)(v417 + 68) = *(_OWORD *)(v415 + 36728);
        *(_OWORD *)(v417 + 84) = v427;
        if (v413 != 12)
        {
          long long v428 = *(_OWORD *)(v415 + 36776);
          *(_OWORD *)(v417 + 100) = *(_OWORD *)(v415 + 36760);
          *(_OWORD *)(v417 + 116) = v428;
        }
      }
    }
    if (v413 == v422)
    {
      uint64_t v429 = (uint64_t)&v421[v423 - 1];
      goto LABEL_357;
    }
    unint64_t v421 = (void *)((char *)v421 + v423 * 8);
  }
  int v430 = (uint64_t *)(v415 + 8 * v413 + 36664);
  uint64_t v431 = ((unsigned __int16)v419 >> 12) - v413 + 1;
  unsigned int v424 = v421;
  do
  {
    uint64_t v432 = *v430++;
    *v424++ = v432;
    --v431;
  }
  while (v431);
  uint64_t v429 = (uint64_t)(v424 - 1);
LABEL_357:
  unint64_t v433 = v418 + v417;
  uint64_t v434 = v429 + 12;
  *(_DWORD *)unsigned int v424 = *(_DWORD *)(v415 + 36792);
  unint64_t v435 = (long long *)(v415 + 36796);
  do
  {
    long long v436 = *v435;
    *(void *)(v434 + 16) = *((void *)v435 + 2);
    *(_OWORD *)uint64_t v434 = v436;
    v434 += 24;
    unint64_t v435 = (long long *)((char *)v435 + 24);
    --v422;
  }
  while (v422);
  int v437 = (unint64_t *)v414[6];
  *int v437 = BYTE4(v433) | (v416 << 8) | ((unint64_t)(v433 >> 2) << 34);
  v414[6] = v437 + 1;
  if ((v371 & 0x2000000000000) == 0)
  {
LABEL_320:
    if ((v371 & 0x4000000000000) == 0) {
      return;
    }
    goto LABEL_321;
  }
LABEL_360:
  int v438 = *(void **)(a1 + 24);
  uint64_t v439 = *(void *)(*(void *)(a1 + 8) + 37192);
  uint64_t v440 = *(void *)(*(void *)(a1 + 8) + 38976);
  if (v440)
  {
    uint64_t v441 = *(void *)(v440 + 748);
    int v442 = *(_DWORD *)(v440 + 756);
  }
  else
  {
    uint64_t v441 = 0x1E3CE50800410000;
    int v442 = 160;
  }
  uint64_t v443 = v438[126];
  uint64_t v444 = v438[128] + v443;
  v438[126] = v443 + 12;
  *(void *)uint64_t v443 = v441;
  *(_DWORD *)(v443 + 8) = v442;
  uint64_t v445 = (unint64_t *)v438[6];
  *uint64_t v445 = __ROR8__(v444, 32) & 0xFFFFFFFC000000FFLL | 0x300;
  v438[6] = v445 + 1;
  uint64_t v446 = (void *)v438[126];
  v447 = (char *)v446 + v438[128];
  v438[126] = v446 + 1;
  *uint64_t v446 = v439;
  uint64_t v448 = (unint64_t *)v438[6];
  *uint64_t v448 = __ROR8__(v447, 32) & 0xFFFFFFFC000000FFLL | 0x200;
  v438[6] = v448 + 1;
  if ((v371 & 0x4000000000000) != 0)
  {
LABEL_321:
    uint64_t v373 = *(void **)(a1 + 24);
    uint64_t v374 = *(void *)(*(void *)(a1 + 8) + 37180);
    uint64_t v375 = (void *)v373[42];
    uint64_t v376 = (char *)v375 + v373[44];
    v373[42] = v375 + 1;
    *uint64_t v375 = v374;
    uint64_t v377 = (unint64_t *)v373[6];
    *uint64_t v377 = __ROR8__(v376, 32) & 0xFFFFFFFC000000FFLL | 0x200;
    v373[6] = v377 + 1;
  }
}

void sub_242B48F28(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDepthRanges(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (void *)(result + 38632);
  if ((a2 & 0x80000000000000) == 0 && *(void *)(result + 50000)) {
    return result;
  }
  uint64_t v4 = *(void *)(result + 192);
  uint64_t v5 = v4 + 132;
  if ((unint64_t)(v4 + 132) > *(void *)(result + 184))
  {
    int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(result + 16, 4, 0);
    uint64_t v4 = *(void *)(v2 + 192);
    if (!result) {
      goto LABEL_5;
    }
    uint64_t v5 = v4 + 132;
    if ((unint64_t)(v4 + 132) > *(void *)(v2 + 184)) {
      abort();
    }
  }
  *(void *)(v2 + 200) = v5;
LABEL_5:
  uint64_t v6 = v2 + 38076;
  uint64_t v7 = *(void *)(v2 + 208) + v4;
  *(void *)(v2 + 192) = v4 + 132;
  *(_DWORD *)uint64_t v4 = *(_DWORD *)(v2 + 38076);
  if (*v3)
  {
    uint64_t v8 = v2 + 38116;
    uint64_t v9 = v2 + 38372;
    uint64_t v10 = 40;
    uint64_t v11 = 296;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v10 = 296;
      uint64_t v8 = v2 + 38372;
    }
    float v12 = *(float *)(v6 + v10);
    float v13 = *(float *)(v8 + 4);
    uint64_t v14 = v2 + 38124;
    uint64_t v15 = 48;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v15 = 296;
      uint64_t v14 = v2 + 38372;
    }
    uint64_t v16 = v2 + 38132;
    uint64_t v17 = 56;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v17 = 296;
      uint64_t v16 = v2 + 38372;
    }
    uint64_t v18 = v2 + 38140;
    uint64_t v19 = 64;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v19 = 296;
      uint64_t v18 = v2 + 38372;
    }
    uint64_t v20 = v2 + 38148;
    uint64_t v21 = 72;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v21 = 296;
      uint64_t v20 = v2 + 38372;
    }
    uint64_t v22 = v2 + 38156;
    uint64_t v23 = 80;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v23 = 296;
      uint64_t v22 = v2 + 38372;
    }
    uint64_t v24 = v2 + 38164;
    uint64_t v25 = 88;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v25 = 296;
      uint64_t v24 = v2 + 38372;
    }
    uint64_t v26 = v2 + 38172;
    uint64_t v27 = 96;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v27 = 296;
      uint64_t v26 = v2 + 38372;
    }
    uint64_t v28 = v2 + 38180;
    uint64_t v29 = 104;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v29 = 296;
      uint64_t v28 = v2 + 38372;
    }
    if (v12 >= v13) {
      float v30 = v12;
    }
    else {
      float v30 = v13;
    }
    if (v12 >= v13) {
      float v12 = v13;
    }
    *(float *)(v4 + 4) = v12;
    *(float *)(v4 + 8) = v30;
    float v31 = *(float *)(v6 + v15);
    float v32 = *(float *)(v14 + 4);
    if (v31 >= v32) {
      int v33 = *(_DWORD *)(v6 + v15);
    }
    else {
      int v33 = *(_DWORD *)(v14 + 4);
    }
    if (v31 >= v32) {
      float v31 = *(float *)(v14 + 4);
    }
    *(float *)(v4 + 12) = v31;
    *(_DWORD *)(v4 + 16) = v33;
    float v34 = *(float *)(v6 + v17);
    float v35 = *(float *)(v16 + 4);
    if (v34 >= v35) {
      int v36 = *(_DWORD *)(v6 + v17);
    }
    else {
      int v36 = *(_DWORD *)(v16 + 4);
    }
    if (v34 >= v35) {
      float v34 = *(float *)(v16 + 4);
    }
    *(float *)(v4 + 20) = v34;
    *(_DWORD *)(v4 + 24) = v36;
    float v37 = *(float *)(v6 + v19);
    float v38 = *(float *)(v18 + 4);
    if (v37 >= v38) {
      int v39 = *(_DWORD *)(v6 + v19);
    }
    else {
      int v39 = *(_DWORD *)(v18 + 4);
    }
    if (v37 >= v38) {
      float v37 = *(float *)(v18 + 4);
    }
    *(float *)(v4 + 28) = v37;
    *(_DWORD *)(v4 + 32) = v39;
    float v40 = *(float *)(v6 + v21);
    float v41 = *(float *)(v20 + 4);
    if (v40 >= v41) {
      int v42 = *(_DWORD *)(v6 + v21);
    }
    else {
      int v42 = *(_DWORD *)(v20 + 4);
    }
    if (v40 >= v41) {
      float v40 = *(float *)(v20 + 4);
    }
    *(float *)(v4 + 36) = v40;
    *(_DWORD *)(v4 + 40) = v42;
    float v43 = *(float *)(v6 + v23);
    float v44 = *(float *)(v22 + 4);
    if (v43 >= v44) {
      int v45 = *(_DWORD *)(v6 + v23);
    }
    else {
      int v45 = *(_DWORD *)(v22 + 4);
    }
    if (v43 >= v44) {
      float v43 = *(float *)(v22 + 4);
    }
    *(float *)(v4 + 44) = v43;
    *(_DWORD *)(v4 + 48) = v45;
    float v46 = *(float *)(v6 + v25);
    float v47 = *(float *)(v24 + 4);
    if (v46 >= v47) {
      int v48 = *(_DWORD *)(v6 + v25);
    }
    else {
      int v48 = *(_DWORD *)(v24 + 4);
    }
    if (v46 >= v47) {
      float v46 = *(float *)(v24 + 4);
    }
    *(float *)(v4 + 52) = v46;
    *(_DWORD *)(v4 + 56) = v48;
    float v49 = *(float *)(v6 + v27);
    float v50 = *(float *)(v26 + 4);
    if (v49 >= v50) {
      int v51 = *(_DWORD *)(v6 + v27);
    }
    else {
      int v51 = *(_DWORD *)(v26 + 4);
    }
    if (v49 >= v50) {
      float v49 = *(float *)(v26 + 4);
    }
    *(float *)(v4 + 60) = v49;
    *(_DWORD *)(v4 + 64) = v51;
    float v52 = *(float *)(v6 + v29);
    float v53 = *(float *)(v28 + 4);
    if (v52 >= v53) {
      int v54 = *(_DWORD *)(v6 + v29);
    }
    else {
      int v54 = *(_DWORD *)(v28 + 4);
    }
    if (v52 >= v53) {
      float v52 = *(float *)(v28 + 4);
    }
    *(float *)(v4 + 68) = v52;
    *(_DWORD *)(v4 + 72) = v54;
    uint64_t v55 = v2 + 38188;
    uint64_t v56 = 112;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v56 = 296;
      uint64_t v55 = v2 + 38372;
    }
    float v57 = *(float *)(v6 + v56);
    float v58 = *(float *)(v55 + 4);
    uint64_t v59 = v2 + 38196;
    uint64_t v60 = 120;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v60 = 296;
      uint64_t v59 = v2 + 38372;
    }
    uint64_t v61 = v2 + 38204;
    uint64_t v62 = 128;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v62 = 296;
      uint64_t v61 = v2 + 38372;
    }
    int32x2_t result = v2 + 38212;
    uint64_t v63 = 136;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v63 = 296;
      int32x2_t result = v2 + 38372;
    }
    uint64_t v64 = v2 + 38220;
    uint64_t v65 = 144;
    if (!*(unsigned char *)(v2 + 38084))
    {
      uint64_t v65 = 296;
      uint64_t v64 = v2 + 38372;
    }
    uint64_t v66 = v2 + 38228;
    uint64_t v67 = 152;
    if (*(unsigned char *)(v2 + 38084))
    {
      uint64_t v11 = 160;
      uint64_t v9 = v2 + 38236;
    }
    else
    {
      uint64_t v67 = 296;
      uint64_t v66 = v2 + 38372;
    }
    if (v57 >= v58) {
      float v68 = v57;
    }
    else {
      float v68 = v58;
    }
    if (v57 >= v58) {
      float v57 = v58;
    }
    *(float *)(v4 + 76) = v57;
    *(float *)(v4 + 80) = v68;
    float v69 = *(float *)(v6 + v60);
    float v70 = *(float *)(v59 + 4);
    if (v69 >= v70) {
      int v71 = *(_DWORD *)(v6 + v60);
    }
    else {
      int v71 = *(_DWORD *)(v59 + 4);
    }
    if (v69 >= v70) {
      float v69 = *(float *)(v59 + 4);
    }
    *(float *)(v4 + 84) = v69;
    *(_DWORD *)(v4 + 88) = v71;
    float v72 = *(float *)(v6 + v62);
    float v73 = *(float *)(v61 + 4);
    if (v72 >= v73) {
      int v74 = *(_DWORD *)(v6 + v62);
    }
    else {
      int v74 = *(_DWORD *)(v61 + 4);
    }
    if (v72 >= v73) {
      float v72 = *(float *)(v61 + 4);
    }
    *(float *)(v4 + 92) = v72;
    *(_DWORD *)(v4 + 96) = v74;
    float v75 = *(float *)(v6 + v63);
    float v76 = *(float *)(result + 4);
    if (v75 >= v76) {
      int v77 = *(_DWORD *)(v6 + v63);
    }
    else {
      int v77 = *(_DWORD *)(result + 4);
    }
    if (v75 >= v76) {
      float v75 = *(float *)(result + 4);
    }
    *(float *)(v4 + 100) = v75;
    *(_DWORD *)(v4 + 104) = v77;
    float v78 = *(float *)(v6 + v65);
    float v79 = *(float *)(v64 + 4);
    if (v78 >= v79) {
      int v80 = *(_DWORD *)(v6 + v65);
    }
    else {
      int v80 = *(_DWORD *)(v64 + 4);
    }
    if (v78 >= v79) {
      float v78 = *(float *)(v64 + 4);
    }
    *(float *)(v4 + 108) = v78;
    *(_DWORD *)(v4 + 112) = v80;
    float v81 = *(float *)(v6 + v67);
    float v82 = *(float *)(v66 + 4);
    if (v81 >= v82) {
      int v83 = *(_DWORD *)(v6 + v67);
    }
    else {
      int v83 = *(_DWORD *)(v66 + 4);
    }
    if (v81 >= v82) {
      float v81 = *(float *)(v66 + 4);
    }
    *(float *)(v4 + 116) = v81;
    *(_DWORD *)(v4 + 120) = v83;
    float v84 = *(float *)(v6 + v11);
    float v85 = *(float *)(v9 + 4);
    if (v84 >= v85) {
      int v86 = *(_DWORD *)(v6 + v11);
    }
    else {
      int v86 = *(_DWORD *)(v9 + 4);
    }
    if (v84 >= v85) {
      float v84 = *(float *)(v9 + 4);
    }
    *(float *)(v4 + 124) = v84;
    *(_DWORD *)(v4 + 128) = v86;
  }
  else
  {
    *(void *)&long long v87 = -1;
    *((void *)&v87 + 1) = -1;
    *(_OWORD *)(v4 + 100) = v87;
    *(_OWORD *)(v4 + 116) = v87;
    *(_OWORD *)(v4 + 68) = v87;
    *(_OWORD *)(v4 + 84) = v87;
    *(_OWORD *)(v4 + 36) = v87;
    *(_OWORD *)(v4 + 52) = v87;
    *(_OWORD *)(v4 + 4) = v87;
    *(_OWORD *)(v4 + 20) = v87;
  }
  uint64_t v88 = *(void *)(*(void *)(v2 + 40) + 288) + (int)*MEMORY[0x263F4B188];
  v3[1421] = v7;
  v3[1486] = 0;
  v3[1354] = 0;
  *(void *)(v2 + 78984) = v88;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectBufferResource(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v5 = result;
  if (a3) {
    int v6 = 3;
  }
  else {
    int v6 = 1;
  }
  if (a2 - 47 > 0x11 || ((1 << (a2 - 47)) & 0x277B3) == 0)
  {
    uint64_t v7 = *(uint64_t **)(result + 8 * a2 + 9408);
    if (v7)
    {
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(result + 8) + 1592), v7, 6u, a2, v6);
      int32x2_t result = IOGPUResourceListAddResource();
      if (a2 > 0x22) {
        return result;
      }
      uint64_t v8 = *(void *)(v5 + 8 * a2 + 13000);
      if (!v8) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(*(void *)(v5 + 8) + 1592), v8, v6);
    }
    else
    {
      if (!a4) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(result + 8) + 1592), 0, 6u, a2, v6);
    }
  }

  return IOGPUResourceListAddResource();
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshBufferResource(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v5 = result;
  if (a3) {
    int v6 = 3;
  }
  else {
    int v6 = 1;
  }
  if (a2 - 47 > 0x11 || ((1 << (a2 - 47)) & 0x277B3) == 0)
  {
    uint64_t v7 = *(uint64_t **)(result + 8 * a2 + 23656);
    if (v7)
    {
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(result + 8) + 1592), v7, 7u, a2, v6);
      int32x2_t result = IOGPUResourceListAddResource();
      if (a2 > 0x22) {
        return result;
      }
      uint64_t v8 = *(void *)(v5 + 8 * a2 + 27248);
      if (!v8) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(*(void *)(v5 + 8) + 1592), v8, v6);
    }
    else
    {
      if (!a4) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(result + 8) + 1592), 0, 7u, a2, v6);
    }
  }

  return IOGPUResourceListAddResource();
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectTextureResources(uint64_t a1, unsigned int a2, int a3)
{
  if (a3) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  int v5 = 3 * a2;
  uint64_t v6 = a1 + 24 * a2;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(a1 + 8) + 1592), *(uint64_t **)(v6 + 9928), 8u, a2, v4);
  if (*(void *)(v6 + 9928))
  {
    IOGPUResourceListAddResource();
    if (*(void *)(a1 + 8 * (v5 + 1) + 9928)) {
      IOGPUResourceListAddResource();
    }
    if (*(void *)(a1 + 8 * (v5 + 2) + 9928))
    {
      IOGPUResourceListAddResource();
    }
  }
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshTextureResources(uint64_t a1, unsigned int a2, int a3)
{
  if (a3) {
    int v4 = 3;
  }
  else {
    int v4 = 1;
  }
  int v5 = 3 * a2;
  uint64_t v6 = a1 + 24 * a2;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(*(void *)(a1 + 8) + 1592), *(uint64_t **)(v6 + 24176), 9u, a2, v4);
  if (*(void *)(v6 + 24176))
  {
    IOGPUResourceListAddResource();
    if (*(void *)(a1 + 8 * (v5 + 1) + 24176)) {
      IOGPUResourceListAddResource();
    }
    if (*(void *)(a1 + 8 * (v5 + 2) + 24176))
    {
      IOGPUResourceListAddResource();
    }
  }
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentBufferResource(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v5 = result;
  if (a3) {
    int v6 = 12;
  }
  else {
    int v6 = 4;
  }
  if (a2 - 47 > 0x11 || ((1 << (a2 - 47)) & 0x277B3) == 0)
  {
    uint64_t v7 = *(uint64_t **)(result + 8 * a2 + 78704);
    if (v7)
    {
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(result + 1592), v7, 1u, a2, v6);
      int32x2_t result = IOGPUResourceListAddResource();
      if (a2 > 0x22) {
        return result;
      }
      uint64_t v8 = *(void *)(v5 + 8 * a2 + 85648);
      if (!v8) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v5 + 1592), v8, v6);
    }
    else
    {
      if (!a4) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(result + 1592), 0, 1u, a2, v6);
    }
  }

  return IOGPUResourceListAddResource();
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveDispatchMeshDatabufferSpace(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *(void **)(result + 24);
  uint64_t v11 = (unint64_t *)v10[6];
  if ((unint64_t)v11 + 180 > v10[5])
  {
    int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(result + 24), 0, 0);
    if (result)
    {
      uint64_t v41 = v10[6];
      if ((unint64_t)(v41 + 180) > v10[5]) {
        goto LABEL_79;
      }
      v10[7] = v41 + 180;
      *uint64_t v11 = __ROR8__(v10[8] + v41, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    v10[7] = (char *)v11 + 180;
  }
  float v12 = *(void **)(v9 + 24);
  if (a3)
  {
    uint64_t v13 = *(unsigned int *)(a3 + 608);
    uint64_t v14 = v12[46];
    if (v14) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = v12[46];
    if (v14) {
      goto LABEL_7;
    }
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v9 + 24), 10, 0);
  if (!result) {
    goto LABEL_79;
  }
  uint64_t v14 = v12[46];
LABEL_7:
  uint64_t v15 = v13 + 31;
  unint64_t v16 = v14 + v15;
  if (v16 <= v12[45])
  {
LABEL_8:
    v12[47] = v16;
    goto LABEL_9;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 10, 0);
  if (result)
  {
    unint64_t v16 = v12[46] + v15;
    if (v16 > v12[45]) {
      goto LABEL_79;
    }
    goto LABEL_8;
  }
LABEL_9:
  if (a4)
  {
    uint64_t v17 = *(unsigned int *)(a4 + 608);
    uint64_t v18 = v12[46];
    if (v18) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = v12[46];
    if (v18) {
      goto LABEL_13;
    }
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 10, 0);
  if (!result) {
    goto LABEL_79;
  }
  uint64_t v18 = v12[46];
LABEL_13:
  uint64_t v19 = v17 + 31;
  uint64_t v20 = v12[47];
  unint64_t v21 = v20 + v19;
  if ((unint64_t)(v20 + v19) <= v12[45])
  {
LABEL_14:
    v12[47] = v21;
    goto LABEL_15;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 10, 0);
  if (result)
  {
    unint64_t v21 = v12[46] + v19 + v20 - v18;
    if (v21 > v12[45]) {
      goto LABEL_79;
    }
    goto LABEL_14;
  }
LABEL_15:
  unint64_t v22 = v12[126] + 636;
  if (v22 <= v12[125])
  {
LABEL_16:
    v12[127] = v22;
    goto LABEL_17;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 30, 0);
  if (result)
  {
    unint64_t v22 = v12[126] + 636;
    if (v22 > v12[125]) {
      goto LABEL_79;
    }
    goto LABEL_16;
  }
LABEL_17:
  if ((a2 & 0xFE3F80030) == 0) {
    goto LABEL_22;
  }
  uint64_t v23 = (*(_DWORD *)(*(void *)(a3 + 1936) + 8) - **(_DWORD **)(a3 + 1936)) + 63;
  unint64_t v24 = v12[25];
  uint64_t v25 = v12[26];
  uint64_t v26 = v25 + v23;
  if (v25 + v23 <= v24) {
    goto LABEL_19;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 5, 0);
  unint64_t v24 = v12[25];
  uint64_t v25 = v12[26];
  if (result)
  {
    uint64_t v26 = v25 + v23;
    if (v25 + v23 > v24) {
      goto LABEL_79;
    }
LABEL_19:
    v12[27] = v26;
    goto LABEL_20;
  }
  uint64_t v26 = v12[27];
LABEL_20:
  uint64_t v27 = (*(_DWORD *)(*(void *)(a4 + 1936) + 8) - **(_DWORD **)(a4 + 1936)) + 63;
  unint64_t v28 = v26 + v27;
  if (v26 + v27 <= v24)
  {
LABEL_21:
    v12[27] = v28;
    goto LABEL_22;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 5, 0);
  if (result)
  {
    unint64_t v28 = v12[26] + v27 + v26 - v25;
    if (v28 > v12[25]) {
      goto LABEL_79;
    }
    goto LABEL_21;
  }
LABEL_22:
  if ((a2 & 0xF8000000002) == 0) {
    goto LABEL_27;
  }
  uint64_t v29 = (*(_DWORD *)(*(void *)(a5 + 1936) + 8) - **(_DWORD **)(a5 + 1936)) + 63;
  unint64_t v30 = v12[30] + v29;
  if (v30 <= v12[29]) {
    goto LABEL_24;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 6, 0);
  if (result)
  {
    unint64_t v30 = v12[30] + v29;
    if (v30 > v12[29]) {
      goto LABEL_79;
    }
LABEL_24:
    v12[31] = v30;
  }
  uint64_t v31 = *(unsigned int *)(a5 + 608) + 31;
  unint64_t v32 = v12[50] + v31;
  if (v32 <= v12[49])
  {
LABEL_26:
    v12[51] = v32;
    goto LABEL_27;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v12, 11, 0);
  if (result)
  {
    unint64_t v32 = v12[50] + v31;
    if (v32 > v12[49]) {
      goto LABEL_79;
    }
    goto LABEL_26;
  }
LABEL_27:
  int v33 = *(void **)(v9 + 24);
  unint64_t v34 = v33[42] + 8;
  if (v34 <= v33[41])
  {
LABEL_28:
    v33[43] = v34;
    goto LABEL_29;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v9 + 24), 9, 0);
  if (result)
  {
    unint64_t v34 = v33[42] + 8;
    if (v34 > v33[41]) {
      goto LABEL_79;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t v35 = *(void *)(v9 + 8);
  if (!*(unsigned char *)(*(void *)(*(void *)(v35 + 1456) + 808) + 5106))
  {
    uint64_t v36 = 16 * *(unsigned int *)(v35 + 38076);
    unint64_t v37 = *(void *)(v35 + 320) + v36;
    if (v37 > *(void *)(v35 + 312))
    {
      int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v35 + 16, 8, 1);
      if (result)
      {
        unint64_t v42 = *(void *)(v35 + 320) + v36;
        if (v42 > *(void *)(v35 + 312)) {
          goto LABEL_79;
        }
        *(void *)(v35 + 328) = v42;
        *(void *)(*(void *)(v35 + 38952) + 752) = *(void *)(*(void *)(v35 + 40) + 512)
                                                      + *(void *)(*(void *)(v35 + 40) + 536)
                                                      - *(void *)(*(void *)(v35 + 40) + 520);
      }
    }
    else
    {
      *(void *)(v35 + 328) = v37;
    }
  }
  float v38 = *(void **)(v9 + 8);
  if (*(unsigned char *)(*(void *)(v38[182] + 808) + 5105)) {
    return result;
  }
  uint64_t v39 = v38[36];
  if (!v39)
  {
    int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v38 + 2, 7, 0);
    if (!result) {
      goto LABEL_79;
    }
    uint64_t v39 = v38[36];
  }
  unint64_t v40 = v39 + 12;
  if (v40 <= v38[35])
  {
    v38[37] = v40;
    return result;
  }
  int32x2_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v38 + 2, 7, 1);
  if (result)
  {
    uint64_t v43 = v38[36];
    if ((unint64_t)(v43 + 12) <= v38[35])
    {
      v38[37] = v43 + 12;
      if (!v43) {
        int32x2_t result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v38 + 2);
      }
      *(void *)(v38[4869] + 760) = *(void *)(v38[5] + 448)
                                     + *(void *)(v38[5] + 472)
                                     - *(void *)(v38[5] + 456);
      return result;
    }
LABEL_79:
    abort();
  }
  return result;
}

void *AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 2;
  uint64_t v3 = result[9];
  if ((unint64_t)(v3 + 104) > result[7])
  {
    uint64_t v13 = (unint64_t *)result[8];
    int32x2_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(result + 2, 0, 0);
    if (result)
    {
      uint64_t v14 = v1[8];
      unint64_t v15 = v14 + v3 - (void)v13 + 104;
      if (v15 > v1[7]) {
        goto LABEL_21;
      }
      v1[9] = v15;
      *uint64_t v13 = __ROR8__(v1[10] + v14, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    result[9] = v3 + 104;
  }
  uint64_t v4 = *(void *)(*(void *)(v1[182] + 808) + 5856);
  uint64_t v5 = *(unsigned int *)(v4 + 16) + 31;
  uint64_t v6 = v1[21];
  unint64_t v7 = v6 + v5;
  if ((unint64_t)(v6 + v5) <= v1[19])
  {
LABEL_4:
    v1[21] = v7;
    goto LABEL_5;
  }
  uint64_t v16 = v1[20];
  int32x2_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 3, 0);
  if (result)
  {
    unint64_t v7 = v1[20] + v6 - v16 + v5;
    if (v7 > v1[19]) {
      goto LABEL_21;
    }
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v8 = v1[129];
  unint64_t v9 = v8 + 88;
  if ((unint64_t)(v8 + 88) <= v1[127])
  {
LABEL_6:
    v1[129] = v9;
    goto LABEL_7;
  }
  uint64_t v17 = v1[128];
  int32x2_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 30, 0);
  if (result)
  {
    unint64_t v9 = v1[128] + v8 - v17 + 88;
    if (v9 > v1[127]) {
      goto LABEL_21;
    }
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v10 = (*(_DWORD *)(*(void *)(v4 + 1344) + 8) - **(_DWORD **)(v4 + 1344)) + 63;
  uint64_t v11 = v1[29];
  unint64_t v12 = v11 + v10;
  if ((unint64_t)(v11 + v10) <= v1[27])
  {
LABEL_8:
    v1[29] = v12;
    return result;
  }
  uint64_t v18 = v1[28];
  int32x2_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v2, 5, 0);
  if (result)
  {
    unint64_t v12 = v1[28] + v11 - v18 + v10;
    if (v12 <= v1[27]) {
      goto LABEL_8;
    }
LABEL_21:
    abort();
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceDepthBiasBufferReserve(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4, unsigned char *a5, void *a6, int8x16_t a7, double a8, double a9, int8x16_t a10)
{
  *a3 = -1;
  *a4 = 0xDE876B1A5;
  uint64_t result = *(void *)(*(void *)(a1 + 1456) + 808);
  if (*(unsigned char *)(result + 5105) && (*(unsigned char *)(a2 + 5) & 0x40) != 0)
  {
    a7.i32[0] = *(_DWORD *)(a1 + 38424);
    float v16 = *(float *)(a1 + 38428);
    float v17 = *(float *)(a1 + 38432);
    a10.i32[0] = 931135616;
    v18.i64[0] = 0x8000000080000000;
    v18.i64[1] = 0x8000000080000000;
    LODWORD(v19) = vbslq_s8(v18, a10, a7).u32[0];
    if (*(_DWORD *)(*(void *)(a1 + 1968) + 3932)) {
      *(float *)a7.i32 = v19 + (float)(*(float *)a7.i32 * 0.000015259);
    }
    uint64_t v21 = 0;
    __int16 v20 = 0;
    uint64_t result = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDepthBiasIndex(result, *(void *)(*(void *)(a1 + 38952) + 760), &v21, (unsigned char *)&v20 + 1, &v20, *(float *)a7.i32, v16, v17);
    if ((_BYTE)v20)
    {
      if (HIBYTE(v20))
      {
        *a3 = result;
        *a4 = v21;
      }
      else
      {
        *a5 = 1;
        *a6 |= 4uLL;
      }
    }
    else
    {
      *a5 = 1;
    }
  }
  return result;
}

unint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceScissorBufferReserve(unint64_t result, unint64_t *a2, _DWORD *a3, void *a4, unsigned char *a5, unsigned char *a6, void *a7)
{
  *a3 = -1;
  *a4 = 4123088130;
  *a5 = 0;
  if (*(unsigned char *)(*(void *)(*(void *)(result + 1456) + 808) + 5106))
  {
    unint64_t v7 = *a2;
    if ((*a2 & 0x200000000000) != 0)
    {
      unint64_t v13 = result;
      uint64_t v14 = (unsigned char *)(result + 38074);
      int v15 = *(unsigned __int8 *)(result + 38112);
      uint64_t v17 = result + 37280;
      uint64_t result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateClipRegions(result + 37280, a2);
      *a5 = result;
      if (!*v14)
      {
        uint64_t v16 = (v7 >> 54) & 1;
        if (v15) {
          LODWORD(v16) = 0;
        }
        if ((result | v16) == 1)
        {
          uint64_t result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::canUseScissorConfigReg(v17);
          if ((result & 1) == 0)
          {
            uint64_t result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::anyPartialScreenClip(v17);
            if (result)
            {
              uint64_t v19 = 0;
              __int16 v18 = 0;
              uint64_t result = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateScissorIndex(*(void *)(*(void *)(v13 + 1456) + 808), v17, 0, *(void *)(*(void *)(v13 + 38952) + 752), &v19, (unsigned char *)&v18 + 1, &v18);
              if ((_BYTE)v18)
              {
                if (HIBYTE(v18))
                {
                  *a3 = result;
                  *a4 = v19;
                }
                else
                {
                  *a6 = 1;
                  *a7 |= 2uLL;
                }
              }
              else
              {
                *a6 = 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(uint64_t a1, unint64_t *a2, char a3, int a4)
{
  BOOL v7 = *(void *)(*(void *)(a1 + 1496) + 520) == 0;
  uint64_t v8 = *(void *)(a1 + 1456);
  uint64_t v9 = *(void *)(v8 + 808);
  if (*(unsigned char *)(v9 + 5106))
  {
    uint64_t v10 = (os_unfair_lock_s *)(v9 + 7656);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 7656));
    LODWORD(v9) = *(_DWORD *)(v9 + 7696);
    os_unfair_lock_unlock(v10);
    uint64_t v8 = *(void *)(a1 + 1456);
  }
  else
  {
    uint64_t v9 = (*(void *)(a1 + 320) - *(void *)(*(void *)(a1 + 40) + 536)) >> 4;
  }
  if (v9 <= 0xFFFE)
  {
    uint64_t v12 = *(void *)(v8 + 808);
    if (*(unsigned char *)(v12 + 5106))
    {
      unint64_t v13 = (os_unfair_lock_s *)(v12 + 7656);
      os_unfair_lock_lock((os_unfair_lock_t)(v12 + 7656));
      unsigned int v14 = *(_DWORD *)(v12 + 7696);
      os_unfair_lock_unlock(v13);
      BOOL v15 = v14 > 0xFFFE;
      uint64_t v8 = *(void *)(a1 + 1456);
    }
    else
    {
      BOOL v15 = *(void *)(a1 + 312) - *(void *)(a1 + 320) < 0x10uLL;
    }
    if (v15) {
      char v11 = 2;
    }
    else {
      char v11 = 0;
    }
  }
  else
  {
    char v11 = 2;
  }
  uint64_t v16 = *(void *)(v8 + 808);
  if (*(unsigned char *)(v16 + 5105))
  {
    uint64_t v17 = (os_unfair_lock_s *)(v16 + 7616);
    os_unfair_lock_lock((os_unfair_lock_t)(v16 + 7616));
    unint64_t v18 = *(void *)(v16 + 7640);
    os_unfair_lock_unlock(v17);
  }
  else
  {
    uint64_t v19 = *(void *)(a1 + 288);
    if (!v19)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 288);
      if (!v19)
      {
        AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
        uint64_t v19 = 0;
      }
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v19 - *(void *)(*(void *)(a1 + 40) + 472)) >> 2);
  }
  uint64_t v20 = *(void *)(a1 + 1456);
  if (v18 <= 0xFFFE)
  {
    uint64_t v22 = *(void *)(v20 + 808);
    if (*(unsigned char *)(v22 + 5105))
    {
      uint64_t v23 = (os_unfair_lock_s *)(v22 + 7616);
      os_unfair_lock_lock((os_unfair_lock_t)(v22 + 7616));
      unsigned int v24 = *(_DWORD *)(v22 + 7640);
      os_unfair_lock_unlock(v23);
      BOOL v25 = v24 > 0xFFFE;
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 288);
      if (!v26)
      {
        AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(a1 + 16);
        uint64_t v26 = *(void *)(a1 + 288);
      }
      BOOL v25 = (unint64_t)(*(void *)(a1 + 280) - v26) < 0xC;
    }
    if (v25) {
      char v21 = 4;
    }
    else {
      char v21 = 0;
    }
    uint64_t v20 = *(void *)(a1 + 1456);
  }
  else
  {
    char v21 = 4;
  }
  char v27 = v7 | a3 | v11;
  uint64_t v28 = *(void *)(v20 + 808);
  if (*(unsigned char *)(v28 + 5106) && (v27 & 2) != 0)
  {
    AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::resetScissorBuffer(v28);
    uint64_t v28 = *(void *)(*(void *)(a1 + 1456) + 808);
  }
  char v29 = v21 | v27;
  if (*(unsigned char *)(v28 + 5105) && (v29 & 4) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 7616));
    std::__tree<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::__map_value_compare<AGX::scissorMapInfo<AGX::HAL200::Encoders>,std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>,std::less<AGX::scissorMapInfo<AGX::HAL200::Encoders>>,true>,std::allocator<std::__value_type<AGX::scissorMapInfo<AGX::HAL200::Encoders>,unsigned int>>>::destroy(*(void **)(v28 + 7632));
    *(void *)(v28 + 7624) = v28 + 7632;
    *(void *)(v28 + 7640) = 0;
    *(void *)(v28 + 7632) = 0;
    uint64_t v30 = *(void *)(v28 + 7648);
    os_unfair_lock_lock((os_unfair_lock_t)(v30 + 48));
    *(void *)(v30 + 32) = 0;
    uint64_t v31 = *(void **)(v30 + 8);
    *(void *)(v30 + 8) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 48));

    os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 7616));
  }
  uint64_t v32 = a1 + 36360;
  for (uint64_t i = *(void **)(a1 + 38936); i; uint64_t i = (void *)*i)
    (*(void (**)(void))(i[1] + 16))();
  unint64_t v34 = *(_OWORD **)(a1 + 38952);
  long long v35 = v34[88];
  v34[44] = v34[87];
  v34[45] = v35;
  v34[46] = v34[89];
  uint64_t v36 = *(void *)(a1 + 38952);
  *(unsigned char *)(v36 + 1618) = 0;
  long long v37 = *(_OWORD *)(v36 + 1472);
  long long v38 = *(_OWORD *)(v36 + 1456);
  *(_OWORD *)(v36 + 528) = *(_OWORD *)(v36 + 1440);
  *(_OWORD *)(v36 + 544) = v38;
  long long v39 = *(_OWORD *)(v36 + 1552);
  *(_OWORD *)(v36 + 624) = *(_OWORD *)(v36 + 1536);
  *(_OWORD *)(v36 + 640) = v39;
  long long v40 = *(_OWORD *)(v36 + 1520);
  *(_OWORD *)(v36 + 592) = *(_OWORD *)(v36 + 1504);
  *(_OWORD *)(v36 + 608) = v40;
  long long v41 = *(_OWORD *)(v36 + 1488);
  *(_OWORD *)(v36 + 560) = v37;
  *(_OWORD *)(v36 + 576) = v41;
  IOGPUResourceListAddResource();
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endRenderPassCommon(a1, 0, 1, 1, 1, v42, v43, v44);
  *(unsigned char *)(a1 + 36625) = 0;
  ++*(_DWORD *)(a1 + 90580);
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginRenderPass(a1);
  IOGPUResourceListAddResource();
  int v45 = *(unsigned int **)(a1 + 38976);
  if (v45)
  {
    if (v45[160])
    {
      unint64_t v46 = 0;
      float v47 = v45 + 22;
      unsigned int v48 = v45[161] | v45[162];
      do
      {
        if ((v48 >> v46))
        {
          IOGPUResourceListAddResource();
          int v45 = *(unsigned int **)(a1 + 38976);
        }
        ++v46;
        v47 += 6;
      }
      while (v46 < v45[160]);
    }
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources((uint64_t)v45);
  }
  if (*(void *)(a1 + 38960))
  {
    uint64_t v49 = *(void *)(a1 + 38976);
    *(_DWORD *)(a1 + 38744) = 1;
    int v50 = *(_DWORD *)(v49 + 44);
    int v51 = *(_DWORD *)(a1 + 38700);
    if (v50 > v51)
    {
      *(_DWORD *)(a1 + 38700) = v50;
      *(_DWORD *)(a1 + 38696) = *(_DWORD *)(v49 + 40);
      *(_OWORD *)(a1 + 38704) = *(_OWORD *)(v49 + 48);
    }
    BOOL v52 = v50 > v51;
    int v53 = *(_DWORD *)(v49 + 64);
    int v54 = *(_DWORD *)(a1 + 38720);
    BOOL v55 = v54 < v53;
    if (v54 > v53) {
      int v53 = *(_DWORD *)(a1 + 38720);
    }
    *(_DWORD *)(a1 + 38720) = v53;
    int v56 = v55 || v52;
    uint64_t v57 = *(void *)(v49 + 3072);
    if (v57) {
      int v58 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(a1 + 38696, v57);
    }
    else {
      int v58 = 0;
    }
    if ((v56 | v58) == 1) {
      AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(a1 + 38696, (__n128 *)(*(void *)(a1 + 38952) + 304), 1);
    }
    uint64_t v59 = *(void *)(a1 + 38960);
    uint64_t v60 = *(void *)(v59 + 1944);
    uint64_t v61 = *(void *)(v59 + 1952);
    uint64_t v62 = *(void *)(a1 + 38976);
    if (*(unsigned char *)(v62 + 709))
    {
      uint64_t v63 = *(void *)(v62 + 960);
      BOOL v64 = v63 == 0;
      unint64_t v65 = (unint64_t)(v63 != 0) << 59;
      uint64_t v66 = 0x1800000000000000;
      if (v64) {
        uint64_t v66 = 0x1000000000000000;
      }
      if (*(void *)(v62 + 976)) {
        unint64_t v65 = v66;
      }
      BOOL v64 = *(void *)(v62 + 3152) == 0;
      uint64_t v67 = -2;
      if (v64) {
        uint64_t v67 = -1;
      }
    }
    else
    {
      unint64_t v65 = 0;
      uint64_t v67 = -1;
    }
    unint64_t v68 = v60 & ~v65;
    unint64_t v126 = v68;
    unint64_t v125 = v61 & v67;
    while (1)
    {
      if (v68)
      {
        unsigned int v69 = __clz(__rbit64(v68));
        float v70 = &v126;
        unsigned int v71 = v69;
      }
      else
      {
        unint64_t v68 = v125;
        if (!v125)
        {
          uint64_t v73 = *(void *)(a1 + 38960);
          unint64_t v74 = *(void *)(v73 + 1960) & *(void *)(a1 + 66560);
          unint64_t v122 = *(void *)(v73 + 1968) & *(void *)(a1 + 66568);
          for (j = v74; ; unint64_t v74 = j)
          {
            if (v74)
            {
              unsigned int v75 = __clz(__rbit64(v74));
              p_unint64_t j = &j;
              unsigned int v77 = v75;
            }
            else
            {
              unint64_t v74 = v122;
              if (!v122)
              {
                uint64_t v82 = *(void *)(a1 + 38952);
                uint64_t v81 = *(void *)(a1 + 38960);
                *(unsigned char *)(v82 + 463) |= *(unsigned char *)(v81 + 1045);
                *(unsigned char *)(v82 + 466) |= *(unsigned char *)(v81 + 1050);
                uint64_t v32 = a1 + 36360;
                goto LABEL_89;
              }
              unsigned int v75 = __clz(__rbit64(v122));
              unsigned int v77 = v75 | 0x40;
              p_unint64_t j = &v122;
            }
            *p_unint64_t j = v74 & ~(1 << v75);
            long long v124 = *(_OWORD *)(*(void *)(a1 + 38960) + 1072);
            if ((*(void *)((unint64_t)&v124 | (8 * (v77 > 0x3F))) >> v77)) {
              int v78 = 3;
            }
            else {
              int v78 = 1;
            }
            int v79 = 3 * v77;
            uint64_t v80 = a1 + 24 * v77;
            AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), *(uint64_t **)(v80 + 79224), 3u, v77, v78);
            if (*(void *)(v80 + 79224))
            {
              IOGPUResourceListAddResource();
              if (*(void *)(a1 + 8 * (v79 + 1) + 79224)) {
                IOGPUResourceListAddResource();
              }
              if (*(void *)(a1 + 8 * (v79 + 2) + 79224)) {
                IOGPUResourceListAddResource();
              }
            }
          }
        }
        unsigned int v69 = __clz(__rbit64(v125));
        unsigned int v71 = v69 | 0x40;
        float v70 = &v125;
      }
      *float v70 = v68 & ~(1 << v69);
      long long v124 = *(_OWORD *)(*(void *)(a1 + 38960) + 1056);
      if ((*(void *)((unint64_t)&v124 | (8 * (v71 > 0x3F))) >> v71)) {
        int v72 = 3;
      }
      else {
        int v72 = 1;
      }
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindVertexBufferResource(a1, v71, v72, a4);
      unint64_t v68 = v126;
    }
  }
LABEL_89:
  uint64_t v83 = a1 + 75944;
  float v84 = *(void **)(v32 + 192);
  if (v84) {
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindAllResources(v84, a4);
  }
  if (*(void *)(a1 + 38968))
  {
    int v85 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(a1 + 38816, (_DWORD *)(*(void *)(a1 + 38976) + 72), (_DWORD *)(a1 + 1976));
    uint64_t v86 = *(void *)(*(void *)(a1 + 38976) + 3088);
    if (v86) {
      int v87 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(a1 + 38816, v86);
    }
    else {
      int v87 = 0;
    }
    if ((v85 | v87) == 1) {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentUSCSpillBuffer(a1);
    }
    uint64_t v88 = *(void *)(a1 + 38968);
    uint64_t v89 = *(void *)(a1 + 38976);
    uint64_t v90 = *(void *)(v88 + 1944);
    uint64_t v91 = *(void *)(v88 + 1952);
    if (*(unsigned char *)(v89 + 709))
    {
      uint64_t v92 = *(void *)(v89 + 1248);
      BOOL v64 = v92 == 0;
      unint64_t v93 = (unint64_t)(v92 != 0) << 59;
      uint64_t v94 = 0x1800000000000000;
      if (v64) {
        uint64_t v94 = 0x1000000000000000;
      }
      if (*(void *)(v89 + 1264)) {
        unint64_t v93 = v94;
      }
      BOOL v64 = *(void *)(v89 + 3160) == 0;
      uint64_t v95 = -2;
      if (v64) {
        uint64_t v95 = -1;
      }
      uint64_t v96 = ~v93;
    }
    else
    {
      uint64_t v96 = -1;
      uint64_t v95 = -1;
    }
    unint64_t v97 = v90 & v96;
    unint64_t v126 = v97;
    unint64_t v125 = v91 & v95;
    while (1)
    {
      if (v97)
      {
        unsigned int v98 = __clz(__rbit64(v97));
        uint64_t v99 = &v126;
        unsigned int v100 = v98;
      }
      else
      {
        unint64_t v97 = v125;
        if (!v125)
        {
          uint64_t v101 = *(void *)(a1 + 38968);
          unint64_t v102 = *(void *)(v101 + 1960) & *(void *)v83;
          unint64_t v122 = *(void *)(v101 + 1968) & *(void *)(a1 + 75952);
          for (j = v102; ; unint64_t v102 = j)
          {
            if (v102)
            {
              unsigned int v103 = __clz(__rbit64(v102));
              uint64_t v104 = &j;
              unsigned int v105 = v103;
            }
            else
            {
              unint64_t v102 = v122;
              if (!v122)
              {
                uint64_t v109 = *(void *)(a1 + 38968);
                *(unsigned char *)(*(void *)(a1 + 38952) + 1296) |= *(unsigned char *)(v109 + 1045);
                uint64_t v83 = a1 + 75944;
                *(unsigned char *)(a1 + 90577) |= *(unsigned char *)(v109 + 1050);
                uint64_t v32 = a1 + 36360;
                goto LABEL_126;
              }
              unsigned int v103 = __clz(__rbit64(v122));
              unsigned int v105 = v103 | 0x40;
              uint64_t v104 = &v122;
            }
            *uint64_t v104 = v102 & ~(1 << v103);
            long long v124 = *(_OWORD *)(*(void *)(a1 + 38968) + 1072);
            if ((*(void *)((unint64_t)&v124 | (8 * (v105 > 0x3F))) >> v105)) {
              int v106 = 12;
            }
            else {
              int v106 = 4;
            }
            int v107 = 3 * v105;
            uint64_t v108 = a1 + 24 * v105;
            AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), *(uint64_t **)(v108 + 82296), 4u, v105, v106);
            if (*(void *)(v108 + 82296))
            {
              IOGPUResourceListAddResource();
              if (*(void *)(a1 + 8 * (v107 + 1) + 82296)) {
                IOGPUResourceListAddResource();
              }
              if (*(void *)(a1 + 8 * (v107 + 2) + 82296)) {
                IOGPUResourceListAddResource();
              }
            }
          }
        }
        unsigned int v98 = __clz(__rbit64(v125));
        unsigned int v100 = v98 | 0x40;
        uint64_t v99 = &v125;
      }
      *uint64_t v99 = v97 & ~(1 << v98);
      long long v124 = *(_OWORD *)(*(void *)(a1 + 38968) + 1056);
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentBufferResource(a1, v100, (*(void *)((unint64_t)&v124 | (8 * (v100 > 0x3F))) >> v100) & 1, a4);
      unint64_t v97 = v126;
    }
  }
LABEL_126:
  if (*(void *)(v32 + 2304))
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), *(void *)(v32 + 2304), 1);
    IOGPUResourceListAddResource();
  }
  if (*(void *)(v32 + 2312))
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 1592), *(void *)(v32 + 2312), 65);
    IOGPUResourceListAddResource();
  }
  uint64_t v110 = *(void *)(a1 + 38976);
  if (v110)
  {
    uint64_t v111 = *(void *)(v110 + 8);
    if (v111)
    {
      if (*(_DWORD *)(v111 + 3744))
      {
        AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(*(void *)v32 + 1592), *(void *)(v32 + 72), 1);
        IOGPUResourceListAddResource();
        if (*(void *)(v32 + 80))
        {
          AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(*(void *)v32 + 1592), *(void *)(v32 + 80), 65);
          IOGPUResourceListAddResource();
        }
      }
    }
  }
  if (*(unsigned char *)(v32 + 2135) && (*(unsigned char *)(v83 + 14536) & 2) != 0)
  {
    AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addGPUResources(*(void *)(a1 + 1968), *(void *)(a1 + 1496), *(void **)(a1 + 1592), 64);
    *(_DWORD *)(v83 + 14536) &= ~2u;
  }
  uint64_t v113 = *(void *)(a1 + 38960);
  uint64_t v112 = *(void *)(a1 + 38968);
  uint64_t v114 = *(void *)(v32 + 192);
  uint64_t v115 = *a2 & 0x20000000000000;
  if (!v113)
  {
    unint64_t v116 = v115 | 0xFFDFF0701C0701FELL;
    if (!v114) {
      goto LABEL_145;
    }
LABEL_142:
    uint64_t v117 = *(void *)(v114 + 32);
    if (v117)
    {
      unint64_t v118 = *(void *)(v117 + 2264) | v116;
      uint64_t v119 = *(void *)(v114 + 40);
      if (v119)
      {
LABEL_144:
        unint64_t v116 = *(void *)(v119 + 2264) | v118;
        goto LABEL_145;
      }
    }
    else
    {
      unint64_t v118 = v116 & 0xFFFFFFFFFFFFFFEFLL;
      uint64_t v119 = *(void *)(v114 + 40);
      if (v119) {
        goto LABEL_144;
      }
    }
    unint64_t v116 = v118 & 0xFFFFFFFFFFFFFFDFLL;
    if (v112) {
      goto LABEL_146;
    }
LABEL_149:
    unint64_t v120 = v116 & 0xFFFFFFFFFFFFFFFDLL;
    goto LABEL_150;
  }
  unint64_t v116 = v115 | 0xFFDFF0701C0701FFLL | *(void *)(v113 + 2264);
  if (v114) {
    goto LABEL_142;
  }
LABEL_145:
  if (!v112) {
    goto LABEL_149;
  }
LABEL_146:
  unint64_t v120 = *(void *)(v112 + 2264) | v116;
LABEL_150:
  *a2 = v120;
}

void sub_242B4AD74(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeVisibilityClear(uint64_t result)
{
  uint64_t v1 = (unsigned int **)(result + 38464);
  int v2 = *(_DWORD *)(result + 38488);
  if (v2 == 1)
  {
    uint64_t v5 = *(_WORD **)(result + 448);
    *uint64_t v5 = 2 * *(_WORD *)(result + 38492);
    *(void *)(result + 448) = v5 + 1;
    *(_DWORD *)(result + 38488) = 2;
    *(_DWORD *)(*(void *)(result + 38472) + 8) = 2;
  }
  else if (!v2)
  {
    uint64_t v3 = *v1;
    if (*v1)
    {
      uint64_t v4 = *(void *)(result + 38480);
      *uint64_t v3 = BYTE4(v4) | 0x80000000;
      v3[1] = v4;
      *uint64_t v1 = 0;
      *(void *)(result + 38480) = 0;
      ++*(_DWORD *)(result + 1536);
    }
  }
  return result;
}

double AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVisibilityClear(uint64_t a1)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 38464;
  *(_DWORD *)(a1 + 38488) = 0;
  *(void *)(a1 + 38464) = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 5856);
  uint64_t v4 = *(void *)(*(void *)(a1 + 1968) + 3920);
  if (v4) {
    uint64_t v4 = *(void *)(v4 + (int)*MEMORY[0x263F4B188] + 8);
  }
  v131[0] = v4;
  uint64_t v5 = *(unsigned int *)(v3 + 16);
  if (v5)
  {
    unint64_t v6 = (*(void *)(a1 + 160) + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v7 = v6 + *(void *)(a1 + 176);
    *(void *)(a1 + 160) = v6 + v5;
  }
  else
  {
    unint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  uint64_t v8 = (char *)((*(void *)(a1 + 224) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v9 = *(void *)(a1 + 240);
  *(void *)(a1 + 224) = &v8[*(_DWORD *)(*(void *)(v3 + 1344) + 8) - **(_DWORD **)(v3 + 1344)];
  uint64_t v11 = *(void *)(v3 + 240);
  uint64_t v10 = *(void *)(v3 + 248);
  unint64_t v12 = v10 - v11;
  if (v10 == v11) {
    int v13 = 0;
  }
  else {
    int v13 = *(_DWORD *)(v3 + 200) & 1;
  }
  if (!v5)
  {
    uint64_t v28 = 0;
    goto LABEL_54;
  }
  unint64_t v14 = *(unsigned int *)(v3 + 424);
  BOOL v15 = *(_DWORD **)(v3 + 48);
  uint64_t v16 = (*(void *)(v3 + 56) - (void)v15) >> 2;
  uint64_t v17 = *(unsigned int *)(v3 + 412);
  uint64_t v18 = (*(void *)(v3 + 104) - *(void *)(v3 + 96)) >> 2;
  uint64_t v20 = *(void *)(v3 + 72);
  uint64_t v19 = *(void *)(v3 + 80);
  uint64_t v22 = *(void *)(v3 + 144);
  uint64_t v21 = *(void *)(v3 + 152);
  int v23 = *(unsigned __int8 *)(v3 + 456);
  int v24 = *(unsigned __int8 *)(v3 + 457);
  int v25 = *(_DWORD *)(v3 + 212) + *(_DWORD *)(v3 + 208);
  if (v25) {
    MEMORY[0x400] = 8 * (v18 + v16)
  }
                  + v7
                  + 4 * (v13 + *(_DWORD *)(v3 + 200) + ((v12 >> 1) & 0xFFFFFFFE));
  unint64_t v26 = v19 - v20;
  uint64_t v129 = v9;
  if (v16 == v14)
  {
    unsigned int v27 = 0;
    uint64_t v28 = 0;
    unint64_t v29 = v26 >> 2;
    if (!v14) {
      goto LABEL_41;
    }
LABEL_37:
    if (v14 >= 4)
    {
      uint64_t v57 = *(uint64_t **)(v3 + 1848);
      unint64_t v58 = v14 >> 2;
      uint64_t v59 = (void *)(v6 + v27);
      do
      {
        uint64_t v60 = *v57;
        v57 += 4;
        *uint64_t v59 = v60;
        v59 += 4;
        --v58;
      }
      while (v58);
    }
    v27 += 8 * v14;
    goto LABEL_41;
  }
  if (v17)
  {
    if (v17 == 1)
    {
      LODWORD(v30) = 0;
      uint64_t v31 = (void *)v6;
      uint64_t v32 = v15;
LABEL_22:
      int v38 = v17 - v30;
      do
      {
        int v39 = *v32++;
        *v31++ = v131[v39];
        --v38;
      }
      while (v38);
      goto LABEL_24;
    }
    uint64_t v33 = v2;
    uint64_t v30 = v17 & 0xFFFFFFFE;
    uint64_t v31 = (void *)(v6 + 8 * v30);
    unint64_t v34 = v15 + 1;
    long long v35 = (void *)(v6 + 8);
    uint64_t v36 = v30;
    uint64_t v32 = &v15[v30];
    do
    {
      uint64_t v37 = v131[*v34];
      *(v35 - 1) = v131[*(v34 - 1)];
      *long long v35 = v37;
      v34 += 2;
      v35 += 2;
      v36 -= 2;
    }
    while (v36);
    uint64_t v2 = v33;
    if (v30 != v17) {
      goto LABEL_22;
    }
  }
LABEL_24:
  if (*(_DWORD *)(v3 + 280))
  {
    long long v40 = *(void **)(v3 + 264);
    if (v40 != (void *)(v3 + 272))
    {
      do
      {
        *(_DWORD *)(v6 + 4 * *((unsigned int *)v40 + 7)) |= *((_DWORD *)v40 + 8);
        uint64_t v90 = (void *)v40[1];
        if (v90)
        {
          do
          {
            uint64_t v91 = v90;
            uint64_t v90 = (void *)*v90;
          }
          while (v90);
        }
        else
        {
          do
          {
            uint64_t v91 = (void *)v40[2];
            BOOL v73 = *v91 == (void)v40;
            long long v40 = v91;
          }
          while (!v73);
        }
        long long v40 = v91;
      }
      while (v91 != (void *)(v3 + 272));
    }
  }
  unsigned int v41 = (v17 + 3) & 0xFFFFFFFC;
  if (v23)
  {
    unsigned int v42 = *(_DWORD *)(v3 + 416);
    if (v42 >= 4)
    {
      int32x4_t v43 = &v15[v41];
      unsigned int v44 = v42 >> 2;
      int v45 = (_OWORD *)(v6 + 8 * v41);
      do
      {
        int v46 = *v43;
        v43 += 4;
        float v47 = &v131[v46];
        long long v48 = v47[1];
        *int v45 = *v47;
        v45[1] = v48;
        v45 += 2;
        --v44;
      }
      while (v44);
    }
    v41 += v42;
  }
  int v49 = v16 - v14;
  if (v24)
  {
    uint64_t v50 = *(unsigned int *)(v3 + 420);
    uint64_t v51 = v41;
    uint64_t v52 = 8 * v41;
    int v53 = (void *)(v6 + v52);
    if (*(unsigned char *)(v3 + 1144))
    {
      if (!v50) {
        goto LABEL_36;
      }
      uint64_t v119 = *(void *)(v3 + 48) + 4 * v51;
      if (v50 == 1)
      {
        LODWORD(v120) = 0;
        unsigned int v121 = (int *)v119;
      }
      else
      {
        uint64_t v120 = v50 & 0xFFFFFFFE;
        v53 += v120;
        unint64_t v122 = (unsigned int *)(v119 + 4);
        int v123 = (void *)(v52 + v6 + 8);
        uint64_t v124 = v120;
        unsigned int v121 = (int *)(v119 + 4 * v120);
        do
        {
          uint64_t v125 = v131[*v122];
          *(v123 - 1) = v131[*(v122 - 1)];
          *int v123 = v125;
          v122 += 2;
          v123 += 2;
          v124 -= 2;
        }
        while (v124);
        if (v120 == v50) {
          goto LABEL_36;
        }
      }
      int v126 = v50 - v120;
      do
      {
        int v127 = *v121++;
        *v53++ = v131[v127];
        --v126;
      }
      while (v126);
      goto LABEL_36;
    }
    if (v50 >= 4)
    {
      int v54 = (int *)(*(void *)(v3 + 48) + 4 * v51);
      unsigned int v55 = v50 >> 2;
      do
      {
        int v56 = *v54;
        v54 += 4;
        *int v53 = v131[v56];
        v53 += 4;
        --v55;
      }
      while (v55);
    }
  }
LABEL_36:
  unsigned int v27 = 8 * v49;
  uint64_t v28 = v131;
  unint64_t v29 = v26 >> 2;
  if (v14) {
    goto LABEL_37;
  }
LABEL_41:
  if (v18)
  {
    v28[197] = v7 + v27;
    v27 += 8 * v18;
  }
  if (v29)
  {
    uint64_t v61 = (_DWORD *)(v6 + v27);
    uint64_t v132 = v7 + v27 + 8;
    uint64_t v62 = *(unsigned int **)(v3 + 72);
    int v63 = v29;
    do
    {
      unsigned int v64 = *v62++;
      *v61++ = *((_DWORD *)v131 + v64);
      --v63;
    }
    while (v63);
    v27 += 4 * v29;
  }
  uint64_t v65 = v21 - v22;
  if (v25)
  {
    unint64_t v128 = v7;
    uint64_t v66 = v2;
    uint64_t v67 = (char *)(v6 + v27);
    uint64_t v68 = *(unsigned int *)(v3 + 208);
    memcpy(v67, (const void *)(4 * *(unsigned int *)(v3 + 204)), 4 * v68);
    int v69 = *(_DWORD *)(v3 + 212);
    if (v69)
    {
      float v70 = *(unsigned int **)(v3 + 216);
      unsigned int v71 = &v67[4 * v68];
      do
      {
        unsigned int v72 = *v70++;
        *(_DWORD *)unsigned int v71 = *((_DWORD *)v131 + v72);
        v71 += 4;
        --v69;
      }
      while (v69);
    }
    v27 += 4 * v25;
    uint64_t v2 = v66;
    unint64_t v7 = v128;
  }
  BOOL v73 = (v65 & 0x3FFFFFFFCLL) == 0;
  uint64_t v9 = v129;
  if (!v73)
  {
    unint64_t v74 = v7 + v27;
    uint64_t v132 = v74 + 8;
    v28[198] = v74;
  }
LABEL_54:
  uint64_t v75 = *(void *)(v3 + 1344);
  memcpy(v8, *(const void **)v75, *(void *)(v75 + 8) - *(void *)v75);
  if (*(unsigned char *)(v75 + 200))
  {
    v76.i64[0] = v7;
    v76.i64[1] = v7 >> 5;
    *(int8x16_t *)&v8[*(unsigned int *)(v75 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v8[*(unsigned int *)(v75 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v76, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unsigned int v77 = *(unsigned int **)(v75 + 176);
  for (uint64_t i = *(unsigned int **)(v75 + 184); v77 != i; v77 += 3)
  {
    v79.i64[0] = v28[v77[1]] + *v77;
    v79.i64[1] = (unint64_t)v79.i64[0] >> 5;
    *(int8x16_t *)&v8[v77[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v8[v77[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v80 = (unint64_t)&v8[v9];
  uint64_t v81 = *(char ***)(a1 + 1752);
  if (v81)
  {
    uint64_t v82 = *(void *)(v75 + 8) - *(void *)v75;
    int v83 = *(_DWORD *)(v3 + 1752);
    LODWORD(v84) = *((_DWORD *)v81 + 2);
    int v85 = v84 + 1;
    if (*((_DWORD *)v81 + 3) >= (v84 + 1))
    {
      uint64_t v89 = *v81;
    }
    else
    {
      uint64_t v130 = v2;
      unsigned int v86 = -__clz(v84);
      int v87 = 1 << v86;
      uint64_t v88 = (char *)malloc_type_malloc(40 << (v86 & 0x1F), 0x10800400D7C94D2uLL);
      uint64_t v89 = v88;
      uint64_t v84 = *((unsigned int *)v81 + 2);
      if (v84)
      {
        memcpy(v88, *v81, 40 * v84);
        free(*v81);
        LODWORD(v84) = *((_DWORD *)v81 + 2);
      }
      *((_DWORD *)v81 + 3) = v87;
      *uint64_t v81 = v89;
      uint64_t v2 = v130;
    }
    uint64_t v92 = &v89[40 * v84];
    *(_DWORD *)uint64_t v92 = 17;
    *((void *)v92 + 1) = v80;
    *((void *)v92 + 2) = v8;
    *((void *)v92 + 3) = v82;
    *((_DWORD *)v92 + 8) = v83;
    *((_DWORD *)v81 + 2) = v85;
  }
  int v93 = *(_DWORD *)(v3 + 2616);
  uint64_t v94 = *(void *)(v3 + 2608);
  int v95 = (v80 >> 16) & 0xFFC00000 | *(_DWORD *)(v3 + 2600) & 0x3FFFFF;
  uint64_t v96 = *(void *)(a1 + 64);
  *(void *)uint64_t v96 = *(void *)(v3 + 2592);
  *(_DWORD *)(v96 + 8) = v95;
  *(_DWORD *)(v96 + 12) = v80 >> 6;
  *(void *)(v96 + 16) = v94;
  *(_DWORD *)(v96 + 24) = v93;
  *(void *)(a1 + 64) = v96 + 28;
  uint64_t v97 = *(void *)(a1 + 1024);
  uint64_t v98 = *(void *)(a1 + 1040) + v97;
  *(void *)(a1 + 1024) = v97 + 20;
  *(_OWORD *)uint64_t v97 = xmmword_242EA86F0;
  *(_DWORD *)(v97 + 16) = 0;
  uint64_t v99 = *(unint64_t **)(a1 + 64);
  *uint64_t v99 = __ROR8__(v98, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(a1 + 64) = v99 + 1;
  uint64_t v100 = *(void *)(a1 + 1024);
  uint64_t v101 = *(void *)(a1 + 1040) + v100;
  *(void *)(a1 + 1024) = v100 + 28;
  *(_OWORD *)uint64_t v100 = xmmword_242EA7DE0;
  *(void *)(v100 + 16) = 0xE00000007E00F00;
  *(_DWORD *)(v100 + 24) = 0;
  uint64_t v102 = __ROR8__(v101, 32);
  unsigned int v103 = *(unint64_t **)(a1 + 64);
  *unsigned int v103 = v102 & 0xFFFFFFFC000000FFLL | 0x700;
  *(void *)(a1 + 64) = v103 + 1;
  uint64_t v104 = *(void *)(v3 + 2624);
  uint64_t v105 = *(void *)(a1 + 1024);
  uint64_t v106 = *(void *)(a1 + 1040) + v105;
  *(void *)(a1 + 1024) = v105 + 20;
  *(_DWORD *)uint64_t v105 = 201981952;
  *(_DWORD *)(v105 + 4) = v104 & 0xF1C00FF;
  *(void *)(v105 + 8) = 0;
  *(_DWORD *)(v105 + 16) = HIDWORD(v104);
  int v107 = *(unint64_t **)(a1 + 64);
  unint64_t *v107 = __ROR8__(v106, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(a1 + 64) = v107 + 1;
  uint64_t v108 = *(void *)(*(void *)(a1 + 40) + 768)
       + *(void *)(*(void *)(a1 + 40) + 792)
       - *(void *)(*(void *)(a1 + 40) + 776);
  LODWORD(v103) = *(_DWORD *)(v2 + 24);
  LODWORD(v104) = ((unint64_t)(*(void *)(*(void *)(a1 + 16) + 384) + 3) >> 2) - 1;
  uint64_t v109 = *(void *)(a1 + 1024);
  uint64_t v110 = *(void *)(a1 + 1040) + v109;
  *(void *)(a1 + 1024) = v109 + 12;
  *(void *)uint64_t v109 = 0x1E3CE50800410000;
  *(_DWORD *)(v109 + 8) = 131232;
  uint64_t v111 = __ROR8__(v110, 32);
  uint64_t v112 = *(unint64_t **)(a1 + 64);
  unint64_t *v112 = v111 & 0xFFFFFFFC000000FFLL | 0x300;
  *(void *)(a1 + 64) = v112 + 1;
  uint64_t v113 = *(void **)(a1 + 1024);
  uint64_t v114 = (char *)v113 + *(void *)(a1 + 1040);
  *(void *)(a1 + 1024) = v113 + 1;
  *uint64_t v113 = 0x48000200000;
  unint64_t v115 = __ROR8__(v114, 32) & 0xFFFFFFFC000000FFLL | 0x200;
  uint64_t v116 = *(void *)(a1 + 64);
  *(void *)uint64_t v116 = v115;
  *(void *)(v116 + 8) = 0xFFFF40000001;
  *(_DWORD *)(v116 + 20) = v108;
  *(_DWORD *)(v116 + 24) = v103;
  *(void *)&double result = 1;
  *(void *)(v116 + 28) = 1;
  *(_DWORD *)(v116 + 36) = v104;
  *(_DWORD *)(v116 + 40) = BYTE5(v108);
  *(_DWORD *)(v116 + 16) = BYTE4(v108) | 0x61F30300;
  *(void *)(a1 + 64) = v116 + 44;
  ++*(_DWORD *)(a1 + 1524);
  uint64_t v118 = *(void *)(a1 + 80) + v116 + 44;
  *(void *)(v2 + 8) = v116 + 16;
  *(void *)(v2 + 16) = v118;
  *(_DWORD *)(a1 + 1540) = *(_DWORD *)(v2 + 24) + *(_DWORD *)(a1 + 1540) - 1;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleScissorUpdates(uint64_t result, void *a2, int a3, uint64_t a4, int a5, int a6)
{
  if ((*a2 & 0x200000000000) == 0) {
    return result;
  }
  LODWORD(v6) = a3;
  uint64_t v8 = result;
  uint64_t v9 = result + 37184;
  uint64_t v10 = result + 37280;
  if (*(unsigned char *)(result + 38112)) {
    int v11 = 0;
  }
  else {
    int v11 = (*a2 >> 54) & 1;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(result + 1456) + 808) + 5106)) {
    BOOL v12 = a6 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    double result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateClipRegions(result + 37280, a2);
    a5 = result;
  }
  if (*(unsigned char *)(v9 + 890))
  {
    int v13 = *(_DWORD *)(v9 + 20);
    *(_DWORD *)(v9 + 20) = v13 & 0xFFFEFFFF;
    if ((v13 & 0x10000) == 0) {
      return result;
    }
LABEL_25:
    *a2 |= 0x100000000000uLL;
    return result;
  }
  if ((a5 | v11))
  {
    int v14 = v6;
    LOWORD(v6) = *(_WORD *)(v9 + 1220);
    double result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::canUseScissorConfigReg(v10);
    if (result)
    {
      *(unsigned char *)(v9 + 1216) = 0;
    }
    else
    {
      double result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::anyPartialScreenClip(v10);
      if (result)
      {
        *(unsigned char *)(v9 + 1216) = 1;
        double result = *(void *)(*(void *)(v8 + 1456) + 808);
        if (*(unsigned char *)(result + 5106))
        {
          LOWORD(v6) = v14;
          if (v14 == -1)
          {
            char v27 = 0;
            double result = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateScissorIndex(result, v10, 0, *(void *)(*(void *)(v9 + 1768) + 752), &v28, &v27, &v26);
            LOWORD(v6) = result;
          }
        }
        else
        {
          uint64_t v18 = (int *)(v8 + 90768);
          uint64_t v19 = *(int8x8_t **)(v8 + 320);
          uint64_t v20 = (uint64_t)v19 + *(void *)(v8 + 336);
          *(void *)(v8 + 320) = v19 + 2;
          unint64_t v6 = ((unint64_t)v19 - *(void *)(*(void *)(v8 + 40) + 536)) >> 4;
          double result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setScissorBits(v10, 0, v19, v20);
          if ((*(_DWORD *)(v8 + 90768) & 0x80) == 0)
          {
            int v21 = (v6 + 1) > *(_DWORD *)(v8 + 90772) ? v6 + 1 : *(_DWORD *)(v8 + 90772);
            *uint64_t v18 = *(_DWORD *)(v8 + 90768) | 0x10;
            *(_DWORD *)(v8 + 90772) = v21;
            if (!v6) {
              *(_OWORD *)(v8 + 91088) = *(_OWORD *)v19->i8;
            }
          }
          unsigned int v22 = 1;
          while (v22 < *(_DWORD *)(v9 + 892))
          {
            int v23 = *(int8x8_t **)(v8 + 320);
            uint64_t v24 = (uint64_t)v23 + *(void *)(v8 + 336);
            *(void *)(v8 + 320) = v23 + 2;
            double result = AGX::ClipRectContextGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setScissorBits(v10, v22, v23, v24);
            if ((*v18 & 0x80) != 0)
            {
              ++v22;
            }
            else
            {
              unsigned int v25 = *(_DWORD *)(v8 + 90772);
              if (v22 + 1 > v25) {
                unsigned int v25 = v22 + 1;
              }
              *v18 |= 0x10u;
              *(_DWORD *)(v8 + 90772) = v25;
              ++v22;
            }
          }
        }
      }
    }
    int v15 = *(unsigned __int8 *)(v9 + 1216);
    if (*(unsigned char *)(v9 + 1216))
    {
      *(_WORD *)uint64_t v9 = v6;
      *a2 |= 0x4000000000000uLL;
    }
  }
  else
  {
    int v15 = *(unsigned __int8 *)(v9 + 1216);
  }
  BOOL v16 = v15 != 0;
  int v17 = *(_DWORD *)(v9 + 20);
  *(_DWORD *)(v9 + 20) = v17 & 0xFFFEFFFF | (v16 << 16);
  if ((v16 ^ ((v17 & 0x10000u) >> 16))) {
    goto LABEL_25;
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDepthBiasUpdates(uint64_t result, uint64_t a2, int a3, int8x16_t a4, double a5, double a6, int8x16_t a7)
{
  if ((*(unsigned char *)(a2 + 5) & 0x40) != 0)
  {
    unint64_t v7 = (_DWORD *)(result + 90768);
    uint64_t v8 = result + 37184;
    a4.i32[0] = *(_DWORD *)(result + 38424);
    float v9 = *(float *)(result + 38428);
    float v10 = *(float *)(result + 38432);
    a7.i32[0] = 931135616;
    v11.i64[0] = 0x8000000080000000;
    v11.i64[1] = 0x8000000080000000;
    LODWORD(v12) = vbslq_s8(v11, a7, a4).u32[0];
    if (*(_DWORD *)(*(void *)(result + 1968) + 3932)) {
      *(float *)a4.i32 = v12 + (float)(*(float *)a4.i32 * 0.000015259);
    }
    LODWORD(v13) = a4.i32[0];
    HIDWORD(v13) = *(_DWORD *)(result + 38428);
    uint64_t v14 = *(void *)(*(void *)(result + 1456) + 808);
    if (*(unsigned char *)(v14 + 5105))
    {
      if (a3 == -1)
      {
        char v25 = 0;
        uint64_t v22 = result + 37184;
        uint64_t v20 = result;
        int v21 = (_DWORD *)(result + 90768);
        uint64_t v19 = a2;
        float v23 = v10;
        uint64_t v18 = v13;
        int v15 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateDepthBiasIndex(v14, *(void *)(*(void *)(result + 38952) + 760), &v26, &v25, &v24, *(float *)a4.i32, v9, v10);
        uint64_t v13 = v18;
        uint64_t v8 = v22;
        float v10 = v23;
        a2 = v19;
        a3 = v15;
        double result = v20;
        unint64_t v7 = v21;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(result + 288);
      *(void *)(result + 288) = v16 + 12;
      *(void *)uint64_t v16 = v13;
      *(float *)(v16 + 8) = v10;
      a3 = -1431655765 * ((unint64_t)(v16 - *(void *)(*(void *)(result + 40) + 472)) >> 2);
    }
    if ((*v7 & 0x40) == 0)
    {
      *v7 |= 0x20u;
      if ((a3 + 1) > v7[2]) {
        int v17 = a3 + 1;
      }
      else {
        int v17 = v7[2];
      }
      v7[2] = v17;
      if (!a3)
      {
        *(void *)(result + 91104) = v13;
        *(float *)(result + 91112) = v10;
      }
    }
    *(_WORD *)(v8 + 2) = a3;
    *(void *)a2 |= 0x4000000000000uLL;
  }
  return result;
}

double AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endRenderPassCommon(uint64_t a1, int a2, int a3, int a4, int a5, __n128 a6, int32x4_t a7, int8x8_t a8)
{
  uint64_t v456 = *MEMORY[0x263EF8340];
  uint64_t v421 = a1 + 90488;
  uint64_t v9 = a1 + 38696;
  uint64_t v423 = a1 + 90768;
  uint64_t v424 = a1 + 36320;
  int v10 = *(_DWORD *)(a1 + 38488);
  if (v10 == 1)
  {
    uint64_t v13 = *(_WORD **)(a1 + 448);
    *uint64_t v13 = 2 * *(_WORD *)(a1 + 38492);
    *(void *)(a1 + 448) = v13 + 1;
    *(_DWORD *)(a1 + 38488) = 2;
    *(_DWORD *)(*(void *)(a1 + 38472) + 8) = 2;
    if (!a5) {
      goto LABEL_9;
    }
  }
  else
  {
    if (!v10)
    {
      int8x16_t v11 = *(unsigned int **)(a1 + 38464);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 38480);
        *int8x16_t v11 = BYTE4(v12) | 0x80000000;
        v11[1] = v12;
        *(void *)(a1 + 38464) = 0;
        *(void *)(a1 + 38480) = 0;
        ++*(_DWORD *)(a1 + 1536);
      }
    }
    if (!a5)
    {
LABEL_9:
      uint64_t v420 = (uint64_t *)(v9 + 248);
      if (*(_DWORD *)(*(void *)(v9 + 248) + 4))
      {
LABEL_10:
        uint64_t v14 = *(__n128 **)(v9 + 256);
        goto LABEL_278;
      }
      if (*(void *)v424) {
        AGX::RenderIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchVDMControlStreamAndReset(a1 + 36264, *(unint64_t **)(v421 + 264), *(void *)(v421 + 272), (_DWORD *)(a1 + 90584));
      }
      uint64_t v15 = *(void *)(v9 + 256);
      *(unsigned char *)(v15 + 465) = *(unsigned char *)(v424 + 304);
      if (a2)
      {
        if (!*(unsigned char *)(v421 + 88))
        {
          unint64_t v16 = *(void *)(a1 + 1968);
          AGX::FramebufferGen3_1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeStoreActions(v16);
          BOOL v17 = !*(unsigned char *)(v421 + 89) && *(unsigned char *)(v16 + 3967) != 0;
          if ((*(void *)(v16 + 4008) & 0xFFFFFFFFFF80) != 0) {
            *(void *)(v16 + 3984) = *(void *)(v16 + 3984) & 0xFFFFFFFFFFFFFFFELL | v17;
          }
        }
        if (a4) {
          AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitSWEndOfTileIfNeeded(a1);
        }
        uint64_t v30 = *(_DWORD **)(a1 + 1968);
        unsigned int v31 = v30[1225];
        unsigned int v32 = v30[1226];
        if (v31 | v32 && *(_DWORD *)*MEMORY[0x263F4B1E8])
        {
          IOGPUDeviceTraceEvent();
          unsigned int v31 = v30[1225];
          unsigned int v32 = v30[1226];
        }
        if ((v31 >> 7) & 4 | (v31 >> 8) & 1 | (v32 >> 7) & 2 | (v32 >> 6) & 8 && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
          IOGPUDeviceTraceEvent();
        }
        if (v30[1230] && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
          IOGPUDeviceTraceEvent();
        }
        unint64_t v29 = *(int8x16_t **)(a1 + 1968);
        *(int8x16_t *)(v423 + 400) = vorrq_s8(*(int8x16_t *)(v423 + 400), v29[316]);
        uint64_t v15 = *(void *)(v9 + 256);
      }
      else
      {
        unint64_t v29 = *(int8x16_t **)(a1 + 1968);
      }
      AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::assignRenderRegisters((uint64_t)v29, v15, v15 + 528, *(unsigned __int8 *)(v424 + 305), a2);
      uint64_t v33 = *(void *)(a1 + 1968);
      uint64_t v34 = *(void *)(v9 + 256);
      int v35 = *(unsigned __int8 *)(v424 + 305);
      __int16 v36 = *(_WORD *)(v424 + 2096);
      *(unsigned char *)(v34 + 1616) = 0;
      if (v35)
      {
        if (*(unsigned char *)(v33 + 3896)) {
          char v37 = 1;
        }
        else {
          char v37 = *(_WORD *)(v33 + 4376) != 0;
        }
        *(unsigned char *)(v34 + 1617) = v37;
        *(unsigned char *)(v34 + 1618) = *(unsigned char *)(v33 + 1994);
        char v38 = a2;
        if (a2)
        {
          char v37 = *(unsigned char *)(v33 + 3904);
          char v38 = 1;
        }
      }
      else
      {
        char v38 = 0;
        *(unsigned char *)(v34 + 1617) = 0;
        char v37 = *(unsigned char *)(v33 + 1994);
        *(unsigned char *)(v34 + 1618) = v37;
        if (!a2) {
          char v37 = 0;
        }
      }
      *(unsigned char *)(v34 + 1680) = v37;
      unsigned int v39 = (unsigned __int16)(*(_WORD *)(v33 + 4368) & v36);
      int v40 = v39 | *(unsigned __int16 *)(v33 + 4370);
      int v41 = *(unsigned __int16 *)(v33 + 4372);
      if (v35) {
        unsigned int v39 = v40 & ~*(unsigned __int16 *)(v33 + 4378);
      }
      char v42 = v40 | v41;
      if (a2) {
        unsigned int v39 = (v39 | v41) & ~*(unsigned __int16 *)(v33 + 4380);
      }
      if (((v40 | v41) & 3) != 0)
      {
        if ((v42 & 0xC) != 0) {
          goto LABEL_71;
        }
      }
      else
      {
        *(void *)(v34 + 832) = 0;
        *(void *)(v34 + 1600) = 0;
        *(_OWORD *)(v34 + 808) = 0u;
        *(_OWORD *)(v34 + 1568) = 0u;
        if ((v42 & 0xC) != 0) {
          goto LABEL_71;
        }
      }
      *(void *)(v34 + 912) = 0;
      *(void *)(v34 + 1608) = 0;
      *(_OWORD *)(v34 + 888) = 0u;
      *(_OWORD *)(v34 + 1584) = 0u;
LABEL_71:
      *(void *)(v34 + 776) |= (v39 << 18) & 0x80000 | ((v39 & 1) << 15) | (((v39 >> 2) & 1) << 14) & 0xFFFBFFFF | ((((unsigned __int16)v39 >> 3) & 1) << 18);
      if ((v39 & 5) != 0) {
        *(_DWORD *)(v34 + 1308) = 2;
      }
      if ((v39 & 0xA) != 0 && *(unsigned char *)(v33 + 3904)) {
        *(_DWORD *)(v34 + 1308) = 2;
      }
      if ((v38 & 1) == 0) {
        *(unsigned char *)(v34 + 1299) = 1;
      }
      int v43 = *(unsigned __int8 *)(v424 + 305);
      if (*(unsigned char *)(v424 + 305)) {
        char v44 = a2;
      }
      else {
        char v44 = 0;
      }
      uint64_t v45 = *(void *)(v9 + 256);
      *(unsigned char *)(v45 + 1888) = v44;
      *(_WORD *)(v424 + 2096) = *(_WORD *)(v424 + 2098);
      if (!v43 || *(unsigned char *)(*(void *)(a1 + 1968) + 3897) || *(unsigned char *)(v424 + 306))
      {
        *(unsigned char *)(v45 + 1293) = 1;
        if (*(_DWORD *)*MEMORY[0x263F4B1E8])
        {
          IOGPUDeviceTraceEvent();
          uint64_t v45 = *(void *)(v9 + 256);
        }
      }
      if (!*(unsigned char *)(v424 + 2175)) {
        *(void *)(v45 + 1336) = 0;
      }
      *(void *)(*(void *)(a1 + 2096) + 160) = *(void *)(*(void *)(a1 + 2096) + 160) & 0xFFFFFFFFFFFFF83FLL | (8 * *(_WORD *)(a1 + 2240) + 56) & 0x7C0;
      *(_DWORD *)(a1 + 2240) = 0;
      uint64_t v46 = *(void *)(a1 + 1968);
      int v47 = *(unsigned __int8 *)(v424 + 305);
      int v48 = *(unsigned __int8 *)(v424 + 332);
      uint64_t v49 = *(void *)(v46 + 4392);
      if (!v49) {
        uint64_t v49 = *(void *)(v46 + 4384);
      }
      uint64_t v50 = *(void *)(v9 + 256);
      uint64_t BGOProgramVariant = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBGOProgramVariant(*(void **)(a1 + 1968), v47 == 0);
      if (v48) {
        unsigned int v52 = 2;
      }
      else {
        unsigned int v52 = *(_DWORD *)(a1 + 1920);
      }
      uint64_t v53 = v49 + 1344;
      if (*(unsigned char *)(v49 + 2632))
      {
        unint64_t v54 = AGX::BackgroundObjectProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::calculateBackgroundObjectBits(v53, *(void *)(a1 + 1768), v52, v46 + 4504);
      }
      else
      {
        unint64_t v54 = *(void *)(v49 + 2592) & 0x7FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(v53 + 4 * v52 + 1272) << 47);
        unint64_t v55 = *(void *)(v49 + 2600) & 0xFFFF00000000003FLL | (((*(void *)(a1 + 1768) >> 6) & 0x3FFFFFFFFFFLL) << 6);
      }
      *(void *)(v50 + 1376) = v54;
      *(void *)(v50 + 1384) = v55;
      if (v47) {
        uint64_t v56 = v46 + 4416;
      }
      else {
        uint64_t v56 = v46 + 4504;
      }
      if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(*(int32x4_t *)(v56 + 40), *(int32x4_t *)(v46 + 4544)), (int16x8_t)vceqq_s32(*(int32x4_t *)(v56 + 56), *(int32x4_t *)(v46 + 4560)))))) & 1) != 0|| *(_DWORD *)(v56 + 72) != *(_DWORD *)(v46 + 4576)|| *(void *)(v56 + 80) != *(void *)(v46 + 4584))
      {
        if (v48) {
          unsigned int v57 = 2;
        }
        else {
          unsigned int v57 = *(_DWORD *)(a1 + 1920);
        }
        uint64_t v58 = BGOProgramVariant + 1344;
        if (*(unsigned char *)(BGOProgramVariant + 2632))
        {
          unint64_t v54 = AGX::BackgroundObjectProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::calculateBackgroundObjectBits(v58, *(void *)(a1 + 1760), v57, v56);
        }
        else
        {
          unint64_t v54 = *(void *)(BGOProgramVariant + 2592) & 0x7FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(v58 + 4 * v57 + 1272) << 47);
          unint64_t v55 = *(void *)(BGOProgramVariant + 2600) & 0xFFFF00000000003FLL | (((*(void *)(a1 + 1760) >> 6) & 0x3FFFFFFFFFFLL) << 6);
        }
      }
      *(void *)(v50 + 688) = v54;
      *(void *)(v50 + 696) = v55;
      uint64_t v59 = *(void *)(v46 + 4848);
      uint64_t v60 = *(void *)(v46 + 4856);
      unint64_t v433 = &unk_26F853C48;
      int v434 = *(_DWORD *)(v46 + 4600);
      int v437 = 0;
      std::string __p = 0;
      long long v436 = 0;
      uint64_t v61 = *(unsigned char **)(v46 + 4608);
      uint64_t v62 = *(unsigned char **)(v46 + 4616);
      int64_t v63 = v62 - v61;
      if (v62 != v61)
      {
        if (v63 < 0) {
          abort();
        }
        std::string __p = operator new(v62 - v61);
        int v437 = (char *)__p + 4 * (v63 >> 2);
        memcpy(__p, v61, v63);
        long long v436 = v437;
      }
      unint64_t v433 = &unk_26F853C08;
      long long v64 = *(_OWORD *)(v46 + 4632);
      long long v439 = *(_OWORD *)(v46 + 4648);
      long long v438 = v64;
      long long v65 = *(_OWORD *)(v46 + 4664);
      long long v66 = *(_OWORD *)(v46 + 4680);
      long long v67 = *(_OWORD *)(v46 + 4696);
      *(void *)((char *)v442 + 14) = *(void *)(v46 + 4710);
      v442[0] = v67;
      long long v441 = v66;
      long long v440 = v65;
      memcpy(__dst, (const void *)(v46 + 448), sizeof(__dst));
      AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsLate(v59, (uint64_t)__dst, *(void *)(a1 + 1776), *(void *)(a1 + 1784), *(void *)(a1 + 1840), *(void **)(a1 + 1864), *(void *)(a1 + 1888), *(char ***)(a1 + 1752));
      uint64_t v68 = (long long *)(v46 + 4760);
      int8x16_t v69 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v46 + 4760), *(int8x16_t *)(v46 + 4632)), veorq_s8(*(int8x16_t *)(v46 + 4792), *(int8x16_t *)(v46 + 4664))), vorrq_s8(veorq_s8(*(int8x16_t *)(v46 + 4776), *(int8x16_t *)(v46 + 4648)), veorq_s8(*(int8x16_t *)(v46 + 4808), *(int8x16_t *)(v46 + 4680))));
      *(int8x8_t *)v69.i8 = vorr_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL));
      if (*(void *)(v46 + 4832) ^ *(void *)(v46 + 4704) | (unsigned __int16)(*(_WORD *)(v46 + 4840) ^ *(_WORD *)(v46 + 4712)) | (unsigned __int16)(*(_WORD *)(v46 + 4842) ^ *(_WORD *)(v46 + 4714)) | (unint64_t)(unsigned __int16)(*(_WORD *)(v46 + 4844) ^ *(_WORD *)(v46 + 4716)) | v69.i32[0] | (*(_DWORD *)(v46 + 4824) ^ *(_DWORD *)(v46 + 4696)) | v69.i32[1])
      {
        if (*(unsigned char *)(v60 + 1784))
        {
          v447 = &unk_26F853C48;
          LODWORD(v448) = *(_DWORD *)(v46 + 4728);
          uint64_t v449 = 0;
          uint64_t v450 = 0;
          *((void *)&v448 + 1) = 0;
          float v70 = *(unsigned char **)(v46 + 4736);
          unsigned int v71 = *(unsigned char **)(v46 + 4744);
          int64_t v72 = v71 - v70;
          if (v71 == v70)
          {
            BOOL v73 = 0;
          }
          else
          {
            if (v72 < 0) {
              abort();
            }
            BOOL v73 = (char *)operator new(v71 - v70);
            *((void *)&v448 + 1) = v73;
            uint64_t v449 = v73;
            uint64_t v450 = &v73[4 * (v72 >> 2)];
            memcpy(v73, v70, v72);
          }
          long long v74 = *v68;
          long long v452 = *(_OWORD *)(v46 + 4776);
          long long v451 = v74;
          long long v75 = *(_OWORD *)(v46 + 4792);
          long long v76 = *(_OWORD *)(v46 + 4808);
          long long v77 = *(_OWORD *)(v46 + 4824);
          *(void *)&v455[14] = *(void *)(v46 + 4838);
          *(_OWORD *)uint64_t v455 = v77;
          long long v454 = v76;
          long long v453 = v75;
          *(_OWORD *)&__dst[944] = *v68;
          long long v78 = *(_OWORD *)(v46 + 4776);
          long long v79 = *(_OWORD *)(v46 + 4792);
          long long v80 = *(_OWORD *)(v46 + 4824);
          *(_OWORD *)&__dst[992] = *(_OWORD *)(v46 + 4808);
          *(_OWORD *)&__dst[1008] = v80;
          *(_OWORD *)&__dst[960] = v78;
          *(_OWORD *)&__dst[976] = v79;
          v447 = &unk_26F853C48;
          if (v73)
          {
            uint64_t v449 = v73;
            operator delete(v73);
          }
        }
        AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsLate(v60, (uint64_t)__dst, *(void *)(a1 + 1792), *(void *)(a1 + 1800), *(void *)(a1 + 1848), *(void **)(a1 + 1872), *(void *)(a1 + 1896), *(char ***)(a1 + 1752));
      }
      *(_OWORD *)(v50 + 736) = *(_OWORD *)(v50 + 720);
      unint64_t v433 = &unk_26F853C48;
      if (__p)
      {
        long long v436 = __p;
        operator delete(__p);
      }
      unint64_t v81 = *(void *)(a1 + 1912) & 0xFFFFFFFFFFFFFFC0 | ((unint64_t)(((*(_DWORD *)(v46 + 5084)
                                                                                              + 1023) >> 10)
                                                                              + 1) >> 1) & 0x3F;
      *(void *)(a1 + 1912) = v81;
      int v82 = *(_DWORD *)(v46 + 2588);
      if (v82 != 1)
      {
        unsigned int v83 = *(_DWORD *)(v46 + 3940);
        unsigned int v84 = *(_DWORD *)(v46 + 3944);
        unsigned int v85 = *(_DWORD *)(v46 + 3948) & 0xFFFFFFFC;
        if (v82 == 4)
        {
          unsigned int v87 = ((v84 >> 2) * (v83 >> 3) * ((v85 + 31) >> 5)) >> 1;
        }
        else if (v82 == 2)
        {
          unsigned int v86 = (v84 >> 2) * (v83 >> 3) * ((v85 + 31) >> 5);
          if (v86 < 8) {
            unsigned int v87 = 1;
          }
          else {
            unsigned int v87 = v86 >> 3;
          }
        }
        else
        {
          unsigned int v87 = 0;
        }
        char v90 = v82 != 2 || v83 != 16 || v84 != 16;
        unint64_t v81 = v81 & 0xFFFFFFFFFFE0FFFFLL | (((v87 >> v90) & 0x1F) << 16);
        *(void *)(a1 + 1912) = v81;
      }
      *(void *)(v50 + 968) = v81;
      if (a4)
      {
        uint64_t v91 = *(_DWORD **)(a1 + 64);
        *(void *)(a1 + 64) = v91 + 1;
        *uint64_t v91 = *(_DWORD *)(v424 + 164);
      }
      if (*(unsigned char *)(a1 + 1544) && *(_DWORD *)(a1 + 1540) <= 4u) {
        *(void *)(*(void *)(v9 + 256) + 976) |= 1uLL;
      }
      if (a2)
      {
        uint64_t v92 = *(void *)(v421 + 40);
        if (*(unsigned char *)(*(void *)(a1 + 1968) + 3964))
        {
          uint64_t v93 = 0;
          uint64_t v94 = (uint64_t *)v421;
          goto LABEL_153;
        }
        uint64_t v94 = (uint64_t *)v421;
      }
      else
      {
        uint64_t v94 = (uint64_t *)v421;
        uint64_t v92 = *(void *)(v421 + 40);
      }
      uint64_t v93 = v94[1];
LABEL_153:
      uint64_t v95 = *v420;
      uint64_t v96 = v94[4];
      uint64_t v97 = *v94;
      uint64_t v98 = *(void *)(v424 + 232);
      if (v98) {
        AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::processFences(v98);
      }
      if (FenceEncoder::encode((AGX::SidebandBufferAllocator *)(a1 + 1464), a3, v95, v96, v97, v92, v93)) {
        *(void *)(v423 + 408) |= 0x100uLL;
      }
      if (*(_DWORD *)(v424 + 156) && !*(_DWORD *)(v424 + 160)) {
        char v99 = 2;
      }
      else {
        char v99 = 0;
      }
      int v100 = *(_DWORD *)(v424 + 152);
      if (v100 >= 0) {
        char v101 = v99;
      }
      else {
        char v101 = *(_DWORD *)(v424 + 152);
      }
      unsigned int v102 = v100 >> 8;
      BOOL v21 = (v100 & 0x40000000) == 0;
      uint64_t v103 = *(void *)(v9 + 256);
      if (!v21) {
        char v99 = v102;
      }
      *(unsigned char *)(v103 + 1681) = v101;
      *(unsigned char *)(v103 + 1682) = v99;
      AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeScsParameters_impl(a1);
      *(_OWORD *)(a1 + 1600) = 0u;
      if (!(HIWORD(*(void *)(a1 + 1624)) + (unsigned __int16)WORD2(*(void *)(a1 + 1624))))
      {
        uint64_t v104 = *(void *)(v9 + 256);
        *(_DWORD *)(v104 + 1772) = 8;
LABEL_260:
        if (*(unsigned char *)(v424 + 332))
        {
          *(unsigned char *)(v104 + 464) = 1;
          *(unsigned char *)(v104 + 1620) = 1;
          uint64_t v190 = 1179647;
        }
        else
        {
          uint64_t v190 = 0x100000;
        }
        *(void *)(v104 + 992) = v190;
        goto LABEL_264;
      }
      uint64_t v105 = *(void *)(*(void *)(a1 + 1456) + 808);
      *(void *)__dst = MEMORY[0x263EF8330];
      *(void *)&__dst[8] = 3221225472;
      *(void *)&__dst[16] = ___ZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE36setupDriverIntersectionTableIfNeededEv_block_invoke;
      *(void *)&__dst[24] = &__block_descriptor_40_e5_v8__0l;
      *(void *)&__dst[32] = v105;
      if (AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken != -1) {
        dispatch_once(&AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setupDriverIntersectionTableIfNeeded(void)::onceToken, __dst);
      }
      uint64_t v106 = *(void *)(v105 + 5152);
      int v107 = *(_DWORD *)(v106 + 204);
      int v108 = *(_DWORD *)(v9 + 4);
      if (v107 > v108)
      {
        *(_DWORD *)(v9 + 4) = v107;
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(v106 + 200);
        *(_OWORD *)(a1 + 38704) = *(_OWORD *)(v106 + 208);
      }
      int v109 = *(_DWORD *)(v106 + 224);
      int32x2_t v110 = *(int32x2_t *)(v9 + 24);
      __int32 v111 = v110.i32[1];
      int32x2_t v112 = vrev64_s32(v110);
      __int32 v113 = v110.i32[0];
      if (v110.i32[0] <= v109) {
        __int32 v113 = *(_DWORD *)(v106 + 224);
      }
      *(_DWORD *)(v9 + 24) = v113;
      int v114 = *(_DWORD *)(v106 + 228);
      if (v110.i32[1] <= v114) {
        __int32 v111 = *(_DWORD *)(v106 + 228);
      }
      *(_DWORD *)(v9 + 28) = v111;
      int v115 = *(_DWORD *)(v106 + 232);
      int v117 = *(_DWORD *)(v9 + 32);
      int v116 = *(_DWORD *)(v9 + 36);
      if (v117 <= v115) {
        int v118 = *(_DWORD *)(v106 + 232);
      }
      else {
        int v118 = *(_DWORD *)(v9 + 32);
      }
      *(_DWORD *)(v9 + 32) = v118;
      int v119 = *(_DWORD *)(v106 + 236);
      if (v116 <= v119) {
        int v120 = *(_DWORD *)(v106 + 236);
      }
      else {
        int v120 = v116;
      }
      *(_DWORD *)(v9 + 36) = v120;
      __int32 v121 = *(_DWORD *)(v106 + 240);
      __int32 v123 = *(_DWORD *)(v9 + 40);
      int v122 = *(_DWORD *)(v9 + 44);
      if (v123 <= v121) {
        int v124 = *(_DWORD *)(v106 + 240);
      }
      else {
        int v124 = *(_DWORD *)(v9 + 40);
      }
      *(_DWORD *)(v9 + 40) = v124;
      v125.i64[0] = __PAIR64__(v123, v122);
      v125.u64[1] = (unint64_t)v112;
      v126.i32[0] = *(_DWORD *)(v106 + 244);
      v126.i32[1] = v121;
      v126.i64[1] = __PAIR64__(v109, v114);
      if (v122 <= v126.i32[0]) {
        int v127 = *(_DWORD *)(v106 + 244);
      }
      else {
        int v127 = v122;
      }
      *(_DWORD *)(v9 + 44) = v127;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v126, v125))) & 1) != 0
        || v117 < v115
        || v116 < v119
        || v107 > v108)
      {
        AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v9, (__n128 *)(*(void *)(v9 + 256) + 304), 1);
      }
      int v128 = *(_DWORD *)(v106 + 204);
      int v129 = *(_DWORD *)(v9 + 124);
      int v130 = v129;
      if (v128 > v129)
      {
        *(_DWORD *)(v9 + 124) = v128;
        *(_DWORD *)(v9 + 120) = *(_DWORD *)(v106 + 200);
        *(_OWORD *)(a1 + 38824) = *(_OWORD *)(v106 + 208);
        int v130 = v128;
      }
      int v131 = *(_DWORD *)(v106 + 224);
      int32x2_t v132 = *(int32x2_t *)(v9 + 144);
      int32x2_t v133 = vrev64_s32(v132);
      __int32 v134 = v132.i32[0];
      if (v132.i32[0] <= v131) {
        __int32 v134 = *(_DWORD *)(v106 + 224);
      }
      *(_DWORD *)(v9 + 144) = v134;
      int v135 = *(_DWORD *)(v106 + 228);
      if (v132.i32[1] <= v135) {
        __int32 v136 = *(_DWORD *)(v106 + 228);
      }
      else {
        __int32 v136 = v132.i32[1];
      }
      *(_DWORD *)(v9 + 148) = v136;
      int v137 = *(_DWORD *)(v106 + 232);
      int v138 = *(_DWORD *)(v9 + 152);
      int v139 = *(_DWORD *)(v9 + 156);
      if (v138 <= v137) {
        int v140 = *(_DWORD *)(v106 + 232);
      }
      else {
        int v140 = *(_DWORD *)(v9 + 152);
      }
      *(_DWORD *)(v9 + 152) = v140;
      int v141 = *(_DWORD *)(v106 + 236);
      if (v139 <= v141) {
        int v142 = *(_DWORD *)(v106 + 236);
      }
      else {
        int v142 = v139;
      }
      *(_DWORD *)(v9 + 156) = v142;
      __int32 v143 = *(_DWORD *)(v106 + 240);
      __int32 v144 = *(_DWORD *)(v9 + 160);
      int v145 = *(_DWORD *)(v9 + 164);
      if (v144 <= v143) {
        int v146 = *(_DWORD *)(v106 + 240);
      }
      else {
        int v146 = *(_DWORD *)(v9 + 160);
      }
      *(_DWORD *)(v9 + 160) = v146;
      v147.i64[0] = __PAIR64__(v144, v145);
      v147.u64[1] = (unint64_t)v133;
      v148.i32[0] = *(_DWORD *)(v106 + 244);
      v148.i32[1] = v143;
      v148.i64[1] = __PAIR64__(v131, v135);
      if (v145 <= v148.i32[0]) {
        int v149 = *(_DWORD *)(v106 + 244);
      }
      else {
        int v149 = v145;
      }
      *(_DWORD *)(v9 + 164) = v149;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v148, v147))) & 1) != 0
        || v138 < v137
        || v139 < v141
        || v128 > v129)
      {
        uint64_t v150 = *(void *)(v9 + 256);
        if (v146 < 1)
        {
          unsigned __int32 v156 = 0;
          int v155 = 0;
        }
        else
        {
          uint64_t v151 = *(void *)(v9 + 176);
          int v152 = *(_DWORD *)(v151 + 5912);
          uint64_t v153 = 5936;
          if (*(_OWORD *)(v151 + 5936) == 0) {
            uint64_t v153 = 5952;
          }
          int32x2_t v154 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v151 + v153))))));
          int v155 = v140 + v142;
          unsigned __int32 v156 = (v149 + v146 + v140 + v142) * vadd_s32(vdup_lane_s32(v154, 1), v154).u32[0];
          int v157 = *(_DWORD *)(v9 + 120);
          BOOL v350 = v142 <= v157;
          int v158 = (v142 - v157) * v152;
          if (v350) {
            int v158 = 0;
          }
          v130 += v156 + v158;
          v134 += v136 + v156;
        }
        *(_WORD *)(v150 + 1208) = 0;
        *(_DWORD *)(v150 + 1192) = v146;
        *(_DWORD *)(v150 + 1196) = v149;
        *(_DWORD *)(v150 + 1200) = v155;
        *(_DWORD *)(v150 + 1204) = v156;
        *(void *)(v150 + 1152) = (uint64_t)(int)((v130 + 7) & 0xFFFFFFF8) << 12;
        *(void *)(v150 + 1160) = (uint64_t)(int)((v134 + 7) & 0xFFFFFFF8) << 12;
        *(_OWORD *)(v150 + 1168) = *(_OWORD *)(a1 + 38824);
      }
      uint64_t v159 = *(void *)(v9 + 256);
      int v160 = *(_DWORD *)(v106 + 24);
      *(void *)(v159 + 1712) = *(void *)(v106 + 8) & 0xFFFFFFFFFFC0;
      *(void *)(v159 + 1720) = v160 & 0x1FFFFFF | 0xC0000000;
      AGX::DriverIntersectionFunctionTableGen1<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResources((void *)v106);
      uint64_t v161 = *(void *)(v9 + 256);
      *(void *)(v161 + 1744) = *(void *)(v106 + 168);
      *(void *)(v161 + 1752) = *(void *)(v106 + 176);
      *(_OWORD *)(v161 + 1728) = xmmword_242EA8700;
      int v162 = HIBYTE(*(_DWORD *)(a1 + 1624));
      if (!v162)
      {
        uint64_t v163 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
        *(_DWORD *)(v163 + 12) = 1;
        if ((*(unsigned char *)(v163 + 8) & 4) != 0) {
          **(unsigned char **)(*(void *)a1 + 688) = 1;
        }
      }
      *(_DWORD *)(v161 + 1768) = v162;
      *(_DWORD *)(v161 + 1772) = *(unsigned __int16 *)(a1 + 1624);
      int v164 = *(_DWORD *)(a1 + 1716);
      if (v164 == -1)
      {
        int v164 = (RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd(a1 + 1624, 10)+ 0x1FFF) & 0xFFFFF000;
        *(_DWORD *)(a1 + 1716) = v164;
        int v165 = *(_DWORD *)(v9 + 4);
        if ((v165 & 0x80000000) == 0) {
          goto LABEL_231;
        }
      }
      else
      {
        int v165 = *(_DWORD *)(v9 + 4);
        if ((v165 & 0x80000000) == 0)
        {
LABEL_231:
          signed int v166 = (v164 + 4095) >> 12;
          signed int v167 = (4 * v166 + 1023) >> 10;
          int8x16_t v168 = *(int8x16_t *)(v9 + 24);
          *(int32x4_t *)(v9 + 24) = vmaxq_s32((int32x4_t)v168, (int32x4_t)0);
          signed int v169 = *(_DWORD *)(v9 + 40);
          signed int v170 = *(_DWORD *)(v9 + 44);
          if (v169 <= v166) {
            signed int v171 = v166;
          }
          else {
            signed int v171 = *(_DWORD *)(v9 + 40);
          }
          if (v170 <= v167) {
            unsigned int v172 = (4 * v166 + 1023) >> 10;
          }
          else {
            unsigned int v172 = *(_DWORD *)(v9 + 44);
          }
          *(_DWORD *)(v9 + 40) = v171;
          *(_DWORD *)(v9 + 44) = v172;
          int8x8_t v173 = vorr_s8(*(int8x8_t *)v168.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v168, v168, 8uLL));
          if ((v173.i32[0] | v165 | v173.i32[1]) < 0 || v169 < v166 || v170 < v167) {
            AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v9, (__n128 *)(v161 + 304), 1);
          }
          unsigned __int32 v174 = *(_DWORD *)(v9 + 124);
          unsigned __int32 v175 = v174;
          if ((v174 & 0x80000000) != 0)
          {
            unsigned __int32 v175 = 0;
            *(void *)(v9 + 120) = 0;
            *(void *)(v9 + 128) = 0;
            *(void *)(v9 + 136) = 0;
          }
          a7 = *(int32x4_t *)(v9 + 144);
          int32x4_t v176 = vmaxq_s32(a7, (int32x4_t)0);
          *(int32x4_t *)(v9 + 144) = v176;
          signed int v177 = *(_DWORD *)(v9 + 160);
          signed int v178 = *(_DWORD *)(v9 + 164);
          if (v177 <= v166) {
            signed int v179 = v166;
          }
          else {
            signed int v179 = *(_DWORD *)(v9 + 160);
          }
          if (v178 <= v167) {
            unsigned int v180 = (4 * v166 + 1023) >> 10;
          }
          else {
            unsigned int v180 = *(_DWORD *)(v9 + 164);
          }
          *(_DWORD *)(v9 + 160) = v179;
          *(_DWORD *)(v9 + 164) = v180;
          a8 = (int8x8_t)vextq_s8((int8x16_t)a7, (int8x16_t)a7, 8uLL).u64[0];
          *(int8x8_t *)a7.i8 = vorr_s8(*(int8x8_t *)a7.i8, a8);
          unsigned __int32 v181 = a7.i32[0] | v174 | a7.i32[1];
          uint64_t v104 = *(void *)(v9 + 256);
          if ((v181 & 0x80000000) != 0 || v177 < v166 || v178 < v167)
          {
            *(int32x2_t *)a7.i8 = vdup_lane_s32(*(int32x2_t *)v176.i8, 0);
            a7.i32[0] = v175;
            if (v179)
            {
              uint64_t v182 = *(void *)(v9 + 176);
              uint64_t v183 = 5936;
              if (*(_OWORD *)(v182 + 5936) == 0) {
                uint64_t v183 = 5952;
              }
              int32x2_t v184 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v182 + v183))))));
              int v185 = *(_DWORD *)(v182 + 5912);
              a8 = (int8x8_t)vadd_s32(vdup_lane_s32(v184, 1), v184);
              int v186 = v176.i32[2] + v176.i32[3];
              int v187 = (v180 + v179 + v176.i32[2] + v176.i32[3]) * a8.i32[0];
              int v188 = *(_DWORD *)(v9 + 120);
              int v189 = (v176.i32[3] - v188) * v185;
              if (v176.i32[3] <= v188) {
                int v189 = 0;
              }
              v176.i32[0] = (v180 + v179 + v186) * a8.i32[0];
              *(int32x2_t *)a7.i8 = vadd_s32(vadd_s32(*(int32x2_t *)v176.i8, *(int32x2_t *)a7.i8), (int32x2_t)__PAIR64__(v187, v189));
            }
            else
            {
              int v187 = 0;
              int v186 = 0;
            }
            *(_WORD *)(v104 + 1208) = 0;
            *(_DWORD *)(v104 + 1192) = v179;
            *(_DWORD *)(v104 + 1196) = v180;
            *(_DWORD *)(v104 + 1200) = v186;
            *(_DWORD *)(v104 + 1204) = v187;
            *(int64x2_t *)(v104 + 1152) = vshll_n_s32((int32x2_t)(*(void *)&vadd_s32(*(int32x2_t *)a7.i8, (int32x2_t)0x700000007) & 0xFFFFFFF8FFFFFFF8), 0xCuLL);
            *(_OWORD *)(v104 + 1168) = *(_OWORD *)(a1 + 38824);
            uint64_t v104 = *(void *)(v9 + 256);
          }
          goto LABEL_260;
        }
      }
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      goto LABEL_231;
    }
  }
  if (*(unsigned char *)(a1 + 36657)) {
    goto LABEL_9;
  }
  uint64_t v18 = *(void *)(a1 + 1968);
  unsigned int v19 = *(_DWORD *)(v18 + 4912);
  unsigned int v20 = (v19 | *(unsigned char *)(v18 + 4904)) & *(unsigned char *)(v18 + 4896);
  if (((v19 | *(unsigned char *)(v18 + 4904)) & *(unsigned char *)(v18 + 4896)) == 0 || *(unsigned char *)(v18 + 3906)) {
    goto LABEL_9;
  }
  BOOL v21 = ((v19 | *(_DWORD *)(v18 + 4904)) & *(_DWORD *)(v18 + 4896)) <= 0xFF && *(_DWORD *)(v18 + 3912) == 1;
  if (!v21) {
    goto LABEL_9;
  }
  do
  {
    uint64_t v22 = __clz(__rbit32(v20));
    uint64_t v23 = *(void *)(v18 + 8 * v22 + 2432);
    if (*(_DWORD *)(v23 + 236)) {
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v18 + 4912) & (1 << v22)) == 0)
    {
      uint64_t v25 = 0;
LABEL_33:
      char v26 = 1;
      goto LABEL_34;
    }
    unsigned int v24 = *(_DWORD *)(*(void *)(v23 + 208) + 32) - 4;
    if (v24 < 0xF && ((0x40F3u >> v24) & 1) != 0) {
      goto LABEL_9;
    }
    uint64_t v25 = *(void *)(v18 + 8 * v22 + 2512);
    if (!v25) {
      goto LABEL_33;
    }
    if (*(void *)(v25 + 32) != *(void *)(v23 + 32)) {
      goto LABEL_9;
    }
    char v26 = 0;
LABEL_34:
    memset(__dst, 0, 32);
    if (!MTLPackColor()) {
      goto LABEL_9;
    }
    uint64_t v27 = *(void *)(v23 + 488);
    if (!v27) {
      goto LABEL_9;
    }
    if (*(_DWORD *)(v27 + 1080) <= *(_DWORD *)(v23 + 144)
                                  + *(unsigned __int16 *)(v18 + 6 * v22 + 4944))
      goto LABEL_9;
    if ((v26 & 1) == 0)
    {
      uint64_t v28 = *(void *)(v25 + 488);
      if (!v28 || *(_DWORD *)(v28 + 1080) <= *(unsigned __int16 *)(v18 + 6 * v22 + 4992)) {
        goto LABEL_9;
      }
    }
    v20 ^= 1 << v22;
  }
  while (v20);
  uint64_t v420 = (uint64_t *)(v9 + 248);
  if (*(_DWORD *)(*(void *)(v9 + 248) + 4)) {
    goto LABEL_10;
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  if (*(unsigned char *)(*(void *)(a1 + 1456) + 936)) {
    atomic_fetch_add((atomic_ullong *volatile)(*(void *)(a1 + 1456) + 1064), 1uLL);
  }
  *(unsigned char *)(v424 + 338) = 1;
  int v445 = -1;
  *(void *)&long long v238 = -1;
  *((void *)&v238 + 1) = -1;
  v444[2] = v238;
  v444[3] = v238;
  v444[0] = v238;
  v444[1] = v238;
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::populateFastClearConfig(*(unsigned char **)(a1 + 1968), (unsigned int *)__dst);
  if (*(_DWORD *)__dst)
  {
    unint64_t v239 = 0;
    uint64_t v418 = a1 + 16;
    __n128 v240 = (unsigned int *)&v443 + 1;
    __n128 v241 = &__dst[104];
    while (1)
    {
      uint64_t v242 = *((void *)v241 - 12);
      unsigned int v243 = *(unsigned __int8 *)(*(void *)(v242 + 208) + 88);
      isLargeMacroblocuint64_t k = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(v242);
      LODWORD(v245) = 4 * v243;
      if (isLargeMacroblock) {
        uint64_t v245 = v245;
      }
      else {
        uint64_t v245 = v243;
      }
      uint64_t v246 = *(void *)(v242 + 32);
      unint64_t v247 = v246 & 0xFFFFFFFFFFFFFFFELL;
      if ((unint64_t)(v246 - 631) < 2
        || v247 == 552
        || v247 == 638
        || v247 == 640
        || (unint64_t)(v246 - 633) < 5
        || v246 == 630)
      {
        uint64_t v245 = 5;
      }
      uint64_t v253 = 4 * v245;
      v446[v239] = *(_DWORD *)((char *)v444 + v253);
      *(_DWORD *)((char *)v444 + v253) = v239;
      MTLPackColor();
      uint64_t v254 = *((void *)v241 - 12);
      if (v254) {
        break;
      }
LABEL_366:
      uint64_t v264 = *((void *)v241 - 6);
      if (v264)
      {
        IOGPUResourceListAddResource();
        unint64_t v265 = (void *)*((void *)v241 - 2);
        if (v265 && [v265 resourceID]) {
          IOGPUResourceListAddResource();
        }
        int v266 = (void *)*((void *)v241 - 1);
        if (v266 && [v266 resourceID]) {
          IOGPUResourceListAddResource();
        }
        uint64_t v267 = *(void *)(a1 + 160);
        uint64_t v268 = v267 + 48;
        if ((unint64_t)(v267 + 48) <= *(void *)(a1 + 152)) {
          goto LABEL_374;
        }
        int v275 = AGX::DataBufferAllocator<34ul>::growNoInline(v418, 3, 0);
        uint64_t v267 = *(void *)(a1 + 160);
        if (v275)
        {
          uint64_t v268 = v267 + 48;
          if ((unint64_t)(v267 + 48) > *(void *)(a1 + 152)) {
LABEL_385:
          }
            abort();
LABEL_374:
          *(void *)(a1 + 168) = v268;
        }
        *(void *)(v240 - 3) = *(void *)(a1 + 176) + v267;
        *(void *)(a1 + 160) = v267 + 48;
        LODWORD(v425) = 0;
        unsigned int v431 = 0;
        AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(v264, &v425, &v431);
        unsigned int v269 = *((_DWORD *)v241 - 9);
        unsigned int v270 = *(_DWORD *)(v264 + 128) >> (*(unsigned char *)(v264 + 144) + v269);
        if (v270 <= 1) {
          unsigned int v270 = 1;
        }
        unsigned int v271 = (v425 + v270 - 1) / v425;
        unsigned int v272 = *(_DWORD *)(v264 + 132) >> (*(unsigned char *)(v264 + 144) + v269);
        if (v272 <= 1) {
          unsigned int v272 = 1;
        }
        unsigned int v273 = (v431 + v272 - 1) / v431;
        *(v240 - 1) = ((v273 + 1) & 0xFFFFFFFE) * ((v271 + 1) & 0xFFFFFFFE);
        AGX::BlitDispatchParametersGen2_2<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupFastClearArguments(v267, v240, (unsigned __int16 *)&v447, v264, v269, 0, 0, v271, v273);
      }
      ++v239;
      v240 += 4;
      v241 += 128;
      if (v239 >= *(unsigned int *)__dst) {
        goto LABEL_386;
      }
    }
    IOGPUResourceListAddResource();
    unint64_t v255 = (void *)*((void *)v241 - 8);
    if (v255 && [v255 resourceID]) {
      IOGPUResourceListAddResource();
    }
    int v256 = (void *)*((void *)v241 - 7);
    if (v256 && [v256 resourceID]) {
      IOGPUResourceListAddResource();
    }
    uint64_t v257 = *(void *)(a1 + 160);
    uint64_t v258 = v257 + 48;
    if ((unint64_t)(v257 + 48) > *(void *)(a1 + 152))
    {
      int v274 = AGX::DataBufferAllocator<34ul>::growNoInline(v418, 3, 0);
      uint64_t v257 = *(void *)(a1 + 160);
      if (v274)
      {
        uint64_t v258 = v257 + 48;
        if ((unint64_t)(v257 + 48) > *(void *)(a1 + 152)) {
          goto LABEL_385;
        }
        goto LABEL_360;
      }
    }
    else
    {
LABEL_360:
      *(void *)(a1 + 168) = v258;
    }
    *(void *)(v240 - 35) = *(void *)(a1 + 176) + v257;
    *(void *)(a1 + 160) = v257 + 48;
    LODWORD(v425) = 0;
    unsigned int v431 = 0;
    AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMacroblockDimensions(v254, &v425, &v431);
    unsigned int v259 = *((_DWORD *)v241 - 21);
    unsigned int v260 = *(_DWORD *)(v254 + 128) >> (*(unsigned char *)(v254 + 144) + v259);
    if (v260 <= 1) {
      unsigned int v260 = 1;
    }
    unsigned int v261 = (v425 + v260 - 1) / v425;
    unsigned int v262 = *(_DWORD *)(v254 + 132) >> (*(unsigned char *)(v254 + 144) + v259);
    if (v262 <= 1) {
      unsigned int v262 = 1;
    }
    unsigned int v263 = (v431 + v262 - 1) / v431;
    *(v240 - 33) = ((v263 + 1) & 0xFFFFFFFE) * ((v261 + 1) & 0xFFFFFFFE);
    AGX::BlitDispatchParametersGen2_2<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupFastClearArguments(v257, v240 - 32, (unsigned __int16 *)&v447, v254, v259, 0, 0, v261, v263);
    goto LABEL_366;
  }
LABEL_386:
  uint64_t v410 = (void *)(a1 + 16);
  uint64_t v276 = *(void *)(a1 + 72);
  if ((unint64_t)(v276 + 40) > *(void *)(a1 + 56))
  {
    unsigned int v404 = *(unint64_t **)(a1 + 64);
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 0, 0))
    {
      uint64_t v405 = *(void *)(a1 + 64);
      unint64_t v406 = v405 + v276 - (void)v404 + 40;
      if (v406 > *(void *)(a1 + 56)) {
        abort();
      }
      *(void *)(a1 + 72) = v406;
      *unsigned int v404 = __ROR8__(*(void *)(a1 + 80) + v405, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    *(void *)(a1 + 72) = v276 + 40;
  }
  uint64_t v277 = *(void *)(a1 + 1024);
  uint64_t v278 = *(void *)(a1 + 1032);
  unint64_t v279 = v278 + 88;
  if ((unint64_t)(v278 + 88) <= *(void *)(a1 + 1016))
  {
    uint64_t v280 = *(void *)(a1 + 1024);
    goto LABEL_390;
  }
  int v407 = AGX::DataBufferAllocator<34ul>::growNoInline(v410, 30, 0);
  uint64_t v280 = *(void *)(a1 + 1024);
  if (v407)
  {
    unint64_t v279 = v280 + v278 - v277 + 88;
    if (v279 > *(void *)(a1 + 1016)) {
      abort();
    }
LABEL_390:
    *(void *)(a1 + 1032) = v279;
  }
  uint64_t v281 = *(void *)(a1 + 1040) + v280;
  *(void *)(a1 + 1024) = v280 + 20;
  *(_OWORD *)uint64_t v280 = xmmword_242EA7DD0;
  *(_DWORD *)(v280 + 16) = 0;
  unint64_t v282 = *(unint64_t **)(a1 + 64);
  *unint64_t v282 = __ROR8__(v281, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(a1 + 64) = v282 + 1;
  uint64_t v283 = *(void *)(a1 + 1024);
  uint64_t v284 = *(void *)(a1 + 1040) + v283;
  *(void *)(a1 + 1024) = v283 + 28;
  *(_OWORD *)uint64_t v283 = xmmword_242EA7DE0;
  *(void *)(v283 + 16) = 0xE00000007E00F00;
  *(_DWORD *)(v283 + 24) = 0;
  uint64_t v285 = __ROR8__(v284, 32);
  long long v286 = *(unint64_t **)(a1 + 64);
  *long long v286 = v285 & 0xFFFFFFFC000000FFLL | 0x700;
  *(void *)(a1 + 64) = v286 + 1;
  uint64_t v287 = *(void *)(a1 + 1024);
  uint64_t v288 = *(void *)(a1 + 1040) + v287;
  *(void *)(a1 + 1024) = v287 + 20;
  *(_DWORD *)uint64_t v287 = 201981952;
  *(void *)(v287 + 12) = 0;
  *(void *)(v287 + 4) = 0;
  uint64_t v289 = *(unint64_t **)(a1 + 64);
  *uint64_t v289 = __ROR8__(v288, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(a1 + 64) = v289 + 1;
  uint64_t v290 = *(void *)(a1 + 1024);
  uint64_t v291 = *(void *)(a1 + 1040) + v290;
  *(void *)(a1 + 1024) = v290 + 12;
  *(void *)uint64_t v290 = 0x1E3CE50800410000;
  *(_DWORD *)(v290 + 8) = 131232;
  uint64_t v292 = __ROR8__(v291, 32);
  unsigned int v293 = *(unint64_t **)(a1 + 64);
  *unsigned int v293 = v292 & 0xFFFFFFFC000000FFLL | 0x300;
  *(void *)(a1 + 64) = v293 + 1;
  char v294 = *(void **)(a1 + 1024);
  int v295 = (char *)v294 + *(void *)(a1 + 1040);
  *(void *)(a1 + 1024) = v294 + 1;
  uint64_t v296 = __ROR8__(v295, 32);
  *char v294 = 0x48000200000;
  long long v297 = *(unint64_t **)(a1 + 64);
  *long long v297 = v296 & 0xFFFFFFFC000000FFLL | 0x200;
  *(void *)(a1 + 64) = v297 + 1;
  int v426 = 95;
  long long v428 = 0;
  uint64_t v429 = 0;
  long long v427 = 0;
  long long v425 = &unk_26F8531D0;
  unsigned int v430 = 6;
  uint64_t BlitProgramVariant = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1456) + 808), (uint64_t)&v425);
  uint64_t v299 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)&v447, *(void *)(*(void *)(a1 + 1456) + 808), *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 6032));
  DWORD2(v451) = 1;
  int v300 = *(_DWORD *)(BlitProgramVariant + 2628);
  int v301 = HIDWORD(v447);
  if (v300 > SHIDWORD(v447))
  {
    LODWORD(v447) = *(_DWORD *)(BlitProgramVariant + 2624);
    HIDWORD(v447) = v300;
    long long v448 = *(_OWORD *)(BlitProgramVariant + 2632);
  }
  int v302 = *(_DWORD *)(BlitProgramVariant + 2648);
  int v303 = (int)v449;
  if ((int)v449 <= v302) {
    int v304 = *(_DWORD *)(BlitProgramVariant + 2648);
  }
  else {
    int v304 = (int)v449;
  }
  LODWORD(v449) = v304;
  if (v300 > v301 || v303 < v302) {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v299, (__n128 *)(*(void *)(v9 + 256) + 304), 0);
  }
  int v419 = (void *)(a1 + 1752);
  unsigned int v305 = *(_DWORD *)(BlitProgramVariant + 1680);
  do
  {
    IOGPUResourceListAddResource();
    v305 &= ~(1 << __clz(__rbit32(v305)));
  }
  while (v305);
  if (*(_DWORD *)__dst)
  {
    unint64_t v306 = 0;
    uint64_t v307 = &v443;
    uint64_t v308 = (unsigned int *)&__dst[72];
    while (2)
    {
      uint64_t v309 = *((void *)v308 - 8);
      if (!v309) {
        goto LABEL_417;
      }
      uint64_t v449 = 0;
      uint64_t v450 = 0;
      v447 = (void *)*(v307 - 17);
      *(void *)&long long v448 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v309 + 488), *(v308 - 14), *(_DWORD *)(v309 + 144) + *(v308 - 13), *(v308 - 12), 0);
      uint64_t v310 = *(void *)(a1 + 72);
      if ((unint64_t)(v310 + 44) > *(void *)(a1 + 56))
      {
        uint64_t v335 = *(unint64_t **)(a1 + 64);
        if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 0, 0))
        {
          uint64_t v336 = *(void *)(a1 + 64);
          unint64_t v337 = v336 + v310 - (void)v335 + 44;
          if (v337 > *(void *)(a1 + 56)) {
            goto LABEL_544;
          }
          *(void *)(a1 + 72) = v337;
          *uint64_t v335 = __ROR8__(*(void *)(a1 + 80) + v336, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
        }
      }
      else
      {
        *(void *)(a1 + 72) = v310 + 44;
      }
      uint64_t v311 = *(unsigned int *)(BlitProgramVariant + 16) + 31;
      uint64_t v312 = *(void *)(a1 + 168);
      unint64_t v313 = v312 + v311;
      if ((unint64_t)(v312 + v311) > *(void *)(a1 + 152))
      {
        uint64_t v411 = *(void *)(a1 + 160);
        if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 3, 0))
        {
          unint64_t v313 = *(void *)(a1 + 160) + v312 - v411 + v311;
          if (v313 > *(void *)(a1 + 152)) {
            goto LABEL_448;
          }
          goto LABEL_407;
        }
      }
      else
      {
LABEL_407:
        *(void *)(a1 + 168) = v313;
      }
      uint64_t v314 = (*(_DWORD *)(*(void *)(BlitProgramVariant + 1344) + 8)
                          - **(_DWORD **)(BlitProgramVariant + 1344))
           + 63;
      uint64_t v315 = *(void *)(a1 + 232);
      unint64_t v316 = v315 + v314;
      if ((unint64_t)(v315 + v314) > *(void *)(a1 + 216))
      {
        uint64_t v412 = *(void *)(a1 + 224);
        if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 5, 0))
        {
          unint64_t v316 = *(void *)(a1 + 224) + v315 - v412 + v314;
          if (v316 > *(void *)(a1 + 216)) {
            goto LABEL_448;
          }
          goto LABEL_409;
        }
      }
      else
      {
LABEL_409:
        *(void *)(a1 + 232) = v316;
      }
      AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v419, v410, BlitProgramVariant, &v447);
      if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(v309)) {
        char v317 = 2;
      }
      else {
        char v317 = 0;
      }
      unsigned int v318 = *((_DWORD *)v307 - 32) << v317;
      if (v318 <= 7) {
        int v319 = 1;
      }
      else {
        int v319 = v318 >> 2;
      }
      LODWORD(v320) = 1640235008;
      DWORD1(v320) = v319;
      *((void *)&v320 + 1) = 1;
      int v321 = *(_OWORD **)(a1 + 64);
      *int v321 = v320;
      *(void *)(a1 + 64) = v321 + 1;
      ++*(_DWORD *)(a1 + 1524);
      *(_DWORD *)(a1 + 1540) += v319;
LABEL_417:
      uint64_t v322 = *((void *)v308 - 2);
      if (v322)
      {
        uint64_t v449 = 0;
        uint64_t v450 = 0;
        v447 = (void *)*(v307 - 1);
        *(void *)&long long v448 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(*(void *)(v322 + 488), *(v308 - 2), *(_DWORD *)(v322 + 144) + *(v308 - 1), *v308, 0);
        uint64_t v323 = *(void *)(a1 + 72);
        if ((unint64_t)(v323 + 44) > *(void *)(a1 + 56))
        {
          uint64_t v338 = *(unint64_t **)(a1 + 64);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 0, 0))
          {
            uint64_t v339 = *(void *)(a1 + 64);
            unint64_t v340 = v339 + v323 - (void)v338 + 44;
            if (v340 > *(void *)(a1 + 56)) {
LABEL_544:
            }
              abort();
            *(void *)(a1 + 72) = v340;
            *uint64_t v338 = __ROR8__(*(void *)(a1 + 80) + v339, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
          }
        }
        else
        {
          *(void *)(a1 + 72) = v323 + 44;
        }
        uint64_t v324 = *(unsigned int *)(BlitProgramVariant + 16) + 31;
        uint64_t v325 = *(void *)(a1 + 168);
        unint64_t v326 = v325 + v324;
        if ((unint64_t)(v325 + v324) <= *(void *)(a1 + 152)) {
          goto LABEL_421;
        }
        uint64_t v413 = *(void *)(a1 + 160);
        if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 3, 0))
        {
          unint64_t v326 = *(void *)(a1 + 160) + v325 - v413 + v324;
          if (v326 > *(void *)(a1 + 152)) {
            goto LABEL_448;
          }
LABEL_421:
          *(void *)(a1 + 168) = v326;
        }
        uint64_t v327 = (*(_DWORD *)(*(void *)(BlitProgramVariant + 1344) + 8)
                            - **(_DWORD **)(BlitProgramVariant + 1344))
             + 63;
        uint64_t v328 = *(void *)(a1 + 232);
        unint64_t v329 = v328 + v327;
        if ((unint64_t)(v328 + v327) > *(void *)(a1 + 216))
        {
          uint64_t v414 = *(void *)(a1 + 224);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 5, 0))
          {
            unint64_t v329 = *(void *)(a1 + 224) + v328 - v414 + v327;
            if (v329 > *(void *)(a1 + 216)) {
LABEL_448:
            }
              abort();
            goto LABEL_423;
          }
        }
        else
        {
LABEL_423:
          *(void *)(a1 + 232) = v329;
        }
        AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v419, v410, BlitProgramVariant, &v447);
        if (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::isLargeMacroblock(v322)) {
          char v330 = 2;
        }
        else {
          char v330 = 0;
        }
        unsigned int v331 = *(_DWORD *)v307 << v330;
        if (v331 <= 7) {
          int v332 = 1;
        }
        else {
          int v332 = v331 >> 2;
        }
        LODWORD(v333) = 1640235008;
        DWORD1(v333) = v332;
        *((void *)&v333 + 1) = 1;
        unint64_t v334 = *(_OWORD **)(a1 + 64);
        *unint64_t v334 = v333;
        *(void *)(a1 + 64) = v334 + 1;
        ++*(_DWORD *)(a1 + 1524);
        *(_DWORD *)(a1 + 1540) += v332;
      }
      ++v306;
      v307 += 2;
      v308 += 32;
      if (v306 >= *(unsigned int *)__dst) {
        break;
      }
      continue;
    }
  }
  int8x16_t v341 = &AGX::BlitDispatchParametersGen2_2<AGX::HAL200::Encoders,AGX::HAL200::Classes>::validTexelSize;
  while (2)
  {
    uint64_t v415 = v341;
    uint64_t v342 = *((unsigned int *)v444 + *v341);
    if (v342 != -1)
    {
      unsigned int v430 = v430 & 0xFFFFF800 | (8 * *v341) | 2;
      uint64_t v343 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateBlitProgramVariant(*(void *)(*(void *)(a1 + 1456) + 808), (uint64_t)&v425);
      uint64_t v344 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)&v447, *(void *)(*(void *)(a1 + 1456) + 808), *(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 6032));
      DWORD2(v451) = 1;
      int v345 = *(_DWORD *)(v343 + 2628);
      int v346 = HIDWORD(v447);
      if (v345 > SHIDWORD(v447))
      {
        LODWORD(v447) = *(_DWORD *)(v343 + 2624);
        HIDWORD(v447) = v345;
        long long v448 = *(_OWORD *)(v343 + 2632);
      }
      int v347 = *(_DWORD *)(v343 + 2648);
      int v348 = (int)v449;
      if ((int)v449 <= v347) {
        int v349 = *(_DWORD *)(v343 + 2648);
      }
      else {
        int v349 = (int)v449;
      }
      LODWORD(v449) = v349;
      BOOL v350 = v345 > v346 || v348 < v347;
      if (v350) {
        AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v344, (__n128 *)(*(void *)(v9 + 256) + 304), 0);
      }
      unsigned int v351 = *(_DWORD *)(v343 + 1680);
      do
      {
        IOGPUResourceListAddResource();
        v351 &= ~(1 << __clz(__rbit32(v351)));
      }
      while (v351);
      while (2)
      {
        unsigned int v359 = &__dst[128 * v342];
        uint64_t v362 = *((void *)v359 + 1);
        __int32 v361 = v359 + 8;
        uint64_t v360 = v362;
        if (!v362) {
          goto LABEL_486;
        }
        uint64_t v449 = 0;
        uint64_t v450 = 0;
        v447 = *(&v433 + 2 * v342);
        *(void *)&long long v448 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v360, *((_DWORD *)v361 + 2), *(_DWORD *)(v360 + 144) + *((_DWORD *)v361 + 3), *((_DWORD *)v361 + 4), 0);
        uint64_t v363 = *(void *)(a1 + 72);
        if ((unint64_t)(v363 + 44) > *(void *)(a1 + 56))
        {
          unint64_t v386 = *(unint64_t **)(a1 + 64);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 0, 0))
          {
            uint64_t v387 = *(void *)(a1 + 64);
            unint64_t v388 = v387 + v363 - (void)v386 + 44;
            if (v388 > *(void *)(a1 + 56)) {
              goto LABEL_541;
            }
            *(void *)(a1 + 72) = v388;
            *unint64_t v386 = __ROR8__(*(void *)(a1 + 80) + v387, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
          }
        }
        else
        {
          *(void *)(a1 + 72) = v363 + 44;
        }
        uint64_t v364 = *(unsigned int *)(v343 + 16) + 31;
        uint64_t v365 = *(void *)(a1 + 168);
        unint64_t v366 = v365 + v364;
        if ((unint64_t)(v365 + v364) > *(void *)(a1 + 152))
        {
          uint64_t v408 = *(void *)(a1 + 160);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 3, 0))
          {
            unint64_t v366 = *(void *)(a1 + 160) + v365 - v408 + v364;
            if (v366 > *(void *)(a1 + 152)) {
              goto LABEL_540;
            }
            goto LABEL_477;
          }
        }
        else
        {
LABEL_477:
          *(void *)(a1 + 168) = v366;
        }
        uint64_t v367 = (*(_DWORD *)(*(void *)(v343 + 1344) + 8) - **(_DWORD **)(v343 + 1344)) + 63;
        uint64_t v368 = *(void *)(a1 + 232);
        unint64_t v369 = v368 + v367;
        if ((unint64_t)(v368 + v367) > *(void *)(a1 + 216))
        {
          uint64_t v409 = *(void *)(a1 + 224);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 5, 0))
          {
            unint64_t v369 = *(void *)(a1 + 224) + v368 - v409 + v367;
            if (v369 > *(void *)(a1 + 216)) {
              goto LABEL_540;
            }
            goto LABEL_479;
          }
        }
        else
        {
LABEL_479:
          *(void *)(a1 + 232) = v369;
        }
        AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v419, v410, v343, &v447);
        uint64_t v370 = &v433 + 2 * v342;
        int v371 = *((_DWORD *)v370 + 2);
        LODWORD(v370) = *((_DWORD *)v370 + 3);
        unsigned int v372 = v370 * v371;
        if (v370 == 3) {
          unsigned int v373 = 3;
        }
        else {
          unsigned int v373 = 4;
        }
        unsigned int v374 = v372 / v373;
        if (v374 <= 1) {
          unsigned int v374 = 1;
        }
        LODWORD(v375) = 1640235008;
        DWORD1(v375) = v374;
        *((void *)&v375 + 1) = 1;
        uint64_t v376 = *(_OWORD **)(a1 + 64);
        *uint64_t v376 = v375;
        *(void *)(a1 + 64) = v376 + 1;
        ++*(_DWORD *)(a1 + 1524);
        *(_DWORD *)(a1 + 1540) += v374;
LABEL_486:
        uint64_t v377 = *((void *)v361 + 6);
        if (v377)
        {
          uint64_t v449 = 0;
          uint64_t v450 = 0;
          v447 = (void *)*((void *)&v442[v342 + 1] + 1);
          *(void *)&long long v448 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v377, *((_DWORD *)v361 + 14), *(_DWORD *)(v377 + 144) + *((_DWORD *)v361 + 15), *((_DWORD *)v361 + 16), 0);
          uint64_t v378 = *(void *)(a1 + 72);
          if ((unint64_t)(v378 + 44) > *(void *)(a1 + 56))
          {
            uint64_t v389 = *(unint64_t **)(a1 + 64);
            if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 0, 0))
            {
              uint64_t v390 = *(void *)(a1 + 64);
              unint64_t v391 = v390 + v378 - (void)v389 + 44;
              if (v391 > *(void *)(a1 + 56)) {
LABEL_541:
              }
                abort();
              *(void *)(a1 + 72) = v391;
              *uint64_t v389 = __ROR8__(*(void *)(a1 + 80) + v390, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
            }
          }
          else
          {
            *(void *)(a1 + 72) = v378 + 44;
          }
          uint64_t v379 = *(unsigned int *)(v343 + 16) + 31;
          uint64_t v380 = *(void *)(a1 + 168);
          unint64_t v381 = v380 + v379;
          if ((unint64_t)(v380 + v379) <= *(void *)(a1 + 152)) {
            goto LABEL_490;
          }
          uint64_t v392 = *(void *)(a1 + 160);
          if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 3, 0))
          {
            unint64_t v381 = *(void *)(a1 + 160) + v380 - v392 + v379;
            if (v381 > *(void *)(a1 + 152)) {
LABEL_540:
            }
              abort();
LABEL_490:
            *(void *)(a1 + 168) = v381;
          }
          uint64_t v382 = (*(_DWORD *)(*(void *)(v343 + 1344) + 8) - **(_DWORD **)(v343 + 1344)) + 63;
          uint64_t v383 = *(void *)(a1 + 232);
          unint64_t v384 = v383 + v382;
          if ((unint64_t)(v383 + v382) <= *(void *)(a1 + 216))
          {
LABEL_465:
            *(void *)(a1 + 232) = v384;
          }
          else
          {
            uint64_t v385 = *(void *)(a1 + 224);
            if (AGX::DataBufferAllocator<34ul>::growNoInline(v410, 5, 0))
            {
              unint64_t v384 = *(void *)(a1 + 224) + v383 - v385 + v382;
              if (v384 > *(void *)(a1 + 216)) {
                goto LABEL_540;
              }
              goto LABEL_465;
            }
          }
          AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v419, v410, v343, &v447);
          uint64_t v352 = &v433 + 2 * v342;
          int v353 = *((_DWORD *)v352 + 34);
          LODWORD(v352) = *((_DWORD *)v352 + 35);
          unsigned int v354 = v352 * v353;
          if (v352 == 3) {
            unsigned int v355 = 3;
          }
          else {
            unsigned int v355 = 4;
          }
          unsigned int v356 = v354 / v355;
          if (v356 <= 1) {
            unsigned int v356 = 1;
          }
          LODWORD(v357) = 1640235008;
          DWORD1(v357) = v356;
          *((void *)&v357 + 1) = 1;
          uint64_t v358 = *(_OWORD **)(a1 + 64);
          *uint64_t v358 = v357;
          *(void *)(a1 + 64) = v358 + 1;
          ++*(_DWORD *)(a1 + 1524);
          *(_DWORD *)(a1 + 1540) += v356;
        }
        uint64_t v342 = v446[v342];
        if (v342 == -1) {
          break;
        }
        continue;
      }
    }
    int8x16_t v341 = v415 + 1;
    if (v415 + 1 != (int *)&agxaBindNullResourceToHardwareCommand(IOGPUResourceList *,unsigned int)::null_resource_data) {
      continue;
    }
    break;
  }
  if (!*(void *)(*(void *)(a1 + 1496) + 520))
  {
    uint64_t v393 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
    *(_DWORD *)(v393 + 12) = 1;
    if ((*(unsigned char *)(v393 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)a1 + 688) = 1;
    }
  }
  long long v425 = &unk_26F853210;
  if (v427)
  {
    long long v428 = v427;
    operator delete(v427);
  }
  uint64_t v394 = *(void *)(v9 + 256);
  *(unsigned char *)(v394 + 1294) = 1;
  *(unsigned char *)(v394 + 473) = 1;
  *(unsigned char *)(v394 + 1888) = 1;
  *(void *)(v394 + 432) = 0;
  *(_OWORD *)(v394 + 384) = 0u;
  *(_OWORD *)(v394 + 400) = 0u;
  *(void *)(v394 + 416) = 0;
  *(_DWORD *)(v394 + 1772) = 8;
  uint64_t v395 = *(_DWORD **)(a1 + 64);
  *(void *)(a1 + 64) = v395 + 1;
  *uint64_t v395 = *(_DWORD *)(v424 + 164);
  uint64_t v396 = *(void *)(v421 + 32);
  int v398 = *(AGX::FenceList **)v421;
  uint64_t v397 = *(AGX::FenceList **)(v421 + 8);
  if (*(void *)v421)
  {
    if (v397)
    {
      AGX::FenceList::merge(*(AGX::FenceList **)v421, v397);
      uint64_t v399 = v421;
      int v400 = *(AGX::FenceList **)(v421 + 32);
      goto LABEL_521;
    }
    int v400 = *(AGX::FenceList **)(v421 + 32);
  }
  else
  {
    int v400 = *(AGX::FenceList **)(v421 + 32);
    int v398 = *(AGX::FenceList **)(v421 + 8);
  }
  uint64_t v399 = v421;
LABEL_521:
  int v401 = *(AGX::FenceList **)(v399 + 40);
  if (v400)
  {
    if (v401) {
      AGX::FenceList::merge(v400, v401);
    }
  }
  else
  {
    uint64_t v396 = *(void *)(v399 + 40);
  }
  uint64_t v402 = *v420;
  uint64_t v403 = *(void *)(v424 + 232);
  if (v403) {
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::processFences(v403);
  }
  if (FenceEncoder::encode((AGX::SidebandBufferAllocator *)(a1 + 1464), 1, v402, v396, (uint64_t)v398, 0, 0)) {
    *(void *)(v423 + 408) |= 0x100uLL;
  }
LABEL_264:
  uint64_t v191 = *(void *)(v9 + 256);
  *(_DWORD *)(v191 + 452) = *(_DWORD *)(v421 + 96);
  *(unsigned char *)(v191 + 471) = 0;
  if (!*(void *)(v421 + 104)) {
    goto LABEL_272;
  }
  if (*(void *)(a1 + 1480)) {
    MTLResourceListAddResource();
  }
  IOGPUResourceListAddResource();
  uint64_t v191 = *(void *)(v9 + 256);
  unsigned int v192 = *(void **)(v421 + 104);
  if (v192 && (v194 = *(_DWORD *)(v421 + 112), int v193 = *(_DWORD *)(v421 + 116), (v194 & v193) != 0xFFFFFFFF))
  {
    *(_DWORD *)(v191 + 476) = [v192 resourceID];
    *(_DWORD *)(v191 + 480) = v194;
    *(_DWORD *)(v191 + 484) = v193;
  }
  else
  {
LABEL_272:
    *(_DWORD *)(v191 + 484) = -1;
    *(void *)(v191 + 476) = -1;
  }
  *(_DWORD *)(v421 + 112) = -1;
  uint64_t v195 = *(void **)(v421 + 104);
  if (!v195 || (v197 = *(_DWORD *)(v421 + 120), int v196 = *(_DWORD *)(v421 + 124), (v197 & v196) == 0xFFFFFFFF))
  {
    *(void *)(v191 + 1312) = -1;
    *(_DWORD *)(v191 + 1320) = -1;
  }
  else
  {
    *(_DWORD *)(v191 + 1312) = [v195 resourceID];
    *(_DWORD *)(v191 + 1316) = v197;
    *(_DWORD *)(v191 + 1320) = v196;
  }
  *(_DWORD *)(v421 + 120) = -1;
  uint64_t v14 = *(__n128 **)(v9 + 256);
  v14[104].n128_u8[4] = *(unsigned char *)(a1 + 1512);
  v14[104].n128_u32[0] = *(_DWORD *)(a1 + 1508);
  v14[104].n128_u64[1] = *(void *)(a1 + 1516);
  a6.n128_u64[0] = 0x3A0012006B0003;
  v14[10].n128_u64[1] = 0x3A0012006B0003;
  v14[11].n128_u32[0] = 1;
  v14[81].n128_u8[7] = 0;
  v14[29].n128_u8[6] = 0;
LABEL_278:
  *(unsigned char *)(v424 + 304) = 0;
  unsigned int v198 = *(_DWORD *)v423;
  if (*(_DWORD *)v423)
  {
    uint64_t v199 = *(void *)(a1 + 1968);
    uint64_t v200 = *(void *)(v199 + 2432);
    if (v200)
    {
      *(void *)(v423 + 16) = v200;
      *(void *)(v423 + 80) = *(void *)(v199 + 2512);
      int v201 = *(_DWORD *)(v199 + 4944);
      *(_WORD *)(a1 + 90916) = *(_WORD *)(v199 + 4948);
      *(_DWORD *)(a1 + 90912) = v201;
      int v202 = *(_DWORD *)(v199 + 4992);
      *(_WORD *)(a1 + 90964) = *(_WORD *)(v199 + 4996);
      *(_DWORD *)(a1 + 90960) = v202;
    }
    uint64_t v203 = *(void *)(v199 + 2440);
    if (v203)
    {
      *(void *)(v423 + 24) = v203;
      *(void *)(v423 + 88) = *(void *)(v199 + 2520);
      int v204 = *(_DWORD *)(v199 + 4950);
      *(_WORD *)(a1 + 90922) = *(_WORD *)(v199 + 4954);
      *(_DWORD *)(a1 + 90918) = v204;
      int v205 = *(_DWORD *)(v199 + 4998);
      *(_WORD *)(a1 + 90970) = *(_WORD *)(v199 + 5002);
      *(_DWORD *)(a1 + 90966) = v205;
    }
    uint64_t v206 = *(void *)(v199 + 2448);
    if (v206)
    {
      *(void *)(v423 + 32) = v206;
      *(void *)(v423 + 96) = *(void *)(v199 + 2528);
      int v207 = *(_DWORD *)(v199 + 4956);
      *(_WORD *)(a1 + 90928) = *(_WORD *)(v199 + 4960);
      *(_DWORD *)(a1 + 90924) = v207;
      int v208 = *(_DWORD *)(v199 + 5004);
      *(_WORD *)(a1 + 90976) = *(_WORD *)(v199 + 5008);
      *(_DWORD *)(a1 + 90972) = v208;
    }
    uint64_t v209 = *(void *)(v199 + 2456);
    if (v209)
    {
      *(void *)(v423 + 40) = v209;
      *(void *)(v423 + 104) = *(void *)(v199 + 2536);
      int v210 = *(_DWORD *)(v199 + 4962);
      *(_WORD *)(a1 + 90934) = *(_WORD *)(v199 + 4966);
      *(_DWORD *)(a1 + 90930) = v210;
      int v211 = *(_DWORD *)(v199 + 5010);
      *(_WORD *)(a1 + 90982) = *(_WORD *)(v199 + 5014);
      *(_DWORD *)(a1 + 90978) = v211;
    }
    uint64_t v212 = *(void *)(v199 + 2464);
    if (v212)
    {
      *(void *)(v423 + 48) = v212;
      *(void *)(v423 + 112) = *(void *)(v199 + 2544);
      int v213 = *(_DWORD *)(v199 + 4968);
      *(_WORD *)(a1 + 90940) = *(_WORD *)(v199 + 4972);
      *(_DWORD *)(a1 + 90936) = v213;
      int v214 = *(_DWORD *)(v199 + 5016);
      *(_WORD *)(a1 + 90988) = *(_WORD *)(v199 + 5020);
      *(_DWORD *)(a1 + 90984) = v214;
    }
    uint64_t v215 = *(void *)(v199 + 2472);
    if (v215)
    {
      *(void *)(v423 + 56) = v215;
      *(void *)(v423 + 120) = *(void *)(v199 + 2552);
      int v216 = *(_DWORD *)(v199 + 4974);
      *(_WORD *)(a1 + 90946) = *(_WORD *)(v199 + 4978);
      *(_DWORD *)(a1 + 90942) = v216;
      int v217 = *(_DWORD *)(v199 + 5022);
      *(_WORD *)(a1 + 90994) = *(_WORD *)(v199 + 5026);
      *(_DWORD *)(a1 + 90990) = v217;
    }
    uint64_t v218 = *(void *)(v199 + 2480);
    if (v218)
    {
      *(void *)(v423 + 64) = v218;
      *(void *)(v423 + 128) = *(void *)(v199 + 2560);
      int v219 = *(_DWORD *)(v199 + 4980);
      *(_WORD *)(a1 + 90952) = *(_WORD *)(v199 + 4984);
      *(_DWORD *)(a1 + 90948) = v219;
      int v220 = *(_DWORD *)(v199 + 5028);
      *(_WORD *)(a1 + 91000) = *(_WORD *)(v199 + 5032);
      *(_DWORD *)(a1 + 90996) = v220;
    }
    uint64_t v221 = *(void *)(v199 + 2488);
    if (v221)
    {
      *(void *)(v423 + 72) = v221;
      *(void *)(v423 + 136) = *(void *)(v199 + 2568);
      int v222 = *(_DWORD *)(v199 + 4986);
      *(_WORD *)(a1 + 90958) = *(_WORD *)(v199 + 4990);
      *(_DWORD *)(a1 + 90954) = v222;
      int v223 = *(_DWORD *)(v199 + 5034);
      *(_WORD *)(a1 + 91006) = *(_WORD *)(v199 + 5038);
      *(_DWORD *)(a1 + 91002) = v223;
    }
    *(void *)(v423 + 240) = *(void *)(v199 + 2496);
    *(void *)(v423 + 248) = *(void *)(v199 + 2504);
    int v224 = *(_DWORD *)(v199 + 5040);
    *(_WORD *)(a1 + 91028) = *(_WORD *)(v199 + 5044);
    *(_DWORD *)(a1 + 91024) = v224;
    int v225 = *(_DWORD *)(v199 + 5046);
    *(_WORD *)(a1 + 91034) = *(_WORD *)(v199 + 5050);
    *(_DWORD *)(a1 + 91030) = v225;
    *(void *)(v423 + 268) = *(void *)(v199 + 5120);
    *(_DWORD *)(v423 + 276) = *(_DWORD *)(v199 + 3912);
    unint64_t v226 = v14[83].n128_u64[0] & 0xFFFFFFFFFFFFFC00 | *(_DWORD *)(v199 + 4896) & 0x3FF;
    v14[83].n128_u64[0] = v226;
    unint64_t v227 = v226 & 0xFFFFFFFFFFF003FFLL | ((unint64_t)(*(_DWORD *)(v199 + 4900) & 0x3FF) << 10);
    v14[83].n128_u64[0] = v227;
    unint64_t v228 = v227 & 0xFFFFFFFFC00FFFFFLL | ((unint64_t)(*(_DWORD *)(v199 + 4904) & 0x3FF) << 20);
    v14[83].n128_u64[0] = v228;
    unint64_t v229 = v228 & 0xFFFFFF003FFFFFFFLL | ((*(_DWORD *)(v199 + 4908) & 0x3FFLL) << 30);
    v14[83].n128_u64[0] = v229;
    v14[83].n128_u64[0] = v229 & 0xFFFC00FFFFFFFFFFLL | ((unint64_t)(*(_DWORD *)(v199 + 4912) & 0x3FF) << 40);
    a6 = v14[61];
    *(__n128 *)(v423 + 280) = a6;
    *(void *)(v423 + 296) = v14[48].n128_u64[1];
    unsigned int v230 = *(_DWORD *)v423;
    unsigned int v198 = *(_DWORD *)v423 & 0xFFFFFEFF | ((v14[83].n128_u64[1] != 0) << 8);
    *(_DWORD *)uint64_t v423 = v198;
    if ((v230 & 0x40) != 0) {
      *(void *)(v423 + 304) = v14[47].n128_u64[1];
    }
    if ((v230 & 0x80) != 0) {
      *(void *)(v423 + 312) = v14[47].n128_u64[0];
    }
  }
  uint64_t v231 = *(void *)(v9 + 256);
  if ((v198 & 1) == 0)
  {
LABEL_300:
    *(unsigned char *)(v231 + 492) = 0;
    goto LABEL_319;
  }
  BOOL v232 = (v198 & 0x108) == 0;
  if ((v198 & 0x10) != 0) {
    BOOL v232 = (v198 & 0x108) == 0 && *(_DWORD *)(v423 + 4) == 1;
  }
  if ((v198 & 0x20) != 0)
  {
    if (*(_DWORD *)(v423 + 8) != 1) {
      BOOL v232 = 0;
    }
    if (v232) {
      goto LABEL_315;
    }
LABEL_310:
    if ((v198 & 0xC) == 4) {
      goto LABEL_300;
    }
    int v234 = 0;
  }
  else
  {
    if (!v232) {
      goto LABEL_310;
    }
LABEL_315:
    int v234 = 1;
  }
  uint64_t v235 = (unsigned __int8 *)(v231 + 495);
  if ((v198 & 2) != 0)
  {
    CC_SHA1_Init((CC_SHA1_CTX *)__dst);
    CC_SHA1_Update((CC_SHA1_CTX *)__dst, (const void *)(a1 + 90784), 0x150u);
    CC_SHA1_Final(v235, (CC_SHA1_CTX *)__dst);
    uint64_t v236 = *(void *)(v9 + 256);
    *(unsigned char *)(v236 + 492) = v234;
    if (v234)
    {
LABEL_318:
      *(unsigned char *)(v236 + 471) = 0;
      *(void *)(v236 + 976) &= ~1uLL;
    }
  }
  else
  {
    CC_SHA256_Init((CC_SHA256_CTX *)__dst);
    CC_SHA256_Update((CC_SHA256_CTX *)__dst, (const void *)(a1 + 90784), 0x150u);
    CC_SHA256_Final(v235, (CC_SHA256_CTX *)__dst);
    uint64_t v236 = *(void *)(v9 + 256);
    *(unsigned char *)(v236 + 492) = v234;
    if (v234) {
      goto LABEL_318;
    }
  }
LABEL_319:
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endCommand(a1, a6.n128_f64[0], (uint64x2_t)a7, *(double *)&a8);
  *uint64_t v420 = 0;
  v420[1] = 0;
  if (a2) {
    return AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reset(*(void *)(a1 + 1592));
  }
  return result;
}

void sub_242B4E404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginRenderPass(uint64_t a1)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 90088;
  uint64_t v3 = a1 + 38696;
  uint64_t v4 = a1 + 36476;
  char v5 = *(unsigned char *)(*(void *)(a1 + 1968) + 3965);
  if (*(unsigned char *)(a1 + 36640)) {
    *(unsigned char *)(a1 + 36640) = 0;
  }
  *(_DWORD *)(a1 + 90584) = 0;
  *(_DWORD *)(a1 + 1540) = 0;
  *(unsigned char *)(a1 + 1544) = 1;
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
  unint64_t v6 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand(a1, 2216);
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(a1 + 38816) = 0u;
  *(_OWORD *)(a1 + 38832) = 0u;
  *(_OWORD *)(a1 + 38848) = 0u;
  uint64_t v134 = v4;
  int v135 = (void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 1024);
  uint64_t v8 = v7 + 63;
  int32x2_t v133 = (void *)v2;
  if ((unint64_t)(v7 + 63) <= *(void *)(a1 + 1016))
  {
LABEL_6:
    *(void *)(a1 + 1032) = v8;
    goto LABEL_7;
  }
  int v125 = AGX::DataBufferAllocator<34ul>::growNoInline(v135, 30, 0);
  uint64_t v7 = *(void *)(a1 + 1024);
  if (v125)
  {
    uint64_t v8 = v7 + 63;
    if ((unint64_t)(v7 + 63) > *(void *)(a1 + 1016)) {
      goto LABEL_126;
    }
    goto LABEL_6;
  }
LABEL_7:
  unint64_t v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v10 = *(void *)(a1 + 1040);
  *(void *)(a1 + 1024) = v9 + 32;
  int8x16_t v11 = *(unint64_t **)(a1 + 64);
  if ((unint64_t)(v11 + 6) > *(void *)(a1 + 56))
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v135, 0, 0))
    {
      uint64_t v126 = *(void *)(a1 + 64);
      if ((unint64_t)(v126 + 48) > *(void *)(a1 + 56)) {
        goto LABEL_126;
      }
      *(void *)(a1 + 72) = v126 + 48;
      *int8x16_t v11 = __ROR8__(*(void *)(a1 + 80) + v126, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    *(void *)(a1 + 72) = v11 + 6;
  }
  unint64_t v12 = *(void *)(a1 + 1024) + 1060;
  if (v12 <= *(void *)(a1 + 1016))
  {
LABEL_10:
    *(void *)(a1 + 1032) = v12;
    goto LABEL_11;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v135, 30, 0))
  {
    unint64_t v12 = *(void *)(a1 + 1024) + 1060;
    if (v12 <= *(void *)(a1 + 1016)) {
      goto LABEL_10;
    }
LABEL_126:
    abort();
  }
LABEL_11:
  *((void *)v6 + 1) = 0;
  *(void *)(v6 + 5) = 0x100000880;
  uint64_t v13 = v6 + 8;
  *(void *)(v3 + 248) = v6;
  *(void *)(v3 + 256) = v6 + 8;
  bzero(v6 + 8, 0x880uLL);
  uint64_t v14 = *(void *)(a1 + 1968);
  *(void *)&long long v15 = *(void *)(v14 + 2580);
  int v16 = *(_DWORD *)(v14 + 3948);
  int v17 = *(_DWORD *)(v14 + 3912);
  *((void *)&v15 + 1) = *(void *)(v14 + 2592);
  long long v18 = *(_OWORD *)(v14 + 2600);
  long long v19 = *(_OWORD *)(v14 + 2616);
  long long v20 = *(_OWORD *)(v14 + 2632);
  uint64_t v21 = *(void *)(v14 + 2648);
  v6[452] = *(_DWORD *)(v14 + 2576);
  *(_OWORD *)(v6 + 453) = v15;
  *(_OWORD *)(v6 + 457) = v18;
  *(_OWORD *)(v6 + 461) = v19;
  *(_OWORD *)(v6 + 465) = v20;
  *(void *)(v6 + 469) = v21;
  v6[471] = v16;
  *((void *)v6 + 236) = 0;
  v6[474] = v17;
  *(void *)(v6 + 475) = 0;
  *((unsigned char *)v6 + 1908) = 0;
  *((void *)v6 + 236) = *(void *)(v14 + 3940);
  int v22 = *(_DWORD *)(v14 + 5252);
  if (v22)
  {
    v6[475] = v22;
    v6[476] = *(_DWORD *)(v14 + 5256);
    char v23 = 1;
  }
  else
  {
    char v23 = 0;
  }
  *((unsigned char *)v6 + 1908) = v23;
  uint64_t v24 = *(void *)(a1 + 1968);
  int v25 = 32 * *(_DWORD *)(v24 + 4928);
  LODWORD(v24) = 32 * *(_DWORD *)(v24 + 4936);
  unsigned int v26 = ((v24 + 6143) >> 12) + ((v25 + 17279) >> 12);
  uint64_t v27 = ((v25 + 78719) >> 16) + ((v24 + 67583) >> 16);
  if (*(_DWORD *)(*(void *)(v3 + 176) + 5864) == 21) {
    int v28 = 10;
  }
  else {
    int v28 = 14;
  }
  *(_DWORD *)__dst = v28 * v27 + 96 * v26;
  *(_DWORD *)&__dst[4] = v27 + v26;
  *(void *)&__dst[8] = v27;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(a1 + 38816, __dst, (_DWORD *)(a1 + 1976)))AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentUSCSpillBuffer(a1); {
  uint64_t v29 = *(void *)(v134 + 76);
  }
  int v30 = *(unsigned __int8 *)(v134 + 149);
  if (v29)
  {
    unsigned int v31 = *(void **)(v29 + 80);
    if (*(unsigned char *)(v134 + 149))
    {
      v31[114] = 0;
      unsigned int v32 = *(void **)(v29 + 14464);
      v32[114] = 0;
      v31[115] = 0;
      v32[115] = 0;
      v31[118] = 0;
      v32[118] = 0;
    }
    else
    {
      unsigned int v32 = *(void **)(v29 + 14464);
    }
    v31[119] = 0;
    v32[119] = 0;
  }
  if (v30)
  {
    *(void *)(v3 + 1240) = 0;
    *(void *)(v3 + 11432) = 0;
    *(void *)(a1 + 39912) = 0;
    *(void *)(a1 + 39904) = 0;
    *(void *)(a1 + 50104) = 0;
    *(void *)(a1 + 50096) = 0;
  }
  *(void *)(v3 + 1248) = 0;
  *(void *)(v3 + 11440) = 0;
  *(void *)(v3 + 1288) = 0;
  *(void *)(v3 + 11480) = 0;
  *(void *)(a1 + 39968) = 0;
  *(void *)(a1 + 39960) = 0;
  *(void *)(a1 + 50160) = 0;
  *(void *)(a1 + 50152) = 0;
  *(void *)uint64_t v13 = *(void *)(a1 + 80) + *(void *)(a1 + 64);
  *((void *)v6 + 59) = v9 + v10;
  v6[120] = 1;
  uint64_t v33 = *(void *)(*(void *)(a1 + 1456) + 808);
  uint64_t v34 = v134;
  if (*(unsigned char *)(v33 + 5106)) {
    uint64_t ScissorBuffer = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getScissorBuffer(v33, *(void *)(a1 + 1488), *(void *)(a1 + 1496));
  }
  else {
    uint64_t ScissorBuffer = *(void *)(a1 + 336) + *(void *)(a1 + 320);
  }
  *((void *)v6 + 98) = ScissorBuffer;
  uint64_t v36 = *(void *)(*(void *)(a1 + 1456) + 808);
  char v37 = (int *)MEMORY[0x263F4B188];
  if (*(unsigned char *)(v36 + 5105))
  {
    uint64_t v38 = *(void *)(a1 + 1488);
    uint64_t v39 = *(void *)(a1 + 1496);
    locuint64_t k = (os_unfair_lock_s *)(v36 + 7616);
    os_unfair_lock_lock((os_unfair_lock_t)(v36 + 7616));
    uint64_t v40 = *(void *)(v36 + 7648);
    *(void *)__dst = MEMORY[0x263EF8330];
    *(void *)&__dst[8] = 3221225472;
    *(void *)&__dst[16] = ___ZN3AGX20DeviceInternalBufferINS_23DepthBiasBitsBufferInfoEE13getBufferInfoEjP15MTLResourceList_block_invoke;
    *(void *)&__dst[24] = &unk_265171480;
    *(void *)&__dst[32] = v38;
    os_unfair_lock_lock((os_unfair_lock_t)(v40 + 48));
    if (*(void *)(v40 + 32) < 0xC0000uLL)
    {
      *(void *)(v40 + 32) = 786432;

      Buffer = AGX::DeviceInternalBufferAllocator::allocateBuffer(*(void *)v40, 0xC0000u);
      *(void *)(v40 + 8) = Buffer;
      *(void *)(v40 + 24) = Buffer;
      uint64_t v42 = *(void *)((char *)&Buffer->super.super._res.var0 + *v37);
      *(void *)(v40 + 40) = v42;
      int v41 = Buffer;
    }
    else
    {
      int v41 = *(AGXBuffer **)(v40 + 8);
      uint64_t v42 = *(void *)(v40 + 40);
    }
    (*(void (**)(unsigned char *, AGXBuffer *))&__dst[16])(__dst, v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 48));
    if (v39) {
      IOGPUResourceListAddResource();
    }
    os_unfair_lock_unlock(lock);
    uint64_t v34 = v134;
  }
  else
  {
    uint64_t v43 = *(void *)(a1 + 288);
    if (!v43)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v135);
      uint64_t v43 = *(void *)(a1 + 288);
    }
    uint64_t v42 = *(void *)(a1 + 304) + v43;
  }
  *((void *)v13 + 95) = v42;
  *((void *)v13 + 211) = 0;
  uint64_t v44 = *(void *)(a1 + 1968);
  uint64_t v45 = *(void *)(v44 + 3920);
  if (v45) {
    *((void *)v13 + 167) = *(void *)(v45 + *v37 + 8);
  }
  *((unsigned char *)v13 + 467) = *(unsigned char *)(v44 + 3907);
  *(unsigned char *)(*(void *)(v3 + 256) + 462) = 0;
  *((unsigned char *)v13 + 464) = v5;
  *((unsigned char *)v13 + 1620) = v5;
  if ([*(id *)a1 skipRender])
  {
    *((unsigned char *)v13 + 460) = 1;
    *((unsigned char *)v13 + 1294) = 1;
  }
  v13[114] = 28;
  v13[414] = 28;
  v13[122] = 0;
  v13[327] = 0;
  AGX::ContextSwitcherGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes>::setupRenderCommand(a1 + 1720, v13, v135);
  uint64_t v46 = *(void *)(a1 + 1496);
  uint64_t v47 = *(void *)(a1 + 1968);
  uint64_t v48 = *(void *)(v47 + 4392);
  if (!v48) {
    uint64_t v48 = *(void *)(v47 + 4384);
  }
  BOOL v49 = *(unsigned __int8 *)(v34 + 149) == 0;
  memcpy(__dst, (const void *)(v47 + 2656), sizeof(__dst));
  memcpy(v137, (const void *)(v47 + 3464), sizeof(v137));
  *(void *)(a1 + 1768) = AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitBackgroundObjectArguments((void *)(a1 + 1752), v46, v135, v48, (unint64_t *)__dst, (uint64_t)v137);
  uint64_t BGOProgramVariant = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBGOProgramVariant((void *)v47, v49);
  uint64_t v51 = 4416;
  if (v49) {
    uint64_t v51 = 4504;
  }
  uint64_t v52 = v47 + v51;
  int32x4_t v54 = *(int32x4_t *)(v52 + 40);
  uint64_t v53 = v52 + 40;
  uint64_t v55 = *(void *)(v53 + 40);
  if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v54, *(int32x4_t *)(v47 + 4544)), (int16x8_t)vceqq_s32(*(int32x4_t *)(v53 + 16), *(int32x4_t *)(v47 + 4560)))))) & 1) != 0|| *(_DWORD *)(v53 + 32) != *(_DWORD *)(v47 + 4576)|| v55 != *(void *)(v47 + 4584))
  {
    if (*(unsigned char *)(BGOProgramVariant + 2632))
    {
      long long v56 = *(_OWORD *)(v53 + 16);
      v137[22] = *(_OWORD *)v53;
      v137[23] = v56;
      *(void *)&v137[24] = *(void *)(v53 + 32);
      *((void *)&v137[24] + 1) = v55;
    }
    *(void *)(a1 + 1760) = AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitBackgroundObjectArguments((void *)(a1 + 1752), v46, v135, BGOProgramVariant, (unint64_t *)__dst, (uint64_t)v137);
  }
  uint64_t v57 = *(void *)(v47 + 4848);
  *(_OWORD *)__dst = *(_OWORD *)(a1 + 1924);
  *(_DWORD *)&__dst[16] = *(_DWORD *)(a1 + 1940);
  uint64_t v58 = AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsEarly(v46, v135, v57, (uint64_t)__dst, (void *)(a1 + 1776), (char **)(a1 + 1784), (void *)(a1 + 1840), (unint64_t *)(a1 + 1864), (unint64_t *)(a1 + 1888));
  *((void *)v13 + 176) = v58;
  *((void *)v13 + 177) = v59;
  int8x16_t v60 = vorrq_s8(vorrq_s8(veorq_s8(*(int8x16_t *)(v47 + 4760), *(int8x16_t *)(v47 + 4632)), veorq_s8(*(int8x16_t *)(v47 + 4792), *(int8x16_t *)(v47 + 4664))), vorrq_s8(veorq_s8(*(int8x16_t *)(v47 + 4776), *(int8x16_t *)(v47 + 4648)), veorq_s8(*(int8x16_t *)(v47 + 4808), *(int8x16_t *)(v47 + 4680))));
  *(int8x8_t *)v60.i8 = vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
  if (*(void *)(v47 + 4832) ^ *(void *)(v47 + 4704) | (unsigned __int16)(*(_WORD *)(v47 + 4840) ^ *(_WORD *)(v47 + 4712)) | (unsigned __int16)(*(_WORD *)(v47 + 4842) ^ *(_WORD *)(v47 + 4714)) | (unint64_t)(unsigned __int16)(*(_WORD *)(v47 + 4844) ^ *(_WORD *)(v47 + 4716)) | v60.i32[0] | (*(_DWORD *)(v47 + 4824) ^ *(_DWORD *)(v47 + 4696)) | v60.i32[1])
  {
    uint64_t v61 = *(void *)(v47 + 4856);
    v137[0] = *(_OWORD *)(a1 + 1924);
    LODWORD(v137[1]) = *(_DWORD *)(a1 + 1940);
    uint64_t v58 = AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsEarly(v46, v135, v61, (uint64_t)v137, (void *)(a1 + 1792), (char **)(a1 + 1800), (void *)(a1 + 1848), (unint64_t *)(a1 + 1872), (unint64_t *)(a1 + 1896));
  }
  *((void *)v13 + 90) = v58;
  *((void *)v13 + 91) = v59;
  *((void *)v13 + 92) = v58;
  *((void *)v13 + 93) = v59;
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSpillParamsForVertex((uint64_t)__dst, v3, 0, 0, 0);
  *(_DWORD *)(v3 + 48) = 1;
  int v62 = *(_DWORD *)&__dst[4];
  int v63 = *(_DWORD *)(v3 + 4);
  if (*(int *)&__dst[4] > v63)
  {
    *(_DWORD *)uint64_t v3 = *(_DWORD *)__dst;
    *(_DWORD *)(v3 + 4) = v62;
    *(_OWORD *)(a1 + 38704) = *(_OWORD *)&__dst[8];
  }
  int v64 = *(_DWORD *)&__dst[24];
  int v65 = *(_DWORD *)(v3 + 24);
  if (v65 <= *(int *)&__dst[24]) {
    int v66 = *(_DWORD *)&__dst[24];
  }
  else {
    int v66 = *(_DWORD *)(v3 + 24);
  }
  *(_DWORD *)(v3 + 24) = v66;
  if (v62 > v63 || v65 < v64)
  {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v3, (__n128 *)(*(void *)(v3 + 256) + 304), 1);
    if (!*((unsigned char *)v13 + 1619)) {
      goto LABEL_64;
    }
  }
  else if (!*((unsigned char *)v13 + 1619))
  {
    goto LABEL_64;
  }
  if (*(_DWORD *)*MEMORY[0x263F4B1E8]) {
    IOGPUDeviceTraceEvent();
  }
LABEL_64:
  *(void *)&long long v67 = -1;
  *((void *)&v67 + 1) = -1;
  *(_OWORD *)(a1 + 37800) = v67;
  *(_OWORD *)(a1 + 37816) = v67;
  uint64_t v68 = (int8x16_t *)(a1 + 38056);
  *(_OWORD *)(a1 + 37832) = v67;
  *(_OWORD *)(a1 + 37848) = v67;
  *(_OWORD *)(a1 + 37864) = v67;
  *(_OWORD *)(a1 + 37880) = v67;
  *(_OWORD *)(a1 + 37896) = v67;
  *(_OWORD *)(a1 + 37912) = v67;
  *(_OWORD *)(a1 + 37928) = v67;
  *(_OWORD *)(a1 + 37944) = v67;
  *(_OWORD *)(a1 + 37960) = v67;
  *(_OWORD *)(a1 + 37976) = v67;
  *(_OWORD *)(a1 + 37992) = v67;
  *(_OWORD *)(a1 + 38008) = v67;
  *(_OWORD *)(a1 + 38024) = v67;
  *(_OWORD *)(a1 + 38040) = v67;
  *(_OWORD *)(a1 + 38244) = v67;
  *(_OWORD *)(a1 + 38260) = v67;
  *(_OWORD *)(a1 + 38276) = v67;
  *(_OWORD *)(a1 + 38292) = v67;
  *(_OWORD *)(a1 + 38308) = v67;
  *(_OWORD *)(a1 + 38324) = v67;
  *(_OWORD *)(a1 + 38340) = v67;
  *(_OWORD *)(a1 + 38356) = v67;
  int v69 = *(unsigned __int8 *)(a1 + 38112);
  uint64_t v70 = 0x4000;
  if (!*(unsigned char *)(a1 + 38112)) {
    uint64_t v70 = 49152;
  }
  int8x16_t v71 = *v68;
  *((void *)v13 + 122) = v70 | ((unint64_t)(*(_DWORD *)(*(void *)(a1 + 1968) + 3932) != 0) << 18);
  if (!v69)
  {
    uint64_t v72 = v71.u16[2] | (v71.u16[0] << 16);
    int8x8_t v73 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), (int8x8_t)0xFFFF0000FFFFLL);
    v74.i64[0] = v73.u32[0];
    v74.i64[1] = v73.u32[1];
    uint64x2_t v75 = vshlq_u64(v74, (uint64x2_t)xmmword_242EA8710);
    *((void *)v13 + 123) = v75.i64[0] | v72 | v75.i64[1];
  }
  uint64_t v76 = *(void *)(*(void *)(a1 + 1456) + 808);
  if (*(unsigned char *)(v76 + 5106))
  {
    *(void *)__dst = 0;
    LOBYTE(v137[0]) = 0;
    int v77 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateScissorIndex(v76, a1 + 37280, 1, *(void *)(*(void *)(v3 + 256) + 752), __dst, v137, &v136);
    if (!LOBYTE(v137[0]))
    {
      AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::resetScissorBuffer(*(void *)(*(void *)(a1 + 1456) + 808));
      *((void *)v13 + 94) = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getScissorBuffer(*(void *)(*(void *)(a1 + 1456) + 808), *(void *)(a1 + 1488), *(void *)(a1 + 1496));
      int v77 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateScissorIndex(*(void *)(*(void *)(a1 + 1456) + 808), a1 + 37280, 1, *(void *)(*(void *)(v3 + 256) + 752), __dst, v137, &v136);
    }
    *(_DWORD *)(a1 + 38404) = v77;
    *(void *)(a1 + 38408) = *(void *)__dst;
    long long v78 = v133;
  }
  else
  {
    uint64_t v79 = 16 * *(unsigned int *)(a1 + 38076);
    unint64_t v80 = *(void *)(a1 + 320) + v79;
    if (v80 > *(void *)(a1 + 312))
    {
      int v130 = AGX::DataBufferAllocator<34ul>::growNoInline(v135, 8, 1);
      long long v78 = v133;
      if (v130)
      {
        unint64_t v131 = *(void *)(a1 + 320) + v79;
        if (v131 > *(void *)(a1 + 312)) {
          abort();
        }
        *(void *)(a1 + 328) = v131;
        *(void *)(*(void *)(v3 + 256) + 752) = *(void *)(*(void *)(a1 + 40) + 512)
                                                   + *(void *)(*(void *)(a1 + 40) + 536)
                                                   - *(void *)(*(void *)(a1 + 40) + 520);
      }
    }
    else
    {
      *(void *)(a1 + 328) = v80;
      long long v78 = v133;
    }
    unint64_t v81 = *(int8x8_t **)(a1 + 320);
    *(void *)(a1 + 38408) = (char *)v81 + *(void *)(a1 + 336);
    *(void *)(a1 + 320) = v81 + 2;
    *(_DWORD *)(a1 + 38404) = ((unint64_t)v81 - *(void *)(*(void *)(a1 + 40) + 536)) >> 4;
    int8x16_t v82 = *v68;
    int32x2_t v83 = (int32x2_t)vextq_s8(v82, v82, 4uLL).u64[0];
    v82.i32[1] = vextq_s8(v82, v82, 8uLL).i32[1];
    v82.i32[0] = vshl_n_s32(*(int32x2_t *)v82.i8, 0x10uLL).u32[0];
    v82.i32[1] = v82.u16[2];
    int32x2_t v84 = vshl_n_s32(v83, 0x10uLL);
    v83.i16[1] = 0;
    int8x8_t v85 = *(int8x8_t *)(a1 + 38372);
    v83.i32[1] = v84.i32[1];
    *unint64_t v81 = vorr_s8((int8x8_t)v83, *(int8x8_t *)v82.i8);
    v81[1] = v85;
  }
  v78[48] |= 0x40200000000000uLL;
  uint64_t v86 = *(void *)(a1 + 1968);
  if (*(unsigned char *)(a1 + 38494) && *(void *)(v86 + 3920))
  {
    unsigned int v87 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 5856) + 1680);
    do
    {
      IOGPUResourceListAddResource();
      v87 &= ~(1 << __clz(__rbit32(v87)));
    }
    while (v87);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace((void *)a1);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVisibilityClear(a1);
    uint64_t v86 = *(void *)(a1 + 1968);
    long long v78 = v133;
  }
  if (*(void *)(v86 + 3920)) {
    *((_DWORD *)v78 + 98) |= 2u;
  }
  uint64_t v88 = v78[60];
  if (v88 && *(unsigned char *)(*(void *)(v88 + 64) + 24744))
  {
    unsigned int v89 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7944) + 8) + 2272);
    do
    {
      IOGPUResourceListAddResource();
      v89 &= ~(1 << __clz(__rbit32(v89)));
    }
    while (v89);
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace(v135, *(void *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7944) + 8));
    *(_DWORD *)(a1 + 38568) = 0;
    *(void *)(a1 + 38552) = *(void *)(a1 + 64);
    *(void *)(a1 + 38560) = AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVRRPatchDraw(a1);
    *(void *)(a1 + 38576) = *(void *)(a1 + 80) + *(void *)(a1 + 64);
  }
  uint64_t v90 = *(void *)(*(void *)(a1 + 1456) + 808);
  *(_DWORD *)(a1 + 38508) = *(_DWORD *)(v90 + 5176);
  uint64_t v91 = *(void *)(a1 + 1496);
  uint64_t v92 = *(void **)(v90 + 5688);
  if (v92)
  {
    do
    {
      IOGPUResourceListAddResource();
      uint64_t v92 = (void *)*v92;
    }
    while (v92);
    uint64_t v90 = *(void *)(*(void *)(a1 + 1456) + 808);
    uint64_t v91 = *(void *)(a1 + 1496);
  }
  uint64_t v93 = *(void **)(v90 + 5520);
  if (v93)
  {
    do
    {
      IOGPUResourceListAddResource();
      uint64_t v93 = (void *)*v93;
    }
    while (v93);
    uint64_t v91 = *(void *)(a1 + 1496);
  }
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addGPUResources(*(void *)(a1 + 1968), v91, *(void **)(a1 + 1592), 63);
  if (!*(void *)(*(void *)(a1 + 1496) + 520))
  {
    uint64_t v94 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
    *(_DWORD *)(v94 + 12) = 1;
    if ((*(unsigned char *)(v94 + 8) & 4) != 0) {
      **(unsigned char **)(*(void *)a1 + 688) = 1;
    }
  }
  *(void *)uint64_t v134 = 0;
  if (*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7304)) {
    IOGPUResourceListAddResource();
  }
  *(void *)(a1 + 38500) = 0;
  *(unsigned char *)(a1 + 38512) = 0;
  uint64_t v95 = *(void *)(*(void *)(a1 + 40) + 288);
  uint64_t v96 = *v37;
  uint64_t v97 = *(void *)(a1 + 192);
  uint64_t v98 = v97 + 55;
  if ((unint64_t)(v97 + 55) <= *(void *)(a1 + 184))
  {
    char v99 = v133;
LABEL_100:
    *(void *)(a1 + 200) = v98;
    goto LABEL_101;
  }
  int v127 = AGX::DataBufferAllocator<34ul>::growNoInline(v135, 4, 0);
  uint64_t v97 = *(void *)(a1 + 192);
  if (v127)
  {
    uint64_t v98 = v97 + 55;
    char v99 = v133;
    if ((unint64_t)(v97 + 55) > *(void *)(a1 + 184)) {
      abort();
    }
    goto LABEL_100;
  }
  char v99 = v133;
LABEL_101:
  int v100 = (_OWORD *)((v97 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(a1 + 1600) = (char *)v100 + *(void *)(a1 + 208);
  *(void *)(a1 + 192) = v100 + 3;
  uint64_t v101 = v95 + v96;
  *(void *)(a1 + 1608) = v100;
  v100[1] = 0u;
  v100[2] = 0u;
  *int v100 = 0u;
  uint64_t v102 = *(void *)(a1 + 1600);
  *(void *)(v3 + 1336) = v102;
  *(void *)(v3 + 11528) = v102;
  *(void *)(a1 + 78688) = v95 + v96;
  *(void *)(a1 + 79208) = v95 + v96;
  *v99 |= 0x8000000000000000;
  v99[36] |= 0x8000000000000000;
  v99[48] |= 0x1000000040uLL;
  *(void *)(a1 + 3360) = v102;
  *(void *)(a1 + 22352) = v95 + v96;
  uint64_t v103 = *(void **)(v134 + 76);
  if (v103)
  {
    *(void *)(v103[10] + 1040) = v102;
    v103[1239] = v101;
    *(void *)(v103[1808] + 1040) = v102;
    v103[3020] = v101;
  }
  uint64_t v104 = *(void *)(a1 + 160);
  uint64_t v105 = v104 + 103;
  if ((unint64_t)(v104 + 103) <= *(void *)(a1 + 152)) {
    goto LABEL_104;
  }
  int v128 = AGX::DataBufferAllocator<34ul>::growNoInline(v135, 3, 0);
  uint64_t v104 = *(void *)(a1 + 160);
  if (v128)
  {
    uint64_t v105 = v104 + 103;
    if ((unint64_t)(v104 + 103) > *(void *)(a1 + 152)) {
      abort();
    }
LABEL_104:
    *(void *)(a1 + 168) = v105;
  }
  unint64_t v106 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v107 = v106 + *(void *)(a1 + 176);
  *(void *)(a1 + 160) = v106 + 88;
  *(void *)(a1 + 91120) = v107;
  *(void *)(a1 + 91128) = v106;
  *(void *)(v3 + 1280) = v107;
  *(void *)(v3 + 11472) = v107;
  *(void *)(a1 + 3304) = v107;
  uint64_t v108 = *(void *)(v134 + 76);
  if (v108)
  {
    *(void *)(*(void *)(v108 + 14464) + 984) = v107;
    *(void *)(*(void *)(v108 + 80) + 984) = v107;
  }
  uint64_t v109 = [*(id *)a1 privateData];
  uint64_t result = [*(id *)a1 privateDataOffset];
  if (v109)
  {
    *(void *)(*(void *)(a1 + 91128) + 80) = *(void *)(v109 + *v37 + 8) + result;
    uint64_t result = IOGPUResourceListAddResource();
  }
  uint64_t v111 = *(void *)(a1 + 1968);
  uint64_t v112 = *(unsigned int *)(v111 + 2584);
  if (v112)
  {
    uint64_t v113 = *(void *)(a1 + 91128);
    if (v112 < 4)
    {
      uint64_t v114 = 0;
LABEL_115:
      uint64_t v119 = v113 + 16;
      uint64_t v120 = v112 - v114;
      uint64_t v121 = 2 * v114;
      int v122 = (uint32x2_t *)(v111 + 8 * v114 + 2592);
      float32x2_t v123 = (float32x2_t)vdup_n_s32(0x3D800000u);
      do
      {
        uint32x2_t v124 = *v122++;
        *(float32x2_t *)(v119 + 4 * (v121 & 0xFFFFFFFE)) = vmul_f32(vcvt_f32_u32(v124), v123);
        v121 += 2;
        --v120;
      }
      while (v120);
      return result;
    }
    uint64_t v115 = 0;
    uint64_t v114 = v112 & 0xFFFFFFFC;
    int v116 = (const float *)(v111 + 2592);
    float32x4_t v117 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    do
    {
      float32x4x2_t v140 = vld2q_f32(v116);
      v116 += 8;
      v141.val[0] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)v140.val[0]), v117);
      v141.val[1] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)v140.val[1]), v117);
      int v118 = (float *)(v113 + 12 + 4 * (v115 & 0xFFFFFFF8) + 4);
      vst2q_f32(v118, v141);
      v115 += 8;
    }
    while (((2 * v112) & 0x1FFFFFFF8) != v115);
    if (v114 != v112) {
      goto LABEL_115;
    }
  }
  return result;
}

void sub_242B4F598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(v12);
  os_unfair_lock_unlock(lock);
  _Unwind_Resume(a1);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindVertexBufferResource(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v6 = result;
  if (a2 - 47 > 0x11 || ((1 << (a2 - 47)) & 0x277B3) == 0)
  {
    uint64_t v7 = *(uint64_t **)(result + 8 * a2 + 78184);
    if (v7)
    {
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(result + 1592), v7, 0, a2, a3);
      uint64_t result = IOGPUResourceListAddResource();
      if (a2 > 0x22) {
        return result;
      }
      uint64_t v8 = *(void *)(v6 + 8 * a2 + 85368);
      if (!v8) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v6 + 1592), v8, a3);
    }
    else
    {
      if (!a4) {
        return result;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(result + 1592), 0, 0, a2, a3);
    }
  }

  return IOGPUResourceListAddResource();
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindAllResources(void *a1, int a2)
{
  uint64_t v4 = a1[4];
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 1944);
    uint64_t v6 = *(void *)(v4 + 1952);
    uint64_t v7 = *(void *)(a1[1] + 38976);
    if (*(unsigned char *)(v7 + 709))
    {
      uint64_t v8 = *(void *)(v7 + 1824);
      BOOL v9 = v8 == 0;
      unint64_t v10 = (unint64_t)(v8 != 0) << 59;
      uint64_t v11 = 0x1800000000000000;
      if (v9) {
        uint64_t v11 = 0x1000000000000000;
      }
      if (*(void *)(v7 + 1840)) {
        unint64_t v10 = v11;
      }
      BOOL v9 = *(void *)(v7 + 3176) == 0;
      uint64_t v12 = -2;
      if (v9) {
        uint64_t v12 = -1;
      }
      uint64_t v13 = ~v10;
    }
    else
    {
      uint64_t v13 = -1;
      uint64_t v12 = -1;
    }
    unint64_t v14 = v5 & v13;
    unint64_t v48 = v6 & v12;
    for (i = v14; ; unint64_t v14 = i)
    {
      if (v14)
      {
        unsigned int v15 = __clz(__rbit64(v14));
        p_unint64_t i = &i;
        unsigned int v17 = v15;
      }
      else
      {
        unint64_t v14 = v48;
        if (!v48)
        {
          uint64_t v18 = a1[4];
          unint64_t v19 = *(void *)(v18 + 1960) & a1[909];
          unint64_t v45 = *(void *)(v18 + 1968) & a1[910];
          for (j = v19; ; unint64_t v19 = j)
          {
            if (v19)
            {
              unsigned int v20 = __clz(__rbit64(v19));
              p_unint64_t j = &j;
              unsigned int v22 = v20;
            }
            else
            {
              unint64_t v19 = v45;
              if (!v45)
              {
                uint64_t v23 = a1[4];
                uint64_t v24 = *(void *)(a1[1] + 38952);
                *(unsigned char *)(v24 + 463) |= *(unsigned char *)(v23 + 1045);
                *(unsigned char *)(v24 + 466) |= *(unsigned char *)(v23 + 1050);
                goto LABEL_24;
              }
              unsigned int v20 = __clz(__rbit64(v45));
              unsigned int v22 = v20 | 0x40;
              p_unint64_t j = &v45;
            }
            *p_unint64_t j = v19 & ~(1 << v20);
            long long v47 = *(_OWORD *)(a1[4] + 1072);
            AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectTextureResources((uint64_t)a1, v22, (*(void *)((unint64_t)&v47 | (8 * (v22 > 0x3F))) >> v22) & 1);
          }
        }
        unsigned int v15 = __clz(__rbit64(v48));
        unsigned int v17 = v15 | 0x40;
        p_unint64_t i = &v48;
      }
      *p_unint64_t i = v14 & ~(1 << v15);
      long long v47 = *(_OWORD *)(a1[4] + 1056);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindObjectBufferResource((uint64_t)a1, v17, (*(void *)((unint64_t)&v47 | (8 * (v17 > 0x3F))) >> v17) & 1, a2);
    }
  }
LABEL_24:
  uint64_t v25 = a1[5];
  if (!v25) {
    return;
  }
  uint64_t v26 = *(void *)(v25 + 1944);
  uint64_t v27 = *(void *)(v25 + 1952);
  uint64_t v28 = *(void *)(a1[1] + 38976);
  if (*(unsigned char *)(v28 + 709))
  {
    uint64_t v29 = *(void *)(v28 + 2112);
    BOOL v9 = v29 == 0;
    unint64_t v30 = (unint64_t)(v29 != 0) << 59;
    uint64_t v31 = 0x1800000000000000;
    if (v9) {
      uint64_t v31 = 0x1000000000000000;
    }
    if (*(void *)(v28 + 2128)) {
      unint64_t v30 = v31;
    }
    BOOL v9 = *(void *)(v28 + 3184) == 0;
    uint64_t v32 = -2;
    if (v9) {
      uint64_t v32 = -1;
    }
    uint64_t v33 = ~v30;
  }
  else
  {
    uint64_t v33 = -1;
    uint64_t v32 = -1;
  }
  unint64_t v34 = v26 & v33;
  unint64_t v48 = v27 & v32;
  for (i = v34; ; unint64_t v34 = i)
  {
    if (v34)
    {
      unsigned int v35 = __clz(__rbit64(v34));
      uint64_t v36 = &i;
      unsigned int v37 = v35;
      goto LABEL_36;
    }
    unint64_t v34 = v48;
    if (!v48) {
      break;
    }
    unsigned int v35 = __clz(__rbit64(v48));
    unsigned int v37 = v35 | 0x40;
    uint64_t v36 = &v48;
LABEL_36:
    *uint64_t v36 = v34 & ~(1 << v35);
    long long v47 = *(_OWORD *)(a1[5] + 1056);
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshBufferResource((uint64_t)a1, v37, (*(void *)((unint64_t)&v47 | (8 * (v37 > 0x3F))) >> v37) & 1, a2);
  }
  uint64_t v38 = a1[5];
  unint64_t v39 = *(void *)(v38 + 1960) & a1[2707];
  unint64_t v45 = *(void *)(v38 + 1968) & a1[2708];
  for (j = v39; ; unint64_t v39 = j)
  {
    if (v39)
    {
      unsigned int v40 = __clz(__rbit64(v39));
      int v41 = &j;
      unsigned int v42 = v40;
      goto LABEL_42;
    }
    unint64_t v39 = v45;
    if (!v45) {
      break;
    }
    unsigned int v40 = __clz(__rbit64(v45));
    unsigned int v42 = v40 | 0x40;
    int v41 = &v45;
LABEL_42:
    *int v41 = v39 & ~(1 << v40);
    long long v47 = *(_OWORD *)(a1[5] + 1072);
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindMeshTextureResources((uint64_t)a1, v42, (*(void *)((unint64_t)&v47 | (8 * (v42 > 0x3F))) >> v42) & 1);
  }
  uint64_t v43 = a1[5];
  uint64_t v44 = *(void *)(a1[1] + 38952);
  *(unsigned char *)(v44 + 463) |= *(unsigned char *)(v43 + 1045);
  *(unsigned char *)(v44 + 466) |= *(unsigned char *)(v43 + 1050);
}

__n128 AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentUSCSpillBuffer(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 38816);
  uint64_t v2 = *(__n128 **)(a1 + 38952);
  int v3 = *(_DWORD *)(a1 + 38820);
  int v5 = *(_DWORD *)(a1 + 38856);
  unsigned __int32 v4 = *(_DWORD *)(a1 + 38860);
  if (v5 < 1)
  {
    unsigned __int32 v12 = 0;
    unsigned __int32 v11 = 0;
    unsigned __int32 v16 = *(_DWORD *)(a1 + 38840);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 38872);
    int v7 = *(_DWORD *)(v6 + 5912);
    uint64_t v8 = 5936;
    if (*(_OWORD *)(v6 + 5936) == 0) {
      uint64_t v8 = 5952;
    }
    int32x2_t v9 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v6 + v8))))));
    int v10 = *(_DWORD *)(a1 + 38852);
    unsigned __int32 v11 = *(_DWORD *)(a1 + 38848) + v10;
    unsigned __int32 v12 = (v4 + v5 + v11) * vadd_s32(vdup_lane_s32(v9, 1), v9).u32[0];
    BOOL v13 = __OFSUB__(v10, *v1);
    int v14 = v10 - *v1;
    int v15 = v14 * v7;
    if ((v14 < 0) ^ v13 | (v14 == 0)) {
      int v15 = 0;
    }
    v3 += v12 + v15;
    unsigned __int32 v16 = *(_DWORD *)(a1 + 38844) + *(_DWORD *)(a1 + 38840) + v12;
  }
  v2[75].n128_u16[4] = 0;
  v2[74].n128_u32[2] = v5;
  v2[74].n128_u32[3] = v4;
  v2[75].n128_u32[0] = v11;
  v2[75].n128_u32[1] = v12;
  v2[72].n128_u64[0] = (uint64_t)(int)((v3 + 7) & 0xFFFFFFF8) << 12;
  v2[72].n128_u64[1] = (uint64_t)(int)((v16 + 7) & 0xFFFFFFF8) << 12;
  __n128 result = *(__n128 *)(a1 + 38824);
  v2[73] = result;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVRRPatchDraw(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v31 = -1;
  bzero(v32, 0x20DCuLL);
  *(_OWORD *)&v32[8436] = 0u;
  int v33 = 1065353216;
  uint64_t v34 = 0x100000001;
  bzero(&v35, 0x388uLL);
  uint64_t v7 = *(void *)(v6 + 168);
  unint64_t v8 = v7 + 8;
  if ((unint64_t)(v7 + 8) > *(void *)(v6 + 152))
  {
    uint64_t v29 = *(void *)(v6 + 160);
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v6 + 16, 3, 0)) {
      goto LABEL_3;
    }
    unint64_t v8 = *(void *)(v6 + 160) + v7 - v29 + 8;
    if (v8 > *(void *)(v6 + 152)) {
      abort();
    }
  }
  *(void *)(v6 + 168) = v8;
LABEL_3:
  uint64_t v37 = v3;
  uint64_t v38 = *(void *)(*(void *)(*(void *)(v6 + 90568) + 64) + 24856);
  int v30 = 0;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments((char ***)(v6 + 1752), (void *)(v6 + 16), v5, v36, (uint64_t)&v31, 57345, 0, 0, 0, &v30);
  uint64_t v9 = *(void *)(v6 + 1024);
  uint64_t v10 = *(void *)(v6 + 1040) + v9;
  *(void *)(v6 + 1024) = v9 + 20;
  *(_OWORD *)uint64_t v9 = xmmword_242EA8720;
  *(_DWORD *)(v9 + 16) = 0;
  unsigned __int32 v11 = *(unint64_t **)(v6 + 64);
  *unsigned __int32 v11 = __ROR8__(v10, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(v6 + 64) = v11 + 1;
  uint64_t v12 = *(void *)(v6 + 1024);
  uint64_t v13 = *(void *)(v6 + 1040) + v12;
  *(void *)(v6 + 1024) = v12 + 28;
  *(_OWORD *)uint64_t v12 = xmmword_242EA7DE0;
  *(void *)(v12 + 16) = 0xE00000007E00F00;
  *(_DWORD *)(v12 + 24) = 0;
  uint64_t v14 = __ROR8__(v13, 32);
  int v15 = *(unint64_t **)(v6 + 64);
  *int v15 = v14 & 0xFFFFFFFC000000FFLL | 0x700;
  *(void *)(v6 + 64) = v15 + 1;
  uint64_t v16 = *(void *)(v5 + 3576);
  uint64_t v17 = *(void *)(v6 + 1024);
  uint64_t v18 = *(void *)(v6 + 1040) + v17;
  *(void *)(v6 + 1024) = v17 + 20;
  *(_DWORD *)uint64_t v17 = 201981952;
  *(_DWORD *)(v17 + 4) = v16 & 0xF1C00FF;
  *(void *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 16) = HIDWORD(v16);
  unint64_t v19 = *(unint64_t **)(v6 + 64);
  *unint64_t v19 = __ROR8__(v18, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(v6 + 64) = v19 + 1;
  uint64_t v20 = *(void *)(v6 + 1024);
  uint64_t v21 = *(void *)(v6 + 1040) + v20;
  *(void *)(v6 + 1024) = v20 + 12;
  *(void *)uint64_t v20 = 0x1E3CE50800410000;
  uint64_t v22 = __ROR8__(v21, 32);
  *(_DWORD *)(v20 + 8) = 131232;
  uint64_t v23 = *(unint64_t **)(v6 + 64);
  *uint64_t v23 = v22 & 0xFFFFFFFC000000FFLL | 0x300;
  *(void *)(v6 + 64) = v23 + 1;
  uint64_t v24 = *(void **)(v6 + 1024);
  uint64_t v25 = (char *)v24 + *(void *)(v6 + 1040);
  *(void *)(v6 + 1024) = v24 + 1;
  *uint64_t v24 = 0x48000200000;
  uint64_t v26 = __ROR8__(v25, 32);
  uint64_t v27 = *(void *)(v6 + 64);
  *(void *)uint64_t v27 = v26 & 0xFFFFFFFC000000FFLL | 0x200;
  *(void *)(v27 + 8) = 0xFFFF40000001;
  *(_OWORD *)(v27 + 16) = xmmword_242EA8730;
  uint64_t result = v27 + 16;
  ++*(_DWORD *)(v6 + 1524);
  ++*(_DWORD *)(v6 + 90584);
  *(_DWORD *)(v27 + 32) = 536871264;
  *(void *)(v6 + 64) = v27 + 36;
  *(void *)(v6 + 90472) |= 0x5F500000000001uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::processFences(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(AGX::FenceList **)(v2 + 90536);
  if (v3 || *(void *)(v2 + 90544))
  {
    if (!*(void *)(v2 + 90520)) {
      operator new();
    }
    if (v3)
    {
      AGX::FenceList::merge(*(AGX::FenceList **)(v2 + 90520), v3);
      uint64_t v2 = *(void *)(a1 + 8);
    }
    uint64_t v4 = *(AGX::FenceList **)(v2 + 90544);
    if (v4)
    {
      AGX::FenceList::merge(*(AGX::FenceList **)(v2 + 90520), v4);
      uint64_t v2 = *(void *)(a1 + 8);
    }
  }
  uint64_t v5 = *(AGX::FenceList **)(v2 + 90504);
  if (v5 || *(void *)(v2 + 90512))
  {
    if (!*(void *)(v2 + 90488)) {
      operator new();
    }
    if (v5)
    {
      AGX::FenceList::merge(*(AGX::FenceList **)(v2 + 90488), v5);
      uint64_t v2 = *(void *)(a1 + 8);
    }
    uint64_t v6 = (AGX::FenceList **)(v2 + 90488);
    uint64_t v7 = v6[3];
    if (v7)
    {
      unint64_t v8 = *v6;
      AGX::FenceList::merge(v8, v7);
    }
  }
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitSWEndOfTileIfNeeded(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 90472);
  uint64_t v3 = a1 + 38464;
  char v11 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 26864);
  uint64_t v5 = (_DWORD *)(a1 + 1524);
  AGX::RenderTileDispatchSWEndOfTile<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatch((uint64_t *)(a1 + 26864), *(__n128 **)(a1 + 38952), &v11, (_DWORD *)(a1 + 1524));
  if (v11)
  {
    if (*(unsigned char *)(*(void *)(a1 + 1968) + 3965) || *(unsigned char *)(a1 + 36652)) {
      goto LABEL_10;
    }
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(a1, a1 + 90472, 0, 1);
    char v11 = 0;
    int v6 = *(_DWORD *)(v3 + 24);
    if (v6 == 1)
    {
      uint64_t v9 = *(_WORD **)(a1 + 448);
      *uint64_t v9 = 2 * *(_WORD *)(v3 + 28);
      *(void *)(a1 + 448) = v9 + 1;
      *(_DWORD *)(v3 + 24) = 2;
      *(_DWORD *)(*(void *)(v3 + 8) + 8) = 2;
    }
    else if (!v6)
    {
      uint64_t v7 = *(unsigned int **)v3;
      if (*(void *)v3)
      {
        uint64_t v8 = *(void *)(v3 + 16);
        *uint64_t v7 = BYTE4(v8) | 0x80000000;
        v7[1] = v8;
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 16) = 0;
        ++*(_DWORD *)(a1 + 1536);
      }
    }
    AGX::RenderTileDispatchSWEndOfTile<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatch(v4, *(__n128 **)(v3 + 488), &v11, v5);
    if (v11)
    {
LABEL_10:
      uint64_t v10 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
      *(_DWORD *)(v10 + 12) = 1;
      if ((*(unsigned char *)(v10 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)a1 + 688) = 1;
      }
    }
  }
  *v2 |= 0x5F700000000004uLL;
}

void ProgramKey<(_AGCStreamToken)95,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  int v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  unint64_t v8 = *(void *)(a1 + 32);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v10 = v8 - (void)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v14 = v13;
    int v15 = operator new(4 * v13);
    uint64_t v16 = &v15[v14];
    *int v15 = v7;
    uint64_t v9 = v15 + 1;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = v16;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v7;
    uint64_t v9 = v6 + 1;
  }
  *(void *)(a1 + 24) = v9;
  ProgramKey<(_AGCStreamToken)8,(AGX::DriverShaderCompilationMode)0>::finalizeStream((void *)a1);
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawMeshThreads(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 3410))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v8 + 38976);
LABEL_6:
    unint64_t v11 = *(void *)(v9 + 32);
    if (v11) {
      unint64_t v11 = *(unsigned int *)(v11 + 3516);
    }
    if (*((void *)a4 + 1) * *(void *)a4 * *((void *)a4 + 2) <= v11)
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 40) + 3284);
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v8, v12);
      unint64_t v13 = *a4;
      unint64_t v14 = a4[4];
      uint64_t v15 = v13 | (*((void *)a4 + 1) << 32);
      uint64_t v16 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v16 + 3410))
      {
        uint64_t v17 = *a2 / v13;
        unint64_t v18 = a2[1] / (unint64_t)*((void *)a4 + 1);
        unint64_t v19 = a2[2];
        unint64_t v20 = *(void *)(v16 + 3216);
        int v21 = *(_DWORD *)(v16 + 3224);
        unint64_t v22 = HIDWORD(v20);
        unint64_t v23 = HIDWORD(v20);
        LODWORD(v24) = v20;
        LODWORD(a2) = v21;
        unint64_t v25 = v19 / v14;
      }
      else
      {
        LODWORD(v22) = *((void *)a3 + 1);
        unint64_t v20 = *a3 | (*((void *)a3 + 1) << 32);
        int v21 = a3[4];
        uint64_t v24 = *a2;
        unint64_t v18 = a2[1];
        a2 = (uint64_t *)a2[2];
        LODWORD(v23) = v18;
        uint64_t v17 = v24;
        unint64_t v25 = (unint64_t)a2;
      }
      v32.i64[0] = v17;
      v32.i64[1] = v18;
      int v33 = (uint64_t *)v25;
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(a1, &v32, 0x23u);
      int64x2_t v30 = vdupq_n_s64(1uLL);
      uint64_t v31 = 1;
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(a1, &v30, 0x24u);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(a1, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 8) + 38968), *(uint64x2_t **)(a1 + 80), *(uint64x2_t **)(a1 + 14464), (uint64x2_t *)(*(void *)(a1 + 8) + 49184), v26, v15, v14, SHIDWORD(v14), v20, SHIDWORD(v20), v21, *(void *)(a1 + 8) + 90088, 0);
      uint64_t v27 = *(void *)(a1 + 8);
      if (v12 == 1) {
        int v28 = 1879048448;
      }
      else {
        int v28 = 1879048192;
      }
      if (v12 == 3) {
        int v28 = 1879049728;
      }
      ++*(_DWORD *)(v27 + 1524);
      uint64_t v29 = *(int **)(v27 + 64);
      *uint64_t v29 = v28;
      v29[1] = v24;
      v29[2] = v23;
      v29[3] = (int)a2;
      v29[4] = v20;
      v29[5] = v22;
      v29[6] = v21;
      *(void *)(v27 + 64) = v29 + 7;
      *(unsigned char *)(*(void *)(a1 + 8) + 1544) = 0;
    }
    return;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 38976);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v10) {
    unint64_t v10 = *(unsigned int *)(v10 + 3412);
  }
  if (*((void *)a3 + 1) * *((void *)a3 + 2) * *(void *)a3 <= v10) {
    goto LABEL_6;
  }
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawMeshThreadgroups(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (*(unsigned char *)(*(void *)(a1 + 32) + 3410))
  {
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(v8 + 38976);
LABEL_6:
    unint64_t v11 = *(void *)(v9 + 32);
    if (v11) {
      unint64_t v11 = *(unsigned int *)(v11 + 3516);
    }
    if (*((void *)a4 + 1) * *(void *)a4 * *((void *)a4 + 2) <= v11)
    {
      unsigned int v12 = *(_DWORD *)(*(void *)(a1 + 40) + 3284);
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v8, v12);
      uint64_t v13 = a4[4];
      uint64_t v14 = *a4 | (*((void *)a4 + 1) << 32);
      uint64_t v15 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v15 + 3410))
      {
        unint64_t v16 = *(void *)(v15 + 3216);
        int v17 = *(_DWORD *)(v15 + 3224);
        unint64_t v18 = HIDWORD(v16);
        unint64_t v26 = HIDWORD(v16);
        LODWORD(v27) = v16;
        int v19 = v17;
      }
      else
      {
        uint64_t v20 = *(void *)(a3 + 8);
        int v17 = *(_DWORD *)(a3 + 16);
        unint64_t v16 = *(void *)a3 | ((unint64_t)v20 << 32);
        LODWORD(v26) = *(_DWORD *)(a2 + 8) * v20;
        uint64_t v27 = *(void *)a2 * *(void *)a3;
        int v19 = *(_DWORD *)(a2 + 16) * v17;
        LODWORD(v18) = v20;
      }
      int64x2_t v30 = *(int64x2_t *)a2;
      uint64_t v31 = *(void *)(a2 + 16);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(a1, &v30, 0x23u);
      int64x2_t v28 = *(int64x2_t *)a3;
      uint64_t v29 = *(void *)(a3 + 16);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDirectCounts(a1, &v28, 0x24u);
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(a1, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 8) + 38968), *(uint64x2_t **)(a1 + 80), *(uint64x2_t **)(a1 + 14464), (uint64x2_t *)(*(void *)(a1 + 8) + 49184), v21, v14, v13, SHIDWORD(v13), v16, SHIDWORD(v16), v17, *(void *)(a1 + 8) + 90088, 0);
      uint64_t v22 = *(void *)(a1 + 8);
      if (v12 == 1) {
        int v23 = 1879048448;
      }
      else {
        int v23 = 1879048192;
      }
      if (v12 == 3) {
        int v24 = 1879049728;
      }
      else {
        int v24 = v23;
      }
      ++*(_DWORD *)(v22 + 1524);
      unint64_t v25 = *(int **)(v22 + 64);
      *unint64_t v25 = v24;
      v25[1] = v27;
      v25[2] = v26;
      v25[3] = v19;
      v25[4] = v16;
      v25[5] = v18;
      v25[6] = v17;
      *(void *)(v22 + 64) = v25 + 7;
      *(unsigned char *)(*(void *)(a1 + 8) + 1544) = 0;
    }
    return;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v8 + 38976);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v10) {
    unint64_t v10 = *(unsigned int *)(v10 + 3412);
  }
  if (*(void *)(a3 + 8) * *(void *)(a3 + 16) * *(void *)a3 <= v10) {
    goto LABEL_6;
  }
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>,AGXG17FamilyRayTracingAccelerationStructureSW>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  if (a3 <= 0x22) {
    a4[a3 + 1598] = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v9 = [(id)a2 buffer];
    unint64_t v10 = (int *)MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v9 + (int)*MEMORY[0x263F4B188] + 8);
    uint64_t v12 = *(void *)([(id)a2 buffer] + *v10 + 24);
    uint64_t v13 = *(void *)([(id)a2 buffer] + *v10 + 16);
    uint64_t v14 = a3;
    uint64_t v15 = &a4[v14];
    v15[1633] = v11;
    uint64_t v16 = *(unsigned int *)(a2 + 320);
    v15[1698] = v12;
    int v17 = (void *)(*a4 + v14 * 8);
    v17[67] = v16;
    v17[132] = v13 & 0xFFFFFFFFFFFFFFLL;
    *int v17 = v12;
    unint64_t v18 = (_DWORD *)a4 + a3 + 2;
    v18[2101] = v13;
    v18[2166] = v13;
    v18[2231] = v11 >> 8;
    v15[1149] = [(id)a2 buffer] + *v10;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(a1 + 8) + 1592), [(id)a2 buffer], 7u, a3);
    if (*(void *)(*(void *)(a1 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    int v19 = (os_unfair_lock_s *)(*(void *)(a2 + 328) + 40);
    os_unfair_lock_lock(v19);
    os_unfair_lock_unlock(v19);
  }
  else
  {
    uint64_t v20 = a3;
    uint64_t v21 = &a4[v20];
    v21[1149] = 0;
    uint64_t v22 = (void *)(*a4 + v20 * 8);
    v22[67] = 0;
    v22[132] = 0;
    *uint64_t v22 = 0;
    v21[1633] = 0;
    v21[1698] = 0;
    int v23 = (char *)a4 + 4 * a3;
    *((_DWORD *)v23 + 2103) = 0;
    *((_DWORD *)v23 + 2168) = 0;
  }
  uint64_t v24 = v8 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v24 + 192) |= 1 << a3;
  *(void *)(v24 + 240) |= 1 << a3;
  *(void *)(v8 + 90472) |= 0xC000000uLL;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>,AGXG17FamilyRayTracingAccelerationStructure>(uint64_t result, unsigned int *a2, unsigned int a3, void *a4)
{
  uint64_t v7 = result;
  if (a3 <= 0x22) {
    a4[a3 + 1598] = 0;
  }
  uint64_t v8 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v9 = [a2 buffer];
    unint64_t v10 = (int *)MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v9 + (int)*MEMORY[0x263F4B188] + 8);
    uint64_t v12 = *(void *)([a2 buffer] + *v10 + 24);
    uint64_t v13 = *(void *)([a2 buffer] + *v10 + 16);
    uint64_t v14 = a3;
    uint64_t v15 = &a4[v14];
    v15[1633] = v11;
    v15[1698] = v12;
    uint64_t v16 = (void *)(*a4 + v14 * 8);
    v16[67] = a2[86];
    v16[132] = v13 & 0xFFFFFFFFFFFFFFLL;
    *uint64_t v16 = v12;
    int v17 = (_DWORD *)a4 + a3 + 2;
    v17[2101] = v13;
    v17[2166] = v13;
    v17[2231] = v11 >> 8;
    v15[1149] = [a2 buffer] + *v10;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(v7 + 8) + 1592), [a2 buffer], 7u, a3);
    uint64_t result = *(void *)(*(void *)(v7 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v18 = a3;
    int v19 = &a4[v18];
    v19[1149] = 0;
    uint64_t v20 = (void *)(*a4 + v18 * 8);
    v20[67] = 0;
    v20[132] = 0;
    *uint64_t v20 = 0;
    v19[1633] = 0;
    v19[1698] = 0;
    uint64_t v21 = (char *)a4 + 4 * a3;
    *((_DWORD *)v21 + 2103) = 0;
    *((_DWORD *)v21 + 2168) = 0;
  }
  uint64_t v22 = v8 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v22 + 192) |= 1 << a3;
  *(void *)(v22 + 240) |= 1 << a3;
  *(void *)(v8 + 90472) |= 0xC000000uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>,AGXG17FamilyRayTracingAccelerationStructureSW>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  if (a3 <= 0x22) {
    a4[a3 + 1615] = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (a2)
  {
    uint64_t v9 = [(id)a2 buffer];
    unint64_t v10 = (int *)MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v9 + (int)*MEMORY[0x263F4B188] + 8);
    uint64_t v12 = *(void *)([(id)a2 buffer] + *v10 + 24);
    uint64_t v13 = *(void *)([(id)a2 buffer] + *v10 + 16);
    uint64_t v14 = a3;
    uint64_t v15 = &a4[v14];
    v15[1650] = v11;
    uint64_t v16 = *(unsigned int *)(a2 + 320);
    v15[1715] = v12;
    int v17 = (void *)(*a4 + v14 * 8);
    v17[67] = v16;
    v17[132] = v13 & 0xFFFFFFFFFFFFFFLL;
    *int v17 = v12;
    uint64_t v18 = (_DWORD *)a4 + a3 + 2;
    v18[2098] = v13;
    v18[2163] = v13;
    v18[2228] = v11 >> 8;
    v15[1166] = [(id)a2 buffer] + *v10;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(a1 + 8) + 1592), [(id)a2 buffer], 6u, a3);
    if (*(void *)(*(void *)(a1 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    int v19 = (os_unfair_lock_s *)(*(void *)(a2 + 328) + 40);
    os_unfair_lock_lock(v19);
    os_unfair_lock_unlock(v19);
  }
  else
  {
    uint64_t v20 = a3;
    uint64_t v21 = &a4[v20];
    v21[1166] = 0;
    uint64_t v22 = (void *)(*a4 + v20 * 8);
    v22[67] = 0;
    v22[132] = 0;
    *uint64_t v22 = 0;
    v21[1650] = 0;
    v21[1715] = 0;
    int v23 = (char *)a4 + 4 * a3;
    *((_DWORD *)v23 + 2100) = 0;
    *((_DWORD *)v23 + 2165) = 0;
  }
  uint64_t v24 = v8 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v24 + 96) |= 1 << a3;
  *(void *)(v24 + 144) |= 1 << a3;
  *(void *)(v8 + 90472) |= 0x30000uLL;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>,AGXG17FamilyRayTracingAccelerationStructure>(uint64_t result, unsigned int *a2, unsigned int a3, void *a4)
{
  uint64_t v7 = result;
  if (a3 <= 0x22) {
    a4[a3 + 1615] = 0;
  }
  uint64_t v8 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v9 = [a2 buffer];
    unint64_t v10 = (int *)MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v9 + (int)*MEMORY[0x263F4B188] + 8);
    uint64_t v12 = *(void *)([a2 buffer] + *v10 + 24);
    uint64_t v13 = *(void *)([a2 buffer] + *v10 + 16);
    uint64_t v14 = a3;
    uint64_t v15 = &a4[v14];
    v15[1650] = v11;
    v15[1715] = v12;
    uint64_t v16 = (void *)(*a4 + v14 * 8);
    v16[67] = a2[86];
    v16[132] = v13 & 0xFFFFFFFFFFFFFFLL;
    *uint64_t v16 = v12;
    int v17 = (_DWORD *)a4 + a3 + 2;
    v17[2098] = v13;
    v17[2163] = v13;
    v17[2228] = v11 >> 8;
    v15[1166] = [a2 buffer] + *v10;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(v7 + 8) + 1592), [a2 buffer], 6u, a3);
    uint64_t result = *(void *)(*(void *)(v7 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v18 = a3;
    int v19 = &a4[v18];
    v19[1166] = 0;
    uint64_t v20 = (void *)(*a4 + v18 * 8);
    v20[67] = 0;
    v20[132] = 0;
    *uint64_t v20 = 0;
    v19[1650] = 0;
    v19[1715] = 0;
    uint64_t v21 = (char *)a4 + 4 * a3;
    *((_DWORD *)v21 + 2100) = 0;
    *((_DWORD *)v21 + 2165) = 0;
  }
  uint64_t v22 = v8 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v22 + 96) |= 1 << a3;
  *(void *)(v22 + 144) |= 1 << a3;
  *(void *)(v8 + 90472) |= 0x30000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setIntersectionFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(uint64_t result, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a2 + 296);
    uint64_t v9 = *(unsigned int *)(v8 + 24);
    uint64_t v10 = a3;
    unint64_t v11 = (void *)(*a4 + v10 * 8);
    v11[67] = *(int *)(v8 + 160);
    v11[132] = v9;
    *unint64_t v11 = 0;
    uint64_t v12 = &a4[v10];
    v12[1633] = 0;
    v12[1698] = 0;
    uint64_t v13 = (_DWORD *)a4 + a3;
    v13[2103] = 0;
    v13[2168] = 0;
    v13[2233] = 0;
    v12[1149] = *(void *)(*(void *)(v8 + 136) + 296) + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), *(void *)(*(void *)(v8 + 136) + 296), 7u, a3);
    if (*(void *)(*(void *)(v7 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    a4[a3 + 1598] = *(void *)(v8 + 96);
    uint64_t result = *(void *)(*(void *)(v7 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    a4[a3 + 1149] = 0;
    if (a3 <= 0x22) {
      a4[a3 + 1598] = 0;
    }
    uint64_t v14 = (void *)(*a4 + 8 * a3);
    v14[67] = 0;
    *uint64_t v14 = 0;
    *(void *)(*a4 + 8 * a3 + 1056) = 0;
    uint64_t v15 = &a4[a3];
    v15[1633] = 0;
    v15[1698] = 0;
    uint64_t v16 = (uint64_t)a4 + 4 * a3 + 8;
    *(_DWORD *)(v16 + 8404) = 0;
    *(_DWORD *)(v16 + 8664) = 0;
  }
  uint64_t v17 = v6 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v17 + 192) |= 1 << a3;
  *(void *)(v17 + 240) |= 1 << a3;
  *(void *)(v6 + 90472) |= 0xC000000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setIntersectionFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(uint64_t result, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a2 + 296);
    uint64_t v9 = *(unsigned int *)(v8 + 24);
    uint64_t v10 = a3;
    unint64_t v11 = (void *)(*a4 + v10 * 8);
    v11[67] = *(int *)(v8 + 160);
    v11[132] = v9;
    *unint64_t v11 = 0;
    uint64_t v12 = &a4[v10];
    v12[1650] = 0;
    v12[1715] = 0;
    uint64_t v13 = (_DWORD *)a4 + a3;
    v13[2100] = 0;
    v13[2165] = 0;
    v13[2230] = 0;
    v12[1166] = *(void *)(*(void *)(v8 + 136) + 296) + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), *(void *)(*(void *)(v8 + 136) + 296), 6u, a3);
    if (*(void *)(*(void *)(v7 + 8) + 1480)) {
      MTLResourceListAddResource();
    }
    a4[a3 + 1615] = *(void *)(v8 + 96);
    uint64_t result = *(void *)(*(void *)(v7 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    a4[a3 + 1166] = 0;
    if (a3 <= 0x22) {
      a4[a3 + 1615] = 0;
    }
    uint64_t v14 = (void *)(*a4 + 8 * a3);
    v14[67] = 0;
    *uint64_t v14 = 0;
    *(void *)(*a4 + 8 * a3 + 1056) = 0;
    uint64_t v15 = &a4[a3];
    v15[1650] = 0;
    v15[1715] = 0;
    uint64_t v16 = (uint64_t)a4 + 4 * a3 + 8;
    *(_DWORD *)(v16 + 8392) = 0;
    *(_DWORD *)(v16 + 8652) = 0;
  }
  uint64_t v17 = v6 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v17 + 96) |= 1 << a3;
  *(void *)(v17 + 144) |= 1 << a3;
  *(void *)(v6 + 90472) |= 0x30000uLL;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setFragmentProgramIntersectionFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 296);
    uint64_t v6 = *(unsigned int *)(v5 + 24);
    uint64_t v7 = (void *)(result + 8 * a3);
    v7[6215] = *(int *)(v5 + 160);
    v7[6280] = v6;
    v7[6148] = 0;
    v7[10936] = 0;
    v7[11196] = 0;
    uint64_t v8 = (_DWORD *)(result + 4 * a3 + 68760);
    v8[2159] = 0;
    v8[2224] = 0;
    v8[2289] = 0;
    uint64_t v9 = *(void *)(*(void *)(v5 + 136) + 296);
    v7[9838] = v9 + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), v9, 1u, a3);
    uint64_t result = *(void *)(v4 + 1480);
    if (result)
    {
      MTLResourceListAddResource();
      uint64_t result = *(void *)(v4 + 1480);
      *(void *)(v4 + 8 * a3 + 85648) = *(void *)(v5 + 96);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
    }
    else
    {
      *(void *)(v4 + 8 * a3 + 85648) = *(void *)(v5 + 96);
    }
  }
  else
  {
    uint64_t v10 = (void *)(result + 8 * a3);
    v10[9838] = 0;
    v10[10706] = 0;
    v10[10936] = 0;
    v10[11196] = 0;
    v10 += 6148;
    v10[67] = 0;
    *uint64_t v10 = 0;
    v10[132] = 0;
    uint64_t v11 = result + 4 * a3 + 68760;
    *(_DWORD *)(v11 + 8636) = 0;
    *(_DWORD *)(v11 + 8896) = 0;
  }
  uint64_t v12 = v4 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v12 + 288) |= 1 << a3;
  *(void *)(v12 + 336) |= 1 << a3;
  *(void *)(v4 + 90472) |= 0x3000000000uLL;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexProgramIntersectionFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  if (a2)
  {
    uint64_t v5 = *(void *)(a2 + 296);
    uint64_t v6 = *(unsigned int *)(v5 + 24);
    uint64_t v7 = (void *)(result + 8 * a3);
    v7[4941] = *(int *)(v5 + 160);
    v7[5006] = v6;
    v7[4874] = 0;
    v7[10741] = 0;
    v7[11001] = 0;
    uint64_t v8 = (_DWORD *)(result + 4 * a3 + 59376);
    v8[2150] = 0;
    v8[2215] = 0;
    v8[2280] = 0;
    uint64_t v9 = *(void *)(*(void *)(v5 + 136) + 296);
    v7[9773] = v9 + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), v9, 0, a3);
    uint64_t result = *(void *)(v4 + 1480);
    if (result)
    {
      MTLResourceListAddResource();
      uint64_t result = *(void *)(v4 + 1480);
      *(void *)(v4 + 8 * a3 + 85368) = *(void *)(v5 + 96);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
    }
    else
    {
      *(void *)(v4 + 8 * a3 + 85368) = *(void *)(v5 + 96);
    }
  }
  else
  {
    uint64_t v10 = (void *)(result + 8 * a3);
    v10[9773] = 0;
    v10[10671] = 0;
    v10[10741] = 0;
    v10[11001] = 0;
    v10 += 4874;
    v10[67] = 0;
    *uint64_t v10 = 0;
    v10[132] = 0;
    uint64_t v11 = result + 4 * a3 + 59376;
    *(_DWORD *)(v11 + 8600) = 0;
    *(_DWORD *)(v11 + 8860) = 0;
  }
  uint64_t v12 = (void *)(v4 + 90088 + 8 * (a3 > 0x3F));
  *v12 |= 1 << a3;
  v12[6] |= 1 << a3;
  *(void *)(v4 + 90472) |= 0xC0uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVisibleFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(uint64_t result, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = a3;
    uint64_t v8 = (void *)(*a4 + v7 * 8);
    v8[67] = *(unsigned int *)(a2 + 352);
    uint64_t v9 = (int *)MEMORY[0x263F4B188];
    uint64_t v10 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v10 + 8);
    uint64_t v14 = v10 + 16;
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void *)(v14 + 8);
    uint64_t v15 = &a4[v7];
    v15[1633] = v11;
    v15[1698] = v13;
    v8[132] = v12 & 0xFFFFFFFFFFFFFFLL;
    *uint64_t v8 = v13;
    uint64_t v16 = (_DWORD *)a4 + a3;
    v16[2103] = v12;
    v16[2168] = v12;
    v16[2233] = v11 >> 8;
    v15[1149] = a2 + *v9;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), a2, 7u, a3);
    uint64_t result = *(void *)(*(void *)(v6 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v17 = a3;
    uint64_t v18 = (void *)(*a4 + v17 * 8);
    v18[67] = 0;
    int v19 = &a4[v17];
    v19[1149] = 0;
    v18[132] = 0;
    *uint64_t v18 = 0;
    v19[1633] = 0;
    v19[1698] = 0;
    uint64_t v20 = (_DWORD *)a4 + a3;
    v20[2103] = 0;
    v20[2168] = 0;
    v20[2233] = 0;
  }
  uint64_t v21 = v5 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v21 + 192) |= 1 << a3;
  *(void *)(v21 + 240) |= 1 << a3;
  *(void *)(v5 + 90472) |= 0xC000000uLL;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVisibleFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(uint64_t result, uint64_t a2, unsigned int a3, void *a4)
{
  uint64_t v5 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = a3;
    uint64_t v8 = (void *)(*a4 + v7 * 8);
    v8[67] = *(unsigned int *)(a2 + 352);
    uint64_t v9 = (int *)MEMORY[0x263F4B188];
    uint64_t v10 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v11 = *(void *)(v10 + 8);
    uint64_t v14 = v10 + 16;
    uint64_t v12 = *(void *)(v10 + 16);
    uint64_t v13 = *(void *)(v14 + 8);
    uint64_t v15 = &a4[v7];
    v15[1650] = v11;
    v15[1715] = v13;
    v8[132] = v12 & 0xFFFFFFFFFFFFFFLL;
    *uint64_t v8 = v13;
    uint64_t v16 = (_DWORD *)a4 + a3;
    v16[2100] = v12;
    v16[2165] = v12;
    v16[2230] = v11 >> 8;
    v15[1166] = a2 + *v9;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(*(void *)(result + 8) + 1592), a2, 6u, a3);
    uint64_t result = *(void *)(*(void *)(v6 + 8) + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    uint64_t v17 = a3;
    uint64_t v18 = (void *)(*a4 + v17 * 8);
    v18[67] = 0;
    int v19 = &a4[v17];
    v19[1166] = 0;
    v18[132] = 0;
    *uint64_t v18 = 0;
    v19[1650] = 0;
    v19[1715] = 0;
    uint64_t v20 = (_DWORD *)a4 + a3;
    v20[2100] = 0;
    v20[2165] = 0;
    v20[2230] = 0;
  }
  uint64_t v21 = v5 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v21 + 96) |= 1 << a3;
  *(void *)(v21 + 144) |= 1 << a3;
  *(void *)(v5 + 90472) |= 0x30000uLL;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setFragmentProgramVisibleFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (void *)(result + 8 * a3);
  if (a3 <= 0x22) {
    v5[10706] = 0;
  }
  if (a2)
  {
    v5[6215] = *(unsigned int *)(a2 + 352);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    uint64_t v7 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v8 = *(void *)(v7 + 8);
    uint64_t v11 = v7 + 16;
    uint64_t v9 = *(void *)(v7 + 16);
    uint64_t v10 = *(void *)(v11 + 8);
    v5[10936] = v8;
    v5[11196] = v10;
    v5[6280] = v9 & 0xFFFFFFFFFFFFFFLL;
    v5[6148] = v10;
    uint64_t v12 = (_DWORD *)(result + 4 * a3 + 68760);
    v12[2159] = v9;
    v12[2224] = v9;
    v12[2289] = v8 >> 8;
    v5[9838] = a2 + *v6;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), a2, 1u, a3);
    uint64_t result = *(void *)(v4 + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    v5[6215] = 0;
    v5[9838] = 0;
    v5[6280] = 0;
    v5[10936] = 0;
    v5[11196] = 0;
    v5[6148] = 0;
    uint64_t v13 = result + 4 * a3 + 68760;
    *(_DWORD *)(v13 + 8636) = 0;
    *(_DWORD *)(v13 + 8896) = 0;
  }
  uint64_t v14 = v4 + 90088 + 8 * (a3 > 0x3F);
  *(void *)(v14 + 288) |= 1 << a3;
  *(void *)(v14 + 336) |= 1 << a3;
  *(void *)(v4 + 90472) |= 0x3000000000uLL;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexProgramVisibleFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (void *)(result + 8 * a3);
  if (a3 <= 0x22) {
    v5[10671] = 0;
  }
  if (a2)
  {
    v5[4941] = *(unsigned int *)(a2 + 352);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    uint64_t v7 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v8 = *(void *)(v7 + 8);
    uint64_t v11 = v7 + 16;
    uint64_t v9 = *(void *)(v7 + 16);
    uint64_t v10 = *(void *)(v11 + 8);
    v5[10741] = v8;
    v5[11001] = v10;
    v5[5006] = v9 & 0xFFFFFFFFFFFFFFLL;
    v5[4874] = v10;
    uint64_t v12 = (_DWORD *)(result + 4 * a3 + 59376);
    v12[2150] = v9;
    v12[2215] = v9;
    v12[2280] = v8 >> 8;
    v5[9773] = a2 + *v6;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), a2, 0, a3);
    uint64_t result = *(void *)(v4 + 1480);
    if (result) {
      uint64_t result = MTLResourceListAddResource();
    }
  }
  else
  {
    v5[4941] = 0;
    v5[9773] = 0;
    v5[5006] = 0;
    v5[10741] = 0;
    v5[11001] = 0;
    v5[4874] = 0;
    uint64_t v13 = result + 4 * a3 + 59376;
    *(_DWORD *)(v13 + 8600) = 0;
    *(_DWORD *)(v13 + 8860) = 0;
  }
  uint64_t v14 = (void *)(v4 + 90088 + 8 * (a3 > 0x3F));
  *v14 |= 1 << a3;
  v14[6] |= 1 << a3;
  *(void *)(v4 + 90472) |= 0xC0uLL;
  return result;
}

void sub_242B53780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__4564(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__4565(uint64_t a1)
{
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWarpedThreads(uint64_t a1, int64x2_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v7 = a1;
  v94[6] = *MEMORY[0x263EF8340];
  unint64_t v8 = (void *)(a1 + 90472);
  uint64_t v9 = *(void *)(a1 + 90568);
  if (!v9
    || ((uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 1968) + 5248), v11 = *(void *)(v9 + 64), v10)
      ? (BOOL v12 = v11 == 0)
      : (BOOL v12 = 1),
        v12))
  {
    int64x2_t v76 = *a2;
    uint64_t v77 = a2[1].i64[0];
    uint64_t v13 = (long long *)&v76;
    unint64_t v14 = 1;
LABEL_8:
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreadsImpl<false>(a1, v13, (uint64_t)a3, v14, v4);
    return;
  }
  float32x2_t v15 = vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)a3));
  float32x2_t v16 = vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(*(int64x2_t *)((char *)a3 + 24), *(int64x2_t *)a3)));
  uint64_t v17 = (unsigned char *)(v11 + 24744);
  if (*(_DWORD *)(v11 + 16) >= 2u && BYTE4(a4) == 0)
  {
    if (!*v17)
    {
      uint64_t v33 = 0;
      uint64_t v34 = &v92;
      do
      {
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
        v36.i32[1] = v35;
        float32x2_t v74 = v36;
        AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
        v38.i32[1] = v37;
        float32x2_t v39 = vrndm_f32(v74);
        float32x2_t v40 = vrndm_f32(v38);
        v34[-1].i64[1] = 0;
        uint32x2_t v41 = vcvt_u32_f32(vrndm_f32((float32x2_t)vbsl_s8((int8x8_t)vceq_f32(vsub_f32(v74, v39), (float32x2_t)0x3F0000003F000000), (int8x8_t)v39, (int8x8_t)v74)));
        v42.i64[0] = v41.u32[0];
        v42.i64[1] = v41.u32[1];
        *(uint64x2_t *)((char *)v34 - 24) = v42;
        *uint64_t v34 = vsubl_u32(vcvt_u32_f32(vrndp_f32((float32x2_t)vbsl_s8((int8x8_t)vceq_f32(vsub_f32(v38, v40), (float32x2_t)0x3F0000003F000000), (int8x8_t)v40, (int8x8_t)v38))), v41);
        v34[1].i64[0] = 0;
        ++v33;
        v34 += 3;
      }
      while (v10 != v33);
LABEL_22:
      int64x2_t v78 = *a2;
      uint64_t v79 = a2[1].i64[0];
      uint64_t v13 = (long long *)&v78;
      a3 = &v90;
      a1 = v7;
      unint64_t v14 = v10;
      goto LABEL_8;
    }
    uint32x2_t v28 = vcvt_u32_f32(v15);
    v29.i64[0] = v28.u32[0];
    v29.i64[1] = v28.u32[1];
    uint64x2_t v30 = v29;
    uint64x2_t v31 = vsubl_u32(vcvt_u32_f32(v16), v28);
    if (v10 >= 2)
    {
      uint64_t v32 = v10 & 0xFFFFFFFE;
      uint64_t v43 = v94;
      uint64_t v44 = v32;
      do
      {
        *((uint64x2_t *)v43 - 3) = v30;
        *(uint64x2_t *)uint64_t v43 = v30;
        *(v43 - 4) = 0;
        v43[2] = 0;
        *(uint64x2_t *)(v43 - 3) = v31;
        *(uint64x2_t *)(v43 + 3) = v31;
        *(v43 - 1) = 0;
        v43[5] = 0;
        v43 += 12;
        v44 -= 2;
      }
      while (v44);
      if (v32 == v10) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
    uint64_t v45 = v10 - v32;
    uint64_t v46 = &v92 + 3 * v32;
    do
    {
      *(uint64x2_t *)((char *)v46 - 24) = v30;
      v46[-1].i64[1] = 0;
      *uint64_t v46 = v31;
      v46[1].i64[0] = 0;
      v46 += 3;
      --v45;
    }
    while (v45);
    goto LABEL_28;
  }
  int v19 = *v17;
  if (!*v17)
  {
    AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
    v21.i32[1] = v20;
    float32x2_t v73 = v21;
    AGX::WarpFunction<AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getWarpedCoordinate();
    float32x2_t v15 = v73;
    float32x2_t v16 = (float32x2_t)__PAIR64__(v23, v22);
  }
  float32x2_t v24 = vrndm_f32(v15);
  float32x2_t v25 = vrndm_f32(v16);
  uint64_t v91 = 0;
  uint32x2_t v26 = vcvt_u32_f32(vrndm_f32((float32x2_t)vbsl_s8((int8x8_t)vceq_f32(vsub_f32(v15, v24), (float32x2_t)0x3F0000003F000000), (int8x8_t)v24, (int8x8_t)v15)));
  *(void *)&long long v27 = v26.u32[0];
  *((void *)&v27 + 1) = v26.u32[1];
  long long v90 = v27;
  uint64x2_t v92 = vsubl_u32(vcvt_u32_f32(vrndp_f32((float32x2_t)vbsl_s8((int8x8_t)vceq_f32(vsub_f32(v16, v25), (float32x2_t)0x3F0000003F000000), (int8x8_t)v25, (int8x8_t)v16))), v26);
  uint64_t v93 = 0;
  uint64_t v10 = 1;
  if (!v19) {
    goto LABEL_22;
  }
LABEL_28:
  uint64_t v47 = v7 + 38552;
  uint64_t v82 = 0;
  uint64_t v83 = 0;
  unint64_t v48 = *(void *)(v7 + 736) + 56;
  uint64x2_t v75 = (unsigned int **)(v7 + 38552);
  if (v48 > *(void *)(v7 + 728))
  {
    int v66 = AGX::DataBufferAllocator<34ul>::growNoInline(v7 + 16, 21, 0);
    uint64_t v47 = v7 + 38552;
    if (v66)
    {
      unint64_t v67 = *(void *)(v7 + 736) + 56;
      if (v67 > *(void *)(v7 + 728)) {
        abort();
      }
      *(void *)(v7 + 744) = v67;
      if (!*(_DWORD *)(v7 + 38568))
      {
        uint64_t v68 = *v75;
        if (*v75)
        {
          uint64_t v69 = *(void *)(v7 + 38576);
          *uint64_t v68 = BYTE4(v69) | 0x80000000;
          v68[1] = v69;
          *uint64x2_t v75 = 0;
          *(void *)(v7 + 38576) = 0;
          ++*(_DWORD *)(v7 + 1536);
        }
      }
      unsigned int v70 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(v7 + 1456) + 808) + 7944) + 8) + 2272);
      do
      {
        v70 &= ~(1 << __clz(__rbit32(v70)));
        IOGPUResourceListAddResource();
      }
      while (v70);
      AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace((void *)(v7 + 16), *(void *)(*(void *)(*(void *)(*(void *)(v7 + 1456) + 808) + 7944) + 8));
      *(_DWORD *)(v7 + 38568) = 0;
      *uint64x2_t v75 = *(unsigned int **)(v7 + 64);
      uint64_t v71 = AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVRRPatchDraw(v7);
      uint64_t v47 = v7 + 38552;
      *(void *)(v7 + 38560) = v71;
      *(void *)(v7 + 38576) = *(void *)(v7 + 80) + *(void *)(v7 + 64);
    }
  }
  else
  {
    *(void *)(v7 + 744) = v48;
  }
  int64x2_t v80 = *a2;
  uint64_t v81 = a2[1].i64[0];
  *(unsigned char *)(v7 + 36657) = 1;
  char v89 = 0;
  uint64_t v49 = *(void *)(v7 + 26784);
  if (v49) {
    BOOL v50 = *(unsigned char *)(v49 + 784) != 0;
  }
  else {
    BOOL v50 = 0;
  }
  int64x2_t v87 = v80;
  uint64_t v88 = v81;
  AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreadsWithIndirectParameters(v7 + 2248, &v87, &v89, (_DWORD *)(v7 + 1524), *(int8x16_t **)(v47 + 400), (uint64_t)&v90, v10, v4, &v83, &v82);
  if (v50
    && AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)v7))
  {
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace((void *)(v7 + 16), *(void *)(*(void *)(*(void *)(*(void *)(v7 + 1456) + 808) + 7936) + 8));
    int v51 = 0;
    uint64_t v52 = v7 + 38552;
    if (!v49) {
      goto LABEL_38;
    }
  }
  else
  {
    int v51 = 1;
    uint64_t v52 = v7 + 38552;
    if (!v49) {
      goto LABEL_38;
    }
  }
  char v53 = *(unsigned char *)(v7 + 1506);
  if (v53) {
    char v53 = *(unsigned char *)(*(void *)(v52 + 424) + 1740);
  }
  *(unsigned char *)(*(void *)(v52 + 400) + 1300) |= v53;
LABEL_38:
  if (v89)
  {
    if (*(unsigned char *)(*(void *)(v7 + 1968) + 3965) || *(unsigned char *)(v7 + 36652))
    {
      int v54 = 0;
      goto LABEL_42;
    }
    int v54 = 1;
    BOOL v72 = v50;
    int v65 = v51;
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(v7, (unint64_t *)(v7 + 90472), 0, 1);
    char v89 = 0;
    int64x2_t v85 = v80;
    uint64_t v86 = v81;
    AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreadsWithIndirectParameters(v7 + 2248, &v85, &v89, (_DWORD *)(v7 + 1524), *(int8x16_t **)(v7 + 38952), (uint64_t)&v90, v10, v4, &v83, &v82);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)v7);
    int v51 = v65;
    BOOL v50 = v72;
    uint64_t v52 = v7 + 38552;
    if (v89)
    {
LABEL_42:
      uint64_t v55 = *(void *)(v7 + 1552) - *(void *)(v7 + 1568);
      *(_DWORD *)(v55 + 12) = 1;
      if ((*(unsigned char *)(v55 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)v7 + 688) = 1;
      }
    }
  }
  else
  {
    int v54 = 0;
  }
  if (v50)
  {
    if (((v51 | v54) & 1) == 0) {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitGPUGather(v7);
    }
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchGPUGatherDraw(v7, *(void *)(v49 + 2432), v7 + 2320);
    long long v84 = *(_OWORD *)(v49 + 2248);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindBuffersForGPUGatherOrPDSPatchToVertex(v7, (unint64_t *)&v84);
    uint64_t v52 = v7 + 38552;
  }
  v8[88] |= 0x2000uLL;
  *v8 |= 0x5F700000000004uLL;
  if (BYTE4(v4))
  {
    int v56 = 1;
  }
  else
  {
    int v56 = *(_DWORD *)(v11 + 16);
    LODWORD(v4) = -1;
  }
  uint64_t v57 = v83;
  uint64_t v58 = (uint64_t *)(*(void *)(v7 + 1968) + 3940);
  int32x4_t v59 = (int32x4_t)*v5;
  int32x4_t v60 = *(int32x4_t *)((char *)v5 + 24);
  uint64_t v61 = *(int32x4_t **)(v7 + 736);
  *(void *)(v7 + 736) = (char *)v61 + 56;
  v61->i32[0] = 2;
  uint64_t v62 = *v58;
  v61->i32[1] = v56;
  int32x2_t v63 = vmovn_s64(*a2);
  v61->i64[1] = v57;
  *(int32x2_t *)v61[1].i8 = v63;
  v61[1].i64[1] = v62;
  v61[2] = vuzp1q_s32(v59, v60);
  v61[3].i32[0] = v4;
  int v64 = *(_DWORD *)(v52 + 16) + 1;
  *(_DWORD *)(v52 + 16) = v64;
  *(_DWORD *)(*(void *)(v52 + 8) + 4) = v64;
  ++*(_DWORD *)(v7 + 1540);
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreadsImpl<false>(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 38952;
  uint64_t v9 = (unsigned char *)(a1 + 36652);
  *(unsigned char *)(a1 + 36657) = 1;
  char v25 = 0;
  uint64_t v10 = a1 + 2248;
  uint64_t v11 = *(void *)(a1 + 26784);
  if (v11) {
    BOOL v12 = *(unsigned char *)(v11 + 784) != 0;
  }
  else {
    BOOL v12 = 0;
  }
  long long v23 = *a2;
  uint64_t v24 = *((void *)a2 + 2);
  AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreads(a1 + 2248, (unint64_t *)&v23, &v25, (_DWORD *)(a1 + 1524), *(int8x16_t **)v8, a3, a4, a5);
  if (v12
    && AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1))
  {
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace((void *)(a1 + 16), *(void *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7936) + 8));
    int v13 = 0;
    if (!v11) {
      goto LABEL_9;
    }
  }
  else
  {
    int v13 = 1;
    if (!v11) {
      goto LABEL_9;
    }
  }
  char v14 = *(unsigned char *)(a1 + 1506);
  if (v14) {
    char v14 = *(unsigned char *)(*(void *)(v8 + 24) + 1740);
  }
  *(unsigned char *)(*(void *)v8 + 1300) |= v14;
LABEL_9:
  if (!v25)
  {
    int v15 = 0;
    goto LABEL_16;
  }
  if (*(unsigned char *)(*(void *)(a1 + 1968) + 3965) || *v9)
  {
    int v15 = 0;
  }
  else
  {
    int v15 = 1;
    int v17 = v13;
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(a1, (unint64_t *)(a1 + 90472), 0, 1);
    char v25 = 0;
    long long v21 = *a2;
    uint64_t v22 = *((void *)a2 + 2);
    AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreads(v10, (unint64_t *)&v21, &v25, (_DWORD *)(a1 + 1524), *(int8x16_t **)v8, a3, a4, a5);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1);
    int v13 = v17;
    if (!v25) {
      goto LABEL_16;
    }
  }
  uint64_t v16 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
  *(_DWORD *)(v16 + 12) = 1;
  if ((*(unsigned char *)(v16 + 8) & 4) != 0) {
    **(unsigned char **)(*(void *)a1 + 688) = 1;
  }
LABEL_16:
  if (v12)
  {
    if (((v13 | v15) & 1) == 0) {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitGPUGather(a1);
    }
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchGPUGatherDraw(a1, *(void *)(v11 + 2432), a1 + 2320);
    long long v20 = *(_OWORD *)(v11 + 2248);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindBuffersForGPUGatherOrPDSPatchToVertex(a1, (unint64_t *)&v20);
  }
  *(void *)(a1 + 91176) |= 0x2000uLL;
  *(void *)(a1 + 90472) |= 0x5F700000000004uLL;
}

BOOL AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace(void *a1)
{
  uint64_t v2 = a1 + 2;
  uint64_t v3 = a1[29];
  unint64_t v4 = v3 + 39;
  if ((unint64_t)(v3 + 39) <= a1[27])
  {
LABEL_2:
    a1[29] = v4;
    goto LABEL_3;
  }
  uint64_t v12 = a1[28];
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 2, 5, 0))
  {
    unint64_t v4 = a1[28] + v3 - v12 + 39;
    if (v4 > a1[27]) {
      goto LABEL_16;
    }
    goto LABEL_2;
  }
LABEL_3:
  uint64_t v5 = a1[21];
  unint64_t v6 = v5 + 287;
  if ((unint64_t)(v5 + 287) <= a1[19])
  {
LABEL_4:
    a1[21] = v6;
    goto LABEL_5;
  }
  uint64_t v13 = a1[20];
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v2, 3, 0))
  {
    unint64_t v6 = a1[20] + v5 - v13 + 287;
    if (v6 > a1[19]) {
      goto LABEL_16;
    }
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v7 = a1[69];
  unint64_t v8 = v7 + 4;
  unint64_t v9 = a1[67];
  BOOL v10 = v7 + 4 > v9;
  if (v7 + 4 <= v9)
  {
LABEL_6:
    a1[69] = v8;
    return v10;
  }
  uint64_t v14 = a1[68];
  int v15 = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 15, 0);
  BOOL result = 0;
  if (v15)
  {
    unint64_t v8 = a1[68] + v7 - v14 + 4;
    if (v8 <= a1[67]) {
      goto LABEL_6;
    }
LABEL_16:
    abort();
  }
  return result;
}

double AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitGPUGather(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v1 + 16;
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + 90472;
  uint64_t v5 = v1 + 38520;
  *(_DWORD *)(v1 + 38536) = 0;
  *(void *)(v1 + 38520) = *(void *)(v1 + 64);
  unint64_t v6 = *(void **)(v1 + 40);
  uint64_t v7 = v6[120];
  uint64_t v8 = v6[123];
  uint64_t v9 = v6[121];
  uint64_t v10 = *(void *)(v2 + 512);
  uint64_t v11 = *(void *)(*(void *)(*(void *)(*(void *)(v1 + 1456) + 808) + 7936) + 8);
  v34[0] = xmmword_242EA7390;
  int v35 = 1065353216;
  uint64_t v36 = 0x100000001;
  int v33 = 0;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments((char ***)(v1 + 1752), (void *)(v1 + 16), v11, v37, (uint64_t)v34, 57345, 0, 0, 0, &v33);
  uint64_t v12 = *(void *)(v3 + 1008);
  uint64_t v13 = *(void *)(v3 + 1024) + v12;
  *(void *)(v3 + 1008) = v12 + 20;
  *(_OWORD *)uint64_t v12 = xmmword_242EA8720;
  *(_DWORD *)(v12 + 16) = 0;
  uint64_t v14 = *(unint64_t **)(v3 + 48);
  *uint64_t v14 = __ROR8__(v13, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(v3 + 48) = v14 + 1;
  uint64_t v15 = *(void *)(v3 + 1008);
  uint64_t v16 = *(void *)(v3 + 1024) + v15;
  *(void *)(v3 + 1008) = v15 + 28;
  *(_OWORD *)uint64_t v15 = xmmword_242EA7DE0;
  *(void *)(v15 + 16) = 0xE00000007E00F00;
  *(_DWORD *)(v15 + 24) = 0;
  uint64_t v17 = __ROR8__(v16, 32);
  uint64_t v18 = *(unint64_t **)(v3 + 48);
  *uint64_t v18 = v17 & 0xFFFFFFFC000000FFLL | 0x700;
  *(void *)(v3 + 48) = v18 + 1;
  uint64_t v19 = *(void *)(v11 + 3576);
  uint64_t v20 = *(void *)(v3 + 1008);
  uint64_t v21 = *(void *)(v3 + 1024) + v20;
  *(void *)(v3 + 1008) = v20 + 20;
  *(_DWORD *)uint64_t v20 = 201981952;
  *(_DWORD *)(v20 + 4) = v19 & 0xF1C00FF;
  *(void *)(v20 + 8) = 0;
  *(_DWORD *)(v20 + 16) = HIDWORD(v19);
  uint64_t v22 = *(unint64_t **)(v3 + 48);
  *uint64_t v22 = __ROR8__(v21, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  *(void *)(v3 + 48) = v22 + 1;
  uint64_t v23 = v7 + v8 - v9;
  uint64_t v24 = *(void *)(v3 + 1008);
  uint64_t v25 = *(void *)(v3 + 1024) + v24;
  *(void *)(v3 + 1008) = v24 + 12;
  *(void *)uint64_t v24 = 0x1E3CE50800410000;
  *(_DWORD *)(v24 + 8) = 131232;
  uint64_t v26 = __ROR8__(v25, 32);
  long long v27 = *(unint64_t **)(v3 + 48);
  *long long v27 = v26 & 0xFFFFFFFC000000FFLL | 0x300;
  *(void *)(v3 + 48) = v27 + 1;
  uint32x2_t v28 = *(void **)(v3 + 1008);
  uint64x2_t v29 = (char *)v28 + *(void *)(v3 + 1024);
  *(void *)(v3 + 1008) = v28 + 1;
  *uint32x2_t v28 = 0x48000200000;
  uint64_t v30 = __ROR8__(v29, 32);
  uint64_t v31 = *(void *)(v3 + 48);
  *(void *)uint64_t v31 = v30 & 0xFFFFFFFC000000FFLL | 0x200;
  *(void *)(v31 + 8) = 0xFFFF40000001;
  *(_DWORD *)(v31 + 16) = BYTE4(v23) | 0x61F50000;
  *(_DWORD *)(v31 + 20) = v23;
  *(void *)&double result = 0x100000000;
  *(void *)(v31 + 24) = 0x100000000;
  *(_DWORD *)(v31 + 32) = 0;
  *(_DWORD *)(v31 + 36) = ((unint64_t)(v10 + 3) >> 2) - 1;
  *(_DWORD *)(v31 + 40) = BYTE5(v23);
  ++*(_DWORD *)(v3 + 1508);
  ++*(_DWORD *)(v4 + 112);
  *(_DWORD *)(v31 + 44) = 536871264;
  *(void *)(v3 + 48) = v31 + 48;
  *(void *)v4 |= 0x5F500000000001uLL;
  *(void *)(v5 + 8) = v31 + 16;
  *(void *)(v5 + 24) = *(void *)(v3 + 64) + v31 + 48;
  return result;
}

void *AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchGPUGatherDraw(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (*(void *)(a1 + 224) + 7) & 0xFFFFFFFFFFFFFFF8;
  int v4 = v3 + *(_DWORD *)(a1 + 240);
  *(void *)(a1 + 224) = v3 + 32;
  long long v5 = *(_OWORD *)(a3 + 1576);
  *(void *)unint64_t v3 = a2;
  *(_OWORD *)(v3 + 8) = v5;
  unint64_t v6 = *(_DWORD **)(a1 + 544);
  *unint64_t v6 = v4;
  *(void *)(a1 + 544) = v6 + 1;
  LODWORD(v6) = *(_DWORD *)(a1 + 38536) + 1;
  *(_DWORD *)(a1 + 38536) = v6;
  *(_DWORD *)(*(void *)(a1 + 38528) + 8) = v6;
  ++*(_DWORD *)(a1 + 1540);
  uint64_t v7 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = &v7[*(void *)(a1 + 176)];
  *(void *)(a1 + 160) = v7 + 280;
  double result = memcpy(v7, (const void *)(a3 + 536), 0x118uLL);
  *(void *)(v3 + 24) = v8;
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindBuffersForGPUGatherOrPDSPatchToVertex(uint64_t a1, unint64_t *a2)
{
  unint64_t v3 = a2 + 1;
  while (1)
  {
    unint64_t v7 = *a2;
    if (*a2)
    {
      char v4 = __clz(__rbit64(v7));
      long long v5 = a2;
      goto LABEL_3;
    }
    unint64_t v7 = *v3;
    if (!*v3) {
      return result;
    }
    char v4 = __clz(__rbit64(v7));
    long long v5 = v3;
LABEL_3:
    *long long v5 = v7 & ~(1 << v4);
    uint64_t result = IOGPUResourceListAddResource();
  }
}

void sub_242B54A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242B54BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = (void *)(v13 + 78512);
  uint64_t v15 = (_DWORD *)(v13 + 68140);
  uint64_t v16 = (void *)(v13 + 39320);
  uint64_t v17 = (int *)MEMORY[0x263F4B188];
  if (a5)
  {
    uint64_t v18 = (void *)(a5 + (int)*MEMORY[0x263F4B188]);
    uint64_t v20 = v18[2];
    uint64_t v19 = v18[3];
    unint64_t v21 = v18[1];
    *(void *)(v13 + 86256) = v21;
    *(void *)(v13 + 88336) = v19;
    *(void *)(v13 + 39856) = v21 + a6;
    *(void *)(v13 + 40376) = (v20 & 0xFFFFFFFFFFFFFFLL) - a6;
    *uint64_t v16 = v19 + a6;
    *uint64_t v15 = v20;
    *(_DWORD *)(v13 + 68400) = v20;
    *(_DWORD *)(v13 + 68660) = v21 >> 8;
    *uint64_t v14 = v18;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v13 + 1592), a5, 0, 0x29u);
    if (*(void *)(v13 + 1480)) {
      MTLResourceListAddResource();
    }
  }
  else
  {
    *uint64_t v14 = 0;
    *(void *)(v13 + 39856) = 0;
    *(void *)(v13 + 40376) = 0;
    *uint64_t v16 = 0;
    *(void *)(v13 + 86256) = 0;
    *(void *)(v13 + 88336) = 0;
    *uint64_t v15 = 0;
    *(_DWORD *)(v13 + 68400) = 0;
  }
  *(void *)(v13 + 90088) |= 0x20000000000uLL;
  *(void *)(v13 + 90136) |= 0x20000000000uLL;
  *(void *)(v13 + 90472) |= 0xC0uLL;
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = (void *)(v22 + 78496);
  uint64_t v24 = (_DWORD *)(v22 + 68132);
  uint64_t v25 = (void *)(v22 + 39304);
  if (a3)
  {
    uint64_t v26 = (void *)(a3 + *v17);
    uint64_t v28 = v26[2];
    uint64_t v27 = v26[3];
    unint64_t v29 = v26[1];
    *(void *)(v22 + 86240) = v29;
    *(void *)(v22 + 88320) = v27;
    *(void *)(v22 + 39840) = v29 + a4;
    *(void *)(v22 + 40360) = (v28 & 0xFFFFFFFFFFFFFFLL) - a4;
    uint64_t v30 = v27 + a4;
  }
  else
  {
    a3 = *(void *)(a1 + 80);
    if (!a3)
    {
      *uint64_t v23 = 0;
      *(void *)(v22 + 39840) = 0;
      *(void *)(v22 + 40360) = 0;
      *uint64_t v25 = 0;
      *(void *)(v22 + 86240) = 0;
      *(void *)(v22 + 88320) = 0;
      *uint64_t v24 = 0;
      *(_DWORD *)(v22 + 68392) = 0;
      goto LABEL_12;
    }
    uint64_t v26 = (void *)(a3 + *v17);
    uint64_t v28 = v26[2];
    uint64_t v30 = v26[3];
    unint64_t v29 = v26[1];
    *(void *)(v22 + 86240) = v29;
    *(void *)(v22 + 88320) = v30;
    *(void *)(v22 + 39840) = v29;
    *(void *)(v22 + 40360) = v28 & 0xFFFFFFFFFFFFFFLL;
  }
  *uint64_t v25 = v30;
  *uint64_t v24 = v28;
  *(_DWORD *)(v22 + 68392) = v28;
  *(_DWORD *)(v22 + 68652) = v29 >> 8;
  *uint64_t v23 = v26;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v22 + 1592), a3, 0, 0x27u);
  if (*(void *)(v22 + 1480)) {
    MTLResourceListAddResource();
  }
LABEL_12:
  *(void *)(v22 + 90088) |= 0x8000000000uLL;
  *(void *)(v22 + 90136) |= 0x8000000000uLL;
  *(void *)(v22 + 90472) |= 0xC0uLL;
  uint64_t v31 = *(void *)(a1 + 8);
  uint64_t v32 = v31 + 38496;
  uint64_t v33 = *(void *)(a1 + 104);
  int v34 = *(_DWORD *)(a1 + 100);
  int v35 = *(_DWORD *)(v33 + 3736);
  if (v35 == 1)
  {
    BOOL v36 = v34 == 0;
    unsigned int v37 = 24;
    int v38 = 12;
  }
  else
  {
    if (v35)
    {
      unsigned int v37 = 0;
      goto LABEL_20;
    }
    BOOL v36 = v34 == 0;
    unsigned int v37 = 16;
    int v38 = 8;
  }
  if (v36) {
    unsigned int v37 = v38;
  }
LABEL_20:
  unsigned int v39 = *(_DWORD *)(v33 + 3740);
  BOOL v40 = v39 >= 2;
  unsigned int v41 = v39 - 2;
  if (v40)
  {
    if (v41 > 1) {
      goto LABEL_25;
    }
    int v42 = *(_DWORD *)(a1 + 44) / v37;
  }
  else
  {
    int v42 = 0;
  }
  *(_DWORD *)(v31 + 67788) = v42;
LABEL_25:
  if (((*(void *)(*(void *)(v31 + 38960) + 2024) | *(void *)(*(void *)(v31 + 38960) + 1976)) & 0x700000000000) == 0) {
    goto LABEL_32;
  }
  uint64_t v43 = (uint64_t *)(v31 + 78536);
  *(void *)(v31 + 90088) |= 0x700000000000uLL;
  *(void *)(v31 + 90472) |= 0x40uLL;
  uint64_t v44 = a7 + *v17;
  uint64_t v45 = *(void *)(v44 + 8) + a8;
  *(void *)(v31 + 39888) = v45 + 12;
  *(void *)(v31 + 40408) = (*(void *)(v44 + 16) & 0xFFFFFFFFFFFFFFLL) - a8 - 12;
  *(void *)(v31 + 78544) = v44;
  if (!*(unsigned char *)v32)
  {
    uint64_t v46 = *(_DWORD **)(v31 + 160);
    uint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) > *(void *)(v31 + 152))
    {
      uint64_t v61 = v31;
      int v62 = AGX::DataBufferAllocator<34ul>::growNoInline(v31 + 16, 3, 0);
      uint64_t v31 = v61;
      uint64_t v46 = *(_DWORD **)(v61 + 160);
      if (!v62) {
        goto LABEL_30;
      }
      uint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) > *(void *)(v61 + 152)) {
        abort();
      }
    }
    *(void *)(v31 + 168) = v47;
LABEL_30:
    unint64_t v48 = (char *)v46 + *(void *)(v31 + 176);
    *uint64_t v46 = 0;
    *(void *)(v31 + 160) = v46 + 1;
    *(void *)(v32 + 1384) = v48;
    *(void *)(v32 + 1904) = 1;
    uint64_t v44 = *(void *)(*(void *)(v31 + 40) + 224) + *v17;
    goto LABEL_31;
  }
  *(void *)(v31 + 39880) = v45 + 8;
  *(void *)(v31 + 40400) = (*(void *)(v44 + 16) & 0xFFFFFFFFFFFFFFLL) - a8 - 8;
LABEL_31:
  *uint64_t v43 = v44;
  uint64_t v31 = *(void *)(a1 + 8);
LABEL_32:
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v31, 3);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 38960), *(void *)(*(void *)(a1 + 8) + 38968), *(void *)(a1 + 8) + 38992, *(void *)(a1 + 8) + 49184, *(void *)(a1 + 8) + 90088, 0);
  uint64_t v49 = *(void *)(a1 + 8);
  *(unsigned char *)(v49 + 1544) = 0;
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(unsigned char *)(a1 + 68)) {
      float v50 = *(float *)(a1 + 72);
    }
    else {
      float v50 = 1.0;
    }
    int v51 = HIWORD(LODWORD(v50)) & 0x8000;
    float v52 = fabsf(v50);
    if (v52 >= 65520.0)
    {
      LOWORD(v51) = v51 | 0x7C00;
    }
    else if (v52 > 0.000000029802)
    {
      if (v52 >= 0.000000089407)
      {
        if (v52 >= 2.351e-38) {
          v51 |= COERCE_UNSIGNED_INT((float)((float)(v52 + COERCE_FLOAT(COERCE_UNSIGNED_INT(v50 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(v50 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13;
        }
        else {
          v51 |= vcvts_n_u32_f32(v52, 0x18uLL);
        }
      }
      else
      {
        LOWORD(v51) = v51 | 1;
      }
    }
    uint64_t v53 = *(void *)(a1 + 24);
    uint64_t v54 = *(void *)(v53 + 48);
    *(void *)uint64_t v54 = ((unint64_t)((((*(_DWORD *)(a1 + 64) - (*(_DWORD *)(a1 + 48) == 2)) << 23) + 528482304) & 0x1F800000 | (*(_DWORD *)(a1 + 48) << 30) | ((*(_DWORD *)(a1 + 52) & 1) << 29) | (*(unsigned __int8 *)(*(void *)(a1 + 104) + 3749) << 16) | ((*(_DWORD *)(a1 + 56) & 3) << 17) | ((*(_DWORD *)(a1 + 100) & 1) << 19) | ((*(_DWORD *)(*(void *)(a1 + 104) + 3736) & 1) << 20) | 0x200000u) << 32) | 0x40000090;
    *(_DWORD *)(v54 + 8) = (unsigned __int16)v51;
    *(void *)(v53 + 48) = v54 + 12;
    uint64_t v49 = *(void *)(a1 + 8);
  }
  uint64_t v55 = *(void *)(a7 + *v17 + 8);
  if (*(void *)(a1 + 88) != a7)
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v49 + 1592), a7, 65);
    IOGPUResourceListAddResource();
    uint64_t v49 = *(void *)(a1 + 8);
    if (*(void *)(v49 + 1480))
    {
      MTLResourceListAddResource();
      uint64_t v49 = *(void *)(a1 + 8);
    }
    *(void *)(a1 + 88) = a7;
  }
  if ((*(unsigned char *)(a1 + 112) & 2) != 0)
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v49 + 1592), *(void *)(a1 + 80), 1);
    IOGPUResourceListAddResource();
    uint64_t v49 = *(void *)(a1 + 8);
  }
  uint64_t v57 = *(void *)(a1 + 24);
  uint64_t v56 = *(void *)(a1 + 32);
  int v58 = (*(_DWORD *)(a1 + 44) >> 2) & 0x7FFFF;
  int v59 = *(_DWORD *)(a1 + 40) - 1;
  int32x4_t v60 = *(unsigned int **)(v57 + 48);
  *int32x4_t v60 = BYTE4(v56) | 0xB4300C00;
  v60[1] = v56;
  v60[2] = (unsigned __int16)((unint64_t)(v55 + a8) >> 32);
  v60[3] = (v55 + a8) & 0xFFFFFFFC;
  v60[4] = v58;
  v60[5] = v59;
  v60[6] = BYTE5(v56);
  *(void *)(v57 + 48) = v60 + 7;
  ++*(_DWORD *)(v49 + 1524);
  *(_DWORD *)(a1 + 112) = 0;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexProgramBuffer(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v7 = result;
  uint64_t v8 = (void *)(result + 8 * a4);
  if (a4 <= 0x22) {
    v8[10671] = 0;
  }
  uint64_t v9 = (_DWORD *)(result + 4 * a4);
  if (!a2)
  {
    v8[9773] = 0;
    v8[4941] = 0;
    v8[5006] = 0;
    v8[4874] = 0;
    v8[10741] = 0;
    v8[11001] = 0;
    v9[16994] = 0;
    v9[17059] = 0;
    if (a4 > 0x1E) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v10 = (int *)MEMORY[0x263F4B188];
  uint64_t v11 = a2 + (int)*MEMORY[0x263F4B188];
  unint64_t v12 = *(void *)(v11 + 8);
  uint64_t v15 = v11 + 16;
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = *(void *)(v15 + 8);
  v8[10741] = v12;
  v8[11001] = v14;
  v8[4941] = v12 + a3;
  v8[5006] = (v13 & 0xFFFFFFFFFFFFFFLL) - a3;
  v8[4874] = v14 + a3;
  v9[16994] = v13;
  v9[17059] = v13;
  v9[17124] = v12 >> 8;
  v8[9773] = a2 + *v10;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 1592), a2, 0, a4);
  uint64_t result = *(void *)(v7 + 1480);
  if (result) {
    uint64_t result = MTLResourceListAddResource();
  }
  if (a4 <= 0x1E) {
LABEL_7:
  }
    v9[16963] = a5;
LABEL_8:
  uint64_t v16 = (void *)(v7 + 90088 + 8 * (a4 > 0x3F));
  *v16 |= 1 << a4;
  v16[6] |= 1 << a4;
  *(void *)(v7 + 90472) |= 0xC0uLL;
  return result;
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8 = a3;
  unint64_t v290 = a1 + 90088;
  unint64_t v292 = a1 + 75944;
  unint64_t v11 = a1 + 38088;
  uint64_t v12 = *(void *)(*(void *)(a1 + 1456) + 808);
  uint64_t v283 = (void *)(a1 + 36552);
  *(unsigned char *)(a1 + 36657) = 1;
  int v13 = *(_DWORD *)(v12 + 6064);
  if (*(unsigned char *)(a1 + 38512)) {
    int v14 = 1;
  }
  else {
    int v14 = a7;
  }
  unint64_t v293 = a1 + 38088;
  uint64_t v281 = v12;
  if (*(_DWORD *)(a1 + 38500) != v13)
  {
    int v287 = v14;
    uint64_t v15 = (void *)(a1 + 91136);
    *(_DWORD *)(a1 + 38500) = v13;
    *(void *)&long long v306 = a1 + 39904;
    *((void *)&v306 + 1) = a1 + 78560;
    unint64_t v307 = a1 + 39912;
    unint64_t v308 = a1 + 78568;
    unint64_t v309 = a1 + 39936;
    unint64_t v310 = a1 + 78592;
    if (AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::addToResourceList(v12 + 6072, (uint64_t)&v306))
    {
      if (v287)
      {
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
        IOGPUResourceListAddResource();
      }
      uint64_t v236 = *(void *)v290;
      uint64_t v237 = *(void *)(v290 + 48);
      uint64_t v238 = *(void *)(v290 + 288);
      uint64_t v239 = *(void *)(v290 + 336);
      *(_OWORD *)(a1 + 50096) = *(_OWORD *)(a1 + 39904);
      *(_OWORD *)(v292 + 3136) = *(_OWORD *)(v292 + 2616);
      *(void *)(v293 + 12040) = *(void *)(v293 + 1848);
      *(void *)(v292 + 3168) = *(void *)(v292 + 2648);
      *(void *)unint64_t v290 = v236 | 0x9800000000000;
      *(void *)(v290 + 48) = v237 | 0x9800000000000;
      *(void *)(v290 + 288) = v238 | 0x9800000000000;
      *(void *)(v290 + 336) = v239 | 0x9800000000000;
      *(void *)(a6 + 384) |= 0x30000000C0uLL;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6448));
    uint64_t v16 = (int *)MEMORY[0x263F4B188];
    uint64_t v17 = (int)*MEMORY[0x263F4B188];
    uint64_t v18 = *(void *)(v12 + 6416) + v17;
    uint64_t v19 = *(void *)(v18 + 8);
    if (*v15 == v19
      && ((*(void *)(v18 + 40) ^ *(void *)(*(void *)(a1 + 91144) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6448));
      uint64_t v8 = a3;
      unint64_t v11 = v293;
    }
    else
    {
      *uint64_t v15 = v19;
      *(void *)(a1 + 91144) = *(void *)(v12 + 6416) + v17;
      MTLResourceListAddResource();
      uint64_t v8 = a3;
      unint64_t v11 = v293;
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6448));
      IOGPUResourceListAddResource();
    }
    **(void **)(v290 + 1040) = *v15;
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6384));
    uint64_t v20 = *v16;
    uint64_t v21 = *(void *)(v12 + 6352) + v20;
    uint64_t v22 = *(void *)(v21 + 8);
    if (*(void *)(a1 + 91152) == v22
      && ((*(void *)(v21 + 40) ^ *(void *)(*(void *)(a1 + 91160) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6384));
    }
    else
    {
      *(void *)(a1 + 91152) = v22;
      *(void *)(a1 + 91160) = *(void *)(v12 + 6352) + v20;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6384));
      IOGPUResourceListAddResource();
    }
    *(void *)(*(void *)(v290 + 1040) + 8) = *(void *)(a1 + 91152);
    uint64_t v23 = *(void *)(v290 + 472);
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 40));
    uint64_t v24 = *v16;
    uint64_t v25 = *(void *)(v23 + 8) + v24;
    uint64_t v26 = *(void *)(v25 + 8);
    if (*(void *)(v11 + 1880) == v26
      && ((*(void *)(v25 + 40) ^ *(void *)(*(void *)(v292 + 2680) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
      unint64_t v27 = v290;
      int v14 = v287;
    }
    else
    {
      *(void *)(v11 + 1880) = v26;
      *(void *)(v292 + 2680) = *(void *)(v23 + 8) + v24;
      MTLResourceListAddResource();
      int v14 = v287;
      os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 40));
      if (v287) {
        IOGPUResourceListAddResource();
      }
      *(void *)(v11 + 12072) = *(void *)(v11 + 1880);
      *(void *)(v292 + 3200) = *(void *)(v292 + 2680);
      unint64_t v27 = v290;
      *(void *)v290 |= 0x80000000000000uLL;
      *(void *)(v290 + 48) |= 0x80000000000000uLL;
      *(void *)(v290 + 288) |= 0x80000000000000uLL;
      *(void *)(v290 + 336) |= 0x80000000000000uLL;
      *(void *)(a6 + 384) |= 0x30000000C0uLL;
    }
    uint64_t v28 = *(void *)(v27 + 464);
    os_unfair_lock_lock((os_unfair_lock_t)(v28 + 40));
    uint64_t v29 = *v16;
    uint64_t v30 = *(void *)(v28 + 8) + v29;
    uint64_t v31 = *(void *)(v30 + 8);
    if (*(void *)(v11 + 1896) == v31
      && ((*(void *)(v30 + 40) ^ *(void *)(*(void *)(v292 + 2696) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
      uint64_t v12 = v281;
    }
    else
    {
      *(void *)(v11 + 1896) = v31;
      *(void *)(v292 + 2696) = *(void *)(v28 + 8) + v29;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 40));
      uint64_t v12 = v281;
      if (v14) {
        IOGPUResourceListAddResource();
      }
      *(void *)(v11 + 12088) = *(void *)(v11 + 1896);
      *(void *)(v292 + 3216) = *(void *)(v292 + 2696);
      *(void *)v290 |= 0x200000000000000uLL;
      *(void *)(v290 + 48) |= 0x200000000000000uLL;
      *(void *)(v290 + 288) |= 0x200000000000000uLL;
      *(void *)(v290 + 336) |= 0x200000000000000uLL;
      *(void *)(a6 + 384) |= 0x30000000C0uLL;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6256));
    uint64_t v32 = *v16;
    uint64_t v33 = *(void *)(v12 + 6224) + v32;
    uint64_t v34 = *(void *)(v33 + 8);
    if (*(void *)(v11 + 1872) == v34
      && ((*(void *)(v33 + 40) ^ *(void *)(*(void *)(v292 + 2672) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6256));
    }
    else
    {
      *(void *)(v11 + 1872) = v34;
      *(void *)(v292 + 2672) = *(void *)(v12 + 6224) + v32;
      MTLResourceListAddResource();
      os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 6256));
      if (v14) {
        IOGPUResourceListAddResource();
      }
      *(void *)(v11 + 12064) = *(void *)(v11 + 1872);
      *(void *)(v292 + 3192) = *(void *)(v292 + 2672);
      *(void *)v290 |= 0x40000000000000uLL;
      *(void *)(v290 + 48) |= 0x40000000000000uLL;
      *(void *)(v290 + 288) |= 0x40000000000000uLL;
      *(void *)(v290 + 336) |= 0x40000000000000uLL;
      *(void *)(a6 + 384) |= 0x30000000C0uLL;
    }
  }
  int v35 = *(_DWORD *)(v12 + 6196);
  if (v35) {
    int v36 = v35 + 1;
  }
  else {
    int v36 = 0;
  }
  unsigned int v37 = (os_unfair_lock_s *)v12;
  if (*(_DWORD *)(v11 + 416) != v36)
  {
    *(_DWORD *)(v11 + 416) = v36;
    os_unfair_lock_lock((os_unfair_lock_t)(v12 + 6192));
    uint64_t v38 = (int)*MEMORY[0x263F4B188];
    uint64_t v39 = *(void *)(v12 + 6160) + v38;
    uint64_t v40 = *(void *)(v39 + 8);
    if (*(void *)(v11 + 1856) == v40
      && ((*(void *)(v39 + 40) ^ *(void *)(*(void *)(v292 + 2656) + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
    {
      int v41 = 0;
    }
    else
    {
      *(void *)(v11 + 1856) = v40;
      *(void *)(v292 + 2656) = *(void *)(v12 + 6160) + v38;
      MTLResourceListAddResource();
      int v41 = 1;
    }
    os_unfair_lock_unlock(v37 + 1548);
    uint64_t v42 = *(void *)(v11 + 864);
    *(void *)(v42 + 1696) = *(void *)(v11 + 1856);
    int v43 = *(_DWORD *)(*(void *)(*(void *)(a1 + 1456) + 808) + 6196);
    int v44 = v43 ? v43 + 1 : 0;
    *(_DWORD *)(v42 + 1704) = v44;
    unsigned int v37 = (os_unfair_lock_s *)v281;
    if (v41)
    {
      if (v14) {
        IOGPUResourceListAddResource();
      }
      *(void *)(v11 + 12048) = *(void *)(v11 + 1856);
      *(void *)(v292 + 3176) = *(void *)(v292 + 2656);
      *(void *)v290 |= 0x10000000000000uLL;
      *(void *)(v290 + 48) |= 0x10000000000000uLL;
      *(void *)(v290 + 288) |= 0x10000000000000uLL;
      *(void *)(v290 + 336) |= 0x10000000000000uLL;
      *(void *)(a6 + 384) |= 0x30000000C0uLL;
      unsigned int v37 = (os_unfair_lock_s *)v281;
    }
  }
  uint32_t os_unfair_lock_opaque = v37[1294]._os_unfair_lock_opaque;
  if (*(_DWORD *)(v11 + 420) != os_unfair_lock_opaque)
  {
    *(_DWORD *)(v293 + 420) = os_unfair_lock_opaque;
    uint64_t v46 = *(void *)(*(void *)(a1 + 1456) + 808);
    uint64_t v47 = *(void **)(v46 + 5688);
    if (v47)
    {
      do
      {
        IOGPUResourceListAddResource();
        uint64_t v47 = (void *)*v47;
      }
      while (v47);
      uint64_t v46 = *(void *)(*(void *)(a1 + 1456) + 808);
    }
    for (unint64_t i = *(void **)(v46 + 5520); i; unint64_t i = (void *)*i)
      IOGPUResourceListAddResource();
  }
  unint64_t v49 = v293;
  if (v8)
  {
    uint64_t v50 = *(void *)(v293 + 864);
    if (!*(_DWORD *)(v50 + 1308))
    {
      BOOL v51 = *(_OWORD *)(v8 + 2024) != 0 || *(unsigned char *)(v8 + 1656) != 0;
      *(_DWORD *)(v50 + 1308) = v51;
    }
  }
  uint64_t v52 = *(void *)(v290 + 480);
  uint64_t v288 = a2;
  if (v52 && *(unsigned char *)(*(void *)(v52 + 64) + 24744))
  {
    unint64_t v53 = *(void *)(a1 + 736) + 952;
    if (v53 > *(void *)(a1 + 728))
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 21, 0))
      {
        unint64_t v240 = *(void *)(a1 + 736) + 952;
        if (v240 > *(void *)(a1 + 728)) {
          goto LABEL_387;
        }
        *(void *)(a1 + 744) = v240;
        AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace((void *)(a1 + 16), *(void *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7944) + 8));
        if (!*(_DWORD *)(v293 + 480))
        {
          __n128 v241 = *(unsigned int **)(v293 + 464);
          if (v241)
          {
            uint64_t v242 = *(void *)(v293 + 488);
            *__n128 v241 = BYTE4(v242) | 0x80000000;
            v241[1] = v242;
            *(void *)(v293 + 464) = 0;
            *(void *)(v293 + 488) = 0;
            ++*(_DWORD *)(a1 + 1536);
          }
        }
        unsigned int v243 = *(_DWORD *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7944) + 8) + 2272);
        do
        {
          v243 &= ~(1 << __clz(__rbit32(v243)));
          IOGPUResourceListAddResource();
        }
        while (v243);
        unint64_t v49 = v293;
        *(_DWORD *)(v293 + 480) = 0;
        *(void *)(v293 + 464) = *(void *)(a1 + 64);
        *(void *)(v293 + 472) = AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVRRPatchDraw(a1);
        *(void *)(v293 + 488) = *(void *)(a1 + 80) + *(void *)(a1 + 64);
        uint64_t v8 = a3;
      }
    }
    else
    {
      *(void *)(a1 + 744) = v53;
    }
  }
  uint64_t v54 = *(void *)(v49 + 888);
  if (v54)
  {
    if (*(unsigned char *)(v54 + 1452)) {
      *(unsigned char *)(*(void *)(v49 + 864) + 1300) |= *(unsigned char *)(a1 + 1506);
    }
    if (*(unsigned char *)(v54 + 1164)) {
      *(unsigned char *)(*(void *)(v49 + 864) + 468) |= *(unsigned char *)(a1 + 1506);
    }
  }
  uint64_t v55 = *(void *)(a6 + 384);
  if (v8)
  {
    if (a2)
    {
LABEL_61:
      uint64_t v56 = a1 + 1752;
      uint64_t v276 = (char ***)(a1 + 1752);
      uint64_t v57 = a2;
      goto LABEL_64;
    }
  }
  else
  {
    v55 &= 0xFFFFFF8FFFFFFFFDLL;
    *(void *)(a6 + 384) = v55;
    if (a2) {
      goto LABEL_61;
    }
  }
  v55 &= 0xFFFFFFFFFFFFFE3ELL;
  *(void *)(a6 + 384) = v55;
  uint64_t v56 = a1 + 1752;
  uint64_t v276 = (char ***)(a1 + 1752);
  uint64_t v57 = 0;
LABEL_64:
  uint64_t ProgramVariantArgumentDirtyBits = AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::extractProgramVariantArgumentDirtyBits(v56, v57, v8, a6);
  uint64_t v62 = v55 | ProgramVariantArgumentDirtyBits;
  uint64_t v305 = v55 | ProgramVariantArgumentDirtyBits;
  if (v8)
  {
    uint64_t v285 = v55 | ProgramVariantArgumentDirtyBits;
    if (*(unsigned char *)(v8 + 3380)) {
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v285 = v55 | ProgramVariantArgumentDirtyBits;
  }
  if (a7)
  {
LABEL_69:
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDepthRanges(a1, v62);
    uint64_t v62 = v285;
  }
  if ((v62 & 0x80) != 0 && (a7 & 1) == 0)
  {
    unint64_t v63 = *(void *)(a6 + 48) & *(void *)(a2 + 1944);
    unint64_t v303 = *(void *)(a6 + 56) & *(void *)(a2 + 1952);
    uint64_t v304 = v63;
    long long v306 = *(_OWORD *)(a2 + 1056);
    while (1)
    {
      if (v63)
      {
        unsigned int v64 = __clz(__rbit64(v63));
        int v65 = (unint64_t *)&v304;
        unsigned int v66 = v64;
      }
      else
      {
        unint64_t v63 = v303;
        if (!v303)
        {
          uint64_t v8 = a3;
          uint64_t v62 = v285;
          unint64_t v49 = v293;
          break;
        }
        unsigned int v64 = __clz(__rbit64(v303));
        unsigned int v66 = v64 | 0x40;
        int v65 = &v303;
      }
      *int v65 = v63 & ~(1 << v64);
      if (*(void *)(a1 + 8 * v66 + 78184))
      {
        if ((*(void *)((unint64_t)&v306 | (8 * (v66 > 0x3F))) >> v66)) {
          int v67 = 3;
        }
        else {
          int v67 = 1;
        }
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindVertexBufferResource(a1, v66, v67, 1);
      }
      unint64_t v63 = v304;
    }
  }
  if ((v62 & 0x100) != 0)
  {
    unint64_t v68 = *(void *)(a2 + 1960) & *(void *)(a1 + 66560) & *(void *)(a6 + 64);
    unint64_t v303 = *(void *)(a2 + 1968) & *(void *)(a1 + 66568) & *(void *)(a6 + 72);
    uint64_t v304 = v68;
    uint64_t v69 = *(void *)(a2 + 1080);
    uint64_t v278 = *(void *)(a2 + 1072);
    *(void *)&long long v306 = v278;
    *((void *)&v306 + 1) = v69;
    uint64_t v271 = *(void *)(a1 + 66584);
    uint64_t v273 = *(void *)(a1 + 66576);
    while (1)
    {
      if (v68)
      {
        unsigned int v70 = __clz(__rbit64(v68));
        uint64_t v71 = (unint64_t *)&v304;
        unsigned int v72 = v70;
      }
      else
      {
        unint64_t v68 = v303;
        if (!v303)
        {
          unint64_t v49 = v293;
          *(unsigned char *)(*(void *)(v293 + 864) + 468) |= (v273 & v278 | v69 & v271) != 0;
          uint64_t v8 = a3;
          uint64_t v62 = v285;
          break;
        }
        unsigned int v70 = __clz(__rbit64(v303));
        unsigned int v72 = v70 | 0x40;
        uint64_t v71 = &v303;
      }
      *uint64_t v71 = v68 & ~(1 << v70);
      if ((*((void *)&v306 + (v72 > 0x3F)) >> v72)) {
        int v73 = 3;
      }
      else {
        int v73 = 1;
      }
      int v74 = 3 * v72;
      unint64_t v75 = a1 + 24 * v72;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), *(uint64_t **)(v75 + 79224), 3u, v72, v73);
      if (*(void *)(v75 + 79224))
      {
        IOGPUResourceListAddResource();
        if (*(void *)(a1 + 8 * (v74 + 1) + 79224)) {
          IOGPUResourceListAddResource();
        }
        if (*(void *)(a1 + 8 * (v74 + 2) + 79224)) {
          IOGPUResourceListAddResource();
        }
      }
      unint64_t v68 = v304;
    }
  }
  if ((v62 & 0x2000000000) != 0 && (a7 & 1) == 0)
  {
    unint64_t v76 = *(void *)(a6 + 336) & *(void *)(v8 + 1944);
    unint64_t v303 = *(void *)(a6 + 344) & *(void *)(v8 + 1952);
    uint64_t v304 = v76;
    long long v306 = *(_OWORD *)(v8 + 1056);
    while (1)
    {
      if (v76)
      {
        unsigned int v77 = __clz(__rbit64(v76));
        int64x2_t v78 = (unint64_t *)&v304;
        unsigned int v79 = v77;
      }
      else
      {
        unint64_t v76 = v303;
        if (!v303)
        {
          uint64_t v8 = a3;
          uint64_t v62 = v285;
          unint64_t v49 = v293;
          break;
        }
        unsigned int v77 = __clz(__rbit64(v303));
        unsigned int v79 = v77 | 0x40;
        int64x2_t v78 = &v303;
      }
      *int64x2_t v78 = v76 & ~(1 << v77);
      if (*(void *)(a1 + 8 * v79 + 78704)) {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentBufferResource(a1, v79, (*(void *)((unint64_t)&v306 | (8 * (v79 > 0x3F))) >> v79) & 1, 1);
      }
      unint64_t v76 = v304;
    }
  }
  if ((v62 & 0x4000000000) != 0)
  {
    unint64_t v80 = *(void *)(v8 + 1960) & *(void *)v292 & *(void *)(a6 + 352);
    unint64_t v303 = *(void *)(v8 + 1968) & *(void *)(v292 + 8) & *(void *)(a6 + 360);
    uint64_t v304 = v80;
    uint64_t v81 = *(void *)(v8 + 1080);
    uint64_t v279 = *(void *)(v8 + 1072);
    *(void *)&long long v306 = v279;
    *((void *)&v306 + 1) = v81;
    uint64_t v270 = *(void *)(v292 + 16);
    uint64_t v272 = *(void *)(v292 + 24);
    uint64_t v274 = v81;
    while (1)
    {
      if (v80)
      {
        unsigned int v82 = __clz(__rbit64(v80));
        uint64_t v83 = (unint64_t *)&v304;
        unsigned int v84 = v82;
      }
      else
      {
        unint64_t v80 = v303;
        if (!v303)
        {
          unint64_t v49 = v293;
          *(unsigned char *)(*(void *)(v293 + 864) + 1300) |= (v270 & v279 | v274 & v272) != 0;
          uint64_t v8 = a3;
          uint64_t v62 = v285;
          break;
        }
        unsigned int v82 = __clz(__rbit64(v303));
        unsigned int v84 = v82 | 0x40;
        uint64_t v83 = &v303;
      }
      *uint64_t v83 = v80 & ~(1 << v82);
      if ((*((void *)&v306 + (v84 > 0x3F)) >> v84)) {
        int v85 = 12;
      }
      else {
        int v85 = 4;
      }
      int v86 = 3 * v84;
      unint64_t v87 = a1 + 24 * v84;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 1592), *(uint64_t **)(v87 + 82296), 4u, v84, v85);
      if (*(void *)(v87 + 82296))
      {
        IOGPUResourceListAddResource();
        if (*(void *)(a1 + 8 * (v86 + 1) + 82296)) {
          IOGPUResourceListAddResource();
        }
        if (*(void *)(a1 + 8 * (v86 + 2) + 82296)) {
          IOGPUResourceListAddResource();
        }
      }
      unint64_t v80 = v304;
    }
  }
  int v88 = *(_DWORD *)(a6 + 392);
  if ((v88 & 1) != 0 && *(unsigned char *)(v49 + 552)) {
    *(_DWORD *)(a6 + 392) = v88 & 0xFFFFFFFE;
  }
  *(void *)(a6 + 384) = 0;
  int8x16_t v89 = 0uLL;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  long long v90 = (void *)(a1 + 16);
  uint64_t v91 = *(unint64_t **)(a1 + 64);
  if ((unint64_t)(v91 + 23) > *(void *)(a1 + 56))
  {
    int v223 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 0, 0);
    uint64_t v62 = v285;
    unint64_t v92 = 0x268D57000;
    if (v223)
    {
      uint64_t v224 = *(void *)(a1 + 64);
      if ((unint64_t)(v224 + 184) > *(void *)(a1 + 56)) {
        goto LABEL_387;
      }
      *(void *)(a1 + 72) = v224 + 184;
      *uint64_t v91 = __ROR8__(*(void *)(a1 + 80) + v224, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
      uint64_t v62 = v285;
    }
  }
  else
  {
    *(void *)(a1 + 72) = v91 + 23;
    unint64_t v92 = 0x268D57000uLL;
  }
  if (a2)
  {
    uint64_t v93 = *(unsigned int *)(a2 + 608) + 31;
    uint64_t v94 = *(void *)(a1 + 384);
    if (v94) {
      goto LABEL_134;
    }
  }
  else
  {
    uint64_t v93 = 31;
    uint64_t v94 = *(void *)(a1 + 384);
    if (v94) {
      goto LABEL_134;
    }
  }
  if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0)) {
    goto LABEL_387;
  }
  uint64_t v94 = *(void *)(a1 + 384);
  uint64_t v62 = v285;
LABEL_134:
  unint64_t v95 = v94 + v93;
  if (v95 <= *(void *)(a1 + 376))
  {
LABEL_135:
    *(void *)(a1 + 392) = v95;
    goto LABEL_136;
  }
  int v225 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 10, 0);
  uint64_t v62 = v285;
  if (v225)
  {
    unint64_t v95 = *(void *)(a1 + 384) + v93;
    if (v95 > *(void *)(a1 + 376)) {
      goto LABEL_387;
    }
    goto LABEL_135;
  }
LABEL_136:
  unint64_t v96 = *(void *)(a1 + 1024) + 1156;
  if (v96 <= *(void *)(a1 + 1016))
  {
LABEL_137:
    *(void *)(a1 + 1032) = v96;
    goto LABEL_138;
  }
  int v226 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 30, 0);
  uint64_t v62 = v285;
  if (v226)
  {
    unint64_t v96 = *(void *)(a1 + 1024) + 1156;
    if (v96 > *(void *)(a1 + 1016)) {
      goto LABEL_387;
    }
    goto LABEL_137;
  }
LABEL_138:
  if ((v62 & 0xFE01) == 0) {
    goto LABEL_141;
  }
  uint64_t v97 = (*(_DWORD *)(*(void *)(a2 + 1936) + 8) - **(_DWORD **)(a2 + 1936)) + 63;
  unint64_t v98 = *(void *)(a1 + 224) + v97;
  if (v98 <= *(void *)(a1 + 216)) {
    goto LABEL_140;
  }
  int v230 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 5, 0);
  uint64_t v62 = v285;
  if (v230)
  {
    unint64_t v98 = *(void *)(a1 + 224) + v97;
    if (v98 > *(void *)(a1 + 216)) {
      goto LABEL_387;
    }
LABEL_140:
    *(void *)(a1 + 232) = v98;
  }
LABEL_141:
  if ((v62 & 0xF8000000002) == 0) {
    goto LABEL_146;
  }
  uint64_t v99 = (*(_DWORD *)(*(void *)(v8 + 1936) + 8) - **(_DWORD **)(v8 + 1936)) + 63;
  unint64_t v100 = *(void *)(a1 + 256) + v99;
  if (v100 <= *(void *)(a1 + 248)) {
    goto LABEL_143;
  }
  int v231 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 6, 0);
  uint64_t v62 = v285;
  if (v231)
  {
    unint64_t v100 = *(void *)(a1 + 256) + v99;
    if (v100 > *(void *)(a1 + 248)) {
      goto LABEL_387;
    }
LABEL_143:
    *(void *)(a1 + 264) = v100;
  }
  uint64_t v101 = *(unsigned int *)(v8 + 608) + 31;
  unint64_t v102 = *(void *)(a1 + 416) + v101;
  if (v102 <= *(void *)(a1 + 408))
  {
LABEL_145:
    *(void *)(a1 + 424) = v102;
    goto LABEL_146;
  }
  int v232 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 11, 0);
  uint64_t v62 = v285;
  if (v232)
  {
    unint64_t v102 = *(void *)(a1 + 416) + v101;
    if (v102 > *(void *)(a1 + 408)) {
      goto LABEL_387;
    }
    goto LABEL_145;
  }
LABEL_146:
  unint64_t v103 = *(void *)(a1 + 352) + 8;
  if (v103 <= *(void *)(a1 + 344))
  {
LABEL_147:
    *(void *)(a1 + 360) = v103;
    goto LABEL_148;
  }
  int v227 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 9, 0);
  uint64_t v62 = v285;
  if (v227)
  {
    unint64_t v103 = *(void *)(a1 + 352) + 8;
    if (v103 > *(void *)(a1 + 344)) {
      goto LABEL_387;
    }
    goto LABEL_147;
  }
LABEL_148:
  unint64_t v104 = a1 + 37180;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 1456) + *(int *)(v92 + 2064)) + 5106))
  {
    uint64_t v105 = 16 * *(unsigned int *)(a1 + 38076);
    unint64_t v106 = *(void *)(a1 + 320) + v105;
    if (v106 > *(void *)(a1 + 312))
    {
      int v244 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 8, 1);
      uint64_t v62 = v285;
      if (v244)
      {
        unint64_t v245 = *(void *)(a1 + 320) + v105;
        if (v245 > *(void *)(a1 + 312)) {
          goto LABEL_387;
        }
        *(void *)(a1 + 328) = v245;
        *(void *)(*(void *)(v49 + 864) + 752) = *(void *)(*(void *)(a1 + 40) + 512)
                                                    + *(void *)(*(void *)(a1 + 40) + 536)
                                                    - *(void *)(*(void *)(a1 + 40) + 520);
        uint64_t v62 = v285;
      }
    }
    else
    {
      *(void *)(a1 + 328) = v106;
    }
  }
  unint64_t v107 = v283;
  uint64_t v280 = (void *)(a1 + 16);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 1456) + *(int *)(v92 + 2064)) + 5105))
  {
    uint64_t v108 = *(void *)(a1 + 288);
    if (!v108)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 7, 0)) {
        goto LABEL_387;
      }
      uint64_t v108 = *(void *)(a1 + 288);
      uint64_t v62 = v285;
    }
    unint64_t v109 = v108 + 12;
    if (v109 > *(void *)(a1 + 280))
    {
      int v249 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 7, 1);
      uint64_t v62 = v285;
      if (v249)
      {
        uint64_t v250 = *(void *)(a1 + 288);
        if ((unint64_t)(v250 + 12) > *(void *)(a1 + 280)) {
          goto LABEL_387;
        }
        *(void *)(a1 + 296) = v250 + 12;
        if (!v250) {
          AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v280);
        }
        *(void *)(*(void *)(v293 + 864) + 760) = *(void *)(*(void *)(a1 + 40) + 448)
                                                     + *(void *)(*(void *)(a1 + 40) + 472)
                                                     - *(void *)(*(void *)(a1 + 40) + 456);
        unint64_t v107 = v283;
        uint64_t v8 = a3;
        uint64_t v62 = v285;
        long long v90 = (void *)(a1 + 16);
      }
    }
    else
    {
      *(void *)(a1 + 296) = v109;
    }
  }
  if ((v62 & 0x20000000000000) != 0)
  {
    unint64_t v228 = *(void *)(a1 + 448) + 2;
    if (v228 > *(void *)(a1 + 440))
    {
      int v261 = AGX::DataBufferAllocator<34ul>::growNoInline(v90, 12, 0);
      uint64_t v62 = v285;
      int v110 = 0;
      if (v261)
      {
        unint64_t v262 = *(void *)(a1 + 448) + 2;
        if (v262 > *(void *)(a1 + 440)) {
          goto LABEL_387;
        }
        *(void *)(a1 + 456) = v262;
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace((void *)a1);
        int v110 = 1;
        unint64_t v107 = v283;
        uint64_t v8 = a3;
        uint64_t v62 = v285;
        long long v90 = (void *)(a1 + 16);
      }
    }
    else
    {
      int v110 = 0;
      *(void *)(a1 + 456) = v228;
    }
  }
  else
  {
    int v110 = 0;
  }
  if ((v62 & 0x1C1) != 0 && *(unsigned char *)(a2 + 784))
  {
    if ((v62 & 0x7400) != 0
      || AGX::isIndirectGatherDirty<AGX::HAL200::VertexProgramVariantESLState>((void *)(a2 + 1936), *(void *)v290, *(void *)(v290 + 8), *(void *)(v290 + 16), *(void *)(v290 + 24), *(void *)(v290 + 32), *(void *)(v290 + 40), *(void *)(v290 + 80), *(void *)(v290 + 88)))
    {
      if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1))
      {
        AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace(v90, *(void *)(*(void *)(v281 + 7936) + 8));
        int v112 = 0;
        int v111 = 1;
LABEL_355:
        uint64_t v62 = v285;
        goto LABEL_160;
      }
      int v111 = 1;
    }
    else
    {
      int v111 = 0;
    }
    int v112 = 1;
    goto LABEL_355;
  }
  int v111 = 0;
  int v112 = 1;
LABEL_160:
  if ((v62 & 0x7000000002) != 0
    && *(unsigned char *)(v8 + 784)
    && ((v62 & 0xD0000000000) != 0
     || AGX::isIndirectGatherDirty<AGX::HAL200::VertexProgramVariantESLState>((void *)(v8 + 1936), *(void *)(v290 + 288), *(void *)(v290 + 296), *(void *)(v290 + 304), *(void *)(v290 + 312), *(void *)(v290 + 320), *(void *)(v290 + 328), *(void *)(v290 + 368), *(void *)(v290 + 376))))
  {
    if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1))
    {
      AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace(v90, *(void *)(*(void *)(v281 + 7936) + 8));
      int v113 = 0;
      int v291 = 1;
      if (!*v107) {
        goto LABEL_166;
      }
      goto LABEL_164;
    }
    int v291 = 1;
  }
  else
  {
    int v291 = 0;
  }
  int v113 = 1;
  if (!*v107) {
    goto LABEL_166;
  }
LABEL_164:
  uint64_t v114 = *(void *)(a1 + 72);
  if ((unint64_t)(v114 + 8) > *(void *)(a1 + 56))
  {
    unint64_t v233 = *(unint64_t **)(a1 + 64);
    if (AGX::DataBufferAllocator<34ul>::growNoInline(v90, 0, 0))
    {
      uint64_t v234 = *(void *)(a1 + 64);
      unint64_t v235 = v234 + v114 - (void)v233 + 8;
      if (v235 > *(void *)(a1 + 56)) {
        goto LABEL_387;
      }
      *(void *)(a1 + 72) = v235;
      *unint64_t v233 = __ROR8__(*(void *)(a1 + 80) + v234, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    *(void *)(a1 + 72) = v114 + 8;
  }
LABEL_166:
  char v302 = 0;
  uint64_t v304 = 0xDE876B1A5;
  unint64_t v303 = 4123088130;
  int v300 = -1;
  int v301 = -1;
  unsigned __int8 v299 = 0;
  uint64_t v298 = 0;
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceDepthBiasBufferReserve(a1, (uint64_t)&v305, &v301, &v304, &v302, &v298, v89, v59, v60, v61);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDeviceScissorBufferReserve(a1, (unint64_t *)&v305, &v300, &v303, &v299, &v302, &v298);
  char v115 = v302 | (*(void *)(*(void *)(a1 + 1496) + 520) == 0);
  char v302 = v115;
  int v116 = (unsigned char *)(*(void *)(*(void *)(a1 + 1456) + 808) + 5105);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 1456) + 808) + 5106))
  {
    v115 |= ((*(void *)(a1 + 320) - *(void *)(*(void *)(a1 + 40) + 536)) >> 4) > 0xFFFE;
    char v302 = v115;
  }
  float32x4_t v117 = (unsigned char *)v293;
  if (*v116)
  {
    int v118 = v283;
    if (v115) {
      goto LABEL_270;
    }
LABEL_173:
    if (!*(void *)(*(void *)(a1 + 1496) + 520))
    {
      uint64_t v120 = *(void *)(a1 + 1552) - *(void *)(a1 + 1568);
      *(_DWORD *)(v120 + 12) = 1;
      if ((*(unsigned char *)(v120 + 8) & 4) != 0) {
        **(unsigned char **)(*(void *)a1 + 688) = 1;
      }
    }
    if ((v305 & 0x20000000000000) != 0)
    {
      if (!v115 && ((v110 ^ 1) & 1) == 0)
      {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::finalizeVisibilityClear(a1);
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitVisibilityClear(a1);
      }
      unint64_t v229 = *(_WORD **)(a1 + 448);
      *unint64_t v229 = 2 * *((_WORD *)v117 + 202);
      *(void *)(a1 + 448) = v229 + 1;
      LODWORD(v229) = *((_DWORD *)v117 + 100) + 1;
      *((_DWORD *)v117 + 100) = v229;
      *(_DWORD *)(*((void *)v117 + 48) + 8) = v229;
    }
    if (((v112 | v111 ^ 1) & 1) == 0 && !v115) {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitGPUGather(a1);
    }
    if (((v113 | v291 ^ 1) & 1) == 0 && !v115) {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitGPUGather(a1);
    }
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleScissorUpdates(a1, &v305, v300, v303, v299, v115 != 0);
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::handleDepthBiasUpdates(a1, (uint64_t)&v305, v301, v121, v122, v123, v124);
    uint64_t v125 = v305;
    int v126 = v117[552];
    int v127 = *((_DWORD *)v117 + 140);
    char v128 = v117[564];
    LODWORD(v306) = 0;
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v276, v280, v288, (uint64x2_t *)a4, a1 + 59376, v305, v126, v127, v128, &v306);
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantAndArguments(v276, v280, v8, *((void **)v117 + 111), (uint64x2_t *)a5, a1 + 68760, v125, *((_DWORD *)v117 + 140), v129, v117[564]);
    if ((v125 & 4) != 0)
    {
      uint64_t v130 = *(void *)(a1 + 1024);
      uint64_t v131 = *(void *)(a1 + 1040) + v130;
      *(void *)(a1 + 1024) = v130 + 20;
      long long v132 = *(_OWORD *)(a1 + 37248);
      *(_DWORD *)(v130 + 16) = *(_DWORD *)(a1 + 37264);
      *(_OWORD *)uint64_t v130 = v132;
      int32x2_t v133 = *(unint64_t **)(a1 + 64);
      *int32x2_t v133 = __ROR8__(v131, 32) & 0xFFFFFFFC000000FFLL | 0x500;
      *(void *)(a1 + 64) = v133 + 1;
      if ((v125 & 0x100000000000) == 0)
      {
LABEL_185:
        if ((v125 & 0x1000000000000) == 0) {
          goto LABEL_235;
        }
        goto LABEL_216;
      }
    }
    else if ((v125 & 0x100000000000) == 0)
    {
      goto LABEL_185;
    }
    if (a7)
    {
      unsigned __int8 v134 = atomic_load((unsigned __int8 *)(v281 + 7833));
      unint64_t v135 = v104 + 20;
      if ((v134 & 1) == 0) {
        goto LABEL_202;
      }
    }
    else
    {
      if (!v8)
      {
        unint64_t v135 = v104 + 20;
        goto LABEL_202;
      }
      unint64_t v135 = v104 + 20;
      if (!*(unsigned char *)(v8 + 1050)) {
        goto LABEL_202;
      }
    }
    if ((*(unsigned char *)(v104 + 31) & 7) == 0) {
      *(void *)(*((void *)v117 + 108) + 976) |= 0x10000uLL;
    }
LABEL_202:
    if (*((void *)v117 + 66) == 2)
    {
      float v136 = *((float *)v117 + 135) * 16.0;
      float v137 = 1023.5;
    }
    else
    {
      float v136 = *((float *)v117 + 134) * 16.0;
      float v137 = 256.0;
    }
    float v138 = v137;
    if (v136 <= v137) {
      float v138 = v136;
    }
    unsigned int v139 = v138;
    if (v136 < 0.0) {
      unsigned int v139 = 0;
    }
    if (v139) {
      int v140 = ((v139 << 8) + 261888) & 0x3FF00;
    }
    else {
      int v140 = 0;
    }
    *(_DWORD *)(v104 + 28) = *(_DWORD *)(v104 + 28) & 0xFFFC00FF | v140;
    *(_DWORD *)(v104 + 36) = *(_DWORD *)(v104 + 36) & 0xFFFC00FF | v140;
    int v141 = *(_DWORD *)(v104 + 20);
    int v142 = *(_DWORD *)(v135 + 4);
    int v143 = *(_DWORD *)(v135 + 24);
    long long v296 = *(_OWORD *)(v135 + 8);
    int v297 = v143;
    int v144 = *(_DWORD *)(v104 + 48);
    int v145 = *(_DWORD *)(v104 + 52);
    *(void *)&long long v306 = *(void *)(a1 + 37236);
    DWORD2(v306) = *(_DWORD *)(a1 + 37244);
    int v146 = v117[554];
    if (a7) {
      int v147 = 0x10000000;
    }
    else {
      int v147 = 0;
    }
    unsigned int v148 = v142 & 0xEBFFFFFF | v147 | (((v142 & 0x4000000 | v146) != 0) << 26);
    uint64_t v149 = *(void *)(a1 + 1024);
    uint64_t v150 = *(void *)(a1 + 1040) + v149;
    *(void *)(a1 + 1024) = v149 + 28;
    *(_DWORD *)uint64_t v149 = v141;
    *(_DWORD *)(v149 + 4) = v148;
    *(_DWORD *)(v149 + 24) = v297;
    *(_OWORD *)(v149 + 8) = v296;
    uint64_t v151 = *(unint64_t **)(a1 + 64);
    *uint64_t v151 = __ROR8__(v150, 32) & 0xFFFFFFFC000000FFLL | 0x700;
    *(void *)(a1 + 64) = v151 + 1;
    uint64_t v152 = *(void *)(a1 + 1024);
    uint64_t v153 = *(void *)(a1 + 1040) + v152;
    *(void *)(a1 + 1024) = v152 + 20;
    *(_DWORD *)uint64_t v152 = v144;
    *(_DWORD *)(v152 + 4) = v145 & 0xFBFFFFFF | (((v145 & 0x4000000 | v146) != 0) << 26);
    *(_DWORD *)(v152 + 16) = DWORD2(v306);
    uint64_t v125 = v305;
    *(void *)(v152 + 8) = v306;
    int32x2_t v154 = *(unint64_t **)(a1 + 64);
    *int32x2_t v154 = __ROR8__(v153, 32) & 0xFFFFFFFC000000FFLL | 0x500;
    *(void *)(a1 + 64) = v154 + 1;
    if ((v125 & 0x1000000000000) == 0)
    {
LABEL_235:
      if ((v125 & 0x2000000000000) != 0)
      {
        uint64_t v199 = *(void *)(v104 + 12);
        uint64_t v200 = *((void *)v117 + 111);
        if (v200)
        {
          uint64_t v201 = *(void *)(v200 + 748);
          int v202 = *(_DWORD *)(v200 + 756);
        }
        else
        {
          uint64_t v201 = 0x1E3CE50800410000;
          int v202 = 160;
        }
        uint64_t v203 = *(void *)(a1 + 1024);
        uint64_t v204 = *(void *)(a1 + 1040) + v203;
        *(void *)(a1 + 1024) = v203 + 12;
        *(void *)uint64_t v203 = v201;
        *(_DWORD *)(v203 + 8) = v202;
        int v205 = *(unint64_t **)(a1 + 64);
        *int v205 = __ROR8__(v204, 32) & 0xFFFFFFFC000000FFLL | 0x300;
        *(void *)(a1 + 64) = v205 + 1;
        uint64_t v206 = *(void **)(a1 + 1024);
        int v207 = (char *)v206 + *(void *)(a1 + 1040);
        *(void *)(a1 + 1024) = v206 + 1;
        *uint64_t v206 = v199;
        int v208 = *(unint64_t **)(a1 + 64);
        unint64_t *v208 = __ROR8__(v207, 32) & 0xFFFFFFFC000000FFLL | 0x200;
        *(void *)(a1 + 64) = v208 + 1;
        if ((v125 & 0x4000000000000) == 0)
        {
LABEL_237:
          if (v111) {
            goto LABEL_238;
          }
          goto LABEL_245;
        }
      }
      else if ((v125 & 0x4000000000000) == 0)
      {
        goto LABEL_237;
      }
      uint64_t v209 = *(void *)v104;
      int v210 = *(void **)(a1 + 352);
      int v211 = (char *)v210 + *(void *)(a1 + 368);
      *(void *)(a1 + 352) = v210 + 1;
      void *v210 = v209;
      uint64_t v212 = *(unint64_t **)(a1 + 64);
      *uint64_t v212 = __ROR8__(v211, 32) & 0xFFFFFFFC000000FFLL | 0x200;
      *(void *)(a1 + 64) = v212 + 1;
      if (v111)
      {
LABEL_238:
        uint64_t v192 = *(void *)(v288 + 2432);
        unint64_t v193 = (*(void *)(a1 + 224) + 7) & 0xFFFFFFFFFFFFFFF8;
        int v194 = v193 + *(_DWORD *)(a1 + 240);
        *(void *)(a1 + 224) = v193 + 32;
        long long v195 = *(_OWORD *)(a4 + 1576);
        *(void *)unint64_t v193 = v192;
        *(_OWORD *)(v193 + 8) = v195;
        int v196 = *(_DWORD **)(a1 + 544);
        *int v196 = v194;
        *(void *)(a1 + 544) = v196 + 1;
        LODWORD(v196) = *((_DWORD *)v117 + 112) + 1;
        *((_DWORD *)v117 + 112) = v196;
        *(_DWORD *)(*((void *)v117 + 55) + 8) = v196;
        ++*(_DWORD *)(a1 + 1540);
        int v197 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
        unsigned int v198 = &v197[*(void *)(a1 + 176)];
        *(void *)(a1 + 160) = v197 + 280;
        memcpy(v197, (const void *)(a4 + 536), 0x118uLL);
        *(void *)(v193 + 24) = v198;
        float32x4_t v117 = (unsigned char *)v293;
        if (!v291) {
          return;
        }
        goto LABEL_246;
      }
LABEL_245:
      if (!v291) {
        return;
      }
LABEL_246:
      uint64_t v213 = *(void *)(v8 + 2432);
      unint64_t v214 = (*(void *)(a1 + 224) + 7) & 0xFFFFFFFFFFFFFFF8;
      int v215 = v214 + *(_DWORD *)(a1 + 240);
      *(void *)(a1 + 224) = v214 + 32;
      long long v216 = *(_OWORD *)(a5 + 1576);
      *(void *)unint64_t v214 = v213;
      *(_OWORD *)(v214 + 8) = v216;
      int v217 = *(_DWORD **)(a1 + 544);
      *int v217 = v215;
      *(void *)(a1 + 544) = v217 + 1;
      LODWORD(v217) = *((_DWORD *)v117 + 112) + 1;
      *((_DWORD *)v117 + 112) = v217;
      *(_DWORD *)(*((void *)v117 + 55) + 8) = v217;
      ++*(_DWORD *)(a1 + 1540);
      uint64_t v218 = (char *)((*(void *)(a1 + 160) + 7) & 0xFFFFFFFFFFFFFFF8);
      int v219 = &v218[*(void *)(a1 + 176)];
      *(void *)(a1 + 160) = v218 + 280;
      memcpy(v218, (const void *)(a5 + 536), 0x118uLL);
      *(void *)(v214 + 24) = v219;
      unint64_t v220 = *(void *)(v8 + 2248);
      unint64_t v294 = *(void *)(v8 + 2256);
      for (j = v220; ; unint64_t v220 = j)
      {
        if (v220)
        {
          char v221 = __clz(__rbit64(v220));
          p_unint64_t j = &j;
        }
        else
        {
          unint64_t v220 = v294;
          if (!v294) {
            return;
          }
          char v221 = __clz(__rbit64(v294));
          p_unint64_t j = &v294;
        }
        *p_unint64_t j = v220 & ~(1 << v221);
        IOGPUResourceListAddResource();
      }
    }
LABEL_216:
    uint64_t v155 = 0;
    unint64_t v156 = *((unsigned int *)v118 + 27);
    uint64_t v157 = (unsigned __int16)v156 >> 12;
    uint64_t v158 = ((v156 >> 9) & 0x78) + 10;
    uint64_t v159 = *(void *)(a1 + 1024);
    uint64_t v160 = *(void *)(a1 + 1040);
    *(void *)(a1 + 1024) = v159 + 4 * v158;
    *(_DWORD *)uint64_t v159 = v156;
    uint64_t v161 = (void *)(v159 + 4);
    uint64_t v162 = v157 + 1;
    if (v157 >= 7 && (unint64_t)(v159 - ((void)v118 + 108)) > 0x1F)
    {
      uint64_t v155 = v162 & 0x1C;
      uint64_t v163 = v155;
      int v164 = &v161[v155];
      long long v165 = *((_OWORD *)v118 + 8);
      *(_OWORD *)(v159 + 4) = *((_OWORD *)v118 + 7);
      *(_OWORD *)(v159 + 20) = v165;
      if (v155 != 4)
      {
        long long v166 = *((_OWORD *)v118 + 10);
        *(_OWORD *)(v159 + 36) = *((_OWORD *)v118 + 9);
        *(_OWORD *)(v159 + 52) = v166;
        if (v155 != 8)
        {
          long long v167 = *((_OWORD *)v118 + 12);
          *(_OWORD *)(v159 + 68) = *((_OWORD *)v118 + 11);
          *(_OWORD *)(v159 + 84) = v167;
          if (v155 != 12)
          {
            long long v168 = *((_OWORD *)v118 + 14);
            *(_OWORD *)(v159 + 100) = *((_OWORD *)v118 + 13);
            *(_OWORD *)(v159 + 116) = v168;
          }
        }
      }
      if (v155 == v162)
      {
        uint64_t v169 = (uint64_t)&v161[v163 - 1];
        goto LABEL_228;
      }
      uint64_t v161 = (void *)((char *)v161 + v163 * 8);
    }
    signed int v170 = (uint64_t *)(a1 + 8 * v155 + 36664);
    uint64_t v171 = ((unsigned __int16)v156 >> 12) - v155 + 1;
    int v164 = v161;
    do
    {
      uint64_t v172 = *v170++;
      *v164++ = v172;
      --v171;
    }
    while (v171);
    uint64_t v169 = (uint64_t)(v164 - 1);
LABEL_228:
    uint64_t v173 = v169 + 12;
    *(_DWORD *)int v164 = *((_DWORD *)v118 + 60);
    unint64_t v174 = a1 + 36796;
    do
    {
      long long v175 = *(_OWORD *)v174;
      *(void *)(v173 + 16) = *(void *)(v174 + 16);
      *(_OWORD *)uint64_t v173 = v175;
      v173 += 24;
      v174 += 24;
      --v162;
    }
    while (v162);
    int32x4_t v176 = *(unint64_t **)(a1 + 64);
    *int32x4_t v176 = ((unint64_t)(v160 + v159) >> 32) | (v158 << 8) | ((unint64_t)((unint64_t)(v160 + v159) >> 2) << 34);
    *(void *)(a1 + 64) = v176 + 1;
    if (v117[24])
    {
      uint64_t v177 = 0;
      signed int v178 = (int64x2_t *)(v104 + 364);
      uint64_t v179 = v160 + v159 + 0x1000000004;
      unint64_t v180 = -1;
      do
      {
        if (*(void *)(v159 + v177 + 4))
        {
          int64x2_t v181 = v178[-16];
          uint32x2_t v182 = (uint32x2_t)vmovn_s64(*v178);
          int8x8_t v183 = (int8x8_t)vmovn_s64(v181);
          *(int32x2_t *)v181.i8 = vshrn_n_s64(v181, 0x20uLL);
          int8x8_t v184 = vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v183, v182), v183, (int8x8_t)vmin_u32(v182, *(uint32x2_t *)v181.i8));
          uint32x2_t v185 = (uint32x2_t)vshrn_n_s64(*v178, 0x20uLL);
          v186.i64[0] = v184.u32[0];
          v186.i64[1] = v184.u32[1];
          uint64_t v187 = *(void *)v117;
          int v188 = (_DWORD *)(*(void *)v117 + 38560);
          int v189 = *(_DWORD *)(*(void *)(*(void *)(*(void *)v117 + 90568) + 64) + 16);
          uint64_t v190 = *(void *)(*(void *)v117 + 736);
          *(void *)(v187 + 736) = v190 + 56;
          *(_DWORD *)uint64_t v190 = 1;
          *(_DWORD *)(v190 + 4) = v189;
          *(void *)(v190 + 8) = v179 + v177;
          *(int32x2_t *)(v190 + 16) = vzip1_s32((int32x2_t)v184.u32[0], (int32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL));
          *(int8x8_t *)(v190 + 24) = vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)v184, v185), v184, (int8x8_t)vmin_u32(v185, *(uint32x2_t *)v181.i8));
          *(_DWORD *)(v190 + 32) = v180 + 1;
          int v191 = v188[2] + 1;
          v188[2] = v191;
          *(_DWORD *)(*(void *)v188 + 4) = v191;
          ++*(_DWORD *)(v187 + 1540);
        }
        ++v180;
        ++v178;
        v177 += 8;
      }
      while (v180 < (unsigned __int16)*(_DWORD *)v159 >> 12);
    }
    goto LABEL_235;
  }
  uint64_t v119 = *(void *)(a1 + 288);
  int v118 = v283;
  if (!v119)
  {
    AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v280);
    uint64_t v119 = *(void *)(a1 + 288);
    if (!v119)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v280);
      uint64_t v119 = 0;
    }
  }
  v115 |= -1431655765 * ((unint64_t)(v119 - *(void *)(*(void *)(a1 + 40) + 472)) >> 2) > 0xFFFE;
  char v302 = v115;
  if (!v115) {
    goto LABEL_173;
  }
LABEL_270:
  if (!*v118)
  {
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(a1, (unint64_t *)&v305, v298, 1);
    unint64_t v246 = v305;
    unint64_t v247 = *(unint64_t **)(a1 + 64);
    unint64_t v275 = v305;
    if ((unint64_t)(v247 + 23) > *(void *)(a1 + 56))
    {
      int v263 = AGX::DataBufferAllocator<34ul>::growNoInline(v280, 0, 0);
      unint64_t v246 = v275;
      if (v263)
      {
        uint64_t v264 = *(void *)(a1 + 64);
        if ((unint64_t)(v264 + 184) > *(void *)(a1 + 56)) {
          goto LABEL_387;
        }
        *(void *)(a1 + 72) = v264 + 184;
        *unint64_t v247 = __ROR8__(*(void *)(a1 + 80) + v264, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
        uint64_t v8 = a3;
        float32x4_t v117 = (unsigned char *)v293;
        unint64_t v246 = v275;
      }
    }
    else
    {
      *(void *)(a1 + 72) = v247 + 23;
    }
    if (v288) {
      uint64_t v248 = *(unsigned int *)(v288 + 608) + 31;
    }
    else {
      uint64_t v248 = 31;
    }
    uint64_t v251 = *(void *)(a1 + 384);
    if (!v251)
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v280, 10, 0)) {
        goto LABEL_387;
      }
      uint64_t v251 = *(void *)(a1 + 384);
      uint64_t v8 = a3;
      float32x4_t v117 = (unsigned char *)v293;
      unint64_t v246 = v275;
    }
    unint64_t v252 = v251 + v248;
    if (v252 > *(void *)(a1 + 376))
    {
      int v265 = AGX::DataBufferAllocator<34ul>::growNoInline(v280, 10, 0);
      unint64_t v246 = v275;
      if (!v265)
      {
LABEL_335:
        unint64_t v253 = *(void *)(a1 + 1024) + 1156;
        if (v253 > *(void *)(a1 + 1016))
        {
          int v266 = AGX::DataBufferAllocator<34ul>::growNoInline(v280, 30, 0);
          unint64_t v246 = v275;
          if (!v266)
          {
LABEL_337:
            if ((v246 & 0xFE01) == 0) {
              goto LABEL_340;
            }
            uint64_t v254 = (*(_DWORD *)(*(void *)(v288 + 1936) + 8) - **(_DWORD **)(v288 + 1936)) + 63;
            unint64_t v255 = *(void *)(a1 + 224) + v254;
            if (v255 > *(void *)(a1 + 216))
            {
              int v268 = AGX::DataBufferAllocator<34ul>::growNoInline(v280, 5, 0);
              unint64_t v246 = v275;
              if (!v268)
              {
LABEL_340:
                int v286 = v110;
                if ((v246 & 0xF8000000002) == 0) {
                  goto LABEL_345;
                }
                uint64_t v256 = (*(_DWORD *)(*(void *)(v8 + 1936) + 8) - **(_DWORD **)(v8 + 1936)) + 63;
                unint64_t v257 = *(void *)(a1 + 256) + v256;
                if (v257 > *(void *)(a1 + 248))
                {
                  if (!AGX::DataBufferAllocator<34ul>::growNoInline(v280, 6, 0))
                  {
LABEL_343:
                    uint64_t v8 = a3;
                    uint64_t v258 = *(unsigned int *)(a3 + 608) + 31;
                    unint64_t v259 = *(void *)(a1 + 416) + v258;
                    if (v259 > *(void *)(a1 + 408))
                    {
                      float32x4_t v117 = (unsigned char *)v293;
                      unint64_t v104 = a1 + 37180;
                      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v280, 11, 0))
                      {
LABEL_345:
                        unint64_t v260 = *(void *)(a1 + 352) + 8;
                        if (v260 > *(void *)(a1 + 344))
                        {
                          int v118 = v283;
                          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v280, 9, 0)) {
                            goto LABEL_347;
                          }
                          unint64_t v260 = *(void *)(a1 + 352) + 8;
                          if (v260 > *(void *)(a1 + 344)) {
                            goto LABEL_387;
                          }
                        }
                        *(void *)(a1 + 360) = v260;
                        int v118 = v283;
LABEL_347:
                        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveScissorSpace((void *)a1, *(unsigned int *)(v104 + 896));
                        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveDepthBiasSpace(a1);
                        if ((v275 & 0x20000000000000) == 0) {
                          goto LABEL_348;
                        }
                        unint64_t v267 = *(void *)(a1 + 448) + 2;
                        if (v267 <= *(void *)(a1 + 440))
                        {
                          int v286 = 0;
                          *(void *)(a1 + 456) = v267;
LABEL_375:
                          int v118 = v283;
                          uint64_t v8 = a3;
                          float32x4_t v117 = (unsigned char *)v293;
                          goto LABEL_348;
                        }
                        int v286 = 0;
                        int v118 = v283;
                        uint64_t v8 = a3;
                        float32x4_t v117 = (unsigned char *)v293;
                        if (!AGX::DataBufferAllocator<34ul>::growNoInline(v280, 12, 0))
                        {
LABEL_348:
                          if (v111)
                          {
                            AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1);
                            if (!v291)
                            {
LABEL_350:
                              if (!a7)
                              {
LABEL_352:
                                int v110 = v286;
                                goto LABEL_173;
                              }
LABEL_351:
                              IOGPUResourceListAddResource();
                              IOGPUResourceListAddResource();
                              IOGPUResourceListAddResource();
                              goto LABEL_352;
                            }
                          }
                          else if (!v291)
                          {
                            goto LABEL_350;
                          }
                          AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveGPUGatherDataBufferSpace((void *)a1);
                          if (!a7) {
                            goto LABEL_352;
                          }
                          goto LABEL_351;
                        }
                        unint64_t v269 = *(void *)(a1 + 448) + 2;
                        if (v269 <= *(void *)(a1 + 440))
                        {
                          *(void *)(a1 + 456) = v269;
                          AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveVisibilityClearDatabufferSpace((void *)a1);
                          int v286 = 1;
                          goto LABEL_375;
                        }
LABEL_387:
                        abort();
                      }
                      unint64_t v259 = *(void *)(a1 + 416) + v258;
                      if (v259 > *(void *)(a1 + 408)) {
                        goto LABEL_387;
                      }
                    }
                    *(void *)(a1 + 424) = v259;
                    float32x4_t v117 = (unsigned char *)v293;
                    unint64_t v104 = a1 + 37180;
                    goto LABEL_345;
                  }
                  unint64_t v257 = *(void *)(a1 + 256) + v256;
                  if (v257 > *(void *)(a1 + 248)) {
                    goto LABEL_387;
                  }
                }
                *(void *)(a1 + 264) = v257;
                goto LABEL_343;
              }
              unint64_t v255 = *(void *)(a1 + 224) + v254;
              if (v255 > *(void *)(a1 + 216)) {
                goto LABEL_387;
              }
            }
            *(void *)(a1 + 232) = v255;
            goto LABEL_340;
          }
          unint64_t v253 = *(void *)(a1 + 1024) + 1156;
          if (v253 > *(void *)(a1 + 1016)) {
            goto LABEL_387;
          }
        }
        *(void *)(a1 + 1032) = v253;
        goto LABEL_337;
      }
      unint64_t v252 = *(void *)(a1 + 384) + v248;
      if (v252 > *(void *)(a1 + 376)) {
        goto LABEL_387;
      }
    }
    *(void *)(a1 + 392) = v252;
    goto LABEL_335;
  }
  v118[10] = v298;
  *((unsigned char *)v118 + 88) = 1;
}

void sub_242B582E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AGX::isIndirectGatherDirty<AGX::HAL200::VertexProgramVariantESLState>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1[27] & a4 | a1[25] & a2 | a1[29] & a6) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = (a1[28] & a5 | a1[26] & a3 | a1[30] & a7) == 0;
  }
  return !v9
      || (a1[33] & a4 | a1[31] & a2 | a1[35] & a6 | a1[37] & a8) != 0
      || (a1[36] & a7 | a1[38] & a9 | a1[34] & a5 | a1[32] & a3) != 0;
}

void *AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveScissorSpace(void *result, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)(result[182] + 808) + 5106))
  {
    uint64_t v2 = result;
    unint64_t v3 = result[40] + 16 * a2;
    if (v3 > result[39])
    {
      uint64_t v5 = 16 * a2;
      uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(result + 2, 8, 1);
      if (result)
      {
        unint64_t v4 = v2[40] + v5;
        if (v4 > v2[39]) {
          abort();
        }
        v2[41] = v4;
        *(void *)(v2[4869] + 752) = *(void *)(v2[5] + 512)
                                      + *(void *)(v2[5] + 536)
                                      - *(void *)(v2[5] + 520);
      }
    }
    else
    {
      result[41] = v3;
    }
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reserveDepthBiasSpace(uint64_t result)
{
  if (*(unsigned char *)(*(void *)(*(void *)(result + 1456) + 808) + 5105)) {
    return result;
  }
  uint64_t v1 = (void *)result;
  uint64_t v2 = result + 16;
  uint64_t v3 = *(void *)(result + 288);
  if (!v3)
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(result + 16, 7, 0);
    if (!result) {
      goto LABEL_13;
    }
    uint64_t v3 = v1[36];
  }
  unint64_t v4 = v3 + 12;
  if (v4 <= v1[35])
  {
    v1[37] = v4;
    return result;
  }
  uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(v2, 7, 1);
  if (result)
  {
    uint64_t v5 = v1[36];
    if ((unint64_t)(v5 + 12) <= v1[35])
    {
      v1[37] = v5 + 12;
      if (!v5) {
        uint64_t result = AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(v2);
      }
      *(void *)(v1[4869] + 760) = *(void *)(v1[5] + 448)
                                    + *(void *)(v1[5] + 472)
                                    - *(void *)(v1[5] + 456);
      return result;
    }
LABEL_13:
    abort();
  }
  return result;
}

void AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v16 = (void *)(v15 + 78512);
  uint64_t v17 = (_DWORD *)(v15 + 68140);
  uint64_t v18 = (void *)(v15 + 39320);
  uint64_t v19 = (int *)MEMORY[0x263F4B188];
  if (a7)
  {
    uint64_t v20 = (void *)(a7 + (int)*MEMORY[0x263F4B188]);
    uint64_t v22 = v20[2];
    uint64_t v21 = v20[3];
    unint64_t v23 = v20[1];
    *(void *)(v15 + 86256) = v23;
    *(void *)(v15 + 88336) = v21;
    *(void *)(v15 + 39856) = v23 + a8;
    *(void *)(v15 + 40376) = (v22 & 0xFFFFFFFFFFFFFFLL) - a8;
    *uint64_t v18 = v21 + a8;
    *uint64_t v17 = v22;
    *(_DWORD *)(v15 + 68400) = v22;
    *(_DWORD *)(v15 + 68660) = v23 >> 8;
    *uint64_t v16 = v20;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v15 + 1592), a7, 0, 0x29u);
    if (*(void *)(v15 + 1480)) {
      MTLResourceListAddResource();
    }
  }
  else
  {
    *uint64_t v16 = 0;
    *(void *)(v15 + 39856) = 0;
    *(void *)(v15 + 40376) = 0;
    *uint64_t v18 = 0;
    *(void *)(v15 + 86256) = 0;
    *(void *)(v15 + 88336) = 0;
    *uint64_t v17 = 0;
    *(_DWORD *)(v15 + 68400) = 0;
  }
  *(void *)(v15 + 90088) |= 0x20000000000uLL;
  *(void *)(v15 + 90136) |= 0x20000000000uLL;
  *(void *)(v15 + 90472) |= 0xC0uLL;
  uint64_t v24 = *(void *)(a1 + 8);
  uint64_t v25 = (void *)(v24 + 78496);
  uint64_t v26 = (_DWORD *)(v24 + 68132);
  unint64_t v27 = (void *)(v24 + 39304);
  if (a5)
  {
    uint64_t v28 = (void *)(a5 + *v19);
    uint64_t v30 = v28[2];
    uint64_t v29 = v28[3];
    unint64_t v31 = v28[1];
    *(void *)(v24 + 86240) = v31;
    *(void *)(v24 + 88320) = v29;
    *(void *)(v24 + 39840) = v31 + a6;
    *(void *)(v24 + 40360) = (v30 & 0xFFFFFFFFFFFFFFLL) - a6;
    uint64_t v32 = v29 + a6;
  }
  else
  {
    a5 = *(void *)(a1 + 80);
    if (!a5)
    {
      *uint64_t v25 = 0;
      *(void *)(v24 + 39840) = 0;
      *(void *)(v24 + 40360) = 0;
      *unint64_t v27 = 0;
      *(void *)(v24 + 86240) = 0;
      *(void *)(v24 + 88320) = 0;
      *uint64_t v26 = 0;
      *(_DWORD *)(v24 + 68392) = 0;
      goto LABEL_12;
    }
    uint64_t v28 = (void *)(a5 + *v19);
    uint64_t v30 = v28[2];
    uint64_t v32 = v28[3];
    unint64_t v31 = v28[1];
    *(void *)(v24 + 86240) = v31;
    *(void *)(v24 + 88320) = v32;
    *(void *)(v24 + 39840) = v31;
    *(void *)(v24 + 40360) = v30 & 0xFFFFFFFFFFFFFFLL;
  }
  *unint64_t v27 = v32;
  *uint64_t v26 = v30;
  *(_DWORD *)(v24 + 68392) = v30;
  *(_DWORD *)(v24 + 68652) = v31 >> 8;
  *uint64_t v25 = v28;
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v24 + 1592), a5, 0, 0x27u);
  if (*(void *)(v24 + 1480)) {
    MTLResourceListAddResource();
  }
LABEL_12:
  *(void *)(v24 + 90088) |= 0x8000000000uLL;
  *(void *)(v24 + 90136) |= 0x8000000000uLL;
  *(void *)(v24 + 90472) |= 0xC0uLL;
  uint64_t v33 = *(void *)(a1 + 8);
  uint64_t v34 = *(void *)(a1 + 104);
  int v35 = *(_DWORD *)(a1 + 100);
  int v36 = *(_DWORD *)(v34 + 3736);
  if (v36 == 1)
  {
    BOOL v37 = v35 == 0;
    unsigned int v38 = 24;
    int v39 = 12;
  }
  else
  {
    if (v36)
    {
      unsigned int v38 = 0;
      goto LABEL_20;
    }
    BOOL v37 = v35 == 0;
    unsigned int v38 = 16;
    int v39 = 8;
  }
  if (v37) {
    unsigned int v38 = v39;
  }
LABEL_20:
  unsigned int v40 = *(_DWORD *)(v34 + 3740);
  BOOL v41 = v40 >= 2;
  unsigned int v42 = v40 - 2;
  if (v41)
  {
    if (v42 > 1) {
      goto LABEL_25;
    }
    int v43 = *(_DWORD *)(a1 + 44) / v38;
  }
  else
  {
    int v43 = 0;
  }
  *(_DWORD *)(v33 + 67788) = v43;
LABEL_25:
  if (((*(void *)(*(void *)(v33 + 38960) + 2024) | *(void *)(*(void *)(v33 + 38960) + 1976)) & 0x700000000000) == 0) {
    goto LABEL_29;
  }
  *(void *)(v33 + 90088) |= 0x700000000000uLL;
  *(void *)(v33 + 90472) |= 0x40uLL;
  *(void *)(v33 + 39896) = a10;
  int v44 = *(_DWORD **)(v33 + 160);
  uint64_t v45 = v44 + 2;
  if ((unint64_t)(v44 + 2) > *(void *)(v33 + 152))
  {
    int v60 = AGX::DataBufferAllocator<34ul>::growNoInline(v33 + 16, 3, 0);
    int v44 = *(_DWORD **)(v33 + 160);
    if (!v60) {
      goto LABEL_28;
    }
    uint64_t v45 = v44 + 2;
    if ((unint64_t)(v44 + 2) > *(void *)(v33 + 152)) {
      abort();
    }
  }
  *(void *)(v33 + 168) = v45;
LABEL_28:
  uint64_t v46 = (char *)v44 + *(void *)(v33 + 176);
  *(void *)(v33 + 160) = v44 + 2;
  *(void *)(v33 + 39880) = v46;
  *(void *)(v33 + 39888) = v46 + 4;
  *int v44 = 0;
  v44[1] = a10;
  uint64_t v47 = *(void *)(*(void *)(v33 + 40) + 224) + *v19;
  *(void *)(v33 + 78536) = v47;
  *(void *)(v33 + 78544) = v47;
  uint64_t v33 = *(void *)(a1 + 8);
LABEL_29:
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v33, 3);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(*(void *)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 38960), *(void *)(*(void *)(a1 + 8) + 38968), *(void *)(a1 + 8) + 38992, *(void *)(a1 + 8) + 49184, *(void *)(a1 + 8) + 90088, 0);
  uint64_t v48 = *(void *)(a1 + 8);
  *(unsigned char *)(v48 + 1544) = 0;
  int v49 = *(_DWORD *)(a1 + 112);
  if ((v49 & 5) != 0)
  {
    if (*(unsigned char *)(a1 + 68)) {
      float v50 = *(float *)(a1 + 72);
    }
    else {
      float v50 = 1.0;
    }
    int v51 = HIWORD(LODWORD(v50)) & 0x8000;
    float v52 = fabsf(v50);
    if (v52 >= 65520.0)
    {
      LOWORD(v51) = v51 | 0x7C00;
    }
    else if (v52 > 0.000000029802)
    {
      if (v52 >= 0.000000089407)
      {
        if (v52 >= 2.351e-38) {
          v51 |= COERCE_UNSIGNED_INT((float)((float)(v52 + COERCE_FLOAT(COERCE_UNSIGNED_INT(v50 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(v50 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13;
        }
        else {
          v51 |= vcvts_n_u32_f32(v52, 0x18uLL);
        }
      }
      else
      {
        LOWORD(v51) = v51 | 1;
      }
    }
    uint64_t v53 = *(void *)(a1 + 24);
    uint64_t v54 = *(void *)(v53 + 48);
    *(void *)uint64_t v54 = ((unint64_t)((((*(_DWORD *)(a1 + 64) - (*(_DWORD *)(a1 + 48) == 2)) << 23) + 528482304) & 0x1F800000 | (*(_DWORD *)(a1 + 48) << 30) | ((*(_DWORD *)(a1 + 52) & 1) << 29) | (*(unsigned __int8 *)(*(void *)(a1 + 104) + 3749) << 16) | ((*(_DWORD *)(a1 + 56) & 3) << 17) | ((*(_DWORD *)(a1 + 100) & 1) << 19) | ((*(_DWORD *)(*(void *)(a1 + 104) + 3736) & 1) << 20) | 0x200000u) << 32) | 0x40000090;
    *(_DWORD *)(v54 + 8) = (unsigned __int16)v51;
    *(void *)(v53 + 48) = v54 + 12;
    int v49 = *(_DWORD *)(a1 + 112);
    uint64_t v48 = *(void *)(a1 + 8);
  }
  if ((v49 & 2) != 0)
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v48 + 1592), *(void *)(a1 + 80), 1);
    IOGPUResourceListAddResource();
    uint64_t v48 = *(void *)(a1 + 8);
  }
  uint64_t v56 = *(void *)(a1 + 24);
  uint64_t v55 = *(void *)(a1 + 32);
  int v57 = (*(_DWORD *)(a1 + 44) >> 2) & 0x7FFFF;
  int v58 = *(_DWORD *)(a1 + 40) - 1;
  double v59 = *(unsigned int **)(v56 + 48);
  *double v59 = BYTE4(v55) | 0xB2F00C00;
  v59[1] = v55;
  v59[2] = a4;
  v59[3] = a9;
  v59[4] = a3;
  v59[5] = a10;
  v59[6] = v57;
  v59[7] = v58;
  v59[8] = BYTE5(v55);
  *(void *)(v56 + 48) = v59 + 9;
  ++*(_DWORD *)(v48 + 1524);
  *(_DWORD *)(a1 + 112) = 0;
}

void sub_242B5C2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242B5C46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexAmplificationCount(uint64_t a1, unsigned int a2, void *__src)
{
  uint64_t v5 = (_OWORD *)(a1 + 90680);
  if (__src)
  {
    size_t v6 = 8 * a2;
    memcpy((void *)(a1 + 90680), __src, v6);
  }
  else
  {
    long long v7 = *(_OWORD *)(a1 + 90632);
    *uint64_t v5 = *(_OWORD *)(a1 + 90616);
    *(_OWORD *)(a1 + 90696) = v7;
    long long v8 = *(_OWORD *)(a1 + 90664);
    *(_OWORD *)(a1 + 90712) = *(_OWORD *)(a1 + 90648);
    *(_OWORD *)(a1 + 90728) = v8;
    size_t v6 = 8 * a2;
  }
  uint64_t v9 = (v6 + 15) | 0xF;
  uint64_t v10 = *(void *)(a1 + 160);
  uint64_t v11 = v10 + v9;
  if ((unint64_t)(v10 + v9) <= *(void *)(a1 + 152))
  {
LABEL_5:
    *(void *)(a1 + 168) = v11;
    goto LABEL_6;
  }
  int v40 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 16, 3, 0);
  uint64_t v10 = *(void *)(a1 + 160);
  if (v40)
  {
    uint64_t v11 = v10 + v9;
    if ((unint64_t)(v10 + v9) > *(void *)(a1 + 152)) {
      goto LABEL_19;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v12 = (uint64_t *)(a1 + 36552);
  uint64_t v13 = (v6 + 15) & 0xFFFFFFFF0;
  int v14 = (char *)((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (unint64_t)&v14[*(void *)(a1 + 176)];
  *(void *)(a1 + 160) = &v14[v13];
  uint64_t result = memcpy(v14, v5, v6);
  uint64_t v17 = (int *)MEMORY[0x263F4B188];
  uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 224) + (int)*MEMORY[0x263F4B188];
  *(void *)(a1 + 90088) |= 0x400000000000000uLL;
  uint64_t v19 = *(void *)(a1 + 90472);
  *(void *)(a1 + 90472) = v19 | 0x40;
  *(void *)(a1 + 39992) = v15;
  *(void *)(a1 + 40512) = v13;
  *(void *)(a1 + 78648) = v18;
  *(_DWORD *)(a1 + 68208) = v6;
  *(_DWORD *)(a1 + 68468) = v6;
  *(_DWORD *)(a1 + 68728) = v15 >> 8;
  *(_DWORD *)(a1 + 38656) = a2;
  *(_DWORD *)(a1 + 67840) = a2;
  *(void *)(a1 + 90168) |= 0x80uLL;
  *(_DWORD *)(a1 + 90480) &= ~4u;
  uint64_t v20 = *(void *)(a1 + 38960);
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 3576);
    *(_DWORD *)(a1 + 37252) = *(_DWORD *)(a1 + 37252) & 0xF0E3FF00 | v21 & 0xF1C00FF;
    *(_DWORD *)(a1 + 37260) = *(_DWORD *)(a1 + 37260) & 0xFFFFFFF8 | ((_BYTE)a2 - 1) & 7;
    *(_DWORD *)(a1 + 37264) = HIDWORD(v21);
    *(_DWORD *)(a1 + 37256) = 0;
    *(void *)(a1 + 90472) = v19 | 0x44;
  }
  uint64_t v22 = *v12;
  if (*v12)
  {
    uint64_t v23 = 8 * a2;
    uint64_t v24 = *(void **)(v22 + 8);
    uint64_t v25 = (v23 + 15) | 0xF;
    unint64_t v26 = v24[20] + v25;
    if (v26 <= v24[19]) {
      goto LABEL_10;
    }
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v24 + 2, 3, 0))
    {
LABEL_11:
      uint64_t v27 = (v23 + 15) & 0xFFFFFFFF0;
      uint64_t v28 = *(void *)(v22 + 8);
      uint64_t v29 = (char *)((*(void *)(v28 + 160) + 15) & 0xFFFFFFFFFFFFFFF0);
      unint64_t v30 = (unint64_t)&v29[*(void *)(v28 + 176)];
      *(void *)(v28 + 160) = &v29[v27];
      uint64_t result = memcpy(v29, v5, 8 * a2);
      unint64_t v31 = *(void **)(v22 + 8);
      uint64_t v32 = *(void *)(v31[5] + 224) + *v17;
      uint64_t v33 = v31 + 11285;
      v31[11285] |= 0x400000000000000uLL;
      v31[11309] |= 0x4000000uLL;
      uint64_t v34 = *(void *)(v22 + 14464);
      *(void *)(v34 + 1000) = v30;
      *(void *)(v34 + 1520) = v27;
      *(void *)(v22 + 24120) = v32;
      *(_DWORD *)(v22 + 23108) = 8 * a2;
      *(_DWORD *)(v22 + 23368) = 8 * a2;
      *(_DWORD *)(v22 + 23628) = v30 >> 8;
      *(_DWORD *)(v22 + 9404) = a2;
      *(_DWORD *)(v22 + 22868) = a2;
      uint64_t v35 = *(void *)(v22 + 40);
      if (v35)
      {
        int v36 = (_DWORD *)v31 + 9313;
        unint64_t v37 = *(void *)(v35 + 3344);
        int v38 = *(_DWORD *)(v35 + 3352);
        unint64_t v39 = HIDWORD(v37);
        LODWORD(v37) = *v36 & 0xF0E3FF00 | v37 & 0xF1C00FF;
        v36[2] = v36[2] & 0xFFFFFFF8 | (v36[351] - 1) & 7;
        v36[3] = v39;
        *int v36 = v37;
        v36[1] = v38;
        v33[24] |= 4uLL;
      }
      return result;
    }
    unint64_t v26 = v24[20] + v25;
    if (v26 <= v24[19])
    {
LABEL_10:
      v24[21] = v26;
      goto LABEL_11;
    }
LABEL_19:
    abort();
  }
  return result;
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::executeCommandsInBufferCommon(uint64_t a1)
{
  uint64_t result = MEMORY[0x270FA5388](a1);
  uint64_t v553 = v3;
  uint64_t v557 = v4;
  if (!*(unsigned char *)(*(void *)(v2 + 384) + 399)) {
    return result;
  }
  uint64_t v5 = v2;
  unint64_t v6 = result;
  long long v7 = (void *)(result + 38696);
  uint64_t v558 = result + 36552;
  if (!*(unsigned char *)(result + 38512))
  {
    *(unsigned char *)(result + 38512) = 1;
    *(void *)(result + 38500) = 0;
    if (*(unsigned char *)(result + 36625))
    {
      *(void *)(result + 39936) = 0;
      *(void *)(result + 50128) = 0;
      *(void *)(result + 39912) = 0;
      *(void *)(result + 39904) = 0;
      *(void *)(result + 50104) = 0;
      *(void *)(result + 50096) = 0;
    }
    *(void *)(result + 39944) = 0;
    *(void *)(result + 50136) = 0;
    *(void *)(result + 39984) = 0;
    *(void *)(result + 50176) = 0;
    *(void *)(result + 39968) = 0;
    *(void *)(result + 39960) = 0;
    *(void *)(result + 50160) = 0;
    *(void *)(result + 50152) = 0;
  }
  uint64_t v8 = result + 90088;
  if (*(void *)(result + 1480)) {
    MTLResourceListAddResource();
  }
  uint64_t v9 = (char ****)(v6 + 36264);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v6, 3);
  if (*(unsigned char *)(*(void *)(v5 + 384) + 396))
  {
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(v7[35]);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    unsigned __int8 v11 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(v6 + 1456) + 808) + 7832));
    *(unsigned char *)(v6 + 90577) |= v11 & 1;
  }
  uint64_t v556 = v7;
  if (*(unsigned char *)(*(void *)(v5 + 384) + 397))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 40048;
    uint64_t v14 = 78184;
    do
    {
      if (*(void *)(v6 + v13))
      {
        uint64_t v15 = *(void *)(v6 + v14);
        if (v15)
        {
          unint64_t v16 = *(void *)(v15 + 16);
          if ((v16 & 0x7FFFFFFF80) != 0)
          {
            uint64_t v17 = *(void *)(v6 + 1592);
            uint64_t v18 = *(void *)(v17 + 40);
            if (*(unsigned char *)(v18 + 480))
            {
              uint64_t v19 = (void *)(v18 + 8 * ((v12 & 0xFFFFFFC0) != 0));
              BOOL v20 = (*v19 & (1 << v12)) != 0;
              if (((v19[20] | *v19) & (1 << v12)) != 0)
              {
                uint64_t v21 = *(void *)(v6 + v14);
                if ((v16 & 0x1000000000000000) != 0) {
                  uint64_t v21 = *(void *)v15;
                }
                unint64_t v22 = (*(void *)(v15 + 8) + 127) & 0xFFFFFFFFFFFFFF80;
                v572.i64[0] = v21;
                v572.i64[1] = v22;
                LODWORD(v573[0]) = v16 >> 7;
                DWORD1(v573[0]) = 1;
                *((void *)&v573[0] + 1) = v20;
                ResourceTracker<_ResourceGroupBinding>::addResource(v17, (uint64_t)&v572, *(_DWORD *)(v15 + 48), 1);
              }
            }
          }
          IOGPUResourceListAddResource();
          uint64_t v23 = *(void *)(v6 + v14 + 7184);
          if (v23)
          {
            AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v6 + 1592), v23, 1);
            IOGPUResourceListAddResource();
          }
        }
        IOGPUResourceListAddResource();
      }
      if (*(void *)(v6 + v13 + 10192))
      {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentBufferResource(v6, v12, 0, 1);
        IOGPUResourceListAddResource();
      }
      if (*(void *)(v6 + v14 + 7184)) {
        IOGPUResourceListAddResource();
      }
      if (*(void *)(v6 + v14 + 7464)) {
        IOGPUResourceListAddResource();
      }
      ++v12;
      v14 += 8;
      v13 += 8;
    }
    while (v12 != 35);
    v10 |= 2u;
    long long v7 = v556;
    uint64_t v8 = v6 + 90088;
  }
  *(unsigned char *)(v558 + 2100) = v10;
  *(unsigned char *)(v6 + 1544) = 0;
  if (!*(void *)(v6 + 36320))
  {
    unint64_t v24 = *(void *)(v6 + 56);
    uint64_t v25 = *(unint64_t **)(v6 + 64);
    *(void *)(v8 + 664) = v25;
    if ((unint64_t)(v25 + 1) > v24)
    {
      int v534 = AGX::DataBufferAllocator<34ul>::growNoInline(v6 + 16, 0, 0);
      unint64_t v26 = *(unint64_t **)(v6 + 64);
      if (v534)
      {
        if ((unint64_t)(v26 + 1) > *(void *)(v6 + 56)) {
          goto LABEL_762;
        }
        *(void *)(v6 + 72) = v26 + 1;
        *uint64_t v25 = __ROR8__((char *)v26 + *(void *)(v6 + 80), 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
        unint64_t v26 = *(unint64_t **)(v6 + 64);
      }
    }
    else
    {
      *(void *)(v6 + 72) = v25 + 1;
      unint64_t v26 = v25;
    }
    *unint64_t v26 = 0x80000000;
    uint64_t v27 = v26 + 1;
    *(void *)(v6 + 64) = v27;
    *(void *)(v8 + 672) = (char *)v27 + *(void *)(v6 + 80);
  }
  uint64_t v28 = (int8x8_t **)v7[35];
  if (v28) {
    int v29 = *((_DWORD *)v28 + 189);
  }
  else {
    int v29 = 160;
  }
  unsigned int v548 = v29;
  uint64_t v30 = *(void *)(v5 + 384);
  unsigned int v31 = *(_DWORD *)(*(void *)(*(void *)(v6 + 36296) + 8) + 2272);
  uint64_t v32 = (int *)MEMORY[0x263F4B188];
  do
  {
    v31 &= ~(1 << __clz(__rbit32(v31)));
    IOGPUResourceListAddResource();
  }
  while (v31);
  if (!*(void *)(v6 + 36320)) {
    *(void *)(v6 + 36320) = *(void *)(*(void *)(v6 + 36288) + 96) + *(void *)(*(void *)(v6 + 36288) + 80);
  }
  uint64_t v555 = v5;
  if (v557)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = *(void **)(v6 + 36288);
    goto LABEL_74;
  }
  uint64_t v37 = *(void *)(v6 + 36344);
  int v38 = *(void **)(v6 + 36288);
  if (!v37) {
    *(void *)(v6 + 36312) = v38[16] + v38[14];
  }
  uint64_t v39 = v38[74];
  if (!v39)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v38, 17, 0)) {
      goto LABEL_762;
    }
    uint64_t v39 = v38[74];
  }
  unint64_t v40 = v39 + 32;
  unint64_t v41 = v38[73];
  BOOL v42 = v40 > v41;
  if (v40 > v41)
  {
    int v535 = AGX::DataBufferAllocator<34ul>::growNoInline(v38, 17, 0);
    BOOL v43 = 0;
    if (!v535) {
      goto LABEL_50;
    }
    unint64_t v40 = v38[74] + 32;
    if (v40 > v38[73]) {
      goto LABEL_762;
    }
  }
  v38[75] = v40;
  BOOL v43 = v42;
LABEL_50:
  if (!v37 || v43)
  {
    unsigned int v44 = *(_DWORD *)(*(void *)(*(void *)(v6 + 36304) + 8) + 2272);
    do
    {
      v44 &= ~(1 << __clz(__rbit32(v44)));
      IOGPUResourceListAddResource();
    }
    while (v44);
    uint64_t v45 = *(void *)(v6 + 36336);
    if (v45) {
      *(_DWORD *)(v45 + 4) = *(_DWORD *)(v6 + 36328);
    }
    uint64_t v46 = *(void **)(v6 + 36288);
    uint64_t v47 = v46[74];
    uint64_t v48 = v46;
    if (!v47)
    {
      AGX::DataBufferAllocator<34ul>::initializeOnDemandDataBufferSlow(*(void *)(v6 + 36288));
      uint64_t v47 = v46[74];
      uint64_t v48 = *(void **)(v6 + 36288);
    }
    uint64_t v49 = v46[76] + v47;
    *(_DWORD *)(v6 + 36328) = 0;
    *(void *)(v6 + 36336) = 0;
    *(void *)(v6 + 36344) = v49;
    uint64_t v50 = *(void *)(*(void *)(v6 + 36304) + 8);
    uint64_t v576 = 0;
    uint64_t v574 = v49;
    v572.i64[0] = 0;
    int v51 = (unint64_t *)v48[14];
    if ((unint64_t)(v51 + 26) > v48[13])
    {
      if (AGX::DataBufferAllocator<34ul>::growNoInline(v48, 2, 0))
      {
        uint64_t v536 = v48[14];
        if ((unint64_t)(v536 + 208) > v48[13]) {
          goto LABEL_762;
        }
        v48[15] = v536 + 208;
        *int v51 = __ROR8__(v48[16] + v536, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
      }
    }
    else
    {
      v48[15] = v51 + 26;
    }
    *(void *)&long long v560 = -1;
    bzero((char *)&v560 + 8, 0x20DCuLL);
    long long v568 = 0u;
    int v569 = 1065353216;
    uint64_t v570 = 0x100000001;
    bzero(v571, 0x388uLL);
    float v52 = *(void **)(v6 + 36288);
    if (v50)
    {
      uint64_t v53 = *(unsigned int *)(v50 + 608) + 31;
      uint64_t v54 = v52[46];
      if (v54) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v53 = 31;
      uint64_t v54 = v52[46];
      if (v54) {
        goto LABEL_64;
      }
    }
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 10, 0)) {
      goto LABEL_762;
    }
    uint64_t v54 = v52[46];
LABEL_64:
    unint64_t v55 = v54 + v53;
    if (v55 > v52[45])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v52, 10, 0))
      {
LABEL_66:
        unint64_t v56 = v52[126] + 1156;
        if (v56 > v52[125])
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v52, 30, 0))
          {
LABEL_68:
            uint64_t v57 = (*(_DWORD *)(*(void *)(v50 + 1936) + 8) - **(_DWORD **)(v50 + 1936)) + 63;
            unint64_t v58 = v52[26] + v57;
            if (v58 > v52[25])
            {
              if (!AGX::DataBufferAllocator<34ul>::growNoInline(v52, 5, 0)) {
                goto LABEL_70;
              }
              unint64_t v58 = v52[26] + v57;
              if (v58 > v52[25]) {
                goto LABEL_762;
              }
            }
            v52[27] = v58;
LABEL_70:
            double v59 = *v9;
            int v60 = *(void **)(v6 + 36288);
            LODWORD(v578[0]) = 4;
            AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v59, v60, v50, &v572, (uint64_t)&v560, 65025, 0, 0, 0, v578);
            int8x16_t v61 = *(void **)(v6 + 36288);
            uint64_t v62 = v61[126];
            uint64_t v63 = v61[128] + v62;
            v61[126] = v62 + 20;
            *(_OWORD *)uint64_t v62 = xmmword_242EA8720;
            *(_DWORD *)(v62 + 16) = 0;
            unsigned int v64 = (unint64_t *)v61[14];
            *unsigned int v64 = __ROR8__(v63, 32) & 0xFFFFFFFC000000FFLL | 0x500;
            v61[14] = v64 + 1;
            uint64_t v65 = v61[126];
            uint64_t v66 = v61[128] + v65;
            v61[126] = v65 + 28;
            *(_OWORD *)uint64_t v65 = xmmword_242EA7DE0;
            *(void *)(v65 + 16) = 0xE00000007E00F00;
            uint64_t v67 = __ROR8__(v66, 32);
            *(_DWORD *)(v65 + 24) = 0;
            unint64_t v68 = (unint64_t *)v61[14];
            *unint64_t v68 = v67 & 0xFFFFFFFC000000FFLL | 0x700;
            v61[14] = v68 + 1;
            uint64_t v69 = *(void *)(v50 + 3576);
            unsigned int v70 = *(void **)(v6 + 36288);
            uint64_t v71 = v70[126];
            uint64_t v72 = v70[128] + v71;
            v70[126] = v71 + 20;
            *(_DWORD *)uint64_t v71 = 201981952;
            *(_DWORD *)(v71 + 4) = v69 & 0xF1C00FF;
            *(void *)(v71 + 8) = 0;
            *(_DWORD *)(v71 + 16) = HIDWORD(v69);
            int v73 = (unint64_t *)v70[14];
            *int v73 = __ROR8__(v72, 32) & 0xFFFFFFFC000000FFLL | 0x500;
            v70[14] = v73 + 1;
            int v74 = *(void **)(v6 + 36288);
            uint64_t v75 = v74[126];
            uint64_t v76 = v74[128] + v75;
            v74[126] = v75 + 12;
            *(void *)uint64_t v75 = 0x1E3CE50800410000;
            *(_DWORD *)(v75 + 8) = 131232;
            uint64_t v77 = __ROR8__(v76, 32);
            int64x2_t v78 = (unint64_t *)v74[14];
            *int64x2_t v78 = v77 & 0xFFFFFFFC000000FFLL | 0x300;
            v74[14] = v78 + 1;
            unsigned int v79 = (void *)v74[126];
            unint64_t v80 = (char *)v79 + v74[128];
            v74[126] = v79 + 1;
            uint64_t v81 = __ROR8__(v80, 32);
            *unsigned int v79 = 0x48000200000;
            unsigned int v82 = (unint64_t *)v74[14];
            *unsigned int v82 = v81 & 0xFFFFFFFC000000FFLL | 0x200;
            v74[14] = v82 + 1;
            uint64_t v83 = *(void *)(v6 + 36288);
            unsigned int v84 = *(void **)(v83 + 112);
            *unsigned int v84 = 0xFFFF40000001;
            *(void *)(v83 + 112) = v84 + 1;
            uint64_t v85 = *(void *)(v6 + 36288);
            int v86 = *(_OWORD **)(v85 + 112);
            *int v86 = xmmword_242EA8730;
            *(void *)(v85 + 112) = v86 + 1;
            ++*(_DWORD *)(v6 + 1524);
            *(void *)(v6 + 36336) = v86;
            uint64_t v32 = (int *)MEMORY[0x263F4B188];
            goto LABEL_71;
          }
          unint64_t v56 = v52[126] + 1156;
          if (v56 > v52[125]) {
            goto LABEL_762;
          }
        }
        v52[127] = v56;
        goto LABEL_68;
      }
      unint64_t v55 = v52[46] + v53;
      if (v55 > v52[45]) {
        goto LABEL_762;
      }
    }
    v52[47] = v55;
    goto LABEL_66;
  }
LABEL_71:
  unint64_t v87 = *(void **)(v6 + 36288);
  unint64_t v88 = v87[126] + 8;
  if (v88 > v87[125])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 30, 0)) {
      goto LABEL_73;
    }
    unint64_t v88 = v87[126] + 8;
    if (v88 > v87[125]) {
      goto LABEL_762;
    }
  }
  v87[127] = v88;
LABEL_73:
  int v36 = *(void **)(v6 + 36288);
  uint64_t v34 = (_DWORD *)v36[126];
  uint64_t v33 = (char *)v34 + v36[128];
  v36[126] = v34 + 2;
  uint64_t v35 = (void *)v36[74];
  v36[74] = v35 + 4;
  *uint64_t v35 = *(void *)(v5 + *v32 + 8);
  v35[1] = v553;
  v35[2] = 0;
  v35[3] = v33 + 0x1000000000;
  ++*(_DWORD *)(v6 + 36328);
LABEL_74:
  uint64_t v89 = *(void *)(*(void *)(v6 + 36296) + 8);
  unint64_t v90 = v36[22] + 9695;
  if (v90 <= v36[21])
  {
LABEL_75:
    v36[23] = v90;
    goto LABEL_76;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v36, 4, 0))
  {
    unint64_t v90 = v36[22] + 9695;
    if (v90 > v36[21]) {
      goto LABEL_762;
    }
    goto LABEL_75;
  }
LABEL_76:
  uint64_t v91 = *(void **)(v6 + 36288);
  uint64_t v546 = v91[24];
  uint64_t v552 = (_OWORD *)((v91[22] + 31) & 0xFFFFFFFFFFFFFFE0);
  v91[22] = v552 + 604;
  unint64_t v92 = v91[18] + 9655;
  if (v92 <= v91[17])
  {
LABEL_77:
    v91[19] = v92;
    goto LABEL_78;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v91, 3, 0))
  {
    unint64_t v92 = v91[18] + 9655;
    if (v92 > v91[17]) {
      goto LABEL_762;
    }
    goto LABEL_77;
  }
LABEL_78:
  v540 = v33;
  v541 = v34;
  uint64_t v93 = 0;
  uint64_t v94 = *(void **)(v6 + 36288);
  unint64_t v95 = (v94[18] + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v96 = v94[20];
  v94[18] = v95 + 9624;
  memset(v573, 0, sizeof(v573));
  uint64_t v97 = (int)*MEMORY[0x263F4B188];
  uint64_t v98 = *(void *)(v5 + 376) + v97;
  uint64_t v99 = *(void *)(v98 + 8);
  uint64_t v100 = *(void *)(v98 + 24);
  if (v28)
  {
    uint64_t v101 = 0;
    if (*(unsigned char *)(v30 + 396))
    {
      uint64_t v93 = *v28;
      uint64_t v101 = v28[1];
    }
  }
  else
  {
    uint64_t v101 = 0;
  }
  uint64_t v576 = *(void *)(v555 + v97 + 16) & 0xFFFFFFFFFFFFFFLL;
  uint64_t v574 = v99;
  v572.i64[0] = v100;
  uint64_t v550 = (_OWORD *)v95;
  unint64_t v102 = v95 + 9920;
  if (v95 + 9920 <= v94[17])
  {
LABEL_83:
    v94[19] = v102;
    goto LABEL_84;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v94, 3, 0))
  {
    unint64_t v102 = v94[18] + 296;
    if (v102 > v94[17]) {
      goto LABEL_762;
    }
    goto LABEL_83;
  }
LABEL_84:
  uint64_t v103 = *(void *)(v6 + 36288);
  uint64_t v104 = *(void *)(v103 + 144);
  uint64_t v105 = *(void *)(v103 + 160) + v104;
  *(void *)(v103 + 144) = v104 + 296;
  uint64_t v577 = 296;
  uint64_t v575 = v105;
  v572.i64[1] = v104;
  if (*(unsigned char *)(v30 + 396)) {
    char v106 = 1;
  }
  else {
    char v106 = 2;
  }
  *(unsigned char *)(v104 + 72) = v106;
  if (v28)
  {
    unint64_t v107 = v28[4];
    if (v107)
    {
      uint64_t v108 = v28[3];
      uint64_t v109 = *(uint64_t *)((char *)&v107[402] + 4);
      *(_DWORD *)(v104 + 252) = v107[401].i32[1];
      *(void *)(v104 + 256) = v109;
      *(_DWORD *)(v104 + 264) = 4 * v107[438].i32[0];
      *(unsigned char *)(v104 + 270) = v108[426].i8[2];
      unsigned int v110 = v107[410].u32[1];
      char v111 = v110 == 1;
      if (v110 == 3) {
        char v111 = 6;
      }
      *(unsigned char *)(v104 + 268) = v111;
      if (v110 >= 4) {
        char v112 = 0;
      }
      else {
        char v112 = 0x104u >> (8 * v110);
      }
      *(unsigned char *)(v104 + 269) = v112;
      *(_DWORD *)(v104 + 272) = 4 * v108[407].i32[0];
    }
  }
  if (v101)
  {
    int v113 = (char *)v101 + 28 * (((v548 >> 17) & 1) == 0);
    int v114 = *((_DWORD *)v113 + 840);
    int v115 = *((_DWORD *)v113 + 841);
    unsigned int v116 = *((_DWORD *)v113 + 842) & 0x3FFFFF;
    uint64_t v117 = *((void *)v113 + 422);
    v578[0] = v117;
    *(_DWORD *)(v104 + 76) = v114 & 0xFFFFFFDF;
    *(_DWORD *)(v104 + 80) = v115;
    *(void *)(v104 + 84) = v116;
    *(void *)(v104 + 92) = v117;
    int8x8_t v118 = v101[347];
    *((void *)&v560 + 1) = 0;
    *(void *)&long long v561 = 0;
    *(void *)&long long v560 = (2 * (*(void *)&v118 & 0xFFFFFFFFFFFFLL)) | 1;
    AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)&v560, (unsigned __int8 *)(v104 + 208));
  }
  uint64_t v544 = v96;
  if (!v93)
  {
    uint64_t v124 = v555;
    if (!v28 || !*(unsigned char *)(v30 + 396)) {
      goto LABEL_103;
    }
LABEL_102:
    int v126 = v28[111];
    long long v127 = *(_OWORD *)&v126[15].u8[4];
    *(_DWORD *)(v104 + 144) = v126[17].i32[1];
    *(_OWORD *)(v104 + 128) = v127;
    goto LABEL_103;
  }
  __int32 v119 = (*v28)[409].i32[0];
  __int32 v120 = (*v28)[410].i32[1];
  int v121 = (*v28)[409].i32[1] & 0x3FFFFF;
  int8x8_t v122 = vand_s8((*v28)[408], (int8x8_t)0x3FFFF0000);
  double v123 = v28[401];
  uint64_t v124 = v555;
  if (v123) {
    unint64_t v125 = (unint64_t)v123[4];
  }
  else {
    unint64_t v125 = *(void *)(*(void *)&(*v28)[411] + 32);
  }
  v197.i64[0] = HIDWORD(v125);
  v197.i64[1] = v125;
  *(_DWORD *)(v104 + 100) = (*v28)[407].i32[1];
  *(int8x8_t *)(v104 + 104) = vorr_s8(v122, vand_s8((int8x8_t)vmovn_s64(v197), (int8x8_t)0xFFFFFFFC0000FFFFLL));
  *(_DWORD *)(v104 + 112) = v119;
  *(_DWORD *)(v104 + 116) = v121;
  *(_DWORD *)(v104 + 120) = 0;
  *(_DWORD *)(v104 + 124) = v120;
  int8x8_t v198 = v93[348];
  v578[1] = 0;
  v578[2] = 0;
  v578[0] = (2 * (*(void *)&v198 & 0xFFFFFFFFFFFFLL)) | 1;
  AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)v578, (unsigned __int8 *)(v104 + 218));
  long long v199 = *(_OWORD *)v93[360].i8;
  long long v564 = *(_OWORD *)v93[358].i8;
  long long v565 = v199;
  long long v566 = *(_OWORD *)v93[362].i8;
  int8x8_t v567 = v93[364];
  long long v200 = *(_OWORD *)v93[352].i8;
  long long v560 = *(_OWORD *)v93[350].i8;
  long long v561 = v200;
  long long v201 = *(_OWORD *)v93[356].i8;
  long long v562 = *(_OWORD *)v93[354].i8;
  long long v563 = v201;
  AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((uint64_t)&v560, v104 + 176);
  if (*(unsigned char *)(v30 + 396)) {
    goto LABEL_102;
  }
LABEL_103:
  *(void *)uint64_t v104 = v557;
  *(void *)(v104 + 8) = v553;
  *(unsigned char *)(v104 + 40) = *(unsigned char *)(v30 + 397);
  *(_DWORD *)(v104 + 44) = 0;
  *(void *)(v104 + 48) = 0;
  *(_DWORD *)(v104 + 56) = 28;
  *(void *)(v104 + 64) = 0;
  *(_DWORD *)(v104 + 276) = *(_DWORD *)(v6 + 77356);
  *(_DWORD *)(v104 + 280) = *(_DWORD *)(v6 + 77360);
  *(_DWORD *)(v104 + 284) = *(_DWORD *)(v6 + 77364);
  *(_DWORD *)(v104 + 288) = *(_DWORD *)(v6 + 77368);
  char v128 = *(void **)(v6 + 36288);
  int8x8_t v129 = (unint64_t *)v128[10];
  if ((unint64_t)(v129 + 26) > v128[9])
  {
    uint64_t v130 = v556;
    uint64_t v131 = (uint64_t *)(v6 + 90088);
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 1, 0))
    {
      uint64_t v525 = v128[10];
      if ((unint64_t)(v525 + 208) > v128[9]) {
        goto LABEL_762;
      }
      v128[11] = v525 + 208;
      unint64_t *v129 = __ROR8__(v128[12] + v525, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    v128[11] = v129 + 26;
    uint64_t v130 = v556;
    uint64_t v131 = (uint64_t *)(v6 + 90088);
  }
  *(void *)&long long v560 = -1;
  bzero((char *)&v560 + 8, 0x20DCuLL);
  long long v568 = 0u;
  int v569 = 1065353216;
  uint64_t v570 = 0x100000001;
  bzero(v571, 0x388uLL);
  long long v132 = *(void **)(v6 + 36288);
  if (v89)
  {
    uint64_t v133 = *(unsigned int *)(v89 + 608) + 31;
    uint64_t v134 = v132[46];
    if (v134) {
      goto LABEL_109;
    }
  }
  else
  {
    uint64_t v133 = 31;
    uint64_t v134 = v132[46];
    if (v134) {
      goto LABEL_109;
    }
  }
  if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 10, 0)) {
    goto LABEL_762;
  }
  uint64_t v134 = v132[46];
LABEL_109:
  unint64_t v135 = v134 + v133;
  if (v135 <= v132[45])
  {
LABEL_110:
    v132[47] = v135;
    goto LABEL_111;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v132, 10, 0))
  {
    unint64_t v135 = v132[46] + v133;
    if (v135 > v132[45]) {
      goto LABEL_762;
    }
    goto LABEL_110;
  }
LABEL_111:
  unint64_t v136 = v132[126] + 1156;
  if (v136 <= v132[125])
  {
LABEL_112:
    v132[127] = v136;
    goto LABEL_113;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v132, 30, 0))
  {
    unint64_t v136 = v132[126] + 1156;
    if (v136 > v132[125]) {
      goto LABEL_762;
    }
    goto LABEL_112;
  }
LABEL_113:
  uint64_t v137 = (*(_DWORD *)(*(void *)(v89 + 1936) + 8) - **(_DWORD **)(v89 + 1936)) + 63;
  unint64_t v138 = v132[26] + v137;
  if (v138 <= v132[25])
  {
LABEL_114:
    v132[27] = v138;
    goto LABEL_115;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v132, 5, 0))
  {
    unint64_t v138 = v132[26] + v137;
    if (v138 > v132[25]) {
      goto LABEL_762;
    }
    goto LABEL_114;
  }
LABEL_115:
  unsigned int v139 = *v9;
  int v140 = *(void **)(v6 + 36288);
  LODWORD(v578[0]) = 2;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(v139, v140, v89, &v572, (uint64_t)&v560, 65025, 0, 0, 0, v578);
  int v141 = *(void **)(v6 + 36288);
  uint64_t v142 = v141[126];
  uint64_t v143 = v141[128] + v142;
  v141[126] = v142 + 20;
  *(_OWORD *)uint64_t v142 = xmmword_242EA8720;
  *(_DWORD *)(v142 + 16) = 0;
  int v144 = (unint64_t *)v141[10];
  *int v144 = __ROR8__(v143, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  v141[10] = v144 + 1;
  uint64_t v145 = v141[126];
  uint64_t v146 = v141[128] + v145;
  v141[126] = v145 + 28;
  *(_OWORD *)uint64_t v145 = xmmword_242EA7DE0;
  *(void *)(v145 + 16) = 0xE00000007E00F00;
  uint64_t v147 = __ROR8__(v146, 32);
  *(_DWORD *)(v145 + 24) = 0;
  unsigned int v148 = (unint64_t *)v141[10];
  *unsigned int v148 = v147 & 0xFFFFFFFC000000FFLL | 0x700;
  v141[10] = v148 + 1;
  uint64_t v149 = *(void *)(v89 + 3576);
  uint64_t v150 = *(void **)(v6 + 36288);
  uint64_t v151 = v150[126];
  uint64_t v152 = v150[128] + v151;
  v150[126] = v151 + 20;
  *(_DWORD *)uint64_t v151 = 201981952;
  *(_DWORD *)(v151 + 4) = v149 & 0xF1C00FF;
  *(void *)(v151 + 8) = 0;
  *(_DWORD *)(v151 + 16) = HIDWORD(v149);
  uint64_t v153 = (unint64_t *)v150[10];
  unint64_t *v153 = __ROR8__(v152, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  v150[10] = v153 + 1;
  int32x2_t v154 = *(void **)(v6 + 36288);
  uint64_t v155 = v154[126];
  uint64_t v156 = v154[128] + v155;
  v154[126] = v155 + 12;
  *(void *)uint64_t v155 = 0x1E3CE50800410000;
  *(_DWORD *)(v155 + 8) = 131232;
  uint64_t v157 = __ROR8__(v156, 32);
  uint64_t v158 = (unint64_t *)v154[10];
  *uint64_t v158 = v157 & 0xFFFFFFFC000000FFLL | 0x300;
  v154[10] = v158 + 1;
  uint64_t v159 = (void *)v154[126];
  uint64_t v160 = (char *)v159 + v154[128];
  v154[126] = v159 + 1;
  void *v159 = 0x48000200000;
  uint64_t v161 = __ROR8__(v160, 32);
  uint64_t v162 = (unint64_t *)v154[10];
  *uint64_t v162 = v161 & 0xFFFFFFFC000000FFLL | 0x200;
  v154[10] = v162 + 1;
  uint64_t v163 = *(void *)(v6 + 36288);
  int v164 = *(void **)(v163 + 80);
  *int v164 = 0xFFFF40000001;
  *(void *)(v163 + 80) = v164 + 1;
  if (v557 == 1)
  {
    LODWORD(v165) = 1640235008;
    DWORD1(v165) = HIDWORD(v553) - v553 + 1;
    *((void *)&v165 + 1) = 1;
    uint64_t v166 = *(void *)(v6 + 36288);
    long long v167 = *(_OWORD **)(v166 + 80);
    _OWORD *v167 = v165;
    *(void *)(v166 + 80) = v167 + 1;
    unint64_t v168 = 0x268D57000;
    uint64_t v169 = v558;
    goto LABEL_121;
  }
  signed int v170 = *(void **)(v6 + 36288);
  uint64_t v171 = v170[46];
  unint64_t v168 = 0x268D57000uLL;
  uint64_t v169 = v558;
  if (!v171)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 10, 0)) {
      goto LABEL_762;
    }
    uint64_t v171 = v170[46];
  }
  unint64_t v172 = v171 + 16;
  if (v172 > v170[45])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v170, 10, 0)) {
      goto LABEL_120;
    }
    unint64_t v172 = v170[46] + 16;
    if (v172 > v170[45]) {
      goto LABEL_762;
    }
  }
  v170[47] = v172;
LABEL_120:
  uint64_t v173 = *(void **)(v6 + 36288);
  unint64_t v174 = (_OWORD *)v173[46];
  unint64_t v175 = (unint64_t)v174 + v173[48];
  v35[2] = v175;
  *unint64_t v174 = xmmword_242EA8760;
  v173[46] = v174 + 1;
  uint64_t v176 = v173[10];
  v173[10] = v176 + 12;
  *(void *)uint64_t v176 = v175 & 0xFFFF00000000 | 0x64040000;
  *(_DWORD *)(v176 + 8) = v175 & 0xFFFFFFFC;
LABEL_121:
  ++*(_DWORD *)(v6 + 1524);
  v131[48] = 0x5F700000000000;
  uint64_t v177 = *(int *)(v168 + 1996);
  if (*(unsigned char *)(*(void *)(v124 + v177) + 396))
  {
    uint64_t v178 = v130[35];
    uint64_t v179 = *(void *)(v178 + 32);
    if (v179)
    {
      uint64_t v180 = *(void *)(v178 + 24);
      BOOL v181 = (*(unsigned __int8 *)(v180 + 1050) | *(unsigned __int8 *)(v179 + 1050)) != 0;
      *(unsigned char *)(v130[32] + 472) |= *(_DWORD *)(v178 + 836) != 0;
      uint64_t v182 = *(void *)v169;
      if (!*(void *)v169)
      {
        uint64_t v530 = *(void *)(v169 + 32);
        if (!v530) {
          goto LABEL_765;
        }
        uint64_t v182 = (*(uint64_t (**)(uint64_t))(*(void *)v530 + 48))(v530);
        *(void *)uint64_t v169 = v182;
        uint64_t v531 = v130[35];
        uint64_t v180 = *(void *)(v531 + 24);
        uint64_t v179 = *(void *)(v531 + 32);
      }
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpill(v182, v180, v179);
      uint64_t v178 = v130[35];
      uint64_t v183 = *(void *)(v178 + 8);
      if (v183)
      {
LABEL_125:
        *(unsigned char *)(v130[32] + 466) |= *(unsigned char *)(v183 + 1050);
        v131[48] |= 5uLL;
        *((_DWORD *)v130 + 12) = 1;
        int v184 = *(_DWORD *)(v178 + 44);
        int v185 = *((_DWORD *)v130 + 1);
        if (v184 > v185)
        {
          *((_DWORD *)v130 + 1) = v184;
          *(_DWORD *)uint64_t v130 = *(_DWORD *)(v178 + 40);
          *(_OWORD *)(v6 + 38704) = *(_OWORD *)(v178 + 48);
        }
        BOOL v186 = v184 > v185;
        int v187 = *(_DWORD *)(v178 + 64);
        int v188 = *((_DWORD *)v130 + 6);
        BOOL v189 = v188 < v187;
        if (v188 > v187) {
          int v187 = *((_DWORD *)v130 + 6);
        }
        *((_DWORD *)v130 + 6) = v187;
        int v190 = v189 || v186;
        if (*(void *)v178) {
          goto LABEL_133;
        }
        goto LABEL_144;
      }
    }
    else
    {
      BOOL v181 = 0;
      uint64_t v183 = *(void *)(v178 + 8);
      if (v183) {
        goto LABEL_125;
      }
    }
    int v190 = 0;
    *(unsigned char *)(v130[32] + 466) |= v181;
    if (*(void *)v178)
    {
LABEL_133:
      v131[48] |= 6uLL;
      char v191 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(v6 + 38816, (_DWORD *)(v178 + 72), (_DWORD *)(v6 + 1976));
LABEL_145:
      char v196 = v190 != 0;
      goto LABEL_203;
    }
LABEL_144:
    char v191 = 0;
    goto LABEL_145;
  }
  *(unsigned char *)(v130[32] + 466) = 1;
  uint64_t v192 = *(void *)(v124 + v177);
  if (*(unsigned char *)(v192 + 439))
  {
    unsigned __int8 v193 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(v6 + 1456) + 808) + 7834));
    *(unsigned char *)(v130[32] + 472) |= v193 & 1;
    unsigned __int8 v194 = atomic_load((unsigned __int8 *)(*(void *)(*(void *)(v6 + 1456) + 808) + 7835));
    *(unsigned char *)(v130[32] + 1304) |= v194 & 1;
    uint64_t v177 = *(int *)(v168 + 1996);
    uint64_t v192 = *(void *)(v124 + v177);
  }
  uint64_t v195 = *(void *)(v6 + 1456);
  if (!*(unsigned char *)(v192 + 440))
  {
    uint64_t v202 = *(void *)(*(void *)(v195 + 808) + 7392);
    int v203 = *(_DWORD *)(v202 + 4);
    int v204 = *((_DWORD *)v130 + 1);
    if (v203 > v204)
    {
      *((_DWORD *)v130 + 1) = v203;
      *(_DWORD *)uint64_t v130 = *(_DWORD *)v202;
      *(_OWORD *)(v6 + 38704) = *(_OWORD *)(v202 + 8);
    }
    int32x2_t v205 = (int32x2_t)v130[3];
    __int32 v206 = v205.i32[1];
    int v207 = *(_DWORD *)(v202 + 24);
    int32x2_t v208 = vrev64_s32(v205);
    __int32 v209 = v205.i32[0];
    if (v205.i32[0] <= v207) {
      __int32 v209 = *(_DWORD *)(v202 + 24);
    }
    *((_DWORD *)v130 + 6) = v209;
    int v210 = *(_DWORD *)(v202 + 28);
    if (v205.i32[1] <= v210) {
      __int32 v206 = *(_DWORD *)(v202 + 28);
    }
    *((_DWORD *)v130 + 7) = v206;
    int v211 = *(_DWORD *)(v202 + 32);
    int v213 = *((_DWORD *)v130 + 8);
    int v212 = *((_DWORD *)v130 + 9);
    BOOL v214 = v213 < v211;
    if (v213 > v211) {
      int v211 = *((_DWORD *)v130 + 8);
    }
    *((_DWORD *)v130 + 8) = v211;
    int v215 = *(_DWORD *)(v202 + 36);
    BOOL v216 = v212 < v215;
    if (v212 > v215) {
      int v215 = v212;
    }
    *((_DWORD *)v130 + 9) = v215;
    signed int v217 = *(_DWORD *)(v202 + 40);
    signed int v218 = *((_DWORD *)v130 + 10);
    signed int v219 = *((_DWORD *)v130 + 11);
    if (v218 <= v217) {
      int v220 = *(_DWORD *)(v202 + 40);
    }
    else {
      int v220 = *((_DWORD *)v130 + 10);
    }
    *((_DWORD *)v130 + 10) = v220;
    signed int v221 = *(_DWORD *)(v202 + 44);
    if (v219 <= v221) {
      int v222 = v221;
    }
    else {
      int v222 = v219;
    }
    v223.i64[0] = __PAIR64__(v218, v219);
    v223.u64[1] = (unint64_t)v208;
    BOOL v189 = v203 <= v204;
    v224.i64[0] = __PAIR64__(v217, v221);
    v224.i64[1] = __PAIR64__(v207, v210);
    *((_DWORD *)v130 + 11) = v222;
    char v225 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v224, v223))) | v214;
    char v226 = !v189 || v216;
    char v196 = v225 | v226;
    if (!*(unsigned char *)(*(void *)(v124 + v177) + 439)) {
      goto LABEL_182;
    }
    goto LABEL_166;
  }
  char v196 = 0;
  if (*(unsigned char *)(v192 + 439))
  {
LABEL_166:
    uint64_t v227 = *(void *)(*(void *)(v195 + 808) + 7416);
    int v228 = *(_DWORD *)(v227 + 4);
    int v229 = *((_DWORD *)v130 + 1);
    if (v228 > v229)
    {
      *((_DWORD *)v130 + 1) = v228;
      *(_DWORD *)uint64_t v130 = *(_DWORD *)v227;
      *(_OWORD *)(v6 + 38704) = *(_OWORD *)(v227 + 8);
    }
    BOOL v230 = v228 > v229;
    int v231 = *(_DWORD *)(v227 + 24);
    int32x2_t v232 = (int32x2_t)v130[3];
    __int32 v233 = v232.i32[1];
    int32x2_t v234 = vrev64_s32(v232);
    __int32 v235 = v232.i32[0];
    if (v232.i32[0] <= v231) {
      __int32 v235 = *(_DWORD *)(v227 + 24);
    }
    *((_DWORD *)v130 + 6) = v235;
    int v236 = *(_DWORD *)(v227 + 28);
    if (v232.i32[1] <= v236) {
      __int32 v233 = *(_DWORD *)(v227 + 28);
    }
    *((_DWORD *)v130 + 7) = v233;
    int v237 = *(_DWORD *)(v227 + 32);
    int v238 = *((_DWORD *)v130 + 8);
    int v239 = *((_DWORD *)v130 + 9);
    BOOL v240 = v238 < v237;
    if (v238 > v237) {
      int v237 = *((_DWORD *)v130 + 8);
    }
    *((_DWORD *)v130 + 8) = v237;
    int v241 = *(_DWORD *)(v227 + 36);
    BOOL v242 = v239 < v241;
    if (v239 > v241) {
      int v241 = v239;
    }
    *((_DWORD *)v130 + 9) = v241;
    signed int v243 = *(_DWORD *)(v227 + 40);
    signed int v245 = *((_DWORD *)v130 + 10);
    signed int v244 = *((_DWORD *)v130 + 11);
    if (v245 <= v243) {
      int v246 = *(_DWORD *)(v227 + 40);
    }
    else {
      int v246 = *((_DWORD *)v130 + 10);
    }
    *((_DWORD *)v130 + 10) = v246;
    signed int v247 = *(_DWORD *)(v227 + 44);
    v248.i64[0] = __PAIR64__(v245, v244);
    v248.u64[1] = (unint64_t)v234;
    v249.i64[0] = __PAIR64__(v243, v247);
    v249.i32[2] = v236;
    if (v244 > v247) {
      signed int v247 = v244;
    }
    v249.i32[3] = v231;
    *((_DWORD *)v130 + 11) = v247;
    v196 |= vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v249, v248))) | v240 | (v242 || v230);
  }
LABEL_182:
  uint64_t v250 = *(void *)(*(void *)(v195 + 808) + 7400);
  int v251 = *(_DWORD *)(v250 + 4);
  int v252 = *((_DWORD *)v130 + 31);
  if (v251 > v252)
  {
    *((_DWORD *)v130 + 31) = v251;
    *((_DWORD *)v130 + 30) = *(_DWORD *)v250;
    *(_OWORD *)(v6 + 38824) = *(_OWORD *)(v250 + 8);
  }
  int v253 = *(_DWORD *)(v250 + 24);
  int32x2_t v254 = (int32x2_t)v130[18];
  __int32 v255 = v254.i32[1];
  int32x2_t v256 = vrev64_s32(v254);
  __int32 v257 = v254.i32[0];
  if (v254.i32[0] <= v253) {
    __int32 v257 = *(_DWORD *)(v250 + 24);
  }
  *((_DWORD *)v130 + 36) = v257;
  int v258 = *(_DWORD *)(v250 + 28);
  if (v254.i32[1] <= v258) {
    __int32 v255 = *(_DWORD *)(v250 + 28);
  }
  *((_DWORD *)v130 + 37) = v255;
  int v259 = *(_DWORD *)(v250 + 32);
  int v261 = *((_DWORD *)v130 + 38);
  int v260 = *((_DWORD *)v130 + 39);
  BOOL v262 = v261 < v259;
  if (v261 > v259) {
    int v259 = *((_DWORD *)v130 + 38);
  }
  *((_DWORD *)v130 + 38) = v259;
  int v263 = *(_DWORD *)(v250 + 36);
  BOOL v264 = v260 < v263;
  if (v260 > v263) {
    int v263 = v260;
  }
  *((_DWORD *)v130 + 39) = v263;
  signed int v265 = *(_DWORD *)(v250 + 40);
  signed int v266 = *((_DWORD *)v130 + 40);
  signed int v267 = *((_DWORD *)v130 + 41);
  if (v266 <= v265) {
    int v268 = *(_DWORD *)(v250 + 40);
  }
  else {
    int v268 = *((_DWORD *)v130 + 40);
  }
  *((_DWORD *)v130 + 40) = v268;
  signed int v269 = *(_DWORD *)(v250 + 44);
  if (v267 <= v269) {
    int v270 = v269;
  }
  else {
    int v270 = v267;
  }
  v271.i64[0] = __PAIR64__(v266, v267);
  v271.u64[1] = (unint64_t)v256;
  v272.i64[0] = __PAIR64__(v265, v269);
  v272.i64[1] = __PAIR64__(v253, v258);
  BOOL v189 = v251 <= v252;
  *((_DWORD *)v130 + 41) = v270;
  char v273 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32(v272, v271))) | v262;
  char v274 = !v189 || v264;
  char v191 = v273 | v274;
  if (*(unsigned char *)(*(void *)(v124 + v177) + 398)) {
    AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(v6 + 1616), (unsigned int *)(*(void *)(*(void *)(v195 + 808) + 6016) + 24));
  }
LABEL_203:
  {
  }
  if ((v196 & 1) == 0)
  {
    if ((v191 & 1) == 0) {
      goto LABEL_206;
    }
LABEL_664:
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentUSCSpillBuffer(v6);
    if (v130[35]) {
      goto LABEL_208;
    }
    goto LABEL_207;
  }
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v6 + 38696, (__n128 *)(v130[32] + 304), 1);
  if (v191) {
    goto LABEL_664;
  }
LABEL_206:
  if (!v130[35])
  {
LABEL_207:
    uint64_t v275 = *v131;
    unint64_t v276 = v131[6] & 0xE7FFFFFFFFFFFFFFLL;
    uint64_t v277 = v131[36];
    uint64_t v278 = v131[48] | 0x30000000C0;
    unint64_t v279 = v131[42] & 0xE7FFFFFFFFFFFFFFLL;
    *(_OWORD *)(v6 + 78656) = 0u;
    *(_OWORD *)(v6 + 40000) = 0u;
    *((_OWORD *)v130 + 114) = 0u;
    *((_OWORD *)v130 + 48) = 0u;
    *(_OWORD *)(v6 + 86400) = 0u;
    *(_OWORD *)(v6 + 88480) = 0u;
    *(void *)(v6 + 68212) = 0;
    *(void *)(v6 + 68472) = 0;
    *uint64_t v131 = v275 | 0x1800000000000000;
    v131[6] = v276 | 0x1000000000000000;
    *(_OWORD *)(v6 + 79176) = 0u;
    *(_OWORD *)(v6 + 50192) = 0u;
    *((_OWORD *)v130 + 751) = 0u;
    *((_OWORD *)v130 + 685) = 0u;
    *(_OWORD *)(v6 + 87960) = 0u;
    *(_OWORD *)(v6 + 90040) = 0u;
    *(void *)(v6 + 77892) = 0;
    *(void *)(v6 + 77632) = 0;
    v131[36] = v277 | 0x1800000000000000;
    v131[42] = v279 | 0x1000000000000000;
    v131[48] = v278;
  }
LABEL_208:
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v6, 3);
  if (*(unsigned char *)(*(void *)(v124 + *(int *)(v168 + 1996)) + 396) && *(void *)(v130[35] + 32))
  {
    uint64_t v281 = *(void *)v169;
    if (!*(void *)v169)
    {
      uint64_t v532 = *(void *)(v169 + 32);
      if (!v532) {
        goto LABEL_765;
      }
      uint64_t v281 = (*(uint64_t (**)(uint64_t))(*(void *)v532 + 48))(v532);
      *(void *)uint64_t v169 = v281;
    }
    v131[48] |= 0x30uLL;
    *(unsigned char *)(v281 + 64) = 0;
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(v281, *(void *)(v281 + 32), *(void *)(v281 + 40), *(void *)(*(void *)(v281 + 8) + 38968), *(uint64x2_t **)(v281 + 80), *(uint64x2_t **)(v281 + 14464), (uint64x2_t *)(*(void *)(v281 + 8) + 49184), v280, 0, 0, 0, 0, 0, 0, (uint64_t)v131, 1u);
    *(unsigned char *)(v281 + 64) = 0;
  }
  else
  {
    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(v6, v130[33], v130[34], v6 + 38992, v6 + 49184, (uint64_t)v131, 1);
  }
  *(unsigned char *)(v169 + 2100) = 0;
  if (*(void *)(v6 + 1480)) {
    MTLResourceListAddResource();
  }
  uint64_t v282 = *(void *)(v124 + *(int *)(v168 + 1996));
  if (*(unsigned char *)(v282 + 439))
  {
    uint64_t v283 = *(void *)v169;
    uint64_t v284 = *(void *)v169;
    uint64_t v285 = *(void *)v169;
    if (*(void *)v169)
    {
LABEL_217:
      int v286 = (const void *)(v284 + 88);
      int v287 = (const void *)(v285 + 14472);
      uint64_t v288 = *(_OWORD **)(v283 + 80);
      uint64_t v549 = *(void *)(v283 + 14464);
      uint64_t v282 = *(void *)(v555 + *(int *)(v168 + 1996));
      goto LABEL_219;
    }
    uint64_t v527 = *(void *)(v169 + 32);
    if (v527)
    {
      uint64_t v283 = (*(uint64_t (**)(uint64_t))(*(void *)v527 + 48))(v527);
      *(void *)uint64_t v169 = v283;
      if (v283)
      {
LABEL_766:
        uint64_t v284 = v283;
        uint64_t v285 = v283;
        goto LABEL_217;
      }
      uint64_t v528 = *(void *)(v169 + 32);
      if (v528)
      {
        uint64_t v283 = (*(uint64_t (**)(uint64_t))(*(void *)v528 + 48))(v528);
        *(void *)uint64_t v169 = v283;
        if (v283)
        {
          uint64_t v284 = 0;
          uint64_t v285 = v283;
          goto LABEL_217;
        }
        uint64_t v529 = *(void *)(v169 + 32);
        if (v529)
        {
          uint64_t v283 = (*(uint64_t (**)(uint64_t))(*(void *)v529 + 48))(v529);
          uint64_t v284 = 0;
          uint64_t v285 = 0;
          *(void *)uint64_t v169 = v283;
          goto LABEL_217;
        }
      }
    }
LABEL_765:
    uint64_t v283 = std::__throw_bad_function_call[abi:nn180100]();
    goto LABEL_766;
  }
  int v286 = 0;
  int v287 = 0;
  uint64_t v288 = 0;
  uint64_t v549 = 0;
LABEL_219:
  unint64_t v545 = *(_DWORD **)(v6 + 1968);
  unint64_t v559 = (int8x8_t **)v130[35];
  long long v289 = *(_OWORD *)(v6 + 39872);
  long long v290 = *(_OWORD *)(v6 + 39904);
  long long v291 = *(_OWORD *)(v6 + 39856);
  v550[5] = *(_OWORD *)(v6 + 39888);
  v550[6] = v290;
  v550[3] = v291;
  v550[4] = v289;
  long long v292 = *(_OWORD *)(v6 + 39936);
  long long v293 = *(_OWORD *)(v6 + 39968);
  long long v294 = *(_OWORD *)(v6 + 39920);
  v550[9] = *(_OWORD *)(v6 + 39952);
  v550[10] = v293;
  v550[7] = v294;
  v550[8] = v292;
  long long v295 = *(_OWORD *)(v6 + 40000);
  long long v296 = *(_OWORD *)(v6 + 40032);
  long long v297 = *(_OWORD *)(v6 + 39984);
  v550[13] = *(_OWORD *)(v6 + 40016);
  v550[14] = v296;
  v550[11] = v297;
  v550[12] = v295;
  long long v298 = *(_OWORD *)(v6 + 39808);
  long long v299 = *(_OWORD *)(v6 + 39840);
  v550[1] = *(_OWORD *)(v6 + 39824);
  v550[2] = v299;
  *uint64_t v550 = v298;
  memcpy(v550 + 15, (const void *)(v6 + 59376), 0x24A8uLL);
  long long v300 = *(_OWORD *)(v6 + 50032);
  long long v301 = *(_OWORD *)(v6 + 50016);
  *uint64_t v552 = *(_OWORD *)(v6 + 50000);
  v552[1] = v301;
  v552[2] = v300;
  long long v302 = *(_OWORD *)(v6 + 50064);
  long long v303 = *(_OWORD *)(v6 + 50096);
  long long v304 = *(_OWORD *)(v6 + 50048);
  v552[5] = *(_OWORD *)(v6 + 50080);
  v552[6] = v303;
  v552[3] = v304;
  v552[4] = v302;
  long long v305 = *(_OWORD *)(v6 + 50128);
  long long v306 = *(_OWORD *)(v6 + 50160);
  long long v307 = *(_OWORD *)(v6 + 50112);
  v552[9] = *(_OWORD *)(v6 + 50144);
  v552[10] = v306;
  v552[7] = v307;
  v552[8] = v305;
  long long v308 = *(_OWORD *)(v6 + 50192);
  long long v309 = *(_OWORD *)(v6 + 50224);
  long long v310 = *(_OWORD *)(v6 + 50176);
  v552[13] = *(_OWORD *)(v6 + 50208);
  v552[14] = v309;
  v552[11] = v310;
  v552[12] = v308;
  memcpy(v552 + 15, (const void *)(v6 + 68760), 0x24D0uLL);
  if (!*(unsigned char *)(v282 + 439)) {
    goto LABEL_225;
  }
  uint64_t v311 = *(void **)(v6 + 36288);
  unint64_t v312 = v311[18] + 9591;
  if (v312 <= v311[17]) {
    goto LABEL_221;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0))
  {
    unint64_t v312 = v311[18] + 9591;
    if (v312 > v311[17]) {
      goto LABEL_762;
    }
LABEL_221:
    v311[19] = v312;
  }
  unint64_t v313 = *(void **)(v6 + 36288);
  unint64_t v314 = v313[17];
  uint64_t v315 = (_OWORD *)((v313[18] + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v316 = v313[20];
  v313[18] = (char *)v315 + 9560;
  unint64_t v317 = (unint64_t)v315 + 19015;
  if ((unint64_t)v315 + 19015 > v314)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v313, 3, 0)) {
      goto LABEL_224;
    }
    unint64_t v317 = v313[18] + 9455;
    if (v317 > v313[17]) {
      goto LABEL_762;
    }
  }
  v313[19] = v317;
LABEL_224:
  uint64_t v537 = (uint64_t)v315 + v316;
  uint64_t v318 = *(void *)(v6 + 36288);
  int v319 = (_OWORD *)((*(void *)(v318 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  *(void *)int v538 = (char *)v319 + *(void *)(v318 + 160);
  *(void *)(v318 + 144) = v319 + 589;
  long long v320 = v288[58];
  long long v321 = v288[59];
  long long v322 = v288[61];
  v315[9] = v288[60];
  v315[10] = v322;
  v315[7] = v320;
  v315[8] = v321;
  long long v323 = v288[54];
  long long v324 = v288[55];
  long long v325 = v288[57];
  v315[5] = v288[56];
  v315[6] = v325;
  v315[3] = v323;
  v315[4] = v324;
  long long v326 = v288[51];
  long long v327 = v288[53];
  v315[1] = v288[52];
  v315[2] = v327;
  *uint64_t v315 = v326;
  long long v328 = v288[62];
  long long v329 = v288[63];
  long long v330 = v288[65];
  v315[13] = v288[64];
  v315[14] = v330;
  v315[11] = v328;
  v315[12] = v329;
  memcpy(v315 + 15, v286, 0x2468uLL);
  long long v332 = *(_OWORD *)(v549 + 832);
  long long v331 = *(_OWORD *)(v549 + 848);
  *int v319 = *(_OWORD *)(v549 + 816);
  v319[1] = v332;
  v319[2] = v331;
  long long v333 = *(_OWORD *)(v549 + 912);
  long long v335 = *(_OWORD *)(v549 + 864);
  long long v334 = *(_OWORD *)(v549 + 880);
  v319[5] = *(_OWORD *)(v549 + 896);
  v319[6] = v333;
  v319[3] = v335;
  v319[4] = v334;
  long long v336 = *(_OWORD *)(v549 + 976);
  long long v338 = *(_OWORD *)(v549 + 928);
  long long v337 = *(_OWORD *)(v549 + 944);
  v319[9] = *(_OWORD *)(v549 + 960);
  v319[10] = v336;
  v319[7] = v338;
  v319[8] = v337;
  long long v339 = *(_OWORD *)(v549 + 1008);
  long long v340 = *(_OWORD *)(v549 + 1040);
  long long v341 = *(_OWORD *)(v549 + 992);
  v319[13] = *(_OWORD *)(v549 + 1024);
  v319[14] = v340;
  v319[11] = v341;
  v319[12] = v339;
  memcpy(v319 + 15, v287, 0x23E0uLL);
LABEL_225:
  int v539 = v288;
  if (!*(unsigned char *)(v282 + 397))
  {
    unint64_t v542 = 0;
    unint64_t v543 = 0;
    __srCC_SHA256_CTX c = 0;
    unint64_t v354 = 0;
    uint64_t v355 = 0;
    goto LABEL_451;
  }
  if (!*(unsigned char *)(v282 + 439))
  {
    int v353 = 0;
    uint64_t v352 = 0;
    goto LABEL_374;
  }
  uint64_t v342 = *(void **)(v6 + 36288);
  unint64_t v343 = v342[18] + 311;
  if (v343 <= v342[17]) {
    goto LABEL_228;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0))
  {
    unint64_t v343 = v342[18] + 311;
    if (v343 > v342[17]) {
      goto LABEL_762;
    }
LABEL_228:
    v342[19] = v343;
  }
  uint64_t v344 = *(void *)(v6 + 36288);
  int v345 = (void *)((*(void *)(v344 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v346 = *(void *)(v344 + 160);
  *(void *)(v344 + 144) = v345 + 35;
  memcpy(v345, (char *)v288 + 536, 0x118uLL);
  if (*v345)
  {
    if (v345[1]) {
      goto LABEL_231;
    }
  }
  else
  {
    *int v345 = 0;
    if (v345[1])
    {
LABEL_231:
      if (v345[2]) {
        goto LABEL_232;
      }
      goto LABEL_306;
    }
  }
  v345[1] = 0;
  if (v345[2])
  {
LABEL_232:
    if (v345[3]) {
      goto LABEL_233;
    }
    goto LABEL_307;
  }
LABEL_306:
  v345[2] = 0;
  if (v345[3])
  {
LABEL_233:
    if (v345[4]) {
      goto LABEL_234;
    }
    goto LABEL_308;
  }
LABEL_307:
  v345[3] = 0;
  if (v345[4])
  {
LABEL_234:
    if (v345[5]) {
      goto LABEL_235;
    }
    goto LABEL_309;
  }
LABEL_308:
  v345[4] = 0;
  if (v345[5])
  {
LABEL_235:
    if (v345[6]) {
      goto LABEL_236;
    }
    goto LABEL_310;
  }
LABEL_309:
  v345[5] = 0;
  if (v345[6])
  {
LABEL_236:
    if (v345[7]) {
      goto LABEL_237;
    }
    goto LABEL_311;
  }
LABEL_310:
  v345[6] = 0;
  if (v345[7])
  {
LABEL_237:
    if (v345[8]) {
      goto LABEL_238;
    }
    goto LABEL_312;
  }
LABEL_311:
  v345[7] = 0;
  if (v345[8])
  {
LABEL_238:
    if (v345[9]) {
      goto LABEL_239;
    }
    goto LABEL_313;
  }
LABEL_312:
  v345[8] = 0;
  if (v345[9])
  {
LABEL_239:
    if (v345[10]) {
      goto LABEL_240;
    }
    goto LABEL_314;
  }
LABEL_313:
  v345[9] = 0;
  if (v345[10])
  {
LABEL_240:
    if (v345[11]) {
      goto LABEL_241;
    }
    goto LABEL_315;
  }
LABEL_314:
  v345[10] = 0;
  if (v345[11])
  {
LABEL_241:
    if (v345[12]) {
      goto LABEL_242;
    }
    goto LABEL_316;
  }
LABEL_315:
  v345[11] = 0;
  if (v345[12])
  {
LABEL_242:
    if (v345[13]) {
      goto LABEL_243;
    }
    goto LABEL_317;
  }
LABEL_316:
  v345[12] = 0;
  if (v345[13])
  {
LABEL_243:
    if (v345[14]) {
      goto LABEL_244;
    }
    goto LABEL_318;
  }
LABEL_317:
  v345[13] = 0;
  if (v345[14])
  {
LABEL_244:
    if (v345[15]) {
      goto LABEL_245;
    }
    goto LABEL_319;
  }
LABEL_318:
  v345[14] = 0;
  if (v345[15])
  {
LABEL_245:
    if (v345[16]) {
      goto LABEL_246;
    }
    goto LABEL_320;
  }
LABEL_319:
  v345[15] = 0;
  if (v345[16])
  {
LABEL_246:
    if (v345[17]) {
      goto LABEL_247;
    }
    goto LABEL_321;
  }
LABEL_320:
  v345[16] = 0;
  if (v345[17])
  {
LABEL_247:
    if (v345[18]) {
      goto LABEL_248;
    }
    goto LABEL_322;
  }
LABEL_321:
  v345[17] = 0;
  if (v345[18])
  {
LABEL_248:
    if (v345[19]) {
      goto LABEL_249;
    }
    goto LABEL_323;
  }
LABEL_322:
  v345[18] = 0;
  if (v345[19])
  {
LABEL_249:
    if (v345[20]) {
      goto LABEL_250;
    }
    goto LABEL_324;
  }
LABEL_323:
  v345[19] = 0;
  if (v345[20])
  {
LABEL_250:
    if (v345[21]) {
      goto LABEL_251;
    }
    goto LABEL_325;
  }
LABEL_324:
  v345[20] = 0;
  if (v345[21])
  {
LABEL_251:
    if (v345[22]) {
      goto LABEL_252;
    }
    goto LABEL_326;
  }
LABEL_325:
  v345[21] = 0;
  if (v345[22])
  {
LABEL_252:
    if (v345[23]) {
      goto LABEL_253;
    }
    goto LABEL_327;
  }
LABEL_326:
  v345[22] = 0;
  if (v345[23])
  {
LABEL_253:
    if (v345[24]) {
      goto LABEL_254;
    }
    goto LABEL_328;
  }
LABEL_327:
  v345[23] = 0;
  if (v345[24])
  {
LABEL_254:
    if (v345[25]) {
      goto LABEL_255;
    }
    goto LABEL_329;
  }
LABEL_328:
  v345[24] = 0;
  if (v345[25])
  {
LABEL_255:
    if (v345[26]) {
      goto LABEL_256;
    }
    goto LABEL_330;
  }
LABEL_329:
  v345[25] = 0;
  if (v345[26])
  {
LABEL_256:
    if (v345[27]) {
      goto LABEL_257;
    }
    goto LABEL_331;
  }
LABEL_330:
  v345[26] = 0;
  if (v345[27])
  {
LABEL_257:
    if (v345[28]) {
      goto LABEL_258;
    }
    goto LABEL_332;
  }
LABEL_331:
  v345[27] = 0;
  if (v345[28])
  {
LABEL_258:
    if (v345[29]) {
      goto LABEL_259;
    }
    goto LABEL_333;
  }
LABEL_332:
  v345[28] = 0;
  if (v345[29])
  {
LABEL_259:
    if (v345[30]) {
      goto LABEL_260;
    }
    goto LABEL_334;
  }
LABEL_333:
  v345[29] = 0;
  if (v345[30])
  {
LABEL_260:
    if (v345[31]) {
      goto LABEL_261;
    }
    goto LABEL_335;
  }
LABEL_334:
  v345[30] = 0;
  if (v345[31])
  {
LABEL_261:
    if (v345[32]) {
      goto LABEL_262;
    }
    goto LABEL_336;
  }
LABEL_335:
  v345[31] = 0;
  if (v345[32])
  {
LABEL_262:
    if (v345[33]) {
      goto LABEL_263;
    }
LABEL_337:
    v345[33] = 0;
    if (v345[34]) {
      goto LABEL_264;
    }
    goto LABEL_338;
  }
LABEL_336:
  v345[32] = 0;
  if (!v345[33]) {
    goto LABEL_337;
  }
LABEL_263:
  if (v345[34]) {
    goto LABEL_264;
  }
LABEL_338:
  v345[34] = 0;
LABEL_264:
  int v347 = *(void **)(v6 + 36288);
  unint64_t v348 = v347[18] + 311;
  if (v348 <= v347[17])
  {
LABEL_265:
    v347[19] = v348;
    goto LABEL_266;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0))
  {
    unint64_t v348 = v347[18] + 311;
    if (v348 > v347[17]) {
      goto LABEL_762;
    }
    goto LABEL_265;
  }
LABEL_266:
  uint64_t v349 = *(void *)(v6 + 36288);
  BOOL v350 = (void *)((*(void *)(v349 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v351 = *(void *)(v349 + 160);
  *(void *)(v349 + 144) = v350 + 35;
  memcpy(v350, (const void *)(v549 + 536), 0x118uLL);
  if (*v350)
  {
    if (v350[1]) {
      goto LABEL_268;
    }
  }
  else
  {
    *BOOL v350 = 0;
    if (v350[1])
    {
LABEL_268:
      if (v350[2]) {
        goto LABEL_269;
      }
      goto LABEL_341;
    }
  }
  v350[1] = 0;
  if (v350[2])
  {
LABEL_269:
    if (v350[3]) {
      goto LABEL_270;
    }
    goto LABEL_342;
  }
LABEL_341:
  v350[2] = 0;
  if (v350[3])
  {
LABEL_270:
    if (v350[4]) {
      goto LABEL_271;
    }
    goto LABEL_343;
  }
LABEL_342:
  v350[3] = 0;
  if (v350[4])
  {
LABEL_271:
    if (v350[5]) {
      goto LABEL_272;
    }
    goto LABEL_344;
  }
LABEL_343:
  v350[4] = 0;
  if (v350[5])
  {
LABEL_272:
    if (v350[6]) {
      goto LABEL_273;
    }
    goto LABEL_345;
  }
LABEL_344:
  v350[5] = 0;
  if (v350[6])
  {
LABEL_273:
    if (v350[7]) {
      goto LABEL_274;
    }
    goto LABEL_346;
  }
LABEL_345:
  v350[6] = 0;
  if (v350[7])
  {
LABEL_274:
    if (v350[8]) {
      goto LABEL_275;
    }
    goto LABEL_347;
  }
LABEL_346:
  v350[7] = 0;
  if (v350[8])
  {
LABEL_275:
    if (v350[9]) {
      goto LABEL_276;
    }
    goto LABEL_348;
  }
LABEL_347:
  v350[8] = 0;
  if (v350[9])
  {
LABEL_276:
    if (v350[10]) {
      goto LABEL_277;
    }
    goto LABEL_349;
  }
LABEL_348:
  v350[9] = 0;
  if (v350[10])
  {
LABEL_277:
    if (v350[11]) {
      goto LABEL_278;
    }
    goto LABEL_350;
  }
LABEL_349:
  v350[10] = 0;
  if (v350[11])
  {
LABEL_278:
    if (v350[12]) {
      goto LABEL_279;
    }
    goto LABEL_351;
  }
LABEL_350:
  v350[11] = 0;
  if (v350[12])
  {
LABEL_279:
    if (v350[13]) {
      goto LABEL_280;
    }
    goto LABEL_352;
  }
LABEL_351:
  v350[12] = 0;
  if (v350[13])
  {
LABEL_280:
    if (v350[14]) {
      goto LABEL_281;
    }
    goto LABEL_353;
  }
LABEL_352:
  v350[13] = 0;
  if (v350[14])
  {
LABEL_281:
    if (v350[15]) {
      goto LABEL_282;
    }
    goto LABEL_354;
  }
LABEL_353:
  v350[14] = 0;
  if (v350[15])
  {
LABEL_282:
    if (v350[16]) {
      goto LABEL_283;
    }
    goto LABEL_355;
  }
LABEL_354:
  v350[15] = 0;
  if (v350[16])
  {
LABEL_283:
    if (v350[17]) {
      goto LABEL_284;
    }
    goto LABEL_356;
  }
LABEL_355:
  v350[16] = 0;
  if (v350[17])
  {
LABEL_284:
    if (v350[18]) {
      goto LABEL_285;
    }
    goto LABEL_357;
  }
LABEL_356:
  v350[17] = 0;
  if (v350[18])
  {
LABEL_285:
    if (v350[19]) {
      goto LABEL_286;
    }
    goto LABEL_358;
  }
LABEL_357:
  v350[18] = 0;
  if (v350[19])
  {
LABEL_286:
    if (v350[20]) {
      goto LABEL_287;
    }
    goto LABEL_359;
  }
LABEL_358:
  v350[19] = 0;
  if (v350[20])
  {
LABEL_287:
    if (v350[21]) {
      goto LABEL_288;
    }
    goto LABEL_360;
  }
LABEL_359:
  v350[20] = 0;
  if (v350[21])
  {
LABEL_288:
    if (v350[22]) {
      goto LABEL_289;
    }
    goto LABEL_361;
  }
LABEL_360:
  v350[21] = 0;
  if (v350[22])
  {
LABEL_289:
    if (v350[23]) {
      goto LABEL_290;
    }
    goto LABEL_362;
  }
LABEL_361:
  v350[22] = 0;
  if (v350[23])
  {
LABEL_290:
    if (v350[24]) {
      goto LABEL_291;
    }
    goto LABEL_363;
  }
LABEL_362:
  v350[23] = 0;
  if (v350[24])
  {
LABEL_291:
    if (v350[25]) {
      goto LABEL_292;
    }
    goto LABEL_364;
  }
LABEL_363:
  v350[24] = 0;
  if (v350[25])
  {
LABEL_292:
    if (v350[26]) {
      goto LABEL_293;
    }
    goto LABEL_365;
  }
LABEL_364:
  v350[25] = 0;
  if (v350[26])
  {
LABEL_293:
    if (v350[27]) {
      goto LABEL_294;
    }
    goto LABEL_366;
  }
LABEL_365:
  v350[26] = 0;
  if (v350[27])
  {
LABEL_294:
    if (v350[28]) {
      goto LABEL_295;
    }
    goto LABEL_367;
  }
LABEL_366:
  v350[27] = 0;
  if (v350[28])
  {
LABEL_295:
    if (v350[29]) {
      goto LABEL_296;
    }
    goto LABEL_368;
  }
LABEL_367:
  v350[28] = 0;
  if (v350[29])
  {
LABEL_296:
    if (v350[30]) {
      goto LABEL_297;
    }
    goto LABEL_369;
  }
LABEL_368:
  v350[29] = 0;
  if (v350[30])
  {
LABEL_297:
    if (v350[31]) {
      goto LABEL_298;
    }
LABEL_370:
    v350[31] = 0;
    if (v350[32]) {
      goto LABEL_299;
    }
    goto LABEL_371;
  }
LABEL_369:
  v350[30] = 0;
  if (!v350[31]) {
    goto LABEL_370;
  }
LABEL_298:
  if (v350[32]) {
    goto LABEL_299;
  }
LABEL_371:
  v350[32] = 0;
LABEL_299:
  uint64_t v352 = (char *)v345 + v346;
  int v353 = (char *)v350 + v351;
  if (v350[33])
  {
    if (v350[34]) {
      goto LABEL_374;
    }
  }
  else
  {
    v350[33] = 0;
    if (v350[34]) {
      goto LABEL_374;
    }
  }
  v350[34] = 0;
LABEL_374:
  unsigned int v356 = *(void **)(v6 + 36288);
  unint64_t v357 = v356[18] + 311;
  if (v357 <= v356[17])
  {
LABEL_375:
    v356[19] = v357;
    goto LABEL_376;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0))
  {
    unint64_t v357 = v356[18] + 311;
    if (v357 > v356[17]) {
      goto LABEL_762;
    }
    goto LABEL_375;
  }
LABEL_376:
  uint64_t v358 = *(void *)(v6 + 36288);
  unsigned int v359 = (void *)((*(void *)(v358 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v360 = *(void *)(v358 + 160);
  *(void *)(v358 + 144) = v359 + 35;
  memcpy(v359, (const void *)(v6 + 39528), 0x118uLL);
  if (*v359)
  {
    if (v359[1]) {
      goto LABEL_378;
    }
  }
  else
  {
    *unsigned int v359 = 0;
    if (v359[1])
    {
LABEL_378:
      if (v359[2]) {
        goto LABEL_379;
      }
      goto LABEL_464;
    }
  }
  v359[1] = 0;
  if (v359[2])
  {
LABEL_379:
    if (v359[3]) {
      goto LABEL_380;
    }
    goto LABEL_465;
  }
LABEL_464:
  v359[2] = 0;
  if (v359[3])
  {
LABEL_380:
    if (v359[4]) {
      goto LABEL_381;
    }
    goto LABEL_466;
  }
LABEL_465:
  v359[3] = 0;
  if (v359[4])
  {
LABEL_381:
    if (v359[5]) {
      goto LABEL_382;
    }
    goto LABEL_467;
  }
LABEL_466:
  v359[4] = 0;
  if (v359[5])
  {
LABEL_382:
    if (v359[6]) {
      goto LABEL_383;
    }
    goto LABEL_468;
  }
LABEL_467:
  v359[5] = 0;
  if (v359[6])
  {
LABEL_383:
    if (v359[7]) {
      goto LABEL_384;
    }
    goto LABEL_469;
  }
LABEL_468:
  v359[6] = 0;
  if (v359[7])
  {
LABEL_384:
    if (v359[8]) {
      goto LABEL_385;
    }
    goto LABEL_470;
  }
LABEL_469:
  v359[7] = 0;
  if (v359[8])
  {
LABEL_385:
    if (v359[9]) {
      goto LABEL_386;
    }
    goto LABEL_471;
  }
LABEL_470:
  v359[8] = 0;
  if (v359[9])
  {
LABEL_386:
    if (v359[10]) {
      goto LABEL_387;
    }
    goto LABEL_472;
  }
LABEL_471:
  v359[9] = 0;
  if (v359[10])
  {
LABEL_387:
    if (v359[11]) {
      goto LABEL_388;
    }
    goto LABEL_473;
  }
LABEL_472:
  v359[10] = 0;
  if (v359[11])
  {
LABEL_388:
    if (v359[12]) {
      goto LABEL_389;
    }
    goto LABEL_474;
  }
LABEL_473:
  v359[11] = 0;
  if (v359[12])
  {
LABEL_389:
    if (v359[13]) {
      goto LABEL_390;
    }
    goto LABEL_475;
  }
LABEL_474:
  v359[12] = 0;
  if (v359[13])
  {
LABEL_390:
    if (v359[14]) {
      goto LABEL_391;
    }
    goto LABEL_476;
  }
LABEL_475:
  v359[13] = 0;
  if (v359[14])
  {
LABEL_391:
    if (v359[15]) {
      goto LABEL_392;
    }
    goto LABEL_477;
  }
LABEL_476:
  v359[14] = 0;
  if (v359[15])
  {
LABEL_392:
    if (v359[16]) {
      goto LABEL_393;
    }
    goto LABEL_478;
  }
LABEL_477:
  v359[15] = 0;
  if (v359[16])
  {
LABEL_393:
    if (v359[17]) {
      goto LABEL_394;
    }
    goto LABEL_479;
  }
LABEL_478:
  v359[16] = 0;
  if (v359[17])
  {
LABEL_394:
    if (v359[18]) {
      goto LABEL_395;
    }
    goto LABEL_480;
  }
LABEL_479:
  v359[17] = 0;
  if (v359[18])
  {
LABEL_395:
    if (v359[19]) {
      goto LABEL_396;
    }
    goto LABEL_481;
  }
LABEL_480:
  v359[18] = 0;
  if (v359[19])
  {
LABEL_396:
    if (v359[20]) {
      goto LABEL_397;
    }
    goto LABEL_482;
  }
LABEL_481:
  v359[19] = 0;
  if (v359[20])
  {
LABEL_397:
    if (v359[21]) {
      goto LABEL_398;
    }
    goto LABEL_483;
  }
LABEL_482:
  v359[20] = 0;
  if (v359[21])
  {
LABEL_398:
    if (v359[22]) {
      goto LABEL_399;
    }
    goto LABEL_484;
  }
LABEL_483:
  v359[21] = 0;
  if (v359[22])
  {
LABEL_399:
    if (v359[23]) {
      goto LABEL_400;
    }
    goto LABEL_485;
  }
LABEL_484:
  v359[22] = 0;
  if (v359[23])
  {
LABEL_400:
    if (v359[24]) {
      goto LABEL_401;
    }
    goto LABEL_486;
  }
LABEL_485:
  v359[23] = 0;
  if (v359[24])
  {
LABEL_401:
    if (v359[25]) {
      goto LABEL_402;
    }
    goto LABEL_487;
  }
LABEL_486:
  v359[24] = 0;
  if (v359[25])
  {
LABEL_402:
    if (v359[26]) {
      goto LABEL_403;
    }
    goto LABEL_488;
  }
LABEL_487:
  v359[25] = 0;
  if (v359[26])
  {
LABEL_403:
    if (v359[27]) {
      goto LABEL_404;
    }
    goto LABEL_489;
  }
LABEL_488:
  v359[26] = 0;
  if (v359[27])
  {
LABEL_404:
    if (v359[28]) {
      goto LABEL_405;
    }
    goto LABEL_490;
  }
LABEL_489:
  v359[27] = 0;
  if (v359[28])
  {
LABEL_405:
    if (v359[29]) {
      goto LABEL_406;
    }
    goto LABEL_491;
  }
LABEL_490:
  v359[28] = 0;
  if (v359[29])
  {
LABEL_406:
    if (v359[30]) {
      goto LABEL_407;
    }
    goto LABEL_492;
  }
LABEL_491:
  v359[29] = 0;
  if (v359[30])
  {
LABEL_407:
    if (v359[31]) {
      goto LABEL_408;
    }
    goto LABEL_493;
  }
LABEL_492:
  v359[30] = 0;
  if (v359[31])
  {
LABEL_408:
    if (v359[32]) {
      goto LABEL_409;
    }
    goto LABEL_494;
  }
LABEL_493:
  v359[31] = 0;
  if (v359[32])
  {
LABEL_409:
    if (v359[33]) {
      goto LABEL_410;
    }
LABEL_495:
    v359[33] = 0;
    if (v359[34]) {
      goto LABEL_411;
    }
    goto LABEL_496;
  }
LABEL_494:
  v359[32] = 0;
  if (!v359[33]) {
    goto LABEL_495;
  }
LABEL_410:
  if (v359[34]) {
    goto LABEL_411;
  }
LABEL_496:
  v359[34] = 0;
LABEL_411:
  __int32 v361 = *(void **)(v6 + 36288);
  unint64_t v362 = v361[22] + 311;
  if (v362 <= v361[21])
  {
LABEL_412:
    v361[23] = v362;
    goto LABEL_413;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 4, 0))
  {
    unint64_t v362 = v361[22] + 311;
    if (v362 > v361[21]) {
      goto LABEL_762;
    }
    goto LABEL_412;
  }
LABEL_413:
  unint64_t v542 = (unint64_t)v352;
  unint64_t v543 = (unint64_t)v353;
  uint64_t v363 = *(void *)(v6 + 36288);
  uint64_t v364 = (void *)((*(void *)(v363 + 176) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v365 = *(void *)(v363 + 192);
  *(void *)(v363 + 176) = v364 + 35;
  memcpy(v364, (const void *)(v6 + 49720), 0x118uLL);
  if (*v364)
  {
    if (v364[1]) {
      goto LABEL_415;
    }
  }
  else
  {
    *uint64_t v364 = 0;
    if (v364[1])
    {
LABEL_415:
      if (v364[2]) {
        goto LABEL_416;
      }
      goto LABEL_499;
    }
  }
  v364[1] = 0;
  if (v364[2])
  {
LABEL_416:
    if (v364[3]) {
      goto LABEL_417;
    }
    goto LABEL_500;
  }
LABEL_499:
  v364[2] = 0;
  if (v364[3])
  {
LABEL_417:
    if (v364[4]) {
      goto LABEL_418;
    }
    goto LABEL_501;
  }
LABEL_500:
  v364[3] = 0;
  if (v364[4])
  {
LABEL_418:
    if (v364[5]) {
      goto LABEL_419;
    }
    goto LABEL_502;
  }
LABEL_501:
  v364[4] = 0;
  if (v364[5])
  {
LABEL_419:
    if (v364[6]) {
      goto LABEL_420;
    }
    goto LABEL_503;
  }
LABEL_502:
  v364[5] = 0;
  if (v364[6])
  {
LABEL_420:
    if (v364[7]) {
      goto LABEL_421;
    }
    goto LABEL_504;
  }
LABEL_503:
  v364[6] = 0;
  if (v364[7])
  {
LABEL_421:
    if (v364[8]) {
      goto LABEL_422;
    }
    goto LABEL_505;
  }
LABEL_504:
  v364[7] = 0;
  if (v364[8])
  {
LABEL_422:
    if (v364[9]) {
      goto LABEL_423;
    }
    goto LABEL_506;
  }
LABEL_505:
  v364[8] = 0;
  if (v364[9])
  {
LABEL_423:
    if (v364[10]) {
      goto LABEL_424;
    }
    goto LABEL_507;
  }
LABEL_506:
  v364[9] = 0;
  if (v364[10])
  {
LABEL_424:
    if (v364[11]) {
      goto LABEL_425;
    }
    goto LABEL_508;
  }
LABEL_507:
  v364[10] = 0;
  if (v364[11])
  {
LABEL_425:
    if (v364[12]) {
      goto LABEL_426;
    }
    goto LABEL_509;
  }
LABEL_508:
  v364[11] = 0;
  if (v364[12])
  {
LABEL_426:
    if (v364[13]) {
      goto LABEL_427;
    }
    goto LABEL_510;
  }
LABEL_509:
  v364[12] = 0;
  if (v364[13])
  {
LABEL_427:
    if (v364[14]) {
      goto LABEL_428;
    }
    goto LABEL_511;
  }
LABEL_510:
  v364[13] = 0;
  if (v364[14])
  {
LABEL_428:
    if (v364[15]) {
      goto LABEL_429;
    }
    goto LABEL_512;
  }
LABEL_511:
  v364[14] = 0;
  if (v364[15])
  {
LABEL_429:
    if (v364[16]) {
      goto LABEL_430;
    }
    goto LABEL_513;
  }
LABEL_512:
  v364[15] = 0;
  if (v364[16])
  {
LABEL_430:
    if (v364[17]) {
      goto LABEL_431;
    }
    goto LABEL_514;
  }
LABEL_513:
  v364[16] = 0;
  if (v364[17])
  {
LABEL_431:
    if (v364[18]) {
      goto LABEL_432;
    }
    goto LABEL_515;
  }
LABEL_514:
  v364[17] = 0;
  if (v364[18])
  {
LABEL_432:
    if (v364[19]) {
      goto LABEL_433;
    }
    goto LABEL_516;
  }
LABEL_515:
  v364[18] = 0;
  if (v364[19])
  {
LABEL_433:
    if (v364[20]) {
      goto LABEL_434;
    }
    goto LABEL_517;
  }
LABEL_516:
  v364[19] = 0;
  if (v364[20])
  {
LABEL_434:
    if (v364[21]) {
      goto LABEL_435;
    }
    goto LABEL_518;
  }
LABEL_517:
  v364[20] = 0;
  if (v364[21])
  {
LABEL_435:
    if (v364[22]) {
      goto LABEL_436;
    }
    goto LABEL_519;
  }
LABEL_518:
  v364[21] = 0;
  if (v364[22])
  {
LABEL_436:
    if (v364[23]) {
      goto LABEL_437;
    }
    goto LABEL_520;
  }
LABEL_519:
  v364[22] = 0;
  if (v364[23])
  {
LABEL_437:
    if (v364[24]) {
      goto LABEL_438;
    }
    goto LABEL_521;
  }
LABEL_520:
  v364[23] = 0;
  if (v364[24])
  {
LABEL_438:
    if (v364[25]) {
      goto LABEL_439;
    }
    goto LABEL_522;
  }
LABEL_521:
  v364[24] = 0;
  if (v364[25])
  {
LABEL_439:
    if (v364[26]) {
      goto LABEL_440;
    }
    goto LABEL_523;
  }
LABEL_522:
  v364[25] = 0;
  if (v364[26])
  {
LABEL_440:
    if (v364[27]) {
      goto LABEL_441;
    }
    goto LABEL_524;
  }
LABEL_523:
  v364[26] = 0;
  if (v364[27])
  {
LABEL_441:
    if (v364[28]) {
      goto LABEL_442;
    }
    goto LABEL_525;
  }
LABEL_524:
  v364[27] = 0;
  if (v364[28])
  {
LABEL_442:
    if (v364[29]) {
      goto LABEL_443;
    }
    goto LABEL_526;
  }
LABEL_525:
  v364[28] = 0;
  if (v364[29])
  {
LABEL_443:
    if (v364[30]) {
      goto LABEL_444;
    }
    goto LABEL_527;
  }
LABEL_526:
  v364[29] = 0;
  if (v364[30])
  {
LABEL_444:
    if (v364[31]) {
      goto LABEL_445;
    }
    goto LABEL_528;
  }
LABEL_527:
  v364[30] = 0;
  if (v364[31])
  {
LABEL_445:
    if (v364[32]) {
      goto LABEL_446;
    }
    goto LABEL_529;
  }
LABEL_528:
  v364[31] = 0;
  if (v364[32])
  {
LABEL_446:
    if (v364[33]) {
      goto LABEL_447;
    }
LABEL_530:
    v364[33] = 0;
    if (v364[34]) {
      goto LABEL_448;
    }
    goto LABEL_531;
  }
LABEL_529:
  v364[32] = 0;
  if (!v364[33]) {
    goto LABEL_530;
  }
LABEL_447:
  if (v364[34]) {
    goto LABEL_448;
  }
LABEL_531:
  v364[34] = 0;
LABEL_448:
  unint64_t v366 = *(void **)(v6 + 36288);
  unint64_t v367 = v366[18] + 155;
  if (v367 > v366[17])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0)) {
      goto LABEL_450;
    }
    unint64_t v367 = v366[18] + 155;
    if (v367 > v366[17]) {
      goto LABEL_762;
    }
  }
  v366[19] = v367;
LABEL_450:
  unint64_t v354 = (unint64_t)v359 + v360;
  __srCC_SHA256_CTX c = (char *)v364 + v365;
  uint64_t v368 = *(void *)(v6 + 36288);
  unint64_t v369 = (_OWORD *)((*(void *)(v368 + 144) + 31) & 0xFFFFFFFFFFFFFFE0);
  uint64_t v355 = (uint64_t)v369 + *(void *)(v368 + 160);
  *(void *)(v368 + 144) = (char *)v369 + 124;
  long long v370 = *(_OWORD *)(v6 + 67852);
  long long v371 = *(_OWORD *)(v6 + 67868);
  long long v372 = *(_OWORD *)(v6 + 67900);
  v369[2] = *(_OWORD *)(v6 + 67884);
  v369[3] = v372;
  *unint64_t v369 = v370;
  v369[1] = v371;
  long long v373 = *(_OWORD *)(v6 + 67916);
  long long v374 = *(_OWORD *)(v6 + 67932);
  long long v375 = *(_OWORD *)(v6 + 67948);
  *(_OWORD *)((char *)v369 + 108) = *(_OWORD *)(v6 + 67960);
  v369[5] = v374;
  v369[6] = v375;
  v369[4] = v373;
LABEL_451:
  BOOL v554 = *(unsigned char *)(v282 + 396) == 0;
  if (*(unsigned char *)(v282 + 396)) {
    uint64_t v376 = 156;
  }
  else {
    uint64_t v376 = 112;
  }
  if (!*(unsigned char *)(v282 + 436))
  {
    unint64_t v388 = 0;
    goto LABEL_534;
  }
  uint64_t v377 = *(void **)(v6 + 36288);
  unint64_t v378 = v377[26] + v376 + 63;
  if (v378 <= v377[25]) {
    goto LABEL_456;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 5, 0))
  {
    unint64_t v378 = v377[26] + v376 + 63;
    if (v378 > v377[25]) {
      goto LABEL_762;
    }
LABEL_456:
    v377[27] = v378;
  }
  uint64_t v379 = *(void *)(v6 + 36288);
  uint64_t v380 = (unsigned __int8 *)((*(void *)(v379 + 208) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v381 = *(void *)(v379 + 224);
  *(void *)(v379 + 208) = &v380[v376];
  if (!*(unsigned char *)(v282 + 396))
  {
    uint64_t v387 = 0;
    uint64_t v382 = 0xFFFFFFFFLL;
    goto LABEL_533;
  }
  uint64_t v382 = (uint64_t)v559[1][347];
  uint64_t v383 = *(void **)(v6 + 36288);
  unint64_t v384 = v383[18] + 55;
  if (v384 > v383[17])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0)) {
      goto LABEL_460;
    }
    unint64_t v384 = v383[18] + 55;
    if (v384 > v383[17]) {
      goto LABEL_762;
    }
  }
  v383[19] = v384;
LABEL_460:
  uint64_t v385 = *(void *)(v6 + 36288);
  unint64_t v386 = (*(void *)(v385 + 144) + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v387 = v386 + *(void *)(v385 + 160);
  *(void *)(v385 + 144) = v386 | 0x18;
  *(void *)unint64_t v386 = v556[163];
  *(void *)(v386 + 8) = v556[164];
  *(void *)(v386 + 16) = v556[168];
LABEL_533:
  unint64_t v388 = &v380[v381];
  AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(v554, v380, v354, 0, v387, (uint64_t)v550 + v544, 0, v355, 0, v382);
LABEL_534:
  int v389 = *(unsigned __int8 *)(v282 + 439);
  uint64_t v551 = v388;
  if (!*(unsigned char *)(v282 + 439))
  {
    unint64_t v402 = 0;
    unint64_t v403 = 0;
    goto LABEL_551;
  }
  uint64_t v390 = *(void **)(v6 + 36288);
  uint64_t v391 = v376 + 63;
  unint64_t v392 = v390[26] + v376 + 63;
  if (v392 <= v390[25]) {
    goto LABEL_536;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 5, 0))
  {
    unint64_t v392 = v390[26] + v391;
    if (v392 > v390[25]) {
      goto LABEL_762;
    }
LABEL_536:
    v390[27] = v392;
  }
  uint64_t v393 = *(void *)(v6 + 36288);
  uint64_t v394 = (unsigned __int8 *)((*(void *)(v393 + 208) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v395 = *(void *)(v393 + 224);
  *(void *)(v393 + 208) = &v394[v376];
  if (*(unsigned char *)(v282 + 396))
  {
    uint64_t v396 = (uint64_t)v559[3][347];
    uint64_t v397 = *(void **)(v6 + 36288);
    unint64_t v398 = v397[18] + 55;
    if (v398 > v397[17])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0)) {
        goto LABEL_540;
      }
      unint64_t v398 = v397[18] + 55;
      if (v398 > v397[17]) {
        goto LABEL_762;
      }
    }
    v397[19] = v398;
LABEL_540:
    uint64_t v399 = *(void *)(v6 + 36288);
    unint64_t v400 = (*(void *)(v399 + 144) + 31) & 0xFFFFFFFFFFFFFFE0;
    uint64_t v401 = v400 + *(void *)(v399 + 160);
    *(void *)(v399 + 144) = v400 | 0x18;
    *(void *)unint64_t v400 = v539[126];
    *(void *)(v400 + 8) = v539[127];
    *(void *)(v400 + 16) = v539[131];
    goto LABEL_543;
  }
  uint64_t v401 = 0;
  uint64_t v396 = 0xFFFFFFFFLL;
LABEL_543:
  AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(v554, v394, v542, 0, v401, v537, 0, 0, 0, v396);
  unsigned int v404 = *(void **)(v6 + 36288);
  unint64_t v405 = v404[26] + v391;
  if (v405 <= v404[25])
  {
LABEL_544:
    v404[27] = v405;
    goto LABEL_545;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 5, 0))
  {
    unint64_t v405 = v404[26] + v391;
    if (v405 > v404[25]) {
      goto LABEL_762;
    }
    goto LABEL_544;
  }
LABEL_545:
  uint64_t v406 = *(void *)(v6 + 36288);
  int v407 = (unsigned __int8 *)((*(void *)(v406 + 208) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v408 = *(void *)(v406 + 224);
  *(void *)(v406 + 208) = &v407[v376];
  if (!*(unsigned char *)(v282 + 396))
  {
    uint64_t v415 = 0;
    uint64_t v409 = 0xFFFFFFFFLL;
    uint64_t v412 = *(void *)v538;
    goto LABEL_550;
  }
  uint64_t v409 = (uint64_t)v559[4][347];
  uint64_t v410 = *(void **)(v6 + 36288);
  unint64_t v411 = v410[18] + 55;
  uint64_t v412 = *(void *)v538;
  if (v411 > v410[17])
  {
    int v533 = AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0);
    uint64_t v412 = *(void *)v538;
    if (!v533) {
      goto LABEL_548;
    }
    unint64_t v411 = v410[18] + 55;
    if (v411 > v410[17]) {
      goto LABEL_762;
    }
  }
  v410[19] = v411;
LABEL_548:
  uint64_t v413 = *(void *)(v6 + 36288);
  unint64_t v414 = (*(void *)(v413 + 144) + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v415 = v414 + *(void *)(v413 + 160);
  *(void *)(v413 + 144) = v414 | 0x18;
  *(void *)unint64_t v414 = *(void *)(v549 + 1008);
  *(void *)(v414 + 8) = *(void *)(v549 + 1016);
  *(void *)(v414 + 16) = *(void *)(v549 + 1048);
LABEL_550:
  unint64_t v403 = (unint64_t)&v394[v395];
  unint64_t v402 = (unint64_t)&v407[v408];
  AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(v554, v407, v543, 0, v415, v412, 0, 0, 0, v409);
  int v389 = *(unsigned __int8 *)(v282 + 439);
LABEL_551:
  if (*(unsigned char *)(v282 + 396))
  {
    if (*(unsigned char *)(v282 + 436)) {
      int v416 = 52;
    }
    else {
      int v416 = 24;
    }
    if (v389) {
      unsigned int v417 = v416 + 56;
    }
    else {
      unsigned int v417 = v416;
    }
    uint64_t v418 = v559[1];
    if (v418 && v418[468].i32[0]) {
      v417 += 12;
    }
  }
  else
  {
    if (*(unsigned char *)(v282 + 436)) {
      int v419 = 36;
    }
    else {
      int v419 = 24;
    }
    if (v389) {
      int v420 = v419 + 20;
    }
    else {
      int v420 = v419;
    }
    unsigned int v417 = v420 + 8;
  }
  if (*(_DWORD *)(v282 + 332)) {
    uint64_t v421 = v417 + 8;
  }
  else {
    uint64_t v421 = v417;
  }
  uint64_t v422 = *(void **)(v6 + 36288);
  uint64_t v423 = (unint64_t *)v422[6];
  if ((unint64_t)v423 + v421 > v422[5])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 0, 0))
    {
      uint64_t v526 = v422[6];
      if ((unint64_t)(v526 + v421) > v422[5]) {
        goto LABEL_762;
      }
      v422[7] = v526 + v421;
      *uint64_t v423 = __ROR8__(v422[8] + v526, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    v422[7] = (char *)v423 + v421;
  }
  int v424 = *(_DWORD *)(v6 + 67840);
  if (*(unsigned char *)(v282 + 396))
  {
    if (*(unsigned char *)(v282 + 436))
    {
      uint64_t v425 = (uint64_t)v559[1] + 28 * *((unsigned __int8 *)v559 + 680);
      uint64_t v426 = *(void *)(v425 + 3376);
      int v427 = *(_DWORD *)(v425 + 3384);
      int v428 = *(_DWORD *)(v425 + 3368) & 0x3FFFFB;
      if ((v427 & 7) - 1 != v424) {
        int v427 = ((_BYTE)v424 - 1) & 7;
      }
      uint64_t v429 = *(void *)(v6 + 36288);
      uint64_t v430 = *(void *)(v429 + 48);
      *(void *)uint64_t v430 = *(void *)(v425 + 3360);
      *(_DWORD *)(v430 + 8) = v428 | ((unint64_t)v551 >> 16) & 0xFFC00000 | 4;
      *(_DWORD *)(v430 + 12) = (unint64_t)v551 >> 6;
      *(void *)(v430 + 16) = v426;
      *(_DWORD *)(v430 + 24) = v427;
      *(void *)(v429 + 48) = v430 + 28;
    }
    if (*(unsigned char *)(v282 + 439))
    {
      unsigned int v431 = v559[3];
      uint64_t v432 = v559[4];
      unsigned int v433 = v431[401].u32[1];
      __int32 v434 = v431[400].i32[1];
      __int32 v435 = v431[400].i32[0];
      __int32 v436 = v432[403].i32[1];
      __int32 v437 = v432[404].i32[1];
      __int32 v438 = v432[405].i32[0];
      __int32 v439 = v432[406].i32[0];
      int8x8_t v440 = v432[407];
      int v441 = *((_DWORD *)v559 + 209);
      unsigned int v442 = v432[404].i32[0] & 0xFFFFFFCF;
      if (*((unsigned char *)v559 + 680)) {
        int v443 = 16;
      }
      else {
        int v443 = 48;
      }
      int v444 = v442 | v443;
      int v445 = v437 & 0xFFF0000 | v435 & 0xFFF;
      if (v441) {
        unsigned int v433 = v433 & 0xFFFFFF80 | ((v441 + 1023) >> 10) & 0x7F;
      }
      uint64_t v446 = *(void *)(v6 + 36288);
      v447 = *(int8x8_t **)(v446 + 48);
      v447->i32[0] = 1073745196;
      v447->i32[1] = v436;
      v447[1].i32[0] = v444;
      v447[1].i32[1] = ((_BYTE)v424 - 1) & 7;
      v447[2].i32[0] = v445;
      v447[2].i32[1] = v434 & 0x3FFFFB | (v403 >> 16) & 0xFFC00000 | 4;
      v447[3].i32[0] = v403 >> 6;
      v447[3].i32[1] = v438 & 0x3FFFFB | (v402 >> 16) & 0xFFC00000 | 4;
      v447[4].i32[0] = v402 >> 6;
      v447[4].i32[1] = v433;
      v447[5].i32[0] = v439;
      v447[5].i32[1] = 0;
      v447[6] = v440;
      *(void *)(v446 + 48) = v447 + 7;
    }
  }
  else
  {
    uint64_t v448 = *(void *)(v6 + 36288);
    uint64_t v449 = *(unint64_t **)(v448 + 48);
    *uint64_t v449 = ((unint64_t)(((_BYTE)v424 - 1) & 7) << 32) | 0x40000020;
    *(void *)(v448 + 48) = v449 + 1;
    if (*(unsigned char *)(v282 + 436))
    {
      uint64_t v450 = *(void *)(v6 + 36288);
      uint64_t v451 = *(void *)(v450 + 48);
      *(void *)uint64_t v451 = (((unint64_t)(unsigned __int16)((unint64_t)v551 >> 38) << 54) | 0x40000020) + 32;
      *(_DWORD *)(v451 + 8) = (unint64_t)v551 >> 6;
      *(void *)(v450 + 48) = v451 + 12;
    }
    if (*(unsigned char *)(v282 + 439))
    {
      uint64_t v452 = *(void *)(v6 + 36288);
      long long v453 = *(_DWORD **)(v452 + 48);
      *long long v453 = 1073742336;
      v453[1] = (v403 >> 16) & 0xFFC00000;
      v453[2] = v403 >> 6;
      v453[3] = (v402 >> 16) & 0xFFC00000;
      v453[4] = v402 >> 6;
      *(void *)(v452 + 48) = v453 + 5;
    }
  }
  long long v454 = *(void **)(v6 + 36288);
  unint64_t v455 = v454[30] + v376 + 63;
  if (v455 <= v454[29])
  {
LABEL_590:
    v454[31] = v455;
    goto LABEL_591;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 6, 0))
  {
    unint64_t v455 = v454[30] + v376 + 63;
    if (v455 > v454[29]) {
      goto LABEL_762;
    }
    goto LABEL_590;
  }
LABEL_591:
  uint64_t v456 = *(void *)(v6 + 36288);
  uint64_t v457 = (unsigned __int8 *)((*(void *)(v456 + 240) + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v458 = *(void *)(v456 + 256);
  *(void *)(v456 + 240) = &v457[v376];
  memset(v573, 0, 28);
  uint64x2_t v572 = 0u;
  uint64_t v459 = v545[987] >> 2;
  unsigned int v460 = v545[647];
  int v461 = v545[1268];
  int v462 = v545[985];
  int v463 = v545[986];
  if (v460 <= 1) {
    uint64_t v464 = 1;
  }
  else {
    uint64_t v464 = v460;
  }
  int v465 = 4 * v464 * v459;
  if (v465 * v462 * v463)
  {
    int v466 = 1 << -__clz(v462 - 1);
    unsigned int v467 = -__clz(v463 - 1);
    unint64_t v468 = 0x268D57000uLL;
    if ((v466 << v467) * v465)
    {
      v572.i64[1] = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::SpecLM::encodeImageBlockData(v459, v464, v466, 1 << (v467 & 0x1F));
      *(void *)&v573[0] = v469;
      int v470 = 0x10000;
    }
    else
    {
      int v470 = 0;
    }
  }
  else
  {
    int v470 = 0;
    unint64_t v468 = 0x268D57000;
  }
  int v471 = (v461 + 63) & 0xFFC0;
  if (((v461 + 63) & 0xFFFFFFC0) == 0x10000) {
    int v471 = 0;
  }
  *(__int32 *)((char *)v572.i32 + 2) = v471 | v470;
  v572.i8[0] = v461 != 0;
  if (!*(unsigned char *)(v282 + 396))
  {
    uint64_t v473 = 0;
    uint64_t v472 = 0xFFFFFFFFLL;
    goto LABEL_609;
  }
  if (*v559) {
    uint64_t v472 = (uint64_t)(*v559)[348];
  }
  else {
    uint64_t v472 = 4294967294;
  }
  unint64_t v474 = *(void **)(v6 + 36288);
  unint64_t v475 = v474[18] + 55;
  if (v475 > v474[17])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 3, 0)) {
      goto LABEL_608;
    }
    unint64_t v475 = v474[18] + 55;
    if (v475 > v474[17]) {
      goto LABEL_762;
    }
  }
  v474[19] = v475;
LABEL_608:
  uint64_t v476 = *(void *)(v6 + 36288);
  unint64_t v477 = (*(void *)(v476 + 144) + 31) & 0xFFFFFFFFFFFFFFE0;
  uint64_t v473 = v477 + *(void *)(v476 + 160);
  *(void *)(v476 + 144) = v477 | 0x18;
  *(void *)unint64_t v477 = v556[1437];
  *(void *)(v477 + 8) = v556[1438];
  *(void *)(v477 + 16) = v556[1442];
LABEL_609:
  unint64_t v478 = (unint64_t)&v457[v458];
  AGX::IndirectExecutionCommonGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitABIStateLoadProgram(v554, v457, (unint64_t)__src, 0, v473, (uint64_t)v552 + v546, 0, 0, (uint64_t)&v572, v472);
  if (!*(unsigned char *)(v282 + 396))
  {
    unint64_t v492 = *(void **)(v6 + 36288);
    unint64_t v493 = v492[126] + 12;
    uint64_t v482 = v555;
    if (v493 > v492[125])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 30, 0))
      {
LABEL_617:
        v494 = *(void **)(v6 + 36288);
        uint64_t v495 = v494[126];
        uint64_t v496 = v494[128] + v495;
        v494[126] = v495 + 12;
        *(void *)uint64_t v495 = ((unint64_t)(unsigned __int16)(v478 >> 38) << 54) | 0x100000;
        *(_DWORD *)(v495 + 8) = v478 >> 6;
        uint64_t v497 = (unint64_t *)v494[6];
        *uint64_t v497 = __ROR8__(v496, 32) & 0xFFFFFFFC000000FFLL | 0x300;
        v494[6] = v497 + 1;
        long long v498 = *(void **)(v6 + 36288);
        unint64_t v499 = v498[126] + 8;
        if (v499 > v498[125])
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 30, 0)) {
            goto LABEL_619;
          }
          unint64_t v499 = v498[126] + 8;
          if (v499 > v498[125]) {
            goto LABEL_762;
          }
        }
        v498[127] = v499;
LABEL_619:
        uint64_t v500 = *(void **)(v6 + 36288);
        unsigned __int8 v501 = (unint64_t *)v500[126];
        int v502 = (char *)v501 + v500[128];
        v500[126] = v501 + 1;
        *unsigned __int8 v501 = ((unint64_t)(((_BYTE)v424 - 1) & 7) << 32) | 0x4000000;
        char v505 = (unint64_t *)v500[6];
        int v503 = v500 + 6;
        uint64_t v504 = v505;
        *char v505 = __ROR8__(v502, 32) & 0xFFFFFFFC000000FFLL | 0x200;
        unint64_t v483 = v556;
        goto LABEL_622;
      }
      unint64_t v493 = v492[126] + 12;
      if (v493 > v492[125]) {
        goto LABEL_762;
      }
    }
    v492[127] = v493;
    goto LABEL_617;
  }
  int v479 = *v559;
  uint64_t v480 = *(void **)(v6 + 36288);
  unint64_t v481 = v480[126] + 28;
  uint64_t v482 = v555;
  unint64_t v483 = v556;
  if (v481 > v480[125])
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v6 + 36288), 30, 0)) {
      goto LABEL_612;
    }
    unint64_t v481 = v480[126] + 28;
    if (v481 > v480[125]) {
LABEL_762:
    }
      abort();
  }
  v480[127] = v481;
LABEL_612:
  if (!v479) {
    goto LABEL_623;
  }
  v484 = *(void **)(v6 + 36288);
  __int32 v485 = (*v559)[407].i32[1];
  __int32 v486 = (*v559)[409].i32[0];
  __int32 v487 = (*v559)[410].i32[1];
  int v488 = (v478 >> 16) & 0xFFC00000 | (*v559)[409].i32[1] & 0x3FFFFF;
  int8x8_t v489 = vand_s8((*v559)[408], (int8x8_t)0x3FFFF0000);
  v490 = v559[401];
  if (v490) {
    unint64_t v491 = (unint64_t)v490[4];
  }
  else {
    unint64_t v491 = *(void *)(*(void *)&(*v559)[411] + 32);
  }
  v506.i64[0] = HIDWORD(v491);
  v506.i64[1] = v491;
  uint64_t v507 = v484[126];
  uint64_t v508 = v484[128] + v507;
  v484[126] = v507 + 28;
  *(_DWORD *)uint64_t v507 = v485;
  *(int8x8_t *)(v507 + 4) = vorr_s8(v489, vand_s8((int8x8_t)vmovn_s64(v506), (int8x8_t)0xFFFFFFFC0000FFFFLL));
  *(_DWORD *)(v507 + 12) = v486;
  *(_DWORD *)(v507 + 16) = v488;
  *(_DWORD *)(v507 + 20) = v478 >> 6;
  *(_DWORD *)(v507 + 24) = v487;
  unint64_t v509 = (unint64_t *)v484[6];
  int v503 = v484 + 6;
  uint64_t v504 = v509;
  *unint64_t v509 = __ROR8__(v508, 32) & 0xFFFFFFFC000000FFLL | 0x700;
LABEL_622:
  void *v503 = v504 + 1;
LABEL_623:
  if (*(unsigned char *)(v282 + 396))
  {
    int v510 = v559[1];
    if (v510)
    {
      if (v510[468].i32[0])
      {
        uint64_t v511 = *(void *)(v6 + 36288);
        uint64_t v512 = *(void *)(v511 + 48);
        *(void *)uint64_t v512 = (((unint64_t)((((*((_DWORD *)v559 + 176) - (*((_DWORD *)v559 + 172) == 2)) << 23)
                                              + 528482304) & 0x1F800000 | (*((_DWORD *)v559 + 172) << 30) | ((*((_DWORD *)v559 + 171) & 1) << 29) | (v510[468].u8[5] << 16) | ((v559[87] & 3) << 17) | ((*((_DWORD *)v559 + 175) & 1) << 19) | ((v510[467].i32[0] & 1) << 20) | 0x200000u) << 32) | 0x40000020)
                        + 112;
        *(_DWORD *)(v512 + 8) = 15360;
        *(void *)(v511 + 48) = v512 + 12;
      }
    }
  }
  uint64_t v513 = 0x5F700000000003;
  if (v557 == 1)
  {
    unint64_t v514 = v6 + 90088;
    uint64_t v515 = *(void *)(v6 + 36288);
    uint64_t v516 = *(unint64_t **)(v515 + 48);
    *uint64_t v516 = __ROR8__(*(void *)(*(void *)(v482 + 376) + (int)*MEMORY[0x263F4B188] + 8)- 0x1000000000+ (*(_DWORD *)(v282 + 140) + *(_DWORD *)(v282 + 144) * v553), 32) & 0xFFFFFFFF000000FFLL | 0x90000000;
    *(void *)(v515 + 48) = v516 + 1;
  }
  else
  {
    uint64_t v517 = *(void *)(v6 + 36288);
    unsigned int v518 = *(unint64_t **)(v517 + 48);
    *unsigned int v518 = __ROR8__(v540, 32) & 0xFFFFFFFF000000FFLL | 0x90000000;
    *(void *)(v517 + 48) = v518 + 1;
    _DWORD *v541 = 671088640;
    unint64_t v514 = v6 + 90088;
  }
  uint64_t result = IOGPUResourceListAddResource();
  uint64_t v519 = v483[33];
  if (v519) {
    uint64_t v513 = *(void *)(v519 + 2264) | 0x5F700000000003;
  }
  uint64_t v520 = v483[34];
  if (v520) {
    v513 |= *(void *)(v520 + 2264);
  }
  uint64_t v521 = v483[35];
  if (v521)
  {
    uint64_t v522 = *(void *)(v521 + 32);
    if (v522) {
      v513 |= *(void *)(*(void *)(v521 + 24) + 2264) | *(void *)(v522 + 2264);
    }
  }
  *(void *)(v514 + 384) |= v513;
  if (!*(unsigned char *)(*(void *)(v482 + *(int *)(v468 + 1996)) + 396))
  {
    char v523 = *(unsigned char *)(v6 + 1506);
    uint64_t v524 = v483[32];
    *(unsigned char *)(v524 + 1300) |= v523;
    *(unsigned char *)(v524 + 468) |= v523;
  }
  return result;
}

double AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpill(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForObject(*(void *)(a1 + 8) + 38696, *(_DWORD *)(a2 + 988), *(_DWORD *)(a2 + 1000), *(_DWORD *)(a2 + 1020), *(_DWORD *)(a2 + 2516), 0))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(*(void *)(a1 + 8) + 38696, (__n128 *)(*(void *)(*(void *)(a1 + 8) + 38952) + 304), 1); {
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForMesh(*(void *)(a1 + 8) + 38696, *(_DWORD *)(a3 + 988), *(_DWORD *)(a3 + 1000), *(_DWORD *)(a3 + 1020), *(_DWORD *)(a3 + 2516), 0))
  }
  {
    uint64_t v6 = *(void *)(a1 + 8);
    long long v7 = (__n128 *)(*(void *)(v6 + 38952) + 304);
    *(void *)&double result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v6 + 38696, v7, 1).n128_u64[0];
  }
  return result;
}

void sub_242B6276C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_242B62920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexProgramBuffers(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6)
{
  char v10 = a2;
  uint64_t v11 = result;
  uint64_t v46 = (uint64_t *)(result + 90088);
  if (a5 && *(void *)(result + 1480))
  {
    uint64_t v12 = a5;
    uint64_t v13 = a2;
    do
    {
      if (*v13) {
        double result = MTLResourceListAddResource();
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  unsigned int v47 = a5;
  if (a5)
  {
    uint64_t v14 = v11 + 38992;
    uint64_t v15 = a5;
    unint64_t v16 = a6;
    unsigned int v17 = a4;
    do
    {
      if (a4 <= 0x22) {
        *(void *)(v11 + 8 * a4 + 85368) = 0;
      }
      uint64_t v18 = *v10;
      uint64_t v19 = (_DWORD *)(v11 + 4 * v17);
      if (*v10)
      {
        BOOL v20 = (int *)MEMORY[0x263F4B188];
        uint64_t v21 = v18 + (int)*MEMORY[0x263F4B188];
        unint64_t v22 = *(void *)(v21 + 8);
        uint64_t v25 = v21 + 16;
        uint64_t v23 = *(void *)(v21 + 16);
        uint64_t v24 = *(void *)(v25 + 8);
        uint64_t v26 = *a3;
        uint64_t v27 = 8 * v17;
        uint64_t v28 = (void *)(v11 + v27);
        uint64_t v29 = v11 + v27 + 38992;
        *(void *)(v29 + 536) = *a3 + v22;
        *(void *)(v29 + 1056) = (v23 & 0xFFFFFFFFFFFFFFLL) - v26;
        *(void *)(v14 + v27) = v24 + v26;
        v28[10741] = v22;
        v28[11001] = v24;
        v19[16994] = v23;
        v19[17059] = v23;
        v19[17124] = v22 >> 8;
        v28[9773] = v18 + *v20;
        double result = (uint64_t)AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v11 + 1592), v18, 0, v17);
        if (a6) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v31 = 8 * v17;
        uint64_t v32 = (void *)(v11 + v31);
        v32[9773] = 0;
        uint64_t v33 = v11 + v31 + 38992;
        *(void *)(v33 + 536) = 0;
        *(void *)(v14 + v31) = 0;
        v32[10741] = 0;
        *(void *)(v33 + 1056) = 0;
        v32[11001] = 0;
        v19[16994] = 0;
        v19[17059] = 0;
        if (a6)
        {
LABEL_14:
          uint64_t v30 = *v16;
          if (v17 <= 0x1E) {
            goto LABEL_18;
          }
          goto LABEL_9;
        }
      }
      LODWORD(v30) = 0;
      if (v17 <= 0x1E) {
LABEL_18:
      }
        v19[16963] = v30;
LABEL_9:
      ++v17;
      ++v16;
      ++a3;
      ++v10;
      --v15;
    }
    while (v15);
  }
  unsigned int v34 = v47 + a4;
  uint64_t v35 = -1 << (v47 + a4);
  if (v47 + a4 == 128) {
    uint64_t v36 = -1;
  }
  else {
    uint64_t v36 = ~(-1 << (v47 + a4));
  }
  if (v34 < 0x40) {
    uint64_t v37 = ~v35;
  }
  else {
    uint64_t v37 = -1;
  }
  if (v34 < 0x40) {
    uint64_t v36 = 0;
  }
  uint64_t v38 = -1 << a4;
  if (a4 >= 0x40) {
    uint64_t v38 = 0;
  }
  uint64_t v39 = *v46 | v37 & v38;
  uint64_t v40 = -1 << a4;
  if (a4 < 0x40) {
    uint64_t v40 = -1;
  }
  uint64_t v41 = v46[1] | v36 & v40;
  *uint64_t v46 = v39;
  v46[1] = v41;
  if (v34 == 128) {
    uint64_t v42 = -1;
  }
  else {
    uint64_t v42 = ~(-1 << v34);
  }
  BOOL v43 = v34 >= 0x40;
  if (v34 < 0x40) {
    uint64_t v44 = ~v35;
  }
  else {
    uint64_t v44 = -1;
  }
  if (!v43) {
    uint64_t v42 = 0;
  }
  uint64_t v45 = v46[7] | v42 & v40;
  v46[6] |= v44 & v38;
  v46[7] = v45;
  v46[48] |= 0xC0uLL;
  return result;
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setRenderPipelineStateCommon(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 38696;
  uint64_t v3 = *(void *)(a1 + 38976);
  if (v3 == a2) {
    return;
  }
  uint64_t v4 = a2;
  uint64_t v6 = (unsigned __int8 *)(a1 + 36420);
  *(void *)(a1 + 38976) = a2;
  if (*(unsigned char *)(a1 + 36652)) {
    *(unsigned char *)(a1 + 36656) = *(_DWORD *)(a1 + 36648) != *(_DWORD *)(a2 + 712);
  }
  long long v7 = (void *)(a1 + 90088);
  uint64_t v8 = (_DWORD *)(a1 + 26768);
  if (*(unsigned char *)(a2 + 716))
  {
    *(_DWORD *)(a1 + 36648) = *(_DWORD *)(a2 + 712);
    *(unsigned char *)(a1 + 36652) = 1;
  }
  if (*(void *)(a2 + 16))
  {
    uint64_t v9 = *(void *)(a1 + 36552);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 32);
      if (v10)
      {
        uint64_t v11 = *(void *)(a2 + 24);
        uint64_t v12 = *(void *)(v9 + 32);
        uint64_t v13 = (int *)*MEMORY[0x263F4B1E8];
        int v14 = *(_DWORD *)*MEMORY[0x263F4B1E8];
        uint64_t v15 = (int8x16_t *)&xmmword_242EA8000;
        if (v12 != v11)
        {
          *(void *)(v9 + 32) = v11;
          if (v11)
          {
            uint64_t v16 = *(void *)(v9 + 8);
            unsigned int v17 = (uint64_t *)(v16 + 90472);
            uint64_t v18 = *(void *)(v16 + 38952);
            *(unsigned char *)(v18 + 466) |= *(unsigned char *)(v11 + 1050);
            *(unsigned char *)(v18 + 472) |= *(_DWORD *)(v4 + 836) != 0;
            unint64_t v19 = *(void *)(v16 + 90472) & 0xFFFFFFFFFC06FFFFLL | *(void *)(v11 + 2264);
            uint64_t v20 = v19 | 0x14;
            *(void *)(v16 + 90472) = v19 | 0x14;
            int8x16_t v21 = *(int8x16_t *)(v11 + 1056);
            int8x16_t v23 = *(int8x16_t *)(v11 + 1944);
            int8x16_t v22 = *(int8x16_t *)(v11 + 1960);
            int8x16_t v24 = *(int8x16_t *)(v11 + 1072);
            if (v12)
            {
              int8x16_t v23 = vbicq_s8(v23, *(int8x16_t *)(v12 + 1944));
              int8x16_t v21 = vbicq_s8(v21, *(int8x16_t *)(v12 + 1056));
              int8x16_t v22 = vbicq_s8(v22, *(int8x16_t *)(v12 + 1960));
              int8x16_t v24 = vbicq_s8(v24, *(int8x16_t *)(v12 + 1072));
            }
            int8x16_t v25 = vorrq_s8(v23, v21);
            *(int8x16_t *)(v16 + 90232) = vorrq_s8(vandq_s8(*(int8x16_t *)(v16 + 90232), (int8x16_t)xmmword_242EA8770), v25);
            int8x16_t v26 = vorrq_s8(v24, v22);
            *(int8x16_t *)(v16 + 90248) = vorrq_s8(*(int8x16_t *)(v16 + 90248), v26);
            int64x2_t v27 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v25, (int64x2_t)v26), (int8x16_t)vzip2q_s64((int64x2_t)v25, (int64x2_t)v26));
            int32x2_t v28 = vmovn_s64(vtstq_s64(v27, v27));
            if ((v28.i32[0] | v28.i32[1]))
            {
              uint64_t v29 = v19 | 0x20014;
              if ((v28.i8[0] & 1) == 0) {
                uint64_t v29 = v20;
              }
              if (v28.i8[4]) {
                v29 |= 0x40000uLL;
              }
              *unsigned int v17 = v29;
            }
            if (*(unsigned char *)(v4 + 710))
            {
              uint64_t v30 = *(void *)(v4 + 1824);
              if (v30)
              {
                uint64_t v31 = *(void *)(v30 + 48);
                *(void *)(*(void *)(v9 + 80) + 1008) = *(void *)(v30 + 56);
                *(void *)(v9 + 9880) = v31;
                uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
                *(void *)(v16 + 90184) |= v32 << 59;
                *(void *)(v16 + 90232) |= 0x800000000000000uLL;
                uint64_t v33 = 196608;
                if (!(_BYTE)v32) {
                  uint64_t v33 = 0x10000;
                }
                *v17 |= v33;
              }
            }
            if (v14)
            {
              if ((*(_OWORD *)(v11 + 1944) & ~(*(_OWORD *)(v11 + 1640) | *(_OWORD *)(v11 + 1944) & ~*(_OWORD *)(v11 + 1976))) != 0
                && *v13)
              {
                IOGPUDeviceTraceEvent();
                uint64_t v13 = (int *)*MEMORY[0x263F4B1E8];
              }
              if (*(_DWORD *)(v4 + 1908) + *(_DWORD *)(v4 + 1876))
              {
                uint64_t v15 = (int8x16_t *)&xmmword_242EA8000;
                if (*v13)
                {
                  IOGPUDeviceTraceEvent();
                  uint64_t v15 = (int8x16_t *)&xmmword_242EA8000;
                  uint64_t v13 = (int *)*MEMORY[0x263F4B1E8];
                }
              }
              else
              {
                uint64_t v15 = (int8x16_t *)&xmmword_242EA8000;
              }
            }
          }
        }
        uint64_t v34 = *(void *)(v9 + 40);
        int v35 = *v13;
        if (v34 != v10)
        {
          uint64_t v36 = *(void *)(v9 + 8);
          if ((*(unsigned char *)(v36 + 90480) & 4) != 0 && *(_DWORD *)(*(void *)(v36 + 38976) + 664) >= 2u)
          {
            AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexAmplificationCount(v36, 1u, (void *)(v36 + 90616));
            uint64_t v15 = (int8x16_t *)&xmmword_242EA8000;
            uint64_t v36 = *(void *)(v9 + 8);
            *(_DWORD *)(v36 + 90480) &= ~4u;
            uint64_t v34 = *(void *)(v9 + 40);
          }
          *(void *)(v9 + 40) = v10;
          *(unsigned char *)(*(void *)(v36 + 38952) + 466) |= *(unsigned char *)(v10 + 1050);
          unint64_t v37 = *(void *)(v10 + 3344);
          int v38 = *(_DWORD *)(v10 + 3352);
          unint64_t v39 = HIDWORD(v37);
          LODWORD(v37) = *(_DWORD *)(v36 + 37252) & 0xF0E3FF00 | v37 & 0xF1C00FF;
          *(_DWORD *)(v36 + 37260) = *(_DWORD *)(v36 + 37260) & 0xFFFFFFF8 | (*(_DWORD *)(v36 + 38656)
                                                                            - 1) & 7;
          *(_DWORD *)(v36 + 37264) = v39;
          uint64_t v40 = *(void *)(v36 + 90472);
          *(_DWORD *)(v36 + 37252) = v37;
          *(_DWORD *)(v36 + 37256) = v38;
          *(void *)(v36 + 90472) = v40 | 4;
          *(_DWORD *)(v9 + 22864) = 4 * *(_DWORD *)(v10 + 3504);
          uint64_t v41 = *(void *)(v9 + 8);
          unint64_t v42 = *(void *)(v41 + 90472) & 0xFFFFFFF01BFFFFFFLL | *(void *)(v10 + 2264);
          uint64_t v43 = v42 | 0x24;
          *(void *)(v41 + 90472) = v42 | 0x24;
          int8x16_t v44 = *(int8x16_t *)(v10 + 1056);
          int8x16_t v46 = *(int8x16_t *)(v10 + 1944);
          int8x16_t v45 = *(int8x16_t *)(v10 + 1960);
          int8x16_t v47 = *(int8x16_t *)(v10 + 1072);
          if (v34)
          {
            int8x16_t v46 = vbicq_s8(v46, *(int8x16_t *)(v34 + 1944));
            int8x16_t v44 = vbicq_s8(v44, *(int8x16_t *)(v34 + 1056));
            int8x16_t v45 = vbicq_s8(v45, *(int8x16_t *)(v34 + 1960));
            int8x16_t v47 = vbicq_s8(v47, *(int8x16_t *)(v34 + 1072));
          }
          int8x16_t v48 = vorrq_s8(v46, v44);
          int8x16_t v49 = vorrq_s8(v45, v47);
          int8x16_t v50 = vorrq_s8(*(int8x16_t *)(v41 + 90344), v49);
          *(int8x16_t *)(v41 + 90328) = vorrq_s8(vandq_s8(*(int8x16_t *)(v41 + 90328), v15[119]), v48);
          *(int8x16_t *)(v41 + 90344) = v50;
          int64x2_t v51 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v48, (int64x2_t)v49), (int8x16_t)vzip2q_s64((int64x2_t)v48, (int64x2_t)v49));
          int32x2_t v52 = vmovn_s64(vtstq_s64(v51, v51));
          if ((v52.i32[0] | v52.i32[1]))
          {
            uint64_t v53 = v42 | 0x8000024;
            if ((v52.i8[0] & 1) == 0) {
              uint64_t v53 = v43;
            }
            if (v52.i8[4]) {
              uint64_t v54 = v53 | 0x10000000;
            }
            else {
              uint64_t v54 = v53;
            }
            *(void *)(v41 + 90472) = v54;
          }
          if (*(unsigned char *)(v4 + 710))
          {
            uint64_t v55 = *(void *)(v4 + 2112);
            if (v55)
            {
              uint64_t v56 = *(void *)(v55 + 48);
              *(void *)(*(void *)(v9 + 14464) + 1008) = *(void *)(v55 + 56);
              *(void *)(v9 + 24128) = v56;
              uint64_t v57 = *(unsigned __int8 *)(v55 + 80);
              *(void *)(v41 + 90280) |= v57 << 59;
              *(void *)(v41 + 90328) |= 0x800000000000000uLL;
              BOOL v208 = v57 == 0;
              uint64_t v58 = 201326592;
              if (v208) {
                uint64_t v58 = 0x4000000;
              }
              *(void *)(v41 + 90472) |= v58;
            }
          }
          if (v35)
          {
            if ((*(_OWORD *)(*(void *)(v9 + 40) + 1944) & ~(*(_OWORD *)(*(void *)(v9 + 40) + 1640) | *(_OWORD *)(*(void *)(v9 + 40) + 1944) & ~*(_OWORD *)(*(void *)(v9 + 40) + 1976))) != 0
              && *(_DWORD *)*MEMORY[0x263F4B1E8])
            {
              IOGPUDeviceTraceEvent();
            }
            if (*(_DWORD *)(v4 + 2196) + *(_DWORD *)(v4 + 2164) && *(_DWORD *)*MEMORY[0x263F4B1E8]) {
              IOGPUDeviceTraceEvent();
            }
          }
        }
      }
      else
      {
        *(void *)(v9 + 32) = 0;
        *(void *)(v9 + 40) = 0;
        *(void *)(*(void *)(v9 + 8) + 90472) &= 0xFFFFFFF01C07FFCFLL;
      }
    }
    uint64_t v88 = *(void *)(a1 + 90472);
    *(_OWORD *)(a1 + 38960) = 0u;
    *((_DWORD *)v6 + 203) = *((_DWORD *)v6 + 203) & 0x199FFFFF | 0x200000;
    *((_DWORD *)v6 + 206) &= 0xFFFE0000;
    *((void *)v6 + 102) |= 0xC0000000C00000uLL;
    *((_DWORD *)v6 + 208) &= 0xFF1EFFFF;
    *(void *)(a1 + 90472) = v88 & 0xFFFFE07FFFFF01F8 | 0x100000000004;
    uint64_t v89 = *(void *)(v2 + 280);
    unint64_t v90 = *(__n128 **)(v2 + 256);
    *(void *)(a1 + 26784) = *(void *)(v89 + 16);
    *(void *)(a1 + 26760) = v89 + 88;
    *uint64_t v8 = *(_DWORD *)(v89 + 648);
    *(void *)(a1 + 26792) = *(void *)(v89 + 1536);
    *(void *)(a1 + 26800) = *(void *)(v89 + 1552);
    *(void *)(a1 + 26808) = v89;
    int v91 = *(_DWORD *)(v89 + 1588);
    int v92 = *(_DWORD *)(v89 + 1620);
    if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragmentWithTile(*(void *)(a1 + 26824), (_DWORD *)(v89 + 72), *(_DWORD **)(a1 + 26832)))AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindUSCSpillBuffer(*(void *)(a1 + 26824), v90); {
    uint64_t v93 = *(void *)(*(void *)(a1 + 26808) + 3104);
    }
    if (v93
      && AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(*(void *)(a1 + 26824), v93))
    {
      AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindUSCSpillBuffer(*(void *)(a1 + 26824), v90);
    }
    uint64_t v94 = *(void *)(a1 + 26776);
    unsigned int v95 = *(_DWORD *)(v89 + 1584);
    if (*(_DWORD *)(v94 + 248) > v95) {
      unsigned int v95 = *(_DWORD *)(v94 + 248);
    }
    *(_DWORD *)(v94 + 248) = v95;
    uint64_t v96 = (_DWORD **)MEMORY[0x263F4B1E8];
    if (*(_DWORD *)*MEMORY[0x263F4B1E8])
    {
      if ((*(_OWORD *)(*(void *)(a1 + 26784) + 1944) & ~(*(_OWORD *)(*(void *)(a1 + 26784) + 1640) | *(_OWORD *)(*(void *)(a1 + 26784) + 1944) & ~*(_OWORD *)(*(void *)(a1 + 26784) + 1976))) != 0
        && *(_DWORD *)*MEMORY[0x263F4B1E8])
      {
        IOGPUDeviceTraceEvent();
        uint64_t v96 = (_DWORD **)MEMORY[0x263F4B1E8];
      }
      if (v92 + v91 && **v96) {
        IOGPUDeviceTraceEvent();
      }
    }
    *(unsigned char *)(a1 + 90577) |= *(unsigned char *)(*(void *)(*(void *)(v2 + 280) + 16) + 1050);
    goto LABEL_227;
  }
  double v59 = (void *)(a1 + 91168);
  uint64_t v60 = *(void *)(a2 + 32);
  if (!v60)
  {
    uint64_t v124 = *(void **)(a1 + 36552);
    if (v124)
    {
      v124[4] = 0;
      v124[5] = 0;
      *(void *)(v124[1] + 90472) &= 0xFFFFFFF01C07FFCFLL;
    }
    uint64_t v125 = *(void *)(a2 + 8);
    if (!v125 || !*(_DWORD *)(v125 + 3744))
    {
LABEL_127:
      uint64_t v132 = *(void *)(a1 + 38960);
      uint64_t v133 = (_DWORD **)MEMORY[0x263F4B1E8];
      int v134 = *(_DWORD *)*MEMORY[0x263F4B1E8];
      if (v132 != v125)
      {
        if ((*(unsigned char *)(a1 + 90480) & 4) != 0 && *(_DWORD *)(*(void *)(a1 + 38976) + 664) >= 2u)
        {
          uint64_t v169 = a1 + 91168;
          signed int v170 = (_DWORD **)MEMORY[0x263F4B1E8];
          AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexAmplificationCount(a1, 1u, (void *)(a1 + 90616));
          uint64_t v133 = v170;
          double v59 = (void *)v169;
          *(_DWORD *)(a1 + 90480) &= ~4u;
          uint64_t v132 = *(void *)(v2 + 264);
          *(void *)(v2 + 264) = v125;
          if (v125)
          {
LABEL_131:
            uint64_t v135 = *(void *)(v2 + 256);
            *(unsigned char *)(v135 + 463) |= *(unsigned char *)(v125 + 1045);
            *(unsigned char *)(v135 + 466) |= *(unsigned char *)(v125 + 1050);
            uint64_t v136 = *(void *)(v125 + 3576);
            LOBYTE(v135) = *((_DWORD *)v6 + 559);
            *((_DWORD *)v6 + 208) = *((_DWORD *)v6 + 208) & 0xF0E3FF00 | v136 & 0xF1C00FF;
            *((_DWORD *)v6 + 210) = *((_DWORD *)v6 + 210) & 0xFFFFFFF8 | ((_BYTE)v135 - 1) & 7;
            *((_DWORD *)v6 + 211) = HIDWORD(v136);
            *((_DWORD *)v6 + 209) = 0;
            unint64_t v137 = *(void *)(a1 + 90472) & 0xFFFFFFFFFFFF01BBLL | *(void *)(v125 + 2264);
            uint64_t v138 = v137 | 5;
            *(void *)(a1 + 90472) = v137 | 5;
            int8x16_t v139 = *(int8x16_t *)(v125 + 1056);
            int8x16_t v141 = *(int8x16_t *)(v125 + 1944);
            int8x16_t v140 = *(int8x16_t *)(v125 + 1960);
            int8x16_t v142 = *(int8x16_t *)(v125 + 1072);
            if (v132)
            {
              int8x16_t v141 = vbicq_s8(v141, *(int8x16_t *)(v132 + 1944));
              int8x16_t v139 = vbicq_s8(v139, *(int8x16_t *)(v132 + 1056));
              int8x16_t v140 = vbicq_s8(v140, *(int8x16_t *)(v132 + 1960));
              int8x16_t v142 = vbicq_s8(v142, *(int8x16_t *)(v132 + 1072));
            }
            int8x16_t v143 = vorrq_s8(v141, v139);
            int8x16_t v144 = vorrq_s8(v140, v142);
            int8x16_t v145 = vorrq_s8(*(int8x16_t *)(a1 + 90152), v144);
            *(int8x16_t *)(a1 + 90136) = vorrq_s8(vandq_s8(*(int8x16_t *)(a1 + 90136), (int8x16_t)xmmword_242EA8770), v143);
            *(int8x16_t *)(a1 + 90152) = v145;
            int64x2_t v146 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v143, (int64x2_t)v144), (int8x16_t)vzip2q_s64((int64x2_t)v143, (int64x2_t)v144));
            int32x2_t v147 = vmovn_s64(vtstq_s64(v146, v146));
            if ((v147.i32[0] | v147.i32[1]))
            {
              uint64_t v148 = v137 | 0x85;
              if ((v147.i8[0] & 1) == 0) {
                uint64_t v148 = v138;
              }
              if (v147.i8[4]) {
                uint64_t v149 = v148 | 0x100;
              }
              else {
                uint64_t v149 = v148;
              }
              *(void *)(a1 + 90472) = v149;
            }
            uint64_t v150 = v3;
            uint64_t v151 = *(void *)(v2 + 280);
            unsigned int v82 = *(_DWORD *)(v151 + 644);
            int v152 = *(_DWORD *)(v151 + 1012);
            int v153 = *(_DWORD *)(v151 + 1044);
            *(_DWORD *)(v2 + 48) = 1;
            int v154 = *(_DWORD *)(v151 + 44);
            int v155 = *(_DWORD *)(v2 + 4);
            if (v154 > v155)
            {
              *(_DWORD *)uint64_t v2 = *(_DWORD *)(v151 + 40);
              *(_DWORD *)(v2 + 4) = v154;
              *(_OWORD *)(a1 + 38704) = *(_OWORD *)(v151 + 48);
            }
            BOOL v156 = v154 > v155;
            int v157 = *(_DWORD *)(v151 + 64);
            int v158 = *(_DWORD *)(v2 + 24);
            BOOL v159 = v158 < v157;
            if (v158 > v157) {
              int v157 = *(_DWORD *)(v2 + 24);
            }
            *(_DWORD *)(v2 + 24) = v157;
            int v160 = v159 || v156;
            uint64_t v161 = *(void *)(v151 + 3072);
            if (v161)
            {
              char v273 = v59;
              int v283 = v152;
              int v278 = v153;
              int v162 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(v2, v161);
              int v153 = v278;
              int v152 = v283;
              uint64_t v133 = (_DWORD **)MEMORY[0x263F4B1E8];
              double v59 = v273;
            }
            else
            {
              int v162 = 0;
            }
            if ((v160 | v162) == 1)
            {
              char v274 = v59;
              long long v167 = v133;
              int v284 = v152;
              int v279 = v153;
              AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(v2, (__n128 *)(*(void *)(v2 + 256) + 304), 1);
              int v153 = v279;
              int v152 = v284;
              uint64_t v133 = v167;
              double v59 = v274;
              *v274 |= 0x80000000000uLL;
              uint64_t v3 = v150;
              if (!v134)
              {
LABEL_151:
                {
                  int v261 = v59;
                  double v59 = v261;
                  if (v262)
                  {
                    AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateVertexShaderVariant(AGX::HAL200::VertexProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloCC_SHA256_CTX c = 0;
                    double v59 = v261;
                  }
                }
                if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateVertexShaderVariant(AGX::HAL200::VertexProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloc)
                {
                  {
                    int v263 = v59;
                    double v59 = v263;
                    if (v264)
                    {
                      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateVertexShaderVariant(AGX::HAL200::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space = 0;
                      double v59 = v263;
                    }
                  }
                  if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateVertexShaderVariant(AGX::HAL200::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space) {
                    *(void *)(*(void *)(v2 + 256) + 160) = (*(void *)(v125 + 1200)
                  }
                                                                - AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateVertexShaderVariant(AGX::HAL200::VertexProgramVariant const*,unsigned int &)::per_shader_brk_space
                                                                + *(void *)(v125 + 1424)
                                                                + 4095) & 0xFFFFFFFFFFFFF000;
                }
                goto LABEL_181;
              }
            }
            else
            {
              uint64_t v3 = v150;
              if (!v134) {
                goto LABEL_151;
              }
            }
            unint64_t v168 = v133;
            uint64_t v275 = v59;
            int v280 = v153 + v152;
            if ((*(_OWORD *)(*(void *)(v2 + 264) + 1944) & ~(*(_OWORD *)(*(void *)(v2 + 264) + 1640) | *(_OWORD *)(*(void *)(v2 + 264) + 1944) & ~*(_OWORD *)(*(void *)(v2 + 264) + 1976))) != 0
              && **v133)
            {
              IOGPUDeviceTraceEvent();
            }
            uint64_t v3 = v150;
            double v59 = v275;
            if (v280 && **v168)
            {
              IOGPUDeviceTraceEvent();
              double v59 = v275;
            }
            goto LABEL_151;
          }
        }
        else
        {
          *(void *)(a1 + 38960) = v125;
          if (v125) {
            goto LABEL_131;
          }
        }
      }
      unsigned int v82 = 0;
      goto LABEL_181;
    }
    *(void *)(a1 + 90168) |= 0x20uLL;
    *(void *)(a1 + 90472) |= 0x40uLL;
    uint64_t v126 = *(void *)(a1 + 38976);
    uint64_t v127 = *(void *)(v126 + 8);
    if (*(void *)(a1 + 36456) != v127)
    {
      *(void *)(a1 + 36456) = v127;
      *(_DWORD *)(a1 + 36464) = 7;
    }
    int v128 = *(_DWORD *)(v126 + 688);
    if (*(_DWORD *)(a1 + 36400) == v128)
    {
      int v129 = *(_DWORD *)(v126 + 684);
      if (*(_DWORD *)(a1 + 36404) == v129)
      {
        if (*(_DWORD *)(a1 + 36416) == *(_DWORD *)(v126 + 704) && *v6 == *(unsigned __int8 *)(v126 + 708))
        {
          int v129 = *(_DWORD *)(a1 + 36404);
          if (*(unsigned __int8 *)(a1 + 36448) == *(unsigned __int8 *)(v126 + 680))
          {
LABEL_122:
            int v130 = *(_DWORD *)(v126 + 696);
            if (*(_DWORD *)(a1 + 36408) == v130)
            {
              int v131 = *(_DWORD *)(v126 + 700);
              if (*(_DWORD *)(a1 + 36452) == v131) {
                goto LABEL_127;
              }
            }
            else
            {
              int v131 = *(_DWORD *)(v126 + 700);
            }
            *(_DWORD *)(a1 + 36408) = v130;
            *(_DWORD *)(a1 + 36452) = v131;
            *(_DWORD *)(a1 + 36464) |= 4u;
            goto LABEL_127;
          }
        }
        else
        {
          int v129 = *(_DWORD *)(a1 + 36404);
        }
      }
    }
    else
    {
      int v129 = *(_DWORD *)(v126 + 684);
    }
    *(_DWORD *)(a1 + 36400) = v128;
    *(_DWORD *)(a1 + 36404) = v129;
    *(_DWORD *)(a1 + 36416) = *(_DWORD *)(v126 + 704);
    *uint64_t v6 = *(unsigned char *)(v126 + 708);
    *(unsigned char *)(a1 + 36448) = *(unsigned char *)(v126 + 680);
    *(_DWORD *)(a1 + 36464) |= 1u;
    goto LABEL_122;
  }
  *(void *)(a1 + 38960) = 0;
  *(void *)(a1 + 90472) &= 0xFFFFFFFFFFFF01FELL;
  uint64_t v61 = *(void *)(a1 + 36552);
  if (v61)
  {
    uint64_t v62 = a2;
  }
  else
  {
    uint64_t v163 = *(void *)(v6 + 164);
    if (!v163) {
      goto LABEL_297;
    }
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v163 + 48))(v163);
    *(void *)(v6 + 132) = v61;
    uint64_t v62 = *(void *)(v2 + 280);
    uint64_t v60 = *(void *)(v62 + 32);
    if (!v60)
    {
      unsigned int v82 = 0;
      *(void *)(v61 + 32) = 0;
      *(void *)(v61 + 40) = 0;
      *(void *)(*(void *)(v61 + 8) + 90472) &= 0xFFFFFFF01C07FFCFLL;
      double v59 = (void *)(a1 + 91168);
      goto LABEL_181;
    }
    double v59 = (void *)(a1 + 91168);
  }
  uint64_t v63 = *(void *)(v62 + 24);
  uint64_t v64 = *(void *)(v61 + 32);
  uint64_t v65 = (_DWORD **)MEMORY[0x263F4B1E8];
  uint64_t v66 = (int *)*MEMORY[0x263F4B1E8];
  int v67 = *(_DWORD *)*MEMORY[0x263F4B1E8];
  if (v64 == v63 || (*(void *)(v61 + 32) = v63) == 0)
  {
    unsigned int v82 = 0;
  }
  else
  {
    uint64_t v68 = *(void *)(v61 + 8);
    uint64_t v69 = (uint64_t *)(v68 + 90472);
    uint64_t v70 = *(void *)(v68 + 38952);
    *(unsigned char *)(v70 + 466) |= *(unsigned char *)(v63 + 1050);
    *(unsigned char *)(v70 + 472) |= *(_DWORD *)(v62 + 836) != 0;
    unint64_t v71 = *(void *)(v68 + 90472) & 0xFFFFFFFFFC06FFFFLL | *(void *)(v63 + 2264);
    uint64_t v72 = v71 | 0x14;
    *(void *)(v68 + 90472) = v71 | 0x14;
    int8x16_t v73 = *(int8x16_t *)(v63 + 1056);
    int8x16_t v75 = *(int8x16_t *)(v63 + 1944);
    int8x16_t v74 = *(int8x16_t *)(v63 + 1960);
    int8x16_t v76 = *(int8x16_t *)(v63 + 1072);
    if (v64)
    {
      int8x16_t v75 = vbicq_s8(v75, *(int8x16_t *)(v64 + 1944));
      int8x16_t v73 = vbicq_s8(v73, *(int8x16_t *)(v64 + 1056));
      int8x16_t v74 = vbicq_s8(v74, *(int8x16_t *)(v64 + 1960));
      int8x16_t v76 = vbicq_s8(v76, *(int8x16_t *)(v64 + 1072));
    }
    int8x16_t v77 = vorrq_s8(v75, v73);
    *(int8x16_t *)(v68 + 90232) = vorrq_s8(vandq_s8(*(int8x16_t *)(v68 + 90232), (int8x16_t)xmmword_242EA8770), v77);
    int8x16_t v78 = vorrq_s8(v74, v76);
    *(int8x16_t *)(v68 + 90248) = vorrq_s8(*(int8x16_t *)(v68 + 90248), v78);
    int64x2_t v79 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v77, (int64x2_t)v78), (int8x16_t)vzip2q_s64((int64x2_t)v77, (int64x2_t)v78));
    int32x2_t v80 = vmovn_s64(vtstq_s64(v79, v79));
    if ((v80.i32[0] | v80.i32[1]))
    {
      uint64_t v81 = v71 | 0x20014;
      if ((v80.i8[0] & 1) == 0) {
        uint64_t v81 = v72;
      }
      if (v80.i8[4]) {
        v81 |= 0x40000uLL;
      }
      *uint64_t v69 = v81;
    }
    unsigned int v82 = *(_DWORD *)(v62 + 652);
    if (*(unsigned char *)(v62 + 710))
    {
      uint64_t v83 = *(void *)(v62 + 1824);
      if (v83)
      {
        uint64_t v84 = *(void *)(v83 + 48);
        *(void *)(*(void *)(v61 + 80) + 1008) = *(void *)(v83 + 56);
        *(void *)(v61 + 9880) = v84;
        uint64_t v85 = *(unsigned __int8 *)(v83 + 80);
        *(void *)(v68 + 90184) |= v85 << 59;
        *(void *)(v68 + 90232) |= 0x800000000000000uLL;
        uint64_t v86 = 196608;
        if (!(_BYTE)v85) {
          uint64_t v86 = 0x10000;
        }
        *v69 |= v86;
      }
    }
    if (v67)
    {
      int32x4_t v271 = v59;
      uint64_t v87 = v61;
      if ((*(_OWORD *)(v63 + 1944) & ~(*(_OWORD *)(v63 + 1640) | *(_OWORD *)(v63 + 1944) & ~*(_OWORD *)(v63 + 1976))) != 0
        && *v66)
      {
        IOGPUDeviceTraceEvent();
        uint64_t v66 = (int *)*MEMORY[0x263F4B1E8];
      }
      if (*(_DWORD *)(v62 + 1908) + *(_DWORD *)(v62 + 1876) && *v66)
      {
        IOGPUDeviceTraceEvent();
        uint64_t v61 = v87;
        uint64_t v65 = (_DWORD **)MEMORY[0x263F4B1E8];
        uint64_t v66 = (int *)*MEMORY[0x263F4B1E8];
        double v59 = v271;
      }
      else
      {
        uint64_t v61 = v87;
        double v59 = v271;
        uint64_t v65 = (_DWORD **)MEMORY[0x263F4B1E8];
      }
    }
  }
  uint64_t v97 = *(void *)(v61 + 40);
  int v98 = *v66;
  if (v97 != v60)
  {
    uint64_t v99 = *(void *)(v61 + 8);
    if ((*(unsigned char *)(v99 + 90480) & 4) != 0 && *(_DWORD *)(*(void *)(v99 + 38976) + 664) >= 2u)
    {
      int32x4_t v272 = v59;
      uint64_t v277 = v3;
      uint64_t v282 = v2;
      uint64_t v164 = v61;
      long long v165 = v65;
      int v166 = v98;
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexAmplificationCount(v99, 1u, (void *)(v99 + 90616));
      int v98 = v166;
      uint64_t v65 = v165;
      uint64_t v61 = v164;
      double v59 = v272;
      uint64_t v3 = v277;
      uint64_t v2 = v282;
      uint64_t v99 = *(void *)(v61 + 8);
      *(_DWORD *)(v99 + 90480) &= ~4u;
      uint64_t v97 = *(void *)(v61 + 40);
    }
    *(void *)(v61 + 40) = v60;
    *(unsigned char *)(*(void *)(v99 + 38952) + 466) |= *(unsigned char *)(v60 + 1050);
    unint64_t v100 = *(void *)(v60 + 3344);
    int v101 = *(_DWORD *)(v60 + 3352);
    unint64_t v102 = HIDWORD(v100);
    LODWORD(v100) = *(_DWORD *)(v99 + 37252) & 0xF0E3FF00 | v100 & 0xF1C00FF;
    *(_DWORD *)(v99 + 37260) = *(_DWORD *)(v99 + 37260) & 0xFFFFFFF8 | (*(_DWORD *)(v99 + 38656) - 1) & 7;
    *(_DWORD *)(v99 + 37264) = v102;
    uint64_t v103 = *(void *)(v99 + 90472);
    *(_DWORD *)(v99 + 37252) = v100;
    *(_DWORD *)(v99 + 37256) = v101;
    *(void *)(v99 + 90472) = v103 | 4;
    *(_DWORD *)(v61 + 22864) = 4 * *(_DWORD *)(v60 + 3504);
    uint64_t v104 = *(void *)(v61 + 8);
    unint64_t v105 = *(void *)(v104 + 90472) & 0xFFFFFFF01BFFFFFFLL | *(void *)(v60 + 2264);
    uint64_t v106 = v105 | 0x24;
    *(void *)(v104 + 90472) = v105 | 0x24;
    int8x16_t v107 = *(int8x16_t *)(v60 + 1056);
    int8x16_t v109 = *(int8x16_t *)(v60 + 1944);
    int8x16_t v108 = *(int8x16_t *)(v60 + 1960);
    int8x16_t v110 = *(int8x16_t *)(v60 + 1072);
    if (v97)
    {
      int8x16_t v109 = vbicq_s8(v109, *(int8x16_t *)(v97 + 1944));
      int8x16_t v107 = vbicq_s8(v107, *(int8x16_t *)(v97 + 1056));
      int8x16_t v108 = vbicq_s8(v108, *(int8x16_t *)(v97 + 1960));
      int8x16_t v110 = vbicq_s8(v110, *(int8x16_t *)(v97 + 1072));
    }
    int8x16_t v111 = vorrq_s8(v109, v107);
    int8x16_t v112 = vorrq_s8(v108, v110);
    int8x16_t v113 = vorrq_s8(*(int8x16_t *)(v104 + 90344), v112);
    *(int8x16_t *)(v104 + 90328) = vorrq_s8(vandq_s8(*(int8x16_t *)(v104 + 90328), (int8x16_t)xmmword_242EA8770), v111);
    *(int8x16_t *)(v104 + 90344) = v113;
    int64x2_t v114 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v111, (int64x2_t)v112), (int8x16_t)vzip2q_s64((int64x2_t)v111, (int64x2_t)v112));
    int32x2_t v115 = vmovn_s64(vtstq_s64(v114, v114));
    if ((v115.i32[0] | v115.i32[1]))
    {
      uint64_t v116 = v105 | 0x8000024;
      if ((v115.i8[0] & 1) == 0) {
        uint64_t v116 = v106;
      }
      if (v115.i8[4]) {
        uint64_t v117 = v116 | 0x10000000;
      }
      else {
        uint64_t v117 = v116;
      }
      *(void *)(v104 + 90472) = v117;
    }
    v82 |= *(_DWORD *)(v62 + 656);
    if (*(unsigned char *)(v62 + 710))
    {
      uint64_t v118 = *(void *)(v62 + 2112);
      if (v118)
      {
        uint64_t v119 = *(void *)(v118 + 48);
        *(void *)(*(void *)(v61 + 14464) + 1008) = *(void *)(v118 + 56);
        *(void *)(v61 + 24128) = v119;
        uint64_t v120 = *(unsigned __int8 *)(v118 + 80);
        *(void *)(v104 + 90280) |= v120 << 59;
        *(void *)(v104 + 90328) |= 0x800000000000000uLL;
        BOOL v208 = v120 == 0;
        uint64_t v121 = 201326592;
        if (v208) {
          uint64_t v121 = 0x4000000;
        }
        *(void *)(v104 + 90472) |= v121;
      }
    }
    if (v98)
    {
      int8x8_t v122 = v65;
      double v123 = v59;
      if ((*(_OWORD *)(*(void *)(v61 + 40) + 1944) & ~(*(_OWORD *)(*(void *)(v61 + 40) + 1640) | *(_OWORD *)(*(void *)(v61 + 40) + 1944) & ~*(_OWORD *)(*(void *)(v61 + 40) + 1976))) != 0
        && **v65)
      {
        IOGPUDeviceTraceEvent();
      }
      if (*(_DWORD *)(v62 + 2196) + *(_DWORD *)(v62 + 2164) && **v122)
      {
        IOGPUDeviceTraceEvent();
        double v59 = v123;
      }
      else
      {
        double v59 = v123;
      }
    }
  }
LABEL_181:
  uint64_t v172 = *(void *)(v2 + 272);
  uint64_t v171 = *(uint64_t **)(v2 + 280);
  uint64_t v173 = *v171;
  int v174 = *(_DWORD *)*MEMORY[0x263F4B1E8];
  if (v172 != *v171)
  {
    *(void *)(v2 + 272) = v173;
    if (v173)
    {
      uint64_t v175 = *(void *)(v2 + 256);
      *(unsigned char *)(v175 + 1296) |= *(unsigned char *)(v173 + 1045);
      *(unsigned char *)(a1 + 90577) |= *(unsigned char *)(v173 + 1050);
      *(unsigned char *)(v175 + 1304) |= *(unsigned char *)(v173 + 3389);
      unsigned int v176 = *((_DWORD *)v6 + 204) & 0xF7200000;
      unsigned int v177 = *((_DWORD *)v6 + 205) & 0xF7200000;
      int v178 = *((_DWORD *)v171 + 186);
      *(_OWORD *)(a1 + 37228) = *(_OWORD *)(v171 + 91);
      *(_DWORD *)(a1 + 37244) = v178;
      *((_DWORD *)v6 + 204) = *((_DWORD *)v6 + 204) & 0x8DFFFFF | v176;
      *((_DWORD *)v6 + 205) = *((_DWORD *)v6 + 205) & 0x8DFFFFF | v177;
      int v179 = *(unsigned __int8 *)(v173 + 3390);
      LOBYTE(v176) = (v179 - 1) < 2;
      unsigned int v180 = (v179 & 3) << 22;
      if ((v176 & ((*(void *)(*(void *)(*(void *)(a1 + 1456) + 808) + 7288) & 0x8000) != 0)) != 0) {
        unsigned int v180 = 0;
      }
      *((int8x8_t *)v6 + 102) = vorr_s8((int8x8_t)(*((void *)v6 + 102) & 0xFF3FFFFFFF3FFFFFLL), (int8x8_t)vdup_n_s32(v180));
      uint64_t v181 = *(void *)(a1 + 90472) | 0x100000000000;
      *(void *)(a1 + 90472) = v181;
      *((_DWORD *)v6 + 208) = *((_DWORD *)v6 + 208) & 0xFF1EFFFF | *(_DWORD *)(v173 + 3312) & 0xE10000;
      unint64_t v182 = v181 & 0xFFFFF06FFFFFFFFBLL | *(void *)(v173 + 2264);
      uint64_t v183 = v182 | 0x100000000006;
      *(void *)(a1 + 90472) = v182 | 0x100000000006;
      int8x16_t v184 = *(int8x16_t *)(v173 + 1056);
      int8x16_t v186 = *(int8x16_t *)(v173 + 1944);
      int8x16_t v185 = *(int8x16_t *)(v173 + 1960);
      int8x16_t v187 = *(int8x16_t *)(v173 + 1072);
      if (v172)
      {
        int8x16_t v186 = vbicq_s8(v186, *(int8x16_t *)(v172 + 1944));
        int8x16_t v184 = vbicq_s8(v184, *(int8x16_t *)(v172 + 1056));
        int8x16_t v185 = vbicq_s8(v185, *(int8x16_t *)(v172 + 1960));
        int8x16_t v187 = vbicq_s8(v187, *(int8x16_t *)(v172 + 1072));
      }
      int v285 = v174;
      unint64_t v276 = v59;
      int8x16_t v188 = vorrq_s8(v186, v184);
      int8x16_t v189 = vorrq_s8(v185, v187);
      int8x16_t v190 = vorrq_s8(*(int8x16_t *)(a1 + 90440), v189);
      *(int8x16_t *)(a1 + 90424) = vorrq_s8(vandq_s8(*(int8x16_t *)(a1 + 90424), (int8x16_t)xmmword_242EA8770), v188);
      *(int8x16_t *)(a1 + 90440) = v190;
      int64x2_t v191 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v188, (int64x2_t)v189), (int8x16_t)vzip2q_s64((int64x2_t)v188, (int64x2_t)v189));
      int32x2_t v192 = vmovn_s64(vtstq_s64(v191, v191));
      if ((v192.i32[0] | v192.i32[1]))
      {
        uint64_t v193 = v182 | 0x102000000006;
        if (v192.i8[0]) {
          uint64_t v194 = v193;
        }
        else {
          uint64_t v194 = v183;
        }
        if (v192.i8[4]) {
          uint64_t v195 = v194 | 0x4000000000;
        }
        else {
          uint64_t v195 = v194;
        }
        *(void *)(a1 + 90472) = v195;
      }
      int v281 = *((_DWORD *)v171 + 162);
      int v269 = *((_DWORD *)v171 + 333);
      int v270 = *((_DWORD *)v171 + 325);
      int v196 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(a1 + 38816, (_DWORD *)v171 + 18, (_DWORD *)(a1 + 1976));
      uint64_t v197 = *(void *)(*(void *)(v2 + 280) + 3088);
      if (v197) {
        int v198 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(a1 + 38816, v197);
      }
      else {
        int v198 = 0;
      }
      if ((v196 | v198) == 1)
      {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindFragmentUSCSpillBuffer(a1);
        *v276 |= 0x100000000000uLL;
      }
      v6[206] |= *(_OWORD *)(v173 + 1056) != 0 || *(_OWORD *)(v173 + 1072) != 0;
      if (v285)
      {
        __int32 v257 = *(void **)(v2 + 272);
        uint64_t v258 = v257[243] & ~(v257[205] | v257[243] & ~v257[247]);
        uint64_t v259 = v257[244] & ~(v257[206] | v257[244] & ~v257[248]);
        int v260 = (_DWORD *)*MEMORY[0x263F4B1E8];
        if (v258 | v259 && *v260)
        {
          IOGPUDeviceTraceEvent();
          int v260 = (_DWORD *)*MEMORY[0x263F4B1E8];
        }
        if (v269 + v270 && *v260)
        {
          IOGPUDeviceTraceEvent();
          int v260 = (_DWORD *)*MEMORY[0x263F4B1E8];
        }
        if (*v260) {
          IOGPUDeviceTraceEvent();
        }
      }
      v82 |= v281;
      {
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateFragmentShaderVariant(AGX::HAL200::FragmentProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloCC_SHA256_CTX c = 0;
      }
      if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateFragmentShaderVariant(AGX::HAL200::FragmentProgramVariant const*,unsigned int &)::brk_handler_end_of_shader_alloc)
      {
        {
          AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateFragmentShaderVariant(AGX::HAL200::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space = 0;
        }
        if (AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateFragmentShaderVariant(AGX::HAL200::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space) {
          *(void *)(*(void *)(v2 + 256) + 1008) = (*(void *)(v173 + 1200)
        }
                                                       - AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::updateFragmentShaderVariant(AGX::HAL200::FragmentProgramVariant const*,unsigned int &)::per_shader_brk_space
                                                       + *(void *)(v173 + 1424)
                                                       + 4095) & 0xFFFFFFFFFFFFF000;
      }
      goto LABEL_209;
    }
    unint64_t v203 = *(void *)(a1 + 90472) & 0xFFFFE07FFFFFFFF9;
    *((_DWORD *)v6 + 203) = *((_DWORD *)v6 + 203) & 0x199FFFFF | 0x200000;
    *((_DWORD *)v6 + 206) &= 0xFFFE0000;
    *((void *)v6 + 102) |= 0xC0000000C00000uLL;
    *((_DWORD *)v6 + 208) &= 0xFF1EFFFF;
    uint64_t v202 = v203 | 0x100000000004;
    goto LABEL_208;
  }
  if (v6[236])
  {
    unsigned int v199 = *((_DWORD *)v6 + 204) & 0xF7200000;
    unsigned int v200 = *((_DWORD *)v6 + 205) & 0xF7200000;
    long long v201 = *(_OWORD *)(v171 + 91);
    *(_DWORD *)(a1 + 37244) = *((_DWORD *)v171 + 186);
    *(_OWORD *)(a1 + 37228) = v201;
    *((_DWORD *)v6 + 204) = *((_DWORD *)v6 + 204) & 0x8DFFFFF | v199;
    *((_DWORD *)v6 + 205) = *((_DWORD *)v6 + 205) & 0x8DFFFFF | v200;
    uint64_t v202 = *(void *)(a1 + 90472) | 0x100000000000;
LABEL_208:
    *(void *)(a1 + 90472) = v202;
  }
LABEL_209:
  int v204 = (float *)(a1 + 77372);
  uint64_t v205 = *(void *)(v2 + 280);
  if (v82)
  {
    do
    {
      v82 &= ~(1 << __clz(__rbit32(v82)));
      IOGPUResourceListAddResource();
    }
    while (v82);
    uint64_t v205 = *(void *)(v2 + 280);
  }
  uint64_t v4 = a2;
  if (*(void *)(v205 + 3208))
  {
    IOGPUResourceListAddResource();
    uint64_t v205 = *(void *)(v2 + 280);
  }
  float v206 = *(float *)(v205 + 668);
  int v207 = *(_DWORD *)(v205 + 672);
  if (*v204 != v206 || *(_DWORD *)(a1 + 77376) != v207)
  {
    *int v204 = v206;
    *(_DWORD *)(a1 + 77376) = v207;
    BOOL v208 = v206 == 1.0 && v207 == -1;
    if (!v208)
    {
      *(void *)(a1 + 90472) |= 0x1000000000uLL;
      *(void *)(a1 + 90456) |= 2uLL;
    }
  }
  int v209 = *(unsigned __int8 *)(v205 + 680);
  if (!v3
    || v6[2220] != v209
    || *(_DWORD *)(v3 + 748) != *(_DWORD *)(v205 + 748)
    || *(float *)(v3 + 752) != *(float *)(v205 + 752)
    || *(_DWORD *)(v3 + 756) != *(_DWORD *)(v205 + 756))
  {
    v6[2220] = v209;
    *(void *)(a1 + 90472) |= 0x2000000000000uLL;
  }
LABEL_227:
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(v4);
  uint64_t v210 = *(void *)(v2 + 280);
  if (*(unsigned char *)(v210 + 710))
  {
    uint64_t v211 = *(void *)(v210 + 960);
    if (v211)
    {
      uint64_t v212 = *(void *)(v211 + 48);
      *(void *)(v2 + 1304) = *(void *)(v211 + 56);
      *(void *)(a1 + 78656) = v212;
      uint64_t v213 = *(unsigned __int8 *)(v211 + 80);
      *(void *)(a1 + 90136) |= v213 << 59;
      *v7 |= 0x800000000000000uLL;
      BOOL v208 = v213 == 0;
      uint64_t v214 = 192;
      if (v208) {
        uint64_t v214 = 64;
      }
      *(void *)(a1 + 90472) |= v214;
    }
    uint64_t v215 = *(void *)(v210 + 1248);
    if (v215)
    {
      uint64_t v216 = *(void *)(v215 + 48);
      *(void *)(v2 + 11496) = *(void *)(v215 + 56);
      *(void *)(a1 + 79176) = v216;
      uint64_t v217 = *(unsigned __int8 *)(v215 + 80);
      *(void *)(a1 + 90376) |= v217 << 59;
      *(void *)(a1 + 90424) |= 0x800000000000000uLL;
      BOOL v208 = v217 == 0;
      uint64_t v218 = 0x3000000000;
      if (v208) {
        uint64_t v218 = 0x1000000000;
      }
      *(void *)(a1 + 90472) |= v218;
    }
    uint64_t v219 = *(void *)(v210 + 976);
    if (v219)
    {
      uint64_t v220 = *(void *)(v219 + 48);
      *(void *)(v2 + 1312) = *(void *)(v219 + 56);
      *(void *)(a1 + 78664) = v220;
      uint64_t v221 = *(unsigned __int8 *)(v219 + 80);
      *(void *)(a1 + 90136) |= v221 << 60;
      *v7 |= 0x1000000000000000uLL;
      BOOL v208 = v221 == 0;
      uint64_t v222 = 192;
      if (v208) {
        uint64_t v222 = 64;
      }
      *(void *)(a1 + 90472) |= v222;
    }
    uint64_t v223 = *(void *)(v210 + 1264);
    if (v223)
    {
      uint64_t v224 = *(void *)(v223 + 48);
      *(void *)(v2 + 11504) = *(void *)(v223 + 56);
      *(void *)(a1 + 79184) = v224;
      uint64_t v225 = *(unsigned __int8 *)(v223 + 80);
      *(void *)(a1 + 90376) |= v225 << 60;
      *(void *)(a1 + 90424) |= 0x1000000000000000uLL;
      BOOL v208 = v225 == 0;
      uint64_t v226 = 0x3000000000;
      if (v208) {
        uint64_t v226 = 0x1000000000;
      }
      *(void *)(a1 + 90472) |= v226;
    }
  }
  int v227 = *(_DWORD *)(v210 + 3200);
  if (v227)
  {
    __n128 v228 = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1616), (unsigned int *)(v210 + 2808));
    int v229 = *(void **)(v2 + 280);
    if (v227)
    {
      uint64_t v230 = v229[394];
      uint64_t v231 = *(void *)(v230 + 48);
      *(void *)(v2 + 1344) = *(void *)(v230 + 56);
      *(void *)(a1 + 78696) = v231;
      uint64_t v232 = *(unsigned __int8 *)(v230 + 80);
      *(void *)(a1 + 90144) |= v232;
      *(void *)(a1 + 90096) |= 1uLL;
      BOOL v208 = v232 == 0;
      uint64_t v233 = 192;
      if (v208) {
        uint64_t v233 = 64;
      }
      *(void *)(a1 + 90472) |= v233;
      if ((v227 & 2) == 0)
      {
LABEL_247:
        if ((v227 & 4) == 0) {
          goto LABEL_248;
        }
        goto LABEL_256;
      }
    }
    else if ((v227 & 2) == 0)
    {
      goto LABEL_247;
    }
    uint64_t v234 = v229[395];
    uint64_t v235 = *(void *)(v234 + 48);
    *(void *)(v2 + 11536) = *(void *)(v234 + 56);
    *(void *)(a1 + 79216) = v235;
    uint64_t v236 = *(unsigned __int8 *)(v234 + 80);
    *(void *)(a1 + 90384) |= v236;
    *(void *)(a1 + 90432) |= 1uLL;
    BOOL v208 = v236 == 0;
    uint64_t v237 = 0x3000000000;
    if (v208) {
      uint64_t v237 = 0x1000000000;
    }
    *(void *)(a1 + 90472) |= v237;
    if ((v227 & 4) == 0)
    {
LABEL_248:
      if (!v229[4]) {
        return;
      }
LABEL_257:
      if ((v227 & 8) != 0)
      {
        int v239 = *(void **)(v6 + 132);
        if (!v239)
        {
          uint64_t v255 = *(void *)(v6 + 164);
          if (!v255) {
            goto LABEL_297;
          }
          int v239 = (void *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v255 + 48))(v255, v228);
          *(void *)(v6 + 132) = v239;
          int v229 = *(void **)(v2 + 280);
        }
        uint64_t v240 = v229[397];
        uint64_t v241 = *(void *)(v240 + 48);
        *(void *)(v239[10] + 1048) = *(void *)(v240 + 56);
        uint64_t v242 = v239[1] + 90112;
        v239[1240] = v241;
        uint64_t v243 = *(unsigned __int8 *)(v240 + 80);
        uint64_t v245 = *(void *)(v242 + 80);
        signed int v244 = (uint64_t *)(v242 + 80);
        *signed int v244 = v245 | v243;
        v244[6] |= 1uLL;
        BOOL v208 = v243 == 0;
        uint64_t v246 = 196608;
        if (v208) {
          uint64_t v246 = 0x10000;
        }
        v244[35] |= v246;
      }
      if ((v227 & 0x10) == 0) {
        return;
      }
      signed int v247 = *(void **)(v6 + 132);
      if (v247) {
        goto LABEL_264;
      }
      uint64_t v256 = *(void *)(v6 + 164);
      if (v256)
      {
        signed int v247 = (void *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v256 + 48))(v256, v228);
        *(void *)(v6 + 132) = v247;
LABEL_264:
        uint64_t v248 = *(void *)(*(void *)(v2 + 280) + 3184);
        uint64_t v249 = *(void *)(v248 + 48);
        *(void *)(v247[1808] + 1048) = *(void *)(v248 + 56);
        uint64_t v250 = v247[1] + 90112;
        v247[3021] = v249;
        uint64_t v251 = *(unsigned __int8 *)(v248 + 80);
        uint64_t v253 = *(void *)(v250 + 176);
        int v252 = (uint64_t *)(v250 + 176);
        *int v252 = v253 | v251;
        v252[6] |= 1uLL;
        BOOL v208 = v251 == 0;
        uint64_t v254 = 201326592;
        if (v208) {
          uint64_t v254 = 0x4000000;
        }
        v252[23] |= v254;
        return;
      }
LABEL_297:
      uint64_t v265 = std::__throw_bad_function_call[abi:nn180100]();
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBuffer(v265, v266, v267, v268);
      return;
    }
LABEL_256:
    uint64_t v238 = *(void *)(v229[396] + 48);
    *(void *)(a1 + 3368) = *(void *)(v229[396] + 56);
    *(void *)(a1 + 22360) = v238;
    if (!v229[4]) {
      return;
    }
    goto LABEL_257;
  }
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 <= 0x22) {
    *(void *)(a1 + 8 * a4 + 13000) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t result = a1 + 80;
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(result - 72);
  uint64_t v8 = 8 * a4;
  *(void *)(v5 + v8 + 536) = *(void *)(a2 + 56) + a3;
  *(void *)(result + v8 + 9328) = v6;
  uint64_t v9 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v10 = v7 + 90088 + 8 * (a4 > 0x3F);
  *(void *)(v10 + 96) |= v9 << a4;
  *(void *)(v10 + 144) |= 1 << a4;
  BOOL v11 = v9 == 0;
  uint64_t v12 = 196608;
  if (v11) {
    uint64_t v12 = 0x10000;
  }
  *(void *)(v7 + 90472) |= v12;
  return result;
}

{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(a1, a2, a3, a4, (void *)(a1 + 80));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBuffer(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (a4 <= 0x22) {
    *(void *)(result + 8 * a4 + 27248) = 0;
  }
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = 8 * a4;
  *(void *)(*(void *)(result + 14464) + v6 + 536) = *(void *)(a2 + 56) + a3;
  *(void *)(result + 14464 + v6 + 9192) = v4;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 80);
  uint64_t v8 = v5 + 90088 + 8 * (a4 > 0x3F);
  *(void *)(v8 + 192) |= v7 << a4;
  *(void *)(v8 + 240) |= 1 << a4;
  BOOL v9 = v7 == 0;
  uint64_t v10 = 201326592;
  if (v9) {
    uint64_t v10 = 0x4000000;
  }
  *(void *)(v5 + 90472) |= v10;
  return result;
}

void AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(uint64_t a1, char a2, uint64_t a3)
{
  {
    uint64_t v15 = a3;
    char v16 = a2;
    LOBYTE(a3) = v15;
    a2 = v16;
    if (v11)
    {
      if (objc_msgSend(*(id *)(a1 + 1456), "supportsRenderMemoryBarrier", v15)) {
        char v12 = 1;
      }
      else {
        char v12 = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::isAfterFragmentMemoryBarrierSupported();
      }
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::supports_after_fragment = v12;
      LOBYTE(a3) = v15;
      a2 = v16;
    }
  }
  {
    char v17 = a2;
    char v13 = a3;
    LOBYTE(a3) = v13;
    a2 = v17;
    if (v14)
    {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::hw_geometry_pipeline = 1;
      LOBYTE(a3) = v13;
      a2 = v17;
    }
  }
  if (a3)
  {
    int v4 = 1;
    uint64_t v5 = a3 & 6;
    if (a2) {
      goto LABEL_5;
    }
  }
  else
  {
    int v4 = ((a3 & 0x18) != 0) & AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::hw_geometry_pipeline;
    uint64_t v5 = a3 & 6;
    if (a2)
    {
LABEL_5:
      int v6 = 1;
      goto LABEL_8;
    }
  }
  int v6 = ((a2 & 0x18) != 0) & AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::hw_geometry_pipeline;
LABEL_8:
  if ((a2 & 6) != 0) {
    char v7 = 1;
  }
  else {
    char v7 = v6;
  }
  BOOL v8 = v5 == 0;
  char v9 = v4 ^ 1;
  if (!v8) {
    char v9 = 0;
  }
  if (v9 & 1) == 0 && (v7)
  {
    if ((a2 & 6) != 0
      && AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::memoryBarrier(unsigned long,unsigned long)::supports_after_fragment)
    {
      AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::restartRenderPass(a1, (unint64_t *)(a1 + 90472), 16, 0);
    }
    else
    {
      if ((a2 & 6) != 0) {
        int v6 = 0;
      }
      if ((v4 & v6) == 1)
      {
        if (*(void *)(a1 + 36320)) {
          AGX::RenderIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchVDMControlStreamAndReset(a1 + 36264, *(unint64_t **)(a1 + 90752), *(void *)(a1 + 90760), (_DWORD *)(a1 + 90584));
        }
        AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveVertexBarrier(a1 + 16, 0);
        ++*(_DWORD *)(a1 + 90584);
        uint64_t v10 = *(_DWORD **)(a1 + 64);
        *uint64_t v10 = 553650528;
        *(void *)(a1 + 64) = v10 + 1;
      }
    }
  }
}

void sub_242B65B00(_Unwind_Exception *a1)
{
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeDepthCopy(uint64_t *a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 11312;
  uint64_t v3 = a1 + 4569;
  int v4 = AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::newCommand((uint64_t)a1, 1072);
  if ([(id)*a1 skipRender])
  {
    uint64_t v56 = a1[194] - a1[196];
    *(_DWORD *)(v56 + 12) = 1;
    if ((*(unsigned char *)(v56 + 8) & 4) != 0) {
      **(unsigned char **)(*a1 + 688) = 1;
    }
  }
  *((void *)v4 + 1) = 0;
  *(void *)(v4 + 5) = 0x200000408;
  uint64_t v5 = v4 + 8;
  uint64_t v6 = *v2;
  if (*v3) {
    AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::processFences(*v3);
  }
  if (v6 && (int v7 = *(_DWORD *)(v6 + 528)) != 0)
  {
    unsigned int v8 = ((2 * v7 + 7) & 0xFFFFFFF8) + 16;
    LODWORD(__dst[0]) = 0;
    uint64_t v9 = AGX::SidebandBufferAllocator::allocate((AGX::SidebandBufferAllocator *)(a1 + 183), v8, 1u, (unsigned int *)__dst);
    *(void *)uint64_t v9 = 0;
    *(_DWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 12) = v7;
    int v10 = __dst[0];
    v4[2] = v8;
    v4[3] = v10;
    AGX::FenceList::copyFences(v6, (unsigned __int16 *)(v9 + 16));
    v2[85] |= 0x100uLL;
  }
  else
  {
    *((void *)v4 + 1) = 0;
  }
  bzero(v4 + 8, 0x408uLL);
  v4[264] = 1;
  uint64_t v11 = a1[215];
  uint64_t v12 = v11 + 127;
  uint64_t v13 = a1[52];
  unint64_t v14 = v13 + v11 + 127;
  if (v14 <= a1[51]) {
    goto LABEL_9;
  }
  int v57 = AGX::DataBufferAllocator<34ul>::growNoInline(a1 + 2, 11, 0);
  uint64_t v13 = a1[52];
  if (v57)
  {
    unint64_t v14 = v13 + v12;
    if (v13 + v12 > (unint64_t)a1[51]) {
      abort();
    }
LABEL_9:
    a1[53] = v14;
  }
  unint64_t v15 = (v13 + 127) & 0xFFFFFFFFFFFFFF80;
  unint64_t v16 = v15 + a1[54];
  a1[52] = v15 + (v11 & 0xFFFFFFFFFFFFFFFCLL);
  *((void *)v4 + 63) = v16;
  uint64_t v17 = a1[187];
  uint64_t v18 = (void *)a1[246];
  uint64_t BGOProgramVariant = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getBGOProgramVariant(v18, 2);
  memcpy(__dst, v18 + 332, 0x328uLL);
  memcpy(v64, v18 + 433, sizeof(v64));
  unint64_t v20 = (unint64_t)AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitBackgroundObjectArguments(a1 + 219, v17, a1 + 2, BGOProgramVariant, (unint64_t *)__dst, (uint64_t)v64);
  if (*(unsigned char *)(BGOProgramVariant + 2632))
  {
    unint64_t v21 = AGX::BackgroundObjectProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::calculateBackgroundObjectBits(BGOProgramVariant + 1344, v20, 0, 0);
  }
  else
  {
    unint64_t v21 = *(void *)(BGOProgramVariant + 2592) & 0x7FFFFFFFFFFFLL | ((unint64_t)*(unsigned int *)(BGOProgramVariant + 2616) << 47);
    unint64_t v22 = *(void *)(BGOProgramVariant + 2600) & 0xFFFF00000000003FLL | (((v20 >> 6) & 0x3FFFFFFFFFFLL) << 6);
  }
  *((void *)v4 + 24) = v21;
  *((void *)v4 + 25) = v22;
  unsigned int v23 = *(_DWORD *)(BGOProgramVariant + 396);
  if (*((_DWORD *)a1 + 486) > v23) {
    unsigned int v23 = *((_DWORD *)a1 + 486);
  }
  if (v23 <= *(_DWORD *)(BGOProgramVariant + 408)) {
    unsigned int v23 = *(_DWORD *)(BGOProgramVariant + 408);
  }
  *((_DWORD *)a1 + 486) = v23;
  unsigned int v24 = *(_DWORD *)(BGOProgramVariant + 428);
  if (*((_DWORD *)a1 + 488) > v24) {
    unsigned int v24 = *((_DWORD *)a1 + 488);
  }
  if (v24 <= *(_DWORD *)(BGOProgramVariant + 440)) {
    unsigned int v24 = *(_DWORD *)(BGOProgramVariant + 440);
  }
  *((_DWORD *)a1 + 488) = v24;
  *((_DWORD *)a1 + 487) = *(_DWORD *)(BGOProgramVariant + 392);
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  uint64_t v61 = 0;
  uint64_t v60 = 0;
  uint64_t v59 = 0;
  __dst[0] = xmmword_242EA7390;
  *(void *)&__dst[1] = 0xDEADBEEFBAADC0DELL;
  *(_OWORD *)((char *)&__dst[16] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[17] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[18] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[19] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[20] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[21] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[22] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[23] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[24] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[25] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[1] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[2] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[3] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[4] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[5] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[6] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[7] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[8] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[9] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[10] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[11] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[12] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[13] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[14] + 8) = 0u;
  *(_OWORD *)((char *)&__dst[15] + 8) = 0u;
  bzero(&__dst[27], 0x458uLL);
  EOTProgramVariant = (_DWORD *)AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getEOTProgramVariant(v18, 2);
  v64[0] = *(_OWORD *)((char *)a1 + 1924);
  LODWORD(v64[1]) = *((_DWORD *)a1 + 485);
  uint64_t v26 = AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsEarly(v17, a1 + 2, (uint64_t)EOTProgramVariant, (uint64_t)v64, &v63, &v62, &v61, (unint64_t *)&v60, (unint64_t *)&v59);
  uint64_t v28 = v27;
  uint64_t v29 = AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getEOTProgramVariant(v18, 2);
  AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsLate(v29, (uint64_t)__dst, v63, (int)v62, v61, v60, v59, (char **)a1[219]);
  *((void *)v5 + 24) = v26;
  *((void *)v5 + 25) = v28;
  *((void *)v5 + 26) = v26;
  *((void *)v5 + 27) = v28;
  unsigned int v30 = EOTProgramVariant[17];
  if (*((_DWORD *)a1 + 486) > v30) {
    unsigned int v30 = *((_DWORD *)a1 + 486);
  }
  if (v30 <= EOTProgramVariant[19]) {
    unsigned int v30 = EOTProgramVariant[19];
  }
  *((_DWORD *)a1 + 486) = v30;
  unsigned int v31 = EOTProgramVariant[20];
  if (*((_DWORD *)a1 + 488) > v31) {
    unsigned int v31 = *((_DWORD *)a1 + 488);
  }
  if (v31 <= EOTProgramVariant[22]) {
    unsigned int v31 = EOTProgramVariant[22];
  }
  *((_DWORD *)a1 + 488) = v31;
  *((_DWORD *)a1 + 487) = EOTProgramVariant[23];
  AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)__dst, *(void *)(a1[182] + 808), *(void *)(*(void *)(a1[182] + 808) + 6040));
  int v32 = 32 * *((_DWORD *)a1 + 486);
  int v33 = 32 * *((_DWORD *)a1 + 488);
  unsigned int v34 = ((v33 + 6143) >> 12) + ((v32 + 17279) >> 12);
  uint64_t v35 = ((v32 + 78719) >> 16) + ((v33 + 67583) >> 16);
  if (*(_DWORD *)(*((void *)&__dst[3] + 1) + 5864) == 21) {
    int v36 = 10;
  }
  else {
    int v36 = 14;
  }
  *(void *)&v64[0] = (v36 * v35 + 96 * v34) | ((unint64_t)(v35 + v34) << 32);
  *((void *)&v64[0] + 1) = v35;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment((uint64_t)__dst, v64, (_DWORD *)a1 + 494))AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer((uint64_t)__dst, (__n128 *)v5 + 39, 0); {
  uint64_t v37 = a1[246];
  }
  int v38 = *(_DWORD *)(v37 + 2576);
  *(void *)&long long v39 = *(void *)(v37 + 2580);
  *((void *)&v39 + 1) = *(void *)(v37 + 2592);
  int v40 = *(_DWORD *)(v37 + 3948);
  long long v41 = *(_OWORD *)(v37 + 2600);
  long long v42 = *(_OWORD *)(v37 + 2616);
  long long v43 = *(_OWORD *)(v37 + 2632);
  uint64_t v44 = *(void *)(v37 + 2648);
  *((void *)v5 + 116) = 0;
  v5[234] = v38;
  *(_OWORD *)(v5 + 235) = v39;
  *(_OWORD *)(v5 + 239) = v41;
  *(_OWORD *)(v5 + 243) = v42;
  *(_OWORD *)(v5 + 247) = v43;
  *(void *)(v5 + 251) = v44;
  v5[253] = v40;
  *((void *)v5 + 127) = 0;
  *((void *)v5 + 127) = *(void *)(v37 + 3940);
  if (v2[12])
  {
    if (a1[185]) {
      MTLResourceListAddResource();
    }
    IOGPUResourceListAddResource();
    int8x16_t v45 = (void *)v2[12];
    int8x16_t v46 = (uint64_t *)((char *)a1 + 1516);
    if (v45)
    {
      int v48 = *((_DWORD *)v2 + 28);
      int v47 = *((_DWORD *)v2 + 29);
      if ((v48 & v47) != 0xFFFFFFFF)
      {
        v5[196] = [v45 resourceID];
        v5[197] = v48;
        v5[198] = v47;
        goto LABEL_43;
      }
    }
  }
  else
  {
    int8x16_t v46 = (uint64_t *)((char *)a1 + 1516);
  }
  *((void *)v5 + 98) = -1;
  v5[198] = -1;
LABEL_43:
  *((_DWORD *)v2 + 28) = -1;
  *((unsigned char *)v5 + 820) = *((unsigned char *)a1 + 1512);
  v5[204] = *((_DWORD *)a1 + 377);
  *((void *)v5 + 103) = *v46;
  uint64_t v49 = a1[246];
  *((void *)v5 + 31) = *(void *)(v49 + 4176);
  *((void *)v5 + 32) = *(void *)(v49 + 4184);
  *((void *)v5 + 33) = *(void *)(v49 + 4328);
  *((void *)v5 + 34) = *(void *)(v49 + 4192);
  *((void *)v5 + 35) = *(void *)(v49 + 4200);
  *((void *)v5 + 36) = *(void *)(v49 + 4336);
  *((void *)v5 + 40) = *(void *)(v49 + 4208);
  *((void *)v5 + 41) = *(void *)(v49 + 4352);
  *((void *)v5 + 45) = *(void *)(v49 + 4216);
  *((void *)v5 + 46) = *(void *)(v49 + 4344);
  *((void *)v5 + 50) = *(void *)(v49 + 4224);
  *((void *)v5 + 51) = *(void *)(v49 + 4360);
  *((void *)v5 + 37) = *(void *)(v49 + 4232);
  *((void *)v5 + 42) = *(void *)(v49 + 4240);
  *((void *)v5 + 47) = *(void *)(v49 + 4248);
  *((void *)v5 + 52) = *(void *)(v49 + 4256);
  *((void *)v5 + 38) = *(void *)(v49 + 4264);
  *((void *)v5 + 43) = *(void *)(v49 + 4272);
  *((void *)v5 + 48) = *(void *)(v49 + 4280);
  *((void *)v5 + 53) = *(void *)(v49 + 4288);
  *((void *)v5 + 39) = *(void *)(v49 + 4296);
  *((void *)v5 + 49) = *(void *)(v49 + 4304);
  *((void *)v5 + 44) = *(void *)(v49 + 4312);
  *((void *)v5 + 54) = *(void *)(v49 + 4320);
  unsigned int v50 = *(unsigned __int16 *)(v49 + 4374);
  *((void *)v5 + 31) |= (v50 << 18) & 0x80000 | ((v50 & 1) << 15) | (((v50 >> 2) & 1) << 14) & 0xFFFBFFFF | (((v50 >> 3) & 1) << 18);
  if ((v50 & 5) != 0) {
    v5[195] = 2;
  }
  if ((v50 & 0xA) != 0 && *(unsigned char *)(v49 + 3904)) {
    v5[195] = 2;
  }
  v5[188] = *(_DWORD *)(v49 + 3928);
  v5[189] = *(unsigned __int8 *)(v49 + 3936) | 0x300;
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addAPIResources(a1[246], a1[185], a1[186]);
  AGX::FramebufferGen3_2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::addGPUResources(a1[246], a1[187], (void *)a1[199], 63);
  *((void *)v5 + 101) = 0;
  if (!*(void *)(a1[187] + 520))
  {
    uint64_t v54 = a1[194] - a1[196];
    *(_DWORD *)(v54 + 12) = 1;
    if ((*(unsigned char *)(v54 + 8) & 4) != 0) {
      **(unsigned char **)(*a1 + 688) = 1;
    }
  }
  return AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::endCommand((uint64_t)a1, v51, v52, v53);
}

void sub_242B66D58(_Unwind_Exception *a1)
{
  AGX::Framebuffer<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~Framebuffer(v1);
  _Unwind_Resume(a1);
}

void sub_242B66D6C(_Unwind_Exception *a1)
{
  int v4 = *(void **)(v1 + 2448);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      operator delete(v4);
      int v4 = v5;
    }
    while (v5);
  }
  *(void *)(v1 + 2448) = 0;

  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PointerWithOnDemandObjectCreation<AGX::HAL200::HWGeometryPipelineContext>::~PointerWithOnDemandObjectCreation(v2 + 4569);
  uint64_t v6 = *(void *)(v1 + 56);
  if (v6 == v1 + 32)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 + 32) + 32))(v1 + 32);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
  }
  uint64_t v7 = *(void *)(v1 + 24);
  if (v7 == v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  else if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 40))(v7);
  }
  unsigned int v8 = (void **)v2[219];
  if (v8)
  {
    free(*v8);
    MEMORY[0x24566ED90](v8, 0x1020C4014030ADELL);
  }
  uint64_t v9 = (void **)v2[177];
  int v10 = (void **)v2[178];
  if (v9 == v10)
  {
    if (!v9) {
      goto LABEL_15;
    }
  }
  else
  {
    do
    {
      uint64_t v11 = *v9++;
      free(v11);
    }
    while (v9 != v10);
    uint64_t v9 = (void **)v2[177];
    if (!v9) {
LABEL_15:
    }
      _Unwind_Resume(a1);
  }
  v2[178] = v9;
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::PointerWithOnDemandObjectCreation<AGX::HAL200::HWGeometryPipelineContext>::~PointerWithOnDemandObjectCreation(uint64_t *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v7 = *a1;
  uint64_t v3 = a1[8];
  if (v3)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v7);
    int v4 = (void *)a1[8];
    if (v4 == v2)
    {
      (*(void (**)(void *))(*v2 + 32))(v2);
    }
    else if (v4)
    {
      (*(void (**)(void *))(*v4 + 40))(v4);
    }
    uint64_t v5 = (uint64_t *)a1[4];
    if (v5 == a1 + 1)
    {
      (*(void (**)(uint64_t *))(a1[1] + 32))(a1 + 1);
    }
    else if (v5)
    {
      (*(void (**)(uint64_t *))(*v5 + 40))(v5);
    }
    return (uint64_t)a1;
  }
  else
  {
    uint64_t result = std::__throw_bad_function_call[abi:nn180100]();
    __break(1u);
  }
  return result;
}

void sub_242B67018(_Unwind_Exception *a1)
{
  std::function<void ()(void *)>::~function(v2);
  std::function<AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~function((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *std::function<void ()(void *)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AGX::HAL200::RenderUSCStateLoader::~RenderUSCStateLoader(void ***this)
{
  uint64_t v1 = *this;
  if (*this)
  {
    free(*v1);
    MEMORY[0x24566ED90](v1, 0x1020C4014030ADELL);
  }
}

void sub_242B68F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ***a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  std::function<void ()(void *)>::~function(v25);
  std::function<AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~function(v27);
  std::function<void ()(void *)>::~function((void *)(v28 - 208));
  std::function<AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~function((void *)(v28 - 176));
  std::function<void ()(void *)>::~function(a25);
  std::function<AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~function(a11);
  AGX::HAL200::RenderUSCStateLoader::~RenderUSCStateLoader(a18);
  AGX::ContextCommon<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~ContextCommon(v26);
  _Unwind_Resume(a1);
}

void std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v2 = (void (***)(void))*a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    (**v2)(*a2);
    int v4 = *(os_unfair_lock_s **)(*(void *)(v3 + 1456) + 808);
    os_unfair_lock_lock(v4 + 1775);
    uint64_t os_unfair_lock_opaque = v4[1774]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 7)
    {
      os_unfair_lock_unlock(v4 + 1775);
      free(v2);
    }
    else
    {
      v4[1774]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v4[2 * os_unfair_lock_opaque + 1776]._uint64_t os_unfair_lock_opaque = v2;
      os_unfair_lock_unlock(v4 + 1775);
    }
  }
}

uint64_t std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F853918;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F853918;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

char *std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1}>,AGX::HAL200::HWGeometryPipelineContext * ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(*(void *)(v1 + 1456) + 808);
  if (*(void *)(v2 + 7088) >> 5 < 0x37DuLL)
  {
    uint64_t v5 = 0;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v2 + 7100));
    int v3 = *(_DWORD *)(v2 + 7096);
    if (v3)
    {
      unsigned int v4 = v3 - 1;
      *(_DWORD *)(v2 + 7096) = v4;
      uint64_t v5 = *(char **)(v2 + 8 * v4 + 7104);
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 7100));
      if (v5)
      {
        bzero(v5, *(void *)(v2 + 7088));
        goto LABEL_7;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 7100));
    }
    uint64_t v5 = (char *)malloc_type_calloc(*(void *)(v2 + 7088), 1uLL, 0xC8454162uLL);
  }
LABEL_7:
  *(void *)uint64_t v5 = &unk_26F8534F8;
  *((void *)v5 + 1) = v1;
  *((void *)v5 + 2) = v1 + 1752;
  *((void *)v5 + 3) = v1 + 16;
  v5[64] = 0;
  *((void *)v5 + 11) = -1;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = 0;
  *((_DWORD *)v5 + 14) = 0;
  *((void *)v5 + 9) = 0;
  *((void *)v5 + 10) = 0;
  bzero(v5 + 96, 0x245CuLL);
  *((_DWORD *)v5 + 2351) = 1;
  *(_OWORD *)(v5 + 13000) = 0u;
  *(_OWORD *)(v5 + 13016) = 0u;
  *(_OWORD *)(v5 + 13032) = 0u;
  *(_OWORD *)(v5 + 13048) = 0u;
  *(_OWORD *)(v5 + 13064) = 0u;
  *(_OWORD *)(v5 + 13080) = 0u;
  *(_OWORD *)(v5 + 13096) = 0u;
  *(_OWORD *)(v5 + 13112) = 0u;
  *(_OWORD *)(v5 + 13128) = 0u;
  *(_OWORD *)(v5 + 13144) = 0u;
  *(_OWORD *)(v5 + 13160) = 0u;
  *(_OWORD *)(v5 + 13176) = 0u;
  *(_OWORD *)(v5 + 13192) = 0u;
  *(_OWORD *)(v5 + 13208) = 0u;
  *(_OWORD *)(v5 + 13224) = 0u;
  *(_OWORD *)(v5 + 13240) = 0u;
  *(_OWORD *)(v5 + 13256) = 0u;
  *((void *)v5 + 1659) = 0;
  *(_OWORD *)(v5 + 14444) = 0u;
  *((_OWORD *)v5 + 902) = 0u;
  *((_OWORD *)v5 + 901) = 0u;
  *((_OWORD *)v5 + 900) = 0u;
  *((_OWORD *)v5 + 899) = 0u;
  *((_OWORD *)v5 + 898) = 0u;
  *((_OWORD *)v5 + 897) = 0u;
  *((_OWORD *)v5 + 896) = 0u;
  *((_OWORD *)v5 + 895) = 0u;
  *((void *)v5 + 1808) = 0;
  *((void *)v5 + 1809) = -1;
  bzero(v5 + 14480, 0x20C0uLL);
  *((_DWORD *)v5 + 5717) = 1;
  bzero(v5 + 22872, 0x310uLL);
  *((void *)v5 + 3440) = 0;
  *((_OWORD *)v5 + 1719) = 0u;
  *((_OWORD *)v5 + 1718) = 0u;
  *((_OWORD *)v5 + 1717) = 0u;
  *((_OWORD *)v5 + 1716) = 0u;
  *((_OWORD *)v5 + 1715) = 0u;
  *((_OWORD *)v5 + 1714) = 0u;
  *((_OWORD *)v5 + 1713) = 0u;
  *((_OWORD *)v5 + 1712) = 0u;
  *((_OWORD *)v5 + 1711) = 0u;
  *((_OWORD *)v5 + 1710) = 0u;
  *((_OWORD *)v5 + 1709) = 0u;
  *((_OWORD *)v5 + 1708) = 0u;
  *((_OWORD *)v5 + 1707) = 0u;
  *((_OWORD *)v5 + 1706) = 0u;
  *((_OWORD *)v5 + 1705) = 0u;
  *((_OWORD *)v5 + 1704) = 0u;
  *((_OWORD *)v5 + 1703) = 0u;
  uint64_t v6 = *(void *)(*(void *)(v1 + 1456) + 808);
  if (*(void *)(v6 + 6784) >> 4 < 0x27DuLL)
  {
    uint64_t v9 = 0;
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v6 + 6796));
    int v7 = *(_DWORD *)(v6 + 6792);
    if (v7)
    {
      unsigned int v8 = v7 - 1;
      *(_DWORD *)(v6 + 6792) = v8;
      uint64_t v9 = *(void **)(v6 + 8 * v8 + 6800);
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 6796));
      if (v9)
      {
        bzero(v9, *(void *)(v6 + 6784));
        goto LABEL_13;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 6796));
    }
    uint64_t v9 = malloc_type_calloc(*(void *)(v6 + 6784), 1uLL, 0xC8454162uLL);
  }
LABEL_13:
  bzero(v9, 0x27D0uLL);
  *((void *)v5 + 10) = v9;
  v9[65] = v9;
  *(void *)(*((void *)v5 + 10) + 528) = v5 + 88;
  if (*(void *)(v6 + 6784) >> 4 < 0x27DuLL)
  {
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 6796));
  int v10 = *(_DWORD *)(v6 + 6792);
  if (!v10)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 6796));
    goto LABEL_18;
  }
  unsigned int v11 = v10 - 1;
  *(_DWORD *)(v6 + 6792) = v11;
  uint64_t v12 = *(void **)(v6 + 8 * v11 + 6800);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 6796));
  if (!v12)
  {
LABEL_18:
    uint64_t v12 = malloc_type_calloc(*(void *)(v6 + 6784), 1uLL, 0xC8454162uLL);
    goto LABEL_19;
  }
  bzero(v12, *(void *)(v6 + 6784));
LABEL_19:
  bzero(v12, 0x27D0uLL);
  *((void *)v5 + 1808) = v12;
  v12[65] = v12;
  *(void *)(*((void *)v5 + 1808) + 528) = v5 + 14472;
  uint64_t v13 = *(void *)(*(void *)(*((void *)v5 + 1) + 1456) + 808);
  long long v46 = *(_OWORD *)(v13 + 7312);
  long long v48 = *(_OWORD *)(v13 + 7328);
  for (uint64_t i = 1592; i != 5688; i += 32)
  {
    unint64_t v15 = (_OWORD *)(*((void *)v5 + 10) + i);
    *unint64_t v15 = v46;
    v15[1] = v48;
    unint64_t v16 = (_OWORD *)(*((void *)v5 + 1808) + i);
    *unint64_t v16 = v46;
    v16[1] = v48;
  }
  uint64_t v17 = *(void *)(*(void *)(*((void *)v5 + 1) + 1456) + 808);
  long long v47 = *(_OWORD *)(v17 + 7344);
  long long v49 = *(_OWORD *)(v17 + 7360);
  uint64_t v18 = -4096;
  do
  {
    unint64_t v19 = (_OWORD *)(*((void *)v5 + 10) + v18 + 9784);
    *unint64_t v19 = v47;
    v19[1] = v49;
    unint64_t v20 = (_OWORD *)(*((void *)v5 + 1808) + v18 + 9784);
    *unint64_t v20 = v47;
    v20[1] = v49;
    v18 += 32;
  }
  while (v18);
  uint64_t v21 = *((void *)v5 + 1);
  *((_DWORD *)v5 + 5718) = *(_DWORD *)(*(void *)(v21 + 1968) + 5248) > 1u;
  uint64_t v22 = *(unsigned int *)(v21 + 38656);
  int v23 = 8 * v22;
  uint64_t v24 = 8 * v22 + 15;
  unint64_t v25 = *(void *)(v21 + 160) + (v24 | 0xF);
  if (v25 <= *(void *)(v21 + 152))
  {
LABEL_24:
    *(void *)(v21 + 168) = v25;
    goto LABEL_25;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v21 + 16, 3, 0))
  {
    unint64_t v25 = *(void *)(v21 + 160) + (v24 | 0xF);
    if (v25 > *(void *)(v21 + 152)) {
      abort();
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t v26 = (const void *)(v21 + 90680);
  uint64_t v27 = v24 & 0xFFFFFFFF0;
  uint64_t v28 = *((void *)v5 + 1);
  uint64_t v29 = (char *)((*(void *)(v28 + 160) + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = (unint64_t)&v29[*(void *)(v28 + 176)];
  *(void *)(v28 + 160) = &v29[v27];
  memcpy(v29, v26, 8 * v22);
  unsigned int v31 = (void *)*((void *)v5 + 1);
  uint64_t v32 = *(void *)(v31[5] + 224) + (int)*MEMORY[0x263F4B188];
  int v33 = v31 + 11285;
  v31[11285] |= 0x400000000000000uLL;
  v31[11309] |= 0x4000000uLL;
  unsigned int v34 = (void *)*((void *)v5 + 1808);
  v34[125] = v30;
  v34[190] = v27;
  *((void *)v5 + 3015) = v32;
  *((_DWORD *)v5 + 5777) = v23;
  *((_DWORD *)v5 + 5842) = v23;
  *((_DWORD *)v5 + 5907) = v30 >> 8;
  *((_DWORD *)v5 + 2351) = v22;
  *((_DWORD *)v5 + 5717) = v22;
  uint64_t v35 = *((void *)v5 + 5);
  if (v35)
  {
    int v36 = (_DWORD *)v31 + 9313;
    unint64_t v37 = *(void *)(v35 + 3344);
    int v38 = *(_DWORD *)(v35 + 3352);
    unint64_t v39 = HIDWORD(v37);
    LODWORD(v37) = *v36 & 0xF0E3FF00 | v37 & 0xF1C00FF;
    v36[2] = v36[2] & 0xFFFFFFF8 | (v36[351] - 1) & 7;
    v36[3] = v39;
    *int v36 = v37;
    v36[1] = v38;
    v33[24] |= 4uLL;
    unsigned int v31 = (void *)*((void *)v5 + 1);
    unsigned int v34 = (void *)*((void *)v5 + 1808);
  }
  int v40 = v31 + 9836;
  uint64_t v41 = v31[5004];
  uint64_t v42 = *v40;
  long long v43 = (void *)*((void *)v5 + 10);
  v43[130] = v41;
  *((void *)v5 + 1239) = v42;
  v34[130] = v41;
  *((void *)v5 + 3020) = v42;
  uint64_t v44 = v40[1554];
  v34[123] = v44;
  v43[123] = v44;
  *(void *)uint64_t v5 = &unk_26F8532E8;
  v43[114] = 0;
  v34[114] = 0;
  v43[115] = 0;
  v34[115] = 0;
  v43[118] = 0;
  v34[118] = 0;
  v43[119] = 0;
  v34[119] = 0;
  return v5;
}

void sub_242B69734(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_26F853708;
  _Unwind_Resume(a1);
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitICBRenderState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 384) |= 0x30uLL;
  *(unsigned char *)(a1 + 64) = 0;
  AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitMeshRenderState(a1, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(*(void *)(a1 + 8) + 38968), *(uint64x2_t **)(a1 + 80), *(uint64x2_t **)(a1 + 14464), (uint64x2_t *)(*(void *)(a1 + 8) + 49184), a8, 0, 0, 0, 0, 0, 0, a2, 1u);
  *(unsigned char *)(a1 + 64) = 0;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshArguments(uint64_t a1)
{
  return *(void *)(a1 + 14464);
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectArguments(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshDriverArguments(uint64_t a1)
{
  return a1 + 14472;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectDriverArguments(uint64_t a1)
{
  return a1 + 88;
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::buildEmulationCommand()
{
  return 0;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::anyDrawMeshCalls()
{
  return 0;
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::createRenderPipeline(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getEmulationPayloadSize()
{
  return 0;
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::needsEmulationCommand()
{
  return 0;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramVisibleFunctionTable(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVisibleFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(a1, a2, a3, (void *)(a1 + 14464));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramIntersectionFunctionTable(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setIntersectionFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(a1, a2, a3, (void *)(a1 + 14464));
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramAccelerationStructure(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramAccelerationStructure(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>,AGXG17FamilyRayTracingAccelerationStructure>(a1, a2, a3, (void *)(a1 + 14464));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramSamplers(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v8 = a4;
    while (1)
    {
      uint64_t v10 = *a2;
      uint64_t result = *(void *)(v7 + 1480);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
      uint64_t v11 = v10 ? *(void *)(v10 + 120) : 0;
      uint64_t v12 = 8 * a3;
      *(void *)(*(void *)(v6 + 14464) + v12 + 9784) = v11;
      uint64_t v13 = *(void *)(v6 + 14464);
      if ((~*(void *)(v13 + v12 + 9784) & 0x6000000000000000) == 0) {
        break;
      }
      if (v10) {
        goto LABEL_4;
      }
      uint64_t v9 = 0;
LABEL_6:
      *(void *)(v6 + 8 * a3 + 22736) = v9;
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v7 + 90088 + 8 * (a3 > 0x3F) + 224) |= 1 << a3;
      *(void *)(v7 + 90472) |= 0x4000000uLL;
      ++a3;
      ++a2;
      if (!--v8) {
        return result;
      }
    }
    *(_OWORD *)(v13 + 16 * a3 + 9912) = *(_OWORD *)(v10 + 128);
LABEL_4:
    uint64_t v9 = v10 + 48;
    if (*(_DWORD *)(v10 + 144)) {
      uint64_t v9 = *(unsigned int *)(v10 + 144);
    }
    goto LABEL_6;
  }
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramSampler(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 1480);
  if (result) {
    uint64_t result = MTLResourceListAddResource();
  }
  if (a2) {
    uint64_t v7 = *(void *)(a2 + 120);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 8 * a3;
  *(void *)(*(void *)(a1 + 14464) + v8 + 9784) = v7;
  uint64_t v9 = *(void *)(a1 + 14464);
  if ((~*(void *)(v9 + v8 + 9784) & 0x6000000000000000) != 0)
  {
    uint64_t v10 = a1 + 14472;
    if (!a2)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    *(_OWORD *)(v9 + 16 * a3 + 9912) = *(_OWORD *)(a2 + 128);
    uint64_t v10 = a1 + 14472;
  }
  uint64_t v11 = a2 + 48;
  if (*(_DWORD *)(a2 + 144)) {
    uint64_t v11 = *(unsigned int *)(a2 + 144);
  }
LABEL_13:
  *(void *)(v10 + 8 * a3 + 8264) = v11;
  uint64_t v12 = *(void *)(a1 + 8) + 90088;
  *(void *)(v12 + 8 * (a3 > 0x3F) + 224) |= 1 << a3;
  *(void *)(v12 + 384) |= 0x4000000uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramTextures(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v7 = (void *)(a1 + 14464);
    uint64_t v8 = a4;
    do
    {
      uint64_t v9 = *a2++;
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTexture<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(a1, v9, a3++, v7);
      --v8;
    }
    while (v8);
  }
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramTexture(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBuffers(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (a5)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)(result + 14464);
    uint64_t v10 = a5;
    do
    {
      uint64_t v12 = *a2++;
      uint64_t v11 = v12;
      uint64_t v13 = *a3++;
      uint64_t result = AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(v8, v11, v13, a4++, v9);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBuffer(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<true>>(a1, a2, a3, a4, (void *)(a1 + 14464));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBufferView(uint64_t result, void *a2, int a3, unsigned int a4, uint64_t a5)
{
  if (a4 <= 0x22) {
    *(void *)(result + 8 * a4 + 27248) = 0;
  }
  uint64_t v5 = *(void *)(result + 8) + 90088;
  *(void *)(v5 + 8 * (a4 > 0x3F) + 192) |= 1 << a4;
  *(void *)(v5 + 384) |= 0x4000000uLL;
  uint64_t v6 = *(void *)(result + 14464) + 8 * a4;
  *(void *)(v6 + 536) = *a2;
  *(void *)(v6 + 1056) = a2[2];
  *(void *)(result + 14464 + 8 * a4 + 9192) = a5;
  uint64_t v7 = (_DWORD *)(result + 4 * a4 + 14472);
  v7[2101] = a3;
  v7[2166] = a3;
  v7[2231] = *a2 >> 8;
  return result;
}

void *AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setMeshProgramBufferBytes(uint64_t a1, void *__src, size_t __n, unsigned int a4)
{
  size_t v8 = __n + 15;
  uint64_t v9 = *(void **)(a1 + 8);
  size_t v10 = (__n + 15) | 0xF;
  size_t v11 = v9[20] + v10;
  if (v11 <= v9[19])
  {
LABEL_2:
    v9[21] = v11;
    goto LABEL_3;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v9 + 2, 3, 0))
  {
    size_t v11 = v9[20] + v10;
    if (v11 > v9[19]) {
      abort();
    }
    goto LABEL_2;
  }
LABEL_3:
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v14 = (char *)((*(void *)(v13 + 160) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v13 + 176);
  *(void *)(v13 + 160) = &v14[v12];
  uint64_t result = memcpy(v14, __src, __n);
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(*(void *)(v17 + 40) + 224);
  uint64_t v19 = (int)*MEMORY[0x263F4B188];
  if (a4 <= 0x22) {
    *(void *)(a1 + 8 * a4 + 27248) = 0;
  }
  uint64_t v20 = v17 + 90088;
  *(void *)(v20 + 8 * (a4 > 0x3F) + 192) |= 1 << a4;
  *(void *)(v20 + 384) |= 0x4000000uLL;
  uint64_t v21 = *(void *)(a1 + 14464) + 8 * a4;
  *(void *)(v21 + 536) = &v14[v15];
  *(void *)(v21 + 1056) = v12;
  *(void *)(a1 + 14464 + 8 * a4 + 9192) = v18 + v19;
  uint64_t v22 = (_DWORD *)(a1 + 4 * a4 + 14472);
  v22[2101] = __n;
  v22[2166] = __n;
  v22[2231] = (unint64_t)&v14[v15] >> 8;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramVisibleFunctionTable(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVisibleFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(a1, a2, a3, (void *)(a1 + 80));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramIntersectionFunctionTable(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setIntersectionFunctionTable<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(a1, a2, a3, (void *)(a1 + 80));
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramAccelerationStructure(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramAccelerationStructure(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  return AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAccelerationStructure<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>,AGXG17FamilyRayTracingAccelerationStructure>(a1, a2, a3, (void *)(a1 + 80));
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectThreadgroupMemoryLength(uint64_t result, int a2, unsigned int a3)
{
  *(_DWORD *)(result + 4 * a3 + 14320) = a2;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramSamplers(uint64_t result, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(result + 8);
    uint64_t v8 = a4;
    while (1)
    {
      uint64_t v10 = *a2;
      uint64_t result = *(void *)(v7 + 1480);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
      uint64_t v11 = v10 ? *(void *)(v10 + 120) : 0;
      uint64_t v12 = 8 * a3;
      *(void *)(*(void *)(v6 + 80) + v12 + 9784) = v11;
      uint64_t v13 = *(void *)(v6 + 80);
      if ((~*(void *)(v13 + v12 + 9784) & 0x6000000000000000) == 0) {
        break;
      }
      if (v10) {
        goto LABEL_4;
      }
      uint64_t v9 = 0;
LABEL_6:
      *(void *)(v6 + 8 * a3 + 8336) = v9;
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v7 + 90088 + 8 * (a3 > 0x3F) + 128) |= 1 << a3;
      *(void *)(v7 + 90472) |= 0x10000uLL;
      ++a3;
      ++a2;
      if (!--v8) {
        return result;
      }
    }
    *(_OWORD *)(v13 + 16 * a3 + 9912) = *(_OWORD *)(v10 + 128);
LABEL_4:
    uint64_t v9 = v10 + 48;
    if (*(_DWORD *)(v10 + 144)) {
      uint64_t v9 = *(unsigned int *)(v10 + 144);
    }
    goto LABEL_6;
  }
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramSampler(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 1480);
  if (result) {
    uint64_t result = MTLResourceListAddResource();
  }
  if (a2) {
    uint64_t v7 = *(void *)(a2 + 120);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 8 * a3;
  *(void *)(*(void *)(a1 + 80) + v8 + 9784) = v7;
  uint64_t v9 = *(void *)(a1 + 80);
  if ((~*(void *)(v9 + v8 + 9784) & 0x6000000000000000) != 0)
  {
    uint64_t v10 = a1 + 88;
    if (!a2)
    {
      uint64_t v11 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    *(_OWORD *)(v9 + 16 * a3 + 9912) = *(_OWORD *)(a2 + 128);
    uint64_t v10 = a1 + 88;
  }
  uint64_t v11 = a2 + 48;
  if (*(_DWORD *)(a2 + 144)) {
    uint64_t v11 = *(unsigned int *)(a2 + 144);
  }
LABEL_13:
  *(void *)(v10 + 8 * a3 + 8248) = v11;
  uint64_t v12 = *(void *)(a1 + 8) + 90088;
  *(void *)(v12 + 8 * (a3 > 0x3F) + 128) |= 1 << a3;
  *(void *)(v12 + 384) |= 0x10000uLL;
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramTextures(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4)
{
  if (a4)
  {
    uint64_t v7 = (void *)(a1 + 80);
    uint64_t v8 = a4;
    do
    {
      uint64_t v9 = *a2++;
      AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTexture<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(a1, v9, a3++, v7);
      --v8;
    }
    while (v8);
  }
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramTexture(uint64_t a1, uint64_t a2, unsigned int a3)
{
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBuffers(uint64_t result, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if (a5)
  {
    uint64_t v8 = result;
    uint64_t v9 = (void *)(result + 80);
    uint64_t v10 = a5;
    do
    {
      uint64_t v12 = *a2++;
      uint64_t v11 = v12;
      uint64_t v13 = *a3++;
      uint64_t result = AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setBuffer<AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::StageBindInfo<false>>(v8, v11, v13, a4++, v9);
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBufferView(uint64_t result, void *a2, int a3, unsigned int a4, uint64_t a5)
{
  if (a4 <= 0x22) {
    *(void *)(result + 8 * a4 + 13000) = 0;
  }
  uint64_t v5 = *(void *)(result + 8) + 90088;
  *(void *)(v5 + 8 * (a4 > 0x3F) + 96) |= 1 << a4;
  *(void *)(v5 + 384) |= 0x10000uLL;
  uint64_t v6 = *(void *)(result + 80) + 8 * a4;
  *(void *)(v6 + 536) = *a2;
  *(void *)(v6 + 1056) = a2[2];
  *(void *)(result + 80 + 8 * a4 + 9328) = a5;
  uint64_t v7 = (_DWORD *)(result + 4 * a4);
  v7[2120] = a3;
  v7[2185] = a3;
  v7[2250] = *a2 >> 8;
  return result;
}

void *AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setObjectProgramBufferBytes(uint64_t a1, void *__src, size_t __n, unsigned int a4)
{
  size_t v8 = __n + 15;
  uint64_t v9 = *(void **)(a1 + 8);
  size_t v10 = (__n + 15) | 0xF;
  size_t v11 = v9[20] + v10;
  if (v11 <= v9[19])
  {
LABEL_2:
    v9[21] = v11;
    goto LABEL_3;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v9 + 2, 3, 0))
  {
    size_t v11 = v9[20] + v10;
    if (v11 > v9[19]) {
      abort();
    }
    goto LABEL_2;
  }
LABEL_3:
  unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v14 = (char *)((*(void *)(v13 + 160) + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v13 + 176);
  *(void *)(v13 + 160) = &v14[v12];
  uint64_t result = memcpy(v14, __src, __n);
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(*(void *)(v17 + 40) + 224);
  uint64_t v19 = (int)*MEMORY[0x263F4B188];
  if (a4 <= 0x22) {
    *(void *)(a1 + 8 * a4 + 13000) = 0;
  }
  uint64_t v20 = v17 + 90088;
  *(void *)(v20 + 8 * (a4 > 0x3F) + 96) |= 1 << a4;
  *(void *)(v20 + 384) |= 0x10000uLL;
  uint64_t v21 = *(void *)(a1 + 80) + 8 * a4;
  *(void *)(v21 + 536) = &v14[v15];
  *(void *)(v21 + 1056) = v12;
  *(void *)(a1 + 80 + 8 * a4 + 9328) = v18 + v19;
  uint64_t v22 = (_DWORD *)(a1 + 4 * a4);
  v22[2120] = __n;
  v22[2185] = __n;
  v22[2250] = (unint64_t)&v14[v15] >> 8;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setPerEncoderIndirectionTable(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 14464) + 984) = a2;
  *(void *)(*(void *)(result + 80) + 984) = a2;
  return result;
}

void *AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindScsParameters(void *result, uint64_t a2, uint64_t a3)
{
  *(void *)(result[10] + 1040) = a2;
  result[1239] = a3;
  *(void *)(result[1808] + 1040) = a2;
  result[3020] = a3;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::exportsPointSize(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1) {
    return (*(unsigned __int8 *)(v1 + 3346) >> 2) & 1;
  }
  else {
    return 0;
  }
}

void *AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAmplificationCount(uint64_t a1, unsigned int a2, const void *a3)
{
  uint64_t v5 = *(void **)(a1 + 8);
  if (a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = v5 + 11327;
  }
  uint64_t v7 = 8 * a2;
  uint64_t v8 = (v7 + 15) | 0xF;
  unint64_t v9 = v5[20] + v8;
  if (v9 <= v5[19])
  {
LABEL_5:
    v5[21] = v9;
    goto LABEL_6;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v5 + 2, 3, 0))
  {
    unint64_t v9 = v5[20] + v8;
    if (v9 > v5[19]) {
      abort();
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v10 = (v7 + 15) & 0xFFFFFFFF0;
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = (char *)((*(void *)(v11 + 160) + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (unint64_t)&v12[*(void *)(v11 + 176)];
  *(void *)(v11 + 160) = &v12[v10];
  uint64_t result = memcpy(v12, v6, 8 * a2);
  uint64_t v15 = *(void **)(a1 + 8);
  uint64_t v16 = *(void *)(v15[5] + 224) + (int)*MEMORY[0x263F4B188];
  uint64_t v17 = v15 + 11285;
  v15[11285] |= 0x400000000000000uLL;
  v15[11309] |= 0x4000000uLL;
  uint64_t v18 = *(void *)(a1 + 14464);
  *(void *)(v18 + 1000) = v13;
  *(void *)(v18 + 1520) = v10;
  *(void *)(a1 + 24120) = v16;
  *(_DWORD *)(a1 + 23108) = v7;
  *(_DWORD *)(a1 + 23368) = v7;
  *(_DWORD *)(a1 + 23628) = v13 >> 8;
  *(_DWORD *)(a1 + 9404) = a2;
  *(_DWORD *)(a1 + 22868) = a2;
  uint64_t v19 = *(void *)(a1 + 40);
  if (v19)
  {
    uint64_t v20 = (_DWORD *)v15 + 9313;
    unint64_t v21 = *(void *)(v19 + 3344);
    int v22 = *(_DWORD *)(v19 + 3352);
    unint64_t v23 = HIDWORD(v21);
    LODWORD(v21) = *v20 & 0xF0E3FF00 | v21 & 0xF1C00FF;
    v20[2] = v20[2] & 0xFFFFFFF8 | (v20[351] - 1) & 7;
    _OWORD v20[3] = v23;
    *uint64_t v20 = v21;
    v20[1] = v22;
    v17[24] |= 4uLL;
  }
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginRenderPass(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (a2)
  {
    v2[114] = 0;
    int v3 = *(void **)(a1 + 14464);
    v3[114] = 0;
    v2[115] = 0;
    v3[115] = 0;
    v2[118] = 0;
    v3[118] = 0;
  }
  else
  {
    int v3 = *(void **)(a1 + 14464);
  }
  v2[119] = 0;
  v3[119] = 0;
  return 0;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dirtyDrawBits(uint64_t result, unint64_t *a2)
{
  uint64_t v2 = *(void *)(result + 32);
  if (v2) {
    unint64_t v3 = *a2 | *(void *)(v2 + 2264);
  }
  else {
    unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFEFLL;
  }
  *a2 = v3;
  uint64_t v4 = *(void *)(result + 40);
  if (v4) {
    unint64_t v5 = *(void *)(v4 + 2264) | v3;
  }
  else {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFDFLL;
  }
  *a2 = v5;
  return result;
}

uint64_t AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setRenderPipelineState(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v8 = *(void *)(result + 32);
    unint64_t v9 = (int **)MEMORY[0x263F4B1E8];
    uint64_t v10 = (int *)*MEMORY[0x263F4B1E8];
    int v11 = *(_DWORD *)*MEMORY[0x263F4B1E8];
    if (v8 != v7)
    {
      *(void *)(result + 32) = v7;
      if (v7)
      {
        uint64_t v12 = *(void *)(result + 8);
        unint64_t v13 = (uint64_t *)(v12 + 90472);
        uint64_t v14 = *(void *)(v12 + 38952);
        *(unsigned char *)(v14 + 466) |= *(unsigned char *)(v7 + 1050);
        *(unsigned char *)(v14 + 472) |= *(_DWORD *)(a2 + 836) != 0;
        unint64_t v15 = *(void *)(v12 + 90472) & 0xFFFFFFFFFC06FFFFLL | *(void *)(v7 + 2264);
        uint64_t v16 = v15 | 0x14;
        *(void *)(v12 + 90472) = v15 | 0x14;
        int8x16_t v17 = *(int8x16_t *)(v7 + 1056);
        int8x16_t v19 = *(int8x16_t *)(v7 + 1944);
        int8x16_t v18 = *(int8x16_t *)(v7 + 1960);
        int8x16_t v20 = *(int8x16_t *)(v7 + 1072);
        if (v8)
        {
          int8x16_t v19 = vbicq_s8(v19, *(int8x16_t *)(v8 + 1944));
          int8x16_t v17 = vbicq_s8(v17, *(int8x16_t *)(v8 + 1056));
          int8x16_t v18 = vbicq_s8(v18, *(int8x16_t *)(v8 + 1960));
          int8x16_t v20 = vbicq_s8(v20, *(int8x16_t *)(v8 + 1072));
        }
        int8x16_t v21 = vorrq_s8(v19, v17);
        *(int8x16_t *)(v12 + 90232) = vorrq_s8(vandq_s8(*(int8x16_t *)(v12 + 90232), (int8x16_t)xmmword_242EA8770), v21);
        int8x16_t v22 = vorrq_s8(v18, v20);
        *(int8x16_t *)(v12 + 90248) = vorrq_s8(*(int8x16_t *)(v12 + 90248), v22);
        int64x2_t v23 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v21, (int64x2_t)v22), (int8x16_t)vzip2q_s64((int64x2_t)v21, (int64x2_t)v22));
        int32x2_t v24 = vmovn_s64(vtstq_s64(v23, v23));
        uint64_t result = (v24.i32[0] | v24.i32[1]);
        if ((v24.i8[0] | v24.i8[4]))
        {
          uint64_t result = 131092;
          uint64_t v25 = v15 | 0x20014;
          if ((v24.i8[0] & 1) == 0) {
            uint64_t v25 = v16;
          }
          if (v24.i8[4]) {
            v25 |= 0x40000uLL;
          }
          *unint64_t v13 = v25;
        }
        *a3 |= *(_DWORD *)(a2 + 652);
        if (*(unsigned char *)(a2 + 710))
        {
          uint64_t v26 = *(void *)(a2 + 1824);
          if (v26)
          {
            uint64_t v27 = *(void *)(v26 + 48);
            *(void *)(*(void *)(v3 + 80) + 1008) = *(void *)(v26 + 56);
            *(void *)(v3 + 9880) = v27;
            uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
            *(void *)(v12 + 90184) |= v28 << 59;
            *(void *)(v12 + 90232) |= 0x800000000000000uLL;
            uint64_t v29 = 196608;
            if (!(_BYTE)v28) {
              uint64_t v29 = 0x10000;
            }
            *v13 |= v29;
          }
        }
        if (v11)
        {
          if ((*(_OWORD *)(v7 + 1944) & ~(*(_OWORD *)(v7 + 1640) | *(_OWORD *)(v7 + 1944) & ~*(_OWORD *)(v7 + 1976))) != 0
            && *v10)
          {
            uint64_t result = IOGPUDeviceTraceEvent();
            uint64_t v10 = *v9;
          }
          if (*(_DWORD *)(a2 + 1908) + *(_DWORD *)(a2 + 1876) && *v10)
          {
            uint64_t result = IOGPUDeviceTraceEvent();
            uint64_t v10 = *v9;
          }
        }
      }
    }
    uint64_t v30 = *(void *)(v3 + 40);
    int v31 = *v10;
    if (v30 != v4)
    {
      uint64_t v32 = (int8x16_t *)(v4 + 1944);
      uint64_t result = *(void *)(v3 + 8);
      if ((*(unsigned char *)(result + 90480) & 4) != 0 && *(_DWORD *)(*(void *)(result + 38976) + 664) >= 2u)
      {
        int v57 = v31;
        AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setVertexAmplificationCount(result, 1u, (void *)(result + 90616));
        uint64_t v32 = (int8x16_t *)(v4 + 1944);
        int v31 = v57;
        uint64_t result = *(void *)(v3 + 8);
        *(_DWORD *)(result + 90480) &= ~4u;
        uint64_t v30 = *(void *)(v3 + 40);
      }
      *(void *)(v3 + 40) = v4;
      *(unsigned char *)(*(void *)(result + 38952) + 466) |= *(unsigned char *)(v4 + 1050);
      unint64_t v33 = *(void *)(v4 + 3344);
      int v34 = *(_DWORD *)(v4 + 3352);
      unint64_t v35 = HIDWORD(v33);
      LODWORD(v33) = *(_DWORD *)(result + 37252) & 0xF0E3FF00 | v33 & 0xF1C00FF;
      *(_DWORD *)(result + 37260) = *(_DWORD *)(result + 37260) & 0xFFFFFFF8 | (*(_DWORD *)(result + 38656)
                                                                              - 1) & 7;
      *(_DWORD *)(result + 37264) = v35;
      uint64_t v36 = *(void *)(result + 90472);
      *(_DWORD *)(result + 37252) = v33;
      *(_DWORD *)(result + 37256) = v34;
      *(void *)(result + 90472) = v36 | 4;
      *(_DWORD *)(v3 + 22864) = 4 * *(_DWORD *)(v4 + 3504);
      uint64_t v37 = *(void *)(v3 + 8);
      unint64_t v38 = *(void *)(v37 + 90472) & 0xFFFFFFF01BFFFFFFLL | *(void *)(v4 + 2264);
      uint64_t v39 = v38 | 0x24;
      *(void *)(v37 + 90472) = v38 | 0x24;
      int8x16_t v40 = *(int8x16_t *)(v4 + 1056);
      int8x16_t v42 = *v32;
      int8x16_t v41 = v32[1];
      int8x16_t v43 = *(int8x16_t *)(v4 + 1072);
      if (v30)
      {
        int8x16_t v42 = vbicq_s8(v42, *(int8x16_t *)(v30 + 1944));
        int8x16_t v40 = vbicq_s8(v40, *(int8x16_t *)(v30 + 1056));
        int8x16_t v41 = vbicq_s8(v41, *(int8x16_t *)(v30 + 1960));
        int8x16_t v43 = vbicq_s8(v43, *(int8x16_t *)(v30 + 1072));
      }
      int8x16_t v44 = vorrq_s8(v42, v40);
      int8x16_t v45 = vorrq_s8(v41, v43);
      int8x16_t v46 = vorrq_s8(*(int8x16_t *)(v37 + 90344), v45);
      *(int8x16_t *)(v37 + 90328) = vorrq_s8(vandq_s8(*(int8x16_t *)(v37 + 90328), (int8x16_t)xmmword_242EA8770), v44);
      *(int8x16_t *)(v37 + 90344) = v46;
      int64x2_t v47 = (int64x2_t)vorrq_s8((int8x16_t)vzip1q_s64((int64x2_t)v44, (int64x2_t)v45), (int8x16_t)vzip2q_s64((int64x2_t)v44, (int64x2_t)v45));
      int32x2_t v48 = vmovn_s64(vtstq_s64(v47, v47));
      if ((v48.i32[0] | v48.i32[1]))
      {
        uint64_t v49 = v38 | 0x8000024;
        if (v48.i8[0]) {
          uint64_t v50 = v49;
        }
        else {
          uint64_t v50 = v39;
        }
        if (v48.i8[4]) {
          uint64_t v51 = v50 | 0x10000000;
        }
        else {
          uint64_t v51 = v50;
        }
        *(void *)(v37 + 90472) = v51;
      }
      *a3 |= *(_DWORD *)(a2 + 656);
      if (*(unsigned char *)(a2 + 710))
      {
        uint64_t v52 = *(void *)(a2 + 2112);
        if (v52)
        {
          uint64_t v53 = *(void *)(v52 + 48);
          *(void *)(*(void *)(v3 + 14464) + 1008) = *(void *)(v52 + 56);
          *(void *)(v3 + 24128) = v53;
          uint64_t v54 = *(unsigned __int8 *)(v52 + 80);
          *(void *)(v37 + 90280) |= v54 << 59;
          *(void *)(v37 + 90328) |= 0x800000000000000uLL;
          BOOL v55 = v54 == 0;
          uint64_t v56 = 201326592;
          if (v55) {
            uint64_t v56 = 0x4000000;
          }
          *(void *)(v37 + 90472) |= v56;
        }
      }
      if (v31)
      {
        if ((*(_OWORD *)(*(void *)(v3 + 40) + 1944) & ~(*(_OWORD *)(*(void *)(v3 + 40) + 1640) | *(_OWORD *)(*(void *)(v3 + 40) + 1944) & ~*(_OWORD *)(*(void *)(v3 + 40) + 1976))) != 0
          && **v9)
        {
          uint64_t result = IOGPUDeviceTraceEvent();
        }
        if (*(_DWORD *)(a2 + 2196) + *(_DWORD *)(a2 + 2164) && **v9)
        {
          return IOGPUDeviceTraceEvent();
        }
      }
    }
  }
  else
  {
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(*(void *)(result + 8) + 90472) &= 0xFFFFFFF01C07FFCFLL;
  }
  return result;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawMeshThreadgroups(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 38976);
  unint64_t v3 = *(void *)(v2 + 800);
  uint64_t v4 = *(unsigned int *)(v2 + 808);
  unint64_t v5 = *(void *)(v2 + 812);
  uint64_t v6 = *(unsigned int *)(v2 + 820);
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  v8[0] = v3;
  v8[1] = HIDWORD(v3);
  v8[2] = v4;
  v7[0] = v5;
  v7[1] = HIDWORD(v5);
  v7[2] = v6;
  AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawMeshThreadgroups(a1, (uint64_t)&v9, (uint64_t)v8, (unsigned int *)v7);
}

BOOL AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::hasObjectStage(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1 && *(unsigned char *)(v1 + 3410) == 0;
}

void AGX::HAL200::HWGeometryPipelineContext::~HWGeometryPipelineContext(AGX::HAL200::HWGeometryPipelineContext *this)
{
  *(void *)this = &unk_26F8534F8;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(*((void *)this + 1) + 1456) + 808);
  unint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t os_unfair_lock_opaque = v2[1698]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v3);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v2[2 * os_unfair_lock_opaque + 1700]._uint64_t os_unfair_lock_opaque = v3;
      os_unfair_lock_unlock(v2 + 1699);
    }
    *((void *)this + 10) = 0;
  }
  unint64_t v5 = (void *)*((void *)this + 1808);
  if (v5)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t v6 = v2[1698]._os_unfair_lock_opaque;
    if (v6 > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v5);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = v6 + 1;
      *(void *)&v2[2 * v6 + 1700]._uint64_t os_unfair_lock_opaque = v5;
      os_unfair_lock_unlock(v2 + 1699);
    }
    *((void *)this + 1808) = 0;
  }
  *(void *)this = &unk_26F853708;

  JUMPOUT(0x24566ED90);
}

{
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t os_unfair_lock_opaque;
  void *v5;
  uint64_t v6;

  *(void *)this = &unk_26F8534F8;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(*((void *)this + 1) + 1456) + 808);
  unint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t os_unfair_lock_opaque = v2[1698]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v3);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v2[2 * os_unfair_lock_opaque + 1700]._uint64_t os_unfair_lock_opaque = v3;
      os_unfair_lock_unlock(v2 + 1699);
    }
    *((void *)this + 10) = 0;
  }
  unint64_t v5 = (void *)*((void *)this + 1808);
  if (v5)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t v6 = v2[1698]._os_unfair_lock_opaque;
    if (v6 > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v5);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = v6 + 1;
      *(void *)&v2[2 * v6 + 1700]._uint64_t os_unfair_lock_opaque = v5;
      os_unfair_lock_unlock(v2 + 1699);
    }
    *((void *)this + 1808) = 0;
  }
  *(void *)this = &unk_26F853708;
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpill()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpill(AGX::HAL200::ObjectProgramVariant const*,AGX::HAL200::MeshProgramVariant const*)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitICBRenderState()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitICBRenderState(AGX::RenderDirtyBits<AGX::HAL200::Classes> &)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshArguments()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshArguments(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectArguments()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectArguments(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshDriverArguments()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getMeshDriverArguments(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectDriverArguments()
{
}

void AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getObjectDriverArguments(void)::{lambda(void)#1}::operator()[abi:[AGX] Crashed.]()
{
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::exportsPointSize()
{
  return 0;
}

uint64_t AGX::GeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::beginRenderPass()
{
  return 0;
}

void AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~HWGeometryPipelineContext(void *a1)
{
  *a1 = &unk_26F8534F8;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(a1[1] + 1456) + 808);
  unint64_t v3 = (void *)a1[10];
  if (v3)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t os_unfair_lock_opaque = v2[1698]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v3);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v2[2 * os_unfair_lock_opaque + 1700]._uint64_t os_unfair_lock_opaque = v3;
      os_unfair_lock_unlock(v2 + 1699);
    }
    a1[10] = 0;
  }
  unint64_t v5 = (void *)a1[1808];
  if (v5)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t v6 = v2[1698]._os_unfair_lock_opaque;
    if (v6 > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v5);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = v6 + 1;
      *(void *)&v2[2 * v6 + 1700]._uint64_t os_unfair_lock_opaque = v5;
      os_unfair_lock_unlock(v2 + 1699);
    }
    a1[1808] = 0;
  }
  *a1 = &unk_26F853708;

  JUMPOUT(0x24566ED90);
}

void *AGX::HWGeometryPipelineContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::~HWGeometryPipelineContext(void *a1)
{
  *a1 = &unk_26F8534F8;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(a1[1] + 1456) + 808);
  unint64_t v3 = (void *)a1[10];
  if (v3)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t os_unfair_lock_opaque = v2[1698]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v3);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;
      *(void *)&v2[2 * os_unfair_lock_opaque + 1700]._uint64_t os_unfair_lock_opaque = v3;
      os_unfair_lock_unlock(v2 + 1699);
    }
    a1[10] = 0;
  }
  unint64_t v5 = (void *)a1[1808];
  if (v5)
  {
    os_unfair_lock_lock(v2 + 1699);
    uint64_t v6 = v2[1698]._os_unfair_lock_opaque;
    if (v6 > 0xF)
    {
      os_unfair_lock_unlock(v2 + 1699);
      free(v5);
    }
    else
    {
      v2[1698]._uint64_t os_unfair_lock_opaque = v6 + 1;
      *(void *)&v2[2 * v6 + 1700]._uint64_t os_unfair_lock_opaque = v5;
      os_unfair_lock_unlock(v2 + 1699);
    }
    a1[1808] = 0;
  }
  *a1 = &unk_26F853708;
  return a1;
}

uint64_t std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1}>,AGX::HAL200::HWGeometryPipelineContext * ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F8532A0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1}>,AGX::HAL200::HWGeometryPipelineContext * ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26F8532A0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1},std::allocator<AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::{lambda(void)#1}>,AGX::HAL200::HWGeometryPipelineContext * ()(void)>::~__func()
{
}

uint64_t AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindAllResources(void *a1)
{
  AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1[1] + 1592), a1[10], 1);
  uint64_t result = IOGPUResourceListAddResource();
  uint64_t v3 = a1[11];
  if (v3)
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1[1] + 1592), v3, 65);
    return IOGPUResourceListAddResource();
  }
  return result;
}

uint64_t AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setRenderPipelineState(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)(result + 104) != v2)
  {
    *(void *)(result + 104) = v2;
    *(_DWORD *)(result + 112) = 7;
  }
  int v3 = *(_DWORD *)(a2 + 688);
  if (*(_DWORD *)(result + 48) != v3)
  {
    int v4 = *(_DWORD *)(a2 + 684);
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a2 + 684);
  if (*(_DWORD *)(result + 52) != v4) {
    goto LABEL_11;
  }
  if (*(_DWORD *)(result + 64) != *(_DWORD *)(a2 + 704)
    || *(unsigned __int8 *)(result + 68) != *(unsigned __int8 *)(a2 + 708))
  {
    int v4 = *(_DWORD *)(result + 52);
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(result + 52);
  if (*(unsigned __int8 *)(result + 96) != *(unsigned __int8 *)(a2 + 680))
  {
LABEL_11:
    *(_DWORD *)(result + 48) = v3;
    *(_DWORD *)(result + 52) = v4;
    *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 704);
    *(unsigned char *)(result + 68) = *(unsigned char *)(a2 + 708);
    *(unsigned char *)(result + 96) = *(unsigned char *)(a2 + 680);
    *(_DWORD *)(result + 112) |= 1u;
  }
  int v5 = *(_DWORD *)(a2 + 696);
  if (*(_DWORD *)(result + 56) != v5)
  {
    int v6 = *(_DWORD *)(a2 + 700);
    goto LABEL_16;
  }
  int v6 = *(_DWORD *)(a2 + 700);
  if (*(_DWORD *)(result + 100) != v6)
  {
LABEL_16:
    *(_DWORD *)(result + 56) = v5;
    *(_DWORD *)(result + 100) = v6;
    *(_DWORD *)(result + 112) |= 4u;
  }
  return result;
}

uint64_t AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTessellationFactorScale(uint64_t result, float a2)
{
  if (*(float *)(result + 72) != a2)
  {
    *(float *)(result + 72) = a2;
    *(_DWORD *)(result + 112) |= 1u;
  }
  return result;
}

uint64_t AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTessellationFactorBuffer(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = result;
  uint64_t v7 = (int *)MEMORY[0x263F4B188];
  if (a2)
  {
    uint64_t v8 = a2 + (int)*MEMORY[0x263F4B188];
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v10 = *(void *)(v8 + 8) + a3;
    unint64_t v11 = (unint64_t)(v9 + 3) >> 2;
  }
  else
  {
    uint64_t v10 = 0;
    LODWORD(v11) = 0;
  }
  if (*(void *)(result + 32) != v10 || *(_DWORD *)(result + 44) != a4)
  {
    *(void *)(result + 32) = v10;
    *(_DWORD *)(result + 40) = v11;
    uint64_t v12 = *(void *)(result + 8);
    unint64_t v13 = (void *)(v12 + 78464);
    uint64_t v14 = (_DWORD *)(v12 + 68116);
    unint64_t v15 = (void *)(v12 + 39272);
    if (a2)
    {
      uint64_t v16 = (void *)(a2 + *v7);
      uint64_t v18 = v16[2];
      uint64_t v17 = v16[3];
      unint64_t v19 = v16[1];
      *(void *)(v12 + 86208) = v19;
      *(void *)(v12 + 88288) = v17;
      *(void *)(v12 + 39808) = v19 + a3;
      *(void *)(v12 + 40328) = (v18 & 0xFFFFFFFFFFFFFFLL) - a3;
      *unint64_t v15 = v17 + a3;
      *uint64_t v14 = v18;
      *(_DWORD *)(v12 + 68376) = v18;
      *(_DWORD *)(v12 + 68636) = v19 >> 8;
      *unint64_t v13 = v16;
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(v12 + 1592), a2, 0, 0x23u);
      uint64_t result = *(void *)(v12 + 1480);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
    }
    else
    {
      *unint64_t v13 = 0;
      *(void *)(v12 + 39808) = 0;
      *(void *)(v12 + 40328) = 0;
      *unint64_t v15 = 0;
      *(void *)(v12 + 86208) = 0;
      *(void *)(v12 + 88288) = 0;
      *uint64_t v14 = 0;
      *(_DWORD *)(v12 + 68376) = 0;
    }
    *(void *)(v12 + 90088) |= 0x800000000uLL;
    *(void *)(v12 + 90136) |= 0x800000000uLL;
    *(void *)(v12 + 90472) |= 0xC0uLL;
    *(_DWORD *)(v6 + 44) = a4;
    if (*(void *)(v6 + 80) != a2)
    {
      *(void *)(v6 + 80) = a2;
      uint64_t result = *(void *)(*(void *)(v6 + 8) + 1480);
      if (result) {
        uint64_t result = MTLResourceListAddResource();
      }
      *(_DWORD *)(v6 + 112) |= 2u;
    }
  }
  return result;
}

void AGX::HAL200::HWTessellationContext::~HWTessellationContext(AGX::HAL200::HWTessellationContext *this)
{
}

void sub_242B6BBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (!v20) {
    _Unwind_Resume(exception_object);
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(uint64_t result, void *a2, void *a3)
{
  if (*(_DWORD *)(result + 8))
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v9 = *(void *)v5;
      uint64_t v10 = *(unsigned int *)(*(void *)v5 + v6);
      if (v10 > 0x14) {
        unint64_t v11 = 0;
      }
      else {
        unint64_t v11 = off_26516F710[v10];
      }
      unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v5 + 16) + 7824), 1uLL);
      uint64_t v13 = v9 + v6;
      objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *(void *)(v9 + v6 + 8), *(void *)(v9 + v6 + 24), add, v11));
      id v14 = (id)[a3 objectForKey:v11];
      if (!v14)
      {
        id v14 = objc_alloc_init(MEMORY[0x263EFF980]);
        [a3 setObject:v14 forKeyedSubscript:v11];
      }
      uint64_t v8 = [objc_alloc(MEMORY[0x263EFF8F8]) initWithBytes:*(void *)(v13 + 16) length:*(void *)(v13 + 24)];
      uint64_t result = objc_msgSend(v14, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12AF0]), "initWithBinary:uniqueIdentifier:debugIdentifier:", v8, add, *(unsigned int *)(v13 + 32)));
      ++v7;
      v6 += 40;
    }
    while (v7 < *(unsigned int *)(v5 + 8));
  }
  return result;
}

uint64_t AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  uint64_t v2 = *(void *)(*(void *)(v1 + 1456) + 808);
  uint64_t v3 = *(void *)(*(void *)(result + 56) + 144);
  uint64_t v4 = *(void *)(*(void *)(result + 56) + 152);
  uint64_t v6 = *(void *)(*(void *)(result + 56) + 160);
  uint64_t v5 = *(void *)(*(void *)(result + 56) + 168);
  uint64_t v7 = *(void *)(*(void *)(result + 56) + 176);
  *(void *)(v1 + 90472) |= 0x3BuLL;
  if (*(unsigned char *)(result + 65)) {
    AGX::cloneIFTs_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes>();
  }
  if (v6)
  {
    uint64_t v8 = *(void *)(result + 24) + 24 * *(unsigned int *)(result + 36);
    int v9 = *(unsigned __int8 *)(v2 + 7456);
    *(unsigned char *)uint64_t v8 = 3;
    int v10 = *(_DWORD *)(*(void *)(result + 48) + 1508);
    if (v9)
    {
      *(_DWORD *)(v8 + 4) = v10;
      *(_DWORD *)uint64_t v8 = (*(_DWORD *)(result + 40) << 8) | 3;
    }
    else
    {
      *(_DWORD *)uint64_t v8 = (v10 << 8) | 3;
      *(_DWORD *)(v8 + 4) = *(_DWORD *)(result + 40);
    }
    *(void *)(v8 + 8) = *(void *)(v6 + 1200);
    *(void *)(v8 + 16) = *(void *)(v6 + 1424) + *(void *)(v6 + 1200);
    *(_DWORD *)(result + 36) = (*(_DWORD *)(result + 36) + 1) % *(_DWORD *)(result + 32);
  }
  if (v4)
  {
    uint64_t v11 = *(void *)(result + 24) + 24 * *(unsigned int *)(result + 36);
    int v12 = *(unsigned __int8 *)(v2 + 7456);
    *(unsigned char *)uint64_t v11 = 1;
    int v13 = *(_DWORD *)(*(void *)(result + 48) + 1508);
    if (v12)
    {
      *(_DWORD *)(v11 + 4) = v13;
      *(_DWORD *)uint64_t v11 = (*(_DWORD *)(result + 40) << 8) | 1;
    }
    else
    {
      *(_DWORD *)uint64_t v11 = (v13 << 8) | 1;
      *(_DWORD *)(v11 + 4) = *(_DWORD *)(result + 40);
    }
    *(void *)(v11 + 8) = *(void *)(v4 + 1200);
    *(void *)(v11 + 16) = *(void *)(v4 + 1424) + *(void *)(v4 + 1200);
    *(_DWORD *)(result + 36) = (*(_DWORD *)(result + 36) + 1) % *(_DWORD *)(result + 32);
  }
  if (v5)
  {
    uint64_t v14 = *(void *)(result + 24) + 24 * *(unsigned int *)(result + 36);
    int v15 = *(unsigned __int8 *)(v2 + 7456);
    *(unsigned char *)uint64_t v14 = 8;
    int v16 = *(_DWORD *)(*(void *)(result + 48) + 1508);
    if (v15)
    {
      *(_DWORD *)(v14 + 4) = v16;
      *(_DWORD *)uint64_t v14 = (*(_DWORD *)(result + 40) << 8) | 8;
    }
    else
    {
      *(_DWORD *)uint64_t v14 = (v16 << 8) | 8;
      *(_DWORD *)(v14 + 4) = *(_DWORD *)(result + 40);
    }
    *(void *)(v14 + 8) = *(void *)(v5 + 1200);
    *(void *)(v14 + 16) = *(void *)(v5 + 1424) + *(void *)(v5 + 1200);
    *(_DWORD *)(result + 36) = (*(_DWORD *)(result + 36) + 1) % *(_DWORD *)(result + 32);
  }
  if (v7)
  {
    uint64_t v17 = *(void *)(result + 24) + 24 * *(unsigned int *)(result + 36);
    int v18 = *(unsigned __int8 *)(v2 + 7456);
    *(unsigned char *)uint64_t v17 = 7;
    int v19 = *(_DWORD *)(*(void *)(result + 48) + 1508);
    if (v18)
    {
      *(_DWORD *)(v17 + 4) = v19;
      *(_DWORD *)uint64_t v17 = (*(_DWORD *)(result + 40) << 8) | 7;
    }
    else
    {
      *(_DWORD *)uint64_t v17 = (v19 << 8) | 7;
      *(_DWORD *)(v17 + 4) = *(_DWORD *)(result + 40);
    }
    *(void *)(v17 + 8) = *(void *)(v7 + 1200);
    *(void *)(v17 + 16) = *(void *)(v7 + 1424) + *(void *)(v7 + 1200);
    *(_DWORD *)(result + 36) = (*(_DWORD *)(result + 36) + 1) % *(_DWORD *)(result + 32);
  }
  if (v3)
  {
    uint64_t v20 = *(void *)(result + 24) + 24 * *(unsigned int *)(result + 36);
    int v21 = *(unsigned __int8 *)(v2 + 7456);
    *(unsigned char *)uint64_t v20 = 2;
    int v22 = *(_DWORD *)(*(void *)(result + 48) + 1508);
    if (v21)
    {
      *(_DWORD *)(v20 + 4) = v22;
      *(_DWORD *)uint64_t v20 = (*(_DWORD *)(result + 40) << 8) | 2;
    }
    else
    {
      *(_DWORD *)uint64_t v20 = (v22 << 8) | 2;
      *(_DWORD *)(v20 + 4) = *(_DWORD *)(result + 40);
    }
    *(void *)(v20 + 8) = *(void *)(v3 + 1200);
    *(void *)(v20 + 16) = *(void *)(v3 + 1424) + *(void *)(v3 + 1200);
    *(_DWORD *)(result + 36) = (*(_DWORD *)(result + 36) + 1) % *(_DWORD *)(result + 32);
  }
  ++*(_DWORD *)(result + 40);
  return result;
}

void AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(a1);
  uint64_t v16 = *(void *)(a1 + 48);
  *(void *)(v16 + 91176) |= 0x40uLL;
  *(_DWORD *)(v16 + 67820) = a2;
  *(_DWORD *)(v16 + 67784) = a3 != 0;
  *(void *)(v16 + 90168) |= 0x20uLL;
  *(void *)(v16 + 90472) |= 0x40uLL;
  AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(v16 + 36352, v17, a3, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(a1 + 64))
  {
    id v18 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = *(void **)(a1 + 16);
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(*(void *)(v19 + 38976), v18);
    uint64_t v21 = *(void *)(v19 + 1752);
    if (v21)
    {
      AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(v21, v18, v20);
      *(_DWORD *)(*(void *)(v19 + 1752) + 8) = 0;
    }
    int v22 = *(void **)(a1 + 8);
    [v22 addObject:v18];
  }
}

void AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(uint64_t a1, int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10)
{
  AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(a1);
  uint64_t v18 = *(void *)(a1 + 48);
  *(void *)(v18 + 91176) |= 0x40uLL;
  *(_DWORD *)(v18 + 67820) = a2;
  *(_DWORD *)(v18 + 67784) = a5 != 0;
  *(_DWORD *)(v18 + 67776) = a10;
  *(void *)(v18 + 90168) |= 0x20uLL;
  *(void *)(v18 + 90472) |= 0x40uLL;
  AGX::HWTessellationContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPatches(v18 + 36352, v19, a3, a4, a5, a6, a7, a8, a9, a10);
  if (*(unsigned char *)(a1 + 64))
  {
    id v20 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v21 = *(void *)(a1 + 48);
    int v22 = *(void **)(a1 + 16);
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(*(void *)(v21 + 38976), v20);
    uint64_t v23 = *(void *)(v21 + 1752);
    if (v23)
    {
      AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(v23, v20, v22);
      *(_DWORD *)(*(void *)(v21 + 1752) + 8) = 0;
    }
    int32x2_t v24 = *(void **)(a1 + 8);
    [v24 addObject:v20];
  }
}

void AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawIndexedPrimitives(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(a1);
  unint64_t v15 = *(void *)(a1 + 48);
  uint64_t v16 = (int *)MEMORY[0x263F4B188];
  if (((*(void *)(*(void *)(v15 + 38960) + 2024) | *(void *)(*(void *)(v15 + 38960) + 1976)) & 0x700000000000) != 0)
  {
    *(void *)(v15 + 90088) |= 0x700000000000uLL;
    *(void *)(v15 + 90472) |= 0x40uLL;
    *(void *)(v15 + 39896) = a4;
    uint64_t v17 = *(_DWORD **)(v15 + 160);
    uint64_t v18 = v17 + 2;
    if ((unint64_t)(v17 + 2) > *(void *)(v15 + 152))
    {
      int v36 = AGX::DataBufferAllocator<34ul>::growNoInline(v15 + 16, 3, 0);
      uint64_t v17 = *(_DWORD **)(v15 + 160);
      if (!v36) {
        goto LABEL_4;
      }
      uint64_t v18 = v17 + 2;
      if ((unint64_t)(v17 + 2) > *(void *)(v15 + 152)) {
        abort();
      }
    }
    *(void *)(v15 + 168) = v18;
LABEL_4:
    uint64_t v19 = (char *)v17 + *(void *)(v15 + 176);
    *(void *)(v15 + 160) = v17 + 2;
    *(void *)(v15 + 39880) = v19;
    *(void *)(v15 + 39888) = v19 + 4;
    *uint64_t v17 = a9;
    v17[1] = a4;
    uint64_t v20 = *(void *)(*(void *)(v15 + 40) + 224) + *v16;
    *(void *)(v15 + 78536) = v20;
    *(void *)(v15 + 78544) = v20;
  }
  if (!*(unsigned char *)(v15 + 38641))
  {
    *(unsigned char *)(v15 + 38641) = 1;
    *(void *)(v15 + 90472) |= 1uLL;
  }
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v15, a2);
  int64x2_t v37 = *(int64x2_t *)(a7 + *v16 + 8);
  if (*(void *)(v15 + 38664) != a7)
  {
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(v15 + 1592), a7, 1);
    IOGPUResourceListAddResource();
    if (*(void *)(v15 + 1480)) {
      MTLResourceListAddResource();
    }
    *(void *)(v15 + 38664) = a7;
  }
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(v15, *(void *)(v15 + 38960), *(void *)(v15 + 38968), v15 + 38992, v15 + 49184, v15 + 90088, 0);
  if (*(unsigned char *)(*(void *)(v15 + 1968) + 3908))
  {
    unsigned int v21 = (0x114u >> a2) & 1;
    if (a2 >= 9) {
      unsigned int v21 = 0;
    }
  }
  else
  {
    unsigned int v21 = *(unsigned char *)(v15 + 38643) != 0;
  }
  LODWORD(v22) = *(_DWORD *)(v15 + 38644);
  if (v22 >= 0xFFFF) {
    unsigned int v23 = 0xFFFF;
  }
  else {
    unsigned int v23 = *(_DWORD *)(v15 + 38644);
  }
  if (a6 == 1) {
    uint64_t v22 = v22;
  }
  else {
    uint64_t v22 = v23;
  }
  uint64_t v24 = *(void *)(v15 + 64);
  *(void *)uint64_t v24 = (v22 << 32) | 0x40000001;
  unsigned int v25 = (AGX::VDMEncoderGen5<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants,AGX::HAL200::VsStateConfig>::PrimitiveTypeToVDMCTRLTypeIndexedDraw[a2]
       + (a6 << 17)) & 0xFFEEFF00;
  if (v21) {
    int v26 = 0x10000;
  }
  else {
    int v26 = 0;
  }
  *(_DWORD *)(v24 + 16) = a3;
  *(_DWORD *)(v24 + 20) = a5;
  *(_DWORD *)(v24 + 24) = a9;
  int64x2_t v27 = vdupq_n_s64(3uLL);
  v27.i64[0] = a8;
  uint64x2_t v28 = (uint64x2_t)vaddq_s64(v37, v27);
  __int32 v29 = v28.i32[0];
  int v30 = v28.u8[4] | v26 | v25 | 0x100000;
  *(int32x2_t *)v28.i8 = vmovn_s64((int64x2_t)vshlq_u64(v28, (uint64x2_t)xmmword_242EA80E0));
  *(_DWORD *)(v24 + 8) = v30;
  *(_DWORD *)(v24 + 12) = v29;
  *(int8x8_t *)(v24 + 28) = vext_s8((int8x8_t)vadd_s32(*(int32x2_t *)v28.i8, (int32x2_t)-1), (int8x8_t)v28.u8[0], 4uLL);
  *(void *)(v15 + 64) = v24 + 36;
  ++*(_DWORD *)(v15 + 1524);
  switch((int)a2)
  {
    case 1:
      a3 >>= 1;
      break;
    case 2:
      --a3;
      break;
    case 3:
      a3 /= 3u;
      break;
    case 4:
    case 6:
      a3 -= 2;
      break;
    case 7:
      a3 >>= 2;
      break;
    case 8:
      a3 = ((a3 - 4) >> 1) + 1;
      break;
    case 9:
      a3 /= 3u;
      break;
    default:
      break;
  }
  *(_DWORD *)(v15 + 1540) += a3 * a5;
  if (*(unsigned char *)(a1 + 64))
  {
    id v31 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v32 = *(void *)(a1 + 48);
    unint64_t v33 = *(void **)(a1 + 16);
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(*(void *)(v32 + 38976), v31);
    uint64_t v34 = *(void *)(v32 + 1752);
    if (v34)
    {
      AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(v34, v31, v33);
      *(_DWORD *)(*(void *)(v32 + 1752) + 8) = 0;
    }
    unint64_t v35 = *(void **)(a1 + 8);
    [v35 addObject:v31];
  }
}

void AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreads(uint64_t a1, int64x2_t *a2, long long *a3, uint64_t a4)
{
  AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(a1);
  uint64_t v8 = *(void *)(a1 + 48);
  int64x2_t v9 = *a2;
  uint64_t v17 = a2[1].i64[0];
  long long v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  v15[2] = a3[2];
  int64x2_t v16 = v9;
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchWarpedThreads(v8, &v16, v15, a4);
  if (*(unsigned char *)(a1 + 64))
  {
    id v11 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v12 = *(void *)(a1 + 48);
    int v13 = *(void **)(a1 + 16);
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(*(void *)(v12 + 38976), v11);
    uint64_t v14 = *(void *)(v12 + 1752);
    if (v14)
    {
      AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(v14, v11, v13);
      *(_DWORD *)(*(void *)(v12 + 1752) + 8) = 0;
    }
    [*(id *)(a1 + 8) addObject:v11];
  }
}

void AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::drawPrimitives(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  AGX::SampledRenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::duplicateShaderAddresses(a1);
  unint64_t v12 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v12 + 38496)) {
    unsigned int v13 = a3;
  }
  else {
    unsigned int v13 = 0;
  }
  if (((*(void *)(*(void *)(v12 + 38960) + 2024) | *(void *)(*(void *)(v12 + 38960) + 1976)) & 0x700000000000) != 0)
  {
    *(void *)(v12 + 90088) |= 0x700000000000uLL;
    *(void *)(v12 + 90472) |= 0x40uLL;
    *(void *)(v12 + 39896) = a5;
    uint64_t v14 = *(unsigned int **)(v12 + 160);
    unint64_t v15 = v14 + 2;
    if ((unint64_t)(v14 + 2) > *(void *)(v12 + 152))
    {
      int v25 = AGX::DataBufferAllocator<34ul>::growNoInline(v12 + 16, 3, 0);
      uint64_t v14 = *(unsigned int **)(v12 + 160);
      if (!v25) {
        goto LABEL_7;
      }
      unint64_t v15 = v14 + 2;
      if ((unint64_t)(v14 + 2) > *(void *)(v12 + 152)) {
        abort();
      }
    }
    *(void *)(v12 + 168) = v15;
LABEL_7:
    int64x2_t v16 = (char *)v14 + *(void *)(v12 + 176);
    *(void *)(v12 + 160) = v14 + 2;
    *(void *)(v12 + 39880) = v16;
    *(void *)(v12 + 39888) = v16 + 4;
    *uint64_t v14 = v13;
    v14[1] = a5;
    uint64_t v17 = *(void *)(*(void *)(v12 + 40) + 224) + (int)*MEMORY[0x263F4B188];
    *(void *)(v12 + 78536) = v17;
    *(void *)(v12 + 78544) = v17;
  }
  if (*(unsigned char *)(v12 + 38641))
  {
    *(unsigned char *)(v12 + 38641) = 0;
    *(void *)(v12 + 90472) |= 1uLL;
  }
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeISPPrimitiveType(v12, a2);
  AGX::RenderContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitRenderState(v12, *(void *)(v12 + 38960), *(void *)(v12 + 38968), v12 + 38992, v12 + 49184, v12 + 90088, 0);
  LODWORD(v18) = AGX::VDMEncoderGen5<AGX::HAL200::ESLEncoder,AGX::HAL200::DeviceConstants,AGX::HAL200::VsStateConfig>::PrimitiveTypeToVDMCTRLTypeNonIndexedDraw[a2] & 0xFFFEFFFF;
  DWORD1(v18) = a4;
  *((void *)&v18 + 1) = __PAIR64__(a3, a6);
  uint64_t v19 = *(_OWORD **)(v12 + 64);
  *uint64_t v19 = v18;
  *(void *)(v12 + 64) = v19 + 1;
  ++*(_DWORD *)(v12 + 1524);
  switch((int)a2)
  {
    case 1:
      a4 >>= 1;
      break;
    case 2:
      --a4;
      break;
    case 3:
      a4 /= 3u;
      break;
    case 4:
    case 6:
      a4 -= 2;
      break;
    case 7:
      a4 >>= 2;
      break;
    case 8:
      a4 = ((a4 - 4) >> 1) + 1;
      break;
    case 9:
      a4 /= 3u;
      break;
    default:
      break;
  }
  *(_DWORD *)(v12 + 1540) += a4 * a6;
  if (*(unsigned char *)(a1 + 64))
  {
    id v20 = objc_alloc_init(MEMORY[0x263EFF980]);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v22 = *(void **)(a1 + 16);
    AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(*(void *)(v21 + 38976), v20);
    uint64_t v23 = *(void *)(v21 + 1752);
    if (v23)
    {
      AGX::StateLoaderProgramsTracker<AGX::HAL200::Device>::appendProgramAddressTables(v23, v20, v22);
      *(_DWORD *)(*(void *)(v21 + 1752) + 8) = 0;
    }
    uint64_t v24 = *(void **)(a1 + 8);
    [v24 addObject:v20];
  }
}

void ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F8539C0;
  int v25 = 20;
  int64x2_t v27 = 0;
  uint64_t v28 = 0;
  int v26 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 6008);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3321888768;
  v17[2] = ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2;
  v17[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  long long v18 = &unk_26F8539C0;
  int v19 = 20;
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v1;
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = objc_opt_new();
  [v4 setSync:1];
  [v4 setPipelineCache:v3];
  [v4 setBinaryArchives:0];
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v29[3] = &unk_26516F7C0;
  v29[4] = v17;
  size_t v30 = 0;
  id v31 = 0;
  unk_26F8539D0(&v24, &v31, &v30);
  uint64_t v5 = dispatch_data_create(v31, v30, 0, 0);
  [v4 setDriverKeyData:v5];
  if ([v4 airScript])
  {
    uint64_t v6 = [v4 airScript];
    long long v39 = 0uLL;
    v40[0] = 0;
    *(void *)&long long v39 = dispatch_data_create_map(v6, (const void **)&v39 + 1, v40);
    uint64_t v7 = *((void *)&v39 + 1);
    uint64_t v8 = **((_DWORD **)&v39 + 1);
    CC_SHA256_Init(&c);
    (*v24)((void **)&v24, &c);
    *(void *)leuint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v7 + v8), &data, (size_t *)len, v9, v10))
    {
      id v11 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v11);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v39);
    long long v39 = md;
    *(_OWORD *)int8x16_t v40 = v36;
    [v4 setVendorPluginFunctionId:&v39];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v4;
  *(void *)c.wbuf = v29;
  if ([v4 function])
  {
    uint64_t v12 = mach_absolute_time();
    unsigned int v13 = *(void **)v2;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v36 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v38 = v12;
    [v13 compileFunctionRequest:v4 completionHandler:&md];
  }
  else
  {
    if ([v4 frameworkData] || objc_msgSend(v4, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v36 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v14 = objc_msgSend((id)objc_msgSend(v4, "binaryArchives"), "count");
    unint64_t v15 = *(void **)v2;
    uint64_t v16 = [v4 driverKeyData];
    if (v14) {
      objc_msgSend(v15, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "binaryArchives"), 0, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
    else {
      objc_msgSend(v15, "compileRequest:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
  }
  dispatch_release(v5);

  long long v18 = &unk_26F8539C0;
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  uint64_t v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F8539C0;
  if (v26)
  {
    int64x2_t v27 = v26;
    operator delete(v26);
  }
}

void sub_242B6E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F853A00;
  int v25 = 21;
  int64x2_t v27 = 0;
  uint64_t v28 = 0;
  int v26 = 0;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 6008);
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 3321888768;
  v17[2] = ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2;
  v17[3] = &__block_descriptor_80_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE_e26_v32__0r_v8Q16__NSString_24l;
  long long v18 = &unk_26F853A00;
  int v19 = 21;
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = v1;
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = objc_opt_new();
  [v4 setSync:1];
  [v4 setPipelineCache:v3];
  [v4 setBinaryArchives:0];
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 3221225472;
  v29[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke;
  v29[3] = &unk_26516F7C0;
  v29[4] = v17;
  size_t v30 = 0;
  id v31 = 0;
  unk_26F853A10(&v24, &v31, &v30);
  uint64_t v5 = dispatch_data_create(v31, v30, 0, 0);
  [v4 setDriverKeyData:v5];
  if ([v4 airScript])
  {
    uint64_t v6 = [v4 airScript];
    long long v39 = 0uLL;
    v40[0] = 0;
    *(void *)&long long v39 = dispatch_data_create_map(v6, (const void **)&v39 + 1, v40);
    uint64_t v7 = *((void *)&v39 + 1);
    uint64_t v8 = **((_DWORD **)&v39 + 1);
    CC_SHA256_Init(&c);
    (*v24)((void **)&v24, &c);
    *(void *)leuint64_t n = 0;
    data = 0;
    if (AGX::GetSerializedVertexFormat((AGX *)(v7 + v8), &data, (size_t *)len, v9, v10))
    {
      id v11 = data;
      CC_SHA256_Update(&c, data, len[0]);
      free(v11);
    }
    CC_SHA256_Final((unsigned __int8 *)&md, &c);
    dispatch_release((dispatch_object_t)v39);
    long long v39 = md;
    *(_OWORD *)int8x16_t v40 = v36;
    [v4 setVendorPluginFunctionId:&v39];
  }
  *(void *)c.count = MEMORY[0x263EF8330];
  *(void *)c.hash = 3221225472;
  *(void *)&c.hash[2] = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke;
  *(void *)&c.hash[4] = &unk_26516F810;
  *(void *)&c.hash[6] = v4;
  *(void *)c.wbuf = v29;
  if ([v4 function])
  {
    uint64_t v12 = mach_absolute_time();
    unsigned int v13 = *(void **)v2;
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4;
    *((void *)&v36 + 1) = &unk_26516F860;
    p_CC_SHA256_CTX c = &c;
    uint64_t v38 = v12;
    [v13 compileFunctionRequest:v4 completionHandler:&md];
  }
  else
  {
    if ([v4 frameworkData] || objc_msgSend(v4, "pipelineOptions")) {
      AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
    }
    *(void *)&long long md = MEMORY[0x263EF8330];
    *((void *)&md + 1) = 3221225472;
    *(void *)&long long v36 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3;
    *((void *)&v36 + 1) = &unk_26516F838;
    p_CC_SHA256_CTX c = &c;
    uint64_t v14 = objc_msgSend((id)objc_msgSend(v4, "binaryArchives"), "count");
    unint64_t v15 = *(void **)v2;
    uint64_t v16 = [v4 driverKeyData];
    if (v14) {
      objc_msgSend(v15, "compileRequest:binaryArchives:failOnBinaryArchiveMiss:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "binaryArchives"), 0, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
    else {
      objc_msgSend(v15, "compileRequest:pipelineCache:sync:completionHandler:", v16, objc_msgSend(v4, "pipelineCache"), objc_msgSend(v4, "sync"), &md);
    }
  }
  dispatch_release(v5);

  long long v18 = &unk_26F853A00;
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  uint64_t v24 = (void (**)(void **, CC_SHA256_CTX *))&unk_26F853A00;
  if (v26)
  {
    int64x2_t v27 = v26;
    operator delete(v26);
  }
}

void sub_242B6E8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  dispatch_release(*(dispatch_object_t *)(v23 - 144));
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE24getRangeExecutionVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    uint64_t v7 = "MTLCompilerErrorFatalError";
  }
  else {
    uint64_t v7 = v5;
  }
  *(void *)&long long v8 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v8, &v13);
  uint64_t v9 = a4;
  long long v10 = v7;
  uint64_t v11 = v13;
  uint64_t v12 = v8;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242B6EB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v12 - 49) < 0) {
    operator delete(*(void **)(v12 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C401D7DD63FLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  unint64_t v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  long long v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken21ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (uint64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242B6EE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[4] = &unk_26F853A00;
  uint64_t v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken21ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[4] = &unk_26F853A00;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 48);
  uint64_t v2 = *(unsigned char **)(a2 + 56);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    uint64_t v6 = (char *)operator new(v2 - v3);
    void v5[6] = v6;
    v5[7] = v6;
    uint64_t v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  long long v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    unint64_t v15 = operator new(4 * v13);
    long long v8 = &v15[v14];
    *unint64_t v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      long long v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    uint64_t v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  *uint64_t v23 = 96;
  uint64_t v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  uint64_t v28 = &v22[4 * v18 - 16];
  __int32 v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *uint64_t v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)21,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

void ___ZN3AGX34RenderIndirectExecutionContextGen4INS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE20getVDMPatchUpVariantEPNS1_6DeviceE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    operator new();
  }
  uint64_t v5 = "MTLCompilerErrorTimeout";
  uint64_t v6 = "UnknownErrorCode";
  if (a3 == 2) {
    uint64_t v6 = "MTLCompilerErrorCompilationError";
  }
  if (a3 != 3) {
    uint64_t v5 = v6;
  }
  if (a3 == 1) {
    int v7 = "MTLCompilerErrorFatalError";
  }
  else {
    int v7 = v5;
  }
  *(void *)&long long v8 = 0;
  uint64_t v13 = 0;
  ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::serialize(a1 + 32, &v8, &v13);
  uint64_t v9 = a4;
  uint64_t v10 = v7;
  uint64_t v11 = v13;
  uint64_t v12 = v8;
  _ZZZZN3AGX6DeviceINS_6HAL2008EncodersENS1_7ClassesENS1_10ObjClassesEE49createTGOptimizationDriverShaderAndBufferIfNeededEP18AGXG17FamilyDeviceEUb_EUb_ENKUlvE_clB14_AGX__Crashed_Ev();
}

void sub_242B6F34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (*(char *)(v12 - 49) < 0) {
    operator delete(*(void **)(v12 - 72));
  }
  AGX::ProgramBindingRemap<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramBindingRemap((uint64_t)va);
  MEMORY[0x24566ED90](v11, 0x10F3C401D7DD63FLL);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EEEEvRKT_P7NSArrayIPU27objcproto16MTLBinaryArchive11objc_objectEU13block_pointerFvRK20AGCDeserializedReply16MTLCompilerErrorP8NSStringEb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    AGX::Compiler::compileProgram<AGX::UserIntersectionProgramKey,AGCReplyArray>(AGX::UserIntersectionProgramKey const&,MTLCompileFunctionRequestData *,void({block_pointer})(AGCReplyArray const&,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,NSObject  {objcproto16OS_dispatch_data}*,MTLCompilerError,NSString *,unsigned long long))::{lambda(void)#1}::operator()[abi:[AGX] Failed assertion __requestData.frameworkData && _requestData.pipelineOptions_]();
  }
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 3221225472;
  unint64_t v15 = ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2;
  uint64_t v16 = &unk_26516F7E8;
  uint64_t v17 = a9;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v12 = a1 + 32;
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(v12 + 8);
  uint64_t v23 = a8;
  uint64_t v24 = v11;
  uint64_t v25 = a2;
  uint64_t v26 = a10;
  if (objc_msgSend(v10, "sync", MEMORY[0x263EF8330], 3221225472))
  {
    v15(v14);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async(global_queue, v14);
  }
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_3(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

uint64_t ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_4(uint64_t a1, void *a2)
{
  if (getTimebaseInfo(void)::once != -1) {
    dispatch_once(&getTimebaseInfo(void)::once, &__block_literal_global_7474);
  }
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *a2);
}

void ___ZN3AGX8Compiler14compileProgramI10ProgramKeyIL15_AGCStreamToken20ELNS_27DriverShaderCompilationModeE1EE20AGCDeserializedReplyEEvRKT_P29MTLCompileFunctionRequestDataU13block_pointerFvRKT0_PU27objcproto16OS_dispatch_data8NSObjectSH_SH_SH_SH_16MTLCompilerErrorP8NSStringyE_block_invoke_2(void *a1)
{
  size_t size_ptr = 0;
  buffer_ptr = 0;
  uint64_t v2 = a1[12];
  AGCDeserializedReply::AGCDeserializedReply((AGCDeserializedReply *)v5);
  if (v2 || (int64_t v4 = a1[5]) == 0)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = dispatch_data_create_map(v4, (const void **)&buffer_ptr, &size_ptr);
    AGCDeserializedReply::deserialize((AGCDeserializedReply *)v5, buffer_ptr, size_ptr);
  }
  (*(void (**)(void, unsigned char *))(a1[11] + 16))(a1[11], v5);
  if (v3) {
    dispatch_release(v3);
  }
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)v5);
}

void sub_242B6F660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AGCDeserializedReply::~AGCDeserializedReply((AGCDeserializedReply *)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE(void *a1)
{
  a1[4] = &unk_26F8539C0;
  uint64_t v1 = (void *)a1[6];
  if (v1)
  {
    a1[7] = v1;
    operator delete(v1);
  }
}

void *__copy_helper_block_e8_32c77_ZTS10ProgramKeyIL15_AGCStreamToken20ELN3AGX27DriverShaderCompilationModeE1EE(void *result, uint64_t a2)
{
  result[4] = &unk_26F8539C0;
  *((_DWORD *)result + 10) = *(_DWORD *)(a2 + 40);
  result[7] = 0;
  result[8] = 0;
  result[6] = 0;
  uint64_t v3 = *(unsigned char **)(a2 + 48);
  uint64_t v2 = *(unsigned char **)(a2 + 56);
  int64_t v4 = v2 - v3;
  if (v2 != v3)
  {
    if (v4 < 0) {
      abort();
    }
    uint64_t v5 = result;
    uint64_t v6 = (char *)operator new(v2 - v3);
    void v5[6] = v6;
    v5[7] = v6;
    int v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    uint64_t result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::serialize(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(int **)(a1 + 16);
  *(void *)(a1 + 24) = v6;
  int v7 = *(unsigned __int8 *)(a1 + 8) | 0x100;
  long long v8 = *(int **)(a1 + 32);
  if (v6 >= v8)
  {
    uint64_t v10 = (char *)v8 - (char *)v6;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v12) {
      unint64_t v13 = v11;
    }
    if (v13 >> 62) {
      goto LABEL_34;
    }
    uint64_t v14 = v13;
    unint64_t v15 = operator new(4 * v13);
    long long v8 = &v15[v14];
    *unint64_t v15 = v7;
    uint64_t v9 = (char *)(v15 + 1);
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v15 + 1;
    *(void *)(a1 + 32) = &v15[v14];
    if (v6)
    {
      operator delete(v6);
      long long v8 = *(int **)(a1 + 32);
    }
  }
  else
  {
    *uint64_t v6 = v7;
    uint64_t v9 = (char *)(v6 + 1);
  }
  *(void *)(a1 + 24) = v9;
  if (v9 < (char *)v8)
  {
    *(_DWORD *)uint64_t v9 = 96;
    uint64_t v16 = v9 + 4;
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)(a1 + 16);
  uint64_t v18 = (v9 - v17) >> 2;
  unint64_t v19 = v18 + 1;
  if ((unint64_t)(v18 + 1) >> 62) {
    abort();
  }
  uint64_t v20 = (char *)v8 - v17;
  if (v20 >> 1 > v19) {
    unint64_t v19 = v20 >> 1;
  }
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v21 = v19;
  }
  if (v21)
  {
    if (!(v21 >> 62))
    {
      uint64_t v22 = operator new(4 * v21);
      goto LABEL_22;
    }
LABEL_34:
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v22 = 0;
LABEL_22:
  uint64_t v23 = &v22[4 * v18];
  uint64_t v24 = &v22[4 * v21];
  *uint64_t v23 = 96;
  uint64_t v16 = v23 + 1;
  if (v9 == v17) {
    goto LABEL_31;
  }
  unint64_t v25 = v9 - v17 - 4;
  if (v25 < 0x2C)
  {
    uint64_t v26 = v9;
    goto LABEL_30;
  }
  if ((unint64_t)(v17 - v22) < 0x20)
  {
    uint64_t v26 = v9;
    do
    {
LABEL_30:
      int v32 = *((_DWORD *)v26 - 1);
      v26 -= 4;
      *--uint64_t v23 = v32;
    }
    while (v26 != v17);
    goto LABEL_31;
  }
  uint64_t v27 = (v25 >> 2) + 1;
  uint64_t v26 = &v9[-4 * (v27 & 0x7FFFFFFFFFFFFFF8)];
  uint64_t v28 = &v22[4 * v18 - 16];
  __int32 v29 = v9 - 16;
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v31 = *(_OWORD *)v29;
    *(v28 - 1) = *((_OWORD *)v29 - 1);
    *uint64_t v28 = v31;
    v28 -= 2;
    v29 -= 32;
    v30 -= 8;
  }
  while (v30);
  v23 -= v27 & 0x7FFFFFFFFFFFFFF8;
  if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)(a1 + 16) = v23;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v24;
  if (v17) {
    operator delete(v17);
  }
LABEL_33:
  *(void *)(a1 + 24) = v16;
  *a2 = *(void *)(a1 + 16);
  *a3 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::getSupportIndirectCommandBuffers()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToBinaryArchive()
{
  return 0;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::isPrecompiledToPipelineCache()
{
  return 1;
}

uint64_t ProgramKey<(_AGCStreamToken)20,(AGX::DriverShaderCompilationMode)1>::legalizeStateForTargetOS()
{
  return 1;
}

uint64_t AGX::RenderIndirectExecutionContextGen4<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::patchVDMControlStreamAndReset(uint64_t a1, unint64_t *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    *a2 = __ROR8__(v7, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveVertexBarrier(*(void *)(a1 + 24), 5u);
    uint64_t v8 = *(void *)(a1 + 24);
    ++*a4;
    uint64_t v9 = *(_DWORD **)(v8 + 112);
    *uint64_t v9 = 553648480;
    *(void *)(v8 + 112) = v9 + 1;
    uint64_t v10 = *(void *)(a1 + 24);
    uint64_t v11 = *(unint64_t **)(v10 + 112);
    *uint64_t v11 = __ROR8__(*(void *)(a1 + 56), 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    *(void *)(v10 + 112) = v11 + 1;
    *(void *)(a1 + 48) = 0;
  }
  else
  {
    *a2 = __ROR8__(*(void *)(a1 + 56), 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
  }
  uint64_t result = AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveVertexBarrier(*(void *)(a1 + 24), 3u);
  uint64_t v13 = *(void *)(a1 + 24);
  ++*a4;
  uint64_t v14 = *(_DWORD **)(v13 + 80);
  *uint64_t v14 = 553650528;
  *(void *)(v13 + 80) = v14 + 1;
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(unint64_t **)(v15 + 80);
  *uint64_t v16 = __ROR8__(a3, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
  *(void *)(v15 + 80) = v16 + 1;
  uint64_t v17 = *(void *)(a1 + 72);
  if (v17) {
    *(_DWORD *)(v17 + 4) = *(_DWORD *)(a1 + 64);
  }
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return result;
}

double AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::RenderPipeline(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 653) = 0;
  *(void *)(a1 + 664) = 0x3F80000000000001;
  *(void *)(a1 + 672) = 0x1FFFFFFFFLL;
  *(_WORD *)(a1 + 680) = 1;
  *(_OWORD *)(a1 + 684) = xmmword_242EA87D0;
  *(unsigned char *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 716) = 0;
  *(void *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 707) = 0;
  *(void *)(a1 + 700) = 0;
  *(_OWORD *)(a1 + 728) = xmmword_242EA8790;
  *(void *)(a1 + 744) = 0x41000000000000;
  *(void *)(a1 + 752) = 0xA01E3CE508;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(a1 + 936) = 0;
  *(unsigned char *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1064) = 1610612736;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = 0;
  *(void *)&long long v2 = -1;
  *((void *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 1144) = v2;
  *(_OWORD *)(a1 + 1128) = v2;
  *(_OWORD *)(a1 + 1112) = v2;
  *(_DWORD *)(a1 + 1200) = 0;
  *(unsigned char *)(a1 + 1164) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1189) = 0;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(void *)(a1 + 1344) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1352) = 1610612736;
  *(void *)(a1 + 1392) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1432) = v2;
  *(_OWORD *)(a1 + 1416) = v2;
  *(_OWORD *)(a1 + 1400) = v2;
  *(_DWORD *)(a1 + 1488) = 0;
  *(unsigned char *)(a1 + 1452) = 0;
  *(_DWORD *)(a1 + 1448) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1456) = 0;
  *(void *)(a1 + 1477) = 0;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(void *)(a1 + 1632) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1640) = 1610612736;
  *(void *)(a1 + 1680) = 0;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1720) = v2;
  *(_OWORD *)(a1 + 1704) = v2;
  *(_OWORD *)(a1 + 1688) = v2;
  *(_DWORD *)(a1 + 1776) = 0;
  *(unsigned char *)(a1 + 1740) = 0;
  *(_DWORD *)(a1 + 1736) = 0;
  *(void *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = 0;
  *(void *)(a1 + 1765) = 0;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 1912) = 0;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1784) = 0u;
  *(void *)(a1 + 1920) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1928) = 1610612736;
  *(void *)(a1 + 1968) = 0;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 2008) = v2;
  *(_OWORD *)(a1 + 1992) = v2;
  *(_OWORD *)(a1 + 1976) = v2;
  *(_DWORD *)(a1 + 2064) = 0;
  *(unsigned char *)(a1 + 2028) = 0;
  *(_DWORD *)(a1 + 2024) = 0;
  *(void *)(a1 + 2040) = 0;
  *(void *)(a1 + 2032) = 0;
  *(void *)(a1 + 2053) = 0;
  *(void *)(a1 + 2048) = 0;
  *(void *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2120) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(void *)(a1 + 2208) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 2216) = 1610612736;
  *(void *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2296) = v2;
  *(_OWORD *)(a1 + 2280) = v2;
  *(_OWORD *)(a1 + 2264) = v2;
  *(_DWORD *)(a1 + 2352) = 0;
  *(unsigned char *)(a1 + 2316) = 0;
  *(_DWORD *)(a1 + 2312) = 0;
  *(void *)(a1 + 2328) = 0;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2341) = 0;
  *(void *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_DWORD *)(a1 + 2552) = 1065353216;
  *(_OWORD *)(a1 + 2576) = 0u;
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_DWORD *)(a1 + 2592) = 1065353216;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_DWORD *)(a1 + 2632) = 1065353216;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_DWORD *)(a1 + 2672) = 1065353216;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_DWORD *)(a1 + 2712) = 1065353216;
  *(_OWORD *)(a1 + 2736) = 0u;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_DWORD *)(a1 + 2752) = 1065353216;
  *(void *)(a1 + 2792) = 0;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_DWORD *)(a1 + 2800) = 1065353216;
  *(void *)(a1 + 2808) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 2816) = 1610612736;
  *(void *)(a1 + 2856) = 0;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2896) = v2;
  *(_OWORD *)(a1 + 2880) = v2;
  *(_OWORD *)(a1 + 2864) = v2;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(_OWORD *)(a1 + 3120) = 0u;
  *(_OWORD *)(a1 + 3104) = 0u;
  *(_OWORD *)(a1 + 3088) = 0u;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(_OWORD *)(a1 + 3056) = 0u;
  *(_OWORD *)(a1 + 3040) = 0u;
  *(_OWORD *)(a1 + 3024) = 0u;
  *(_OWORD *)(a1 + 3008) = 0u;
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_OWORD *)(a1 + 2960) = 0u;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_DWORD *)(a1 + 756) &= ~0x20000u;
  return result;
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~RenderPipeline(uint64_t a1)
{
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::destroy((uint64_t *)a1);
  uint64_t v2 = *(void *)(a1 + 3184);
  *(void *)(a1 + 3184) = 0;
  if (v2)
  {
    if (*(void *)(v2 + 64) && *(void *)(v2 + 24))
    {
      uint64_t v3 = *(void *)(v2 + 32);
      int64_t v4 = *(NSObject **)(v3 + 16);
      uint64_t v97 = MEMORY[0x263EF8330];
      uint64_t v98 = 3221225472;
      uint64_t v99 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      unint64_t v100 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v101 = v3;
      uint64_t v102 = v2;
      dispatch_sync(v4, &v97);
      *(_OWORD *)(v2 + 25) = 0u;
      *(_OWORD *)uint64_t v2 = 0u;
      *(_OWORD *)(v2 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v2, 0x1070C4082A93E96);
  }
  uint64_t v5 = *(void *)(a1 + 3176);
  *(void *)(a1 + 3176) = 0;
  if (v5)
  {
    if (*(void *)(v5 + 64) && *(void *)(v5 + 24))
    {
      uint64_t v6 = *(void *)(v5 + 32);
      uint64_t v7 = *(NSObject **)(v6 + 16);
      uint64_t v97 = MEMORY[0x263EF8330];
      uint64_t v98 = 3221225472;
      uint64_t v99 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      unint64_t v100 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v101 = v6;
      uint64_t v102 = v5;
      dispatch_sync(v7, &v97);
      *(_OWORD *)(v5 + 25) = 0u;
      *(_OWORD *)uint64_t v5 = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v5, 0x1070C4082A93E96);
  }
  uint64_t v8 = *(void *)(a1 + 3168);
  *(void *)(a1 + 3168) = 0;
  if (v8)
  {
    if (*(void *)(v8 + 64) && *(void *)(v8 + 24))
    {
      uint64_t v9 = *(void *)(v8 + 32);
      uint64_t v10 = *(NSObject **)(v9 + 16);
      uint64_t v97 = MEMORY[0x263EF8330];
      uint64_t v98 = 3221225472;
      uint64_t v99 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      unint64_t v100 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v101 = v9;
      uint64_t v102 = v8;
      dispatch_sync(v10, &v97);
      *(_OWORD *)(v8 + 25) = 0u;
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v8, 0x1070C4082A93E96);
  }
  uint64_t v11 = *(void *)(a1 + 3160);
  *(void *)(a1 + 3160) = 0;
  if (v11)
  {
    if (*(void *)(v11 + 64) && *(void *)(v11 + 24))
    {
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *(NSObject **)(v12 + 16);
      uint64_t v97 = MEMORY[0x263EF8330];
      uint64_t v98 = 3221225472;
      uint64_t v99 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      unint64_t v100 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v101 = v12;
      uint64_t v102 = v11;
      dispatch_sync(v13, &v97);
      *(_OWORD *)(v11 + 25) = 0u;
      *(_OWORD *)uint64_t v11 = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v11, 0x1070C4082A93E96);
  }
  uint64_t v14 = *(void *)(a1 + 3152);
  *(void *)(a1 + 3152) = 0;
  if (v14)
  {
    if (*(void *)(v14 + 64) && *(void *)(v14 + 24))
    {
      uint64_t v15 = *(void *)(v14 + 32);
      uint64_t v16 = *(NSObject **)(v15 + 16);
      uint64_t v97 = MEMORY[0x263EF8330];
      uint64_t v98 = 3221225472;
      uint64_t v99 = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
      unint64_t v100 = &__block_descriptor_48_e5_v8__0l;
      uint64_t v101 = v15;
      uint64_t v102 = v14;
      dispatch_sync(v16, &v97);
      *(_OWORD *)(v14 + 25) = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
      *(_OWORD *)(v14 + 16) = 0u;
    }
    MEMORY[0x24566ED90](v14, 0x1070C4082A93E96);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 3144);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 3128);
  if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(a1 + 3112);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 3096);
  if (v20 && !atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 3080);
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 3064);
  if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 3048);
  if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 3032);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(a1 + 3016);
  if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 3000);
  if (v26 && !atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 2984);
  if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 2968);
  if (v28 && !atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  __int32 v29 = *(std::__shared_weak_count **)(a1 + 2952);
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 2936);
  if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  long long v31 = *(std::__shared_weak_count **)(a1 + 2920);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  int v32 = *(void **)(a1 + 2784);
  if (v32)
  {
    do
    {
      unint64_t v33 = (void *)*v32;
      operator delete(v32);
      int v32 = v33;
    }
    while (v33);
  }
  uint64_t v34 = *(void **)(a1 + 2768);
  *(void *)(a1 + 2768) = 0;
  if (v34) {
    operator delete(v34);
  }
  unint64_t v35 = *(void **)(a1 + 2736);
  if (v35)
  {
    do
    {
      long long v36 = (void *)*v35;
      operator delete(v35);
      unint64_t v35 = v36;
    }
    while (v36);
  }
  int64x2_t v37 = *(void **)(a1 + 2720);
  *(void *)(a1 + 2720) = 0;
  if (v37) {
    operator delete(v37);
  }
  uint64_t v38 = *(id **)(a1 + 2696);
  if (v38)
  {
    do
    {
      long long v39 = (id *)*v38;

      operator delete(v38);
      uint64_t v38 = v39;
    }
    while (v39);
  }
  int8x16_t v40 = *(void **)(a1 + 2680);
  *(void *)(a1 + 2680) = 0;
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = *(id **)(a1 + 2656);
  if (v41)
  {
    do
    {
      int8x16_t v42 = (id *)*v41;

      operator delete(v41);
      uint64_t v41 = v42;
    }
    while (v42);
  }
  int8x16_t v43 = *(void **)(a1 + 2640);
  *(void *)(a1 + 2640) = 0;
  if (v43) {
    operator delete(v43);
  }
  int8x16_t v44 = *(id **)(a1 + 2616);
  if (v44)
  {
    do
    {
      int8x16_t v45 = (id *)*v44;

      operator delete(v44);
      int8x16_t v44 = v45;
    }
    while (v45);
  }
  int8x16_t v46 = *(void **)(a1 + 2600);
  *(void *)(a1 + 2600) = 0;
  if (v46) {
    operator delete(v46);
  }
  int64x2_t v47 = *(id **)(a1 + 2576);
  if (v47)
  {
    do
    {
      int32x2_t v48 = (id *)*v47;

      operator delete(v47);
      int64x2_t v47 = v48;
    }
    while (v48);
  }
  uint64_t v49 = *(void **)(a1 + 2560);
  *(void *)(a1 + 2560) = 0;
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = *(id **)(a1 + 2536);
  if (v50)
  {
    do
    {
      uint64_t v51 = (id *)*v50;

      operator delete(v50);
      uint64_t v50 = v51;
    }
    while (v51);
  }
  uint64_t v52 = *(void **)(a1 + 2520);
  *(void *)(a1 + 2520) = 0;
  if (v52) {
    operator delete(v52);
  }
  uint64_t v53 = *(void *)(a1 + 2496);
  if (v53)
  {
    uint64_t v54 = *(void *)(a1 + 2504);
    BOOL v55 = *(void **)(a1 + 2496);
    if (v54 != v53)
    {
      do
      {
        uint64_t v56 = *(std::__shared_weak_count **)(v54 - 8);
        if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
        v54 -= 16;
      }
      while (v54 != v53);
      BOOL v55 = *(void **)(a1 + 2496);
    }
    *(void *)(a1 + 2504) = v53;
    operator delete(v55);
  }
  uint64_t v57 = *(void *)(a1 + 2472);
  if (v57)
  {
    uint64_t v58 = *(void *)(a1 + 2480);
    uint64_t v59 = *(void **)(a1 + 2472);
    if (v58 != v57)
    {
      do
      {
        uint64_t v60 = *(std::__shared_weak_count **)(v58 - 8);
        if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
        v58 -= 16;
      }
      while (v58 != v57);
      uint64_t v59 = *(void **)(a1 + 2472);
    }
    *(void *)(a1 + 2480) = v57;
    operator delete(v59);
  }
  uint64_t v61 = *(void *)(a1 + 2448);
  if (v61)
  {
    uint64_t v62 = *(void *)(a1 + 2456);
    uint64_t v63 = *(void **)(a1 + 2448);
    if (v62 != v61)
    {
      do
      {
        uint64_t v64 = *(std::__shared_weak_count **)(v62 - 8);
        if (v64 && !atomic_fetch_add(&v64->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
        v62 -= 16;
      }
      while (v62 != v61);
      uint64_t v63 = *(void **)(a1 + 2448);
    }
    *(void *)(a1 + 2456) = v61;
    operator delete(v63);
  }
  uint64_t v65 = *(void *)(a1 + 2424);
  if (v65)
  {
    uint64_t v66 = *(void *)(a1 + 2432);
    int v67 = *(void **)(a1 + 2424);
    if (v66 != v65)
    {
      do
      {
        uint64_t v68 = *(std::__shared_weak_count **)(v66 - 8);
        if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
        v66 -= 16;
      }
      while (v66 != v65);
      int v67 = *(void **)(a1 + 2424);
    }
    *(void *)(a1 + 2432) = v65;
    operator delete(v67);
  }
  uint64_t v69 = *(void *)(a1 + 2400);
  if (v69)
  {
    uint64_t v70 = *(void *)(a1 + 2408);
    unint64_t v71 = *(void **)(a1 + 2400);
    if (v70 != v69)
    {
      do
      {
        uint64_t v72 = *(std::__shared_weak_count **)(v70 - 8);
        if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
        v70 -= 16;
      }
      while (v70 != v69);
      unint64_t v71 = *(void **)(a1 + 2400);
    }
    *(void *)(a1 + 2408) = v69;
    operator delete(v71);
  }
  int8x16_t v73 = *(std::__shared_weak_count **)(a1 + 2152);
  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  int8x16_t v74 = *(std::__shared_weak_count **)(a1 + 2136);
  if (v74 && !atomic_fetch_add(&v74->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
    std::__shared_weak_count::__release_weak(v74);
  }
  int8x16_t v75 = *(std::__shared_weak_count **)(a1 + 2120);
  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
  int8x16_t v76 = *(std::__shared_weak_count **)(a1 + 1864);
  if (v76 && !atomic_fetch_add(&v76->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
  int8x16_t v77 = *(std::__shared_weak_count **)(a1 + 1848);
  if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
    std::__shared_weak_count::__release_weak(v77);
  }
  int8x16_t v78 = *(std::__shared_weak_count **)(a1 + 1832);
  if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
    std::__shared_weak_count::__release_weak(v78);
  }
  int64x2_t v79 = *(std::__shared_weak_count **)(a1 + 1576);
  if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
  }
  int32x2_t v80 = *(std::__shared_weak_count **)(a1 + 1560);
  if (v80 && !atomic_fetch_add(&v80->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
    std::__shared_weak_count::__release_weak(v80);
  }
  uint64_t v81 = *(std::__shared_weak_count **)(a1 + 1544);
  if (v81 && !atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
    std::__shared_weak_count::__release_weak(v81);
  }
  unsigned int v82 = *(std::__shared_weak_count **)(a1 + 1288);
  if (v82 && !atomic_fetch_add(&v82->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
    std::__shared_weak_count::__release_weak(v82);
  }
  uint64_t v83 = *(std::__shared_weak_count **)(a1 + 1272);
  if (v83 && !atomic_fetch_add(&v83->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v83);
  }
  uint64_t v84 = *(std::__shared_weak_count **)(a1 + 1256);
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
    std::__shared_weak_count::__release_weak(v84);
  }
  uint64_t v85 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v85 && !atomic_fetch_add(&v85->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
  }
  uint64_t v86 = *(std::__shared_weak_count **)(a1 + 984);
  if (v86 && !atomic_fetch_add(&v86->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }
  uint64_t v87 = *(std::__shared_weak_count **)(a1 + 968);
  if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
    std::__shared_weak_count::__release_weak(v87);
  }
  if (*(_DWORD *)(a1 + 928) && !*(unsigned char *)(a1 + 944))
  {
    uint64_t v88 = (os_unfair_lock_s *)(*(void *)(a1 + 936) + 40);
    os_unfair_lock_lock(v88);
    uint64_t v89 = *(void *)(a1 + 936);
    uint64_t v90 = *(unsigned int *)(a1 + 928);
    uint64_t v91 = *(void *)(v89 + 32);
    int v92 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v89 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 8 * v90) = v91;
    uint64_t v93 = v91;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v89 + 32), (unint64_t *)&v93, (v91 & 0xFFFFFFFF00000000 | v90) + 0x100000000);
    if (v93 != v91)
    {
      uint64_t v94 = v93;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v89 + 24) + 8) + *v92 + 24) + 8 * v90) = v93;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v89 + 32), (unint64_t *)&v94, (v93 & 0xFFFFFFFF00000000 | v90) + 0x100000000);
        BOOL v95 = v94 == v93;
        uint64_t v93 = v94;
      }
      while (!v95);
    }
    os_unfair_lock_unlock(v88);
  }
  return a1;
}

void sub_242B70F10(_Unwind_Exception *a1)
{
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 3184));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 3176));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 3168));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 3160));
  std::unique_ptr<AGX::HeapBuffer>::~unique_ptr[abi:nn180100]((uint64_t *)(v1 + 3152));
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3136);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3120);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3104);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3088);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3072);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3056);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3040);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3024);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 3008);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2992);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2976);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2960);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2944);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2928);
  std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100](v1 + 2912);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1 + 2768);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v1 + 2720);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 2680);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 2640);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 2600);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 2560);
  std::unordered_map<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>::~unordered_map[abi:nn180100](v1 + 2520);
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v1 + 2496));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v1 + 2472));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v1 + 2448));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v1 + 2424));
  AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::~PipelineDylibResources((void **)(v1 + 2400));
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 2112));
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 1824));
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 1536));
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 1248));
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::RuntimeState::~RuntimeState((void *)(v1 + 960));
  AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::~Allocation((unsigned int *)(v1 + 928));
  _Unwind_Resume(a1);
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::destroy(uint64_t *a1)
{
  if (!*((unsigned char *)a1 + 660))
  {
    uint64_t v6 = (unsigned char *)a1[3];
    if (!v6 || !v6[3410]) {
      goto LABEL_15;
    }
LABEL_14:
    (*(void (**)(unsigned char *))(*(void *)v6 + 8))(v6);
    goto LABEL_15;
  }
  uint64_t v2 = *a1;
  if (*a1) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[3];
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (unsigned char *)a1[4];
  if (v6) {
    goto LABEL_14;
  }
LABEL_15:
  if (a1[113])
  {
    uint64_t v7 = a1[114];
    uint64_t v8 = *(NSObject **)(v7 + 16);
    v49[0] = MEMORY[0x263EF8330];
    v49[1] = 3221225472;
    v49[2] = ___ZN3AGX4HeapILb1EE14deallocateImplERKNS1_10AllocationE_block_invoke;
    v49[3] = &__block_descriptor_48_e5_v8__0l;
    v49[4] = v7;
    v49[5] = a1 + 110;
    dispatch_sync(v8, v49);
    *(_OWORD *)((char *)a1 + 905) = 0u;
    *((_OWORD *)a1 + 55) = 0u;
    *((_OWORD *)a1 + 56) = 0u;
  }
  uint64_t v9 = (uint64_t *)a1[300];
  uint64_t v10 = (uint64_t *)a1[301];
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    v9 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v11);
  }
  uint64_t v12 = (uint64_t *)a1[303];
  uint64_t v13 = (uint64_t *)a1[304];
  while (v12 != v13)
  {
    uint64_t v14 = *v12;
    v12 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v14);
  }
  uint64_t v15 = (uint64_t *)a1[306];
  uint64_t v16 = (uint64_t *)a1[307];
  while (v15 != v16)
  {
    uint64_t v17 = *v15;
    v15 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v17);
  }
  uint64_t v18 = (uint64_t *)a1[309];
  unint64_t v19 = (uint64_t *)a1[310];
  while (v18 != v19)
  {
    uint64_t v20 = *v18;
    v18 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v20);
  }
  unint64_t v21 = (uint64_t *)a1[312];
  uint64_t v22 = (uint64_t *)a1[313];
  while (v21 != v22)
  {
    uint64_t v23 = *v21;
    v21 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::deallocateCodeHeap(v23);
  }
  uint64_t v24 = a1[97];
  if (v24)
  {
    uint64_t v25 = *(void *)(v24 + 3208);
    if (v25)
    {
      uint64_t v26 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v25);
      MEMORY[0x24566ED90](v26, 0x10F0C4099BF1763);
    }
    uint64_t v27 = AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~RenderPipeline(v24);
    MEMORY[0x24566ED90](v27, 0x10F0C40403D19FDLL);
  }
  uint64_t v28 = a1[98];
  if (v28)
  {
    uint64_t v29 = *(void *)(v28 + 3208);
    if (v29)
    {
      uint64_t v30 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v29);
      MEMORY[0x24566ED90](v30, 0x10F0C4099BF1763);
    }
    uint64_t v31 = AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~RenderPipeline(v28);
    MEMORY[0x24566ED90](v31, 0x10F0C40403D19FDLL);
  }
  uint64_t v32 = a1[99];
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 3208);
    if (v33)
    {
      uint64_t v34 = ProgramVaryingTable<AGX::HAL200::Encoders,AGX::HAL200::Classes>::~ProgramVaryingTable(v33);
      MEMORY[0x24566ED90](v34, 0x10F0C4099BF1763);
    }
    uint64_t v35 = AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::~RenderPipeline(v32);
    MEMORY[0x24566ED90](v35, 0x10F0C40403D19FDLL);
  }
  if (a1[345])
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 180);
    for (uint64_t i = (uint64_t **)(a1 + 342); ; i[3])
    {
      uint64_t i = (uint64_t **)*i;
      if (!i) {
        break;
      }
    }
    uint64_t v37 = a1[345];
    if (v37)
    {

      MEMORY[0x24566ED90](v37, 0x10A0C404C70D3EBLL);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 180);
  }
  uint64_t v38 = (std::__shared_weak_count *)a1[365];
  long long v39 = 0uLL;
  *((_OWORD *)a1 + 182) = 0u;
  if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    long long v39 = 0uLL;
  }
  int8x16_t v40 = (std::__shared_weak_count *)a1[375];
  *((_OWORD *)a1 + 187) = v39;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  uint64_t v41 = (std::__shared_weak_count *)a1[367];
  a1[366] = 0;
  a1[367] = 0;
  if (v41 && !atomic_fetch_add(&v41->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  int8x16_t v42 = (std::__shared_weak_count *)a1[377];
  a1[376] = 0;
  a1[377] = 0;
  if (v42 && !atomic_fetch_add(&v42->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  int8x16_t v43 = (std::__shared_weak_count *)a1[369];
  a1[368] = 0;
  a1[369] = 0;
  if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
  }
  int8x16_t v44 = (std::__shared_weak_count *)a1[379];
  a1[378] = 0;
  a1[379] = 0;
  if (v44 && !atomic_fetch_add(&v44->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  int8x16_t v45 = (std::__shared_weak_count *)a1[371];
  a1[370] = 0;
  a1[371] = 0;
  if (v45 && !atomic_fetch_add(&v45->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
  int8x16_t v46 = (std::__shared_weak_count *)a1[381];
  a1[380] = 0;
  a1[381] = 0;
  if (v46 && !atomic_fetch_add(&v46->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
  int64x2_t v47 = (std::__shared_weak_count *)a1[373];
  a1[372] = 0;
  a1[373] = 0;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  int32x2_t v48 = (std::__shared_weak_count *)a1[383];
  a1[382] = 0;
  a1[383] = 0;
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
}

void sub_242B7170C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_242B719EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v10)
  {
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_242B73EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,void *a62)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v63 = a62;
    if (!a62)
    {
LABEL_3:
      uint64_t v64 = a31;
      if (!a31) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v63 = a62;
    if (!a62) {
      goto LABEL_3;
    }
  }
  operator delete(v63);
  uint64_t v64 = a31;
  if (!a31)
  {
LABEL_4:
    if (!a15) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v64);
  if (!a15) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&a15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
    std::__shared_weak_count::__release_weak(a15);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::copyStateAndFunctionsFromOriginal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v113 = *MEMORY[0x263EF8340];
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::destroy((uint64_t *)a1);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::copyState(a1, a3, 0);
  uint64_t v7 = *(void *)(a3 + 8);
  if (v7)
  {
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = v7 + 3616;
    *(void *)&long long v112 = 0;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v109 = 0u;
    unsigned int v9 = *(_DWORD *)(v7 + 2272);
    if (v9)
    {
      uint64_t v10 = v7 + 2448;
      uint64_t v11 = (int)*MEMORY[0x263F4B188];
      unsigned int v12 = -1;
      do
      {
        unsigned int v13 = v12++;
        unsigned int v14 = __clz(__rbit32(v9));
        *((void *)&v109 + v12) = *(void *)(v10 + 8 * v14) + v11 + 32;
        v9 &= ~(1 << v14);
      }
      while (v9);
      *((void *)&v109 + v13 + 2) = v8;
      int v15 = v12 + 2;
      if (v12 == -2) {
        goto LABEL_6;
      }
    }
    else
    {
      *(void *)&long long v109 = v7 + 3616;
      int v15 = 1;
    }
    uint64_t v89 = 0;
    uint64_t v90 = *(unsigned int *)(a1 + 640);
    do
    {
      if (v90)
      {
        uint64_t v92 = 0;
        uint64_t v93 = (long long *)*((void *)&v109 + v89);
        unsigned int v94 = v90;
        BOOL v95 = (int *)(a1 + 104);
        while (1)
        {
          int v96 = *v95;
          v95 += 6;
          if (*((_DWORD *)v93 + 4) == v96) {
            break;
          }
          if (v90 == ++v92) {
            goto LABEL_89;
          }
        }
      }
      else
      {
        LODWORD(v92) = 0;
      }
      if (v92 == v90)
      {
        uint64_t v93 = (long long *)*((void *)&v109 + v89);
        unsigned int v94 = v90;
LABEL_89:
        uint64_t v97 = a1 + 24 * v94;
        long long v98 = *v93;
        *(void *)(v97 + 104) = *((void *)v93 + 2);
        *(_OWORD *)(v97 + 88) = v98;
        uint64_t v91 = (*(_DWORD *)(a1 + 640) + 1);
        *(_DWORD *)(a1 + 640) = v91;
      }
      else
      {
        uint64_t v91 = v90;
        LOBYTE(v90) = v92;
      }
      *(_DWORD *)(a1 + 644) |= 1 << v90;
      ++v89;
      uint64_t v90 = v91;
    }
    while (v89 != v15);
  }
LABEL_6:
  uint64_t v16 = *(void *)a3;
  if (*(void *)a3)
  {
    *(void *)a1 = v16;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    unsigned int v17 = *(_DWORD *)(v16 + 2272);
    if (v17)
    {
      LODWORD(v18) = 0;
      uint64_t v19 = v16 + 2448;
      uint64_t v20 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v21 = __clz(__rbit32(v17));
        *((void *)&v109 + v18) = *(void *)(v19 + 8 * v21) + v20 + 32;
        uint64_t v18 = (v18 + 1);
        v17 &= ~(1 << v21);
      }
      while (v17);
      if (v18)
      {
        uint64_t v22 = 0;
        uint64_t v23 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v23)
          {
            uint64_t v25 = 0;
            uint64_t v26 = (long long *)*((void *)&v109 + v22);
            unsigned int v27 = v23;
            uint64_t v28 = (int *)(a1 + 104);
            while (1)
            {
              int v29 = *v28;
              v28 += 6;
              if (*((_DWORD *)v26 + 4) == v29) {
                break;
              }
              if (v23 == ++v25) {
                goto LABEL_22;
              }
            }
          }
          else
          {
            LODWORD(v25) = 0;
          }
          if (v25 == v23)
          {
            uint64_t v26 = (long long *)*((void *)&v109 + v22);
            unsigned int v27 = v23;
LABEL_22:
            uint64_t v30 = a1 + 24 * v27;
            long long v31 = *v26;
            *(void *)(v30 + 104) = *((void *)v26 + 2);
            *(_OWORD *)(v30 + 88) = v31;
            uint64_t v24 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v24;
          }
          else
          {
            uint64_t v24 = v23;
            LOBYTE(v23) = v25;
          }
          *(_DWORD *)(a1 + 648) |= 1 << v23;
          ++v22;
          uint64_t v23 = v24;
        }
        while (v22 != v18);
      }
    }
  }
  uint64_t v32 = *(void *)(a3 + 16);
  if (v32)
  {
    *(void *)(a1 + 16) = v32;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    unsigned int v33 = *(_DWORD *)(v32 + 2272);
    if (v33)
    {
      LODWORD(v34) = 0;
      uint64_t v35 = v32 + 2448;
      uint64_t v36 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v37 = __clz(__rbit32(v33));
        *((void *)&v109 + v34) = *(void *)(v35 + 8 * v37) + v36 + 32;
        uint64_t v34 = (v34 + 1);
        v33 &= ~(1 << v37);
      }
      while (v33);
      if (v34)
      {
        uint64_t v38 = 0;
        uint64_t v39 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v39)
          {
            uint64_t v41 = 0;
            int8x16_t v42 = (long long *)*((void *)&v109 + v38);
            unsigned int v43 = v39;
            int8x16_t v44 = (int *)(a1 + 104);
            while (1)
            {
              int v45 = *v44;
              v44 += 6;
              if (*((_DWORD *)v42 + 4) == v45) {
                break;
              }
              if (v39 == ++v41) {
                goto LABEL_39;
              }
            }
          }
          else
          {
            LODWORD(v41) = 0;
          }
          if (v41 == v39)
          {
            int8x16_t v42 = (long long *)*((void *)&v109 + v38);
            unsigned int v43 = v39;
LABEL_39:
            uint64_t v46 = a1 + 24 * v43;
            long long v47 = *v42;
            *(void *)(v46 + 104) = *((void *)v42 + 2);
            *(_OWORD *)(v46 + 88) = v47;
            uint64_t v40 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v40;
          }
          else
          {
            uint64_t v40 = v39;
            LOBYTE(v39) = v41;
          }
          *(_DWORD *)(a1 + 648) |= 1 << v39;
          ++v38;
          uint64_t v39 = v40;
        }
        while (v38 != v34);
      }
    }
  }
  uint64_t v48 = *(void *)(a3 + 24);
  if (v48)
  {
    *(void *)(a1 + 24) = v48;
    *(void *)&long long v112 = 0;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v109 = 0u;
    unsigned int v49 = *(_DWORD *)(v48 + 2272);
    if (v49)
    {
      LODWORD(v50) = 0;
      uint64_t v51 = v48 + 2448;
      uint64_t v52 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v53 = __clz(__rbit32(v49));
        *((void *)&v109 + v50) = *(void *)(v51 + 8 * v53) + v52 + 32;
        uint64_t v50 = (v50 + 1);
        v49 &= ~(1 << v53);
      }
      while (v49);
      if (v50)
      {
        uint64_t v54 = 0;
        uint64_t v55 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v55)
          {
            uint64_t v57 = 0;
            uint64_t v58 = (long long *)*((void *)&v109 + v54);
            unsigned int v59 = v55;
            uint64_t v60 = (int *)(a1 + 104);
            while (1)
            {
              int v61 = *v60;
              v60 += 6;
              if (*((_DWORD *)v58 + 4) == v61) {
                break;
              }
              if (v55 == ++v57) {
                goto LABEL_56;
              }
            }
          }
          else
          {
            LODWORD(v57) = 0;
          }
          if (v57 == v55)
          {
            uint64_t v58 = (long long *)*((void *)&v109 + v54);
            unsigned int v59 = v55;
LABEL_56:
            uint64_t v62 = a1 + 24 * v59;
            long long v63 = *v58;
            *(void *)(v62 + 104) = *((void *)v58 + 2);
            *(_OWORD *)(v62 + 88) = v63;
            uint64_t v56 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v56;
          }
          else
          {
            uint64_t v56 = v55;
            LOBYTE(v55) = v57;
          }
          *(_DWORD *)(a1 + 652) |= 1 << v55;
          ++v54;
          uint64_t v55 = v56;
        }
        while (v54 != v50);
      }
    }
  }
  uint64_t v64 = *(void *)(a3 + 32);
  if (v64)
  {
    *(void *)(a1 + 32) = v64;
    uint64_t v65 = v64 + 3384;
    *(void *)&long long v112 = 0;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v109 = 0u;
    unsigned int v66 = *(_DWORD *)(v64 + 2272);
    if (v66)
    {
      uint64_t v67 = v64 + 2448;
      uint64_t v68 = (int)*MEMORY[0x263F4B188];
      unsigned int v69 = -1;
      do
      {
        unsigned int v70 = v69++;
        unsigned int v71 = __clz(__rbit32(v66));
        *((void *)&v109 + v69) = *(void *)(v67 + 8 * v71) + v68 + 32;
        v66 &= ~(1 << v71);
      }
      while (v66);
      *((void *)&v109 + v70 + 2) = v65;
      int v72 = v69 + 2;
      if (v69 == -2) {
        goto LABEL_62;
      }
    }
    else
    {
      *(void *)&long long v109 = v64 + 3384;
      int v72 = 1;
    }
    uint64_t v99 = 0;
    uint64_t v100 = *(unsigned int *)(a1 + 640);
    do
    {
      if (v100)
      {
        uint64_t v102 = 0;
        uint64_t v103 = (long long *)*((void *)&v109 + v99);
        unsigned int v104 = v100;
        unint64_t v105 = (int *)(a1 + 104);
        while (1)
        {
          int v106 = *v105;
          v105 += 6;
          if (*((_DWORD *)v103 + 4) == v106) {
            break;
          }
          if (v100 == ++v102) {
            goto LABEL_102;
          }
        }
      }
      else
      {
        LODWORD(v102) = 0;
      }
      if (v102 == v100)
      {
        uint64_t v103 = (long long *)*((void *)&v109 + v99);
        unsigned int v104 = v100;
LABEL_102:
        uint64_t v107 = a1 + 24 * v104;
        long long v108 = *v103;
        *(void *)(v107 + 104) = *((void *)v103 + 2);
        *(_OWORD *)(v107 + 88) = v108;
        uint64_t v101 = (*(_DWORD *)(a1 + 640) + 1);
        *(_DWORD *)(a1 + 640) = v101;
      }
      else
      {
        uint64_t v101 = v100;
        LOBYTE(v100) = v102;
      }
      *(_DWORD *)(a1 + 656) |= 1 << v100;
      ++v99;
      uint64_t v100 = v101;
    }
    while (v99 != v72);
  }
LABEL_62:
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2400, a4 + ((uint64_t)(*(void *)(a3 + 2408) - *(void *)(a3 + 2400)) >> 4));
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>((void **)(a1 + 2400), *(void *)(a1 + 2408), *(void **)(a3 + 2400), *(void **)(a3 + 2408), (uint64_t)(*(void *)(a3 + 2408) - *(void *)(a3 + 2400)) >> 4);
  int8x16_t v73 = *(uint64_t **)(a1 + 2400);
  int8x16_t v74 = *(uint64_t **)(a1 + 2408);
  while (v73 != v74)
  {
    uint64_t v75 = *v73;
    v73 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v75);
  }
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2424, a4 + ((uint64_t)(*(void *)(a3 + 2432) - *(void *)(a3 + 2424)) >> 4));
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>((void **)(a1 + 2424), *(void *)(a1 + 2432), *(void **)(a3 + 2424), *(void **)(a3 + 2432), (uint64_t)(*(void *)(a3 + 2432) - *(void *)(a3 + 2424)) >> 4);
  int8x16_t v76 = *(uint64_t **)(a1 + 2424);
  int8x16_t v77 = *(uint64_t **)(a1 + 2432);
  while (v76 != v77)
  {
    uint64_t v78 = *v76;
    v76 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v78);
  }
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2448, a4 + ((uint64_t)(*(void *)(a3 + 2456) - *(void *)(a3 + 2448)) >> 4));
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>((void **)(a1 + 2448), *(void *)(a1 + 2456), *(void **)(a3 + 2448), *(void **)(a3 + 2456), (uint64_t)(*(void *)(a3 + 2456) - *(void *)(a3 + 2448)) >> 4);
  int64x2_t v79 = *(uint64_t **)(a1 + 2448);
  int32x2_t v80 = *(uint64_t **)(a1 + 2456);
  while (v79 != v80)
  {
    uint64_t v81 = *v79;
    v79 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v81);
  }
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2472, a4 + ((uint64_t)(*(void *)(a3 + 2480) - *(void *)(a3 + 2472)) >> 4));
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>((void **)(a1 + 2472), *(void *)(a1 + 2480), *(void **)(a3 + 2472), *(void **)(a3 + 2480), (uint64_t)(*(void *)(a3 + 2480) - *(void *)(a3 + 2472)) >> 4);
  unsigned int v82 = *(uint64_t **)(a1 + 2472);
  uint64_t v83 = *(uint64_t **)(a1 + 2480);
  while (v82 != v83)
  {
    uint64_t v84 = *v82;
    v82 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v84);
  }
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2496, a4 + ((uint64_t)(*(void *)(a3 + 2504) - *(void *)(a3 + 2496)) >> 4));
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>,std::__wrap_iter<std::shared_ptr<AGX::HAL200::DynamicLibrary> const*>>((void **)(a1 + 2496), *(void *)(a1 + 2504), *(void **)(a3 + 2496), *(void **)(a3 + 2504), (uint64_t)(*(void *)(a3 + 2504) - *(void *)(a3 + 2496)) >> 4);
  uint64_t v85 = *(uint64_t **)(a1 + 2496);
  uint64_t v86 = *(uint64_t **)(a1 + 2504);
  while (v85 != v86)
  {
    uint64_t v87 = *v85;
    v85 += 2;
    AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(v87);
  }
  if (a1 != a3)
  {
    *(_DWORD *)(a1 + 2552) = *(_DWORD *)(a3 + 2552);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>((void *)(a1 + 2520), *(uint64_t ***)(a3 + 2536));
    *(_DWORD *)(a1 + 2592) = *(_DWORD *)(a3 + 2592);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>((void *)(a1 + 2560), *(uint64_t ***)(a3 + 2576));
    *(_DWORD *)(a1 + 2632) = *(_DWORD *)(a3 + 2632);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>((void *)(a1 + 2600), *(uint64_t ***)(a3 + 2616));
    *(_DWORD *)(a1 + 2672) = *(_DWORD *)(a3 + 2672);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>((void *)(a1 + 2640), *(uint64_t ***)(a3 + 2656));
    *(_DWORD *)(a1 + 2712) = *(_DWORD *)(a3 + 2712);
    uint64_t v88 = *(uint64_t ***)(a3 + 2696);
    std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,void *> *>>((void *)(a1 + 2680), v88);
  }
}

uint64_t AGX::PipelineDylibResources<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,(AGX::ICBType)1>::incrementalLoad<AGX::HAL200::FragmentProgramVariant>(uint64_t **a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, void *a10)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  uint64_t v14 = *(void *)(*(void *)a6 + 32);
  uint64_t v13 = *(void *)(*(void *)a6 + 40);
  uint64_t v15 = [a4 count];
  unint64_t v186 = 4 * v15;
  uint64_t v16 = (v13 - v14) / 1304 + 4 * v15;
  unint64_t v17 = v16 + 1;
  if (v16 == -1)
  {
    uint64_t v18 = 0;
    std::string __p = 0;
  }
  else
  {
    if (v17 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    std::string __p = (char *)operator new(96 * v17);
    uint64_t v18 = &__p[96 * v17];
  }
  uint64_t v226 = 0;
  int v227 = 0;
  __n128 v228 = 0;
  unint64_t v19 = v17 + (((char *)a1[1] - (char *)*a1) >> 4);
  int8x16_t v189 = a1;
  unint64_t v193 = (v13 - v14) / 1304;
  uint64_t v185 = v15;
  uint64_t v196 = v14;
  uint64_t v198 = v13;
  uint64_t v200 = a8;
  if (v19)
  {
    if (v19 > 0x333333333333333) {
      abort();
    }
    uint64_t v20 = v18;
    unsigned int v21 = (char *)operator new(80 * v19);
    uint64_t v22 = &v21[80 * v19];
    uint64_t v226 = (uint64_t *)v21;
    int v227 = (uint64_t *)v21;
    __n128 v228 = v22;
    uint64_t v18 = v20;
  }
  else
  {
    uint64_t v22 = 0;
    unsigned int v21 = 0;
  }
  uint64_t v23 = a3 + 8;
  uint64_t v24 = a3 + 1208;
  long long v224 = *(_OWORD *)(a3 + 1208);
  uint64_t v225 = *(char **)(a3 + 1224);
  uint64_t v25 = *(void *)(a3 + 1464);
  uint64_t v26 = *(void *)(a3 + 1456);
  uint64_t v27 = *(void *)(a3 + 1472);
  uint64_t v28 = a3 + 2552;
  long long v222 = *(_OWORD *)(a3 + 2552);
  uint64_t v183 = a3;
  uint64_t v223 = *(void *)(a3 + 2568);
  if (__p >= v18)
  {
    unint64_t v30 = 0x5555555555555556 * ((v18 - __p) >> 5);
    if (v30 <= 1) {
      unint64_t v30 = 1;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((v18 - __p) >> 5) >= 0x155555555555555) {
      unint64_t v31 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v32 = (char *)operator new(96 * v31);
    uint64_t v190 = v23;
    *(void *)uint64_t v32 = v23;
    unsigned int v33 = &v32[96 * v31];
    *(_OWORD *)(v32 + 8) = *(_OWORD *)v24;
    *((void *)v32 + 3) = *(void *)(v24 + 16);
    *((void *)v32 + 4) = v26;
    *((void *)v32 + 5) = v25;
    *((void *)v32 + 6) = v27;
    *(_OWORD *)(v32 + 56) = *(_OWORD *)v28;
    *((void *)v32 + 9) = *(void *)(v28 + 16);
    *((void *)v32 + 10) = a7;
    int v29 = v32 + 96;
    *((void *)v32 + 11) = v200;
    if (__p) {
      operator delete(__p);
    }
    std::string __p = v32;
    uint64_t v18 = v33;
    uint64_t v23 = v190;
  }
  else
  {
    *(void *)std::string __p = v23;
    *(_OWORD *)(__p + 8) = *(_OWORD *)v24;
    *((void *)__p + 3) = *(void *)(a3 + 1224);
    *((void *)__p + 4) = v26;
    *((void *)__p + 5) = v25;
    *((void *)__p + 6) = v27;
    *(_OWORD *)(__p + 56) = *(_OWORD *)v28;
    *((void *)__p + 9) = *(void *)(a3 + 2568);
    *((void *)__p + 10) = a7;
    int v29 = __p + 96;
    *((void *)__p + 11) = v200;
  }
  if (v21 >= v22)
  {
    unint64_t v35 = 0x999999999999999ALL * ((v22 - v21) >> 4);
    if (v35 <= 1) {
      unint64_t v35 = 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 4) >= 0x199999999999999) {
      unint64_t v36 = 0x333333333333333;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v37 = v18;
    uint64_t v38 = (char *)operator new(80 * v36);
    *(void *)uint64_t v38 = v23;
    *(_OWORD *)(v38 + 8) = v224;
    *((void *)v38 + 3) = v225;
    *((void *)v38 + 4) = v26;
    *((void *)v38 + 5) = v25;
    *((void *)v38 + 6) = v27;
    *(_OWORD *)(v38 + 56) = v222;
    *((void *)v38 + 9) = v223;
    uint64_t v34 = (uint64_t *)(v38 + 80);
    uint64_t v226 = (uint64_t *)v38;
    __n128 v228 = &v38[80 * v36];
    if (v21) {
      operator delete(v21);
    }
    uint64_t v18 = v37;
  }
  else
  {
    *(void *)unsigned int v21 = v23;
    *(_OWORD *)(v21 + 8) = v224;
    *((void *)v21 + 3) = v225;
    *((void *)v21 + 4) = v26;
    *((void *)v21 + 5) = v25;
    *((void *)v21 + 6) = v27;
    *(_OWORD *)(v21 + 56) = v222;
    uint64_t v34 = (uint64_t *)(v21 + 80);
    *((void *)v21 + 9) = v223;
  }
  int v227 = v34;
  if (v198 != v196)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v193;
    if (v193 <= 1) {
      uint64_t v40 = 1;
    }
    uint64_t v191 = v40;
    do
    {
      uint64_t v41 = 0;
      uint64_t v197 = v39;
      uint64_t v42 = 1304 * v39;
      uint64_t v199 = *(void *)(*(void *)a6 + 32) + v42 + 112;
      uint64_t v201 = *(void *)(*(void *)a5 + 32) + v42 + 112;
      do
      {
        int v45 = (uint64_t *)(v201 + 296 * v41);
        uint64_t v46 = *v45;
        if (*v45)
        {
          uint64_t v47 = v46 + 8;
          long long v224 = *(_OWORD *)(v46 + 1160);
          uint64_t v225 = *(char **)(v46 + 1176);
          uint64_t v48 = *(void *)(v46 + 1416);
          uint64_t v49 = *(void *)(v46 + 1408);
          uint64_t v50 = *(void *)(v46 + 1424);
          long long v222 = *(_OWORD *)(v46 + 2496);
          uint64_t v223 = *(void *)(v46 + 2512);
          long long v220 = *(_OWORD *)(v46 + 1160);
          uint64_t v221 = *(void *)(v46 + 1176);
          uint64_t v51 = v45 + 1;
          long long v218 = *(_OWORD *)(v46 + 2496);
          uint64_t v52 = v199 + 296 * v41 + 8;
          uint64_t v219 = *(void *)(v46 + 2512);
          if (v29 >= v18)
          {
            unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v29 - __p) >> 5) + 1;
            if (v54 > 0x2AAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v18 - __p) >> 5) > v54) {
              unint64_t v54 = 0x5555555555555556 * ((v18 - __p) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v18 - __p) >> 5) >= 0x155555555555555) {
              unint64_t v55 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v55 = v54;
            }
            if (v55)
            {
              if (v55 > 0x2AAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v56 = v46 + 8;
              uint64_t v57 = v49;
              uint64_t v58 = v48;
              uint64_t v59 = v50;
              unint64_t v60 = v55;
              int v61 = (char *)operator new(96 * v55);
              uint64_t v50 = v59;
              uint64_t v48 = v58;
              uint64_t v49 = v57;
              uint64_t v47 = v56;
              uint64_t v52 = v199 + 296 * v41 + 8;
              unint64_t v55 = v60;
            }
            else
            {
              int v61 = 0;
            }
            uint64_t v62 = &v61[32 * ((v29 - __p) >> 5)];
            *(void *)uint64_t v62 = v47;
            *(_OWORD *)(v62 + 8) = v220;
            *((void *)v62 + 3) = v221;
            *((void *)v62 + 4) = v49;
            *((void *)v62 + 5) = v48;
            *((void *)v62 + 6) = v50;
            *(_OWORD *)(v62 + 56) = v218;
            *((void *)v62 + 9) = v219;
            *((void *)v62 + 10) = v51;
            *((void *)v62 + 11) = v52;
            if (v29 == __p)
            {
              uint64_t v65 = &v61[32 * ((v29 - __p) >> 5)];
              uint64_t v64 = __p;
            }
            else
            {
              long long v63 = &v61[32 * ((v29 - __p) >> 5)];
              uint64_t v64 = __p;
              do
              {
                uint64_t v65 = v63 - 96;
                long long v66 = *((_OWORD *)v29 - 5);
                *((_OWORD *)v63 - 6) = *((_OWORD *)v29 - 6);
                *((_OWORD *)v63 - 5) = v66;
                long long v67 = *((_OWORD *)v29 - 4);
                long long v68 = *((_OWORD *)v29 - 3);
                long long v69 = *((_OWORD *)v29 - 1);
                *((_OWORD *)v63 - 2) = *((_OWORD *)v29 - 2);
                *((_OWORD *)v63 - 1) = v69;
                *((_OWORD *)v63 - 4) = v67;
                *((_OWORD *)v63 - 3) = v68;
                v29 -= 96;
                v63 -= 96;
              }
              while (v29 != __p);
            }
            uint64_t v18 = &v61[96 * v55];
            int v29 = v62 + 96;
            if (v64)
            {
              unsigned int v70 = v18;
              uint64_t v71 = v50;
              operator delete(v64);
              uint64_t v50 = v71;
              uint64_t v18 = v70;
            }
            std::string __p = v65;
          }
          else
          {
            *(void *)int v29 = v47;
            uint64_t v53 = v221;
            *(_OWORD *)(v29 + 8) = v220;
            *((void *)v29 + 3) = v53;
            *((void *)v29 + 4) = v49;
            *((void *)v29 + 5) = v48;
            *((void *)v29 + 6) = v50;
            *(_OWORD *)(v29 + 56) = v218;
            *((void *)v29 + 9) = v219;
            *((void *)v29 + 10) = v51;
            *((void *)v29 + 11) = v52;
            v29 += 96;
            uint64_t v34 = v227;
          }
          if (v34 < (uint64_t *)v228)
          {
            *uint64_t v34 = v47;
            unsigned int v43 = v225;
            *(_OWORD *)(v34 + 1) = v224;
            v34[3] = (uint64_t)v43;
            v34[4] = v49;
            v34[5] = v48;
            v34[6] = v50;
            *(_OWORD *)(v34 + 7) = v222;
            v34[9] = v223;
            int8x16_t v44 = v34 + 10;
          }
          else
          {
            int v72 = v226;
            unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v34 - (char *)v226) >> 4) + 1;
            if (v73 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((v228 - (char *)v226) >> 4) > v73) {
              unint64_t v73 = 0x999999999999999ALL * ((v228 - (char *)v226) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v228 - (char *)v226) >> 4) >= 0x199999999999999) {
              unint64_t v74 = 0x333333333333333;
            }
            else {
              unint64_t v74 = v73;
            }
            uint64_t v205 = v18;
            if (v74)
            {
              if (v74 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v75 = v47;
              uint64_t v76 = v49;
              uint64_t v77 = v48;
              uint64_t v78 = v50;
              int64x2_t v79 = (char *)operator new(80 * v74);
              uint64_t v50 = v78;
              uint64_t v48 = v77;
              uint64_t v49 = v76;
              uint64_t v47 = v75;
            }
            else
            {
              int64x2_t v79 = 0;
            }
            int32x2_t v80 = &v79[16 * (((char *)v34 - (char *)v226) >> 4)];
            *(void *)int32x2_t v80 = v47;
            *(_OWORD *)(v80 + 8) = v224;
            *((void *)v80 + 3) = v225;
            *((void *)v80 + 4) = v49;
            *((void *)v80 + 5) = v48;
            *((void *)v80 + 6) = v50;
            *(_OWORD *)(v80 + 56) = v222;
            *((void *)v80 + 9) = v223;
            uint64_t v81 = (uint64_t *)&v79[16 * (((char *)v34 - (char *)v72) >> 4)];
            if (v34 != v72)
            {
              do
              {
                *((_OWORD *)v81 - 5) = *((_OWORD *)v34 - 5);
                long long v82 = *((_OWORD *)v34 - 4);
                long long v83 = *((_OWORD *)v34 - 3);
                long long v84 = *((_OWORD *)v34 - 1);
                *((_OWORD *)v81 - 2) = *((_OWORD *)v34 - 2);
                *((_OWORD *)v81 - 1) = v84;
                *((_OWORD *)v81 - 4) = v82;
                *((_OWORD *)v81 - 3) = v83;
                v81 -= 10;
                v34 -= 10;
              }
              while (v34 != v72);
              uint64_t v34 = v72;
            }
            int8x16_t v44 = (uint64_t *)(v80 + 80);
            uint64_t v226 = v81;
            __n128 v228 = &v79[80 * v74];
            if (v34) {
              operator delete(v34);
            }
            uint64_t v18 = v205;
          }
          int v227 = v44;
          uint64_t v34 = v44;
        }
        ++v41;
      }
      while (v41 != 4);
      uint64_t v39 = v197 + 1;
    }
    while (v197 + 1 != v191);
  }
  uint64_t v85 = *v189;
  uint64_t v86 = v189[1];
  uint64_t v87 = v18;
  if (*v189 != v86)
  {
    while (1)
    {
      uint64_t v88 = *v85;
      uint64_t v89 = (std::__shared_weak_count *)v85[1];
      *(void *)&long long v218 = *v85;
      *((void *)&v218 + 1) = v89;
      if (v89) {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v90 = v88 + 96;
      long long v224 = *(_OWORD *)(v88 + 680);
      uint64_t v225 = *(char **)(v88 + 696);
      long long v222 = *(_OWORD *)(v88 + 768);
      uint64_t v223 = *(void *)(v88 + 784);
      long long v220 = *(_OWORD *)(v88 + 944);
      uint64_t v221 = *(void *)(v88 + 960);
      uint64_t v91 = v227;
      if (v227 >= (uint64_t *)v228) {
        break;
      }
      *int v227 = v90;
      *(_OWORD *)(v91 + 1) = v224;
      v91[3] = (uint64_t)v225;
      *((_OWORD *)v91 + 2) = v222;
      v91[6] = v223;
      *(_OWORD *)(v91 + 7) = v220;
      v91[9] = v221;
      int v227 = v91 + 10;
      if (v89) {
        goto LABEL_102;
      }
LABEL_80:
      v85 += 2;
      if (v85 == v86) {
        goto LABEL_104;
      }
    }
    uint64_t v92 = v226;
    unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v227 - (char *)v226) >> 4);
    unint64_t v94 = v93 + 1;
    if (v93 + 1 > 0x333333333333333) {
      abort();
    }
    if (0x999999999999999ALL * ((v228 - (char *)v226) >> 4) > v94) {
      unint64_t v94 = 0x999999999999999ALL * ((v228 - (char *)v226) >> 4);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v228 - (char *)v226) >> 4) >= 0x199999999999999) {
      unint64_t v95 = 0x333333333333333;
    }
    else {
      unint64_t v95 = v94;
    }
    if (v95)
    {
      if (v95 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v96 = (char *)operator new(80 * v95);
    }
    else
    {
      int v96 = 0;
    }
    uint64_t v97 = &v96[16 * (((char *)v227 - (char *)v226) >> 4)];
    *(void *)uint64_t v97 = v90;
    *(_OWORD *)(v97 + 8) = v224;
    *((void *)v97 + 3) = v225;
    *((_OWORD *)v97 + 2) = v222;
    *((void *)v97 + 6) = v223;
    *(_OWORD *)(v97 + 56) = v220;
    *((void *)v97 + 9) = v221;
    long long v98 = (uint64_t *)&v96[80 * v93];
    if (v91 != v92)
    {
      do
      {
        *((_OWORD *)v98 - 5) = *((_OWORD *)v91 - 5);
        long long v99 = *((_OWORD *)v91 - 4);
        long long v100 = *((_OWORD *)v91 - 3);
        long long v101 = *((_OWORD *)v91 - 1);
        *((_OWORD *)v98 - 2) = *((_OWORD *)v91 - 2);
        *((_OWORD *)v98 - 1) = v101;
        *((_OWORD *)v98 - 4) = v99;
        *((_OWORD *)v98 - 3) = v100;
        v98 -= 10;
        v91 -= 10;
      }
      while (v91 != v92);
      uint64_t v91 = v92;
    }
    uint64_t v102 = (uint64_t *)(v97 + 80);
    uint64_t v226 = v98;
    __n128 v228 = &v96[80 * v95];
    if (v91) {
      operator delete(v91);
    }
    uint64_t v18 = v87;
    int v227 = v102;
    if (!v89) {
      goto LABEL_80;
    }
LABEL_102:
    if (!atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
      uint64_t v18 = v87;
    }
    goto LABEL_80;
  }
LABEL_104:
  long long v224 = 0uLL;
  uint64_t v225 = 0;
  if (v186)
  {
    if (v186 > 0x333333333333333) {
      abort();
    }
    uint64_t v103 = (char *)operator new(320 * v185);
    *(void *)&long long v224 = v103;
    *((void *)&v224 + 1) = v103;
    uint64_t v225 = &v103[80 * v186];
    uint64_t v18 = v87;
  }
  else
  {
    uint64_t v103 = 0;
  }
  uint64_t v104 = *(void *)(*(void *)a5 + 32);
  if (v193 < 0x1F693A1C451AB30BLL * ((*(void *)(*(void *)a5 + 40) - v104) >> 3))
  {
    unint64_t v105 = v193;
    do
    {
      uint64_t v106 = 0;
      unint64_t v194 = v105;
      uint64_t v202 = v104 + 1304 * v105 + 112;
      do
      {
        long long v109 = (uint64_t *)(v202 + 296 * v106);
        uint64_t v110 = *v109;
        if (*v109)
        {
          uint64_t v111 = v110 + 8;
          long long v222 = *(_OWORD *)(v110 + 1160);
          uint64_t v223 = *(void *)(v110 + 1176);
          uint64_t v112 = *(void *)(v110 + 1416);
          uint64_t v113 = *(void *)(v110 + 1408);
          uint64_t v114 = *(void *)(v110 + 1424);
          long long v220 = *(_OWORD *)(v110 + 2496);
          uint64_t v221 = *(void *)(v110 + 2512);
          long long v218 = *(_OWORD *)(v110 + 1160);
          uint64_t v219 = *(void *)(v110 + 1176);
          long long v216 = *(_OWORD *)(v110 + 2496);
          int32x2_t v115 = v109 + 1;
          uint64_t v217 = *(void *)(v110 + 2512);
          if (v29 >= v18)
          {
            unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((v29 - __p) >> 5) + 1;
            if (v117 > 0x2AAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v18 - __p) >> 5) > v117) {
              unint64_t v117 = 0x5555555555555556 * ((v18 - __p) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v18 - __p) >> 5) >= 0x155555555555555) {
              unint64_t v118 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v118)
            {
              if (v118 > 0x2AAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v119 = v114;
              uint64_t v120 = (char *)operator new(96 * v118);
              uint64_t v114 = v119;
            }
            else
            {
              uint64_t v120 = 0;
            }
            uint64_t v121 = &v120[32 * ((v29 - __p) >> 5)];
            *(void *)uint64_t v121 = v111;
            *(_OWORD *)(v121 + 8) = v218;
            *((void *)v121 + 3) = v219;
            *((void *)v121 + 4) = v113;
            *((void *)v121 + 5) = v112;
            *((void *)v121 + 6) = v114;
            *(_OWORD *)(v121 + 56) = v216;
            *((void *)v121 + 9) = v217;
            *((void *)v121 + 10) = v115;
            *((void *)v121 + 11) = v115;
            if (v29 == __p)
            {
              uint64_t v124 = &v120[32 * ((v29 - __p) >> 5)];
              double v123 = __p;
            }
            else
            {
              int8x8_t v122 = &v120[32 * ((v29 - __p) >> 5)];
              double v123 = __p;
              do
              {
                uint64_t v124 = v122 - 96;
                long long v125 = *((_OWORD *)v29 - 5);
                *((_OWORD *)v122 - 6) = *((_OWORD *)v29 - 6);
                *((_OWORD *)v122 - 5) = v125;
                long long v126 = *((_OWORD *)v29 - 4);
                long long v127 = *((_OWORD *)v29 - 3);
                long long v128 = *((_OWORD *)v29 - 1);
                *((_OWORD *)v122 - 2) = *((_OWORD *)v29 - 2);
                *((_OWORD *)v122 - 1) = v128;
                *((_OWORD *)v122 - 4) = v126;
                *((_OWORD *)v122 - 3) = v127;
                v29 -= 96;
                v122 -= 96;
              }
              while (v29 != __p);
            }
            uint64_t v18 = &v120[96 * v118];
            int v29 = v121 + 96;
            if (v123)
            {
              int v129 = &v120[96 * v118];
              uint64_t v130 = v114;
              operator delete(v123);
              uint64_t v114 = v130;
              uint64_t v18 = v129;
            }
            std::string __p = v124;
          }
          else
          {
            *(void *)int v29 = v111;
            uint64_t v116 = v219;
            *(_OWORD *)(v29 + 8) = v218;
            *((void *)v29 + 3) = v116;
            *((void *)v29 + 4) = v113;
            *((void *)v29 + 5) = v112;
            *((void *)v29 + 6) = v114;
            *(_OWORD *)(v29 + 56) = v216;
            *((void *)v29 + 9) = v217;
            *((void *)v29 + 10) = v115;
            *((void *)v29 + 11) = v115;
            v29 += 96;
            uint64_t v103 = (char *)*((void *)&v224 + 1);
          }
          if (v103 < v225)
          {
            *(void *)uint64_t v103 = v111;
            uint64_t v107 = v223;
            *(_OWORD *)(v103 + 8) = v222;
            *((void *)v103 + 3) = v107;
            *((void *)v103 + 4) = v113;
            *((void *)v103 + 5) = v112;
            *((void *)v103 + 6) = v114;
            *(_OWORD *)(v103 + 56) = v220;
            *((void *)v103 + 9) = v221;
            long long v108 = v103 + 80;
          }
          else
          {
            int v131 = (char *)v224;
            unint64_t v132 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v103[-v224] >> 4);
            unint64_t v133 = v132 + 1;
            if (v132 + 1 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((uint64_t)&v225[-v224] >> 4) > v133) {
              unint64_t v133 = 0x999999999999999ALL * ((uint64_t)&v225[-v224] >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v225[-v224] >> 4) >= 0x199999999999999) {
              unint64_t v134 = 0x333333333333333;
            }
            else {
              unint64_t v134 = v133;
            }
            float v206 = v18;
            if (v134)
            {
              if (v134 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v135 = v111;
              uint64_t v136 = v113;
              uint64_t v137 = v112;
              uint64_t v138 = v114;
              int8x16_t v139 = (char *)operator new(80 * v134);
              uint64_t v114 = v138;
              uint64_t v112 = v137;
              uint64_t v113 = v136;
              uint64_t v111 = v135;
            }
            else
            {
              int8x16_t v139 = 0;
            }
            int8x16_t v140 = &v139[16 * ((uint64_t)&v103[-v224] >> 4)];
            *(void *)int8x16_t v140 = v111;
            *(_OWORD *)(v140 + 8) = v222;
            *((void *)v140 + 3) = v223;
            *((void *)v140 + 4) = v113;
            *((void *)v140 + 5) = v112;
            *((void *)v140 + 6) = v114;
            *(_OWORD *)(v140 + 56) = v220;
            *((void *)v140 + 9) = v221;
            int8x16_t v141 = &v139[80 * v132];
            if (v103 != v131)
            {
              do
              {
                *((_OWORD *)v141 - 5) = *((_OWORD *)v103 - 5);
                long long v142 = *((_OWORD *)v103 - 4);
                long long v143 = *((_OWORD *)v103 - 3);
                long long v144 = *((_OWORD *)v103 - 1);
                *((_OWORD *)v141 - 2) = *((_OWORD *)v103 - 2);
                *((_OWORD *)v141 - 1) = v144;
                *((_OWORD *)v141 - 4) = v142;
                *((_OWORD *)v141 - 3) = v143;
                v141 -= 80;
                v103 -= 80;
              }
              while (v103 != v131);
              uint64_t v103 = v131;
            }
            long long v108 = v140 + 80;
            *(void *)&long long v224 = v141;
            uint64_t v225 = &v139[80 * v134];
            if (v103) {
              operator delete(v103);
            }
            uint64_t v18 = v206;
          }
          *((void *)&v224 + 1) = v108;
          uint64_t v103 = v108;
        }
        ++v106;
      }
      while (v106 != 4);
      unint64_t v105 = v194 + 1;
      uint64_t v104 = *(void *)(*(void *)a5 + 32);
    }
    while (v194 + 1 < 0x1F693A1C451AB30BLL * ((*(void *)(*(void *)a5 + 40) - v104) >> 3));
  }
  long long v214 = 0u;
  long long v215 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  uint64_t v145 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v212, v229, 16, v183);
  if (v145)
  {
    uint64_t v207 = *(void *)v213;
    while (2)
    {
      uint64_t v146 = 0;
      uint64_t v203 = v145;
      do
      {
        if (*(void *)v213 != v207) {
          objc_enumerationMutation(a4);
        }
        int32x2_t v147 = *(void **)(*((void *)&v212 + 1) + 8 * v146);
        if (([a2 requiresRaytracingEmulation] & 1) != 0 || objc_msgSend(v147, "functionType") != 6)
        {
          if (![v147 vendorPrivate]
            || ([v147 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
            || (uint64_t v148 = [v147 vendorPrivate], (v149 = (uint64_t *)v148) == 0))
          {
            uint64_t v181 = 0;
            goto LABEL_217;
          }
          unint64_t v150 = *(void *)(v148 + 56);
          uint64_t v151 = (__n128 *)v189[1];
          if (v151 >= (__n128 *)v189[2])
          {
            int v153 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>((uint64_t)v189, *(__n128 *)(v148 + 56));
          }
          else
          {
            v151->n128_u64[0] = v150;
            unint64_t v152 = *(void *)(v148 + 64);
            v151->n128_u64[1] = v152;
            if (v152) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v152 + 8), 1uLL, memory_order_relaxed);
            }
            int v153 = v151 + 1;
          }
          uint64_t v154 = v150 + 96;
          v189[1] = (uint64_t *)v153;
          uint64_t v155 = v149[7];
          uint64_t v223 = *(void *)(v155 + 696);
          long long v222 = *(_OWORD *)(v155 + 680);
          long long v220 = *(_OWORD *)(v155 + 768);
          uint64_t v221 = *(void *)(v155 + 784);
          long long v218 = *(_OWORD *)(v155 + 944);
          uint64_t v219 = *(void *)(v155 + 960);
          if (v103 >= v225)
          {
            int v157 = (char *)v224;
            unint64_t v158 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v103[-v224] >> 4);
            unint64_t v159 = v158 + 1;
            if (v158 + 1 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((uint64_t)&v225[-v224] >> 4) > v159) {
              unint64_t v159 = 0x999999999999999ALL * ((uint64_t)&v225[-v224] >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v225[-v224] >> 4) >= 0x199999999999999) {
              unint64_t v160 = 0x333333333333333;
            }
            else {
              unint64_t v160 = v159;
            }
            if (v160)
            {
              if (v160 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v161 = (char *)operator new(80 * v160);
            }
            else
            {
              uint64_t v161 = 0;
            }
            int v162 = &v161[80 * v158];
            *(void *)int v162 = v154;
            *(_OWORD *)(v162 + 8) = v222;
            *((void *)v162 + 3) = v223;
            *((_OWORD *)v162 + 2) = v220;
            *((void *)v162 + 6) = v221;
            *(_OWORD *)(v162 + 56) = v218;
            *((void *)v162 + 9) = v219;
            if (v103 == v157)
            {
              int v157 = v103;
              uint64_t v163 = &v161[80 * v158];
            }
            else
            {
              uint64_t v163 = &v161[80 * v158];
              do
              {
                *((_OWORD *)v163 - 5) = *((_OWORD *)v103 - 5);
                long long v164 = *((_OWORD *)v103 - 4);
                long long v165 = *((_OWORD *)v103 - 3);
                long long v166 = *((_OWORD *)v103 - 1);
                *((_OWORD *)v163 - 2) = *((_OWORD *)v103 - 2);
                *((_OWORD *)v163 - 1) = v166;
                *((_OWORD *)v163 - 4) = v164;
                *((_OWORD *)v163 - 3) = v165;
                v163 -= 80;
                v103 -= 80;
              }
              while (v103 != v157);
            }
            uint64_t v103 = v162 + 80;
            *(void *)&long long v224 = v163;
            *((void *)&v224 + 1) = v162 + 80;
            uint64_t v225 = &v161[80 * v160];
            if (v157) {
              operator delete(v157);
            }
          }
          else
          {
            *(void *)uint64_t v103 = v154;
            long long v156 = v222;
            *((void *)v103 + 3) = v223;
            *(_OWORD *)(v103 + 8) = v156;
            *((_OWORD *)v103 + 2) = v220;
            *((void *)v103 + 6) = v221;
            *(_OWORD *)(v103 + 56) = v218;
            *((void *)v103 + 9) = v219;
            v103 += 80;
          }
          *((void *)&v224 + 1) = v103;
          uint64_t v167 = v149[7];
          uint64_t v223 = *(void *)(v167 + 696);
          long long v222 = *(_OWORD *)(v167 + 680);
          long long v220 = *(_OWORD *)(v167 + 768);
          uint64_t v221 = *(void *)(v167 + 784);
          long long v218 = *(_OWORD *)(v167 + 944);
          uint64_t v219 = *(void *)(v167 + 960);
          unint64_t v168 = v227;
          if (v227 >= (uint64_t *)v228)
          {
            uint64_t v169 = v226;
            unint64_t v170 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v227 - (char *)v226) >> 4) + 1;
            if (v170 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((v228 - (char *)v226) >> 4) > v170) {
              unint64_t v170 = 0x999999999999999ALL * ((v228 - (char *)v226) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v228 - (char *)v226) >> 4) >= 0x199999999999999) {
              unint64_t v171 = 0x333333333333333;
            }
            else {
              unint64_t v171 = v170;
            }
            if (v171)
            {
              if (v171 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v172 = (char *)operator new(80 * v171);
            }
            else
            {
              uint64_t v172 = 0;
            }
            uint64_t v173 = &v172[16 * (((char *)v168 - (char *)v169) >> 4)];
            *(void *)uint64_t v173 = v154;
            *(_OWORD *)(v173 + 8) = v222;
            *((void *)v173 + 3) = v223;
            *((_OWORD *)v173 + 2) = v220;
            *((void *)v173 + 6) = v221;
            *(_OWORD *)(v173 + 56) = v218;
            *((void *)v173 + 9) = v219;
            int v174 = (uint64_t *)v173;
            if (v168 == v169)
            {
              uint64_t v145 = v203;
            }
            else
            {
              uint64_t v145 = v203;
              do
              {
                *((_OWORD *)v174 - 5) = *((_OWORD *)v168 - 5);
                long long v175 = *((_OWORD *)v168 - 4);
                long long v176 = *((_OWORD *)v168 - 3);
                long long v177 = *((_OWORD *)v168 - 1);
                *((_OWORD *)v174 - 2) = *((_OWORD *)v168 - 2);
                *((_OWORD *)v174 - 1) = v177;
                *((_OWORD *)v174 - 4) = v175;
                *((_OWORD *)v174 - 3) = v176;
                v174 -= 10;
                v168 -= 10;
              }
              while (v168 != v169);
              unint64_t v168 = v169;
            }
            uint64_t v226 = v174;
            __n128 v228 = &v172[80 * v171];
            if (v168) {
              operator delete(v168);
            }
            unint64_t v168 = (uint64_t *)v173;
          }
          else
          {
            *int v227 = v154;
            *(_OWORD *)(v168 + 1) = v222;
            v168[3] = v223;
            *((_OWORD *)v168 + 2) = v220;
            v168[6] = v221;
            *(_OWORD *)(v168 + 7) = v218;
            v168[9] = v219;
            uint64_t v145 = v203;
          }
          int v227 = v168 + 10;
          AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(v149[7], (void *)[v149 relocations]);
        }
        ++v146;
      }
      while (v146 != v145);
      uint64_t v145 = [a4 countByEnumeratingWithState:&v212 objects:v229 count:16];
      if (v145) {
        continue;
      }
      break;
    }
  }
  int v209 = 0;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  uint64_t v178 = v29 - __p;
  if (v29 == __p)
  {
    int v179 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v178 >> 5) > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    int v179 = (char *)operator new(v29 - __p);
    int v209 = v179;
    uint64_t v211 = &v179[32 * (v178 >> 5)];
    size_t v180 = 96 * ((v178 - 96) / 0x60uLL) + 96;
    memcpy(v179, __p, v180);
    uint64_t v210 = &v179[v180];
  }
  uint64_t v181 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a2, &v226, (uint64_t **)&v224, (size_t *)&v209, *(_DWORD *)(v184 + 1036), 0, a10, a9);
  if (v179)
  {
    uint64_t v210 = v179;
    operator delete(v179);
  }
LABEL_217:
  if ((void)v224) {
    operator delete((void *)v224);
  }
  if (v226) {
    operator delete(v226);
  }
  if (__p) {
    operator delete(__p);
  }
  return v181;
}

void sub_242B75DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v52 = *(void **)(v51 - 256);
    if (v52)
    {
LABEL_7:
      operator delete(v52);
      uint64_t v53 = a23;
      if (a23)
      {
LABEL_8:
        operator delete(v53);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v52 = *(void **)(v51 - 256);
    if (v52) {
      goto LABEL_7;
    }
  }
  uint64_t v53 = a23;
  if (a23) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

double AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::computeMaximumRayPayloadSizes(unsigned int *a1)
{
  uint64_t v1 = 0;
  do
  {
    uint64_t v49 = v1;
    uint64_t v2 = *(void *)&a1[4 * v1 + 728];
    if (v2)
    {
      uint64_t v3 = *(unsigned int **)(v2 + 32);
      unint64_t v55 = *(int **)(v2 + 40);
      if (v3 != (unsigned int *)v55)
      {
        uint64_t v4 = &a1[72 * v1];
        uint64_t v51 = v4 + 268;
        uint64_t v52 = v4 + 265;
        uint64_t v50 = v4 + 278;
        uint64_t v53 = (unint64_t *)(v4 + 266);
        unint64_t v54 = (int *)(v4 + 264);
        do
        {
          for (uint64_t i = 0; i != 296; i += 74)
          {
            uint64_t v8 = *(std::__shared_weak_count **)&v3[i + 32];
            if (v8) {
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v9 = *(std::__shared_weak_count **)&v3[i + 36];
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v10 = (int *)&v3[i];
            uint64_t v11 = *(std::__shared_weak_count **)&v3[i + 40];
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v12 = v10[54];
            unint64_t v13 = *((void *)v10 + 28);
            unsigned int v14 = v3[1];
            if (*v3 > v12) {
              unsigned int v12 = *v3;
            }
            *uint64_t v3 = v12;
            unint64_t v15 = *((void *)v3 + 1);
            uint64_t v16 = v15 & 0xFF000000;
            int v17 = BYTE2(v15);
            if (BYTE2(v15) <= BYTE2(v13)) {
              int v17 = BYTE2(v13);
            }
            unsigned int v18 = (unsigned __int16)*((void *)v3 + 1);
            if (v18 <= (unsigned __int16)v13) {
              unsigned int v18 = (unsigned __int16)v13;
            }
            if (v18 < v14) {
              unsigned int v14 = v18;
            }
            uint64_t v19 = v14 | (v17 << 16);
            __int16 v20 = WORD2(*((void *)v3 + 1));
            if (WORD2(v15) <= WORD2(v13)) {
              __int16 v20 = WORD2(v13);
            }
            uint64_t v21 = (unsigned __int16)(-(__int16)v12 & (v12 + v20 - 1));
            unint64_t v22 = HIWORD(v13);
            if (HIWORD(v15) <= v22) {
              unint64_t v22 = v22;
            }
            else {
              unint64_t v22 = HIWORD(v15);
            }
            uint64_t v23 = v19 | (v21 << 32) | (v22 << 48);
            *((void *)v3 + 1) = v23 | v16;
            if ((v23 | v16) != v15)
            {
              int SectionEnd = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)(v3 + 2), 4);
              unint64_t v25 = v23 & 0xFFFFFFFF00FFFFFFLL;
              uint64_t v56 = v25 | 0x1000000;
              int v26 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)&v56, 10);
              unsigned int v27 = (16773120 - SectionEnd) / (v26 - SectionEnd);
              LODWORD(v28) = v27 << 24;
              if (v27 >= 0x20) {
                uint64_t v28 = v28;
              }
              else {
                uint64_t v28 = 0;
              }
              if (v27 <= 0x5F) {
                uint64_t v29 = v28;
              }
              else {
                uint64_t v29 = 1610612736;
              }
              if (v26 == SectionEnd) {
                uint64_t v29 = 1610612736;
              }
              *((void *)v3 + 1) = v25 | v29;
              *((_OWORD *)v3 + 1) = 0u;
              *((_OWORD *)v3 + 2) = 0u;
              *((void *)v3 + 6) = 0;
              *(void *)&long long v30 = -1;
              *((void *)&v30 + 1) = -1;
              *(_OWORD *)(v3 + 14) = v30;
              *(_OWORD *)(v3 + 18) = v30;
              *(_OWORD *)(v3 + 22) = v30;
            }
            if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
              if (!v9) {
                goto LABEL_46;
              }
            }
            else if (!v9)
            {
              goto LABEL_46;
            }
            if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
LABEL_46:
            if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          unsigned int v31 = *v54;
          if (*v54 <= *v3) {
            unsigned int v31 = *v3;
          }
          *unint64_t v54 = v31;
          unint64_t v32 = *((void *)v3 + 1);
          unsigned int v33 = *v52;
          unint64_t v34 = *v53;
          uint64_t v35 = *v53 & 0xFF000000;
          unsigned int v36 = BYTE2(*v53);
          if (v36 <= BYTE2(v32)) {
            unsigned int v36 = BYTE2(v32);
          }
          unsigned int v37 = (unsigned __int16)*v53;
          if (v37 <= (unsigned __int16)*((void *)v3 + 1)) {
            unsigned int v37 = (unsigned __int16)*((void *)v3 + 1);
          }
          if (v37 < v33) {
            unsigned int v33 = v37;
          }
          uint64_t v38 = v33 | (v36 << 16);
          __int16 v39 = WORD2(*v53);
          if (WORD2(v34) <= WORD2(v32)) {
            __int16 v39 = WORD2(*((void *)v3 + 1));
          }
          uint64_t v40 = (unsigned __int16)(-(__int16)v31 & (v31 + v39 - 1));
          unint64_t v41 = HIWORD(v32);
          if (HIWORD(v34) <= v41) {
            unint64_t v41 = v41;
          }
          else {
            unint64_t v41 = HIWORD(v34);
          }
          uint64_t v42 = v38 | (v40 << 32) | (v41 << 48);
          *uint64_t v53 = v42 | v35;
          if ((v42 | v35) != v34)
          {
            int v43 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)v53, 4);
            unint64_t v44 = v42 & 0xFFFFFFFF00FFFFFFLL;
            uint64_t v56 = v44 | 0x1000000;
            int v45 = RaytracingConstantsCommon::ScsLayoutBase<RaytracingConstantsGen1::ScsLayoutGen1>::getSectionEnd((uint64_t)&v56, 10);
            if (v45 == v43 || (unsigned int v46 = (16773120 - v43) / (v45 - v43), v46 > 0x5F))
            {
              uint64_t v5 = 1610612736;
            }
            else if (v46 >= 0x20)
            {
              uint64_t v5 = v46 << 24;
            }
            else
            {
              uint64_t v5 = 0;
            }
            *uint64_t v53 = v44 | v5;
            *(_OWORD *)uint64_t v51 = 0u;
            *((_OWORD *)v51 + 1) = 0u;
            *((void *)v51 + 4) = 0;
            *(void *)&long long v6 = -1;
            *((void *)&v6 + 1) = -1;
            *uint64_t v50 = v6;
            v50[1] = v6;
            v50[2] = v6;
          }
          v3 += 326;
        }
        while (v3 != (unsigned int *)v55);
      }
    }
    uint64_t v1 = v49 + 1;
  }
  while (v49 != 4);
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1 + 702, a1 + 264);
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1 + 702, a1 + 336);
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1 + 702, a1 + 408);
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1 + 702, a1 + 480);
  *(void *)&double result = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge(a1 + 702, a1 + 552).n128_u64[0];
  return result;
}

uint64_t *AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTables(uint64_t *result)
{
  uint64_t v1 = result[1];
  if (v1) {
    LODWORD(v1) = *(_DWORD *)(v1 + 1952) & 1;
  }
  uint64_t v2 = *result;
  if (*result) {
    LODWORD(v2) = 2 * (*(_DWORD *)(v2 + 1952) & 1);
  }
  uint64_t v3 = result[3];
  if (v3) {
    LODWORD(v3) = 8 * (*(_DWORD *)(v3 + 1952) & 1);
  }
  int v4 = v2 | v3;
  uint64_t v5 = result[4];
  if (v5) {
    LODWORD(v5) = 16 * (*(_DWORD *)(v5 + 1952) & 1);
  }
  int v6 = v4 | v5;
  uint64_t v7 = result[2];
  if (v7) {
    LODWORD(v7) = 4 * (*(_DWORD *)(v7 + 1952) & 1);
  }
  *((_DWORD *)result + 800) = v6 | v7 | v1;
  if (v1) {
    operator new();
  }
  if ((result[400] & 2) != 0) {
    operator new();
  }
  if ((result[400] & 4) != 0) {
    operator new();
  }
  if ((result[400] & 8) != 0) {
    operator new();
  }
  if ((result[400] & 0x10) != 0) {
    operator new();
  }
  return result;
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection(uint64_t a1, void *a2)
{
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v12 = a1 + 16 * i;
    if (*(void *)(v12 + 2912))
    {
      uint64_t v137 = i;
      unint64_t v13 = (uint64_t *)(v12 + 2912);
      AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v139, (uint64_t)a2, 0);
      int32x4_t v14 = 0uLL;
      int32x4_t v140 = 0u;
      memset(v139, 0, sizeof(v139));
      uint64_t v15 = *v13;
      uint64_t i = v137;
      uint64_t v16 = *(void *)(v15 + 32);
      uint64_t v17 = *(void *)(v15 + 40);
      if (v16 != v17)
      {
        int v18 = 0;
        char v19 = 0;
        do
        {
          while (1)
          {
            uint64_t v20 = *(void *)(v16 + 112);
            if (v20)
            {
              int v21 = *(_DWORD *)(v20 + 952);
              int v22 = *(_DWORD *)(v20 + 984);
              int v23 = 32 * *(_DWORD *)(v16 + 184);
              int v24 = v23 + 69631;
              if (v23 + 69631 < 0) {
                int v24 = v23 + 73726;
              }
              int v25 = v24 >> 12;
              int v26 = v23 + 0x1FFFF;
              int v27 = v23 + 196606;
              if (v26 >= 0) {
                int v27 = v26;
              }
              int v28 = v27 >> 16;
              if (*(_DWORD *)(*((void *)&v141 + 1) + 5864) == 21) {
                int v29 = 10;
              }
              else {
                int v29 = 14;
              }
              int v30 = 32 * (*(_DWORD *)(v16 + 204) + *(_DWORD *)(v16 + 172));
              int v31 = v30 + 17279;
              if (v30 + 17279 < 0) {
                int v31 = v30 + 21374;
              }
              int v32 = v31 >> 12;
              int v33 = (v30 + 78719) / 0x10000;
              int v34 = (48 * (v25 + v32) + v29 * (v28 + v33)) * HIDWORD(v142);
              int v35 = 32 * v22;
              int v36 = v35 + 69631;
              if (v35 + 69631 < 0) {
                int v36 = v35 + 73726;
              }
              int v37 = v35 + 0x1FFFF;
              int v38 = v35 + 196606;
              if (v37 >= 0) {
                int v38 = v37;
              }
              int v39 = 32 * v21;
              int v40 = v39 + 78719;
              if (v39 + 78719 < 0) {
                int v40 = v39 + 144254;
              }
              int v41 = v40 >> 16;
              int v42 = v39 + 17279;
              int v43 = v39 + 21374;
              if (v42 >= 0) {
                int v43 = v42;
              }
              int v44 = v41 + (v43 >> 12) + (v38 >> 16) + (v36 >> 12);
              int v45 = HIDWORD(v142) * v44;
              if (HIDWORD(v142) * v44 <= v34) {
                int v45 = v34;
              }
              int v46 = v33 + v32 + v28 + v25;
              if (v18 <= v45) {
                int v18 = v45;
              }
              DWORD2(v139[1]) = 0;
              HIDWORD(v139[1]) = v18;
              int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)__PAIR64__(v46, v44));
              int32x4_t v140 = v14;
              char v19 = 1;
            }
            uint64_t v47 = *(void *)(v16 + 408);
            if (v47)
            {
              int v48 = *(_DWORD *)(v47 + 952);
              int v49 = *(_DWORD *)(v47 + 984);
              int v50 = 32 * *(_DWORD *)(v16 + 480);
              int v51 = v50 + 69631;
              if (v50 + 69631 < 0) {
                int v51 = v50 + 73726;
              }
              int v52 = v51 >> 12;
              int v53 = v50 + 0x1FFFF;
              int v54 = v50 + 196606;
              if (v53 >= 0) {
                int v54 = v53;
              }
              int v55 = v54 >> 16;
              if (*(_DWORD *)(*((void *)&v141 + 1) + 5864) == 21) {
                int v56 = 10;
              }
              else {
                int v56 = 14;
              }
              int v57 = 32 * (*(_DWORD *)(v16 + 500) + *(_DWORD *)(v16 + 468));
              int v58 = v57 + 17279;
              if (v57 + 17279 < 0) {
                int v58 = v57 + 21374;
              }
              int v59 = v58 >> 12;
              int v60 = (v57 + 78719) / 0x10000;
              int v61 = (48 * (v52 + v59) + v56 * (v55 + v60)) * HIDWORD(v142);
              int v62 = 32 * v49;
              int v63 = v62 + 69631;
              if (v62 + 69631 < 0) {
                int v63 = v62 + 73726;
              }
              int v64 = v62 + 0x1FFFF;
              int v65 = v62 + 196606;
              if (v64 >= 0) {
                int v65 = v64;
              }
              int v66 = 32 * v48;
              int v67 = v66 + 78719;
              if (v66 + 78719 < 0) {
                int v67 = v66 + 144254;
              }
              int v68 = v67 >> 16;
              int v69 = v66 + 17279;
              int v70 = v66 + 21374;
              if (v69 >= 0) {
                int v70 = v69;
              }
              int v71 = v68 + (v70 >> 12) + (v65 >> 16) + (v63 >> 12);
              int v72 = HIDWORD(v142) * v71;
              if (HIDWORD(v142) * v71 <= v61) {
                int v72 = v61;
              }
              int v73 = v60 + v59 + v55 + v52;
              if (v18 <= v72) {
                int v18 = v72;
              }
              DWORD2(v139[1]) = 0;
              HIDWORD(v139[1]) = v18;
              int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)__PAIR64__(v73, v71));
              int32x4_t v140 = v14;
              char v19 = 1;
            }
            uint64_t v74 = *(void *)(v16 + 704);
            if (v74)
            {
              int v75 = *(_DWORD *)(v74 + 952);
              int v76 = *(_DWORD *)(v74 + 984);
              int v77 = 32 * *(_DWORD *)(v16 + 776);
              int v78 = v77 + 69631;
              if (v77 + 69631 < 0) {
                int v78 = v77 + 73726;
              }
              int v79 = v78 >> 12;
              int v80 = v77 + 0x1FFFF;
              int v81 = v77 + 196606;
              if (v80 >= 0) {
                int v81 = v80;
              }
              int v82 = v81 >> 16;
              if (*(_DWORD *)(*((void *)&v141 + 1) + 5864) == 21) {
                int v83 = 10;
              }
              else {
                int v83 = 14;
              }
              int v84 = 32 * (*(_DWORD *)(v16 + 796) + *(_DWORD *)(v16 + 764));
              int v85 = v84 + 17279;
              if (v84 + 17279 < 0) {
                int v85 = v84 + 21374;
              }
              int v86 = v85 >> 12;
              int v87 = (v84 + 78719) / 0x10000;
              int v88 = (48 * (v79 + v86) + v83 * (v82 + v87)) * HIDWORD(v142);
              int v89 = 32 * v76;
              int v90 = v89 + 69631;
              if (v89 + 69631 < 0) {
                int v90 = v89 + 73726;
              }
              int v91 = v89 + 0x1FFFF;
              int v92 = v89 + 196606;
              if (v91 >= 0) {
                int v92 = v91;
              }
              int v93 = 32 * v75;
              int v94 = v93 + 78719;
              if (v93 + 78719 < 0) {
                int v94 = v93 + 144254;
              }
              int v95 = v94 >> 16;
              int v96 = v93 + 17279;
              int v97 = v93 + 21374;
              if (v96 >= 0) {
                int v97 = v96;
              }
              int v98 = v95 + (v97 >> 12) + (v92 >> 16) + (v90 >> 12);
              int v99 = HIDWORD(v142) * v98;
              if (HIDWORD(v142) * v98 <= v88) {
                int v99 = v88;
              }
              int v100 = v87 + v86 + v82 + v79;
              if (v18 <= v99) {
                int v18 = v99;
              }
              DWORD2(v139[1]) = 0;
              HIDWORD(v139[1]) = v18;
              int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)__PAIR64__(v100, v98));
              int32x4_t v140 = v14;
              char v19 = 1;
            }
            uint64_t v101 = *(void *)(v16 + 1000);
            if (!v101) {
              break;
            }
            int v102 = *(_DWORD *)(v101 + 952);
            int v103 = *(_DWORD *)(v101 + 984);
            int v104 = 32 * *(_DWORD *)(v16 + 1072);
            int v105 = v104 + 69631;
            if (v104 + 69631 < 0) {
              int v105 = v104 + 73726;
            }
            int v106 = v105 >> 12;
            int v107 = v104 + 0x1FFFF;
            int v108 = v104 + 196606;
            if (v107 >= 0) {
              int v108 = v107;
            }
            int v109 = v108 >> 16;
            if (*(_DWORD *)(*((void *)&v141 + 1) + 5864) == 21) {
              int v110 = 10;
            }
            else {
              int v110 = 14;
            }
            int v111 = 32 * (*(_DWORD *)(v16 + 1092) + *(_DWORD *)(v16 + 1060));
            int v112 = v111 + 17279;
            if (v111 + 17279 < 0) {
              int v112 = v111 + 21374;
            }
            int v113 = v112 >> 12;
            int v114 = (v111 + 78719) / 0x10000;
            int v115 = (48 * (v106 + v113) + v110 * (v109 + v114)) * HIDWORD(v142);
            int v116 = 32 * v103;
            int v117 = v116 + 69631;
            if (v116 + 69631 < 0) {
              int v117 = v116 + 73726;
            }
            int v118 = v116 + 0x1FFFF;
            int v119 = v116 + 196606;
            if (v118 >= 0) {
              int v119 = v118;
            }
            int v120 = 32 * v102;
            int v121 = v120 + 78719;
            if (v120 + 78719 < 0) {
              int v121 = v120 + 144254;
            }
            int v122 = v121 >> 16;
            int v123 = v120 + 17279;
            int v124 = v120 + 21374;
            if (v123 >= 0) {
              int v124 = v123;
            }
            int v125 = v122 + (v124 >> 12) + (v119 >> 16) + (v117 >> 12);
            int v126 = HIDWORD(v142) * v125;
            if (HIDWORD(v142) * v125 <= v115) {
              int v126 = v115;
            }
            int v127 = v114 + v113 + v109 + v106;
            if (v18 <= v126) {
              int v18 = v126;
            }
            DWORD2(v139[1]) = 0;
            HIDWORD(v139[1]) = v18;
            int32x4_t v14 = vmaxq_s32(v14, (int32x4_t)__PAIR64__(v127, v125));
            int32x4_t v140 = v14;
            v16 += 1304;
            char v19 = 1;
            if (v16 == v17) {
              goto LABEL_114;
            }
          }
          v16 += 1304;
        }
        while (v16 != v17);
        if ((v19 & 1) == 0) {
          continue;
        }
LABEL_114:
        long long v128 = (char *)operator new(0x90uLL);
        long long v129 = v143;
        *(_OWORD *)(v128 + 88) = v142;
        *(_OWORD *)(v128 + 104) = v129;
        *(_OWORD *)(v128 + 120) = v144;
        long long v130 = v139[1];
        *(_OWORD *)(v128 + 24) = v139[0];
        *(_OWORD *)(v128 + 40) = v130;
        long long v131 = v141;
        *(int32x4_t *)(v128 + 56) = v140;
        *((void *)v128 + 1) = 0;
        *((void *)v128 + 2) = 0;
        *(void *)long long v128 = &unk_26F853A40;
        *((void *)v128 + 17) = v145;
        *(_OWORD *)(v128 + 72) = v131;
        uint64_t v132 = a1 + 16 * v137;
        *(void *)(v132 + 3072) = v128 + 24;
        unint64_t v133 = *(std::__shared_weak_count **)(v132 + 3080);
        *(void *)(v132 + 3080) = v128;
        if (v133 && !atomic_fetch_add(&v133->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
        uint64_t i = v137;
        if (*(unsigned char *)(a1 + 709))
        {
          if ((v137 - 1) < 2)
          {
            uint64_t v134 = a2[925];
          }
          else if ((v137 - 3) >= 2)
          {
            if (v137) {
              continue;
            }
            uint64_t v134 = a2[924];
          }
          else
          {
            uint64_t v134 = a2[927];
          }
          int v135 = DWORD1(v139[0]);
          if (SDWORD1(v139[0]) > *(_DWORD *)(v134 + 4))
          {
            *(_DWORD *)uint64_t v134 = v139[0];
            *(_DWORD *)(v134 + 4) = v135;
            *(_OWORD *)(v134 + 8) = *(_OWORD *)((char *)v139 + 8);
          }
          int v3 = DWORD2(v139[1]);
          int v4 = *(_DWORD *)(v134 + 28);
          if (*(_DWORD *)(v134 + 24) > SDWORD2(v139[1])) {
            int v3 = *(_DWORD *)(v134 + 24);
          }
          *(_DWORD *)(v134 + 24) = v3;
          int v5 = HIDWORD(v139[1]);
          if (v4 > SHIDWORD(v139[1])) {
            int v5 = v4;
          }
          *(_DWORD *)(v134 + 28) = v5;
          __int32 v6 = v140.i32[0];
          int v7 = *(_DWORD *)(v134 + 36);
          if (*(_DWORD *)(v134 + 32) > v140.i32[0]) {
            __int32 v6 = *(_DWORD *)(v134 + 32);
          }
          *(_DWORD *)(v134 + 32) = v6;
          int v8 = v140.i32[1];
          if (v7 > v140.i32[1]) {
            int v8 = v7;
          }
          *(_DWORD *)(v134 + 36) = v8;
          __int32 v9 = v140.i32[2];
          int v10 = *(_DWORD *)(v134 + 44);
          if (*(_DWORD *)(v134 + 40) > v140.i32[2]) {
            __int32 v9 = *(_DWORD *)(v134 + 40);
          }
          *(_DWORD *)(v134 + 40) = v9;
          int v11 = v140.i32[3];
          if (v10 > v140.i32[3]) {
            int v11 = v10;
          }
          *(_DWORD *)(v134 + 44) = v11;
        }
      }
    }
  }
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParams(int8x8_t **a1, uint64_t *a2)
{
  uint64_t result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3((uint64_t)v112, (uint64_t)a2, a2[754]);
  int v5 = a1[1];
  if (v5)
  {
    uint64_t result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSpillParamsForVertex((uint64_t)&v114, (uint64_t)v112, *((_DWORD *)a1 + 261) + *((_DWORD *)a1 + 253), v5[125].u32[0], *((_DWORD *)a1 + 256));
    *(_OWORD *)(a1 + 5) = v114;
    *(_OWORD *)(a1 + 7) = v115[0];
  }
  __int32 v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *((_DWORD *)a1 + 333) + *((_DWORD *)a1 + 325);
    unsigned int v8 = v6[125].u32[0];
    __int32 v9 = v6[424].i32[1];
    if (v7 <= v8) {
      unsigned int v7 = v8;
    }
    int v10 = 32 * v7;
    int v11 = 32 * *((_DWORD *)a1 + 328);
    int v12 = v9 << 7;
    if ((v9 << 7) <= 0x4000) {
      int v12 = 0x4000;
    }
    int v13 = v12 | 0x40;
    if (!v9) {
      int v13 = 0;
    }
    unsigned int v14 = ((v11 + 6143) >> 12) + ((v10 + 17279) >> 12);
    uint64_t v15 = ((v10 + 78719) >> 16) + ((v11 + 67583) >> 16);
    unsigned int v16 = v13 + 4095;
    unsigned int v17 = (v13 + 0xFFFF) >> 16;
    if (v9) {
      int v18 = (v9 << 7) | 0x40;
    }
    else {
      int v18 = 0;
    }
    if (*(_DWORD *)(v113 + 5864) == 21) {
      int v19 = 10;
    }
    else {
      int v19 = 14;
    }
    a1[9] = (int8x8_t *)((v19 * v15
                        + 96 * v14
                        + ((v18 + 4095) >> 12 << 6)
                        + 5 * ((v18 + 0xFFFF) >> 16)) | ((unint64_t)(v15 + v14) << 32));
    a1[10] = (int8x8_t *)(v15 | ((unint64_t)(v17 + (v16 >> 12)) << 32));
  }
  uint64_t v20 = a1[2];
  if (v20)
  {
    unsigned int v21 = v20[125].u32[0];
    int v22 = *((_DWORD *)a1 + 400);
    if (*((_DWORD *)a1 + 405) + *((_DWORD *)a1 + 397) > v21) {
      unsigned int v21 = *((_DWORD *)a1 + 405) + *((_DWORD *)a1 + 397);
    }
    int v23 = 32 * v21;
    unsigned int v24 = (v23 + 78719) >> 16;
    unsigned int v25 = ((32 * v22 + 6143) >> 12) + ((v23 + 17279) >> 12);
    unsigned int v26 = v24 + ((32 * v22 + 67583) >> 16);
    if (*(_DWORD *)(v113 + 5864) == 21) {
      int v27 = 10;
    }
    else {
      int v27 = 14;
    }
    int v28 = (int8x8_t *)(v27 * v26);
    a1[9] = (int8x8_t *)((v28 + 96 * v25) | ((((unint64_t)(v28 + 32 * v25) >> 1) & 0x3FFFFFF) << 33));
    a1[10] = v28;
  }
  if (!*((unsigned char *)a1 + 709)) {
    return result;
  }
  AGX::Heap<true>::allocateImpl(&v114, (uint64_t)(a2 + 711), 392, 0);
  long long v29 = v115[0];
  *((_OWORD *)a1 + 55) = v114;
  *((_OWORD *)a1 + 56) = v29;
  *(_OWORD *)((char *)a1 + 905) = *(_OWORD *)((char *)v115 + 9);
  a1[109] = a1[110] + 0x200000000;
  int v30 = a1[111];
  v30[33].i8[4] = 0;
  __int32 v31 = *((_DWORD *)a1 + 189);
  if ((v31 & 0x20000) != 0)
  {
    int v109 = 0;
    int v32 = 0;
  }
  else
  {
    int v32 = *a1;
    if (*a1)
    {
      char v33 = 0;
      int v109 = v32[414].i32[0] & 0xE10000;
      goto LABEL_31;
    }
    int v109 = 0;
  }
  char v33 = 1;
LABEL_31:
  int v34 = a1[4];
  if (v34)
  {
    int v35 = a1[3];
    uint64_t v36 = (unint64_t)a1[92] & 0xFFFFFFF0FFFFFFFLL;
    unsigned int v37 = v34[410].u32[1];
    if (v37 <= 8)
    {
      int v38 = 1 << v37;
      if ((v38 & 0x1D8) != 0)
      {
        uint64_t v39 = (uint64_t)vand_s8((int8x8_t)a1[92], (int8x8_t)vdup_n_s32(0xFF3FFFFu));
LABEL_42:
        int8x8_t v41 = v34[418];
        __int32 v61 = v34[419].i32[0];
        unsigned int v111 = *((_DWORD *)a1 + 182) | *((_DWORD *)a1 + 187) & 0xF3F5FFFF | 0x80A0000 | v34[419].i32[1] & 0xFBFFFFFF;
        __int32 v108 = *((_DWORD *)a1 + 186);
        unsigned int v110 = *((_DWORD *)a1 + 183) & 0xEF7FFFFF;
        __int32 v62 = v35[401].i32[0];
        unsigned int v63 = v35[401].u32[1];
        __int32 v64 = v35[400].i32[1];
        __int32 v65 = v34[403].i32[1];
        __int32 v66 = v34[405].i32[0];
        __int32 v67 = v34[405].i32[1];
        __int32 v68 = v34[406].i32[0];
        int8x8_t v69 = v34[407];
        int v70 = *((_DWORD *)a1 + 209);
        if ((v31 & 0x20000) != 0) {
          int v71 = 48;
        }
        else {
          int v71 = 16;
        }
        int8x8_t v72 = vorr_s8(vand_s8(v34[404], (int8x8_t)0xFFF0000FFFFFFCFLL), (int8x8_t)__PAIR64__(v35[400].i32[0] & 0xFFF, v71));
        if (v70) {
          unsigned int v63 = v63 & 0xFFFFFF80 | ((v70 + 1023) >> 10) & 0x7F;
        }
        __int32 v42 = *((_DWORD *)a1 + 188);
        int8x8_t v44 = v34[420];
        int8x8_t v43 = v34[421];
        v30[21].i32[0] = 1073745164;
        v30[21].i32[1] = v65;
        v30[22] = v72;
        v30[23].i32[0] = v64 | 4;
        v30[23].i32[1] = v62;
        v30[24].i32[0] = v66 | 4;
        v30[24].i32[1] = v67;
        v30[25].i32[0] = v63;
        v30[25].i32[1] = v68;
        v30[26].i32[0] = 0;
        *(int8x8_t *)((char *)v30 + 212) = v69;
        v30[33].i8[4] = 8;
        v30[33].i8[7] = v35[426].i8[2];
        unsigned int v73 = v34[410].u32[1];
        char v74 = v73 == 1;
        if (v73 == 3) {
          char v74 = 6;
        }
        v30[33].i8[5] = v74;
        if (v73 >= 4) {
          __int8 v75 = 0;
        }
        else {
          __int8 v75 = 0x104u >> (8 * v73);
        }
        v30[33].i8[6] = v75;
        int8x8_t v76 = v35[347];
        *((void *)&v114 + 1) = 0;
        *(void *)&v115[0] = 0;
        *(void *)&long long v114 = (2 * (*(void *)&v76 & 0xFFFFFFFFFFFFLL)) | 1;
        AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)&v114, (unsigned __int8 *)&v30[1] + 2);
        int8x8_t v77 = v34[347];
        *(void *)&v115[0] = 0;
        long long v114 = (2 * (*(void *)&v77 & 0xFFFFFFFFFFFFLL)) | 1uLL;
        uint64_t result = (uint64_t)AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)&v114, (unsigned __int8 *)&v30[2] + 4);
        v30[48].i32[0] = 4 * v35[407].i32[0];
        __int32 v46 = v108;
        goto LABEL_53;
      }
      if ((v38 & 0x26) != 0)
      {
        uint64_t v39 = v36 | 0x1000000010000000;
        goto LABEL_42;
      }
    }
    uint64_t v39 = v36 | 0x4000000040000000;
    goto LABEL_42;
  }
  int v40 = a1[1];
  int8x8_t v41 = v40[447];
  __int32 v42 = *((_DWORD *)a1 + 188);
  int8x8_t v44 = *(int8x8_t *)((char *)v40 + 3588);
  int8x8_t v43 = *(int8x8_t *)((char *)v40 + 3596);
  unsigned int v111 = *((_DWORD *)a1 + 182) | *((_DWORD *)a1 + 187) & 0xF3F5FFFF | 0x80A0000 | v40[448].i32[0] & 0xFBFFFFFF;
  unsigned int v110 = *((_DWORD *)a1 + 183);
  unint64_t v45 = (unint64_t)a1[92];
  __int32 v46 = *((_DWORD *)a1 + 186);
  uint64_t v47 = (char *)v40 + 28 * ((v31 & 0x20000) == 0);
  int v48 = *((_DWORD *)v47 + 840);
  __int32 v49 = *((_DWORD *)v47 + 841);
  int v50 = *((_DWORD *)v47 + 842) & 0x3FFFFF;
  int8x8_t v51 = *(int8x8_t *)(v47 + 3376);
  int8x8_t v117 = v51;
  v30[18].i32[0] = v48 & 0xFFFFFFDF;
  v30[18].i32[1] = v49;
  v30[19] = (int8x8_t)(v50 | 4u);
  v30[20] = v51;
  int8x8_t v52 = v40[347];
  *((void *)&v114 + 1) = 0;
  *(void *)&v115[0] = 0;
  *(void *)&long long v114 = (2 * (*(void *)&v52 & 0xFFFFFFFFFFFFLL)) | 1;
  uint64_t result = (uint64_t)AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)&v114, (unsigned __int8 *)v30);
  int v53 = a1[1];
  if (v53 && v53[468].i32[0])
  {
    v30[33].i8[4] |= 2u;
    int v54 = *((_DWORD *)a1 + 172);
    int v55 = *((_DWORD *)a1 + 171);
    int v56 = *((_DWORD *)a1 + 176);
    int v57 = *((_DWORD *)a1 + 174);
    int v58 = *((_DWORD *)a1 + 175);
    v30[31].i8[0] = (2 * (v57 & 3)) & 0xF6 | (8 * (v58 & 1)) | v53[467].i8[0] & 1 | v30[31].i8[0] & 0xF0;
    int v59 = v53[468].u8[5];
    __int32 v60 = v53[467].i32[0];
    v30[32].i32[0] = 1073741968;
    v30[32].i32[1] = (((v56 - (v54 == 2)) << 23) + 528482304) & 0x1F800000 | (v54 << 30) | ((v55 & 1) << 29) | (v59 << 16) | ((v57 & 3) << 17) | ((v58 & 1) << 19) | ((v60 & 1) << 20) | 0x200000;
    v30[33].i32[0] = 15360;
  }
  __int32 v61 = 0;
  uint64_t v39 = v45 & 0xFFFFFFF0FFFFFFFLL;
LABEL_53:
  v30[8].i32[1] = v111;
  v30[9].i32[0] = v110 | 0x10000000;
  *(int8x8_t *)((char *)&v30[9] + 4) = (int8x8_t)v39;
  v30[10].i32[1] = v42;
  v30[11].i32[0] = v109 | v41.i32[0] & 0xF1C00FF;
  *(int8x8_t *)((char *)v30 + 92) = v44;
  v30[12].i32[1] = v61;
  v30[13].i32[0] = v31;
  v30[13].i32[1] = v46;
  v30[14].i32[0] = v41.i32[1];
  *(int8x8_t *)((char *)v30 + 116) = v43;
  long long v78 = *(_OWORD *)(a1 + 91);
  v30[17].i32[1] = *((_DWORD *)a1 + 186);
  *(_OWORD *)&v30[15].u8[4] = v78;
  __int8 v79 = v30[33].i8[4];
  if ((v33 & 1) == 0)
  {
    v30[33].i8[4] = v79 | 4;
    int8x8_t v80 = v32[348];
    *((void *)&v114 + 1) = 0;
    *(void *)&v115[0] = 0;
    *(void *)&long long v114 = (2 * (*(void *)&v80 & 0xFFFFFFFFFFFFLL)) | 1;
    AGXIotoInstruction_B_0::emit((AGXIotoInstruction_B_0 *)&v114, (unsigned __int8 *)&v30[3] + 6);
    __int32 v81 = (*a1)[409].i32[0];
    __int32 v82 = (*a1)[410].i32[1];
    int v83 = (*a1)[409].i32[1] & 0x3FFFFF;
    int8x8_t v84 = vand_s8((*a1)[408], (int8x8_t)0x3FFFF0000);
    int v85 = a1[401];
    if (v85) {
      unint64_t v86 = (unint64_t)v85[4];
    }
    else {
      unint64_t v86 = *(void *)(*(void *)&(*a1)[411] + 32);
    }
    v87.i64[0] = HIDWORD(v86);
    v87.i64[1] = v86;
    v30[27].i32[1] = (*a1)[407].i32[1];
    v30[28] = vorr_s8(v84, vand_s8((int8x8_t)vmovn_s64(v87), (int8x8_t)0xFFFFFFFC0000FFFFLL));
    v30[29].i32[0] = v81;
    v30[29].i32[1] = v83;
    v30[30].i32[0] = 0;
    v30[30].i32[1] = v82;
    long long v88 = *(_OWORD *)v32[358].i8;
    long long v89 = *(_OWORD *)v32[362].i8;
    v115[4] = *(_OWORD *)v32[360].i8;
    v115[5] = v89;
    int8x8_t v116 = v32[364];
    long long v114 = *(_OWORD *)v32[350].i8;
    long long v90 = *(_OWORD *)v32[354].i8;
    v115[0] = *(_OWORD *)v32[352].i8;
    v115[1] = v90;
    v115[2] = *(_OWORD *)v32[356].i8;
    v115[3] = v88;
    uint64_t result = AGX::ESLInstructionEncoderGen3<AGX::HAL200::Encoders>::LoadShader::emit((uint64_t)&v114, (uint64_t)&v30[5]);
    __int8 v79 = v30[33].i8[4];
  }
  v30[33].i8[4] = v79 | ((v31 & 0x20000) == 0);
  int v91 = a1[156];
  if (v91) {
    int v91 = (int8x8_t *)v91[7];
  }
  v30[35] = (int8x8_t)v91;
  int v92 = a1[160];
  if (v92) {
    int v92 = (int8x8_t *)v92[7];
  }
  v30[43] = (int8x8_t)v92;
  int v93 = a1[120];
  if (v93) {
    int v93 = (int8x8_t *)v93[7];
  }
  v30[36] = (int8x8_t)v93;
  int v94 = a1[158];
  if (v94) {
    int v94 = (int8x8_t *)v94[7];
  }
  v30[39] = (int8x8_t)v94;
  int v95 = a1[122];
  if (v95) {
    int v95 = (int8x8_t *)v95[7];
  }
  v30[40] = (int8x8_t)v95;
  int v96 = a1[228];
  if (v96) {
    int v96 = (int8x8_t *)v96[7];
  }
  v30[37] = (int8x8_t)v96;
  int v97 = a1[230];
  if (v97) {
    int v97 = (int8x8_t *)v97[7];
  }
  v30[41] = (int8x8_t)v97;
  int v98 = a1[264];
  if (v98) {
    int v98 = (int8x8_t *)v98[7];
  }
  v30[38] = (int8x8_t)v98;
  int v99 = a1[266];
  if (v99) {
    int v99 = (int8x8_t *)v99[7];
  }
  v30[42] = (int8x8_t)v99;
  int v100 = *((_DWORD *)a1 + 800);
  if (v100)
  {
    v30[44] = a1[394][7];
    if ((v100 & 2) != 0)
    {
LABEL_78:
      v30[45] = a1[395][7];
      if ((v100 & 8) != 0) {
        goto LABEL_79;
      }
LABEL_83:
      v30[46] = 0;
      if ((v100 & 0x10) != 0) {
        goto LABEL_80;
      }
LABEL_84:
      int8x8_t v101 = 0;
      goto LABEL_85;
    }
  }
  else
  {
    v30[44] = 0;
    if ((v100 & 2) != 0) {
      goto LABEL_78;
    }
  }
  v30[45] = 0;
  if ((v100 & 8) == 0) {
    goto LABEL_83;
  }
LABEL_79:
  v30[46] = a1[397][7];
  if ((v100 & 0x10) == 0) {
    goto LABEL_84;
  }
LABEL_80:
  int8x8_t v101 = a1[398][7];
LABEL_85:
  v30[47] = v101;
  if (a1[4])
  {
    AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForObject(a2[927], *((_DWORD *)a1 + 477) + *((_DWORD *)a1 + 469), a1[3][125].u32[0], *((_DWORD *)a1 + 472), a1[3][314].i32[1], *((_DWORD *)a1 + 202) * *((_DWORD *)a1 + 200) * *((_DWORD *)a1 + 201));
    uint64_t result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForMesh(a2[927], *((_DWORD *)a1 + 549) + *((_DWORD *)a1 + 541), a1[4][125].u32[0], *((_DWORD *)a1 + 544), a1[4][314].i32[1], *((_DWORD *)a1 + 205) * *((_DWORD *)a1 + 203) * *((_DWORD *)a1 + 204));
    if (!*a1) {
      return result;
    }
    goto LABEL_87;
  }
  uint64_t v105 = a2[924];
  *(_DWORD *)(v105 + 48) = 1;
  int v106 = *((_DWORD *)a1 + 11);
  if (v106 > *(_DWORD *)(v105 + 4))
  {
    *(_DWORD *)(v105 + 4) = v106;
    *(_DWORD *)uint64_t v105 = *((_DWORD *)a1 + 10);
    *(_OWORD *)(v105 + 8) = *((_OWORD *)a1 + 3);
  }
  int v107 = *((_DWORD *)a1 + 16);
  if (*(_DWORD *)(v105 + 24) > v107) {
    int v107 = *(_DWORD *)(v105 + 24);
  }
  *(_DWORD *)(v105 + 24) = v107;
  if (*a1)
  {
LABEL_87:
    uint64_t v102 = a2[925];
    if (*(unsigned char *)(*(void *)(v102 + 56) + 7815)) {
      unsigned int v103 = 11;
    }
    else {
      unsigned int v103 = 6;
    }
    if (v103 >= 8) {
      int v104 = 8;
    }
    else {
      int v104 = v103;
    }
    *(void *)&long long v114 = (v103 + v104) | 0x200000000;
    DWORD2(v114) = 1;
    return AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(v102, (_DWORD *)a1 + 18, &v114);
  }
  return result;
}

__n128 AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::copyState(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(a1 + 660) = a3;
  long long v3 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 668) = *(_DWORD *)(a2 + 668);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  BOOL v4 = *(unsigned char *)(a2 + 680) == 0;
  *(unsigned char *)(a1 + 680) = *(unsigned char *)(a2 + 680);
  *(_DWORD *)(a1 + 756) = *(_DWORD *)(a1 + 756) & 0xFFFDFFFF | (v4 << 17);
  *(unsigned char *)(a1 + 709) = *(unsigned char *)(a2 + 709);
  *(_OWORD *)(a1 + 684) = *(_OWORD *)(a2 + 684);
  *(_DWORD *)(a1 + 704) = *(_DWORD *)(a2 + 704);
  *(_DWORD *)(a1 + 700) = *(_DWORD *)(a2 + 700);
  *(unsigned char *)(a1 + 708) = *(unsigned char *)(a2 + 708);
  *(_DWORD *)(a1 + 664) = *(_DWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 800);
  __n128 result = *(__n128 *)(a2 + 816);
  long long v6 = *(_OWORD *)(a2 + 832);
  long long v7 = *(_OWORD *)(a2 + 848);
  *(_DWORD *)(a1 + 864) = *(_DWORD *)(a2 + 864);
  *(_OWORD *)(a1 + 832) = v6;
  *(_OWORD *)(a1 + 848) = v7;
  *(__n128 *)(a1 + 816) = result;
  int v8 = *(_DWORD *)(a2 + 712);
  *(unsigned char *)(a1 + 716) = *(unsigned char *)(a2 + 716);
  *(_DWORD *)(a1 + 712) = v8;
  if (*(void *)(a2 + 776)) {
    operator new();
  }
  if (*(void *)(a2 + 784)) {
    operator new();
  }
  if (*(void *)(a2 + 792)) {
    operator new();
  }
  return result;
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::clone(uint64_t *a1, int8x8_t **a2, void *a3)
{
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::destroy(a1);
  uint64_t v196 = a2;
  if (a2[1]) {
    operator new();
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setVertexVariant((uint64_t)a1, 0, 1);
  if (*a2) {
    operator new();
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setFragmentVariant((uint64_t)a1, 0, 1, 0);
  if (a2[2]) {
    operator new();
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setTileVariant((uint64_t)a1, 0, 1);
  if (a2[3]) {
    operator new();
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setObjectVariant((uint64_t)a1, 0);
  if (a2[4]) {
    operator new();
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setMeshVariant((uint64_t)a1, 0);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::copyState(a1, a2, 1, a3);
  if (!a1[1])
  {
LABEL_35:
    char v33 = (void *)*a1;
    if (!*a1) {
      goto LABEL_59;
    }
    int v34 = 0;
    int v35 = 0;
    long long v203 = 0uLL;
    *(void *)&long long v204 = 0;
    unint64_t v36 = ((char *)v196[304] - (char *)v196[303]) >> 4;
    unint64_t v37 = v36 + 1;
    if (v36 != -1)
    {
      if (v37 > 0x333333333333333) {
        abort();
      }
      int v38 = (char *)operator new(80 * v37);
      int v34 = &v38[80 * v37];
      *(void *)&long long v203 = v38;
      *(void *)&long long v204 = v34;
      int v35 = v38;
    }
    std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)(a1 + 303), v36);
    uint64_t v39 = v33[183];
    uint64_t v40 = v33[182];
    uint64_t v41 = v33[184];
    __int32 v42 = (char *)operator new(0x60uLL);
    int8x8_t v43 = v33 + 1;
    int8x8_t v44 = v33 + 151;
    locka = v33;
    unint64_t v45 = v33 + 319;
    *(void *)__int32 v42 = v43;
    uint64_t v46 = v44[2];
    *(_OWORD *)(v42 + 8) = *(_OWORD *)v44;
    *((void *)v42 + 3) = v46;
    *((void *)v42 + 4) = v40;
    *((void *)v42 + 5) = v39;
    *((void *)v42 + 6) = v41;
    uint64_t v47 = v45[2];
    *(_OWORD *)(v42 + 56) = *(_OWORD *)v45;
    *((void *)v42 + 9) = v47;
    *((void *)v42 + 10) = a1 + 156;
    __pa = v42;
    *((void *)v42 + 11) = a1 + 156;
    if (v35 >= v34)
    {
      unint64_t v51 = 0x999999999999999ALL * ((v34 - v35) >> 4);
      if (v51 <= 1) {
        unint64_t v51 = 1;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((v34 - v35) >> 4) >= 0x199999999999999) {
        unint64_t v52 = 0x333333333333333;
      }
      else {
        unint64_t v52 = v51;
      }
      if (v52 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      int v53 = (char *)operator new(80 * v52);
      *(void *)int v53 = v43;
      uint64_t v54 = v44[2];
      *(_OWORD *)(v53 + 8) = *(_OWORD *)v44;
      *((void *)v53 + 3) = v54;
      *((void *)v53 + 4) = v40;
      *((void *)v53 + 5) = v39;
      *((void *)v53 + 6) = v41;
      long long v55 = *(_OWORD *)v45;
      *((void *)v53 + 9) = v45[2];
      *(_OWORD *)(v53 + 56) = v55;
      int v50 = v53 + 80;
      *(void *)&long long v203 = v53;
      *((void *)&v203 + 1) = v53 + 80;
      *(void *)&long long v204 = &v53[80 * v52];
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(void *)int v35 = v43;
      uint64_t v48 = v44[2];
      *(_OWORD *)(v35 + 8) = *(_OWORD *)v44;
      *((void *)v35 + 3) = v48;
      *((void *)v35 + 4) = v40;
      *((void *)v35 + 5) = v39;
      *((void *)v35 + 6) = v41;
      long long v49 = *(_OWORD *)v45;
      *((void *)v35 + 9) = v45[2];
      *(_OWORD *)(v35 + 56) = v49;
      int v50 = v35 + 80;
    }
    *((void *)&v203 + 1) = v50;
    if (v196[303] != v196[304]) {
      operator new();
    }
    int v56 = operator new(0x60uLL);
    *((void *)&v200 + 1) = v56 + 6;
    *(void *)&long long v201 = v56 + 6;
    long long v57 = __pa[3];
    v56[2] = __pa[2];
    v56[3] = v57;
    long long v58 = __pa[5];
    v56[4] = __pa[4];
    v56[5] = v58;
    long long v59 = __pa[1];
    *int v56 = *__pa;
    v56[1] = v59;
    *(void *)&long long v200 = v56;
    AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a3, (uint64_t **)&v203, (uint64_t **)&v203, (size_t *)&v200, *((_DWORD *)locka + 259), 0, 0, 1);
    operator delete(v56);
    __int32 v60 = locka + 195;
    if (*((char *)locka + 1583) < 0)
    {
      __int32 v61 = __pa;
      if (!locka[196]) {
        goto LABEL_57;
      }
      __int32 v60 = (void *)*v60;
    }
    else
    {
      __int32 v61 = __pa;
      if (!*((unsigned char *)locka + 1583))
      {
LABEL_57:
        operator delete(v61);
        if ((void)v203) {
          operator delete((void *)v203);
        }
LABEL_59:
        __int32 v62 = (void *)a1[2];
        if (!v62) {
          goto LABEL_83;
        }
        unsigned int v63 = 0;
        __int32 v64 = 0;
        long long v203 = 0uLL;
        *(void *)&long long v204 = 0;
        unint64_t v65 = ((char *)v196[307] - (char *)v196[306]) >> 4;
        unint64_t v66 = v65 + 1;
        if (v65 != -1)
        {
          if (v66 > 0x333333333333333) {
            abort();
          }
          __int32 v67 = (char *)operator new(80 * v66);
          unsigned int v63 = &v67[80 * v66];
          *(void *)&long long v203 = v67;
          *(void *)&long long v204 = v63;
          __int32 v64 = v67;
        }
        std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)(a1 + 306), v65);
        uint64_t v68 = v62[183];
        uint64_t v69 = v62[182];
        uint64_t v70 = v62[184];
        int v71 = (char *)operator new(0x60uLL);
        int8x8_t v72 = v62 + 1;
        unsigned int v73 = v62 + 151;
        lockb = v62;
        char v74 = v62 + 319;
        *(void *)int v71 = v72;
        uint64_t v75 = v73[2];
        *(_OWORD *)(v71 + 8) = *(_OWORD *)v73;
        *((void *)v71 + 3) = v75;
        *((void *)v71 + 4) = v69;
        *((void *)v71 + 5) = v68;
        *((void *)v71 + 6) = v70;
        uint64_t v76 = v74[2];
        *(_OWORD *)(v71 + 56) = *(_OWORD *)v74;
        *((void *)v71 + 9) = v76;
        *((void *)v71 + 10) = a1 + 192;
        __pb = v71;
        *((void *)v71 + 11) = a1 + 192;
        if (v64 >= v63)
        {
          unint64_t v80 = 0x999999999999999ALL * ((v63 - v64) >> 4);
          if (v80 <= 1) {
            unint64_t v80 = 1;
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v63 - v64) >> 4) >= 0x199999999999999) {
            unint64_t v81 = 0x333333333333333;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81 > 0x333333333333333) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          __int32 v82 = (char *)operator new(80 * v81);
          *(void *)__int32 v82 = v72;
          uint64_t v83 = v73[2];
          *(_OWORD *)(v82 + 8) = *(_OWORD *)v73;
          *((void *)v82 + 3) = v83;
          *((void *)v82 + 4) = v69;
          *((void *)v82 + 5) = v68;
          *((void *)v82 + 6) = v70;
          long long v84 = *(_OWORD *)v74;
          *((void *)v82 + 9) = v74[2];
          *(_OWORD *)(v82 + 56) = v84;
          __int8 v79 = v82 + 80;
          *(void *)&long long v203 = v82;
          *((void *)&v203 + 1) = v82 + 80;
          *(void *)&long long v204 = &v82[80 * v81];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *(void *)__int32 v64 = v72;
          uint64_t v77 = v73[2];
          *(_OWORD *)(v64 + 8) = *(_OWORD *)v73;
          *((void *)v64 + 3) = v77;
          *((void *)v64 + 4) = v69;
          *((void *)v64 + 5) = v68;
          *((void *)v64 + 6) = v70;
          long long v78 = *(_OWORD *)v74;
          *((void *)v64 + 9) = v74[2];
          *(_OWORD *)(v64 + 56) = v78;
          __int8 v79 = v64 + 80;
        }
        *((void *)&v203 + 1) = v79;
        if (v196[306] != v196[307]) {
          operator new();
        }
        int v85 = operator new(0x60uLL);
        *((void *)&v200 + 1) = v85 + 6;
        *(void *)&long long v201 = v85 + 6;
        long long v86 = __pb[3];
        v85[2] = __pb[2];
        v85[3] = v86;
        long long v87 = __pb[5];
        v85[4] = __pb[4];
        v85[5] = v87;
        long long v88 = __pb[1];
        *int v85 = *__pb;
        v85[1] = v88;
        *(void *)&long long v200 = v85;
        AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a3, (uint64_t **)&v203, (uint64_t **)&v203, (size_t *)&v200, *((_DWORD *)lockb + 259), 0, 0, 1);
        operator delete(v85);
        long long v89 = lockb + 195;
        if (*((char *)lockb + 1583) < 0)
        {
          long long v90 = __pb;
          if (!lockb[196]) {
            goto LABEL_81;
          }
          long long v89 = (void *)*v89;
        }
        else
        {
          long long v90 = __pb;
          if (!*((unsigned char *)lockb + 1583))
          {
LABEL_81:
            operator delete(v90);
            if ((void)v203) {
              operator delete((void *)v203);
            }
LABEL_83:
            int v91 = (void *)a1[3];
            if (!v91) {
              goto LABEL_107;
            }
            int v92 = 0;
            int v93 = 0;
            long long v203 = 0uLL;
            *(void *)&long long v204 = 0;
            unint64_t v94 = ((char *)v196[310] - (char *)v196[309]) >> 4;
            unint64_t v95 = v94 + 1;
            if (v94 != -1)
            {
              if (v95 > 0x333333333333333) {
                abort();
              }
              int v96 = (char *)operator new(80 * v95);
              int v92 = &v96[80 * v95];
              *(void *)&long long v203 = v96;
              *(void *)&long long v204 = v92;
              int v93 = v96;
            }
            std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)(a1 + 309), v94);
            uint64_t v97 = v91[183];
            uint64_t v98 = v91[182];
            uint64_t v99 = v91[184];
            int v100 = (char *)operator new(0x60uLL);
            int8x8_t v101 = v91 + 1;
            uint64_t v102 = v91 + 151;
            lockCC_SHA256_CTX c = v91;
            unsigned int v103 = v91 + 318;
            *(void *)int v100 = v101;
            uint64_t v104 = v102[2];
            *(_OWORD *)(v100 + 8) = *(_OWORD *)v102;
            *((void *)v100 + 3) = v104;
            *((void *)v100 + 4) = v98;
            *((void *)v100 + 5) = v97;
            *((void *)v100 + 6) = v99;
            uint64_t v105 = v103[2];
            *(_OWORD *)(v100 + 56) = *(_OWORD *)v103;
            *((void *)v100 + 9) = v105;
            *((void *)v100 + 10) = a1 + 228;
            __pCC_SHA256_CTX c = v100;
            *((void *)v100 + 11) = a1 + 228;
            if (v93 >= v92)
            {
              unint64_t v109 = 0x999999999999999ALL * ((v92 - v93) >> 4);
              if (v109 <= 1) {
                unint64_t v109 = 1;
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((v92 - v93) >> 4) >= 0x199999999999999) {
                unint64_t v110 = 0x333333333333333;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unsigned int v111 = (char *)operator new(80 * v110);
              *(void *)unsigned int v111 = v101;
              uint64_t v112 = v102[2];
              *(_OWORD *)(v111 + 8) = *(_OWORD *)v102;
              *((void *)v111 + 3) = v112;
              *((void *)v111 + 4) = v98;
              *((void *)v111 + 5) = v97;
              *((void *)v111 + 6) = v99;
              long long v113 = *(_OWORD *)v103;
              *((void *)v111 + 9) = v103[2];
              *(_OWORD *)(v111 + 56) = v113;
              __int32 v108 = v111 + 80;
              *(void *)&long long v203 = v111;
              *((void *)&v203 + 1) = v111 + 80;
              *(void *)&long long v204 = &v111[80 * v110];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *(void *)int v93 = v101;
              uint64_t v106 = v102[2];
              *(_OWORD *)(v93 + 8) = *(_OWORD *)v102;
              *((void *)v93 + 3) = v106;
              *((void *)v93 + 4) = v98;
              *((void *)v93 + 5) = v97;
              *((void *)v93 + 6) = v99;
              long long v107 = *(_OWORD *)v103;
              *((void *)v93 + 9) = v103[2];
              *(_OWORD *)(v93 + 56) = v107;
              __int32 v108 = v93 + 80;
            }
            *((void *)&v203 + 1) = v108;
            if (v196[309] != v196[310]) {
              operator new();
            }
            long long v114 = operator new(0x60uLL);
            *((void *)&v200 + 1) = v114 + 6;
            *(void *)&long long v201 = v114 + 6;
            long long v115 = __pc[3];
            v114[2] = __pc[2];
            v114[3] = v115;
            long long v116 = __pc[5];
            v114[4] = __pc[4];
            v114[5] = v116;
            long long v117 = __pc[1];
            *long long v114 = *__pc;
            v114[1] = v117;
            *(void *)&long long v200 = v114;
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a3, (uint64_t **)&v203, (uint64_t **)&v203, (size_t *)&v200, *((_DWORD *)lockc + 259), 0, 0, 1);
            operator delete(v114);
            int v118 = lockc + 195;
            if (*((char *)lockc + 1583) < 0)
            {
              int v119 = __pc;
              if (!lockc[196]) {
                goto LABEL_105;
              }
              int v118 = (void *)*v118;
            }
            else
            {
              int v119 = __pc;
              if (!*((unsigned char *)lockc + 1583))
              {
LABEL_105:
                operator delete(v119);
                if ((void)v203) {
                  operator delete((void *)v203);
                }
LABEL_107:
                int v120 = (void *)a1[4];
                if (!v120) {
                  goto LABEL_133;
                }
                int v121 = 0;
                int v122 = 0;
                long long v203 = 0uLL;
                *(void *)&long long v204 = 0;
                unint64_t v123 = ((char *)v196[313] - (char *)v196[312]) >> 4;
                unint64_t v124 = v123 + 1;
                if (v123 != -1)
                {
                  if (v124 > 0x333333333333333) {
                    abort();
                  }
                  int v125 = (char *)operator new(80 * v124);
                  int v121 = &v125[80 * v124];
                  *(void *)&long long v203 = v125;
                  *(void *)&long long v204 = v121;
                  int v122 = v125;
                }
                std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)(a1 + 312), v123);
                uint64_t v126 = v120[183];
                uint64_t v127 = v120[182];
                uint64_t v128 = v120[184];
                long long v129 = (char *)operator new(0x60uLL);
                long long v130 = v120 + 1;
                long long v131 = v120 + 151;
                lockd = v120;
                uint64_t v132 = v120 + 318;
                *(void *)long long v129 = v130;
                uint64_t v133 = v131[2];
                *(_OWORD *)(v129 + 8) = *(_OWORD *)v131;
                *((void *)v129 + 3) = v133;
                *((void *)v129 + 4) = v127;
                *((void *)v129 + 5) = v126;
                *((void *)v129 + 6) = v128;
                uint64_t v134 = v132[2];
                *(_OWORD *)(v129 + 56) = *(_OWORD *)v132;
                *((void *)v129 + 9) = v134;
                *((void *)v129 + 10) = a1 + 264;
                __pd = v129;
                *((void *)v129 + 11) = a1 + 264;
                if (v122 >= v121)
                {
                  unint64_t v138 = 0x999999999999999ALL * ((v121 - v122) >> 4);
                  if (v138 <= 1) {
                    unint64_t v138 = 1;
                  }
                  if (0xCCCCCCCCCCCCCCCDLL * ((v121 - v122) >> 4) >= 0x199999999999999) {
                    unint64_t v139 = 0x333333333333333;
                  }
                  else {
                    unint64_t v139 = v138;
                  }
                  if (v139 > 0x333333333333333) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  int32x4_t v140 = (char *)operator new(80 * v139);
                  *(void *)int32x4_t v140 = v130;
                  uint64_t v141 = v131[2];
                  *(_OWORD *)(v140 + 8) = *(_OWORD *)v131;
                  *((void *)v140 + 3) = v141;
                  *((void *)v140 + 4) = v127;
                  *((void *)v140 + 5) = v126;
                  *((void *)v140 + 6) = v128;
                  long long v142 = *(_OWORD *)v132;
                  *((void *)v140 + 9) = v132[2];
                  *(_OWORD *)(v140 + 56) = v142;
                  uint64_t v137 = v140 + 80;
                  *(void *)&long long v203 = v140;
                  *((void *)&v203 + 1) = v140 + 80;
                  *(void *)&long long v204 = &v140[80 * v139];
                  if (v122) {
                    operator delete(v122);
                  }
                }
                else
                {
                  *(void *)int v122 = v130;
                  uint64_t v135 = v131[2];
                  *(_OWORD *)(v122 + 8) = *(_OWORD *)v131;
                  *((void *)v122 + 3) = v135;
                  *((void *)v122 + 4) = v127;
                  *((void *)v122 + 5) = v126;
                  *((void *)v122 + 6) = v128;
                  long long v136 = *(_OWORD *)v132;
                  *((void *)v122 + 9) = v132[2];
                  *(_OWORD *)(v122 + 56) = v136;
                  uint64_t v137 = v122 + 80;
                }
                *((void *)&v203 + 1) = v137;
                if (v196[312] != v196[313]) {
                  operator new();
                }
                long long v143 = operator new(0x60uLL);
                *((void *)&v200 + 1) = v143 + 6;
                *(void *)&long long v201 = v143 + 6;
                long long v144 = __pd[3];
                v143[2] = __pd[2];
                v143[3] = v144;
                long long v145 = __pd[5];
                v143[4] = __pd[4];
                v143[5] = v145;
                long long v146 = __pd[1];
                *long long v143 = *__pd;
                v143[1] = v146;
                *(void *)&long long v200 = v143;
                AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a3, (uint64_t **)&v203, (uint64_t **)&v203, (size_t *)&v200, *((_DWORD *)lockd + 259), 0, 0, 1);
                operator delete(v143);
                int32x2_t v147 = lockd + 195;
                if (*((char *)lockd + 1583) < 0)
                {
                  uint64_t v148 = __pd;
                  if (!lockd[196]) {
                    goto LABEL_129;
                  }
                  int32x2_t v147 = (void *)*v147;
                }
                else
                {
                  uint64_t v148 = __pd;
                  if (!*((unsigned char *)lockd + 1583))
                  {
LABEL_129:
                    operator delete(v148);
                    if ((void)v203) {
                      operator delete((void *)v203);
                    }
                    if (a1[4])
                    {
                      AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLMeshRenderPipelineDescriptor>((uint64_t)a1, a3, 0, 0);
LABEL_138:
                      long long v203 = 0u;
                      long long v204 = 0u;
                      int v205 = 1065353216;
                      long long v200 = 0u;
                      long long v201 = 0u;
                      int v202 = 1065353216;
                      long long v197 = 0u;
                      long long v198 = 0u;
                      int v199 = 1065353216;
                      locke = v196[1];
                      if (locke)
                      {
                        uint64_t v149 = v196[317];
                        if (v149)
                        {
                          unint64_t v150 = (void *)a1[119];
                          uint64_t v185 = a1[1];
                          while (1)
                          {
                            uint64_t v151 = *(id *)&v149[3];
                            if ([v151 functionType] == 6) {
                              int v152 = [v150 requiresRaytracingEmulation];
                            }
                            else {
                              int v152 = 0;
                            }
                            unint64_t v153 = v151[5];
                            if ([v151 functionType] == 5) {
                              int v154 = 1;
                            }
                            else {
                              int v154 = v152;
                            }
                            if (v154 != 1) {
                              goto LABEL_141;
                            }
                            uint64_t v155 = (void *)[v151 name];
                            if (VisibleFunctionsMap::getVisibleFunctionOffset(locke + 469, (const char *)[v155 cStringUsingEncoding:4]) == -1)break; {
                            uint64_t v156 = v153 + *(void *)(v185 + 1200) - *(void *)&locke[150];
                            }
                            if (v156 != -1) {
                              goto LABEL_151;
                            }
LABEL_141:

                            uint64_t v149 = (int8x8_t *)*v149;
                            if (!v149) {
                              goto LABEL_158;
                            }
                          }
                          uint64_t v157 = a1[300];
                          uint64_t v158 = a1[301];
                          if (v157 == v158) {
                            goto LABEL_141;
                          }
                          while (*(_DWORD *)(*(void *)v157 + 8) != *(_DWORD *)(*(void *)(v151[6] + 56) + 8))
                          {
                            v157 += 16;
                            if (v157 == v158) {
                              goto LABEL_141;
                            }
                          }
                          uint64_t v156 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(*(void *)v157 + 96, (char *)[v155 cStringUsingEncoding:4], *(void *)(*(void *)v157 + 680));
                          if (v156 == -1) {
                            goto LABEL_141;
                          }
LABEL_151:
                          std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXG17FamilyFunctionHandle *>((uint64_t)&v203, v153, v153, (uint64_t)-[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v151 functionType], v155, v150, v156, 0));
                          goto LABEL_141;
                        }
                      }
LABEL_158:
                      lockf = *v196;
                      if (*v196)
                      {
                        unint64_t v159 = v196[322];
                        if (v159)
                        {
                          unint64_t v160 = (void *)a1[119];
                          uint64_t v186 = *a1;
                          while (1)
                          {
                            uint64_t v161 = *(id *)&v159[3];
                            if ([v161 functionType] == 6) {
                              int v162 = [v160 requiresRaytracingEmulation];
                            }
                            else {
                              int v162 = 0;
                            }
                            unint64_t v163 = v161[5];
                            if ([v161 functionType] == 5) {
                              int v164 = 1;
                            }
                            else {
                              int v164 = v162;
                            }
                            if (v164 != 1) {
                              goto LABEL_161;
                            }
                            long long v165 = (void *)[v161 name];
                            if (VisibleFunctionsMap::getVisibleFunctionOffset(lockf + 426, (const char *)[v165 cStringUsingEncoding:4]) == -1)break; {
                            uint64_t v166 = v163 + *(void *)(v186 + 1200) - *(void *)&lockf[150];
                            }
                            if (v166 != -1) {
                              goto LABEL_171;
                            }
LABEL_161:

                            unint64_t v159 = (int8x8_t *)*v159;
                            if (!v159) {
                              goto LABEL_178;
                            }
                          }
                          uint64_t v167 = a1[303];
                          uint64_t v168 = a1[304];
                          if (v167 == v168) {
                            goto LABEL_161;
                          }
                          while (*(_DWORD *)(*(void *)v167 + 8) != *(_DWORD *)(*(void *)(v161[6] + 56) + 8))
                          {
                            v167 += 16;
                            if (v167 == v168) {
                              goto LABEL_161;
                            }
                          }
                          uint64_t v166 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(*(void *)v167 + 96, (char *)[v165 cStringUsingEncoding:4], *(void *)(*(void *)v167 + 680));
                          if (v166 == -1) {
                            goto LABEL_161;
                          }
LABEL_171:
                          std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXG17FamilyFunctionHandle *>((uint64_t)&v200, v163, v163, (uint64_t)-[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v161 functionType], v165, v160, v166, 0));
                          goto LABEL_161;
                        }
                      }
LABEL_178:
                      lockg = v196[2];
                      if (!lockg || (uint64_t v169 = v196[327]) == 0) {
LABEL_198:
                      }
                        operator new();
                      unint64_t v170 = (void *)a1[119];
                      uint64_t v187 = a1[2];
                      while (1)
                      {
                        unint64_t v171 = *(id *)&v169[3];
                        if ([v171 functionType] == 6) {
                          int v172 = [v170 requiresRaytracingEmulation];
                        }
                        else {
                          int v172 = 0;
                        }
                        unint64_t v173 = v171[5];
                        if ([v171 functionType] == 5) {
                          int v174 = 1;
                        }
                        else {
                          int v174 = v172;
                        }
                        if (v174 != 1) {
                          goto LABEL_181;
                        }
                        long long v175 = (void *)[v171 name];
                        if (VisibleFunctionsMap::getVisibleFunctionOffset(lockg + 414, (const char *)[v175 cStringUsingEncoding:4]) == -1)break; {
                        uint64_t v176 = v173 + *(void *)(v187 + 1200) - *(void *)&lockg[150];
                        }
                        if (v176 != -1) {
                          goto LABEL_191;
                        }
LABEL_181:

                        uint64_t v169 = (int8x8_t *)*v169;
                        if (!v169) {
                          goto LABEL_198;
                        }
                      }
                      uint64_t v177 = a1[306];
                      uint64_t v178 = a1[307];
                      if (v177 == v178) {
                        goto LABEL_181;
                      }
                      while (*(_DWORD *)(*(void *)v177 + 8) != *(_DWORD *)(*(void *)(v171[6] + 56) + 8))
                      {
                        v177 += 16;
                        if (v177 == v178) {
                          goto LABEL_181;
                        }
                      }
                      uint64_t v176 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(*(void *)v177 + 96, (char *)[v175 cStringUsingEncoding:4], *(void *)(*(void *)v177 + 680));
                      if (v176 == -1) {
                        goto LABEL_181;
                      }
LABEL_191:
                      std::__hash_table<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,AGXG17FamilyFunctionHandle *>((uint64_t)&v197, v173, v173, (uint64_t)-[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v171 functionType], v175, v170, v176, 0));
                      goto LABEL_181;
                    }
LABEL_133:
                    if (a1[2])
                    {
                      AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLTileRenderPipelineDescriptor>((uint64_t)a1, a3, 0, 0);
                    }
                    else if (a1[1] || *a1)
                    {
                      AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLRenderPipelineDescriptor>((uint64_t)a1, a3, 0, 0);
                    }
                    goto LABEL_138;
                  }
                }
                memcpy((char *)v147 + lockd[198], (const void *)lockd[152], lockd[153]);
                goto LABEL_129;
              }
            }
            memcpy((char *)v118 + lockc[198], (const void *)lockc[152], lockc[153]);
            goto LABEL_105;
          }
        }
        memcpy((char *)v89 + lockb[198], (const void *)lockb[152], lockb[153]);
        goto LABEL_81;
      }
    }
    memcpy((char *)v60 + locka[198], (const void *)locka[152], locka[153]);
    goto LABEL_57;
  }
  locuint64_t k = a1[1];
  int v5 = 0;
  long long v6 = 0;
  long long v203 = 0uLL;
  *(void *)&long long v204 = 0;
  unint64_t v7 = ((char *)a2[301] - (char *)a2[300]) >> 4;
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 > 0x333333333333333) {
      abort();
    }
    __int32 v9 = (uint64_t *)operator new(80 * v8);
    int v5 = (char *)&v9[10 * v8];
    *(void *)&long long v203 = v9;
    *(void *)&long long v204 = v5;
    long long v6 = v9;
  }
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)(a1 + 300), v7);
  uint64_t v10 = *(void *)(lock + 1464);
  uint64_t v11 = *(void *)(lock + 1456);
  uint64_t v12 = *(void *)(lock + 1472);
  int v13 = (char *)operator new(0x60uLL);
  uint64_t v14 = lock + 8;
  uint64_t v15 = (_OWORD *)(lock + 1208);
  unsigned int v16 = (long long *)(lock + 2544);
  *(void *)int v13 = lock + 8;
  uint64_t v17 = *(void *)(lock + 1224);
  *(_OWORD *)(v13 + 8) = *(_OWORD *)(lock + 1208);
  *((void *)v13 + 3) = v17;
  *((void *)v13 + 4) = v11;
  *((void *)v13 + 5) = v10;
  *((void *)v13 + 6) = v12;
  uint64_t v18 = *(void *)(lock + 2560);
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(lock + 2544);
  *((void *)v13 + 9) = v18;
  *((void *)v13 + 10) = a1 + 120;
  std::string __p = v13;
  *((void *)v13 + 11) = a1 + 120;
  if (v6 >= (uint64_t *)v5)
  {
    unint64_t v22 = 0x999999999999999ALL * ((v5 - (char *)v6) >> 4);
    if (v22 <= 1) {
      unint64_t v22 = 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((v5 - (char *)v6) >> 4) >= 0x199999999999999) {
      unint64_t v23 = 0x333333333333333;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v24 = (char *)operator new(80 * v23);
    *(void *)unsigned int v24 = v14;
    uint64_t v25 = *(void *)(lock + 1224);
    *(_OWORD *)(v24 + 8) = *v15;
    *((void *)v24 + 3) = v25;
    *((void *)v24 + 4) = v11;
    *((void *)v24 + 5) = v10;
    *((void *)v24 + 6) = v12;
    long long v26 = *v16;
    *((void *)v24 + 9) = *(void *)(lock + 2560);
    *(_OWORD *)(v24 + 56) = v26;
    unsigned int v21 = v24 + 80;
    *(void *)&long long v203 = v24;
    *((void *)&v203 + 1) = v24 + 80;
    *(void *)&long long v204 = &v24[80 * v23];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *long long v6 = v14;
    uint64_t v19 = *(void *)(lock + 1224);
    *(_OWORD *)(v6 + 1) = *v15;
    v6[3] = v19;
    v6[4] = v11;
    v6[5] = v10;
    v6[6] = v12;
    long long v20 = *v16;
    v6[9] = *(void *)(lock + 2560);
    *(_OWORD *)(v6 + 7) = v20;
    unsigned int v21 = v6 + 10;
  }
  *((void *)&v203 + 1) = v21;
  if (v196[300] != v196[301]) {
    operator new();
  }
  int v27 = operator new(0x60uLL);
  *((void *)&v200 + 1) = v27 + 6;
  *(void *)&long long v201 = v27 + 6;
  long long v28 = __p[3];
  v27[2] = __p[2];
  v27[3] = v28;
  long long v29 = __p[5];
  v27[4] = __p[4];
  v27[5] = v29;
  long long v30 = __p[1];
  *int v27 = *__p;
  v27[1] = v30;
  *(void *)&long long v200 = v27;
  AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load((uint64_t)a3, (uint64_t **)&v203, (uint64_t **)&v203, (size_t *)&v200, *(_DWORD *)(lock + 1036), 0, 0, 1);
  operator delete(v27);
  __int32 v31 = (void *)(lock + 1560);
  if (*(char *)(lock + 1583) < 0)
  {
    int v32 = __p;
    if (!*(void *)(lock + 1568)) {
      goto LABEL_33;
    }
    __int32 v31 = (void *)*v31;
  }
  else
  {
    int v32 = __p;
    if (!*(unsigned char *)(lock + 1583))
    {
LABEL_33:
      operator delete(v32);
      if ((void)v203) {
        operator delete((void *)v203);
      }
      goto LABEL_35;
    }
  }
  memcpy((char *)v31 + *(void *)(lock + 1584), *(const void **)(lock + 1216), *(void *)(lock + 1224));
  goto LABEL_33;
}

void sub_242B7B6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, os_unfair_lock_t lock, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  os_unfair_lock_unlock(v43);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100]((uint64_t)&a43);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v44 - 224);
  std::unordered_map<unsigned long long,std::pair<unsigned long long,unsigned long long>>::~unordered_map[abi:nn180100](v44 - 176);
  _Unwind_Resume(a1);
}

void sub_242B7BAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  operator delete(__p);
  if (!*(void *)(v10 - 176)) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v10 - 176));
  _Unwind_Resume(a1);
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setVertexVariant(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 8) = a2;
  if (a2)
  {
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    unsigned int v5 = *(_DWORD *)(a2 + 2272);
    if (v5)
    {
      uint64_t v6 = (int)*MEMORY[0x263F4B188];
      unsigned int v7 = -1;
      do
      {
        unsigned int v8 = v7++;
        unsigned int v9 = __clz(__rbit32(v5));
        *((void *)v25 + v7) = *(void *)(a2 + 2448 + 8 * v9) + v6 + 32;
        v5 &= ~(1 << v9);
      }
      while (v5);
      *((void *)&v25[1] + v8) = a2 + 3616;
      int v10 = v7 + 2;
      if (v7 == -2)
      {
LABEL_6:
        *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a2 + 984);
        int v11 = *(_DWORD *)(a2 + 996);
        *(_DWORD *)(a1 + 1016) = v11;
        int v12 = *(_DWORD *)(a2 + 1028);
        *(_DWORD *)(a1 + 1024) = v12;
        int v13 = *(_DWORD *)(a2 + 1024);
        *(_DWORD *)(a1 + 1028) = v13;
        *(_DWORD *)(a1 + 1032) = a3;
        *(void *)(a1 + 1176) = *(void *)(a2 + 2336);
        int v14 = v11 - *(_DWORD *)(a2 + 992);
        *(_DWORD *)(a1 + 1020) = v14;
        *(_DWORD *)(a1 + 1012) = v11 + v14 * (a3 - 1);
        *(_DWORD *)(a1 + 1040) = v12 - v13;
        AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1056), (unsigned int *)(a2 + 880));
        *(unsigned char *)(a1 + 1160) = *(unsigned char *)(a2 + 1050);
        *(_WORD *)(a1 + 1161) = *(_WORD *)(a2 + 1052);
        *(unsigned char *)(a1 + 1164) = *(unsigned char *)(a2 + 1046);
        *(_DWORD *)(a1 + 1200) = *(_DWORD *)(a2 + 1040);
        return;
      }
    }
    else
    {
      *(void *)&v25[0] = a2 + 3616;
      int v10 = 1;
    }
    uint64_t v15 = 0;
    uint64_t v16 = *(unsigned int *)(a1 + 640);
    do
    {
      if (v16)
      {
        uint64_t v18 = 0;
        uint64_t v19 = (long long *)*((void *)v25 + v15);
        unsigned int v20 = v16;
        unsigned int v21 = (int *)(a1 + 104);
        while (1)
        {
          int v22 = *v21;
          v21 += 6;
          if (*((_DWORD *)v19 + 4) == v22) {
            break;
          }
          if (v16 == ++v18) {
            goto LABEL_20;
          }
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if (v18 == v16)
      {
        uint64_t v19 = (long long *)*((void *)v25 + v15);
        unsigned int v20 = v16;
LABEL_20:
        uint64_t v23 = a1 + 24 * v20;
        long long v24 = *v19;
        *(void *)(v23 + 104) = *((void *)v19 + 2);
        *(_OWORD *)(v23 + 88) = v24;
        uint64_t v17 = (*(_DWORD *)(a1 + 640) + 1);
        *(_DWORD *)(a1 + 640) = v17;
      }
      else
      {
        uint64_t v17 = v16;
        LOBYTE(v16) = v18;
      }
      *(_DWORD *)(a1 + 644) |= 1 << v16;
      ++v15;
      uint64_t v16 = v17;
    }
    while (v15 != v10);
    goto LABEL_6;
  }
}

double AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setFragmentVariant(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)a1 = a2;
  if (a2)
  {
    memset(v32, 0, sizeof(v32));
    unsigned int v6 = *(_DWORD *)(a2 + 2272);
    if (v6)
    {
      LODWORD(v7) = 0;
      uint64_t v8 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v9 = __clz(__rbit32(v6));
        *((void *)v32 + v7) = *(void *)(a2 + 2448 + 8 * v9) + v8 + 32;
        uint64_t v7 = (v7 + 1);
        v6 &= ~(1 << v9);
      }
      while (v6);
      if (v7)
      {
        uint64_t v10 = 0;
        uint64_t v11 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v11)
          {
            uint64_t v13 = 0;
            int v14 = (long long *)*((void *)v32 + v10);
            unsigned int v15 = v11;
            uint64_t v16 = (int *)(a1 + 104);
            while (1)
            {
              int v17 = *v16;
              v16 += 6;
              if (*((_DWORD *)v14 + 4) == v17) {
                break;
              }
              if (v11 == ++v13) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            LODWORD(v13) = 0;
          }
          if (v13 == v11)
          {
            int v14 = (long long *)*((void *)v32 + v10);
            unsigned int v15 = v11;
LABEL_17:
            uint64_t v18 = a1 + 24 * v15;
            long long v19 = *v14;
            *(void *)(v18 + 104) = *((void *)v14 + 2);
            *(_OWORD *)(v18 + 88) = v19;
            uint64_t v12 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v12;
          }
          else
          {
            uint64_t v12 = v11;
            LOBYTE(v11) = v13;
          }
          *(_DWORD *)(a1 + 648) |= 1 << v11;
          ++v10;
          uint64_t v11 = v12;
        }
        while (v10 != v7);
      }
    }
    *(_DWORD *)(a1 + 756) = (*(unsigned __int8 *)(a2 + 3389) << 13) | (*(unsigned __int8 *)(a2 + 3385) << 12) | *(_DWORD *)(a1 + 756) & 0xFFFFCFFF;
    unsigned int v20 = *(_DWORD *)(a1 + 732) & 0xFFDFFFFF | (((*(_DWORD *)(a2 + 3304) >> 21) & 1) << 21);
    *(_DWORD *)(a1 + 732) = v20;
    unsigned int v21 = v20 & 0xFFBFFFFF | (((*(_DWORD *)(a2 + 3304) >> 22) & 1) << 22);
    *(_DWORD *)(a1 + 732) = v21;
    unsigned int v22 = v21 & 0xFDFFFFFF | (((*(_DWORD *)(a2 + 3304) >> 25) & 1) << 25);
    *(_DWORD *)(a1 + 732) = v22;
    unsigned int v23 = v22 & 0xFBFFFFFF | (((*(_DWORD *)(a2 + 3304) >> 26) & 1) << 26);
    *(_DWORD *)(a1 + 732) = v23;
    *(_DWORD *)(a1 + 732) = *(_DWORD *)(a2 + 3304) & 0xE0000000 | v23 & 0x1FFFFFFF;
    *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 744) & 0xFFFE0000 | *(_DWORD *)(a2 + 3308) & 0x1FFFF;
    int v24 = *(unsigned __int8 *)(a2 + 3390);
    BOOL v25 = (v24 - 1) < 2;
    unsigned int v26 = (v24 & 3) << 22;
    if ((v25 & a4) != 0) {
      unsigned int v26 = 0;
    }
    *(int8x8_t *)(a1 + 736) = vorr_s8((int8x8_t)(*(void *)(a1 + 736) & 0xFF3FFFFFFF3FFFFFLL), (int8x8_t)vdup_n_s32(v26));
    *(_DWORD *)(a1 + 1296) = *(_DWORD *)(a2 + 984);
    int v27 = *(_DWORD *)(a2 + 996);
    *(_DWORD *)(a1 + 1304) = v27;
    int v28 = *(_DWORD *)(a2 + 1028);
    *(_DWORD *)(a1 + 1312) = v28;
    int v29 = *(_DWORD *)(a2 + 1024);
    *(_DWORD *)(a1 + 1316) = v29;
    *(_DWORD *)(a1 + 1320) = a3;
    *(void *)(a1 + 1464) = *(void *)(a2 + 2336);
    int v30 = v27 - *(_DWORD *)(a2 + 992);
    *(_DWORD *)(a1 + 1308) = v30;
    *(_DWORD *)(a1 + 1300) = v27 + v30 * (a3 - 1);
    *(_DWORD *)(a1 + 1328) = v28 - v29;
    *(void *)&double result = AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1344), (unsigned int *)(a2 + 880)).n128_u64[0];
    *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1050);
    *(_WORD *)(a1 + 1449) = *(_WORD *)(a2 + 1052);
    *(unsigned char *)(a1 + 1452) = *(unsigned char *)(a2 + 1046);
    *(_DWORD *)(a1 + 1488) = *(_DWORD *)(a2 + 1040);
  }
  else
  {
    *(_DWORD *)(a1 + 732) = *(_DWORD *)(a1 + 732) & 0x199FFFFF | 0x200000;
    *(_DWORD *)(a1 + 744) &= 0xFFFE0000;
    *(void *)&double result = *(void *)(a1 + 736) | 0xC0000000C00000;
    *(double *)(a1 + 736) = result;
  }
  return result;
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setTileVariant(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 16) = a2;
  if (a2)
  {
    memset(v23, 0, sizeof(v23));
    unsigned int v5 = *(_DWORD *)(a2 + 2272);
    if (v5)
    {
      LODWORD(v6) = 0;
      uint64_t v7 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v8 = __clz(__rbit32(v5));
        *((void *)v23 + v6) = *(void *)(a2 + 2448 + 8 * v8) + v7 + 32;
        uint64_t v6 = (v6 + 1);
        v5 &= ~(1 << v8);
      }
      while (v5);
      if (v6)
      {
        uint64_t v9 = 0;
        uint64_t v10 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v10)
          {
            uint64_t v12 = 0;
            uint64_t v13 = (long long *)*((void *)v23 + v9);
            unsigned int v14 = v10;
            unsigned int v15 = (int *)(a1 + 104);
            while (1)
            {
              int v16 = *v15;
              v15 += 6;
              if (*((_DWORD *)v13 + 4) == v16) {
                break;
              }
              if (v10 == ++v12) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            LODWORD(v12) = 0;
          }
          if (v12 == v10)
          {
            uint64_t v13 = (long long *)*((void *)v23 + v9);
            unsigned int v14 = v10;
LABEL_17:
            uint64_t v17 = a1 + 24 * v14;
            long long v18 = *v13;
            *(void *)(v17 + 104) = *((void *)v13 + 2);
            *(_OWORD *)(v17 + 88) = v18;
            uint64_t v11 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v11;
          }
          else
          {
            uint64_t v11 = v10;
            LOBYTE(v10) = v12;
          }
          *(_DWORD *)(a1 + 648) |= 1 << v10;
          ++v9;
          uint64_t v10 = v11;
        }
        while (v9 != v6);
      }
    }
    *(_DWORD *)(a1 + 1584) = *(_DWORD *)(a2 + 984);
    int v19 = *(_DWORD *)(a2 + 996);
    *(_DWORD *)(a1 + 1592) = v19;
    int v20 = *(_DWORD *)(a2 + 1028);
    *(_DWORD *)(a1 + 1600) = v20;
    int v21 = *(_DWORD *)(a2 + 1024);
    *(_DWORD *)(a1 + 1604) = v21;
    *(_DWORD *)(a1 + 1608) = a3;
    *(void *)(a1 + 1752) = *(void *)(a2 + 2336);
    int v22 = v19 - *(_DWORD *)(a2 + 992);
    *(_DWORD *)(a1 + 1596) = v22;
    *(_DWORD *)(a1 + 1588) = v19 + v22 * (a3 - 1);
    *(_DWORD *)(a1 + 1616) = v20 - v21;
    AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1632), (unsigned int *)(a2 + 880));
    *(unsigned char *)(a1 + 1736) = *(unsigned char *)(a2 + 1050);
    *(_WORD *)(a1 + 1737) = *(_WORD *)(a2 + 1052);
    *(unsigned char *)(a1 + 1740) = *(unsigned char *)(a2 + 1046);
    *(_DWORD *)(a1 + 1776) = *(_DWORD *)(a2 + 1040);
  }
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setObjectVariant(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 24) = a2;
  if (a2)
  {
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    unsigned int v4 = *(_DWORD *)(a2 + 2272);
    if (v4)
    {
      LODWORD(v5) = 0;
      uint64_t v6 = (int)*MEMORY[0x263F4B188];
      do
      {
        unsigned int v7 = __clz(__rbit32(v4));
        *((void *)v21 + v5) = *(void *)(a2 + 2448 + 8 * v7) + v6 + 32;
        uint64_t v5 = (v5 + 1);
        v4 &= ~(1 << v7);
      }
      while (v4);
      if (v5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(unsigned int *)(a1 + 640);
        do
        {
          if (v9)
          {
            uint64_t v11 = 0;
            uint64_t v12 = (long long *)*((void *)v21 + v8);
            unsigned int v13 = v9;
            unsigned int v14 = (int *)(a1 + 104);
            while (1)
            {
              int v15 = *v14;
              v14 += 6;
              if (*((_DWORD *)v12 + 4) == v15) {
                break;
              }
              if (v9 == ++v11) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            LODWORD(v11) = 0;
          }
          if (v11 == v9)
          {
            uint64_t v12 = (long long *)*((void *)v21 + v8);
            unsigned int v13 = v9;
LABEL_17:
            uint64_t v16 = a1 + 24 * v13;
            long long v17 = *v12;
            *(void *)(v16 + 104) = *((void *)v12 + 2);
            *(_OWORD *)(v16 + 88) = v17;
            uint64_t v10 = (*(_DWORD *)(a1 + 640) + 1);
            *(_DWORD *)(a1 + 640) = v10;
          }
          else
          {
            uint64_t v10 = v9;
            LOBYTE(v9) = v11;
          }
          *(_DWORD *)(a1 + 652) |= 1 << v9;
          ++v8;
          uint64_t v9 = v10;
        }
        while (v8 != v5);
      }
    }
    *(_DWORD *)(a1 + 1872) = *(_DWORD *)(a2 + 984);
    int v18 = *(_DWORD *)(a2 + 996);
    *(_DWORD *)(a1 + 1880) = v18;
    int v19 = *(_DWORD *)(a2 + 1028);
    *(_DWORD *)(a1 + 1888) = v19;
    int v20 = *(_DWORD *)(a2 + 1024);
    *(_DWORD *)(a1 + 1892) = v20;
    *(_DWORD *)(a1 + 1896) = 1;
    *(void *)(a1 + 2040) = *(void *)(a2 + 2336);
    *(_DWORD *)(a1 + 1884) = v18 - *(_DWORD *)(a2 + 992);
    *(_DWORD *)(a1 + 1876) = v18;
    *(_DWORD *)(a1 + 1904) = v19 - v20;
    AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 1920), (unsigned int *)(a2 + 880));
    *(unsigned char *)(a1 + 2024) = *(unsigned char *)(a2 + 1050);
    *(_WORD *)(a1 + 2025) = *(_WORD *)(a2 + 1052);
    *(unsigned char *)(a1 + 2028) = *(unsigned char *)(a2 + 1046);
    *(_DWORD *)(a1 + 2064) = *(_DWORD *)(a2 + 1040);
  }
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::setMeshVariant(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 32) = a2;
  if (!a2) {
    return;
  }
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  unsigned int v4 = *(_DWORD *)(a2 + 2272);
  if (!v4)
  {
    *(void *)&v25[0] = a2 + 3384;
    int v9 = 1;
    goto LABEL_12;
  }
  uint64_t v5 = (int)*MEMORY[0x263F4B188];
  unsigned int v6 = -1;
  do
  {
    unsigned int v7 = v6++;
    unsigned int v8 = __clz(__rbit32(v4));
    *((void *)v25 + v6) = *(void *)(a2 + 2448 + 8 * v8) + v5 + 32;
    v4 &= ~(1 << v8);
  }
  while (v4);
  *((void *)&v25[1] + v7) = a2 + 3384;
  int v9 = v6 + 2;
  if (v6 != -2)
  {
LABEL_12:
    uint64_t v15 = 0;
    uint64_t v16 = *(unsigned int *)(a1 + 640);
    do
    {
      if (v16)
      {
        uint64_t v18 = 0;
        int v19 = (long long *)*((void *)v25 + v15);
        unsigned int v20 = v16;
        int v21 = (int *)(a1 + 104);
        while (1)
        {
          int v22 = *v21;
          v21 += 6;
          if (*((_DWORD *)v19 + 4) == v22) {
            break;
          }
          if (v16 == ++v18) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if (v18 == v16)
      {
        int v19 = (long long *)*((void *)v25 + v15);
        unsigned int v20 = v16;
LABEL_23:
        uint64_t v23 = a1 + 24 * v20;
        long long v24 = *v19;
        *(void *)(v23 + 104) = *((void *)v19 + 2);
        *(_OWORD *)(v23 + 88) = v24;
        uint64_t v17 = (*(_DWORD *)(a1 + 640) + 1);
        *(_DWORD *)(a1 + 640) = v17;
      }
      else
      {
        uint64_t v17 = v16;
        LOBYTE(v16) = v18;
      }
      *(_DWORD *)(a1 + 656) |= 1 << v16;
      ++v15;
      uint64_t v16 = v17;
    }
    while (v15 != v9);
  }
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 848) = 0;
  uint64_t v10 = *(unsigned int *)(a2 + 3284);
  if (v10 > 3) {
    int v11 = 0;
  }
  else {
    int v11 = dword_242EA88F0[v10];
  }
  *(_DWORD *)(a1 + 864) = v11;
  *(_DWORD *)(a1 + 2160) = *(_DWORD *)(a2 + 984);
  int v12 = *(_DWORD *)(a2 + 996);
  *(_DWORD *)(a1 + 2168) = v12;
  int v13 = *(_DWORD *)(a2 + 1028);
  *(_DWORD *)(a1 + 2176) = v13;
  int v14 = *(_DWORD *)(a2 + 1024);
  *(_DWORD *)(a1 + 2180) = v14;
  *(_DWORD *)(a1 + 2184) = 1;
  *(void *)(a1 + 2328) = *(void *)(a2 + 2336);
  *(_DWORD *)(a1 + 2172) = v12 - *(_DWORD *)(a2 + 992);
  *(_DWORD *)(a1 + 2164) = v12;
  *(_DWORD *)(a1 + 2192) = v13 - v14;
  AGX::RayPayloadSizeAlignImpl<AGX::HAL200::Classes>::merge((unsigned int *)(a1 + 2208), (unsigned int *)(a2 + 880));
  *(unsigned char *)(a1 + 2312) = *(unsigned char *)(a2 + 1050);
  *(_WORD *)(a1 + 2313) = *(_WORD *)(a2 + 1052);
  *(unsigned char *)(a1 + 2316) = *(unsigned char *)(a2 + 1046);
  *(_DWORD *)(a1 + 2352) = *(_DWORD *)(a2 + 1040);
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLMeshRenderPipelineDescriptor>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a1;
  uint64_t v134 = *MEMORY[0x263EF8340];
  unsigned int v7 = (uint64_t *)a2[101];
  *(void *)(a1 + 952) = a2;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v8);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 8));
  }
  uint64_t v111 = v6;
  if (*(void *)v6)
  {
    AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(*(void *)v6);
    int v9 = *(unsigned __int8 *)(v6 + 1448);
    uint64_t v10 = *(void *)v6;
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)v6 + 1936);
    if (v9) {
      *(_DWORD *)(v10 + 3304) &= ~0x200000u;
    }
    uint64_t v11 = *(void *)v6;
    unsigned int v12 = *(_DWORD *)(v6 + 732) & 0xFFDFFFFF | (((*(_DWORD *)(*(void *)v6 + 3304) >> 21) & 1) << 21);
    *(_DWORD *)(v6 + 732) = v12;
    unsigned int v13 = v12 & 0xFFBFFFFF | (((*(_DWORD *)(v11 + 3304) >> 22) & 1) << 22);
    *(_DWORD *)(v6 + 732) = v13;
    unsigned int v14 = v13 & 0xFDFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 25) & 1) << 25);
    *(_DWORD *)(v6 + 732) = v14;
    unsigned int v15 = v14 & 0xFBFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 26) & 1) << 26);
    *(_DWORD *)(v6 + 732) = v15;
    *(_DWORD *)(v6 + 732) = *(_DWORD *)(v11 + 3304) & 0xE0000000 | v15 & 0x1FFFFFFF;
    *(_DWORD *)(v6 + 744) = *(_DWORD *)(v6 + 744) & 0xFFFE0000 | *(_DWORD *)(v11 + 3308) & 0x1FFFF;
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 3390);
    LOBYTE(v15) = (v11 - 1) < 2;
    unsigned int v16 = (v11 & 3) << 22;
    if ((v15 & ((v7[911] & 0x8000) != 0)) != 0) {
      unsigned int v16 = 0;
    }
    *(int8x8_t *)(v6 + 736) = vorr_s8((int8x8_t)(*(void *)(v6 + 736) & 0xFF3FFFFFFF3FFFFFLL), (int8x8_t)vdup_n_s32(v16));
  }
  uint64_t v17 = *(void *)(v6 + 24);
  if (v17)
  {
    AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v17);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 24));
  }
  uint64_t v18 = *(void *)(v6 + 32);
  if (v18)
  {
    AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v18);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 32));
  }
  uint64_t v19 = *(void *)(v6 + 16);
  if (v19)
  {
    AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v19);
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 16) + 1936);
  }
  if ([a4 maxAccelerationStructureTraversalDepth]) {
    *(_DWORD *)(v6 + 2812) = ([a4 maxAccelerationStructureTraversalDepth] + 7) & 0xFFFFFFF8;
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::computeMaximumRayPayloadSizes((unsigned int *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTables((uint64_t *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParams((int8x8_t **)v6, v7);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::emitLabelUpdateSignpost((uint64_t *)v6, a3);
  unint64_t v110 = (void *)[a4 meshLinkedFunctions];
  unsigned int v20 = (void *)[a4 objectLinkedFunctions];
  uint64_t v106 = (void *)[a4 fragmentLinkedFunctions];
  int v21 = *(int8x8_t **)(v6 + 24);
  __int32 v108 = v7;
  unint64_t v109 = a4;
  if (v21)
  {
    int v22 = (void *)(v6 + 2640);
    unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(objc_msgSend((id)objc_msgSend(v20, "binaryFunctions"), "count")+ objc_msgSend((id)objc_msgSend(v20, "functions", v106), "count"))/ *(float *)(v6 + 2672));
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(v6 + 2648);
    if (prime > *(void *)&v24) {
      goto LABEL_33;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 2664) / *(float *)(v6 + 2672));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        unint64_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_33:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v6 + 2640, prime);
    }
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    long long v107 = v20;
    int v28 = (void *)[v20 functions];
    uint64_t v29 = 0;
    uint64_t v30 = [v28 countByEnumeratingWithState:&v125 objects:&v131 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v126;
      obuint64_t j = v21 + 428;
      do
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v126 != v31) {
            objc_enumerationMutation(v28);
          }
          int v34 = *(void **)(*((void *)&v125 + 1) + 8 * i);
          int v35 = (void *)[v34 name];
          if ([v34 functionType] == 6) {
            int v36 = [a2 requiresRaytracingEmulation];
          }
          else {
            int v36 = 0;
          }
          if ([v34 functionType] == 5) {
            int v37 = 1;
          }
          else {
            int v37 = v36;
          }
          if (v37 == 1)
          {
            uint64_t VisibleFunctionOffset = VisibleFunctionsMap::getVisibleFunctionOffset(obj, (const char *)[v35 cStringUsingEncoding:4]);
            if (VisibleFunctionOffset != -1
              && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v22, (unint64_t)v34))
            {
              uint64_t v33 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v34 functionType], v35, a2, VisibleFunctionOffset, 0);
LABEL_37:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v22, (unint64_t)v34, (uint64_t)v34, (uint64_t)v33);
              continue;
            }
          }
          else if ([v34 functionType] == 6 {
                 && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v22, (unint64_t)v34))
          }
          {
            uint64_t v33 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v35 device:a2 handle:v29++ dylib:0];
            goto LABEL_37;
          }
        }
        uint64_t v30 = [v28 countByEnumeratingWithState:&v125 objects:&v131 count:16];
      }
      while (v30);
    }
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    uint64_t v39 = (void *)[v107 privateFunctions];
    uint64_t v40 = [v39 countByEnumeratingWithState:&v121 objects:v130 count:16];
    if (v40)
    {
      uint64_t v41 = *(void *)v122;
      do
      {
        for (uint64_t j = 0; j != v40; ++j)
        {
          if (*(void *)v122 != v41) {
            objc_enumerationMutation(v39);
          }
          if ([*(id *)(*((void *)&v121 + 1) + 8 * j) functionType] == 6) {
            v29 += [a2 requiresRaytracingEmulation] ^ 1;
          }
        }
        uint64_t v40 = [v39 countByEnumeratingWithState:&v121 objects:v130 count:16];
      }
      while (v40);
    }
    id obja = (id)[v107 binaryFunctions];
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    uint64_t v43 = [obja countByEnumeratingWithState:&v117 objects:v129 count:16];
    if (v43)
    {
      uint64_t v44 = *(void *)v118;
      do
      {
        for (uint64_t k = 0; k != v43; ++k)
        {
          if (*(void *)v118 != v44) {
            objc_enumerationMutation(obja);
          }
          uint64_t v46 = *(void **)(*((void *)&v117 + 1) + 8 * k);
          uint64_t v47 = [v46 name];
          if ([v46 vendorPrivate]
            && ([v46 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v22, (unint64_t)v46))
            {
              uint64_t v48 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v47 device:a2 handle:v29++ dylib:0];
LABEL_67:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v22, (unint64_t)v46, v48);
              continue;
            }
          }
          else
          {
            uint64_t v49 = [v46 vendorPrivate];
            uint64_t v50 = v49;
            if (v49)
            {
              uint64_t v51 = *(void *)(v49 + 56);
              unint64_t v52 = (void *)[v46 name];
              uint64_t v53 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v51 + 96, (char *)[v52 cStringUsingEncoding:4], *(void *)(*(void *)(v50 + 56) + 680));
              if (v53 != -1
                && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v22, (unint64_t)v46))
              {
                uint64_t v48 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v46 functionType], v52, a2, v53, v50);
                goto LABEL_67;
              }
            }
          }
        }
        uint64_t v43 = [obja countByEnumeratingWithState:&v117 objects:v129 count:16];
      }
      while (v43);
    }
    uint64_t v6 = v111;
    unsigned int v7 = v108;
    a4 = v109;
  }
  uint64_t v54 = *(int8x8_t **)(v6 + 32);
  if (v54)
  {
    long long v55 = (void *)(v6 + 2680);
    unint64_t v56 = vcvtps_u32_f32((float)(unint64_t)(objc_msgSend((id)objc_msgSend(v110, "binaryFunctions"), "count")+ objc_msgSend((id)objc_msgSend(v110, "functions"), "count"))/ *(float *)(v6 + 2712));
    if (v56 == 1)
    {
      unint64_t v56 = 2;
    }
    else if ((v56 & (v56 - 1)) != 0)
    {
      unint64_t v56 = std::__next_prime(v56);
    }
    int8x8_t v57 = *(int8x8_t *)(v111 + 2688);
    if (v56 > *(void *)&v57) {
      goto LABEL_97;
    }
    if (v56 < *(void *)&v57)
    {
      unint64_t v58 = vcvtps_u32_f32((float)*(unint64_t *)(v111 + 2704) / *(float *)(v111 + 2712));
      if (*(void *)&v57 < 3uLL || (uint8x8_t v59 = (uint8x8_t)vcnt_s8(v57), v59.i16[0] = vaddlv_u8(v59), v59.u32[0] > 1uLL))
      {
        unint64_t v58 = std::__next_prime(v58);
      }
      else
      {
        uint64_t v60 = 1 << -(char)__clz(v58 - 1);
        if (v58 >= 2) {
          unint64_t v58 = v60;
        }
      }
      if (v56 <= v58) {
        unint64_t v56 = v58;
      }
      if (v56 < *(void *)&v57) {
LABEL_97:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v6 + 2680, v56);
    }
    long long v127 = 0u;
    long long v128 = 0u;
    long long v125 = 0u;
    long long v126 = 0u;
    __int32 v61 = objc_msgSend(v110, "functions", v106);
    uint64_t v62 = 0;
    uint64_t v63 = [v61 countByEnumeratingWithState:&v125 objects:&v131 count:16];
    if (v63)
    {
      uint64_t v64 = *(void *)v126;
      objb = v54 + 441;
      do
      {
        for (uint64_t m = 0; m != v63; ++m)
        {
          if (*(void *)v126 != v64) {
            objc_enumerationMutation(v61);
          }
          unint64_t v66 = *(void **)(*((void *)&v125 + 1) + 8 * m);
          __int32 v67 = (void *)[v66 name];
          if ([v66 functionType] == 6) {
            int v68 = [a2 requiresRaytracingEmulation];
          }
          else {
            int v68 = 0;
          }
          if ([v66 functionType] == 5) {
            int v69 = 1;
          }
          else {
            int v69 = v68;
          }
          if (v69 == 1)
          {
            uint64_t v70 = VisibleFunctionsMap::getVisibleFunctionOffset(objb, (const char *)[v67 cStringUsingEncoding:4]);
            if (v70 != -1
              && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v55, (unint64_t)v66))
            {
              int v71 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v66 functionType], v67, a2, v70, 0);
LABEL_101:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v55, (unint64_t)v66, (uint64_t)v66, (uint64_t)v71);
              continue;
            }
          }
          else if ([v66 functionType] == 6 {
                 && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v55, (unint64_t)v66))
          }
          {
            int v71 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v67 device:a2 handle:v62++ dylib:0];
            goto LABEL_101;
          }
        }
        uint64_t v63 = [v61 countByEnumeratingWithState:&v125 objects:&v131 count:16];
      }
      while (v63);
    }
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    int8x8_t v72 = (void *)[v110 privateFunctions];
    uint64_t v73 = [v72 countByEnumeratingWithState:&v121 objects:v130 count:16];
    if (v73)
    {
      uint64_t v74 = *(void *)v122;
      do
      {
        for (uint64_t n = 0; n != v73; ++n)
        {
          if (*(void *)v122 != v74) {
            objc_enumerationMutation(v72);
          }
          if ([*(id *)(*((void *)&v121 + 1) + 8 * n) functionType] == 6) {
            v62 += [a2 requiresRaytracingEmulation] ^ 1;
          }
        }
        uint64_t v73 = [v72 countByEnumeratingWithState:&v121 objects:v130 count:16];
      }
      while (v73);
    }
    objCC_SHA256_CTX c = (id)[v110 binaryFunctions];
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    uint64_t v76 = [objc countByEnumeratingWithState:&v117 objects:v129 count:16];
    if (v76)
    {
      uint64_t v77 = *(void *)v118;
      do
      {
        for (iuint64_t i = 0; ii != v76; ++ii)
        {
          if (*(void *)v118 != v77) {
            objc_enumerationMutation(objc);
          }
          unint64_t v80 = *(void **)(*((void *)&v117 + 1) + 8 * ii);
          uint64_t v81 = [v80 name];
          if ([v80 vendorPrivate]
            && ([v80 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v55, (unint64_t)v80))
            {
              __int8 v79 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v81 device:a2 handle:v62++ dylib:0];
LABEL_131:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v55, (unint64_t)v80, v79);
              continue;
            }
          }
          else
          {
            uint64_t v82 = [v80 vendorPrivate];
            uint64_t v83 = v82;
            if (v82)
            {
              uint64_t v84 = *(void *)(v82 + 56);
              int v85 = (void *)[v80 name];
              uint64_t v86 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v84 + 96, (char *)[v85 cStringUsingEncoding:4], *(void *)(*(void *)(v83 + 56) + 680));
              if (v86 != -1
                && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v55, (unint64_t)v80))
              {
                __int8 v79 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v80 functionType], v85, a2, v86, v83);
                goto LABEL_131;
              }
            }
          }
        }
        uint64_t v76 = [objc countByEnumeratingWithState:&v117 objects:v129 count:16];
      }
      while (v76);
    }
    uint64_t v6 = v111;
    unsigned int v7 = v108;
    a4 = v109;
  }
  if (*(void *)v6) {
    AGX::constructVisibleFunctionHandles_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::FragmentProgramVariant>(a2, v106, *(int8x8_t **)v6, v6 + 2560);
  }
  if (a4 && [a4 explicitVisibilityGroupID] != -1)
  {
    *(_DWORD *)(v111 + 712) = [a4 explicitVisibilityGroupID];
    *(unsigned char *)(v111 + 716) = 1;
  }
  if (*(unsigned char *)(v111 + 716))
  {
    *(_DWORD *)(v111 + 744) = *(_DWORD *)(v111 + 744) & 0xFFFE0000 | *(_DWORD *)(v111 + 712) & 0x1FFFF;
    unsigned int v87 = *(_DWORD *)(v111 + 732);
    if (!(v87 >> 30)) {
      *(_DWORD *)(v111 + 732) = v87 & 0x1FFFFFFF;
    }
  }
  if (*(void *)v111 && (*(unsigned char *)(*(void *)v111 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v111 + 710) = 1;
  }
  uint64_t v88 = *(void *)(v111 + 8);
  if (v88 && (*(unsigned char *)(v88 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v111 + 710) = 1;
  }
  uint64_t v89 = *(void *)(v111 + 16);
  if (v89 && (*(unsigned char *)(v89 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v111 + 710) = 1;
  }
  uint64_t v90 = *(void *)(v111 + 24);
  if (v90 && (*(unsigned char *)(v90 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v111 + 710) = 1;
  }
  uint64_t v91 = *(void *)(v111 + 32);
  if (v91 && (*(unsigned char *)(v91 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v111 + 710) = 1;
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection(v111, v7);
  if (*(unsigned char *)(v111 + 709))
  {
    AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::Allocation((uint64_t)&v131, (os_unfair_lock_s *)(a2[101] + 6344), [a4 resourceIndex]);
    unsigned int v92 = *(_DWORD *)(v111 + 928);
    *(_DWORD *)(v111 + 928) = v131;
    unsigned int v131 = v92;
    int v93 = *(os_unfair_lock_s **)(v111 + 936);
    unint64_t v94 = v132;
    *(void *)(v111 + 936) = v132;
    uint64_t v132 = v93;
    int v95 = *(unsigned __int8 *)(v111 + 944);
    *(unsigned char *)(v111 + 944) = v133;
    char v133 = v95;
    int v96 = (int *)MEMORY[0x263F4B188];
    if (v92 && !v95)
    {
      uint64_t v97 = v93 + 10;
      os_unfair_lock_lock(v93 + 10);
      uint64_t v98 = v132;
      uint64_t v99 = v131;
      uint64_t v100 = *(void *)&v132[8]._os_unfair_lock_opaque;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)&v132[6]._os_unfair_lock_opaque + 8) + *v96 + 24) + 8 * v131) = v100;
      uint64_t v101 = v100;
      atomic_compare_exchange_strong((atomic_ullong *volatile)&v98[8], (unint64_t *)&v101, (v100 & 0xFFFFFFFF00000000 | v99) + 0x100000000);
      if (v101 != v100)
      {
        uint64_t v102 = v101;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)&v98[6]._os_unfair_lock_opaque + 8) + *v96 + 24) + 8 * v99) = v101;
          atomic_compare_exchange_strong((atomic_ullong *volatile)&v98[8], (unint64_t *)&v102, (v101 & 0xFFFFFFFF00000000 | v99) + 0x100000000);
          BOOL v103 = v102 == v101;
          uint64_t v101 = v102;
        }
        while (!v103);
      }
      os_unfair_lock_unlock(v97);
      unint64_t v94 = *(os_unfair_lock_s **)(v111 + 936);
    }
    uint64_t v104 = *(void *)(v111 + 872);
    uint64_t v105 = v94 + 10;
    os_unfair_lock_lock(v94 + 10);
    *(void *)(*(void *)(*(void *)(*(void *)(v111 + 936) + 8) + *v96 + 24)
              + 8 * *(unsigned int *)(v111 + 928)) = v104;
    os_unfair_lock_unlock(v105);
  }
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLTileRenderPipelineDescriptor>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a1;
  uint64_t v86 = *MEMORY[0x263EF8340];
  unsigned int v7 = (uint64_t *)a2[101];
  *(void *)(a1 + 952) = a2;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v8);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 8));
  }
  if (*(void *)v6)
  {
    AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(*(void *)v6);
    int v9 = *(unsigned __int8 *)(v6 + 1448);
    uint64_t v10 = *(void *)v6;
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)v6 + 1936);
    if (v9) {
      *(_DWORD *)(v10 + 3304) &= ~0x200000u;
    }
    uint64_t v11 = *(void *)v6;
    unsigned int v12 = *(_DWORD *)(v6 + 732) & 0xFFDFFFFF | (((*(_DWORD *)(*(void *)v6 + 3304) >> 21) & 1) << 21);
    *(_DWORD *)(v6 + 732) = v12;
    unsigned int v13 = v12 & 0xFFBFFFFF | (((*(_DWORD *)(v11 + 3304) >> 22) & 1) << 22);
    *(_DWORD *)(v6 + 732) = v13;
    unsigned int v14 = v13 & 0xFDFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 25) & 1) << 25);
    *(_DWORD *)(v6 + 732) = v14;
    unsigned int v15 = v14 & 0xFBFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 26) & 1) << 26);
    *(_DWORD *)(v6 + 732) = v15;
    *(_DWORD *)(v6 + 732) = *(_DWORD *)(v11 + 3304) & 0xE0000000 | v15 & 0x1FFFFFFF;
    *(_DWORD *)(v6 + 744) = *(_DWORD *)(v6 + 744) & 0xFFFE0000 | *(_DWORD *)(v11 + 3308) & 0x1FFFF;
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 3390);
    LOBYTE(v15) = (v11 - 1) < 2;
    unsigned int v16 = (v11 & 3) << 22;
    if ((v15 & ((v7[911] & 0x8000) != 0)) != 0) {
      unsigned int v16 = 0;
    }
    *(int8x8_t *)(v6 + 736) = vorr_s8((int8x8_t)(*(void *)(v6 + 736) & 0xFF3FFFFFFF3FFFFFLL), (int8x8_t)vdup_n_s32(v16));
  }
  uint64_t v17 = *(void *)(v6 + 24);
  if (v17)
  {
    AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v17);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 24));
  }
  uint64_t v18 = *(void *)(v6 + 32);
  if (v18)
  {
    AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v18);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 32));
  }
  uint64_t v19 = *(void *)(v6 + 16);
  if (v19)
  {
    AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v19);
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 16) + 1936);
  }
  if ([a4 maxAccelerationStructureTraversalDepth]) {
    *(_DWORD *)(v6 + 2812) = ([a4 maxAccelerationStructureTraversalDepth] + 7) & 0xFFFFFFF8;
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::computeMaximumRayPayloadSizes((unsigned int *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTables((uint64_t *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParams((int8x8_t **)v6, v7);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::emitLabelUpdateSignpost((uint64_t *)v6, a3);
  unsigned int v20 = (void *)[a4 linkedFunctions];
  int v21 = *(int8x8_t **)(v6 + 16);
  if (v21)
  {
    int v22 = v20;
    uint64_t v23 = (void *)(v6 + 2600);
    unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(objc_msgSend((id)objc_msgSend(v20, "binaryFunctions"), "count")+ objc_msgSend((id)objc_msgSend(v20, "functions"), "count"))/ *(float *)(v6 + 2632));
    unint64_t v66 = v7;
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(v6 + 2608);
    if (prime > *(void *)&v25) {
      goto LABEL_23;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 2624) / *(float *)(v6 + 2632));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        unint64_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_23:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v6 + 2600, prime);
    }
    uint64_t v67 = v6;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    unint64_t v65 = v22;
    obuint64_t j = (id)[v22 functions];
    uint64_t v29 = [obj countByEnumeratingWithState:&v79 objects:v85 count:16];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = 0;
      uint64_t v32 = *(void *)v80;
      uint64_t v33 = v21 + 414;
      int v34 = obj;
      while (1)
      {
        for (uint64_t i = 0; i != v30; ++i)
        {
          if (*(void *)v80 != v32) {
            objc_enumerationMutation(v34);
          }
          int v36 = *(void **)(*((void *)&v79 + 1) + 8 * i);
          int v37 = (void *)[v36 name];
          if ([v36 functionType] == 6) {
            int v38 = [a2 requiresRaytracingEmulation];
          }
          else {
            int v38 = 0;
          }
          if ([v36 functionType] != 5 && v38 == 0)
          {
            if ([v36 functionType] == 6
              && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v36))
            {
              __int32 v42 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v37 device:a2 handle:v31++ dylib:0];
              goto LABEL_38;
            }
          }
          else
          {
            uint64_t VisibleFunctionOffset = VisibleFunctionsMap::getVisibleFunctionOffset(v33, (const char *)[v37 cStringUsingEncoding:4]);
            if (VisibleFunctionOffset != -1)
            {
              uint64_t v41 = VisibleFunctionOffset;
              if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v36))
              {
                __int32 v42 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v36 functionType], v37, a2, v41, 0);
LABEL_38:
                std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v23, (unint64_t)v36, (uint64_t)v36, (uint64_t)v42);
                int v34 = obj;
                continue;
              }
            }
          }
        }
        uint64_t v30 = [v34 countByEnumeratingWithState:&v79 objects:v85 count:16];
        if (!v30) {
          goto LABEL_56;
        }
      }
    }
    uint64_t v31 = 0;
LABEL_56:
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    uint64_t v43 = (void *)[v65 privateFunctions];
    uint64_t v44 = [v43 countByEnumeratingWithState:&v75 objects:v84 count:16];
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = *(void *)v76;
      do
      {
        for (uint64_t j = 0; j != v45; ++j)
        {
          if (*(void *)v76 != v46) {
            objc_enumerationMutation(v43);
          }
          if ([*(id *)(*((void *)&v75 + 1) + 8 * j) functionType] == 6) {
            v31 += [a2 requiresRaytracingEmulation] ^ 1;
          }
        }
        uint64_t v45 = [v43 countByEnumeratingWithState:&v75 objects:v84 count:16];
      }
      while (v45);
    }
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    id obja = (id)[v65 binaryFunctions];
    uint64_t v48 = [obja countByEnumeratingWithState:&v71 objects:v83 count:16];
    if (v48)
    {
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)v72;
      do
      {
        for (uint64_t k = 0; k != v49; ++k)
        {
          if (*(void *)v72 != v50) {
            objc_enumerationMutation(obja);
          }
          unint64_t v52 = *(void **)(*((void *)&v71 + 1) + 8 * k);
          uint64_t v53 = [v52 name];
          if ([v52 vendorPrivate]
            && ([v52 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v52))
            {
              uint64_t v54 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v53 device:a2 handle:v31++ dylib:0];
LABEL_69:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v23, (unint64_t)v52, v54);
              continue;
            }
          }
          else
          {
            uint64_t v55 = [v52 vendorPrivate];
            if (v55)
            {
              uint64_t v56 = v55;
              uint64_t v57 = *(void *)(v55 + 56) + 96;
              unint64_t v58 = (void *)[v52 name];
              uint64_t v59 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v57, (char *)[v58 cStringUsingEncoding:4], *(void *)(*(void *)(v56 + 56) + 680));
              if (v59 != -1)
              {
                uint64_t v60 = v59;
                if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v52))
                {
                  uint64_t v54 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v52 functionType], v58, a2, v60, v56);
                  goto LABEL_69;
                }
              }
            }
          }
        }
        uint64_t v49 = [obja countByEnumeratingWithState:&v71 objects:v83 count:16];
      }
      while (v49);
    }
    unsigned int v7 = v66;
    uint64_t v6 = v67;
  }
  if (*(void *)v6 && (*(unsigned char *)(*(void *)v6 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v6 + 710) = 1;
  }
  uint64_t v61 = *(void *)(v6 + 8);
  if (v61 && (*(unsigned char *)(v61 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v6 + 710) = 1;
  }
  uint64_t v62 = *(void *)(v6 + 16);
  if (v62 && (*(unsigned char *)(v62 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v6 + 710) = 1;
  }
  uint64_t v63 = *(void *)(v6 + 24);
  if (v63 && (*(unsigned char *)(v63 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v6 + 710) = 1;
  }
  uint64_t v64 = *(void *)(v6 + 32);
  if (v64 && (*(unsigned char *)(v64 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v6 + 710) = 1;
  }

  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection(v6, v7);
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::finalize<MTLRenderPipelineDescriptor>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v6 = a1;
  uint64_t v99 = *MEMORY[0x263EF8340];
  unsigned int v7 = (uint64_t *)a2[101];
  *(void *)(a1 + 952) = a2;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v8);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 8));
  }
  uint64_t v78 = v6;
  if (*(void *)v6)
  {
    AGX::FragmentProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(*(void *)v6);
    int v9 = *(unsigned __int8 *)(v6 + 1448);
    uint64_t v10 = *(void *)v6;
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)v6 + 1936);
    if (v9) {
      *(_DWORD *)(v10 + 3304) &= ~0x200000u;
    }
    uint64_t v11 = *(void *)v6;
    unsigned int v12 = *(_DWORD *)(v6 + 732) & 0xFFDFFFFF | (((*(_DWORD *)(*(void *)v6 + 3304) >> 21) & 1) << 21);
    *(_DWORD *)(v6 + 732) = v12;
    unsigned int v13 = v12 & 0xFFBFFFFF | (((*(_DWORD *)(v11 + 3304) >> 22) & 1) << 22);
    *(_DWORD *)(v6 + 732) = v13;
    unsigned int v14 = v13 & 0xFDFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 25) & 1) << 25);
    *(_DWORD *)(v6 + 732) = v14;
    unsigned int v15 = v14 & 0xFBFFFFFF | (((*(_DWORD *)(v11 + 3304) >> 26) & 1) << 26);
    *(_DWORD *)(v6 + 732) = v15;
    *(_DWORD *)(v6 + 732) = *(_DWORD *)(v11 + 3304) & 0xE0000000 | v15 & 0x1FFFFFFF;
    *(_DWORD *)(v6 + 744) = *(_DWORD *)(v6 + 744) & 0xFFFE0000 | *(_DWORD *)(v11 + 3308) & 0x1FFFF;
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 3390);
    LOBYTE(v15) = (v11 - 1) < 2;
    unsigned int v16 = (v11 & 3) << 22;
    if ((v15 & ((v7[911] & 0x8000) != 0)) != 0) {
      unsigned int v16 = 0;
    }
    *(int8x8_t *)(v6 + 736) = vorr_s8((int8x8_t)(*(void *)(v6 + 736) & 0xFF3FFFFFFF3FFFFFLL), (int8x8_t)vdup_n_s32(v16));
  }
  uint64_t v17 = *(void *)(v6 + 24);
  if (v17)
  {
    AGX::ObjectProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v17);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 24));
  }
  uint64_t v18 = *(void *)(v6 + 32);
  if (v18)
  {
    AGX::MeshProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v18);
    AGX::VertexProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 32));
  }
  uint64_t v19 = *(void *)(v6 + 16);
  if (v19)
  {
    AGX::TileProgramVariant<AGX::HAL200::Encoders,AGX::HAL200::Classes>::finalize(v19);
    AGX::FragmentProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes>::patchPipelineRequirements(*(void *)(v6 + 16) + 1936);
  }
  if ([a4 maxAccelerationStructureTraversalDepth]) {
    *(_DWORD *)(v6 + 2812) = ([a4 maxAccelerationStructureTraversalDepth] + 7) & 0xFFFFFFF8;
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::computeMaximumRayPayloadSizes((unsigned int *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::createScsPerShaderConfigTables((uint64_t *)v6);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParams((int8x8_t **)v6, v7);
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::emitLabelUpdateSignpost((uint64_t *)v6, a3);
  unsigned int v20 = (void *)[a4 vertexLinkedFunctions];
  int v21 = (void *)[a4 fragmentLinkedFunctions];
  int v22 = *(int8x8_t **)(v6 + 8);
  if (v22)
  {
    long long v76 = a4;
    uint64_t v23 = (void *)(v6 + 2520);
    unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(objc_msgSend((id)objc_msgSend(v20, "binaryFunctions"), "count")+ objc_msgSend((id)objc_msgSend(v20, "functions"), "count"))/ *(float *)(v6 + 2552));
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v25 = *(int8x8_t *)(v6 + 2528);
    if (prime > *(void *)&v25) {
      goto LABEL_33;
    }
    if (prime < *(void *)&v25)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(v6 + 2544) / *(float *)(v6 + 2552));
      if (*(void *)&v25 < 3uLL || (uint8x8_t v27 = (uint8x8_t)vcnt_s8(v25), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        unint64_t prime = v26;
      }
      if (prime < *(void *)&v25) {
LABEL_33:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(v6 + 2520, prime);
    }
    long long v74 = v21;
    long long v75 = v7;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v77 = v20;
    uint64_t v29 = (void *)[v20 functions];
    uint64_t v30 = 0;
    uint64_t v31 = [v29 countByEnumeratingWithState:&v90 objects:&v96 count:16];
    if (v31)
    {
      uint64_t v32 = *(void *)v91;
      obuint64_t j = v22 + 469;
      do
      {
        for (uint64_t i = 0; i != v31; ++i)
        {
          if (*(void *)v91 != v32) {
            objc_enumerationMutation(v29);
          }
          int v34 = *(void **)(*((void *)&v90 + 1) + 8 * i);
          int v35 = (void *)[v34 name];
          if ([v34 functionType] == 6) {
            int v36 = [a2 requiresRaytracingEmulation];
          }
          else {
            int v36 = 0;
          }
          if ([v34 functionType] == 5) {
            int v37 = 1;
          }
          else {
            int v37 = v36;
          }
          if (v37 == 1)
          {
            uint64_t VisibleFunctionOffset = VisibleFunctionsMap::getVisibleFunctionOffset(obj, (const char *)[v35 cStringUsingEncoding:4]);
            if (VisibleFunctionOffset != -1
              && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v34))
            {
              uint64_t v39 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v34 functionType], v35, a2, VisibleFunctionOffset, 0);
LABEL_37:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>((uint64_t)v23, (unint64_t)v34, (uint64_t)v34, (uint64_t)v39);
              continue;
            }
          }
          else if ([v34 functionType] == 6 {
                 && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v34))
          }
          {
            uint64_t v39 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v35 device:a2 handle:v30++ dylib:0];
            goto LABEL_37;
          }
        }
        uint64_t v31 = [v29 countByEnumeratingWithState:&v90 objects:&v96 count:16];
      }
      while (v31);
    }
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    uint64_t v40 = (void *)[v77 privateFunctions];
    uint64_t v41 = [v40 countByEnumeratingWithState:&v86 objects:v95 count:16];
    if (v41)
    {
      uint64_t v42 = *(void *)v87;
      do
      {
        for (uint64_t j = 0; j != v41; ++j)
        {
          if (*(void *)v87 != v42) {
            objc_enumerationMutation(v40);
          }
          if ([*(id *)(*((void *)&v86 + 1) + 8 * j) functionType] == 6) {
            v30 += [a2 requiresRaytracingEmulation] ^ 1;
          }
        }
        uint64_t v41 = [v40 countByEnumeratingWithState:&v86 objects:v95 count:16];
      }
      while (v41);
    }
    id obja = (id)[v77 binaryFunctions];
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    uint64_t v44 = [obja countByEnumeratingWithState:&v82 objects:v94 count:16];
    if (v44)
    {
      uint64_t v45 = *(void *)v83;
      do
      {
        for (uint64_t k = 0; k != v44; ++k)
        {
          if (*(void *)v83 != v45) {
            objc_enumerationMutation(obja);
          }
          uint64_t v48 = *(void **)(*((void *)&v82 + 1) + 8 * k);
          uint64_t v49 = [v48 name];
          if ([v48 vendorPrivate]
            && ([v48 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v48))
            {
              uint64_t v47 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v49 device:a2 handle:v30++ dylib:0];
LABEL_67:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>((uint64_t)v23, (unint64_t)v48, v47);
              continue;
            }
          }
          else
          {
            uint64_t v50 = [v48 vendorPrivate];
            uint64_t v51 = v50;
            if (v50)
            {
              uint64_t v52 = *(void *)(v50 + 56);
              uint64_t v53 = (void *)[v48 name];
              uint64_t v54 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v52 + 96, (char *)[v53 cStringUsingEncoding:4], *(void *)(*(void *)(v51 + 56) + 680));
              if (v54 != -1
                && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>(v23, (unint64_t)v48))
              {
                uint64_t v47 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v48 functionType], v53, a2, v54, v51);
                goto LABEL_67;
              }
            }
          }
        }
        uint64_t v44 = [obja countByEnumeratingWithState:&v82 objects:v94 count:16];
      }
      while (v44);
    }
    uint64_t v6 = v78;
    unsigned int v7 = v75;
    a4 = v76;
    int v21 = v74;
  }
  if (*(void *)v6) {
    AGX::constructVisibleFunctionHandles_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::FragmentProgramVariant>(a2, v21, *(int8x8_t **)v6, v6 + 2560);
  }
  if (a4 && [a4 explicitVisibilityGroupID] != -1)
  {
    *(_DWORD *)(v78 + 712) = [a4 explicitVisibilityGroupID];
    *(unsigned char *)(v78 + 716) = 1;
  }
  if (*(unsigned char *)(v78 + 716))
  {
    *(_DWORD *)(v78 + 744) = *(_DWORD *)(v78 + 744) & 0xFFFE0000 | *(_DWORD *)(v78 + 712) & 0x1FFFF;
    unsigned int v55 = *(_DWORD *)(v78 + 732);
    if (!(v55 >> 30)) {
      *(_DWORD *)(v78 + 732) = v55 & 0x1FFFFFFF;
    }
  }
  if (*(void *)v78 && (*(unsigned char *)(*(void *)v78 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v78 + 710) = 1;
  }
  uint64_t v56 = *(void *)(v78 + 8);
  if (v56 && (*(unsigned char *)(v56 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v78 + 710) = 1;
  }
  uint64_t v57 = *(void *)(v78 + 16);
  if (v57 && (*(unsigned char *)(v57 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v78 + 710) = 1;
  }
  uint64_t v58 = *(void *)(v78 + 24);
  if (v58 && (*(unsigned char *)(v58 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v78 + 710) = 1;
  }
  uint64_t v59 = *(void *)(v78 + 32);
  if (v59 && (*(unsigned char *)(v59 + 1951) & 0x18) != 0) {
    *(unsigned char *)(v78 + 710) = 1;
  }
  AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::constructSpillParamsForIntersection(v78, v7);
  if (*(unsigned char *)(v78 + 709))
  {
    AGX::Mempool<32u,0u,true,unsigned long long>::Allocation::Allocation((uint64_t)&v96, (os_unfair_lock_s *)(a2[101] + 6344), [a4 resourceIndex]);
    unsigned int v60 = *(_DWORD *)(v78 + 928);
    *(_DWORD *)(v78 + 928) = v96;
    unsigned int v96 = v60;
    uint64_t v61 = *(os_unfair_lock_s **)(v78 + 936);
    uint64_t v62 = v97;
    *(void *)(v78 + 936) = v97;
    uint64_t v97 = v61;
    int v63 = *(unsigned __int8 *)(v78 + 944);
    *(unsigned char *)(v78 + 944) = v98;
    char v98 = v63;
    uint64_t v64 = (int *)MEMORY[0x263F4B188];
    if (v60 && !v63)
    {
      unint64_t v65 = v61 + 10;
      os_unfair_lock_lock(v61 + 10);
      unint64_t v66 = v97;
      uint64_t v67 = v96;
      uint64_t v68 = *(void *)&v97[8]._os_unfair_lock_opaque;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)&v97[6]._os_unfair_lock_opaque + 8) + *v64 + 24) + 8 * v96) = v68;
      uint64_t v69 = v68;
      atomic_compare_exchange_strong((atomic_ullong *volatile)&v66[8], (unint64_t *)&v69, (v68 & 0xFFFFFFFF00000000 | v67) + 0x100000000);
      if (v69 != v68)
      {
        uint64_t v70 = v69;
        do
        {
          *(_DWORD *)(*(void *)(*(void *)(*(void *)&v66[6]._os_unfair_lock_opaque + 8) + *v64 + 24) + 8 * v67) = v69;
          atomic_compare_exchange_strong((atomic_ullong *volatile)&v66[8], (unint64_t *)&v70, (v69 & 0xFFFFFFFF00000000 | v67) + 0x100000000);
          BOOL v71 = v70 == v69;
          uint64_t v69 = v70;
        }
        while (!v71);
      }
      os_unfair_lock_unlock(v65);
      uint64_t v62 = *(os_unfair_lock_s **)(v78 + 936);
    }
    uint64_t v72 = *(void *)(v78 + 872);
    long long v73 = v62 + 10;
    os_unfair_lock_lock(v62 + 10);
    *(void *)(*(void *)(*(void *)(*(void *)(v78 + 936) + 8) + *v64 + 24) + 8
                                                                                     * *(unsigned int *)(v78 + 928)) = v72;
    os_unfair_lock_unlock(v73);
  }
}

void AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::emitLabelUpdateSignpost(uint64_t *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (![a2 label]) {
    return;
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    int v5 = *(_DWORD *)(v4 + 2344);
    uint64_t v6 = *a1;
    if (*a1) {
      goto LABEL_4;
    }
LABEL_7:
    int v7 = -1;
    uint64_t v8 = a1[2];
    if (v8) {
      goto LABEL_5;
    }
LABEL_8:
    int v9 = -1;
    goto LABEL_9;
  }
  int v5 = -1;
  uint64_t v6 = *a1;
  if (!*a1) {
    goto LABEL_7;
  }
LABEL_4:
  int v7 = *(_DWORD *)(v6 + 2344);
  uint64_t v8 = a1[2];
  if (!v8) {
    goto LABEL_8;
  }
LABEL_5:
  int v9 = *(_DWORD *)(v8 + 2344);
LABEL_9:
  {
    {
      int v11 = 136446978;
      uint64_t v12 = objc_msgSend((id)objc_msgSend(a2, "label"), "UTF8String");
      __int16 v13 = 1026;
      int v14 = v5;
      __int16 v15 = 1026;
      int v16 = v7;
      __int16 v17 = 1026;
      int v18 = v9;
      _os_signpost_emit_with_name_impl(&dword_2427AD000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "RenderPipelineLabel", "Label=%{public,signpost.description:attribute}s VertexID=%{public,signpost.description:attribute}u FragmentID=%{public,signpost.description:attribute}u TileID=%{public,signpost.description:attribute}u", (uint8_t *)&v11, 0x1Eu);
    }
  }
}

uint64_t AGX::constructVisibleFunctionHandles_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::FragmentProgramVariant>(void *a1, void *a2, int8x8_t *a3, uint64_t a4)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  unint64_t prime = vcvtps_u32_f32((float)(unint64_t)(objc_msgSend((id)objc_msgSend(a2, "binaryFunctions"), "count")+ objc_msgSend((id)objc_msgSend(a2, "functions"), "count"))/ *(float *)(a4 + 32));
  if (prime == 1)
  {
    unint64_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    unint64_t prime = std::__next_prime(prime);
  }
  int8x8_t v7 = *(int8x8_t *)(a4 + 8);
  if (prime > *(void *)&v7) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
    if (*(void *)&v7 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      unint64_t prime = v8;
    }
    if (prime < *(void *)&v7) {
LABEL_16:
    }
      std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a4, prime);
  }
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  int v11 = objc_msgSend(a2, "functions", a2);
  uint64_t v12 = [v11 countByEnumeratingWithState:&v62 objects:v68 count:16];
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)v63;
    int v16 = a3 + 426;
    uint64_t v51 = v11;
    while (1)
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v63 != v15) {
          objc_enumerationMutation(v11);
        }
        int v18 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        uint64_t v19 = (void *)[v18 name];
        if ([v18 functionType] == 6) {
          int v20 = [a1 requiresRaytracingEmulation];
        }
        else {
          int v20 = 0;
        }
        if ([v18 functionType] != 5 && v20 == 0)
        {
          if ([v18 functionType] == 6
            && !std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)a4, (unint64_t)v18))
          {
            int8x8_t v24 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v19 device:a1 handle:v14++ dylib:0];
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t VisibleFunctionOffset = VisibleFunctionsMap::getVisibleFunctionOffset(v16, (const char *)[v19 cStringUsingEncoding:4]);
          if (VisibleFunctionOffset != -1)
          {
            uint64_t v23 = VisibleFunctionOffset;
            if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)a4, (unint64_t)v18))
            {
              int8x8_t v24 = -[AGXG17FamilyFunctionHandle initWithFunctionType:name:device:handle:dylib:]([AGXG17FamilyFunctionHandle alloc], "initWithFunctionType:name:device:handle:dylib:", [v18 functionType], v19, a1, v23, 0);
LABEL_21:
              std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_key_args<objc_object  {objcproto11MTLFunction},objc_object  {objcproto11MTLFunction}&,AGXG17FamilyFunctionHandle>(a4, (unint64_t)v18, (uint64_t)v18, (uint64_t)v24);
              int v11 = v51;
              continue;
            }
          }
        }
      }
      uint64_t v13 = [v11 countByEnumeratingWithState:&v62 objects:v68 count:16];
      if (!v13) {
        goto LABEL_39;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_39:
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  int8x8_t v25 = (void *)[v50 privateFunctions];
  uint64_t v26 = [v25 countByEnumeratingWithState:&v58 objects:v67 count:16];
  if (v26)
  {
    uint64_t v27 = v26;
    uint64_t v28 = *(void *)v59;
    do
    {
      for (uint64_t j = 0; j != v27; ++j)
      {
        if (*(void *)v59 != v28) {
          objc_enumerationMutation(v25);
        }
        if ([*(id *)(*((void *)&v58 + 1) + 8 * j) functionType] == 6) {
          v14 += [a1 requiresRaytracingEmulation] ^ 1;
        }
      }
      uint64_t v27 = [v25 countByEnumeratingWithState:&v58 objects:v67 count:16];
    }
    while (v27);
  }
  uint64_t v30 = (void *)[v50 binaryFunctions];
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t result = [v30 countByEnumeratingWithState:&v54 objects:v66 count:16];
  if (result)
  {
    uint64_t v32 = result;
    uint64_t v33 = *(void *)v55;
    unint64_t v34 = 0x268D57000uLL;
    do
    {
      uint64_t v35 = 0;
      do
      {
        if (*(void *)v55 != v33) {
          objc_enumerationMutation(v30);
        }
        int v36 = *(void **)(*((void *)&v54 + 1) + 8 * v35);
        uint64_t v37 = [v36 name];
        if ([v36 vendorPrivate]
          && ([v36 vendorPrivate], objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)a4, (unint64_t)v36))
          {
            int v38 = [[AGXG17FamilyFunctionHandle alloc] initWithFunctionType:6 name:v37 device:a1 handle:v14++ dylib:0];
LABEL_52:
            std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::__emplace_unique_impl<_MTLFunction *&,AGXG17FamilyFunctionHandle>(a4, (unint64_t)v36, v38);
          }
        }
        else
        {
          uint64_t v39 = [v36 vendorPrivate];
          if (v39)
          {
            uint64_t v40 = v39;
            uint64_t v41 = *(void *)(v39 + *(int *)(v34 + 1956)) + 96;
            uint64_t v42 = (void *)[v36 name];
            uint64_t v43 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::addressForSymbol(v41, (char *)[v42 cStringUsingEncoding:4], *(void *)(*(void *)(v40 + *(int *)(v34 + 1956)) + 680));
            if (v43 != -1)
            {
              uint64_t v44 = v43;
              if (!std::__hash_table<std::__hash_value_type<objc_object  {objcproto11MTLFunction}*,RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>,std::__unordered_map_hasher<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::hash<objc_object  {objcproto11MTLFunction}>,std::equal_to<objc_object  {objcproto11MTLFunction}>,true>,std::__unordered_map_equal<objc_object  {objcproto11MTLFunction},RetainedObjCPointer<AGXG17FamilyFunctionHandle *>,std::equal_to,std::hash,true>,std::allocator<RetainedObjCPointer<AGXG17FamilyFunctionHandle *>>>::find<objc_object  {objcproto11MTLFunction}>((void *)a4, (unint64_t)v36))
              {
                uint64_t v45 = v33;
                uint64_t v46 = v30;
                uint64_t v47 = [AGXG17FamilyFunctionHandle alloc];
                uint64_t v48 = [v36 functionType];
                uint64_t v49 = v47;
                uint64_t v30 = v46;
                uint64_t v33 = v45;
                unint64_t v34 = 0x268D57000;
                int v38 = [(AGXG17FamilyFunctionHandle *)v49 initWithFunctionType:v48 name:v42 device:a1 handle:v44 dylib:v40];
                goto LABEL_52;
              }
            }
          }
        }
        ++v35;
      }
      while (v32 != v35);
      uint64_t result = [v30 countByEnumeratingWithState:&v54 objects:v66 count:16];
      uint64_t v32 = result;
    }
    while (result);
  }
  return result;
}

void sub_242B821E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v68 = exception_object;
    if (exception_object)
    {
LABEL_7:
      operator delete(v68);
      uint64_t v69 = a31;
      if (!a31) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v68 = exception_object;
    if (exception_object) {
      goto LABEL_7;
    }
  }
  uint64_t v69 = a31;
  if (!a31)
  {
LABEL_9:
    std::shared_ptr<AGX::HAL200::IntersectionPipelineSets>::~shared_ptr[abi:nn180100]((uint64_t)&a35);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(v69);
  goto LABEL_9;
}

void sub_242B8458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,void *a54)
{
  if (__p)
  {
    operator delete(__p);
    long long v55 = a54;
    if (!a54)
    {
LABEL_3:
      long long v56 = a27;
      if (!a27) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    long long v55 = a54;
    if (!a54) {
      goto LABEL_3;
    }
  }
  operator delete(v55);
  long long v56 = a27;
  if (!a27)
  {
LABEL_4:
    if (!a12) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v56);
  if (!a12) {
    goto LABEL_11;
  }
LABEL_9:
  if (!atomic_fetch_add(&a12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::bindResources(uint64_t result)
{
  uint64_t v1 = result;
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v3 = *(void *)(v1 + 16 * i + 2912);
    if (v3)
    {
      uint64_t v4 = *(void **)(v3 + 32);
      int v5 = *(void **)(v3 + 40);
      while (v4 != v5)
      {
        uint64_t v6 = v4[14];
        if (v6)
        {
          unsigned int v7 = *(_DWORD *)(v6 + 2224);
          do
          {
            v7 &= ~(1 << __clz(__rbit32(v7)));
            uint64_t result = IOGPUResourceListAddResource();
          }
          while (v7);
        }
        uint64_t v8 = v4[51];
        if (v8)
        {
          unsigned int v9 = *(_DWORD *)(v8 + 2224);
          do
          {
            v9 &= ~(1 << __clz(__rbit32(v9)));
            uint64_t result = IOGPUResourceListAddResource();
          }
          while (v9);
        }
        uint64_t v10 = v4[88];
        if (v10)
        {
          unsigned int v11 = *(_DWORD *)(v10 + 2224);
          do
          {
            v11 &= ~(1 << __clz(__rbit32(v11)));
            uint64_t result = IOGPUResourceListAddResource();
          }
          while (v11);
        }
        uint64_t v12 = v4[125];
        if (v12)
        {
          unsigned int v13 = *(_DWORD *)(v12 + 2224);
          do
          {
            v13 &= ~(1 << __clz(__rbit32(v13)));
            uint64_t result = IOGPUResourceListAddResource();
          }
          while (v13);
        }
        v4 += 163;
      }
    }
  }
  return result;
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::loadFragment(int8x16_t *a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6)
{
  uint64_t v186 = *MEMORY[0x263EF8340];
  uint64_t v156 = a1->i64[0];
  int v151 = a1[44].u8[5];
  long long v175 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  uint64_t v6 = *(void *)(a1[183].i64[0] + 40) - *(void *)(a1[183].i64[0] + 32);
  unint64_t v7 = (0x7DA4E871146ACC2CLL * (v6 >> 3)) | 1;
  if (v7 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = (char *)operator new(96 * v7);
  std::string __p = v8;
  unint64_t v9 = [a3 count] + v7;
  if (v9)
  {
    if (v9 > 0x333333333333333) {
      abort();
    }
    uint64_t v10 = operator new(80 * v9);
    unsigned int v11 = (char *)&v10[10 * v9];
    long long v175 = v10;
    uint64_t v176 = (char *)v10;
    uint64_t v177 = v11;
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v158 = (unint64_t)v11;
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve((uint64_t)&a1[151].i64[1], [a3 count]);
  i64 = a1[78].i64;
  uint64_t v13 = v156 + 8;
  uint64_t v14 = (_OWORD *)(v156 + 1208);
  long long v184 = *(_OWORD *)(v156 + 1208);
  uint64_t v185 = *(void *)(v156 + 1224);
  uint64_t v15 = *(void *)(v156 + 1464);
  uint64_t v16 = *(void *)(v156 + 1456);
  uint64_t v17 = *(void *)(v156 + 1472);
  int v18 = (_OWORD *)(v156 + 2552);
  long long v178 = *(_OWORD *)(v156 + 2552);
  *(void *)&long long v179 = *(void *)(v156 + 2568);
  uint64_t v155 = a1[78].i64;
  if (v6 < -1303)
  {
    uint64_t v21 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v21 = 1;
    }
    if (v7 >= 0x155555555555555) {
      unint64_t v22 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v23 = (char *)operator new(96 * v22);
    uint64_t v167 = &v23[96 * v22];
    *(void *)uint64_t v23 = v13;
    uint64_t v24 = *(void *)(v156 + 1224);
    *(_OWORD *)(v23 + 8) = *v14;
    *((void *)v23 + 3) = v24;
    *((void *)v23 + 4) = v16;
    *((void *)v23 + 5) = v15;
    *((void *)v23 + 6) = v17;
    uint64_t v25 = *(void *)(v156 + 2568);
    *(_OWORD *)(v23 + 56) = *v18;
    *((void *)v23 + 9) = v25;
    *((void *)v23 + 10) = v155;
    *((void *)v23 + 11) = v155;
    operator delete(__p);
    std::string __p = v23;
  }
  else
  {
    uint64_t v167 = &v8[96 * v7];
    *(void *)uint64_t v8 = v13;
    uint64_t v19 = *(void *)(v156 + 1224);
    *(_OWORD *)(v8 + 8) = *v14;
    *((void *)v8 + 3) = v19;
    *((void *)v8 + 4) = v16;
    *((void *)v8 + 5) = v15;
    *((void *)v8 + 6) = v17;
    uint64_t v20 = *(void *)(v156 + 2568);
    *(_OWORD *)(v8 + 56) = *v18;
    *((void *)v8 + 9) = v20;
    *((void *)v8 + 10) = i64;
    *((void *)v8 + 11) = i64;
  }
  if ((unint64_t)v10 >= v158)
  {
    unint64_t v27 = 0x999999999999999ALL * ((uint64_t)(v158 - (void)v10) >> 4);
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v158 - (void)v10) >> 4) >= 0x199999999999999) {
      unint64_t v28 = 0x333333333333333;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v29 = (char *)operator new(80 * v28);
    *(void *)uint64_t v29 = v13;
    *(_OWORD *)(v29 + 8) = v184;
    *((void *)v29 + 3) = v185;
    *((void *)v29 + 4) = v16;
    *((void *)v29 + 5) = v15;
    *((void *)v29 + 6) = v17;
    *(_OWORD *)(v29 + 56) = v178;
    *((void *)v29 + 9) = v179;
    uint64_t v26 = (uint64_t)(v29 + 80);
    long long v175 = v29;
    uint64_t v177 = &v29[80 * v28];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v10 = v13;
    *(_OWORD *)(v10 + 1) = v184;
    v10[3] = v185;
    v10[4] = v16;
    v10[5] = v15;
    v10[6] = v17;
    *(_OWORD *)(v10 + 7) = v178;
    uint64_t v26 = (uint64_t)(v10 + 10);
    v10[9] = v179;
  }
  uint64_t v176 = (char *)v26;
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>,std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>>((uint64_t)&v175, v26, 0, 0, 0);
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  uint64_t v30 = [a4 countByEnumeratingWithState:&v178 objects:&v184 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v179;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v179 != v31) {
          objc_enumerationMutation(a4);
        }
        uint64_t v33 = *(void **)(*((void *)&v178 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unint64_t v34 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
          uint64_t v35 = [v33 buffer];
          uint64_t v36 = *(void *)(v35 + (int)*MEMORY[0x263F4B188] + 72);
          uint64_t v37 = [v33 offset];
          int v38 = *(char **)(v156 + 1472);
          long long v182 = *(_OWORD *)(v156 + 1456);
          uint64_t v183 = v38;
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(v13, v34, v37 + v36, (uint64_t)&v182);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v39 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
            uint64_t v40 = [v33 data];
            uint64_t v41 = *(char **)(v156 + 1472);
            long long v182 = *(_OWORD *)(v156 + 1456);
            uint64_t v183 = v41;
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(v13, v39, v40, (uint64_t)&v182);
          }
        }
      }
      uint64_t v30 = [a4 countByEnumeratingWithState:&v178 objects:&v184 count:16];
    }
    while (v30);
  }
  uint64_t v42 = __p + 96;
  uint64_t v43 = a1[183].i64[0];
  uint64_t v44 = *(void *)(v43 + 32);
  uint64_t v157 = *(void *)(v43 + 40);
  if (v44 != v157)
  {
    do
    {
      uint64_t v45 = 0;
      uint64_t v159 = v44;
      id obja = (char *)(v44 + 112);
      do
      {
        uint64_t v47 = &obja[296 * v45];
        uint64_t v48 = *(void *)v47;
        if (*(void *)v47)
        {
          uint64_t v49 = v48 + 8;
          long long v184 = *(_OWORD *)(v48 + 1160);
          uint64_t v185 = *(void *)(v48 + 1176);
          uint64_t v50 = *(void *)(v48 + 1416);
          uint64_t v51 = *(void *)(v48 + 1408);
          uint64_t v52 = *(void *)(v48 + 1424);
          long long v178 = *(_OWORD *)(v48 + 2496);
          *(void *)&long long v179 = *(void *)(v48 + 2512);
          long long v182 = *(_OWORD *)(v48 + 1160);
          uint64_t v183 = *(char **)(v48 + 1176);
          long long v171 = *(_OWORD *)(v48 + 2496);
          uint64_t v53 = v47 + 8;
          uint64_t v173 = *(void *)(v48 + 2512);
          if (v42 >= v167)
          {
            unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 5) + 1;
            if (v55 > 0x2AAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v167 - __p) >> 5) > v55) {
              unint64_t v55 = 0x5555555555555556 * ((v167 - __p) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v167 - __p) >> 5) >= 0x155555555555555) {
              unint64_t v56 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              if (v56 > 0x2AAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v57 = (char *)operator new(96 * v56);
            }
            else
            {
              long long v57 = 0;
            }
            long long v58 = &v57[32 * ((v42 - __p) >> 5)];
            *(void *)long long v58 = v49;
            *(_OWORD *)(v58 + 8) = v182;
            *((void *)v58 + 3) = v183;
            *((void *)v58 + 4) = v51;
            *((void *)v58 + 5) = v50;
            *((void *)v58 + 6) = v52;
            *(_OWORD *)(v58 + 56) = v171;
            *((void *)v58 + 9) = v173;
            *((void *)v58 + 10) = v53;
            *((void *)v58 + 11) = v53;
            if (v42 == __p)
            {
              long long v61 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
            }
            else
            {
              long long v59 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
              do
              {
                long long v61 = v59 - 96;
                long long v62 = *((_OWORD *)v42 - 5);
                *((_OWORD *)v59 - 6) = *((_OWORD *)v42 - 6);
                *((_OWORD *)v59 - 5) = v62;
                long long v63 = *((_OWORD *)v42 - 4);
                long long v64 = *((_OWORD *)v42 - 3);
                long long v65 = *((_OWORD *)v42 - 1);
                *((_OWORD *)v59 - 2) = *((_OWORD *)v42 - 2);
                *((_OWORD *)v59 - 1) = v65;
                *((_OWORD *)v59 - 4) = v63;
                *((_OWORD *)v59 - 3) = v64;
                v42 -= 96;
                v59 -= 96;
              }
              while (v42 != __p);
            }
            uint64_t v167 = &v57[96 * v56];
            uint64_t v42 = v58 + 96;
            if (v60) {
              operator delete(v60);
            }
            std::string __p = v61;
          }
          else
          {
            *(void *)uint64_t v42 = v49;
            long long v54 = v183;
            *(_OWORD *)(v42 + 8) = v182;
            *((void *)v42 + 3) = v54;
            *((void *)v42 + 4) = v51;
            *((void *)v42 + 5) = v50;
            *((void *)v42 + 6) = v52;
            *(_OWORD *)(v42 + 56) = v171;
            *((void *)v42 + 9) = v173;
            *((void *)v42 + 10) = v53;
            *((void *)v42 + 11) = v53;
            v42 += 96;
          }
          unint64_t v66 = v176;
          if (v176 < v177)
          {
            *(void *)uint64_t v176 = v49;
            *(_OWORD *)(v66 + 8) = v184;
            *((void *)v66 + 3) = v185;
            *((void *)v66 + 4) = v51;
            *((void *)v66 + 5) = v50;
            *((void *)v66 + 6) = v52;
            *(_OWORD *)(v66 + 56) = v178;
            *((void *)v66 + 9) = v179;
            uint64_t v46 = v66 + 80;
          }
          else
          {
            uint64_t v67 = (char *)v175;
            unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v176 - (unsigned char *)v175) >> 4);
            unint64_t v69 = v68 + 1;
            if (v68 + 1 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((v177 - (unsigned char *)v175) >> 4) > v69) {
              unint64_t v69 = 0x999999999999999ALL * ((v177 - (unsigned char *)v175) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v177 - (unsigned char *)v175) >> 4) >= 0x199999999999999) {
              unint64_t v70 = 0x333333333333333;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70)
            {
              if (v70 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              BOOL v71 = (char *)operator new(80 * v70);
            }
            else
            {
              BOOL v71 = 0;
            }
            uint64_t v72 = &v71[80 * v68];
            *(void *)uint64_t v72 = v49;
            *(_OWORD *)(v72 + 8) = v184;
            *((void *)v72 + 3) = v185;
            *((void *)v72 + 4) = v51;
            *((void *)v72 + 5) = v50;
            *((void *)v72 + 6) = v52;
            *(_OWORD *)(v72 + 56) = v178;
            *((void *)v72 + 9) = v179;
            long long v73 = v72;
            if (v66 != v67)
            {
              do
              {
                *((_OWORD *)v73 - 5) = *((_OWORD *)v66 - 5);
                long long v74 = *((_OWORD *)v66 - 4);
                long long v75 = *((_OWORD *)v66 - 3);
                long long v76 = *((_OWORD *)v66 - 1);
                *((_OWORD *)v73 - 2) = *((_OWORD *)v66 - 2);
                *((_OWORD *)v73 - 1) = v76;
                *((_OWORD *)v73 - 4) = v74;
                *((_OWORD *)v73 - 3) = v75;
                v73 -= 80;
                v66 -= 80;
              }
              while (v66 != v67);
              unint64_t v66 = v67;
            }
            uint64_t v46 = v72 + 80;
            long long v175 = v73;
            uint64_t v177 = &v71[80 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          uint64_t v176 = v46;
        }
        ++v45;
      }
      while (v45 != 4);
      uint64_t v44 = v159 + 1304;
    }
    while (v159 + 1304 != v157);
  }
  long long v180 = 0u;
  long long v181 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  uint64_t v77 = [a3 countByEnumeratingWithState:&v178 objects:&v184 count:16];
  if (v77)
  {
    uint64_t v78 = *(void *)v179;
    long long v79 = v176;
    uint64_t v168 = v177;
    long long v80 = (char *)v175;
    unint64_t v81 = 0x268D57000uLL;
    uint64_t v160 = *(void *)v179;
    do
    {
      uint64_t v82 = 0;
      id objb = (id)v77;
      do
      {
        if (*(void *)v179 != v78) {
          objc_enumerationMutation(a3);
        }
        long long v83 = *(char **)(*((void *)&v178 + 1) + 8 * v82);
        AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(*(void *)&v83[*(int *)(v81 + 1956)]);
        uint64_t v84 = *(int *)(v81 + 1956);
        long long v85 = (__n128 *)&v83[v84];
        long long v86 = (__n128 *)a1[152].i64[0];
        if ((unint64_t)v86 >= a1[152].i64[1])
        {
          long long v88 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>((uint64_t)&a1[151].i64[1], *v85);
          uint64_t v84 = *(int *)(v81 + 1956);
        }
        else
        {
          v86->n128_u64[0] = v85->n128_u64[0];
          unint64_t v87 = v85->n128_u64[1];
          v86->n128_u64[1] = v87;
          if (v87) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
          }
          long long v88 = v86 + 1;
        }
        a1[152].i64[0] = (uint64_t)v88;
        uint64_t v89 = *(void *)&v83[v84];
        uint64_t v90 = v89 + 96;
        uint64_t v183 = *(char **)(v89 + 696);
        long long v182 = *(_OWORD *)(v89 + 680);
        long long v172 = *(_OWORD *)(v89 + 768);
        uint64_t v174 = *(void *)(v89 + 784);
        long long v169 = *(_OWORD *)(v89 + 944);
        uint64_t v170 = *(void *)(v89 + 960);
        if (v79 >= v168)
        {
          unint64_t v92 = v81;
          unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v80) >> 4) + 1;
          if (v93 > 0x333333333333333)
          {
            uint64_t v176 = v79;
            uint64_t v177 = v168;
            long long v175 = v80;
            abort();
          }
          if (0x999999999999999ALL * ((v168 - v80) >> 4) > v93) {
            unint64_t v93 = 0x999999999999999ALL * ((v168 - v80) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v168 - v80) >> 4) >= 0x199999999999999) {
            unint64_t v94 = 0x333333333333333;
          }
          else {
            unint64_t v94 = v93;
          }
          if (v94)
          {
            if (v94 > 0x333333333333333)
            {
              uint64_t v176 = v79;
              uint64_t v177 = v168;
              long long v175 = v80;
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v95 = (char *)operator new(80 * v94);
          }
          else
          {
            int v95 = 0;
          }
          unsigned int v96 = &v95[16 * ((v79 - v80) >> 4)];
          *(void *)unsigned int v96 = v90;
          *(_OWORD *)(v96 + 8) = v182;
          *((void *)v96 + 3) = v183;
          *((_OWORD *)v96 + 2) = v172;
          *((void *)v96 + 6) = v174;
          *((void *)v96 + 9) = v170;
          uint64_t v97 = v96;
          *(_OWORD *)(v96 + 56) = v169;
          if (v79 != v80)
          {
            char v98 = &v95[16 * ((v79 - v80) >> 4)];
            do
            {
              *((_OWORD *)v98 - 5) = *((_OWORD *)v79 - 5);
              long long v99 = *((_OWORD *)v79 - 4);
              long long v100 = *((_OWORD *)v79 - 3);
              long long v101 = *((_OWORD *)v79 - 1);
              uint64_t v97 = v98 - 80;
              *((_OWORD *)v98 - 2) = *((_OWORD *)v79 - 2);
              *((_OWORD *)v98 - 1) = v101;
              *((_OWORD *)v98 - 4) = v99;
              *((_OWORD *)v98 - 3) = v100;
              v79 -= 80;
              v98 -= 80;
            }
            while (v79 != v80);
          }
          uint64_t v168 = &v95[80 * v94];
          if (v80)
          {
            operator delete(v80);
            uint64_t v84 = *(int *)(v92 + 1956);
            long long v80 = v97;
            long long v79 = v96;
            unint64_t v81 = v92;
            uint64_t v78 = v160;
            uint64_t v77 = (uint64_t)objb;
          }
          else
          {
            long long v80 = v97;
            long long v79 = v96;
            uint64_t v77 = (uint64_t)objb;
            unint64_t v81 = v92;
            uint64_t v78 = v160;
          }
        }
        else
        {
          *(void *)long long v79 = v90;
          long long v91 = v182;
          *((void *)v79 + 3) = v183;
          *(_OWORD *)(v79 + 8) = v91;
          *((_OWORD *)v79 + 2) = v172;
          *((void *)v79 + 6) = v174;
          *(_OWORD *)(v79 + 56) = v169;
          *((void *)v79 + 9) = v170;
        }
        v79 += 80;
        AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(*(void *)&v83[v84], (void *)[v83 relocations]);
        ++v82;
      }
      while (v82 != v77);
      uint64_t v176 = v79;
      uint64_t v177 = v168;
      long long v175 = v80;
      uint64_t v77 = [a3 countByEnumeratingWithState:&v178 objects:&v184 count:16];
    }
    while (v77);
  }
  long long v182 = 0uLL;
  uint64_t v183 = 0;
  uint64_t v102 = v42 - __p;
  if (v42 == __p)
  {
    uint64_t v104 = 0;
    uint64_t v103 = v156;
  }
  else
  {
    uint64_t v103 = v156;
    if (0xAAAAAAAAAAAAAAABLL * (v102 >> 5) > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v104 = (char *)operator new(v42 - __p);
    *(void *)&long long v182 = v104;
    *((void *)&v182 + 1) = v104;
    uint64_t v183 = &v104[32 * (v102 >> 5)];
    size_t v105 = 96 * ((v102 - 96) / 0x60uLL) + 96;
    memcpy(v104, __p, v105);
    *((void *)&v182 + 1) = &v104[v105];
  }
  uint64_t v106 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load(a2, (uint64_t **)&v175, (uint64_t **)&v175, (size_t *)&v182, *(_DWORD *)(v103 + 1036), a5, a6, v151 != 0);
  if (v104)
  {
    *((void *)&v182 + 1) = v104;
    operator delete(v104);
  }
  if (a1[90].i8[11]) {
    int v107 = v106;
  }
  else {
    int v107 = 0;
  }
  if (v107 == 1)
  {
    __int32 v108 = *(_DWORD **)(*v155 + 64);
    *__int32 v108 = *(unsigned __int8 *)(v103 + 3400);
    v108[1] = *(unsigned __int8 *)(v103 + 3401);
  }
  unint64_t v109 = (void *)(v103 + 1560);
  if ((*(char *)(v103 + 1583) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v103 + 1583)) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  if (*(void *)(v103 + 1568))
  {
    unint64_t v109 = (void *)*v109;
LABEL_127:
    memcpy((char *)v109 + *(void *)(v103 + 1584), *(const void **)(v103 + 1216), *(void *)(v103 + 1224));
  }
LABEL_128:
  uint64_t v110 = a1[183].i64[0];
  uint64_t v111 = *(void **)(v110 + 32);
  uint64_t v112 = *(void **)(v110 + 40);
  while (v111 != v112)
  {
    uint64_t v113 = v111[14];
    if (!v113) {
      goto LABEL_139;
    }
    long long v114 = (void *)(v113 + 1512);
    if (*(char *)(v113 + 1535) < 0)
    {
      if (!*(void *)(v113 + 1520)) {
        goto LABEL_139;
      }
      long long v114 = (void *)*v114;
LABEL_138:
      memcpy((char *)v114 + *(void *)(v113 + 1536), *(const void **)(v113 + 1168), *(void *)(v113 + 1176));
      goto LABEL_139;
    }
    if (*(unsigned char *)(v113 + 1535)) {
      goto LABEL_138;
    }
LABEL_139:
    uint64_t v115 = v111[51];
    if (!v115) {
      goto LABEL_146;
    }
    long long v116 = (void *)(v115 + 1512);
    if (*(char *)(v115 + 1535) < 0)
    {
      if (!*(void *)(v115 + 1520)) {
        goto LABEL_146;
      }
      long long v116 = (void *)*v116;
LABEL_145:
      memcpy((char *)v116 + *(void *)(v115 + 1536), *(const void **)(v115 + 1168), *(void *)(v115 + 1176));
      goto LABEL_146;
    }
    if (*(unsigned char *)(v115 + 1535)) {
      goto LABEL_145;
    }
LABEL_146:
    uint64_t v117 = v111[88];
    if (!v117) {
      goto LABEL_153;
    }
    long long v118 = (void *)(v117 + 1512);
    if (*(char *)(v117 + 1535) < 0)
    {
      if (!*(void *)(v117 + 1520)) {
        goto LABEL_153;
      }
      long long v118 = (void *)*v118;
LABEL_152:
      memcpy((char *)v118 + *(void *)(v117 + 1536), *(const void **)(v117 + 1168), *(void *)(v117 + 1176));
      goto LABEL_153;
    }
    if (*(unsigned char *)(v117 + 1535)) {
      goto LABEL_152;
    }
LABEL_153:
    uint64_t v119 = v111[125];
    if (v119)
    {
      long long v120 = (void *)(v119 + 1512);
      if (*(char *)(v119 + 1535) < 0)
      {
        if (*(void *)(v119 + 1520))
        {
          long long v120 = (void *)*v120;
LABEL_129:
          memcpy((char *)v120 + *(void *)(v119 + 1536), *(const void **)(v119 + 1168), *(void *)(v119 + 1176));
        }
      }
      else if (*(unsigned char *)(v119 + 1535))
      {
        goto LABEL_129;
      }
    }
    v111 += 163;
  }
  if (v175) {
    operator delete(v175);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v106)
  {
    uint64_t v121 = a1->i64[0];
    unint64_t v122 = a1[93].u64[1];
    unsigned int v123 = (512 - 8 * __clz(v122)) >> 2;
    if (v122) {
      unsigned int v124 = v123;
    }
    else {
      unsigned int v124 = 0;
    }
    *(_DWORD *)(v121 + 800) = v124;
    int8x16_t v125 = a1[94];
    int32x2_t v126 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v125)))));
    unsigned __int32 v127 = vadd_s32(vdup_lane_s32(v126, 1), v126).u32[0];
    uint8x8_t v128 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1[95].i8);
    v128.i16[0] = vaddlv_u8(v128);
    unsigned __int32 v129 = v127 + v128.i32[0];
    uint8x8_t v130 = (uint8x8_t)vcnt_s8((int8x8_t)a1[95].u64[1]);
    v130.i16[0] = vaddlv_u8(v130);
    unint64_t v131 = v130.i32[0] + 2 * v129;
    *(_DWORD *)(v121 + 804) = v131;
    uint64_t v132 = *(unsigned int **)(v121 + 808);
    unint64_t v133 = (uint64_t)(*(void *)(v121 + 816) - (void)v132) >> 2;
    BOOL v134 = v131 >= v133;
    if (v131 <= v133)
    {
      uint64_t v136 = v125.i64[1];
      unint64_t v135 = v125.i64[0];
      if (!v134) {
        *(void *)(v121 + 816) = &v132[v131];
      }
    }
    else
    {
      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v121 + 808), v131 - v133);
      uint64_t v132 = *(unsigned int **)(v121 + 808);
      unint64_t v135 = a1[94].u64[0];
      uint64_t v136 = a1[94].i64[1];
    }
    *(void *)&long long v184 = v135;
    *(void *)&long long v178 = v136;
    while (1)
    {
      if (v135)
      {
        int v137 = __clz(__rbit64(v135));
        unint64_t v138 = &v184;
        int v139 = v137;
      }
      else
      {
        unint64_t v135 = v178;
        if (!(void)v178)
        {
          for (unint64_t j = a1[95].u64[0]; j; j &= ~v143)
          {
            int v142 = __clz(__rbit64(j));
            uint64_t v143 = 1 << v142;
            unsigned int v144 = (8 * v142 + 8312) >> 2;
            unsigned int *v132 = v144;
            v132[1] = v144 | 1;
            v132 += 2;
          }
          for (unint64_t k = a1[95].u64[1]; k; k &= ~(1 << v146))
          {
            int v146 = __clz(__rbit64(k));
            *v132++ = v146 + 2114;
          }
          uint64_t v147 = *(void *)(v121 + 840);
          uint64_t v148 = *(void *)(v121 + 832);
          if (v147 == v148) {
            int v149 = 0;
          }
          else {
            int v149 = *(_DWORD *)(v121 + 792) & 1;
          }
          *(_DWORD *)(v121 + 608) = ((*(_DWORD *)(v121 + 744)
                                    - *(_DWORD *)(v121 + 736)
                                    + ((*(void *)(v121 + 672)
                                      - *(void *)(v121 + 664)
                                      + 4
                                      * (*(_DWORD *)(v121 + 804)
                                       + *(_DWORD *)(v121 + 800)
                                       + v149
                                       + (((v147 - v148) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                                  + 8
                                  * (((*(void *)(v121 + 696) - *(void *)(v121 + 688)) >> 2)
                                   + ((*(void *)(v121 + 648) - *(void *)(v121 + 640)) >> 2));
          AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,8ul>::updateWithRuntimeState(v121 + 1936);
          if (a1[90].i8[8]) {
            *(_DWORD *)(v121 + 3304) &= ~0x200000u;
          }
          return v106;
        }
        int v137 = __clz(__rbit64(v178));
        int v139 = v137 | 0x40;
        unint64_t v138 = &v178;
      }
      *(void *)unint64_t v138 = v135 & ~(1 << v137);
      unsigned int v140 = (8 * v139 + 7288) >> 2;
      unsigned int *v132 = v140;
      v132[1] = v140 | 1;
      v132 += 2;
      unint64_t v135 = v184;
    }
  }
  return v106;
}

void sub_242B85A0C(_Unwind_Exception *exception_object)
{
}

void sub_242B85A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (v42) {
    operator delete(v42);
  }
  if (__p) {
    operator delete(__p);
  }
  if (!a20) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::loadObject(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  uint64_t v155 = *(void *)(a1 + 24);
  int v150 = *(unsigned __int8 *)(a1 + 709);
  uint64_t v174 = 0;
  long long v175 = 0;
  uint64_t v176 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 2960) + 40) - *(void *)(*(void *)(a1 + 2960) + 32);
  unint64_t v7 = (0x7DA4E871146ACC2CLL * (v6 >> 3)) | 1;
  if (v7 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = (char *)operator new(96 * v7);
  std::string __p = v8;
  unint64_t v9 = [a3 count] + v7;
  if (v9)
  {
    if (v9 > 0x333333333333333) {
      abort();
    }
    uint64_t v10 = operator new(80 * v9);
    unsigned int v11 = (char *)&v10[10 * v9];
    uint64_t v174 = v10;
    long long v175 = (char *)v10;
    uint64_t v176 = v11;
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v157 = (unint64_t)v11;
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2472, [a3 count]);
  uint64_t v12 = (_OWORD *)(v155 + 1208);
  uint64_t v13 = a1 + 1824;
  uint64_t v14 = v155 + 8;
  long long v183 = *(_OWORD *)(v155 + 1208);
  uint64_t v184 = *(void *)(v155 + 1224);
  uint64_t v15 = *(void *)(v155 + 1464);
  uint64_t v16 = *(void *)(v155 + 1456);
  uint64_t v17 = *(void *)(v155 + 1472);
  int v18 = (_OWORD *)(v155 + 2544);
  long long v177 = *(_OWORD *)(v155 + 2544);
  *(void *)&long long v178 = *(void *)(v155 + 2560);
  uint64_t v154 = a1 + 1824;
  if (v6 < -1303)
  {
    uint64_t v21 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v21 = 1;
    }
    if (v7 >= 0x155555555555555) {
      unint64_t v22 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v23 = (char *)operator new(96 * v22);
    uint64_t v166 = &v23[96 * v22];
    *(void *)uint64_t v23 = v14;
    uint64_t v24 = *(void *)(v155 + 1224);
    *(_OWORD *)(v23 + 8) = *v12;
    *((void *)v23 + 3) = v24;
    *((void *)v23 + 4) = v16;
    *((void *)v23 + 5) = v15;
    *((void *)v23 + 6) = v17;
    uint64_t v25 = *(void *)(v155 + 2560);
    *(_OWORD *)(v23 + 56) = *v18;
    *((void *)v23 + 9) = v25;
    *((void *)v23 + 10) = v154;
    *((void *)v23 + 11) = v154;
    operator delete(__p);
    std::string __p = v23;
  }
  else
  {
    uint64_t v166 = &v8[96 * v7];
    *(void *)uint64_t v8 = v14;
    uint64_t v19 = *(void *)(v155 + 1224);
    *(_OWORD *)(v8 + 8) = *v12;
    *((void *)v8 + 3) = v19;
    *((void *)v8 + 4) = v16;
    *((void *)v8 + 5) = v15;
    *((void *)v8 + 6) = v17;
    uint64_t v20 = *(void *)(v155 + 2560);
    *(_OWORD *)(v8 + 56) = *v18;
    *((void *)v8 + 9) = v20;
    *((void *)v8 + 10) = v13;
    *((void *)v8 + 11) = v13;
  }
  if ((unint64_t)v10 >= v157)
  {
    unint64_t v27 = 0x999999999999999ALL * ((uint64_t)(v157 - (void)v10) >> 4);
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v157 - (void)v10) >> 4) >= 0x199999999999999) {
      unint64_t v28 = 0x333333333333333;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v29 = (char *)operator new(80 * v28);
    *(void *)uint64_t v29 = v14;
    *(_OWORD *)(v29 + 8) = v183;
    *((void *)v29 + 3) = v184;
    *((void *)v29 + 4) = v16;
    *((void *)v29 + 5) = v15;
    *((void *)v29 + 6) = v17;
    *(_OWORD *)(v29 + 56) = v177;
    *((void *)v29 + 9) = v178;
    uint64_t v26 = (uint64_t)(v29 + 80);
    uint64_t v174 = v29;
    uint64_t v176 = &v29[80 * v28];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v10 = v14;
    *(_OWORD *)(v10 + 1) = v183;
    v10[3] = v184;
    v10[4] = v16;
    v10[5] = v15;
    v10[6] = v17;
    *(_OWORD *)(v10 + 7) = v177;
    uint64_t v26 = (uint64_t)(v10 + 10);
    v10[9] = v178;
  }
  long long v175 = (char *)v26;
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>,std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>>((uint64_t)&v174, v26, 0, 0, 0);
  long long v177 = 0u;
  long long v178 = 0u;
  long long v179 = 0u;
  long long v180 = 0u;
  uint64_t v30 = [a4 countByEnumeratingWithState:&v177 objects:&v183 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v178;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v178 != v31) {
          objc_enumerationMutation(a4);
        }
        uint64_t v33 = *(void **)(*((void *)&v177 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unint64_t v34 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
          uint64_t v35 = [v33 buffer];
          uint64_t v36 = *(void *)(v35 + (int)*MEMORY[0x263F4B188] + 72);
          uint64_t v37 = [v33 offset];
          int v38 = *(char **)(v155 + 1472);
          long long v181 = *(_OWORD *)(v155 + 1456);
          long long v182 = v38;
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(v14, v34, v37 + v36, (uint64_t)&v181);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v39 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
            uint64_t v40 = [v33 data];
            uint64_t v41 = *(char **)(v155 + 1472);
            long long v181 = *(_OWORD *)(v155 + 1456);
            long long v182 = v41;
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(v14, v39, v40, (uint64_t)&v181);
          }
        }
      }
      uint64_t v30 = [a4 countByEnumeratingWithState:&v177 objects:&v183 count:16];
    }
    while (v30);
  }
  uint64_t v42 = __p + 96;
  uint64_t v43 = *(void *)(a1 + 2960);
  uint64_t v44 = *(void *)(v43 + 32);
  uint64_t v156 = *(void *)(v43 + 40);
  if (v44 != v156)
  {
    do
    {
      uint64_t v45 = 0;
      uint64_t v158 = v44;
      id obja = (char *)(v44 + 112);
      do
      {
        uint64_t v47 = &obja[296 * v45];
        uint64_t v48 = *(void *)v47;
        if (*(void *)v47)
        {
          uint64_t v49 = v48 + 8;
          long long v183 = *(_OWORD *)(v48 + 1160);
          uint64_t v184 = *(void *)(v48 + 1176);
          uint64_t v50 = *(void *)(v48 + 1416);
          uint64_t v51 = *(void *)(v48 + 1408);
          uint64_t v52 = *(void *)(v48 + 1424);
          long long v177 = *(_OWORD *)(v48 + 2496);
          *(void *)&long long v178 = *(void *)(v48 + 2512);
          long long v181 = *(_OWORD *)(v48 + 1160);
          long long v182 = *(char **)(v48 + 1176);
          long long v170 = *(_OWORD *)(v48 + 2496);
          uint64_t v53 = v47 + 8;
          uint64_t v172 = *(void *)(v48 + 2512);
          if (v42 >= v166)
          {
            unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 5) + 1;
            if (v55 > 0x2AAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v166 - __p) >> 5) > v55) {
              unint64_t v55 = 0x5555555555555556 * ((v166 - __p) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v166 - __p) >> 5) >= 0x155555555555555) {
              unint64_t v56 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              if (v56 > 0x2AAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v57 = (char *)operator new(96 * v56);
            }
            else
            {
              long long v57 = 0;
            }
            long long v58 = &v57[32 * ((v42 - __p) >> 5)];
            *(void *)long long v58 = v49;
            *(_OWORD *)(v58 + 8) = v181;
            *((void *)v58 + 3) = v182;
            *((void *)v58 + 4) = v51;
            *((void *)v58 + 5) = v50;
            *((void *)v58 + 6) = v52;
            *(_OWORD *)(v58 + 56) = v170;
            *((void *)v58 + 9) = v172;
            *((void *)v58 + 10) = v53;
            *((void *)v58 + 11) = v53;
            if (v42 == __p)
            {
              long long v61 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
            }
            else
            {
              long long v59 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
              do
              {
                long long v61 = v59 - 96;
                long long v62 = *((_OWORD *)v42 - 5);
                *((_OWORD *)v59 - 6) = *((_OWORD *)v42 - 6);
                *((_OWORD *)v59 - 5) = v62;
                long long v63 = *((_OWORD *)v42 - 4);
                long long v64 = *((_OWORD *)v42 - 3);
                long long v65 = *((_OWORD *)v42 - 1);
                *((_OWORD *)v59 - 2) = *((_OWORD *)v42 - 2);
                *((_OWORD *)v59 - 1) = v65;
                *((_OWORD *)v59 - 4) = v63;
                *((_OWORD *)v59 - 3) = v64;
                v42 -= 96;
                v59 -= 96;
              }
              while (v42 != __p);
            }
            uint64_t v166 = &v57[96 * v56];
            uint64_t v42 = v58 + 96;
            if (v60) {
              operator delete(v60);
            }
            std::string __p = v61;
          }
          else
          {
            *(void *)uint64_t v42 = v49;
            long long v54 = v182;
            *(_OWORD *)(v42 + 8) = v181;
            *((void *)v42 + 3) = v54;
            *((void *)v42 + 4) = v51;
            *((void *)v42 + 5) = v50;
            *((void *)v42 + 6) = v52;
            *(_OWORD *)(v42 + 56) = v170;
            *((void *)v42 + 9) = v172;
            *((void *)v42 + 10) = v53;
            *((void *)v42 + 11) = v53;
            v42 += 96;
          }
          unint64_t v66 = v175;
          if (v175 < v176)
          {
            *(void *)long long v175 = v49;
            *(_OWORD *)(v66 + 8) = v183;
            *((void *)v66 + 3) = v184;
            *((void *)v66 + 4) = v51;
            *((void *)v66 + 5) = v50;
            *((void *)v66 + 6) = v52;
            *(_OWORD *)(v66 + 56) = v177;
            *((void *)v66 + 9) = v178;
            uint64_t v46 = v66 + 80;
          }
          else
          {
            uint64_t v67 = (char *)v174;
            unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v175 - (unsigned char *)v174) >> 4);
            unint64_t v69 = v68 + 1;
            if (v68 + 1 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((v176 - (unsigned char *)v174) >> 4) > v69) {
              unint64_t v69 = 0x999999999999999ALL * ((v176 - (unsigned char *)v174) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v176 - (unsigned char *)v174) >> 4) >= 0x199999999999999) {
              unint64_t v70 = 0x333333333333333;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70)
            {
              if (v70 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              BOOL v71 = (char *)operator new(80 * v70);
            }
            else
            {
              BOOL v71 = 0;
            }
            uint64_t v72 = &v71[80 * v68];
            *(void *)uint64_t v72 = v49;
            *(_OWORD *)(v72 + 8) = v183;
            *((void *)v72 + 3) = v184;
            *((void *)v72 + 4) = v51;
            *((void *)v72 + 5) = v50;
            *((void *)v72 + 6) = v52;
            *(_OWORD *)(v72 + 56) = v177;
            *((void *)v72 + 9) = v178;
            long long v73 = v72;
            if (v66 != v67)
            {
              do
              {
                *((_OWORD *)v73 - 5) = *((_OWORD *)v66 - 5);
                long long v74 = *((_OWORD *)v66 - 4);
                long long v75 = *((_OWORD *)v66 - 3);
                long long v76 = *((_OWORD *)v66 - 1);
                *((_OWORD *)v73 - 2) = *((_OWORD *)v66 - 2);
                *((_OWORD *)v73 - 1) = v76;
                *((_OWORD *)v73 - 4) = v74;
                *((_OWORD *)v73 - 3) = v75;
                v73 -= 80;
                v66 -= 80;
              }
              while (v66 != v67);
              unint64_t v66 = v67;
            }
            uint64_t v46 = v72 + 80;
            uint64_t v174 = v73;
            uint64_t v176 = &v71[80 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          long long v175 = v46;
        }
        ++v45;
      }
      while (v45 != 4);
      uint64_t v44 = v158 + 1304;
    }
    while (v158 + 1304 != v156);
  }
  long long v179 = 0u;
  long long v180 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  uint64_t v77 = [a3 countByEnumeratingWithState:&v177 objects:&v183 count:16];
  if (v77)
  {
    uint64_t v78 = *(void *)v178;
    long long v79 = v175;
    uint64_t v167 = v176;
    long long v80 = (char *)v174;
    unint64_t v81 = 0x268D57000uLL;
    uint64_t v159 = *(void *)v178;
    do
    {
      uint64_t v82 = 0;
      id objb = (id)v77;
      do
      {
        if (*(void *)v178 != v78) {
          objc_enumerationMutation(a3);
        }
        long long v83 = *(char **)(*((void *)&v177 + 1) + 8 * v82);
        AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(*(void *)&v83[*(int *)(v81 + 1956)]);
        uint64_t v84 = *(int *)(v81 + 1956);
        long long v85 = (__n128 *)&v83[v84];
        long long v86 = *(__n128 **)(a1 + 2480);
        if ((unint64_t)v86 >= *(void *)(a1 + 2488))
        {
          long long v88 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(a1 + 2472, *v85);
          uint64_t v84 = *(int *)(v81 + 1956);
        }
        else
        {
          v86->n128_u64[0] = v85->n128_u64[0];
          unint64_t v87 = v85->n128_u64[1];
          v86->n128_u64[1] = v87;
          if (v87) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
          }
          long long v88 = v86 + 1;
        }
        *(void *)(a1 + 2480) = v88;
        uint64_t v89 = *(void *)&v83[v84];
        uint64_t v90 = v89 + 96;
        long long v182 = *(char **)(v89 + 696);
        long long v181 = *(_OWORD *)(v89 + 680);
        long long v171 = *(_OWORD *)(v89 + 768);
        uint64_t v173 = *(void *)(v89 + 784);
        long long v168 = *(_OWORD *)(v89 + 944);
        uint64_t v169 = *(void *)(v89 + 960);
        if (v79 >= v167)
        {
          unint64_t v92 = v81;
          unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v80) >> 4) + 1;
          if (v93 > 0x333333333333333)
          {
            long long v175 = v79;
            uint64_t v176 = v167;
            uint64_t v174 = v80;
            abort();
          }
          if (0x999999999999999ALL * ((v167 - v80) >> 4) > v93) {
            unint64_t v93 = 0x999999999999999ALL * ((v167 - v80) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v167 - v80) >> 4) >= 0x199999999999999) {
            unint64_t v94 = 0x333333333333333;
          }
          else {
            unint64_t v94 = v93;
          }
          if (v94)
          {
            if (v94 > 0x333333333333333)
            {
              long long v175 = v79;
              uint64_t v176 = v167;
              uint64_t v174 = v80;
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v95 = (char *)operator new(80 * v94);
          }
          else
          {
            int v95 = 0;
          }
          unsigned int v96 = &v95[16 * ((v79 - v80) >> 4)];
          *(void *)unsigned int v96 = v90;
          *(_OWORD *)(v96 + 8) = v181;
          *((void *)v96 + 3) = v182;
          *((_OWORD *)v96 + 2) = v171;
          *((void *)v96 + 6) = v173;
          *((void *)v96 + 9) = v169;
          uint64_t v97 = v96;
          *(_OWORD *)(v96 + 56) = v168;
          if (v79 != v80)
          {
            char v98 = &v95[16 * ((v79 - v80) >> 4)];
            do
            {
              *((_OWORD *)v98 - 5) = *((_OWORD *)v79 - 5);
              long long v99 = *((_OWORD *)v79 - 4);
              long long v100 = *((_OWORD *)v79 - 3);
              long long v101 = *((_OWORD *)v79 - 1);
              uint64_t v97 = v98 - 80;
              *((_OWORD *)v98 - 2) = *((_OWORD *)v79 - 2);
              *((_OWORD *)v98 - 1) = v101;
              *((_OWORD *)v98 - 4) = v99;
              *((_OWORD *)v98 - 3) = v100;
              v79 -= 80;
              v98 -= 80;
            }
            while (v79 != v80);
          }
          uint64_t v167 = &v95[80 * v94];
          if (v80)
          {
            operator delete(v80);
            uint64_t v84 = *(int *)(v92 + 1956);
            long long v80 = v97;
            long long v79 = v96;
            unint64_t v81 = v92;
            uint64_t v78 = v159;
            uint64_t v77 = (uint64_t)objb;
          }
          else
          {
            long long v80 = v97;
            long long v79 = v96;
            uint64_t v77 = (uint64_t)objb;
            unint64_t v81 = v92;
            uint64_t v78 = v159;
          }
        }
        else
        {
          *(void *)long long v79 = v90;
          long long v91 = v181;
          *((void *)v79 + 3) = v182;
          *(_OWORD *)(v79 + 8) = v91;
          *((_OWORD *)v79 + 2) = v171;
          *((void *)v79 + 6) = v173;
          *(_OWORD *)(v79 + 56) = v168;
          *((void *)v79 + 9) = v169;
        }
        v79 += 80;
        AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(*(void *)&v83[v84], (void *)[v83 relocations]);
        ++v82;
      }
      while (v82 != v77);
      long long v175 = v79;
      uint64_t v176 = v167;
      uint64_t v174 = v80;
      uint64_t v77 = [a3 countByEnumeratingWithState:&v177 objects:&v183 count:16];
    }
    while (v77);
  }
  long long v181 = 0uLL;
  long long v182 = 0;
  uint64_t v102 = v42 - __p;
  if (v42 == __p)
  {
    uint64_t v104 = 0;
    uint64_t v103 = v155;
  }
  else
  {
    uint64_t v103 = v155;
    if (0xAAAAAAAAAAAAAAABLL * (v102 >> 5) > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v104 = (char *)operator new(v42 - __p);
    *(void *)&long long v181 = v104;
    *((void *)&v181 + 1) = v104;
    long long v182 = &v104[32 * (v102 >> 5)];
    size_t v105 = 96 * ((v102 - 96) / 0x60uLL) + 96;
    memcpy(v104, __p, v105);
    *((void *)&v181 + 1) = &v104[v105];
  }
  uint64_t v106 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load(a2, (uint64_t **)&v174, (uint64_t **)&v174, (size_t *)&v181, *(_DWORD *)(v103 + 1036), a5, a6, v150 != 0);
  if (v104)
  {
    *((void *)&v181 + 1) = v104;
    operator delete(v104);
  }
  int v107 = (void *)(v103 + 1560);
  if ((*(char *)(v103 + 1583) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v103 + 1583)) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  if (*(void *)(v103 + 1568))
  {
    int v107 = (void *)*v107;
LABEL_122:
    memcpy((char *)v107 + *(void *)(v103 + 1584), *(const void **)(v103 + 1216), *(void *)(v103 + 1224));
  }
LABEL_123:
  uint64_t v108 = *(void *)(a1 + 2960);
  unint64_t v109 = *(void **)(v108 + 32);
  uint64_t v110 = *(void **)(v108 + 40);
  while (v109 != v110)
  {
    uint64_t v111 = v109[14];
    if (!v111) {
      goto LABEL_134;
    }
    uint64_t v112 = (void *)(v111 + 1512);
    if (*(char *)(v111 + 1535) < 0)
    {
      if (!*(void *)(v111 + 1520)) {
        goto LABEL_134;
      }
      uint64_t v112 = (void *)*v112;
LABEL_133:
      memcpy((char *)v112 + *(void *)(v111 + 1536), *(const void **)(v111 + 1168), *(void *)(v111 + 1176));
      goto LABEL_134;
    }
    if (*(unsigned char *)(v111 + 1535)) {
      goto LABEL_133;
    }
LABEL_134:
    uint64_t v113 = v109[51];
    if (!v113) {
      goto LABEL_141;
    }
    long long v114 = (void *)(v113 + 1512);
    if (*(char *)(v113 + 1535) < 0)
    {
      if (!*(void *)(v113 + 1520)) {
        goto LABEL_141;
      }
      long long v114 = (void *)*v114;
LABEL_140:
      memcpy((char *)v114 + *(void *)(v113 + 1536), *(const void **)(v113 + 1168), *(void *)(v113 + 1176));
      goto LABEL_141;
    }
    if (*(unsigned char *)(v113 + 1535)) {
      goto LABEL_140;
    }
LABEL_141:
    uint64_t v115 = v109[88];
    if (!v115) {
      goto LABEL_148;
    }
    long long v116 = (void *)(v115 + 1512);
    if (*(char *)(v115 + 1535) < 0)
    {
      if (!*(void *)(v115 + 1520)) {
        goto LABEL_148;
      }
      long long v116 = (void *)*v116;
LABEL_147:
      memcpy((char *)v116 + *(void *)(v115 + 1536), *(const void **)(v115 + 1168), *(void *)(v115 + 1176));
      goto LABEL_148;
    }
    if (*(unsigned char *)(v115 + 1535)) {
      goto LABEL_147;
    }
LABEL_148:
    uint64_t v117 = v109[125];
    if (v117)
    {
      long long v118 = (void *)(v117 + 1512);
      if (*(char *)(v117 + 1535) < 0)
      {
        if (*(void *)(v117 + 1520))
        {
          long long v118 = (void *)*v118;
LABEL_124:
          memcpy((char *)v118 + *(void *)(v117 + 1536), *(const void **)(v117 + 1168), *(void *)(v117 + 1176));
        }
      }
      else if (*(unsigned char *)(v117 + 1535))
      {
        goto LABEL_124;
      }
    }
    v109 += 163;
  }
  if (v174) {
    operator delete(v174);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v106)
  {
    uint64_t v119 = *(void *)(a1 + 24);
    unint64_t v120 = *(void *)(a1 + 2072);
    unsigned int v121 = (512 - 8 * __clz(v120)) >> 2;
    if (v120) {
      unsigned int v122 = v121;
    }
    else {
      unsigned int v122 = 0;
    }
    *(_DWORD *)(v119 + 800) = v122;
    int8x16_t v123 = *(int8x16_t *)(a1 + 2080);
    int32x2_t v124 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v123)))));
    unsigned __int32 v125 = vadd_s32(vdup_lane_s32(v124, 1), v124).u32[0];
    uint8x8_t v126 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 2096));
    v126.i16[0] = vaddlv_u8(v126);
    unsigned __int32 v127 = v125 + v126.i32[0];
    uint8x8_t v128 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 2104));
    v128.i16[0] = vaddlv_u8(v128);
    unint64_t v129 = v128.i32[0] + 2 * v127;
    *(_DWORD *)(v119 + 804) = v129;
    uint8x8_t v130 = *(unsigned int **)(v119 + 808);
    unint64_t v131 = (uint64_t)(*(void *)(v119 + 816) - (void)v130) >> 2;
    BOOL v132 = v129 >= v131;
    if (v129 <= v131)
    {
      uint64_t v134 = v123.i64[1];
      unint64_t v133 = v123.i64[0];
      if (!v132) {
        *(void *)(v119 + 816) = &v130[v129];
      }
    }
    else
    {
      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v119 + 808), v129 - v131);
      uint8x8_t v130 = *(unsigned int **)(v119 + 808);
      unint64_t v133 = *(void *)(a1 + 2080);
      uint64_t v134 = *(void *)(a1 + 2088);
    }
    *(void *)&long long v183 = v133;
    *(void *)&long long v177 = v134;
    while (1)
    {
      if (v133)
      {
        int v135 = __clz(__rbit64(v133));
        uint64_t v136 = &v183;
        int v137 = v135;
      }
      else
      {
        unint64_t v133 = v177;
        if (!(void)v177)
        {
          for (unint64_t j = *(void *)(a1 + 2096); j; j &= ~v141)
          {
            int v140 = __clz(__rbit64(j));
            uint64_t v141 = 1 << v140;
            unsigned int v142 = (8 * v140 + 8248) >> 2;
            unsigned int *v130 = v142;
            v130[1] = v142 | 1;
            v130 += 2;
          }
          for (unint64_t k = *(void *)(a1 + 2104); k; k &= ~(1 << v144))
          {
            int v144 = __clz(__rbit64(k));
            *v130++ = v144 + 2293;
            uint64_t v145 = *(unsigned int *)(v119 + 3260);
            *(_DWORD *)(v119 + 3264 + 4 * v145) = v144;
            *(_DWORD *)(v119 + 3260) = v145 + 1;
          }
          uint64_t v146 = *(void *)(v119 + 840);
          uint64_t v147 = *(void *)(v119 + 832);
          if (v146 == v147) {
            int v148 = 0;
          }
          else {
            int v148 = *(_DWORD *)(v119 + 792) & 1;
          }
          *(_DWORD *)(v119 + 608) = ((*(_DWORD *)(v119 + 744)
                                    - *(_DWORD *)(v119 + 736)
                                    + ((*(void *)(v119 + 672)
                                      - *(void *)(v119 + 664)
                                      + 4
                                      * (*(_DWORD *)(v119 + 804)
                                       + *(_DWORD *)(v119 + 800)
                                       + v148
                                       + (((v146 - v147) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                                  + 8
                                  * (((*(void *)(v119 + 696) - *(void *)(v119 + 688)) >> 2)
                                   + ((*(void *)(v119 + 648) - *(void *)(v119 + 640)) >> 2));
          AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::updateWithRuntimeState(v119 + 1936);
          return v106;
        }
        int v135 = __clz(__rbit64(v177));
        int v137 = v135 | 0x40;
        uint64_t v136 = &v177;
      }
      *(void *)uint64_t v136 = v133 & ~(1 << v135);
      unsigned int v138 = (8 * v137 + 7224) >> 2;
      unsigned int *v130 = v138;
      v130[1] = v138 | 1;
      v130 += 2;
      unint64_t v133 = v183;
    }
  }
  return v106;
}

void sub_242B86AAC(_Unwind_Exception *exception_object)
{
}

void sub_242B86AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (v42) {
    operator delete(v42);
  }
  if (__p) {
    operator delete(__p);
  }
  if (!a20) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::loadMesh(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6)
{
  uint64_t v183 = *MEMORY[0x263EF8340];
  uint64_t v153 = *(void *)(a1 + 32);
  int v148 = *(unsigned __int8 *)(a1 + 709);
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  uint64_t v174 = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 2976) + 40) - *(void *)(*(void *)(a1 + 2976) + 32);
  unint64_t v7 = (0x7DA4E871146ACC2CLL * (v6 >> 3)) | 1;
  if (v7 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = (char *)operator new(96 * v7);
  std::string __p = v8;
  unint64_t v9 = [a3 count] + v7;
  if (v9)
  {
    if (v9 > 0x333333333333333) {
      abort();
    }
    uint64_t v10 = operator new(80 * v9);
    unsigned int v11 = (char *)&v10[10 * v9];
    uint64_t v172 = v10;
    uint64_t v173 = (char *)v10;
    uint64_t v174 = v11;
  }
  else
  {
    unsigned int v11 = 0;
    uint64_t v10 = 0;
  }
  unint64_t v155 = (unint64_t)v11;
  std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::reserve(a1 + 2496, [a3 count]);
  uint64_t v12 = (_OWORD *)(v153 + 1208);
  uint64_t v13 = a1 + 2112;
  uint64_t v14 = v153 + 8;
  long long v181 = *(_OWORD *)(v153 + 1208);
  uint64_t v182 = *(void *)(v153 + 1224);
  uint64_t v15 = *(void *)(v153 + 1464);
  uint64_t v16 = *(void *)(v153 + 1456);
  uint64_t v17 = *(void *)(v153 + 1472);
  int v18 = (_OWORD *)(v153 + 2544);
  long long v175 = *(_OWORD *)(v153 + 2544);
  *(void *)&long long v176 = *(void *)(v153 + 2560);
  uint64_t v152 = a1 + 2112;
  if (v6 < -1303)
  {
    uint64_t v21 = 2 * v7;
    if (2 * v7 <= 1) {
      uint64_t v21 = 1;
    }
    if (v7 >= 0x155555555555555) {
      unint64_t v22 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v21;
    }
    if (v22 > 0x2AAAAAAAAAAAAAALL) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v23 = (char *)operator new(96 * v22);
    int v164 = &v23[96 * v22];
    *(void *)uint64_t v23 = v14;
    uint64_t v24 = *(void *)(v153 + 1224);
    *(_OWORD *)(v23 + 8) = *v12;
    *((void *)v23 + 3) = v24;
    *((void *)v23 + 4) = v16;
    *((void *)v23 + 5) = v15;
    *((void *)v23 + 6) = v17;
    uint64_t v25 = *(void *)(v153 + 2560);
    *(_OWORD *)(v23 + 56) = *v18;
    *((void *)v23 + 9) = v25;
    *((void *)v23 + 10) = v152;
    *((void *)v23 + 11) = v152;
    operator delete(__p);
    std::string __p = v23;
  }
  else
  {
    int v164 = &v8[96 * v7];
    *(void *)uint64_t v8 = v14;
    uint64_t v19 = *(void *)(v153 + 1224);
    *(_OWORD *)(v8 + 8) = *v12;
    *((void *)v8 + 3) = v19;
    *((void *)v8 + 4) = v16;
    *((void *)v8 + 5) = v15;
    *((void *)v8 + 6) = v17;
    uint64_t v20 = *(void *)(v153 + 2560);
    *(_OWORD *)(v8 + 56) = *v18;
    *((void *)v8 + 9) = v20;
    *((void *)v8 + 10) = v13;
    *((void *)v8 + 11) = v13;
  }
  if ((unint64_t)v10 >= v155)
  {
    unint64_t v27 = 0x999999999999999ALL * ((uint64_t)(v155 - (void)v10) >> 4);
    if (v27 <= 1) {
      unint64_t v27 = 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v155 - (void)v10) >> 4) >= 0x199999999999999) {
      unint64_t v28 = 0x333333333333333;
    }
    else {
      unint64_t v28 = v27;
    }
    if (v28 > 0x333333333333333) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    uint64_t v29 = (char *)operator new(80 * v28);
    *(void *)uint64_t v29 = v14;
    *(_OWORD *)(v29 + 8) = v181;
    *((void *)v29 + 3) = v182;
    *((void *)v29 + 4) = v16;
    *((void *)v29 + 5) = v15;
    *((void *)v29 + 6) = v17;
    *(_OWORD *)(v29 + 56) = v175;
    *((void *)v29 + 9) = v176;
    uint64_t v26 = (uint64_t)(v29 + 80);
    uint64_t v172 = v29;
    uint64_t v174 = &v29[80 * v28];
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *uint64_t v10 = v14;
    *(_OWORD *)(v10 + 1) = v181;
    v10[3] = v182;
    v10[4] = v16;
    v10[5] = v15;
    v10[6] = v17;
    *(_OWORD *)(v10 + 7) = v175;
    uint64_t v26 = (uint64_t)(v10 + 10);
    v10[9] = v176;
  }
  uint64_t v173 = (char *)v26;
  std::vector<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo,std::allocator<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo>>::__insert_with_size[abi:nn180100]<std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>,std::__wrap_iter<AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::ModuleInfo const*>>((uint64_t)&v172, v26, 0, 0, 0);
  long long v175 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  uint64_t v30 = [a4 countByEnumeratingWithState:&v175 objects:&v181 count:16];
  if (v30)
  {
    uint64_t v31 = *(void *)v176;
    do
    {
      for (uint64_t i = 0; i != v30; ++i)
      {
        if (*(void *)v176 != v31) {
          objc_enumerationMutation(a4);
        }
        uint64_t v33 = *(void **)(*((void *)&v175 + 1) + 8 * i);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          unint64_t v34 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
          uint64_t v35 = [v33 buffer];
          uint64_t v36 = *(void *)(v35 + (int)*MEMORY[0x263F4B188] + 72);
          uint64_t v37 = [v33 offset];
          int v38 = *(char **)(v153 + 1472);
          long long v179 = *(_OWORD *)(v153 + 1456);
          long long v180 = v38;
          AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIRelocation(v14, v34, v37 + v36, (uint64_t)&v179);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v39 = (char *)objc_msgSend((id)objc_msgSend(v33, "symbolName"), "UTF8String");
            uint64_t v40 = [v33 data];
            uint64_t v41 = *(char **)(v153 + 1472);
            long long v179 = *(_OWORD *)(v153 + 1456);
            long long v180 = v41;
            AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::LinkInfo::applySPIConstantRelocation(v14, v39, v40, (uint64_t)&v179);
          }
        }
      }
      uint64_t v30 = [a4 countByEnumeratingWithState:&v175 objects:&v181 count:16];
    }
    while (v30);
  }
  uint64_t v42 = __p + 96;
  uint64_t v43 = *(void *)(a1 + 2976);
  uint64_t v44 = *(void *)(v43 + 32);
  uint64_t v154 = *(void *)(v43 + 40);
  if (v44 != v154)
  {
    do
    {
      uint64_t v45 = 0;
      uint64_t v156 = v44;
      id obja = (char *)(v44 + 112);
      do
      {
        uint64_t v47 = &obja[296 * v45];
        uint64_t v48 = *(void *)v47;
        if (*(void *)v47)
        {
          uint64_t v49 = v48 + 8;
          long long v181 = *(_OWORD *)(v48 + 1160);
          uint64_t v182 = *(void *)(v48 + 1176);
          uint64_t v50 = *(void *)(v48 + 1416);
          uint64_t v51 = *(void *)(v48 + 1408);
          uint64_t v52 = *(void *)(v48 + 1424);
          long long v175 = *(_OWORD *)(v48 + 2496);
          *(void *)&long long v176 = *(void *)(v48 + 2512);
          long long v179 = *(_OWORD *)(v48 + 1160);
          long long v180 = *(char **)(v48 + 1176);
          long long v168 = *(_OWORD *)(v48 + 2496);
          uint64_t v53 = v47 + 8;
          uint64_t v170 = *(void *)(v48 + 2512);
          if (v42 >= v164)
          {
            unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((v42 - __p) >> 5) + 1;
            if (v55 > 0x2AAAAAAAAAAAAAALL) {
              abort();
            }
            if (0x5555555555555556 * ((v164 - __p) >> 5) > v55) {
              unint64_t v55 = 0x5555555555555556 * ((v164 - __p) >> 5);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v164 - __p) >> 5) >= 0x155555555555555) {
              unint64_t v56 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v56 = v55;
            }
            if (v56)
            {
              if (v56 > 0x2AAAAAAAAAAAAAALL) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              long long v57 = (char *)operator new(96 * v56);
            }
            else
            {
              long long v57 = 0;
            }
            long long v58 = &v57[32 * ((v42 - __p) >> 5)];
            *(void *)long long v58 = v49;
            *(_OWORD *)(v58 + 8) = v179;
            *((void *)v58 + 3) = v180;
            *((void *)v58 + 4) = v51;
            *((void *)v58 + 5) = v50;
            *((void *)v58 + 6) = v52;
            *(_OWORD *)(v58 + 56) = v168;
            *((void *)v58 + 9) = v170;
            *((void *)v58 + 10) = v53;
            *((void *)v58 + 11) = v53;
            if (v42 == __p)
            {
              long long v61 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
            }
            else
            {
              long long v59 = &v57[32 * ((v42 - __p) >> 5)];
              long long v60 = __p;
              do
              {
                long long v61 = v59 - 96;
                long long v62 = *((_OWORD *)v42 - 5);
                *((_OWORD *)v59 - 6) = *((_OWORD *)v42 - 6);
                *((_OWORD *)v59 - 5) = v62;
                long long v63 = *((_OWORD *)v42 - 4);
                long long v64 = *((_OWORD *)v42 - 3);
                long long v65 = *((_OWORD *)v42 - 1);
                *((_OWORD *)v59 - 2) = *((_OWORD *)v42 - 2);
                *((_OWORD *)v59 - 1) = v65;
                *((_OWORD *)v59 - 4) = v63;
                *((_OWORD *)v59 - 3) = v64;
                v42 -= 96;
                v59 -= 96;
              }
              while (v42 != __p);
            }
            int v164 = &v57[96 * v56];
            uint64_t v42 = v58 + 96;
            if (v60) {
              operator delete(v60);
            }
            std::string __p = v61;
          }
          else
          {
            *(void *)uint64_t v42 = v49;
            long long v54 = v180;
            *(_OWORD *)(v42 + 8) = v179;
            *((void *)v42 + 3) = v54;
            *((void *)v42 + 4) = v51;
            *((void *)v42 + 5) = v50;
            *((void *)v42 + 6) = v52;
            *(_OWORD *)(v42 + 56) = v168;
            *((void *)v42 + 9) = v170;
            *((void *)v42 + 10) = v53;
            *((void *)v42 + 11) = v53;
            v42 += 96;
          }
          unint64_t v66 = v173;
          if (v173 < v174)
          {
            *(void *)uint64_t v173 = v49;
            *(_OWORD *)(v66 + 8) = v181;
            *((void *)v66 + 3) = v182;
            *((void *)v66 + 4) = v51;
            *((void *)v66 + 5) = v50;
            *((void *)v66 + 6) = v52;
            *(_OWORD *)(v66 + 56) = v175;
            *((void *)v66 + 9) = v176;
            uint64_t v46 = v66 + 80;
          }
          else
          {
            uint64_t v67 = (char *)v172;
            unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v173 - (unsigned char *)v172) >> 4);
            unint64_t v69 = v68 + 1;
            if (v68 + 1 > 0x333333333333333) {
              abort();
            }
            if (0x999999999999999ALL * ((v174 - (unsigned char *)v172) >> 4) > v69) {
              unint64_t v69 = 0x999999999999999ALL * ((v174 - (unsigned char *)v172) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v174 - (unsigned char *)v172) >> 4) >= 0x199999999999999) {
              unint64_t v70 = 0x333333333333333;
            }
            else {
              unint64_t v70 = v69;
            }
            if (v70)
            {
              if (v70 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              BOOL v71 = (char *)operator new(80 * v70);
            }
            else
            {
              BOOL v71 = 0;
            }
            uint64_t v72 = &v71[80 * v68];
            *(void *)uint64_t v72 = v49;
            *(_OWORD *)(v72 + 8) = v181;
            *((void *)v72 + 3) = v182;
            *((void *)v72 + 4) = v51;
            *((void *)v72 + 5) = v50;
            *((void *)v72 + 6) = v52;
            *(_OWORD *)(v72 + 56) = v175;
            *((void *)v72 + 9) = v176;
            long long v73 = v72;
            if (v66 != v67)
            {
              do
              {
                *((_OWORD *)v73 - 5) = *((_OWORD *)v66 - 5);
                long long v74 = *((_OWORD *)v66 - 4);
                long long v75 = *((_OWORD *)v66 - 3);
                long long v76 = *((_OWORD *)v66 - 1);
                *((_OWORD *)v73 - 2) = *((_OWORD *)v66 - 2);
                *((_OWORD *)v73 - 1) = v76;
                *((_OWORD *)v73 - 4) = v74;
                *((_OWORD *)v73 - 3) = v75;
                v73 -= 80;
                v66 -= 80;
              }
              while (v66 != v67);
              unint64_t v66 = v67;
            }
            uint64_t v46 = v72 + 80;
            uint64_t v172 = v73;
            uint64_t v174 = &v71[80 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          uint64_t v173 = v46;
        }
        ++v45;
      }
      while (v45 != 4);
      uint64_t v44 = v156 + 1304;
    }
    while (v156 + 1304 != v154);
  }
  long long v177 = 0u;
  long long v178 = 0u;
  long long v175 = 0u;
  long long v176 = 0u;
  uint64_t v77 = [a3 countByEnumeratingWithState:&v175 objects:&v181 count:16];
  if (v77)
  {
    uint64_t v78 = *(void *)v176;
    long long v79 = v173;
    long long v165 = v174;
    long long v80 = (char *)v172;
    unint64_t v81 = 0x268D57000uLL;
    uint64_t v157 = *(void *)v176;
    do
    {
      uint64_t v82 = 0;
      id objb = (id)v77;
      do
      {
        if (*(void *)v176 != v78) {
          objc_enumerationMutation(a3);
        }
        long long v83 = *(char **)(*((void *)&v175 + 1) + 8 * v82);
        AGX::DynamicLibrary<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::allocateCodeHeap(*(void *)&v83[*(int *)(v81 + 1956)]);
        uint64_t v84 = *(int *)(v81 + 1956);
        long long v85 = (__n128 *)&v83[v84];
        long long v86 = *(__n128 **)(a1 + 2504);
        if ((unint64_t)v86 >= *(void *)(a1 + 2512))
        {
          long long v88 = std::vector<std::shared_ptr<AGX::HAL200::DynamicLibrary>>::__emplace_back_slow_path<std::shared_ptr<AGX::HAL200::DynamicLibrary>&>(a1 + 2496, *v85);
          uint64_t v84 = *(int *)(v81 + 1956);
        }
        else
        {
          v86->n128_u64[0] = v85->n128_u64[0];
          unint64_t v87 = v85->n128_u64[1];
          v86->n128_u64[1] = v87;
          if (v87) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
          }
          long long v88 = v86 + 1;
        }
        *(void *)(a1 + 2504) = v88;
        uint64_t v89 = *(void *)&v83[v84];
        uint64_t v90 = v89 + 96;
        long long v180 = *(char **)(v89 + 696);
        long long v179 = *(_OWORD *)(v89 + 680);
        long long v169 = *(_OWORD *)(v89 + 768);
        uint64_t v171 = *(void *)(v89 + 784);
        long long v166 = *(_OWORD *)(v89 + 944);
        uint64_t v167 = *(void *)(v89 + 960);
        if (v79 >= v165)
        {
          unint64_t v92 = v81;
          unint64_t v93 = 0xCCCCCCCCCCCCCCCDLL * ((v79 - v80) >> 4) + 1;
          if (v93 > 0x333333333333333)
          {
            uint64_t v173 = v79;
            uint64_t v174 = v165;
            uint64_t v172 = v80;
            abort();
          }
          if (0x999999999999999ALL * ((v165 - v80) >> 4) > v93) {
            unint64_t v93 = 0x999999999999999ALL * ((v165 - v80) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v165 - v80) >> 4) >= 0x199999999999999) {
            unint64_t v94 = 0x333333333333333;
          }
          else {
            unint64_t v94 = v93;
          }
          if (v94)
          {
            if (v94 > 0x333333333333333)
            {
              uint64_t v173 = v79;
              uint64_t v174 = v165;
              uint64_t v172 = v80;
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v95 = (char *)operator new(80 * v94);
          }
          else
          {
            int v95 = 0;
          }
          unsigned int v96 = &v95[16 * ((v79 - v80) >> 4)];
          *(void *)unsigned int v96 = v90;
          *(_OWORD *)(v96 + 8) = v179;
          *((void *)v96 + 3) = v180;
          *((_OWORD *)v96 + 2) = v169;
          *((void *)v96 + 6) = v171;
          *((void *)v96 + 9) = v167;
          uint64_t v97 = v96;
          *(_OWORD *)(v96 + 56) = v166;
          if (v79 != v80)
          {
            char v98 = &v95[16 * ((v79 - v80) >> 4)];
            do
            {
              *((_OWORD *)v98 - 5) = *((_OWORD *)v79 - 5);
              long long v99 = *((_OWORD *)v79 - 4);
              long long v100 = *((_OWORD *)v79 - 3);
              long long v101 = *((_OWORD *)v79 - 1);
              uint64_t v97 = v98 - 80;
              *((_OWORD *)v98 - 2) = *((_OWORD *)v79 - 2);
              *((_OWORD *)v98 - 1) = v101;
              *((_OWORD *)v98 - 4) = v99;
              *((_OWORD *)v98 - 3) = v100;
              v79 -= 80;
              v98 -= 80;
            }
            while (v79 != v80);
          }
          long long v165 = &v95[80 * v94];
          if (v80)
          {
            operator delete(v80);
            uint64_t v84 = *(int *)(v92 + 1956);
            long long v80 = v97;
            long long v79 = v96;
            unint64_t v81 = v92;
            uint64_t v78 = v157;
            uint64_t v77 = (uint64_t)objb;
          }
          else
          {
            long long v80 = v97;
            long long v79 = v96;
            uint64_t v77 = (uint64_t)objb;
            unint64_t v81 = v92;
            uint64_t v78 = v157;
          }
        }
        else
        {
          *(void *)long long v79 = v90;
          long long v91 = v179;
          *((void *)v79 + 3) = v180;
          *(_OWORD *)(v79 + 8) = v91;
          *((_OWORD *)v79 + 2) = v169;
          *((void *)v79 + 6) = v171;
          *(_OWORD *)(v79 + 56) = v166;
          *((void *)v79 + 9) = v167;
        }
        v79 += 80;
        AGX::applySPIRelocations<AGX::HAL200::ObjClasses,AGX::HAL200::DynamicLibrary>(*(void *)&v83[v84], (void *)[v83 relocations]);
        ++v82;
      }
      while (v82 != v77);
      uint64_t v173 = v79;
      uint64_t v174 = v165;
      uint64_t v172 = v80;
      uint64_t v77 = [a3 countByEnumeratingWithState:&v175 objects:&v181 count:16];
    }
    while (v77);
  }
  long long v179 = 0uLL;
  long long v180 = 0;
  uint64_t v102 = v42 - __p;
  if (v42 == __p)
  {
    uint64_t v104 = 0;
    uint64_t v103 = v153;
  }
  else
  {
    uint64_t v103 = v153;
    if (0xAAAAAAAAAAAAAAABLL * (v102 >> 5) > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    uint64_t v104 = (char *)operator new(v42 - __p);
    *(void *)&long long v179 = v104;
    *((void *)&v179 + 1) = v104;
    long long v180 = &v104[32 * (v102 >> 5)];
    size_t v105 = 96 * ((v102 - 96) / 0x60uLL) + 96;
    memcpy(v104, __p, v105);
    *((void *)&v179 + 1) = &v104[v105];
  }
  uint64_t v106 = AGX::DynamicLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,void>::load(a2, (uint64_t **)&v172, (uint64_t **)&v172, (size_t *)&v179, *(_DWORD *)(v103 + 1036), a5, a6, v148 != 0);
  if (v104)
  {
    *((void *)&v179 + 1) = v104;
    operator delete(v104);
  }
  int v107 = (void *)(v103 + 1560);
  if ((*(char *)(v103 + 1583) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v103 + 1583)) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  if (*(void *)(v103 + 1568))
  {
    int v107 = (void *)*v107;
LABEL_122:
    memcpy((char *)v107 + *(void *)(v103 + 1584), *(const void **)(v103 + 1216), *(void *)(v103 + 1224));
  }
LABEL_123:
  uint64_t v108 = *(void *)(a1 + 2976);
  unint64_t v109 = *(void **)(v108 + 32);
  uint64_t v110 = *(void **)(v108 + 40);
  while (v109 != v110)
  {
    uint64_t v111 = v109[14];
    if (!v111) {
      goto LABEL_134;
    }
    uint64_t v112 = (void *)(v111 + 1512);
    if (*(char *)(v111 + 1535) < 0)
    {
      if (!*(void *)(v111 + 1520)) {
        goto LABEL_134;
      }
      uint64_t v112 = (void *)*v112;
LABEL_133:
      memcpy((char *)v112 + *(void *)(v111 + 1536), *(const void **)(v111 + 1168), *(void *)(v111 + 1176));
      goto LABEL_134;
    }
    if (*(unsigned char *)(v111 + 1535)) {
      goto LABEL_133;
    }
LABEL_134:
    uint64_t v113 = v109[51];
    if (!v113) {
      goto LABEL_141;
    }
    long long v114 = (void *)(v113 + 1512);
    if (*(char *)(v113 + 1535) < 0)
    {
      if (!*(void *)(v113 + 1520)) {
        goto LABEL_141;
      }
      long long v114 = (void *)*v114;
LABEL_140:
      memcpy((char *)v114 + *(void *)(v113 + 1536), *(const void **)(v113 + 1168), *(void *)(v113 + 1176));
      goto LABEL_141;
    }
    if (*(unsigned char *)(v113 + 1535)) {
      goto LABEL_140;
    }
LABEL_141:
    uint64_t v115 = v109[88];
    if (!v115) {
      goto LABEL_148;
    }
    long long v116 = (void *)(v115 + 1512);
    if (*(char *)(v115 + 1535) < 0)
    {
      if (!*(void *)(v115 + 1520)) {
        goto LABEL_148;
      }
      long long v116 = (void *)*v116;
LABEL_147:
      memcpy((char *)v116 + *(void *)(v115 + 1536), *(const void **)(v115 + 1168), *(void *)(v115 + 1176));
      goto LABEL_148;
    }
    if (*(unsigned char *)(v115 + 1535)) {
      goto LABEL_147;
    }
LABEL_148:
    uint64_t v117 = v109[125];
    if (v117)
    {
      long long v118 = (void *)(v117 + 1512);
      if (*(char *)(v117 + 1535) < 0)
      {
        if (*(void *)(v117 + 1520))
        {
          long long v118 = (void *)*v118;
LABEL_124:
          memcpy((char *)v118 + *(void *)(v117 + 1536), *(const void **)(v117 + 1168), *(void *)(v117 + 1176));
        }
      }
      else if (*(unsigned char *)(v117 + 1535))
      {
        goto LABEL_124;
      }
    }
    v109 += 163;
  }
  if (v172) {
    operator delete(v172);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v106)
  {
    uint64_t v119 = *(void *)(a1 + 32);
    unint64_t v120 = *(void *)(a1 + 2360);
    unsigned int v121 = (512 - 8 * __clz(v120)) >> 2;
    if (v120) {
      unsigned int v122 = v121;
    }
    else {
      unsigned int v122 = 0;
    }
    *(_DWORD *)(v119 + 800) = v122;
    int8x16_t v123 = *(int8x16_t *)(a1 + 2368);
    int32x2_t v124 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v123)))));
    unsigned __int32 v125 = vadd_s32(vdup_lane_s32(v124, 1), v124).u32[0];
    uint8x8_t v126 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 2384));
    v126.i16[0] = vaddlv_u8(v126);
    unsigned __int32 v127 = v125 + v126.i32[0];
    uint8x8_t v128 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 2392));
    v128.i16[0] = vaddlv_u8(v128);
    unint64_t v129 = v128.i32[0] + 2 * v127;
    *(_DWORD *)(v119 + 804) = v129;
    uint8x8_t v130 = *(unsigned int **)(v119 + 808);
    unint64_t v131 = (uint64_t)(*(void *)(v119 + 816) - (void)v130) >> 2;
    BOOL v132 = v129 >= v131;
    if (v129 <= v131)
    {
      uint64_t v134 = v123.i64[1];
      unint64_t v133 = v123.i64[0];
      if (!v132) {
        *(void *)(v119 + 816) = &v130[v129];
      }
    }
    else
    {
      std::vector<unsigned int>::__append((std::vector<unsigned int> *)(v119 + 808), v129 - v131);
      uint8x8_t v130 = *(unsigned int **)(v119 + 808);
      unint64_t v133 = *(void *)(a1 + 2368);
      uint64_t v134 = *(void *)(a1 + 2376);
    }
    *(void *)&long long v181 = v133;
    *(void *)&long long v175 = v134;
    while (1)
    {
      if (v133)
      {
        int v135 = __clz(__rbit64(v133));
        uint64_t v136 = &v181;
        int v137 = v135;
      }
      else
      {
        unint64_t v133 = v175;
        if (!(void)v175)
        {
          for (unint64_t j = *(void *)(a1 + 2384); j; j &= ~v141)
          {
            int v140 = __clz(__rbit64(j));
            uint64_t v141 = 1 << v140;
            unsigned int v142 = (8 * v140 + 8264) >> 2;
            unsigned int *v130 = v142;
            v130[1] = v142 | 1;
            v130 += 2;
          }
          for (uint64_t k = *(void *)(a1 + 2392); k; k &= k - 1)
            *v130++ = 2098;
          uint64_t v144 = *(void *)(v119 + 840);
          uint64_t v145 = *(void *)(v119 + 832);
          if (v144 == v145) {
            int v146 = 0;
          }
          else {
            int v146 = *(_DWORD *)(v119 + 792) & 1;
          }
          *(_DWORD *)(v119 + 608) = ((*(_DWORD *)(v119 + 744)
                                    - *(_DWORD *)(v119 + 736)
                                    + ((*(void *)(v119 + 672)
                                      - *(void *)(v119 + 664)
                                      + 4
                                      * (*(_DWORD *)(v119 + 804)
                                       + *(_DWORD *)(v119 + 800)
                                       + v146
                                       + (((v144 - v145) >> 1) & 0x3FFFFFFE))) & 0xFFFFFFFC)) & 0xFFFFFFFC)
                                  + 8
                                  * (((*(void *)(v119 + 696) - *(void *)(v119 + 688)) >> 2)
                                   + ((*(void *)(v119 + 648) - *(void *)(v119 + 640)) >> 2));
          AGX::ProgramVariantESLState<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ArgumentTable,true,7ul>::updateWithRuntimeState(v119 + 1936);
          return v106;
        }
        int v135 = __clz(__rbit64(v175));
        int v137 = v135 | 0x40;
        uint64_t v136 = &v175;
      }
      *(void *)uint64_t v136 = v133 & ~(1 << v135);
      unsigned int v138 = (8 * v137 + 7240) >> 2;
      unsigned int *v130 = v138;
      v130[1] = v138 | 1;
      v130 += 2;
      unint64_t v133 = v181;
    }
  }
  return v106;
}

void sub_242B87B2C(_Unwind_Exception *exception_object)
{
}

void sub_242B87B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (v42) {
    operator delete(v42);
  }
  if (__p) {
    operator delete(__p);
  }
  if (!a20) {
    _Unwind_Resume(exception_object);
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t AGX::RenderPipeline<AGX::HAL200::ObjClasses,AGX::HAL200::Classes,AGX::HAL200::Encoders>::appendProgramAddressTables(uint64_t result, void *a2)
{
  uint64_t v3 = (void *)result;
  if (*(void *)result)
  {
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", *(void *)(*(void *)result + 1200), *(void *)(*(void *)result + 1424), *(void *)(*(void *)result + 1112), @"fragment"));
    uint64_t v4 = v3[303];
    uint64_t v5 = v3[304];
    while (v4 != v5)
    {
      uint64_t v6 = *(void *)(*(void *)v4 + 680);
      uint64_t v7 = *(void *)(*(void *)v4 + 696);
      id v8 = objc_alloc(MEMORY[0x263F12B00]);
      unint64_t v9 = *(void **)v4;
      v4 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v8, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v6, v7, *v9, @"fragment-dylib-resource"));
    }
    uint64_t result = AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, *(void **)(v3[366] + 32), *(void **)(v3[366] + 40));
  }
  uint64_t v10 = (void *)v3[1];
  if (v10)
  {
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v10[150], v10[178], v10[139], @"vertex"));
    uint64_t v11 = v3[300];
    uint64_t v12 = v3[301];
    while (v11 != v12)
    {
      uint64_t v13 = *(void *)(*(void *)v11 + 680);
      uint64_t v14 = *(void *)(*(void *)v11 + 696);
      id v15 = objc_alloc(MEMORY[0x263F12B00]);
      uint64_t v16 = *(void **)v11;
      v11 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v15, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v13, v14, *v16, @"vertex-dylib-resource"));
    }
    uint64_t result = AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, *(void **)(v3[364] + 32), *(void **)(v3[364] + 40));
  }
  uint64_t v17 = (void *)v3[2];
  if (v17)
  {
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v17[150], v17[178], v17[139], @"tile"));
    uint64_t v18 = v3[306];
    uint64_t v19 = v3[307];
    while (v18 != v19)
    {
      uint64_t v20 = *(void *)(*(void *)v18 + 680);
      uint64_t v21 = *(void *)(*(void *)v18 + 696);
      id v22 = objc_alloc(MEMORY[0x263F12B00]);
      uint64_t v23 = *(void **)v18;
      v18 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v22, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v20, v21, *v23, @"tile-dylib-resource"));
    }
    uint64_t result = AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, *(void **)(v3[368] + 32), *(void **)(v3[368] + 40));
  }
  uint64_t v24 = (void *)v3[3];
  if (v24)
  {
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v24[150], v24[178], v24[139], @"object"));
    uint64_t v25 = v3[309];
    uint64_t v26 = v3[310];
    while (v25 != v26)
    {
      uint64_t v27 = *(void *)(*(void *)v25 + 680);
      uint64_t v28 = *(void *)(*(void *)v25 + 696);
      id v29 = objc_alloc(MEMORY[0x263F12B00]);
      uint64_t v30 = *(void **)v25;
      v25 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v29, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v27, v28, *v30, @"object-dylib-resource"));
    }
    uint64_t result = AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, *(void **)(v3[370] + 32), *(void **)(v3[370] + 40));
  }
  uint64_t v31 = (void *)v3[4];
  if (v31)
  {
    objc_msgSend(a2, "addObject:", objc_msgSend(objc_alloc(MEMORY[0x263F12B00]), "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v31[150], v31[178], v31[139], @"mesh"));
    uint64_t v32 = v3[312];
    uint64_t v33 = v3[313];
    while (v32 != v33)
    {
      uint64_t v34 = *(void *)(*(void *)v32 + 680);
      uint64_t v35 = *(void *)(*(void *)v32 + 696);
      id v36 = objc_alloc(MEMORY[0x263F12B00]);
      uint64_t v37 = *(void **)v32;
      v32 += 16;
      objc_msgSend(a2, "addObject:", objc_msgSend(v36, "initWithMappedAddress:mappedSize:binaryUniqueId:type:", v34, v35, *v37, @"mesh-dylib-resource"));
    }
    uint64_t v38 = v3[372];
    uint64_t v39 = *(void **)(v38 + 32);
    uint64_t v40 = *(void **)(v38 + 40);
    return AGX::appendIntersectionFunctionsToProgramAddressTable<AGX::HAL200::Classes>((uint64_t)a2, v39, v40);
  }
  return result;
}

__int16 AGX::RenderTileDispatchEncoder<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitScissor@<H0>(uint64_t a1@<X0>)
{
  *(int8x8_t *)&long long v1 = vand_s8((int8x8_t)vadd_s32(vadd_s32(*(int32x2_t *)(*(void *)(a1 + 96) + 2576), (int32x2_t)-1), *(int32x2_t *)(*(void *)(a1 + 96) + 3940)), vand_s8((int8x8_t)vneg_s32(*(int32x2_t *)(*(void *)(a1 + 96) + 3940)), (int8x8_t)0xFFFF0000FFFFLL));
  *((void *)&v1 + 1) = 0x3F80000000000000;
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(_OWORD **)(v2 + 304);
  *(void *)(v2 + 304) = v3 + 1;
  *uint64_t v3 = v1;
  LODWORD(v4) = 256;
  HIDWORD(v4) = (unsigned __int16)((v3 - *(_DWORD *)(*(void *)(v2 + 24) + 536)) >> 4);
  uint64_t v5 = *(void **)(a1 + 112);
  uint64_t v6 = (void *)v5[42];
  uint64_t v7 = (char *)v6 + v5[44];
  v5[42] = v6 + 1;
  *uint64_t v6 = v4;
  unint64_t v8 = __ROR8__(v7, 32) & 0xFFFFFFFC000000FFLL | 0x200;
  unint64_t v9 = (unint64_t *)v5[6];
  *unint64_t v9 = v8;
  void v5[6] = v9 + 1;
  return v4;
}

double AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreads(uint64_t a1, unint64_t *a2, unsigned char *a3, _DWORD *a4, int8x16_t *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v14 = (_DWORD *)(a1 + 17488);
  *(void *)&double result = AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTilePipelineResources(a1, (int8x16_t *)*(void *)(a1 + 24536), a5).u64[0];
  unint64_t v16 = *a2;
  *uint64_t v14 = *a2;
  unint64_t v17 = a2[1];
  v14[1] = v17;
  uint64_t v18 = *(void *)(a1 + 24536);
  if (!v18 || (v17 * v16) <= *(_DWORD *)(v18 + 3296))
  {
    uint64_t v44 = (__n128 *)a5;
    uint64_t v19 = *(void *)(a1 + 24528);
    unint64_t v20 = a2[2];
    uint64_t v21 = *(void *)(v19 + 96);
    uint64_t v22 = *(unsigned int *)(v21 + 3940);
    uint64_t v23 = *(unsigned int *)(v21 + 3944);
    BOOL v25 = v16 == v22 && v17 == v23;
    *(float *)(v19 + 8) = (float)v22;
    *(float *)(v19 + 12) = (float)v23;
    if ((a8 & 0xFF00000000) != 0) {
      int v26 = a8;
    }
    else {
      int v26 = 0;
    }
    *(_DWORD *)(v19 + 64) = v26;
    unint64_t v45 = v20;
    unsigned int v27 = 0;
    if (a7)
    {
      uint64_t v28 = -v22;
      uint64_t v29 = -v23;
      uint64_t v30 = (float *)(v19 + 32);
      uint64_t v31 = (_DWORD *)(a6 + 32);
      unint64_t v32 = a7;
      do
      {
        int v34 = *(v31 - 8);
        unsigned int v35 = (v34 & v28) / v22;
        int v36 = *(v31 - 6);
        unsigned int v37 = (v36 & v29) / v23;
        unsigned int v38 = ((v22 - 1 + v34 + *(v31 - 2)) & v28) / v22 - v35;
        unsigned int v39 = ((v23 - 1 + v36 + *v31) & v29) / v23 - v37;
        float v40 = (float)v16 + -0.0039062;
        double v41 = (float)v17 + -0.00390625;
        if (v25)
        {
          float v40 = (double)(v38 * v22) + -0.00390625;
          float v42 = (double)(v39 * v23) + -0.00390625;
          double v41 = v42;
        }
        v31 += 12;
        *(v30 - 4) = v40;
        float v33 = v41;
        *(v30 - 2) = v33;
        *(_DWORD *)uint64_t v30 = v38;
        *((_DWORD *)v30 + 2) = v39;
        *((_DWORD *)v30 + 4) = v35;
        *((_DWORD *)v30 + 6) = v37;
        if (v27 <= v39 * v38) {
          unsigned int v27 = v39 * v38;
        }
        ++v30;
        --v32;
      }
      while (v32);
    }
    int v50 = 25;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::string __p = 0;
    uint64_t v49 = &unk_26F853B88;
    int v54 = ((a7 > 1) | (4 * ((a8 & 0xFF00000000) != 0)));
    TileDispatchVertexPrograuint64_t m = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateTileDispatchVertexProgram(*(void *)(v19 + 80), (uint64_t)&v49);
    v48[0] = v16;
    v48[1] = v17;
    v48[2] = v45;
    AGX::RenderTileDispatchEncoderGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDispatch<AGX::HAL200::TileProgramVariant,AGX::TileDriverArgumentTable<AGX::HAL200::Classes>>((void *)v19, v18, (uint64x2_t *)(a1 + 72), a1 + 10264, v48, a3, a4, TileDispatchVertexProgram, v25, v27, a8);
    uint64_t v49 = &unk_26F853BC8;
    if (__p)
    {
      uint64_t v52 = __p;
      operator delete(__p);
    }
    *(void *)&double result = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(*(void *)(a1 + 24528) + 120, v44 + 19, 1).n128_u64[0];
  }
  return result;
}

void sub_242B882B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTilePipelineResources(uint64_t a1, int8x16_t *a2, int8x16_t *a3)
{
  long long v86 = (unsigned char *)(a1 + 24596);
  uint64_t v5 = (_DWORD *)(a1 + 19052);
  unsigned int v6 = *(_DWORD *)(a1 + 24520);
  do
  {
    v6 &= ~(1 << __clz(__rbit32(v6)));
    IOGPUResourceListAddResource();
  }
  while (v6);
  uint64_t v7 = *(void *)(*(void *)(a1 + 24568) + 808) + 6072;
  v93.i64[0] = a1 + 984;
  v93.i64[1] = a1 + 19976;
  uint64_t v94 = a1 + 992;
  uint64_t v95 = a1 + 19984;
  uint64_t v96 = a1 + 1016;
  uint64_t v97 = a1 + 20008;
  AGX::Mempool<16u,0u,true,AGX::HAL200::TextureHeapElem,AGX::HAL200::TextureHeapElem,unsigned int>::addToResourceList(v7, (uint64_t)&v93);
  uint64_t v8 = *(void *)(*(void *)(a1 + 24568) + 808);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 6192));
  uint64_t v9 = (int)*MEMORY[0x263F4B188];
  uint64_t v10 = *(void *)(v8 + 6160) + v9;
  uint64_t v11 = *(void *)(v10 + 8);
  if (*(void *)(a1 + 1024) != v11
    || ((*(void *)(v10 + 40) ^ *(void *)(*(void *)(a1 + 20016) + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)(a1 + 1024) = v11;
    *(void *)(a1 + 20016) = *(void *)(v8 + 6160) + v9;
    MTLResourceListAddResource();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 6192));
  a3[106].i64[0] = *(void *)(a1 + 1024);
  uint64_t v12 = *(void *)(a1 + 24568);
  int v13 = *(_DWORD *)(*(void *)(v12 + 808) + 6196);
  if (v13) {
    __int32 v14 = v13 + 1;
  }
  else {
    __int32 v14 = 0;
  }
  a3[106].i32[2] = v14;
  unint64_t v15 = a2[121].u64[1];
  unint64_t v91 = a2[122].u64[0];
  unint64_t v92 = v15;
  uint64_t v16 = *(void *)(a1 + 24544);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 56);
    *(void *)(a1 + 20072) = *(void *)(v16 + 48);
  }
  else
  {
    uint64_t v17 = 0;
    *(void *)(a1 + 1600) = 0;
    *uint64_t v5 = 0;
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 23944) = 0;
    *(void *)(a1 + 24464) = 0;
    v5[65] = 0;
    v15 &= ~0x800000000000000uLL;
    unint64_t v92 = v15;
  }
  *(void *)(a1 + 1080) = v17;
  uint64_t v18 = *(void *)(a1 + 24552);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 56);
    *(void *)(a1 + 20080) = *(void *)(v18 + 48);
  }
  else
  {
    uint64_t v19 = 0;
    *(void *)(a1 + 1608) = 0;
    v5[1] = 0;
    *(void *)(a1 + 552) = 0;
    *(void *)(a1 + 23952) = 0;
    *(void *)(a1 + 24472) = 0;
    v5[66] = 0;
  }
  *(void *)(a1 + 1088) = v19;
  unint64_t v20 = (void *)(*(void *)(*(void *)(a1 + 24528) + 88) + 91128);
  uint64_t v21 = *(void *)(v12 + 808);
  os_unfair_lock_lock((os_unfair_lock_t)(v21 + 6448));
  uint64_t v22 = (int)*MEMORY[0x263F4B188];
  uint64_t v23 = *(void *)(v21 + 6416) + v22;
  uint64_t v24 = *(void *)(v23 + 8);
  if (v20[1] == v24 && ((*(void *)(v23 + 40) ^ *(void *)(v20[2] + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 6448));
  }
  else
  {
    v20[1] = v24;
    v20[2] = *(void *)(v21 + 6416) + v22;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v21 + 6448));
    IOGPUResourceListAddResource();
  }
  *(void *)*unint64_t v20 = v20[1];
  uint64_t v25 = *(void *)(*(void *)(a1 + 24568) + 808);
  int v26 = (void *)(*(void *)(*(void *)(a1 + 24528) + 88) + 91152);
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 6384));
  uint64_t v27 = (int)*MEMORY[0x263F4B188];
  uint64_t v28 = *(void *)(v25 + 6352) + v27;
  uint64_t v29 = *(void *)(v28 + 8);
  if (*v26 == v29 && ((*(void *)(v28 + 40) ^ *(void *)(v26[1] + 40)) & 0xFFFFFFFFFFFFFFLL) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 6384));
  }
  else
  {
    *int v26 = v29;
    v26[1] = *(void *)(v25 + 6352) + v27;
    MTLResourceListAddResource();
    os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 6384));
    IOGPUResourceListAddResource();
  }
  *(void *)(*v20 + 8) = v20[3];
  uint64_t v30 = *(void *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(v30 + 40));
  uint64_t v31 = (int)*MEMORY[0x263F4B188];
  uint64_t v32 = *(void *)(v30 + 8) + v31;
  uint64_t v33 = *(void *)(v32 + 8);
  if (*(void *)(a1 + 1048) != v33
    || ((*(void *)(v32 + 40) ^ *(void *)(*(void *)(a1 + 20040) + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)(a1 + 1048) = v33;
    *(void *)(a1 + 20040) = *(void *)(v30 + 8) + v31;
    MTLResourceListAddResource();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 40));
  IOGPUResourceListAddResource();
  uint64_t v34 = *(void *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)(v34 + 40));
  uint64_t v35 = (int)*MEMORY[0x263F4B188];
  uint64_t v36 = *(void *)(v34 + 8) + v35;
  uint64_t v37 = *(void *)(v36 + 8);
  if (*(void *)(a1 + 1064) != v37
    || ((*(void *)(v36 + 40) ^ *(void *)(*(void *)(a1 + 20056) + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)(a1 + 1064) = v37;
    *(void *)(a1 + 20056) = *(void *)(v34 + 8) + v35;
    MTLResourceListAddResource();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 40));
  IOGPUResourceListAddResource();
  uint64_t v38 = *(void *)(*(void *)(a1 + 24568) + 808);
  os_unfair_lock_lock((os_unfair_lock_t)(v38 + 6256));
  uint64_t v39 = (int)*MEMORY[0x263F4B188];
  uint64_t v40 = *(void *)(v38 + 6224) + v39;
  uint64_t v41 = *(void *)(v40 + 8);
  if (*(void *)(a1 + 1040) != v41
    || ((*(void *)(v40 + 40) ^ *(void *)(*(void *)(a1 + 20032) + 40)) & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    *(void *)(a1 + 1040) = v41;
    *(void *)(a1 + 20032) = *(void *)(v38 + 6224) + v39;
    MTLResourceListAddResource();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v38 + 6256));
  IOGPUResourceListAddResource();
  uint64_t v45 = *(void *)(a1 + 24560);
  if (*(unsigned char *)(v45 + 709))
  {
    v42.i64[0] = 0;
    v43.i64[0] = *(void *)(v45 + 1536);
    int8x16_t v46 = (int8x16_t)vceqq_s64(v43, v42);
    v44.i64[0] = *(void *)(v45 + 1552);
    int8x16_t v47 = (int8x16_t)vceqq_s64(v44, v42);
    int8x16_t v48 = (int8x16_t)vdupq_lane_s64(vbicq_s8(v47, v46).i64[0], 0);
    uint64_t v49 = 0x1800000000000000;
    if (!*(void *)(v45 + 1536)) {
      uint64_t v49 = 0x1000000000000000;
    }
    int8x16_t v50 = vorrq_s8(vandq_s8(v48, (int8x16_t)xmmword_242EA87E0), vbicq_s8((int8x16_t)(unint64_t)v49, (int8x16_t)vdupq_lane_s64(v47.i64[0], 0)));
    if (*(void *)(v45 + 3168)) {
      v50.i64[1] = 1;
    }
  }
  else
  {
    int8x16_t v50 = 0uLL;
  }
  int8x16_t result = vbicq_s8(a2[66], v50);
  int8x16_t v93 = result;
  while (1)
  {
    if (v15)
    {
      unsigned int v52 = __clz(__rbit64(v15));
      uint64_t v53 = &v92;
      unsigned int v54 = v52;
      goto LABEL_42;
    }
    unint64_t v15 = v91;
    if (!v91) {
      break;
    }
    unsigned int v52 = __clz(__rbit64(v91));
    unsigned int v54 = v52 | 0x40;
    uint64_t v53 = &v91;
LABEL_42:
    *uint64_t v53 = v15 & ~(1 << v52);
    unint64_t v55 = *(uint64_t **)(a1 + 8 * v54 + 19600);
    if (v55)
    {
      uint64_t v56 = v54;
      if ((*(void *)((unint64_t)&v93 | (8 * (v56 > 0x3F))) >> v56)) {
        int v57 = 12;
      }
      else {
        int v57 = 4;
      }
      if ((0x277B3u >> (v54 - 47))) {
        int v58 = 128;
      }
      else {
        int v58 = v57;
      }
      if (v54 - 47 >= 0x12) {
        int v59 = v57;
      }
      else {
        int v59 = v58;
      }
      AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 24), v55, 2u, v54, v59);
      IOGPUResourceListAddResource();
      if (v56 <= 0x22)
      {
        uint64_t v60 = *(void *)(a1 + 8 * v56 + 23192);
        if (v60)
        {
          AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(*(void **)(a1 + 24), v60, v59);
          IOGPUResourceListAddResource();
        }
      }
    }
    unint64_t v15 = v92;
  }
  unint64_t v61 = a2[122].i64[1] & *(void *)(a1 + 17448);
  unint64_t v89 = a2[123].i64[0] & *(void *)(a1 + 17456);
  unint64_t v90 = v61;
  uint64_t v62 = a2[67].i64[1];
  uint64_t v88 = a2[67].i64[0];
  v93.i64[0] = v88;
  v93.i64[1] = v62;
  uint64_t v84 = *(void *)(a1 + 17472);
  uint64_t v85 = *(void *)(a1 + 17464);
  uint64_t v63 = a1 + 20120;
  while (1)
  {
    if (v61)
    {
      unsigned int v64 = __clz(__rbit64(v61));
      long long v65 = &v90;
      unsigned int v66 = v64;
      goto LABEL_61;
    }
    unint64_t v61 = v89;
    if (!v89) {
      break;
    }
    unsigned int v64 = __clz(__rbit64(v89));
    unsigned int v66 = v64 | 0x40;
    long long v65 = &v89;
LABEL_61:
    *long long v65 = v61 & ~(1 << v64);
    if (((unint64_t)v93.i64[v66 > 0x3F] >> v66)) {
      int v67 = 12;
    }
    else {
      int v67 = 4;
    }
    int v68 = 3 * v66;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(*(void *)(a1 + 24), *(uint64_t **)(v63 + 24 * v66), 5u, v66, v67);
    IOGPUResourceListAddResource();
    if (*(void *)(v63 + 8 * (v68 + 1))) {
      IOGPUResourceListAddResource();
    }
    if (*(void *)(a1 + 8 * (v68 + 2) + 20120)) {
      IOGPUResourceListAddResource();
    }
    unint64_t v61 = v90;
  }
  a3[81].i8[4] |= (v85 & v88 | v62 & v84) != 0;
  if (*v86)
  {
    uint64_t v69 = *(void *)(a1 + 24576);
    int v70 = *(_DWORD *)(v69 + 4);
    int v72 = *(_DWORD *)(v69 + 40);
    __int32 v71 = *(_DWORD *)(v69 + 44);
    if (v72 < 1)
    {
      unsigned __int32 v79 = 0;
      __int32 v78 = 0;
      unsigned __int32 v83 = *(_DWORD *)(v69 + 24);
    }
    else
    {
      uint64_t v73 = *(void *)(v69 + 56);
      int v74 = *(_DWORD *)(v73 + 5912);
      uint64_t v75 = 5936;
      if (*(_OWORD *)(v73 + 5936) == 0) {
        uint64_t v75 = 5952;
      }
      int32x2_t v76 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v73 + v75))))));
      int v77 = *(_DWORD *)(v69 + 36);
      __int32 v78 = *(_DWORD *)(v69 + 32) + v77;
      unsigned __int32 v79 = (v71 + v72 + v78) * vadd_s32(vdup_lane_s32(v76, 1), v76).u32[0];
      BOOL v80 = __OFSUB__(v77, *(_DWORD *)v69);
      int v81 = v77 - *(_DWORD *)v69;
      int v82 = v81 * v74;
      if ((v81 < 0) ^ v80 | (v81 == 0)) {
        int v82 = 0;
      }
      v70 += v79 + v82;
      unsigned __int32 v83 = *(_DWORD *)(v69 + 28) + *(_DWORD *)(v69 + 24) + v79;
    }
    a3[75].i16[4] = 0;
    a3[74].i32[2] = v72;
    a3[74].i32[3] = v71;
    a3[75].i32[0] = v78;
    a3[75].i32[1] = v79;
    a3[72].i64[0] = (uint64_t)(int)((v70 + 7) & 0xFFFFFFF8) << 12;
    a3[72].i64[1] = (uint64_t)(int)((v83 + 7) & 0xFFFFFFF8) << 12;
    int8x16_t result = *(int8x16_t *)(v69 + 8);
    a3[73] = result;
    *long long v86 = 0;
  }
  return result;
}

void sub_242B88BEC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AGX::RenderTileDispatchEncoderGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDispatch<AGX::HAL200::TileProgramVariant,AGX::TileDriverArgumentTable<AGX::HAL200::Classes>>(void *a1, uint64_t a2, uint64x2_t *a3, uint64_t a4, _DWORD *a5, unsigned char *a6, _DWORD *a7, uint64_t a8, char a9, int a10, uint64_t a11)
{
  unsigned int v16 = *(_DWORD *)(a8 + 1680);
  do
  {
    v16 &= ~(1 << __clz(__rbit32(v16)));
    IOGPUResourceListAddResource();
  }
  while (v16);
  if (a2)
  {
    if ((a5[2] * *a5) > *(_DWORD *)(a2 + 3296)) {
      return;
    }
    uint64_t v17 = (uint64_t)a1;
    uint64_t v18 = a2;
  }
  else
  {
    uint64_t v17 = (uint64_t)a1;
    uint64_t v18 = 0;
  }
  AGX::RenderTileDispatchEncoder<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitTileState<AGX::HAL200::TileProgramVariant,AGX::TileDriverArgumentTable<AGX::HAL200::Classes>>(v17, v18, a3, a4, a8);
  if (*(void *)(a1[30] + 520)) {
    BOOL v19 = *a6 == 0;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19)
  {
    unsigned int v20 = 3 * a10;
    if (a9) {
      unsigned int v20 = 3;
    }
    if ((a11 & 0xFF00000000) != 0) {
      unsigned int v21 = 1;
    }
    else {
      unsigned int v21 = *(_DWORD *)(a1[12] + 3912);
    }
    uint64_t v22 = a1[14];
    LODWORD(v23) = 1640238336;
    DWORD1(v23) = v20;
    *((void *)&v23 + 1) = v21;
    uint64_t v24 = *(_OWORD **)(v22 + 48);
    *uint64_t v24 = v23;
    *(void *)(v22 + 48) = v24 + 1;
    if (a7) {
      ++*a7;
    }
    *(_DWORD *)(a1[11] + 1540) += v21 * (v20 / 3);
  }
  else
  {
    *a6 = 1;
  }
}

double AGX::RenderTileDispatchEncoder<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitTileState<AGX::HAL200::TileProgramVariant,AGX::TileDriverArgumentTable<AGX::HAL200::Classes>>(uint64_t a1, uint64_t a2, uint64x2_t *a3, uint64_t a4, uint64_t a5)
{
  if (a2 && (*(unsigned char *)(a2 + 1951) & 0x40) != 0)
  {
    uint64_t v10 = *(void **)(a1 + 112);
    unint64_t v11 = v10[50] + 19;
    if (v11 > v10[49])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 112), 11, 0)) {
        goto LABEL_5;
      }
      unint64_t v11 = v10[50] + 19;
      if (v11 > v10[49]) {
        goto LABEL_152;
      }
    }
    v10[51] = v11;
LABEL_5:
    uint64_t v12 = *(void *)(a1 + 112);
    int v13 = (_OWORD *)((*(void *)(v12 + 400) + 3) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v14 = (unint64_t)v13 + *(void *)(v12 + 416);
    *(void *)(v12 + 400) = v13 + 1;
    *int v13 = *(_OWORD *)(a4 + 7216);
    uint64_t v15 = *(void *)(a1 + 88);
    uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 112) + 24) + 736) + (int)*MEMORY[0x263F4B188];
    *(void *)(v15 + 3352) = v14;
    *(void *)(v15 + 3872) = 16;
    *(void *)(v15 + 22344) = v16;
    *(_DWORD *)(v15 + 21312) = 16;
    *(_DWORD *)(v15 + 21572) = 16;
    *(_DWORD *)(v15 + 21832) = v14 >> 8;
  }
  uint64_t v17 = *(void **)(a1 + 112);
  uint64_t v18 = (unint64_t *)v17[6];
  if ((unint64_t)(v18 + 23) > v17[5])
  {
    if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 112), 0, 0))
    {
      uint64_t v169 = v17[6];
      if ((unint64_t)(v169 + 184) > v17[5]) {
        goto LABEL_152;
      }
      v17[7] = v169 + 184;
      *uint64_t v18 = __ROR8__(v17[8] + v169, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    v17[7] = v18 + 23;
  }
  BOOL v19 = *(void **)(a1 + 112);
  uint64_t v20 = *(unsigned int *)(a5 + 16) + 31;
  unint64_t v21 = v19[18] + v20;
  if (v21 <= v19[17])
  {
LABEL_9:
    v19[19] = v21;
    goto LABEL_10;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 112), 3, 0))
  {
    unint64_t v21 = v19[18] + v20;
    if (v21 > v19[17]) {
      goto LABEL_152;
    }
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v22 = v19[126] + 667;
  if (v22 <= v19[125])
  {
LABEL_11:
    v19[127] = v22;
    goto LABEL_12;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v19, 30, 0))
  {
    unint64_t v22 = v19[126] + 667;
    if (v22 > v19[125]) {
      goto LABEL_152;
    }
    goto LABEL_11;
  }
LABEL_12:
  uint64_t v23 = (*(_DWORD *)(*(void *)(a5 + 1344) + 8) - **(_DWORD **)(a5 + 1344)) + 63;
  unint64_t v24 = v19[26] + v23;
  if (v24 <= v19[25])
  {
LABEL_13:
    v19[27] = v24;
    goto LABEL_14;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v19, 5, 0))
  {
    unint64_t v24 = v19[26] + v23;
    if (v24 > v19[25]) {
      goto LABEL_152;
    }
    goto LABEL_13;
  }
LABEL_14:
  if (!a2) {
    goto LABEL_19;
  }
  uint64_t v25 = (*(_DWORD *)(*(void *)(a2 + 1936) + 8) - **(_DWORD **)(a2 + 1936)) + 63;
  unint64_t v26 = v19[30] + v25;
  if (v26 <= v19[29]) {
    goto LABEL_16;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v19, 6, 0))
  {
    unint64_t v26 = v19[30] + v25;
    if (v26 > v19[29]) {
      goto LABEL_152;
    }
LABEL_16:
    v19[31] = v26;
  }
  uint64_t v27 = *(unsigned int *)(a2 + 608) + 31;
  unint64_t v28 = v19[50] + v27;
  if (v28 <= v19[49])
  {
LABEL_18:
    v19[51] = v28;
    goto LABEL_19;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(v19, 11, 0))
  {
    unint64_t v28 = v19[50] + v27;
    if (v28 > v19[49]) {
      goto LABEL_152;
    }
    goto LABEL_18;
  }
LABEL_19:
  uint64_t v29 = *(void **)(a1 + 112);
  unint64_t v30 = v29[38] + 16;
  if (v30 <= v29[37])
  {
LABEL_20:
    v29[39] = v30;
    goto LABEL_21;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 112), 8, 0))
  {
    unint64_t v30 = v29[38] + 16;
    if (v30 > v29[37]) {
      goto LABEL_152;
    }
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v31 = *(void **)(a1 + 112);
  unint64_t v32 = v31[42] + 8;
  if (v32 <= v31[41])
  {
LABEL_22:
    v31[43] = v32;
    goto LABEL_23;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(a1 + 112), 9, 0))
  {
    unint64_t v32 = v31[42] + 8;
    if (v32 <= v31[41]) {
      goto LABEL_22;
    }
LABEL_152:
    abort();
  }
LABEL_23:
  *(_DWORD *)(a1 + 168) = 1;
  int v33 = *(_DWORD *)(a5 + 2628);
  if (v33 > *(_DWORD *)(a1 + 124))
  {
    *(_DWORD *)(a1 + 124) = v33;
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a5 + 2624);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a5 + 2632);
  }
  int v34 = *(_DWORD *)(a5 + 2648);
  if (*(_DWORD *)(a1 + 144) > v34) {
    int v34 = *(_DWORD *)(a1 + 144);
  }
  *(_DWORD *)(a1 + 144) = v34;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(*(void **)(a1 + 104), *(void **)(a1 + 112), a5, (unint64_t *)a1, a1 + 8);
  if (a2)
  {
    uint64_t v36 = *(void **)(a1 + 104);
    uint64_t v35 = *(void **)(a1 + 112);
    uint64_t k = *(void *)((char *)v36 + 182);
    uint64_t v38 = *(unsigned int *)(a2 + 608);
    if (v38)
    {
      unint64_t v39 = (v35[50] + 31) & 0xFFFFFFFFFFFFFFE0;
      unint64_t v40 = v39 + v35[52];
      long long v179 = (void *)v39;
      v35[50] = v39 + v38;
    }
    else
    {
      unint64_t v40 = 0;
      long long v179 = 0;
    }
    uint64_t v41 = (char *)((v35[30] + 63) & 0xFFFFFFFFFFFFFFC0);
    uint64_t v42 = v35[32];
    long long v178 = v35;
    v35[30] = &v41[*(_DWORD *)(*(void *)(a2 + 1936) + 8) - **(_DWORD **)(a2 + 1936)];
    unint64_t v43 = *(void *)(a2 + 840) - *(void *)(a2 + 832);
    int v44 = *(_DWORD *)(a2 + 792);
    if (v43) {
      int v45 = *(_DWORD *)(a2 + 792) & 1;
    }
    else {
      int v45 = 0;
    }
    if (!v38)
    {
LABEL_108:
      uint64_t v120 = *(void *)(a2 + 1936);
      memcpy(v41, *(const void **)v120, *(void *)(v120 + 8) - *(void *)v120);
      if (*(unsigned char *)(v120 + 200))
      {
        v121.i64[0] = v40;
        v121.i64[1] = v40 >> 5;
        *(int8x16_t *)&v41[*(unsigned int *)(v120 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v41[*(unsigned int *)(v120 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v121, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      unsigned int v122 = *(unsigned int **)(v120 + 176);
      for (uint64_t i = *(unsigned int **)(v120 + 184); v122 != i; v122 += 3)
      {
        v124.i64[0] = a3->i64[v122[1]] + *v122;
        v124.i64[1] = (unint64_t)v124.i64[0] >> 5;
        *(int8x16_t *)&v41[v122[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v41[v122[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v124, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
      }
      if (!*(_DWORD *)(v120 + 240)) {
        *(void *)&v41[*(unsigned __int16 *)(v120 + 244)] = k;
      }
      unint64_t v125 = (unint64_t)&v41[v42];
      uint8x8_t v126 = (char **)*v36;
      if (v126)
      {
        uint64_t v127 = *(void *)(v120 + 8) - *(void *)v120;
        int v128 = *(_DWORD *)(a2 + 2344);
        LODWORD(v129) = *((_DWORD *)v126 + 2);
        int v130 = v129 + 1;
        if (*((_DWORD *)v126 + 3) >= (v129 + 1))
        {
          uint64_t v134 = *v126;
        }
        else
        {
          uint64_t v177 = a5;
          unsigned int v131 = -__clz(v129);
          int v132 = 1 << v131;
          unint64_t v133 = (char *)malloc_type_malloc(40 << (v131 & 0x1F), 0x10800400D7C94D2uLL);
          uint64_t v134 = v133;
          uint64_t v129 = *((unsigned int *)v126 + 2);
          if (v129)
          {
            memcpy(v133, *v126, 40 * v129);
            free(*v126);
            LODWORD(v129) = *((_DWORD *)v126 + 2);
          }
          *((_DWORD *)v126 + 3) = v132;
          int8x8_t *v126 = v134;
          a5 = v177;
        }
        int v135 = &v134[40 * v129];
        *(_DWORD *)int v135 = 3;
        *((void *)v135 + 1) = v125;
        *((void *)v135 + 2) = v41;
        *((void *)v135 + 3) = v127;
        *((_DWORD *)v135 + 8) = v128;
        *((_DWORD *)v126 + 2) = v130;
      }
      int v136 = *(_DWORD *)(a2 + 3216);
      int v137 = *(_DWORD *)(a2 + 3228);
      int v138 = *(_DWORD *)(a2 + 3240);
      int v139 = (v125 >> 16) & 0xFFC00000 | *(_DWORD *)(a2 + 3232) & 0x3FFFFF;
      uint64_t v140 = *(void *)(a2 + 3288);
      v141.i32[0] = *(_DWORD *)(v140 + 36);
      v141.i32[1] = *(_DWORD *)(v140 + 32);
      int8x8_t v142 = vbsl_s8((int8x8_t)0x3FFFF0000, *(int8x8_t *)(a2 + 3220), v141);
      uint64_t v143 = v178[126];
      uint64_t v144 = v178[128] + v143;
      v178[126] = v143 + 28;
      *(_DWORD *)uint64_t v143 = v136;
      *(int8x8_t *)(v143 + 4) = v142;
      *(_DWORD *)(v143 + 12) = v137;
      *(_DWORD *)(v143 + 16) = v139;
      *(_DWORD *)(v143 + 20) = v125 >> 6;
      *(_DWORD *)(v143 + 24) = v138;
      uint64_t v145 = (unint64_t *)v178[6];
      unint64_t *v145 = __ROR8__(v144, 32) & 0xFFFFFFFC000000FFLL | 0x700;
      v178[6] = v145 + 1;
      goto LABEL_122;
    }
    unint64_t v46 = *(unsigned int *)(a2 + 1016);
    int8x16_t v47 = *(int **)(a2 + 640);
    uint64_t v48 = (*(void *)(a2 + 648) - (void)v47) >> 2;
    int v49 = *(_DWORD *)(a2 + 1004);
    uint64_t v50 = (*(void *)(a2 + 696) - *(void *)(a2 + 688)) >> 2;
    uint64_t v51 = *(void *)(a2 + 672);
    uint64_t v52 = *(void *)(a2 + 664);
    int v53 = *(_DWORD *)(a2 + 804) + *(_DWORD *)(a2 + 800);
    uint64_t v54 = *(void *)(a2 + 744);
    uint64_t v55 = *(void *)(a2 + 736);
    int v56 = *(unsigned __int8 *)(a2 + 1048);
    int v57 = *(unsigned __int8 *)(a2 + 1049);
    if (*(unsigned char *)(a2 + 1048))
    {
      if (!a3)
      {
        BOOL v58 = 0;
        goto LABEL_42;
      }
      a3[58] = vaddw_u32((uint64x2_t)vdupq_n_s64(v40), *(uint32x2_t *)(a2 + 612));
    }
    BOOL v58 = a3 != 0;
    if (a3 && v57)
    {
      a3[60].i64[0] = v40 + *(unsigned int *)(a2 + 632);
      BOOL v58 = 1;
    }
LABEL_42:
    uint64_t v59 = 8 * (v50 + v48);
    int v60 = v45 + v44;
    if (v53) {
      a3[64].i64[0] = v59 + v40 + 4 * (v60 + ((v43 >> 1) & 0xFFFFFFFE));
    }
    unint64_t v61 = v51 - v52;
    uint64_t v174 = k;
    if (v48 == v46)
    {
      unsigned int v62 = 0;
      uint64_t v63 = a3;
      unint64_t v64 = v61 >> 2;
      if (!v46)
      {
LABEL_78:
        unint64_t v92 = v43 >> 2;
        if (v50)
        {
          v63[98].i64[1] = v40 + v62;
          int8x16_t v93 = (void *)((char *)v179 + v62);
          uint64_t v94 = *(unsigned __int16 **)(a2 + 688);
          if (*(unsigned char *)(a2 + 784))
          {
            uint64_t v95 = *(unsigned __int16 **)(a2 + 712);
            for (uint64_t j = (*(void *)(a2 + 720) - (void)v95) >> 1; j; LODWORD(j) = j - 1)
            {
              int v97 = *v95++;
              v93[v97] = *(void *)(a3->i64[v94[2 * v97]] + 8 * v94[2 * v97 + 1]);
            }
          }
          else
          {
            int v98 = v50;
            do
            {
              *v93++ = *(void *)(a3->i64[*v94] + 8 * v94[1]);
              v94 += 2;
              --v98;
            }
            while (v98);
          }
          v62 += 8 * v50;
        }
        unint64_t v99 = v54 - v55;
        uint64_t v173 = v42;
        if (v64)
        {
          long long v100 = (_DWORD *)((char *)v179 + v62);
          *(void *)(a4 + 7248) = v40 + v62 + 8;
          long long v101 = *(unsigned int **)(a2 + 664);
          int v102 = v64;
          do
          {
            unsigned int v103 = *v101++;
            *v100++ = *(_DWORD *)(a4 + 4 * v103);
            --v102;
          }
          while (v102);
          v62 += 4 * v64;
        }
        unint64_t v104 = v99 >> 2;
        if (v92)
        {
          int v105 = v59 + 4 * v60;
          uint64_t v106 = (void *)((char *)v179 + (v105 & 0xFFFFFFFC));
          int v107 = *(int **)(a2 + 832);
          do
          {
            int v108 = *v107++;
            *v106++ = a3->i64[v108];
            LODWORD(v92) = v92 - 1;
          }
          while (v92);
          unsigned int v62 = v105 + 8 * (v43 >> 2);
        }
        if (v53)
        {
          int v172 = v53;
          uint64_t v176 = a5;
          uint64_t v109 = *(unsigned int *)(a2 + 800);
          memcpy((char *)v179 + v62, (char *)a3 + 4 * *(unsigned int *)(a2 + 796), 4 * v109);
          int v110 = *(_DWORD *)(a2 + 804);
          if (v110)
          {
            uint64_t v111 = *(unsigned int **)(a2 + 808);
            uint64_t v112 = (_DWORD *)((char *)v179 + 4 * v109 + v62);
            do
            {
              unsigned int v113 = *v111++;
              *v112++ = *(_DWORD *)(a4 + 4 * v113);
              --v110;
            }
            while (v110);
          }
          v62 += 4 * v172;
          a5 = v176;
        }
        if (v104)
        {
          unint64_t v114 = v40 + v62;
          *(void *)(a4 + 7248) = v114 + 8;
          v63[99].i64[0] = v114;
          uint64_t v115 = (_DWORD *)((char *)v179 + v62);
          long long v116 = *(unsigned __int16 **)(a2 + 736);
          if (*(unsigned char *)(a2 + 784))
          {
            uint64_t v117 = *(unsigned __int16 **)(a2 + 760);
            uint64_t v118 = (*(void *)(a2 + 768) - (void)v117) >> 1;
            uint64_t v42 = v173;
            for (uint64_t k = v174; v118; LODWORD(v118) = v118 - 1)
            {
              int v119 = *v117++;
              v115[v119] = *(_DWORD *)(a3->i64[v116[2 * v119]] + 4 * v116[2 * v119 + 1]);
            }
            a3 = v63;
          }
          else
          {
            uint64_t k = v174;
            do
            {
              *v115++ = *(_DWORD *)(a3->i64[*v116] + 4 * v116[1]);
              v116 += 2;
              LODWORD(v104) = v104 - 1;
            }
            while (v104);
            a3 = v63;
            uint64_t v42 = v173;
          }
        }
        else
        {
          a3 = v63;
          uint64_t v42 = v173;
          uint64_t k = v174;
        }
        goto LABEL_108;
      }
    }
    else
    {
      int v175 = v60;
      int v65 = 8 * (v50 + v48);
      if (v58) {
        uint64_t v63 = a3;
      }
      else {
        uint64_t v63 = (uint64x2_t *)a4;
      }
      if (v49)
      {
        int v66 = v49;
        int v67 = v179;
        int v68 = v47;
        do
        {
          int v69 = *v68++;
          *v67++ = v63->i64[v69];
          --v66;
        }
        while (v66);
      }
      if (*(_DWORD *)(a2 + 872))
      {
        int v70 = *(void **)(a2 + 856);
        if (v70 != (void *)(a2 + 864))
        {
          do
          {
            *((_DWORD *)v179 + *((unsigned int *)v70 + 7)) |= *((_DWORD *)v70 + 8);
            __int32 v71 = (void *)v70[1];
            if (v71)
            {
              do
              {
                int v72 = v71;
                __int32 v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              do
              {
                int v72 = (void *)v70[2];
                BOOL v73 = *v72 == (void)v70;
                int v70 = v72;
              }
              while (!v73);
            }
            int v70 = v72;
          }
          while (v72 != (void *)(a2 + 864));
        }
      }
      unsigned int v74 = (v49 + 3) & 0xFFFFFFFC;
      if (v56)
      {
        unsigned int v75 = *(_DWORD *)(a2 + 1008);
        if (v75 >= 4)
        {
          int32x2_t v76 = &v47[v74];
          unsigned int v77 = v75 >> 2;
          __int32 v78 = &v179[v74];
          do
          {
            int v79 = *v76;
            v76 += 4;
            BOOL v80 = &v63->i8[8 * v79];
            long long v81 = *((_OWORD *)v80 + 1);
            *__int32 v78 = *(_OWORD *)v80;
            v78[1] = v81;
            v78 += 2;
            --v77;
          }
          while (v77);
        }
        v74 += v75;
      }
      int v82 = v48 - v46;
      LODWORD(v59) = v65;
      int v60 = v175;
      if (v57)
      {
        unsigned int v83 = *(_DWORD *)(a2 + 1012);
        uint64_t v84 = &v179[v74];
        if (*(unsigned char *)(a2 + 1736))
        {
          if (v83)
          {
            uint64_t v170 = (int *)(*(void *)(a2 + 640) + 4 * v74);
            do
            {
              int v171 = *v170++;
              *v84++ = v63->i64[v171];
              --v83;
            }
            while (v83);
          }
        }
        else if (v83 >= 4)
        {
          uint64_t v85 = (int *)(*(void *)(a2 + 640) + 4 * v74);
          unsigned int v86 = v83 >> 2;
          do
          {
            int v87 = *v85;
            v85 += 4;
            *uint64_t v84 = v63->i64[v87];
            v84 += 4;
            --v86;
          }
          while (v86);
        }
      }
      unsigned int v62 = 8 * v82;
      unint64_t v64 = v61 >> 2;
      if (!v46) {
        goto LABEL_78;
      }
    }
    if (v46 >= 4)
    {
      uint64_t v88 = *(uint64_t **)(a2 + 2440);
      unint64_t v89 = v46 >> 2;
      unint64_t v90 = (void *)((char *)v179 + v62);
      do
      {
        uint64_t v91 = *v88;
        v88 += 4;
        *unint64_t v90 = v91;
        v90 += 4;
        --v89;
      }
      while (v89);
    }
    v62 += 8 * v46;
    goto LABEL_78;
  }
LABEL_122:
  uint64_t v146 = *(void *)(a5 + 2656);
  uint64_t v147 = *(void **)(a1 + 112);
  uint64_t v148 = v147[126];
  uint64_t v149 = v147[128];
  v147[126] = v148 + 20;
  *(_DWORD *)uint64_t v148 = 201981952;
  *(_DWORD *)(v148 + 4) = v146 & 0xF1C00FF;
  *(void *)(v148 + 8) = 0;
  *(_DWORD *)(v148 + 16) = HIDWORD(v146);
  int v150 = (unint64_t *)v147[6];
  *int v150 = __ROR8__(v149 + v148, 32) & 0xFFFFFFFC000000FFLL | 0x500;
  v147[6] = v150 + 1;
  int v151 = *(void **)(a1 + 112);
  uint64_t v152 = v151[126];
  uint64_t v153 = v151[128];
  v151[126] = v152 + 36;
  *(_OWORD *)uint64_t v152 = xmmword_242EA87F0;
  *(_OWORD *)(v152 + 16) = xmmword_242EA8800;
  *(_DWORD *)(v152 + 32) = 234881024;
  uint64_t v154 = __ROR8__(v153 + v152, 32);
  unint64_t v155 = (unint64_t *)v151[6];
  unint64_t *v155 = v154 & 0xFFFFFFFC000000FFLL | 0x900;
  v151[6] = v155 + 1;
  uint64_t v156 = *(void *)(a1 + 96);
  unsigned int v157 = *(_DWORD *)(v156 + 2576);
  unsigned int v158 = *(_DWORD *)(v156 + 2580);
  *(float *)&long long v181 = (float)v157 * 0.5;
  *((float *)&v181 + 1) = *(float *)&v181;
  *((float *)&v181 + 2) = (float)v158 * 0.5;
  uint64_t v180 = 0x80000000;
  if (v157 && v158)
  {
    LODWORD(v180) = ((v157 - 1) >> 5) & 0x1FF | 0x80000000;
    HIDWORD(v180) = ((v158 - 1) >> 5) & 0x1FF;
  }
  uint64_t v159 = *(void **)(a1 + 112);
  uint64_t v160 = v159[126];
  uint64_t v161 = v159[128];
  v159[126] = v160 + 40;
  *(_DWORD *)uint64_t v160 = 3072;
  *(void *)(v160 + 4) = v180;
  *(_DWORD *)(v160 + 12) = 0;
  *((float *)&v181 + 3) = -*((float *)&v181 + 2);
  *(_OWORD *)(v160 + 16) = v181;
  *(void *)(v160 + 32) = 0x3F80000000000000;
  int v162 = (unint64_t *)v159[6];
  *int v162 = __ROR8__(v161 + v160, 32) & 0xFFFFFFFC000000FFLL | 0xA00;
  v159[6] = v162 + 1;
  unint64_t v163 = *(void **)(a1 + 112);
  int v164 = (_OWORD *)v163[126];
  uint64_t v165 = v163[128];
  v163[126] = v164 + 1;
  *int v164 = xmmword_242EA8810;
  uint64_t v166 = __ROR8__((char *)v164 + v165, 32);
  uint64_t v167 = (unint64_t *)v163[6];
  unint64_t *v167 = v166 & 0xFFFFFFFC000000FFLL | 0x400;
  v163[6] = v167 + 1;
  *(void *)&double result = AGX::RenderTileDispatchEncoder<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitScissor(a1);
  return result;
}

void AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatchThreadsWithIndirectParameters(uint64_t a1, int64x2_t *a2, unsigned char *a3, _DWORD *a4, int8x16_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindTilePipelineResources(a1, *(int8x16_t **)(a1 + 24536), a5);
  int64x2_t v14 = *a2;
  *(int32x2_t *)(a1 + 17488) = vmovn_s64(*a2);
  uint64_t v15 = *(void *)(a1 + 24528);
  uint64_t v54 = *(void *)(a1 + 24536);
  uint64_t v52 = a2[1].i64[0];
  uint64_t v16 = *(void *)(v15 + 96);
  uint64_t v17 = *(unsigned int *)(v16 + 3940);
  uint64_t v18 = *(unsigned int *)(v16 + 3944);
  unint64_t v19 = v14.i64[0];
  int64x2_t v53 = v14;
  unint64_t v20 = v14.u64[1];
  BOOL v22 = v14.i64[0] == v17 && v14.i64[1] == v18;
  *(float *)(v15 + 8) = (float)v17;
  *(float *)(v15 + 12) = (float)v18;
  uint64_t v23 = a8 & 0xFF00000000;
  if ((a8 & 0xFF00000000) != 0) {
    int v24 = a8;
  }
  else {
    int v24 = 0;
  }
  *(_DWORD *)(v15 + 64) = v24;
  uint64_t v25 = *(void **)(v15 + 112);
  uint64_t v26 = v25[46];
  if (!v26)
  {
    if (!AGX::DataBufferAllocator<34ul>::growNoInline(v25, 10, 0)) {
      goto LABEL_30;
    }
    uint64_t v26 = v25[46];
    uint64_t v23 = a8 & 0xFF00000000;
  }
  unint64_t v27 = v26 + 48;
  if (v27 <= v25[45])
  {
LABEL_12:
    v25[47] = v27;
    goto LABEL_13;
  }
  uint64_t v50 = v23;
  int v49 = AGX::DataBufferAllocator<34ul>::growNoInline(v25, 10, 0);
  uint64_t v23 = v50;
  if (v49)
  {
    unint64_t v27 = v25[46] + 48;
    if (v27 <= v25[45]) {
      goto LABEL_12;
    }
LABEL_30:
    abort();
  }
LABEL_13:
  uint64_t v28 = *(void *)(v15 + 112);
  uint64_t v29 = *(void *)(v28 + 368);
  uint64_t v30 = *(void *)(v28 + 384) + v29;
  *(void *)(v28 + 368) = v29 + 48;
  *a9 = v30;
  *a10 = v29;
  *(void *)(v15 + 16) = v30;
  unsigned int v31 = 0;
  if (a7)
  {
    uint64_t v32 = -v17;
    uint64_t v33 = -v18;
    int v34 = (uint64_t *)(a6 + 32);
    uint64_t v35 = (float *)(v29 + 24);
    do
    {
      uint64_t v36 = *(v34 - 4);
      uint64_t v37 = *(v34 - 3);
      unsigned int v38 = (v36 & v32) / v17;
      unsigned int v39 = (v37 & v33) / v18;
      unint64_t v40 = ((v17 - 1 + v36 + *(v34 - 1)) & (unint64_t)v32) / v17;
      uint64_t v41 = *v34;
      v34 += 6;
      int v42 = v40 - v38;
      int v43 = ((v18 - 1 + v37 + v41) & (unint64_t)v33) / v18 - v39;
      float v44 = (float)(v42 * v17);
      float v45 = (float)(v43 * v18);
      if (!v22)
      {
        float v44 = (float)v19;
        float v45 = (float)v20;
      }
      *(v35 - 6) = v44;
      *((_DWORD *)v35 - 2) = v42;
      *(_DWORD *)uint64_t v35 = v43;
      unsigned int v46 = v42 + 1 + (v42 + 1) * v43;
      *(v35 - 4) = v45;
      *((_DWORD *)v35 + 2) = v38;
      *((_DWORD *)v35 + 4) = v39;
      if (v31 <= v46) {
        unsigned int v31 = v46;
      }
      ++v35;
      --a7;
    }
    while (a7);
  }
  int v60 = 25;
  unsigned int v62 = 0;
  uint64_t v63 = 0;
  std::string __p = 0;
  uint64_t v59 = &unk_26F853B88;
  int v64 = 0;
  if (v23) {
    char v47 = 6;
  }
  else {
    char v47 = 2;
  }
  LOBYTE(v64) = v47;
  TileDispatchVertexPrograuint64_t m = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateTileDispatchVertexProgram(*(void *)(v15 + 80), (uint64_t)&v59);
  int64x2_t v57 = v53;
  uint64_t v58 = v52;
  AGX::RenderTileDispatchEncoderGen2<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::emitDispatch<AGX::HAL200::TileProgramVariant,AGX::TileDriverArgumentTable<AGX::HAL200::Classes>>((void *)v15, v54, (uint64x2_t *)(a1 + 72), a1 + 10264, &v57, a3, a4, TileDispatchVertexProgram, v22, v31, a8);
  uint64_t v59 = &unk_26F853BC8;
  if (__p)
  {
    unsigned int v62 = __p;
    operator delete(__p);
  }
}

void sub_242B89D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindUSCSpillBuffer(uint64_t a1, __n128 *a2)
{
  int v2 = *(_DWORD *)(a1 + 4);
  int v4 = *(_DWORD *)(a1 + 40);
  unsigned __int32 v3 = *(_DWORD *)(a1 + 44);
  if (v4 < 1)
  {
    unsigned __int32 v11 = 0;
    unsigned __int32 v10 = 0;
    unsigned __int32 v15 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = *(_DWORD *)(v5 + 5912);
    uint64_t v7 = 5936;
    if (*(_OWORD *)(v5 + 5936) == 0) {
      uint64_t v7 = 5952;
    }
    int32x2_t v8 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v5 + v7))))));
    int v9 = *(_DWORD *)(a1 + 36);
    unsigned __int32 v10 = *(_DWORD *)(a1 + 32) + v9;
    unsigned __int32 v11 = (v3 + v4 + v10) * vadd_s32(vdup_lane_s32(v8, 1), v8).u32[0];
    BOOL v12 = __OFSUB__(v9, *(_DWORD *)a1);
    int v13 = v9 - *(_DWORD *)a1;
    int v14 = v13 * v6;
    if ((v13 < 0) ^ v12 | (v13 == 0)) {
      int v14 = 0;
    }
    v2 += v11 + v14;
    unsigned __int32 v15 = *(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 24) + v11;
  }
  a2[75].n128_u16[4] = 0;
  a2[74].n128_u32[2] = v4;
  a2[74].n128_u32[3] = v3;
  a2[75].n128_u32[0] = v10;
  a2[75].n128_u32[1] = v11;
  a2[72].n128_u64[0] = (uint64_t)(int)((v2 + 7) & 0xFFFFFFF8) << 12;
  a2[72].n128_u64[1] = (uint64_t)(int)((v15 + 7) & 0xFFFFFFF8) << 12;
  __n128 result = *(__n128 *)(a1 + 8);
  a2[73] = result;
  return result;
}

uint64_t AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTileProgramVisibleFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = result;
  int v4 = (void *)(result + 8 * a3);
  if (a3 <= 0x22) {
    v4[2899] = 0;
  }
  if (a2)
  {
    v4[76] = *(unsigned int *)(a2 + 352);
    uint64_t v5 = (int *)MEMORY[0x263F4B188];
    uint64_t v6 = a2 + (int)*MEMORY[0x263F4B188];
    unint64_t v7 = *(void *)(v6 + 8);
    uint64_t v10 = v6 + 16;
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v9 = *(void *)(v10 + 8);
    v4[9] = v9;
    unsigned __int32 v11 = v4 + 9;
    v11[2925] = v7;
    v11[2990] = v9;
    v11[132] = v8 & 0xFFFFFFFFFFFFFFLL;
    BOOL v12 = (_DWORD *)(result + 4 * a3 + 10264);
    v12[2138] = v8;
    v12[2203] = v8;
    v12[2268] = v7 >> 8;
    v11[2441] = a2 + *v5;
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 24), a2, 2u, a3);
    __n128 result = *(void *)(v3 + 32);
    if (result)
    {
      return MTLResourceListAddResource();
    }
  }
  else
  {
    v4[76] = 0;
    v4[141] = 0;
    uint64_t v13 = result + 4 * a3 + 10264;
    *(_DWORD *)(v13 + 8552) = 0;
    v4[9] = 0;
    v4[2934] = 0;
    v4[2999] = 0;
    *(_DWORD *)(v13 + 8812) = 0;
  }
  return result;
}

uint64_t AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setTileProgramIntersectionFunctionTable(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 296);
    uint64_t v5 = *(unsigned int *)(v4 + 24);
    uint64_t v6 = a3;
    unint64_t v7 = (void *)(result + 8 * a3);
    v7[76] = *(int *)(v4 + 160);
    v7[141] = v5;
    v7[9] = 0;
    v7[2934] = 0;
    v7[2999] = 0;
    uint64_t v8 = (_DWORD *)(result + 4 * a3 + 10264);
    v8[2138] = 0;
    v8[2203] = 0;
    v8[2268] = 0;
    uint64_t v9 = *(void *)(*(void *)(v4 + 136) + 296);
    v7[2450] = v9 + (int)*MEMORY[0x263F4B188];
    AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(*(void **)(result + 24), v9, 2u, a3);
    __n128 result = *(void *)(v3 + 32);
    if (result)
    {
      MTLResourceListAddResource();
      __n128 result = *(void *)(v3 + 32);
      *(void *)(v3 + 8 * v6 + 23192) = *(void *)(v4 + 96);
      if (result)
      {
        return MTLResourceListAddResource();
      }
    }
    else
    {
      *(void *)(v3 + 8 * v6 + 23192) = *(void *)(v4 + 96);
    }
  }
  else
  {
    uint64_t v10 = (void *)(result + 8 * a3);
    v10[9] = 0;
    v10 += 9;
    v10[2890] = 0;
    v10[67] = 0;
    v10[132] = 0;
    v10[2925] = 0;
    v10[2990] = 0;
    uint64_t v11 = result + 4 * a3 + 10264;
    *(_DWORD *)(v11 + 8552) = 0;
    *(_DWORD *)(v11 + 8812) = 0;
  }
  return result;
}

void AGX::RenderTileDispatchSWEndOfTile<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::dispatch(uint64_t *a1, __n128 *a2, unsigned char *a3, _DWORD *a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 4880);
  if (!v5
    || !(*(unsigned __int16 *)(v5 + 1876) & (*(unsigned __int16 *)(v5 + 1878) ^ 0xFFFF) | (unsigned __int16)(*(_WORD *)(v5 + 1878) & *(_WORD *)(v4 + 1476))))
  {
    return;
  }
  unsigned int v8 = *(_DWORD *)(v5 + 68);
  uint64_t v9 = a1[4];
  if (v8 <= *(_DWORD *)(v5 + 76)) {
    unsigned int v8 = *(_DWORD *)(v5 + 76);
  }
  int v10 = 32 * v8;
  int v11 = 32 * *(_DWORD *)(v5 + 80);
  uint64_t v12 = *(void *)(v9 + 56);
  unsigned int v13 = ((v11 + 6143) >> 12) + ((v10 + 17279) >> 12);
  unsigned int v14 = ((v10 + 78719) >> 16) + ((v11 + 67583) >> 16);
  if (*(_DWORD *)(v12 + 5864) == 21) {
    int v15 = 10;
  }
  else {
    int v15 = 14;
  }
  uint64_t v16 = v15 * v14;
  *(void *)&long long v163 = (v16 + 96 * v13) | ((((unint64_t)(v16 + 32 * v13) >> 1) & 0x3FFFFFF) << 33);
  *((void *)&v163 + 1) = v16;
  int v17 = *(_DWORD *)(v4 + 5072);
  int v18 = *(_DWORD *)(v4 + 5076);
  int v19 = *(_DWORD *)(v4 + 5080);
  if (v18) {
    int v20 = v18 + 64;
  }
  else {
    int v20 = 0;
  }
  unsigned int v21 = ((v20 + 4095) >> 12) + ((v17 + 0x1FFF) >> 12);
  unsigned int v22 = ((v17 + 69631) >> 16) + ((v20 + 0xFFFF) >> 16);
  unsigned int v23 = v21 + ((v19 + 4095) >> 12);
  int v24 = v22 + ((v19 + 0xFFFF) >> 16);
  if (*(unsigned char *)(v12 + 7815)) {
    unsigned int v25 = 11;
  }
  else {
    unsigned int v25 = 6;
  }
  if (v25 >= 8) {
    int v26 = 8;
  }
  else {
    int v26 = v25;
  }
  unsigned int v157 = (void *)((v26 * v24 + v25 * v23) | ((unint64_t)(v24 + v23) << 32));
  int v158 = v24;
  if (AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragmentWithTile(v9, &v163, &v157))AGX::RenderTileDispatchContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindUSCSpillBuffer(a1[4], a2); {
  unint64_t v27 = (void *)(*a1 + 3940);
  }
  uint64_t v155 = *a1;
  uint64_t v28 = *(void *)(*a1 + 2576);
  *(void *)&long long v29 = v28;
  *((void *)&v29 + 1) = HIDWORD(v28);
  long long v30 = v29;
  uint64_t v149 = a1;
  uint64_t v31 = a1[1174];
  *(void *)&long long v29 = *v27;
  *((void *)&v29 + 1) = HIDWORD(*v27);
  uint64_t v32 = *(void *)(v31 + 96);
  uint64_t v33 = *(unsigned int *)(v32 + 3940);
  uint64_t v34 = *(unsigned int *)(v32 + 3944);
  unint64_t v35 = v29;
  int v153 = DWORD2(v29);
  unint64_t v36 = *((void *)&v29 + 1);
  BOOL v37 = (void)v29 == v33 && v36 == v34;
  *(float *)(v31 + 8) = (float)v33;
  int v38 = v37;
  int v145 = v38;
  *(float *)(v31 + 12) = (float)v34;
  *(_DWORD *)(v31 + 64) = 0;
  unsigned int v39 = ((v33 + v30 - 1) & -(int)v33) / v33;
  unsigned int v40 = ((v34 + DWORD2(v30) - 1) & -(int)v34) / v34;
  if (v37)
  {
    float v42 = (double)(v39 * v33) + -0.00390625;
    float v41 = (double)(v40 * v34) + -0.00390625;
    double v43 = v41;
  }
  else
  {
    float v42 = (float)v35 + -0.0039062;
    double v43 = (float)v36 + -0.00390625;
  }
  *(float *)(v31 + 16) = v42;
  float v44 = v43;
  *(float *)(v31 + 24) = v44;
  *(_DWORD *)(v31 + 32) = v39;
  *(_DWORD *)(v31 + 40) = v40;
  *(_DWORD *)(v31 + 48) = 0;
  *(_DWORD *)(v31 + 56) = 0;
  int v158 = 25;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  std::string __p = 0;
  unsigned int v157 = &unk_26F853B88;
  int v162 = 0;
  uint64_t v45 = v155 + 448;
  int v144 = v40 * v39;
  TileDispatchVertexPrograuint64_t m = AGX::Device<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::findOrCreateTileDispatchVertexProgram(*(void *)(v31 + 80), (uint64_t)&v157);
  unsigned int v46 = *(_DWORD *)(TileDispatchVertexProgram + 1680);
  do
  {
    IOGPUResourceListAddResource();
    v46 &= ~(1 << __clz(__rbit32(v46)));
  }
  while (v46);
  if ((v153 * v35) <= *(_DWORD *)(v5 + 1872))
  {
    char v47 = *(void **)(v31 + 112);
    uint64_t v48 = (unint64_t *)v47[6];
    if ((unint64_t)(v48 + 23) > v47[5])
    {
      uint64_t v49 = TileDispatchVertexProgram;
      uint64_t v50 = v31 + 8;
      if (AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v31 + 112), 0, 0))
      {
        uint64_t v143 = v47[6];
        if ((unint64_t)(v143 + 184) > v47[5]) {
          goto LABEL_121;
        }
        v47[7] = v143 + 184;
        *uint64_t v48 = __ROR8__(v47[8] + v143, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
      }
    }
    else
    {
      v47[7] = v48 + 23;
      uint64_t v49 = TileDispatchVertexProgram;
      uint64_t v50 = v31 + 8;
    }
    uint64_t v51 = *(void **)(v31 + 112);
    uint64_t v52 = *(unsigned int *)(v49 + 16) + 667;
    unint64_t v53 = v51[18] + v52;
    if (v53 > v51[17])
    {
      if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v31 + 112), 3, 0))
      {
LABEL_35:
        unint64_t v54 = v51[126] + 667;
        if (v54 > v51[125])
        {
          if (!AGX::DataBufferAllocator<34ul>::growNoInline(v51, 30, 0))
          {
LABEL_37:
            uint64_t v55 = (*(_DWORD *)(*(void *)(v49 + 1344) + 8) - **(_DWORD **)(v49 + 1344)) + 63;
            unint64_t v56 = v51[26] + v55;
            if (v56 > v51[25])
            {
              if (!AGX::DataBufferAllocator<34ul>::growNoInline(v51, 5, 0))
              {
LABEL_39:
                uint64_t v57 = (*(_DWORD *)(*(void *)(v5 + 512) + 8) - **(_DWORD **)(v5 + 512)) + 63;
                unint64_t v58 = v51[30] + v57;
                if (v58 > v51[29])
                {
                  if (!AGX::DataBufferAllocator<34ul>::growNoInline(v51, 6, 0))
                  {
LABEL_41:
                    uint64_t v59 = *(unsigned int *)(v5 + 100) + 31;
                    unint64_t v60 = v51[50] + v59;
                    if (v60 > v51[49])
                    {
                      if (!AGX::DataBufferAllocator<34ul>::growNoInline(v51, 11, 0))
                      {
LABEL_43:
                        unint64_t v61 = *(void **)(v31 + 112);
                        unint64_t v62 = v61[38] + 16;
                        if (v62 > v61[37])
                        {
                          if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v31 + 112), 8, 0))goto LABEL_45; {
                          unint64_t v62 = v61[38] + 16;
                          }
                          if (v62 > v61[37]) {
                            goto LABEL_121;
                          }
                        }
                        v61[39] = v62;
LABEL_45:
                        uint64_t v63 = *(void **)(v31 + 112);
                        unint64_t v64 = v63[42] + 8;
                        if (v64 <= v63[41]) {
                          goto LABEL_46;
                        }
                        if (!AGX::DataBufferAllocator<34ul>::growNoInline(*(void *)(v31 + 112), 9, 0))
                        {
LABEL_47:
                          *(_DWORD *)(v31 + 168) = 1;
                          int v65 = *(_DWORD *)(v49 + 2628);
                          if (v65 > *(_DWORD *)(v31 + 124))
                          {
                            *(_DWORD *)(v31 + 124) = v65;
                            *(_DWORD *)(v31 + 120) = *(_DWORD *)(v49 + 2624);
                            *(_OWORD *)(v31 + 128) = *(_OWORD *)(v49 + 2632);
                          }
                          int v66 = *(_DWORD *)(v49 + 2648);
                          if (*(_DWORD *)(v31 + 144) > v66) {
                            int v66 = *(_DWORD *)(v31 + 144);
                          }
                          *(_DWORD *)(v31 + 144) = v66;
                          AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(*(void **)(v31 + 104), *(void **)(v31 + 112), v49, (unint64_t *)v31, v50);
                          int v67 = *(void **)(v31 + 104);
                          int v150 = *(void **)(v31 + 112);
                          unsigned int v68 = *(_DWORD *)(v5 + 848);
                          do
                          {
                            IOGPUResourceListAddResource();
                            v68 &= ~(1 << __clz(__rbit32(v68)));
                          }
                          while (v68);
                          int v69 = (char ***)v67;
                          uint64_t v148 = *(void *)((char *)v67 + 182);
                          uint64_t v70 = *(unsigned int *)(v5 + 100);
                          if (v70)
                          {
                            __int32 v71 = v150;
                            unint64_t v72 = (v150[50] + 31) & 0xFFFFFFFFFFFFFFE0;
                            unint64_t v73 = v72 + v150[52];
                            v150[50] = v72 + v70;
                          }
                          else
                          {
                            unint64_t v73 = 0;
                            unint64_t v72 = 0;
                            __int32 v71 = v150;
                          }
                          unsigned int v74 = (char *)((v71[30] + 63) & 0xFFFFFFFFFFFFFFC0);
                          uint64_t v151 = v71[32];
                          v71[30] = &v74[*(_DWORD *)(*(void *)(v5 + 512) + 8) - **(_DWORD **)(v5 + 512)];
                          if (v70)
                          {
                            unint64_t v75 = *(void *)(v5 + 40) - *(void *)(v5 + 32);
                            unint64_t v76 = v75 >> 2;
                            uint64_t v77 = (*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 2;
                            uint64_t v78 = TileDispatchVertexProgram;
                            if (*(unsigned char *)(v5 + 56))
                            {
                              *(void *)(v155 + 872) = v73;
                              *(void *)(v155 + 872) = v73 + *(unsigned int *)(v5 + 96);
                            }
                            if (v76)
                            {
                              int v79 = *(unsigned int **)(v5 + 32);
                              BOOL v80 = (void *)v72;
                              do
                              {
                                unsigned int v81 = *v79++;
                                *v80++ = *(void *)(v45 + 8 * v81);
                                LODWORD(v76) = v76 - 1;
                              }
                              while (v76);
                              uint64_t v82 = (2 * v75);
                              uint64_t v83 = v155 + 448;
                              if (!v77) {
                                goto LABEL_68;
                              }
                              goto LABEL_66;
                            }
                            uint64_t v82 = 0;
                            uint64_t v83 = 0;
                            if (v77)
                            {
LABEL_66:
                              uint64_t v84 = (_DWORD *)(v72 + v82);
                              *(void *)(v155 + 456) = v73 + v82 + 8;
                              uint64_t v85 = *(unsigned int **)(v5 + 8);
                              do
                              {
                                unsigned int v86 = *v85++;
                                *v84++ = *(_DWORD *)(v45 + 4 * v86);
                                LODWORD(v77) = v77 - 1;
                              }
                              while (v77);
                            }
                          }
                          else
                          {
                            uint64_t v83 = 0;
                            uint64_t v78 = TileDispatchVertexProgram;
                          }
LABEL_68:
                          uint64_t v87 = *(void *)(v5 + 512);
                          memcpy(v74, *(const void **)v87, *(void *)(v87 + 8) - *(void *)v87);
                          if (*(unsigned char *)(v87 + 200))
                          {
                            v88.i64[0] = v73;
                            v88.i64[1] = v73 >> 5;
                            *(int8x16_t *)&v74[*(unsigned int *)(v87 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v74[*(unsigned int *)(v87 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
                          }
                          unint64_t v89 = *(unsigned int **)(v87 + 176);
                          for (uint64_t i = *(unsigned int **)(v87 + 184); v89 != i; v89 += 3)
                          {
                            v91.i64[0] = *(void *)(v83 + 8 * v89[1]) + *v89;
                            v91.i64[1] = (unint64_t)v91.i64[0] >> 5;
                            *(int8x16_t *)&v74[v89[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v74[v89[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
                          }
                          if (!*(_DWORD *)(v87 + 240)) {
                            *(void *)&v74[*(unsigned __int16 *)(v87 + 244)] = v148;
                          }
                          unint64_t v92 = (unint64_t)&v74[v151];
                          int8x16_t v93 = *v69;
                          if (*v69)
                          {
                            uint64_t v95 = *(const void **)v87;
                            uint64_t v94 = *(void *)(v87 + 8);
                            int v96 = *(_DWORD *)(v5 + 920);
                            LODWORD(v97) = *((_DWORD *)v93 + 2);
                            int v98 = v97 + 1;
                            if (*((_DWORD *)v93 + 3) >= (v97 + 1))
                            {
                              long long v101 = *v93;
                            }
                            else
                            {
                              uint64_t v152 = *(const void **)v87;
                              uint64_t v156 = *(void *)(v87 + 8);
                              unsigned int v99 = -__clz(v97);
                              long long v100 = (char *)malloc_type_malloc(40 << (v99 & 0x1F), 0x10800400D7C94D2uLL);
                              long long v101 = v100;
                              int v102 = 1 << v99;
                              uint64_t v97 = *((unsigned int *)v93 + 2);
                              if (v97)
                              {
                                memcpy(v100, *v93, 40 * v97);
                                free(*v93);
                                LODWORD(v97) = *((_DWORD *)v93 + 2);
                              }
                              LODWORD(v94) = v156;
                              LODWORD(v95) = v152;
                              *((_DWORD *)v93 + 3) = v102;
                              *int8x16_t v93 = v101;
                            }
                            unsigned int v103 = &v101[40 * v97];
                            *(_DWORD *)unsigned int v103 = 11;
                            *((void *)v103 + 1) = v92;
                            *((void *)v103 + 2) = v74;
                            *((void *)v103 + 3) = (v94 - v95);
                            *((_DWORD *)v103 + 8) = v96;
                            *((_DWORD *)v93 + 2) = v98;
                            uint64_t v78 = TileDispatchVertexProgram;
                          }
                          int v104 = *(_DWORD *)(v5 + 1792);
                          int v105 = *(_DWORD *)(v5 + 1804);
                          int v106 = *(_DWORD *)(v5 + 1816);
                          int v107 = (v92 >> 16) & 0xFFC00000 | *(_DWORD *)(v5 + 1808) & 0x3FFFFF;
                          uint64_t v108 = *(void *)(v5 + 1864);
                          v109.i32[0] = *(_DWORD *)(v108 + 36);
                          v109.i32[1] = *(_DWORD *)(v108 + 32);
                          int8x8_t v110 = vbsl_s8((int8x8_t)0x3FFFF0000, *(int8x8_t *)(v5 + 1796), v109);
                          uint64_t v111 = v71[126];
                          uint64_t v112 = v71[128] + v111;
                          v71[126] = v111 + 28;
                          *(_DWORD *)uint64_t v111 = v104;
                          *(int8x8_t *)(v111 + 4) = v110;
                          *(_DWORD *)(v111 + 12) = v105;
                          *(_DWORD *)(v111 + 16) = v107;
                          *(_DWORD *)(v111 + 20) = v92 >> 6;
                          *(_DWORD *)(v111 + 24) = v106;
                          unsigned int v113 = (unint64_t *)v71[6];
                          *unsigned int v113 = __ROR8__(v112, 32) & 0xFFFFFFFC000000FFLL | 0x700;
                          v71[6] = v113 + 1;
                          uint64_t v114 = *(void *)(v78 + 2656);
                          uint64_t v115 = *(void **)(v31 + 112);
                          uint64_t v116 = v115[126];
                          uint64_t v117 = v115[128];
                          v115[126] = v116 + 20;
                          *(_DWORD *)uint64_t v116 = 201981952;
                          *(_DWORD *)(v116 + 4) = v114 & 0xF1C00FF;
                          *(void *)(v116 + 8) = 0;
                          *(_DWORD *)(v116 + 16) = HIDWORD(v114);
                          uint64_t v118 = (unint64_t *)v115[6];
                          *uint64_t v118 = __ROR8__(v117 + v116, 32) & 0xFFFFFFFC000000FFLL | 0x500;
                          _OWORD v115[6] = v118 + 1;
                          int v119 = *(void **)(v31 + 112);
                          uint64_t v120 = v119[126];
                          uint64_t v121 = v119[128];
                          v119[126] = v120 + 36;
                          *(_OWORD *)uint64_t v120 = xmmword_242EA87F0;
                          *(_OWORD *)(v120 + 16) = xmmword_242EA8800;
                          *(_DWORD *)(v120 + 32) = 234881024;
                          uint64_t v122 = __ROR8__(v121 + v120, 32);
                          int8x16_t v123 = (unint64_t *)v119[6];
                          *int8x16_t v123 = v122 & 0xFFFFFFFC000000FFLL | 0x900;
                          v119[6] = v123 + 1;
                          uint64_t v124 = *(void *)(v31 + 96);
                          unsigned int v125 = *(_DWORD *)(v124 + 2576);
                          unsigned int v126 = *(_DWORD *)(v124 + 2580);
                          LODWORD(v163) = 3072;
                          int v164 = 0;
                          *(float *)&long long v165 = (float)v125 * 0.5;
                          *((float *)&v165 + 1) = *(float *)&v165;
                          *((float *)&v165 + 2) = (float)v126 * 0.5;
                          *((float *)&v165 + 3) = -*((float *)&v165 + 2);
                          uint64_t v166 = 0x3F80000000000000;
                          *(void *)((char *)&v163 + 4) = 0x80000000;
                          if (v125 && v126)
                          {
                            DWORD1(v163) = ((v125 - 1) >> 5) & 0x1FF | 0x80000000;
                            DWORD2(v163) = ((v126 - 1) >> 5) & 0x1FF;
                          }
                          uint64_t v127 = *(void **)(v31 + 112);
                          uint64_t v128 = v127[126];
                          uint64_t v129 = v127[128] + v128;
                          v127[126] = v128 + 40;
                          *(_DWORD *)uint64_t v128 = 3072;
                          *(void *)(v128 + 4) = *(void *)((char *)&v163 + 4);
                          *(_DWORD *)(v128 + 12) = 0;
                          *(_OWORD *)(v128 + 16) = v165;
                          *(void *)(v128 + 32) = v166;
                          int v130 = (unint64_t *)v127[6];
                          unint64_t *v130 = __ROR8__(v129, 32) & 0xFFFFFFFC000000FFLL | 0xA00;
                          v127[6] = v130 + 1;
                          unsigned int v131 = *(void **)(v31 + 112);
                          int v132 = (_OWORD *)v131[126];
                          uint64_t v133 = v131[128];
                          v131[126] = v132 + 1;
                          _OWORD *v132 = xmmword_242EA8810;
                          uint64_t v134 = __ROR8__((char *)v132 + v133, 32);
                          int v135 = (unint64_t *)v131[6];
                          unint64_t *v135 = v134 & 0xFFFFFFFC000000FFLL | 0x400;
                          v131[6] = v135 + 1;
                          AGX::RenderTileDispatchEncoder<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::encodeAndEmitScissor(v31);
                          if (!*(void *)(*(void *)(v31 + 240) + 520) || *a3)
                          {
                            *a3 = 1;
                          }
                          else
                          {
                            if (v145) {
                              unsigned int v136 = 3;
                            }
                            else {
                              unsigned int v136 = 3 * v144;
                            }
                            unsigned int v137 = *(_DWORD *)(*(void *)(v31 + 96) + 3912);
                            uint64_t v138 = *(void *)(v31 + 112);
                            LODWORD(v139) = 1640238336;
                            DWORD1(v139) = v136;
                            *((void *)&v139 + 1) = v137;
                            uint64_t v140 = *(_OWORD **)(v138 + 48);
                            *uint64_t v140 = v139;
                            *(void *)(v138 + 48) = v140 + 1;
                            if (a4) {
                              ++*a4;
                            }
                            *(_DWORD *)(*(void *)(v31 + 88) + 1540) += v137 * (v136 / 3);
                          }
                          goto LABEL_92;
                        }
                        unint64_t v64 = v63[42] + 8;
                        if (v64 <= v63[41])
                        {
LABEL_46:
                          v63[43] = v64;
                          goto LABEL_47;
                        }
LABEL_121:
                        abort();
                      }
                      unint64_t v60 = v51[50] + v59;
                      if (v60 > v51[49]) {
                        goto LABEL_121;
                      }
                    }
                    v51[51] = v60;
                    goto LABEL_43;
                  }
                  unint64_t v58 = v51[30] + v57;
                  if (v58 > v51[29]) {
                    goto LABEL_121;
                  }
                }
                v51[31] = v58;
                goto LABEL_41;
              }
              unint64_t v56 = v51[26] + v55;
              if (v56 > v51[25]) {
                goto LABEL_121;
              }
            }
            v51[27] = v56;
            goto LABEL_39;
          }
          unint64_t v54 = v51[126] + 667;
          if (v54 > v51[125]) {
            goto LABEL_121;
          }
        }
        v51[127] = v54;
        goto LABEL_37;
      }
      unint64_t v53 = v51[18] + v52;
      if (v53 > v51[17]) {
        goto LABEL_121;
      }
    }
    v51[19] = v53;
    goto LABEL_35;
  }
LABEL_92:
  unsigned int v157 = &unk_26F853BC8;
  if (__p)
  {
    uint64_t v160 = __p;
    operator delete(__p);
  }
  uint64_t v141 = v149[1174];
  unsigned int v142 = *(_DWORD *)(v5 + 92);
  if (*(_DWORD *)(v141 + 248) > v142) {
    unsigned int v142 = *(_DWORD *)(v141 + 248);
  }
  *(_DWORD *)(v141 + 248) = v142;
}

void sub_242B8ACD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitBackgroundObjectArguments(void *a1, uint64_t a2, void *a3, uint64_t a4, unint64_t *a5, uint64_t a6)
{
  unsigned int v11 = *(_DWORD *)(a4 + 1680);
  do
  {
    v11 &= ~(1 << __clz(__rbit32(v11)));
    IOGPUResourceListAddResource();
  }
  while (v11);
  uint64_t v12 = (*(_DWORD *)(*(void *)(a4 + 1344) + 8) - **(_DWORD **)(a4 + 1344)) + 63;
  unint64_t v13 = a3[30] + v12;
  if (v13 <= a3[29])
  {
LABEL_4:
    a3[31] = v13;
    goto LABEL_5;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a3, 6, 0))
  {
    unint64_t v13 = a3[30] + v12;
    if (v13 > a3[29]) {
      goto LABEL_84;
    }
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v14 = *(unsigned int *)(a4 + 16) + 31;
  unint64_t v15 = a3[22] + v14;
  if (v15 <= a3[21])
  {
LABEL_6:
    a3[23] = v15;
    goto LABEL_7;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a3, 4, 0))
  {
    unint64_t v15 = a3[22] + v14;
    if (v15 <= a3[21]) {
      goto LABEL_6;
    }
LABEL_84:
    abort();
  }
LABEL_7:
  uint64_t v16 = *(void *)((char *)a1 + 182);
  uint64_t v17 = *(unsigned int *)(a4 + 16);
  if (v17)
  {
    unint64_t v18 = (a3[22] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v19 = v18 + a3[24];
    a3[22] = v18 + v17;
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v18 = 0;
  }
  int v20 = (char *)((a3[30] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v21 = a3[32];
  a3[30] = &v20[*(_DWORD *)(*(void *)(a4 + 1344) + 8) - **(_DWORD **)(a4 + 1344)];
  unint64_t v22 = *(void *)(a4 + 248) - *(void *)(a4 + 240);
  int v23 = *(_DWORD *)(a4 + 200);
  if (v22) {
    int v24 = *(_DWORD *)(a4 + 200) & 1;
  }
  else {
    int v24 = 0;
  }
  if (!v17) {
    goto LABEL_58;
  }
  unint64_t v25 = *(unsigned int *)(a4 + 424);
  int v26 = *(int **)(a4 + 48);
  uint64_t v27 = (*(void *)(a4 + 56) - (void)v26) >> 2;
  int v28 = *(_DWORD *)(a4 + 412);
  uint64_t v29 = *(void *)(a4 + 96);
  uint64_t v30 = *(void *)(a4 + 104);
  uint64_t v32 = *(void *)(a4 + 72);
  uint64_t v31 = *(void *)(a4 + 80);
  int v33 = *(_DWORD *)(a4 + 208);
  int v34 = *(_DWORD *)(a4 + 212);
  uint64_t v36 = *(void *)(a4 + 144);
  uint64_t v35 = *(void *)(a4 + 152);
  int v37 = *(unsigned __int8 *)(a4 + 456);
  int v38 = *(unsigned __int8 *)(a4 + 457);
  int8x8_t v109 = a1;
  if (*(unsigned char *)(a4 + 456)) {
    a5[99] = v19 + *(unsigned int *)(a4 + 20);
  }
  unint64_t v39 = v30 - v29;
  if (v38) {
    a5[100] = v19 + *(unsigned int *)(a4 + 40);
  }
  unint64_t v40 = v39 >> 2;
  unint64_t v41 = v31 - v32;
  unint64_t v108 = v19;
  if (v27 != v25)
  {
    if (v28)
    {
      int v44 = v28;
      uint64_t v45 = (void *)v18;
      unsigned int v46 = v26;
      do
      {
        int v47 = *v46++;
        *v45++ = a5[v47];
        --v44;
      }
      while (v44);
    }
    if (*(_DWORD *)(a4 + 280))
    {
      uint64_t v48 = *(void **)(a4 + 264);
      if (v48 != (void *)(a4 + 272))
      {
        do
        {
          *(_DWORD *)(v18 + 4 * *((unsigned int *)v48 + 7)) |= *((_DWORD *)v48 + 8);
          long long v101 = (void *)v48[1];
          if (v101)
          {
            do
            {
              int v102 = v101;
              long long v101 = (void *)*v101;
            }
            while (v101);
          }
          else
          {
            do
            {
              int v102 = (void *)v48[2];
              BOOL v85 = *v102 == (void)v48;
              uint64_t v48 = v102;
            }
            while (!v85);
          }
          uint64_t v48 = v102;
        }
        while (v102 != (void *)(a4 + 272));
      }
    }
    unsigned int v49 = (v28 + 3) & 0xFFFFFFFC;
    if (v37)
    {
      unsigned int v50 = *(_DWORD *)(a4 + 416);
      if (v50 >= 4)
      {
        uint64_t v51 = &v26[v49];
        unsigned int v52 = v50 >> 2;
        unint64_t v53 = (_OWORD *)(v18 + 8 * v49);
        do
        {
          int v54 = *v51;
          v51 += 4;
          uint64_t v55 = &a5[v54];
          long long v56 = *((_OWORD *)v55 + 1);
          *unint64_t v53 = *(_OWORD *)v55;
          v53[1] = v56;
          v53 += 2;
          --v52;
        }
        while (v52);
      }
      v49 += v50;
    }
    a1 = v109;
    if (v38)
    {
      unsigned int v57 = *(_DWORD *)(a4 + 420);
      unint64_t v58 = (void *)(v18 + 8 * v49);
      if (*(unsigned char *)(a4 + 1144))
      {
        if (v57)
        {
          int v105 = (int *)(*(void *)(a4 + 48) + 4 * v49);
          do
          {
            int v106 = *v105++;
            *v58++ = a5[v106];
            --v57;
          }
          while (v57);
        }
      }
      else if (v57 >= 4)
      {
        uint64_t v59 = (int *)(*(void *)(a4 + 48) + 4 * v49);
        unsigned int v60 = v57 >> 2;
        do
        {
          int v61 = *v59;
          v59 += 4;
          *unint64_t v58 = a5[v61];
          v58 += 4;
          --v60;
        }
        while (v60);
      }
    }
    unsigned int v42 = 8 * (v27 - v25);
    unint64_t v43 = v41 >> 2;
    if (!v25) {
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  unsigned int v42 = 0;
  unint64_t v43 = v41 >> 2;
  if (v25)
  {
LABEL_37:
    if (v25 >= 4)
    {
      unint64_t v62 = *(uint64_t **)(a4 + 1848);
      unint64_t v63 = v25 >> 2;
      unint64_t v64 = (void *)(v18 + v42);
      do
      {
        uint64_t v65 = *v62;
        v62 += 4;
        *unint64_t v64 = v65;
        v64 += 4;
        --v63;
      }
      while (v63);
    }
    v42 += 8 * v25;
  }
LABEL_41:
  unint64_t v66 = v22 >> 2;
  if (v40)
  {
    *a5 = v19 + v42;
    v42 += 8 * v40;
  }
  int v67 = v34 + v33;
  if (v43)
  {
    unsigned int v68 = (_DWORD *)(v18 + v42);
    *(void *)(a6 + 328) = v19 + v42 + 8;
    int v69 = *(unsigned int **)(a4 + 72);
    int v70 = v43;
    do
    {
      unsigned int v71 = *v69++;
      *v68++ = *(_DWORD *)(a6 + 4 * v71);
      --v70;
    }
    while (v70);
    v42 += 4 * v43;
  }
  if (v66)
  {
    int v72 = 8 * (v40 + v27) + 4 * (v24 + v23);
    unint64_t v73 = (void *)(v18 + (v72 & 0xFFFFFFFC));
    unsigned int v74 = *(int **)(a4 + 240);
    do
    {
      int v75 = *v74++;
      *v73++ = a5[v75];
      LODWORD(v66) = v66 - 1;
    }
    while (v66);
    unsigned int v42 = v72 + 8 * (v22 >> 2);
  }
  uint64_t v76 = v21;
  uint64_t v77 = v16;
  uint64_t v78 = v35 - v36;
  if (v67)
  {
    int v107 = v67;
    int v79 = (char *)(v18 + v42);
    uint64_t v80 = *(unsigned int *)(a4 + 208);
    memcpy(v79, (char *)a5 + 4 * *(unsigned int *)(a4 + 204), 4 * v80);
    int v81 = *(_DWORD *)(a4 + 212);
    if (v81)
    {
      uint64_t v82 = *(unsigned int **)(a4 + 216);
      uint64_t v83 = &v79[4 * v80];
      do
      {
        unsigned int v84 = *v82++;
        *(_DWORD *)uint64_t v83 = *(_DWORD *)(a6 + 4 * v84);
        v83 += 4;
        --v81;
      }
      while (v81);
    }
    v42 += 4 * v107;
    a1 = v109;
  }
  BOOL v85 = (v78 & 0x3FFFFFFFCLL) == 0;
  uint64_t v16 = v77;
  uint64_t v21 = v76;
  unint64_t v19 = v108;
  if (!v85)
  {
    unint64_t v86 = v108 + v42;
    *(void *)(a6 + 328) = v86 + 8;
    *a5 = v86;
  }
LABEL_58:
  uint64_t v87 = *(void *)(a4 + 1344);
  memcpy(v20, *(const void **)v87, *(void *)(v87 + 8) - *(void *)v87);
  if (*(unsigned char *)(v87 + 200))
  {
    v88.i64[0] = v19;
    v88.i64[1] = v19 >> 5;
    *(int8x16_t *)&v20[*(unsigned int *)(v87 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[*(unsigned int *)(v87 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v88, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v89 = *(unsigned int **)(v87 + 176);
  for (uint64_t i = *(unsigned int **)(v87 + 184); v89 != i; v89 += 3)
  {
    v91.i64[0] = a5[v89[1]] + *v89;
    v91.i64[1] = (unint64_t)v91.i64[0] >> 5;
    *(int8x16_t *)&v20[v89[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[v89[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v91, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v87 + 240)) {
    *(void *)&v20[*(unsigned __int16 *)(v87 + 244)] = v16;
  }
  unint64_t v92 = (char **)*a1;
  if (v92)
  {
    uint64_t v93 = *(void *)(v87 + 8) - *(void *)v87;
    int v94 = *(_DWORD *)(a4 + 1752);
    LODWORD(v95) = *((_DWORD *)v92 + 2);
    int v96 = v95 + 1;
    if (*((_DWORD *)v92 + 3) >= (v95 + 1))
    {
      long long v100 = *v92;
    }
    else
    {
      unsigned int v97 = -__clz(v95);
      int v98 = 1 << v97;
      unsigned int v99 = (char *)malloc_type_malloc(40 << (v97 & 0x1F), 0x10800400D7C94D2uLL);
      long long v100 = v99;
      uint64_t v95 = *((unsigned int *)v92 + 2);
      if (v95)
      {
        memcpy(v99, *v92, 40 * v95);
        free(*v92);
        LODWORD(v95) = *((_DWORD *)v92 + 2);
      }
      *((_DWORD *)v92 + 3) = v98;
      *unint64_t v92 = v100;
    }
    unsigned int v103 = &v100[40 * v95];
    *(_DWORD *)unsigned int v103 = 9;
    *((void *)v103 + 1) = &v20[v21];
    *((void *)v103 + 2) = v20;
    *((void *)v103 + 3) = v93;
    *((_DWORD *)v103 + 8) = v94;
    *((_DWORD *)v92 + 2) = v96;
  }
  return &v20[v21];
}

double ___ZN3AGX20RenderUSCStateLoaderINS_6HAL2008EncodersENS1_7ClassesEE17dataBufferConfigsERK16AGXGPUCoreConfig_block_invoke(uint64_t a1)
{
  uint64_t v1 = (*(_DWORD *)(*(void *)(a1 + 32) + 24) << 8) | 0x80u;
  qword_268D5A970 = 0x2000;
  unk_268D5A978 = v1;
  qword_268D5A980 = 8;
  dword_268D5A988 = 1;
  qword_268D5A990 = 0x2000;
  unk_268D5A998 = v1;
  qword_268D5A9A0 = 8;
  dword_268D5A9A8 = 1;
  AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::databuffer_configs = 0x2000;
  *(void *)algn_268D5A958 = v1;
  qword_268D5A960 = 8;
  dword_268D5A968 = 1;
  qword_268D5A9B0 = 0x2000;
  double result = 0.0;
  unk_268D5A9B8 = 0u;
  dword_268D5A9C8 = 1;
  qword_268D5A9D0 = 0x2000;
  unk_268D5A9D8 = 0u;
  dword_268D5A9E8 = 4;
  uint64_t v3 = (*(_DWORD *)(*(void *)(a1 + 32) + 24) << 8) | 0x80u;
  qword_268D5AD10 = 0x2000;
  qword_268D5AD18 = v3;
  qword_268D5AD20 = 0;
  dword_268D5AD28 = 1024;
  qword_268D5A9F0 = 0x2000;
  unk_268D5A9F8 = 0u;
  dword_268D5AA08 = 1;
  qword_268D5AA10 = 0x2000;
  unk_268D5AA18 = 0u;
  dword_268D5AA28 = 4;
  qword_268D5AB70 = 0x2000;
  unk_268D5AB78 = 0u;
  dword_268D5AB88 = 1;
  qword_268D5AA30 = 0x2000;
  unk_268D5AA38 = 0u;
  dword_268D5AA48 = 4;
  qword_268D5AA50 = 0x2000;
  unk_268D5AA58 = 0u;
  dword_268D5AA68 = 4;
  qword_268D5AA70 = 0x2000;
  unk_268D5AA78 = 0u;
  dword_268D5AA88 = 1;
  LODWORD(v3) = *(_DWORD *)(*(void *)(a1 + 32) + 24);
  qword_268D5AA90 = 0x2000;
  unk_268D5AA98 = (v3 << 8) | 0x80u;
  qword_268D5AAA0 = 0;
  dword_268D5AAA8 = 1;
  xmmword_268D5AAD0 = xmmword_242EA7E60;
  qword_268D5AAE0 = 2;
  dword_268D5AAE8 = 1;
  xmmword_268D5AAF0 = xmmword_242EA7E60;
  qword_268D5AB00 = 12;
  dword_268D5AB08 = 1;
  qword_268D5AAB0 = 0x2000;
  unk_268D5AAB8 = 0u;
  dword_268D5AAC8 = 4;
  xmmword_268D5AB30 = xmmword_242EA7E60;
  qword_268D5AB40 = 4;
  dword_268D5AB48 = 1;
  qword_268D5ABB0 = 0x2000;
  unk_268D5ABB8 = 0u;
  dword_268D5ABC8 = 1;
  xmmword_268D5ABF0 = xmmword_242EA7E60;
  qword_268D5AC00 = 4;
  dword_268D5AC08 = 1;
  xmmword_268D5AC30 = xmmword_242EA7E50;
  qword_268D5AC40 = 28;
  dword_268D5AC48 = 1;
  qword_268D5ACF0 = 0x2000;
  unk_268D5ACF8 = 0u;
  dword_268D5AD08 = 21;
  qword_268D5ACE0 = 0;
  xmmword_268D5ACD0 = 0u;
  dword_268D5ACE8 = 1;
  xmmword_268D5AC50 = xmmword_242EA7E50;
  qword_268D5AC60 = 28;
  dword_268D5AC68 = 1;
  xmmword_268D5AC70 = xmmword_242EA7E50;
  qword_268D5AC80 = 28;
  dword_268D5AC88 = 1;
  return result;
}

uint64_t AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsEarly(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, char **a6, void *a7, unint64_t *a8, unint64_t *a9)
{
  unsigned int v13 = *(_DWORD *)(a3 + 848);
  do
  {
    v13 &= ~(1 << __clz(__rbit32(v13)));
    IOGPUResourceListAddResource();
  }
  while (v13);
  *(unsigned char *)(a4 + 9) = 1;
  uint64_t v14 = (*(_DWORD *)(*(void *)(a3 + 512) + 8) - **(_DWORD **)(a3 + 512)) + 63;
  unint64_t v15 = a2[30] + v14;
  if (v15 <= a2[29])
  {
LABEL_4:
    a2[31] = v15;
    goto LABEL_5;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a2, 6, 0))
  {
    unint64_t v15 = a2[30] + v14;
    if (v15 > a2[29]) {
      goto LABEL_20;
    }
    goto LABEL_4;
  }
LABEL_5:
  uint64_t v16 = *(unsigned int *)(a3 + 100) + 31;
  unint64_t v17 = a2[22] + v16;
  if (v17 <= a2[21])
  {
LABEL_6:
    a2[23] = v17;
    goto LABEL_7;
  }
  if (AGX::DataBufferAllocator<34ul>::growNoInline(a2, 4, 0))
  {
    unint64_t v17 = a2[22] + v16;
    if (v17 <= a2[21]) {
      goto LABEL_6;
    }
LABEL_20:
    abort();
  }
LABEL_7:
  uint64_t v18 = *(unsigned int *)(a3 + 100);
  if (v18)
  {
    unint64_t v19 = (a2[22] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v20 = v19 + a2[24];
    a2[22] = v19 + v18;
  }
  else
  {
    unint64_t v20 = 0;
    unint64_t v19 = 0;
  }
  uint64_t v21 = *(void *)(a3 + 512);
  unint64_t v22 = *(const void **)v21;
  size_t v23 = *(void *)(v21 + 8) - *(void *)v21;
  int v24 = (char *)((a2[30] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v25 = a2[32];
  a2[30] = &v24[v23];
  uint64_t v26 = *(void *)(a4 + 10);
  memcpy(v24, v22, v23);
  if (*(unsigned char *)(v21 + 200))
  {
    v27.i64[0] = v20;
    v27.i64[1] = v20 >> 5;
    *(int8x16_t *)&v24[*(unsigned int *)(v21 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v24[*(unsigned int *)(v21 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v27, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v21 + 240)) {
    *(void *)&v24[*(unsigned __int16 *)(v21 + 244)] = v26;
  }
  int v28 = &v24[*(void *)(v21 + 8) - *(void *)v21];
  uint64_t result = *(void *)(a3 + 1760);
  *a5 = v24;
  *a6 = v28;
  *a7 = &v24[v25];
  *a8 = v19;
  *a9 = v20;
  return result;
}

void AGX::EndOfTileEmitter<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitEndOfTileArgumentsLate(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void *a6, uint64_t a7, char **a8)
{
  if (*(_DWORD *)(a1 + 100))
  {
    uint64_t v11 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2;
    unint64_t v12 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
    unint64_t v13 = v12 >> 2;
    if (*(unsigned char *)(a1 + 56)) {
      *(void *)(a2 + 424) = *(unsigned int *)(a1 + 96) + a7;
    }
    if (v13)
    {
      uint64_t v14 = *(unsigned int **)(a1 + 32);
      unint64_t v15 = a6;
      do
      {
        unsigned int v16 = *v14++;
        *v15++ = *(void *)(a2 + 8 * v16);
        LODWORD(v13) = v13 - 1;
      }
      while (v13);
      uint64_t v17 = (2 * v12);
      if (!v11) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v17 = 0;
      if (!v11) {
        goto LABEL_12;
      }
    }
    uint64_t v18 = (_DWORD *)((char *)a6 + v17);
    *(void *)(a2 + 8) = a7 + v17 + 8;
    unint64_t v19 = *(unsigned int **)(a1 + 8);
    do
    {
      unsigned int v20 = *v19++;
      *v18++ = *(_DWORD *)(a2 + 4 * v20);
      LODWORD(v11) = v11 - 1;
    }
    while (v11);
  }
LABEL_12:
  if (a8)
  {
    unsigned int v21 = a4 - a3;
    int v22 = *(_DWORD *)(a1 + 108);
    LODWORD(v23) = *((_DWORD *)a8 + 2);
    int v24 = v23 + 1;
    if (*((_DWORD *)a8 + 3) >= (v23 + 1))
    {
      int v28 = *a8;
    }
    else
    {
      unsigned int v25 = -__clz(v23);
      int v26 = 1 << v25;
      int8x16_t v27 = (char *)malloc_type_malloc(40 << (v25 & 0x1F), 0x10800400D7C94D2uLL);
      int v28 = v27;
      uint64_t v23 = *((unsigned int *)a8 + 2);
      if (v23)
      {
        memcpy(v27, *a8, 40 * v23);
        free(*a8);
        LODWORD(v23) = *((_DWORD *)a8 + 2);
      }
      *((_DWORD *)a8 + 3) = v26;
      *a8 = v28;
    }
    uint64_t v29 = &v28[40 * v23];
    *(_DWORD *)uint64_t v29 = 10;
    *((void *)v29 + 1) = a5;
    *((void *)v29 + 2) = a3;
    *((void *)v29 + 3) = v21;
    *((_DWORD *)v29 + 8) = v22;
    *((_DWORD *)a8 + 2) = v24;
  }
}

uint64_t AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::extractProgramVariantArgumentDirtyBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = *(void *)(a4 + 384);
  if ((v7 & 0x40) == 0)
  {
    uint64_t v8 = 0;
    if (!a3) {
      return v8;
    }
    goto LABEL_18;
  }
  int8x16_t v9 = *(int8x16_t *)a4;
  int8x16_t v10 = *(int8x16_t *)(a4 + 16);
  int8x16_t v11 = *(int8x16_t *)(a4 + 32);
  long long v12 = *(_OWORD *)(a4 + 80);
  uint64_t v13 = *(void *)(a2 + 2152) & v10.i64[0] | *(void *)(a2 + 2136) & v9.i64[0] | *(void *)(a2 + 2168) & v11.i64[0] | *(void *)(a2 + 2160) & v10.i64[1] | *(void *)(a2 + 2144) & v9.i64[1] | *(void *)(a2 + 2176) & v11.i64[1];
  uint64_t v14 = *(void *)(a2 + 2088) & v10.i64[0] | *(void *)(a2 + 2072) & v9.i64[0] | *(void *)(a2 + 2104) & v11.i64[0] | v12 & *(void *)(a2 + 2120) | *(void *)(a2 + 2096) & v10.i64[1] | *(void *)(a2 + 2080) & v9.i64[1] | *(void *)(a2 + 2112) & v11.i64[1] | *((void *)&v12 + 1) & *(void *)(a2 + 2128);
  uint64_t v15 = *(void *)(a2 + 2040) & v10.i64[0] | *(void *)(a2 + 2024) & v9.i64[0] | *(void *)(a2 + 2056) & v11.i64[0] | *(void *)(a2 + 2048) & v10.i64[1] | *(void *)(a2 + 2032) & v9.i64[1] | *(void *)(a2 + 2064) & v11.i64[1];
  int64x2_t v16 = (int64x2_t)vorrq_s8(vorrq_s8(vandq_s8(v10, *(int8x16_t *)(a2 + 1992)), vandq_s8(*(int8x16_t *)a4, *(int8x16_t *)(a2 + 1976))), vandq_s8(v11, *(int8x16_t *)(a2 + 2008)));
  *(int32x2_t *)v16.i8 = vmovn_s64(vtstq_s64(v16, v16));
  uint64_t v17 = 25088;
  if (((v16.i8[0] | v16.i8[4]) & 1) == 0) {
    uint64_t v17 = 0;
  }
  if (v14) {
    uint64_t v18 = v17 | 0x6800;
  }
  else {
    uint64_t v18 = v17;
  }
  if (v15) {
    v18 |= 0x6000uLL;
  }
  if (v13) {
    uint64_t v19 = v18 | 0x6400;
  }
  else {
    uint64_t v19 = v18;
  }
  if ((*(_OWORD *)(a2 + 2200) & *(_OWORD *)&v10 | *(_OWORD *)(a2 + 2184) & *(_OWORD *)a4 | *(_OWORD *)(a2 + 2216) & *(_OWORD *)&v11 | *(_OWORD *)(a2 + 2232) & v12) == 0) {
    uint64_t v8 = v19;
  }
  else {
    uint64_t v8 = v19 | 0x7000;
  }
  uint64_t v6 = a1;
  if (a3)
  {
LABEL_18:
    if ((v7 & 0x1000000000) != 0)
    {
      unint64_t v20 = AGX::getDirtyArguments<AGX::HAL200::FragmentProgramVariantESLState>((void *)(a3 + 1936), *(void *)(a4 + 288), *(void *)(a4 + 296), *(void *)(a4 + 304), *(void *)(a4 + 312), *(void *)(a4 + 320), *(void *)(a4 + 328), *(void *)(a4 + 368), *(void *)(a4 + 376));
      uint64_t v21 = v8 | 0x88000000000;
      if ((v20 & 1) == 0) {
        uint64_t v21 = v8;
      }
      uint64_t v22 = (v20 & 0x100) << 35;
      if ((v20 & 0x10000) != 0) {
        uint64_t v22 = 0xA0000000000;
      }
      uint64_t v23 = v22 | v21;
      if ((v20 & 0x1000000) != 0) {
        v23 |= 0x90000000000uLL;
      }
      if (BYTE4(v20)) {
        uint64_t v8 = v23 | 0xC0000000000;
      }
      else {
        uint64_t v8 = v23;
      }
    }
    if (*(unsigned char *)(a4 + 392)) {
      *(_DWORD *)(v6 + 168) = *(unsigned __int8 *)(a3 + 3376);
    }
  }
  return v8;
}

uint64_t AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::extractProgramVariantArgumentDirtyBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 + 384);
  if ((v6 & 0x10000) == 0)
  {
    uint64_t v7 = a4;
    uint64_t v8 = 0;
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_18;
  }
  int8x16_t v9 = *(int8x16_t *)(a5 + 96);
  int8x16_t v10 = *(int8x16_t *)(a5 + 112);
  int8x16_t v11 = *(int8x16_t *)(a5 + 128);
  long long v12 = *(_OWORD *)(a5 + 176);
  BOOL v13 = (*(_OWORD *)(a2 + 2200) & *(_OWORD *)&v10 | *(_OWORD *)(a2 + 2184) & *(_OWORD *)&v9 | *(_OWORD *)(a2 + 2216) & *(_OWORD *)&v11 | *(_OWORD *)(a2 + 2232) & v12) == 0;
  uint64_t v14 = *(void *)(a2 + 2152) & v10.i64[0] | *(void *)(a2 + 2136) & v9.i64[0] | *(void *)(a2 + 2168) & v11.i64[0] | *(void *)(a2 + 2160) & v10.i64[1] | *(void *)(a2 + 2144) & v9.i64[1] | *(void *)(a2 + 2176) & v11.i64[1];
  uint64_t v15 = *(void *)(a2 + 2088) & v10.i64[0] | *(void *)(a2 + 2072) & v9.i64[0] | *(void *)(a2 + 2104) & v11.i64[0] | v12 & *(void *)(a2 + 2120) | *(void *)(a2 + 2096) & v10.i64[1] | *(void *)(a2 + 2080) & v9.i64[1] | *(void *)(a2 + 2112) & v11.i64[1] | *((void *)&v12 + 1) & *(void *)(a2 + 2128);
  uint64_t v16 = *(void *)(a2 + 2040) & v10.i64[0] | *(void *)(a2 + 2024) & v9.i64[0] | *(void *)(a2 + 2056) & v11.i64[0] | *(void *)(a2 + 2048) & v10.i64[1] | *(void *)(a2 + 2032) & v9.i64[1] | *(void *)(a2 + 2064) & v11.i64[1];
  int64x2_t v17 = (int64x2_t)vorrq_s8(vorrq_s8(vandq_s8(v10, *(int8x16_t *)(a2 + 1992)), vandq_s8(v9, *(int8x16_t *)(a2 + 1976))), vandq_s8(v11, *(int8x16_t *)(a2 + 2008)));
  *(int32x2_t *)v17.i8 = vmovn_s64(vtstq_s64(v17, v17));
  uint64_t v18 = 25690112;
  if (((v17.i8[0] | v17.i8[4]) & 1) == 0) {
    uint64_t v18 = 0;
  }
  if (v15) {
    uint64_t v19 = v18 | 0x1A00000;
  }
  else {
    uint64_t v19 = v18;
  }
  if (v16) {
    v19 |= 0x1800000uLL;
  }
  if (v14) {
    uint64_t v20 = v19 | 0x1900000;
  }
  else {
    uint64_t v20 = v19;
  }
  if (v13) {
    uint64_t v8 = v20;
  }
  else {
    uint64_t v8 = v20 | 0x1C00000;
  }
  uint64_t v7 = a4;
  if ((v6 & 0x4000000) != 0)
  {
LABEL_18:
    int8x16_t v21 = *(int8x16_t *)(a5 + 192);
    int8x16_t v22 = *(int8x16_t *)(a5 + 208);
    int8x16_t v23 = *(int8x16_t *)(a5 + 224);
    long long v24 = *(_OWORD *)(a5 + 272);
    BOOL v25 = (*(_OWORD *)(a3 + 2200) & *(_OWORD *)&v22 | *(_OWORD *)(a3 + 2184) & *(_OWORD *)&v21 | *(_OWORD *)(a3 + 2216) & *(_OWORD *)&v23 | *(_OWORD *)(a3 + 2232) & v24) == 0;
    uint64_t v26 = *(void *)(a3 + 2152) & v22.i64[0] | *(void *)(a3 + 2136) & v21.i64[0] | *(void *)(a3 + 2168) & v23.i64[0] | *(void *)(a3 + 2160) & v22.i64[1] | *(void *)(a3 + 2144) & v21.i64[1] | *(void *)(a3 + 2176) & v23.i64[1];
    uint64_t v27 = *(void *)(a3 + 2088) & v22.i64[0] | *(void *)(a3 + 2072) & v21.i64[0] | *(void *)(a3 + 2104) & v23.i64[0] | v24 & *(void *)(a3 + 2120) | *(void *)(a3 + 2096) & v22.i64[1] | *(void *)(a3 + 2080) & v21.i64[1] | *(void *)(a3 + 2112) & v23.i64[1] | *((void *)&v24 + 1) & *(void *)(a3 + 2128);
    uint64_t v28 = *(void *)(a3 + 2040) & v22.i64[0] | *(void *)(a3 + 2024) & v21.i64[0] | *(void *)(a3 + 2056) & v23.i64[0] | *(void *)(a3 + 2048) & v22.i64[1] | *(void *)(a3 + 2032) & v21.i64[1] | *(void *)(a3 + 2064) & v23.i64[1];
    int64x2_t v29 = (int64x2_t)vorrq_s8(vorrq_s8(vandq_s8(v22, *(int8x16_t *)(a3 + 1992)), vandq_s8(v21, *(int8x16_t *)(a3 + 1976))), vandq_s8(v23, *(int8x16_t *)(a3 + 2008)));
    *(int32x2_t *)v29.i8 = vmovn_s64(vtstq_s64(v29, v29));
    if ((v29.i8[0] | v29.i8[4])) {
      uint64_t v30 = v8 | 0x620000000;
    }
    else {
      uint64_t v30 = v8;
    }
    if (v27) {
      uint64_t v31 = v30 | 0x680000000;
    }
    else {
      uint64_t v31 = v30;
    }
    if (v28) {
      v31 |= 0x600000000uLL;
    }
    if (v26) {
      uint64_t v32 = v31 | 0x640000000;
    }
    else {
      uint64_t v32 = v31;
    }
    if (v25) {
      uint64_t v8 = v32;
    }
    else {
      uint64_t v8 = v32 | 0x700000000;
    }
    uint64_t v7 = a4;
  }
LABEL_33:
  if (v7)
  {
    if ((v6 & 0x1000000000) != 0)
    {
      unint64_t v33 = AGX::getDirtyArguments<AGX::HAL200::FragmentProgramVariantESLState>((void *)(v7 + 1936), *(void *)(a5 + 288), *(void *)(a5 + 296), *(void *)(a5 + 304), *(void *)(a5 + 312), *(void *)(a5 + 320), *(void *)(a5 + 328), *(void *)(a5 + 368), *(void *)(a5 + 376));
      uint64_t v34 = v8 | 0x88000000000;
      if ((v33 & 1) == 0) {
        uint64_t v34 = v8;
      }
      uint64_t v35 = (v33 & 0x100) << 35;
      if ((v33 & 0x10000) != 0) {
        uint64_t v35 = 0xA0000000000;
      }
      uint64_t v36 = v35 | v34;
      if ((v33 & 0x1000000) != 0) {
        v36 |= 0x90000000000uLL;
      }
      if (BYTE4(v33)) {
        uint64_t v8 = v36 | 0xC0000000000;
      }
      else {
        uint64_t v8 = v36;
      }
    }
    if (*(unsigned char *)(a5 + 392)) {
      *(_DWORD *)(a1 + 168) = *(unsigned __int8 *)(v7 + 3376);
    }
  }
  return v8;
}

void AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  uint64_t v8 = *(unsigned int *)(a3 + 16);
  if (v8)
  {
    unint64_t v9 = (a2[18] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v10 = v9 + a2[20];
    a2[18] = v9 + v8;
  }
  else
  {
    unint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  int8x16_t v11 = (char *)((a2[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v12 = a2[28];
  a2[26] = &v11[*(_DWORD *)(*(void *)(a3 + 1344) + 8) - **(_DWORD **)(a3 + 1344)];
  unint64_t v13 = *(void *)(a3 + 248) - *(void *)(a3 + 240);
  int v14 = *(_DWORD *)(a3 + 200);
  if (v13) {
    int v15 = *(_DWORD *)(a3 + 200) & 1;
  }
  else {
    int v15 = 0;
  }
  if (!v8) {
    goto LABEL_48;
  }
  unint64_t v16 = *(unsigned int *)(a3 + 424);
  uint64_t v17 = *(void *)(a3 + 48);
  unint64_t v18 = (unint64_t)(*(void *)(a3 + 56) - v17) >> 2;
  uint64_t v19 = (*(void *)(a3 + 104) - *(void *)(a3 + 96)) >> 2;
  unint64_t v20 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  int v21 = *(_DWORD *)(a3 + 208);
  int v22 = *(_DWORD *)(a3 + 212);
  uint64_t v24 = *(void *)(a3 + 144);
  uint64_t v23 = *(void *)(a3 + 152);
  if (v18 != v16)
  {
    unint64_t v27 = v10;
    int v28 = *(_DWORD *)(a3 + 412);
    int v29 = *(unsigned __int8 *)(a3 + 456);
    int v30 = *(unsigned __int8 *)(a3 + 457);
    if (v28)
    {
      int v31 = *(_DWORD *)(a3 + 412);
      uint64_t v32 = (void *)v9;
      unint64_t v33 = *(int **)(a3 + 48);
      do
      {
        int v34 = *v33++;
        *v32++ = a4[v34];
        --v31;
      }
      while (v31);
    }
    if (*(_DWORD *)(a3 + 280))
    {
      uint64_t v35 = *(void **)(a3 + 264);
      if (v35 != (void *)(a3 + 272))
      {
        do
        {
          *(_DWORD *)(v9 + 4 * *((unsigned int *)v35 + 7)) |= *((_DWORD *)v35 + 8);
          unint64_t v86 = (void *)v35[1];
          if (v86)
          {
            do
            {
              uint64_t v87 = v86;
              unint64_t v86 = (void *)*v86;
            }
            while (v86);
          }
          else
          {
            do
            {
              uint64_t v87 = (void *)v35[2];
              BOOL v88 = *v87 == (void)v35;
              uint64_t v35 = v87;
            }
            while (!v88);
          }
          uint64_t v35 = v87;
        }
        while (v87 != (void *)(a3 + 272));
      }
    }
    unsigned int v36 = (v28 + 3) & 0xFFFFFFFC;
    if (v29)
    {
      unsigned int v37 = *(_DWORD *)(a3 + 416);
      if (v37 >= 4)
      {
        int v38 = (int *)(v17 + 4 * v36);
        unsigned int v39 = v37 >> 2;
        unint64_t v40 = (_OWORD *)(v9 + 8 * v36);
        do
        {
          int v41 = *v38;
          v38 += 4;
          unsigned int v42 = &a4[v41];
          long long v43 = v42[1];
          *unint64_t v40 = *v42;
          v40[1] = v43;
          v40 += 2;
          --v39;
        }
        while (v39);
      }
      v36 += v37;
    }
    unint64_t v10 = v27;
    if (v30)
    {
      unsigned int v44 = *(_DWORD *)(a3 + 420);
      uint64_t v45 = (void *)(v9 + 8 * v36);
      if (*(unsigned char *)(a3 + 1144))
      {
        if (v44)
        {
          int v94 = (int *)(*(void *)(a3 + 48) + 4 * v36);
          do
          {
            int v95 = *v94++;
            *v45++ = a4[v95];
            --v44;
          }
          while (v44);
        }
      }
      else if (v44 >= 4)
      {
        unsigned int v46 = (int *)(*(void *)(a3 + 48) + 4 * v36);
        unsigned int v47 = v44 >> 2;
        do
        {
          int v48 = *v46;
          v46 += 4;
          *uint64_t v45 = a4[v48];
          v45 += 4;
          --v47;
        }
        while (v47);
      }
    }
    unsigned int v25 = 8 * (v18 - v16);
    unint64_t v26 = v20 >> 2;
    if (!v16) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  unsigned int v25 = 0;
  unint64_t v26 = v20 >> 2;
  if (v16)
  {
LABEL_27:
    if (v16 >= 4)
    {
      unsigned int v49 = *(uint64_t **)(a3 + 1848);
      unint64_t v50 = v16 >> 2;
      uint64_t v51 = (void *)(v9 + v25);
      do
      {
        uint64_t v52 = *v49;
        v49 += 4;
        *uint64_t v51 = v52;
        v51 += 4;
        --v50;
      }
      while (v50);
    }
    v25 += 8 * v16;
  }
LABEL_31:
  int v96 = a1;
  uint64_t v97 = v12;
  unint64_t v53 = v13 >> 2;
  if (v19)
  {
    *a4 = v10 + v25;
    v25 += 8 * v19;
  }
  int v54 = v22 + v21;
  if (v26)
  {
    uint64_t v55 = (_DWORD *)(v9 + v25);
    uint64_t v98 = v10 + v25 + 8;
    long long v56 = *(unsigned int **)(a3 + 72);
    int v57 = v26;
    do
    {
      unsigned int v58 = *v56++;
      *v55++ = *((_DWORD *)&v98 + v58);
      --v57;
    }
    while (v57);
    v25 += 4 * v26;
  }
  if (v53)
  {
    int v59 = 8 * (v19 + v18) + 4 * (v15 + v14);
    unsigned int v60 = (void *)(v9 + (v59 & 0xFFFFFFFC));
    int v61 = *(int **)(a3 + 240);
    do
    {
      int v62 = *v61++;
      *v60++ = a4[v62];
      LODWORD(v53) = v53 - 1;
    }
    while (v53);
    unsigned int v25 = v59 + 8 * (v13 >> 2);
  }
  uint64_t v63 = v23 - v24;
  if (v54)
  {
    unint64_t v64 = v10;
    uint64_t v65 = (char *)(v9 + v25);
    uint64_t v66 = *(unsigned int *)(a3 + 208);
    memcpy(v65, (char *)a4 + 4 * *(unsigned int *)(a3 + 204), 4 * v66);
    int v67 = *(_DWORD *)(a3 + 212);
    if (v67)
    {
      unsigned int v68 = *(unsigned int **)(a3 + 216);
      int v69 = &v65[4 * v66];
      do
      {
        unsigned int v70 = *v68++;
        *(_DWORD *)int v69 = *((_DWORD *)&v98 + v70);
        v69 += 4;
        --v67;
      }
      while (v67);
    }
    v25 += 4 * v54;
    unint64_t v10 = v64;
  }
  a1 = v96;
  uint64_t v12 = v97;
  if ((v63 & 0x3FFFFFFFCLL) != 0) {
    *a4 = v10 + v25;
  }
LABEL_48:
  uint64_t v71 = *(void *)(a3 + 1344);
  memcpy(v11, *(const void **)v71, *(void *)(v71 + 8) - *(void *)v71);
  if (*(unsigned char *)(v71 + 200))
  {
    v72.i64[0] = v10;
    v72.i64[1] = v10 >> 5;
    *(int8x16_t *)&v11[*(unsigned int *)(v71 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v11[*(unsigned int *)(v71 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v73 = *(unsigned int **)(v71 + 176);
  for (uint64_t i = *(unsigned int **)(v71 + 184); v73 != i; v73 += 3)
  {
    v75.i64[0] = a4[v73[1]] + *v73;
    v75.i64[1] = (unint64_t)v75.i64[0] >> 5;
    *(int8x16_t *)&v11[v73[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v11[v73[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v75, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v76 = (unint64_t)&v11[v12];
  uint64_t v77 = (char **)*a1;
  if (*a1)
  {
    uint64_t v78 = *(void *)(v71 + 8) - *(void *)v71;
    int v79 = *(_DWORD *)(a3 + 1752);
    LODWORD(v80) = *((_DWORD *)v77 + 2);
    int v81 = v80 + 1;
    if (*((_DWORD *)v77 + 3) >= (v80 + 1))
    {
      BOOL v85 = *v77;
    }
    else
    {
      unsigned int v82 = -__clz(v80);
      int v83 = 1 << v82;
      unsigned int v84 = (char *)malloc_type_malloc(40 << (v82 & 0x1F), 0x10800400D7C94D2uLL);
      BOOL v85 = v84;
      uint64_t v80 = *((unsigned int *)v77 + 2);
      if (v80)
      {
        memcpy(v84, *v77, 40 * v80);
        free(*v77);
        LODWORD(v80) = *((_DWORD *)v77 + 2);
      }
      *((_DWORD *)v77 + 3) = v83;
      *uint64_t v77 = v85;
    }
    unint64_t v89 = &v85[40 * v80];
    *(_DWORD *)unint64_t v89 = 16;
    *((void *)v89 + 1) = v76;
    *((void *)v89 + 2) = v11;
    *((void *)v89 + 3) = v78;
    *((_DWORD *)v89 + 8) = v79;
    *((_DWORD *)v77 + 2) = v81;
  }
  int v90 = *(_DWORD *)(a3 + 2600);
  uint64_t v99 = *(void *)(a3 + 2608);
  uint64_t v91 = v99;
  int v100 = *(_DWORD *)(a3 + 2616);
  int v92 = v100;
  uint64_t v93 = a2[6];
  *(void *)uint64_t v93 = *(void *)(a3 + 2592);
  *(_DWORD *)(v93 + 8) = (v76 >> 16) & 0xFFC00000 | v90 & 0x3FFFFF;
  *(_DWORD *)(v93 + 12) = v76 >> 6;
  *(void *)(v93 + 16) = v91;
  *(_DWORD *)(v93 + 24) = v92;
  a2[6] = v93 + 28;
}

void AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(void *a1, void *a2, uint64_t a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v9 = *(unsigned int *)(a3 + 16);
  if (v9)
  {
    unint64_t v10 = (a2[18] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v11 = v10 + a2[20];
    a2[18] = v10 + v9;
  }
  else
  {
    unint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  uint64_t v12 = (char *)((a2[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v13 = a2[28];
  a2[26] = &v12[*(_DWORD *)(*(void *)(a3 + 1344) + 8) - **(_DWORD **)(a3 + 1344)];
  unint64_t v14 = *(void *)(a3 + 248) - *(void *)(a3 + 240);
  int v15 = *(_DWORD *)(a3 + 200);
  if (v14) {
    int v16 = *(_DWORD *)(a3 + 200) & 1;
  }
  else {
    int v16 = 0;
  }
  if (!v9) {
    goto LABEL_48;
  }
  unint64_t v17 = *(unsigned int *)(a3 + 424);
  unint64_t v18 = *(int **)(a3 + 48);
  uint64_t v19 = (*(void *)(a3 + 56) - (void)v18) >> 2;
  uint64_t v20 = (*(void *)(a3 + 104) - *(void *)(a3 + 96)) >> 2;
  unint64_t v21 = *(void *)(a3 + 80) - *(void *)(a3 + 72);
  int v22 = *(_DWORD *)(a3 + 208);
  int v23 = *(_DWORD *)(a3 + 212);
  uint64_t v25 = *(void *)(a3 + 144);
  uint64_t v24 = *(void *)(a3 + 152);
  unint64_t v100 = v11;
  if (v19 != v17)
  {
    int v28 = *(_DWORD *)(a3 + 412);
    int v29 = *(unsigned __int8 *)(a3 + 456);
    int v30 = *(unsigned __int8 *)(a3 + 457);
    if (v28)
    {
      int v31 = *(_DWORD *)(a3 + 412);
      uint64_t v32 = (void *)v10;
      unint64_t v33 = v18;
      do
      {
        int v34 = *v33++;
        *v32++ = a4[v34];
        --v31;
      }
      while (v31);
    }
    if (*(_DWORD *)(a3 + 280))
    {
      uint64_t v35 = *(void **)(a3 + 264);
      if (v35 != (void *)(a3 + 272))
      {
        do
        {
          *(_DWORD *)(v10 + 4 * *((unsigned int *)v35 + 7)) |= *((_DWORD *)v35 + 8);
          unint64_t v89 = (void *)v35[1];
          if (v89)
          {
            do
            {
              int v90 = v89;
              unint64_t v89 = (void *)*v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              int v90 = (void *)v35[2];
              BOOL v70 = *v90 == (void)v35;
              uint64_t v35 = v90;
            }
            while (!v70);
          }
          uint64_t v35 = v90;
        }
        while (v90 != (void *)(a3 + 272));
      }
    }
    unsigned int v36 = (v28 + 3) & 0xFFFFFFFC;
    if (v29)
    {
      unsigned int v37 = *(_DWORD *)(a3 + 416);
      if (v37 >= 4)
      {
        int v38 = &v18[v36];
        unsigned int v39 = v37 >> 2;
        unint64_t v40 = (_OWORD *)(v10 + 8 * v36);
        do
        {
          int v41 = *v38;
          v38 += 4;
          unsigned int v42 = &a4[v41];
          long long v43 = *((_OWORD *)v42 + 1);
          *unint64_t v40 = *(_OWORD *)v42;
          v40[1] = v43;
          v40 += 2;
          --v39;
        }
        while (v39);
      }
      v36 += v37;
    }
    if (v30)
    {
      unsigned int v44 = *(_DWORD *)(a3 + 420);
      uint64_t v45 = (void *)(v10 + 8 * v36);
      if (*(unsigned char *)(a3 + 1144))
      {
        if (v44)
        {
          int v96 = (int *)(*(void *)(a3 + 48) + 4 * v36);
          do
          {
            int v97 = *v96++;
            *v45++ = a4[v97];
            --v44;
          }
          while (v44);
        }
      }
      else if (v44 >= 4)
      {
        unsigned int v46 = (int *)(*(void *)(a3 + 48) + 4 * v36);
        unsigned int v47 = v44 >> 2;
        do
        {
          int v48 = *v46;
          v46 += 4;
          *uint64_t v45 = a4[v48];
          v45 += 4;
          --v47;
        }
        while (v47);
      }
    }
    unsigned int v26 = 8 * (v19 - v17);
    unint64_t v27 = v21 >> 2;
    if (!v17) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  unsigned int v26 = 0;
  unint64_t v27 = v21 >> 2;
  if (v17)
  {
LABEL_27:
    if (v17 >= 4)
    {
      unsigned int v49 = *(uint64_t **)(a3 + 1848);
      unint64_t v50 = v17 >> 2;
      uint64_t v51 = (void *)(v10 + v26);
      do
      {
        uint64_t v52 = *v49;
        v49 += 4;
        *uint64_t v51 = v52;
        v51 += 4;
        --v50;
      }
      while (v50);
    }
    v26 += 8 * v17;
  }
LABEL_31:
  unint64_t v53 = v14 >> 2;
  if (v20)
  {
    *a4 = v11 + v26;
    v26 += 8 * v20;
  }
  int v54 = v23 + v22;
  if (v27)
  {
    uint64_t v55 = (_DWORD *)(v10 + v26);
    *(void *)(a5 + 64) = v11 + v26 + 8;
    long long v56 = *(unsigned int **)(a3 + 72);
    int v57 = v27;
    do
    {
      unsigned int v58 = *v56++;
      *v55++ = *(_DWORD *)(a5 + 4 * v58);
      --v57;
    }
    while (v57);
    v26 += 4 * v27;
  }
  if (v53)
  {
    int v59 = 8 * (v20 + v19) + 4 * (v16 + v15);
    unsigned int v60 = (void *)(v10 + (v59 & 0xFFFFFFFC));
    int v61 = *(int **)(a3 + 240);
    do
    {
      int v62 = *v61++;
      *v60++ = a4[v62];
      LODWORD(v53) = v53 - 1;
    }
    while (v53);
    unsigned int v26 = v59 + 8 * (v14 >> 2);
  }
  uint64_t v63 = v24 - v25;
  if (v54)
  {
    uint64_t v98 = a1;
    uint64_t v99 = v13;
    unint64_t v64 = (char *)(v10 + v26);
    uint64_t v65 = *(unsigned int *)(a3 + 208);
    memcpy(v64, (char *)a4 + 4 * *(unsigned int *)(a3 + 204), 4 * v65);
    int v66 = *(_DWORD *)(a3 + 212);
    if (v66)
    {
      int v67 = *(unsigned int **)(a3 + 216);
      unsigned int v68 = &v64[4 * v65];
      do
      {
        unsigned int v69 = *v67++;
        *(_DWORD *)unsigned int v68 = *(_DWORD *)(a5 + 4 * v69);
        v68 += 4;
        --v66;
      }
      while (v66);
    }
    v26 += 4 * v54;
    a1 = v98;
    uint64_t v13 = v99;
  }
  BOOL v70 = (v63 & 0x3FFFFFFFCLL) == 0;
  unint64_t v11 = v100;
  if (!v70)
  {
    unint64_t v71 = v100 + v26;
    *(void *)(a5 + 64) = v71 + 8;
    *a4 = v71;
  }
LABEL_48:
  int8x16_t v72 = (char ***)a1;
  uint64_t v73 = *(void *)(a3 + 1344);
  memcpy(v12, *(const void **)v73, *(void *)(v73 + 8) - *(void *)v73);
  if (*(unsigned char *)(v73 + 200))
  {
    v74.i64[0] = v11;
    v74.i64[1] = v11 >> 5;
    *(int8x16_t *)&v12[*(unsigned int *)(v73 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[*(unsigned int *)(v73 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v74, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  int8x16_t v75 = *(unsigned int **)(v73 + 176);
  unint64_t v76 = *(unsigned int **)(v73 + 184);
  for (uint64_t i = v72; v75 != v76; v75 += 3)
  {
    v78.i64[0] = a4[v75[1]] + *v75;
    v78.i64[1] = (unint64_t)v78.i64[0] >> 5;
    *(int8x16_t *)&v12[v75[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v12[v75[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v78, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v79 = (unint64_t)&v12[v13];
  uint64_t v80 = *i;
  if (*i)
  {
    uint64_t v81 = *(void *)(v73 + 8) - *(void *)v73;
    int v82 = *(_DWORD *)(a3 + 1752);
    LODWORD(v83) = *((_DWORD *)v80 + 2);
    int v84 = v83 + 1;
    if (*((_DWORD *)v80 + 3) >= (v83 + 1))
    {
      BOOL v88 = *v80;
    }
    else
    {
      unsigned int v85 = -__clz(v83);
      int v86 = 1 << v85;
      uint64_t v87 = (char *)malloc_type_malloc(40 << (v85 & 0x1F), 0x10800400D7C94D2uLL);
      BOOL v88 = v87;
      uint64_t v83 = *((unsigned int *)v80 + 2);
      if (v83)
      {
        memcpy(v87, *v80, 40 * v83);
        free(*v80);
        LODWORD(v83) = *((_DWORD *)v80 + 2);
      }
      *((_DWORD *)v80 + 3) = v86;
      *uint64_t v80 = v88;
    }
    uint64_t v91 = &v88[40 * v83];
    *(_DWORD *)uint64_t v91 = 2;
    *((void *)v91 + 1) = v79;
    *((void *)v91 + 2) = v12;
    *((void *)v91 + 3) = v81;
    *((_DWORD *)v91 + 8) = v82;
    *((_DWORD *)v80 + 2) = v84;
  }
  uint64_t v92 = a2[6];
  *(void *)uint64_t v92 = *(void *)(a3 + 2664);
  a2[6] = v92 + 8;
  uint64_t v93 = *(void *)(a3 + 2608);
  int v94 = *(_DWORD *)(a3 + 2616);
  int v95 = (v79 >> 16) & 0xFFC00000 | *(_DWORD *)(a3 + 2600) & 0x3FFFFF;
  *(void *)(v92 + 8) = *(void *)(a3 + 2592);
  *(_DWORD *)(v92 + 16) = v95;
  *(_DWORD *)(v92 + 20) = v79 >> 6;
  *(_DWORD *)(v92 + 32) = v94;
  *(void *)(v92 + 24) = v93;
  a2[6] = v92 + 36;
}

void AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitVertexProgramVariantAndArguments(char ***a1, void *a2, uint64_t a3, uint64x2_t *a4, uint64_t a5, __int16 a6, int a7, int a8, char a9, _DWORD *a10)
{
  unint64_t v10 = a2;
  unint64_t v11 = a10;
  uint64_t v12 = (uint32x2_t *)(a3 + 612);
  BOOL v13 = (a6 & 0xFE01) != 0 && (a9 & 1) == 0;
  if (!v13) {
    goto LABEL_94;
  }
  uint64_t v17 = *(unsigned int *)(a3 + 608);
  if (v17)
  {
    unint64_t v18 = (a2[46] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v19 = v18 + a2[48];
    a2[46] = v18 + v17;
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v18 = 0;
  }
  uint64_t v20 = (const void ***)(a3 + 1936);
  unint64_t v21 = (char *)((a2[26] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v131 = a2[28];
  a2[26] = &v21[*(_DWORD *)(*(void *)(a3 + 1936) + 8) - **(_DWORD **)(a3 + 1936)];
  unint64_t v22 = *(void *)(a3 + 840) - *(void *)(a3 + 832);
  int v23 = *(_DWORD *)(a3 + 792);
  if (v22) {
    int v24 = *(_DWORD *)(a3 + 792) & 1;
  }
  else {
    int v24 = 0;
  }
  if (v17)
  {
    unint64_t v25 = *(unsigned int *)(a3 + 1016);
    unsigned int v26 = *(int **)(a3 + 640);
    uint64_t v27 = (*(void *)(a3 + 648) - (void)v26) >> 2;
    int v28 = *(_DWORD *)(a3 + 1004);
    uint64_t v29 = (*(void *)(a3 + 696) - *(void *)(a3 + 688)) >> 2;
    uint64_t v30 = *(void *)(a3 + 672);
    uint64_t v31 = *(void *)(a3 + 664);
    int v32 = *(_DWORD *)(a3 + 804) + *(_DWORD *)(a3 + 800);
    uint64_t v33 = *(void *)(a3 + 744);
    uint64_t v34 = *(void *)(a3 + 736);
    int v35 = *(unsigned __int8 *)(a3 + 1048);
    int v36 = *(unsigned __int8 *)(a3 + 1049);
    if (*(unsigned char *)(a3 + 1048)) {
      a4[58] = vaddw_u32((uint64x2_t)vdupq_n_s64(v19), *v12);
    }
    if (v36) {
      a4[60].i64[0] = v19 + *(unsigned int *)(a3 + 632);
    }
    uint64_t v37 = 8 * (v29 + v27);
    int v38 = v24 + v23;
    if (v32) {
      a4[64].i64[0] = v37 + v19 + 4 * (v38 + ((v22 >> 1) & 0xFFFFFFFE));
    }
    unint64_t v39 = v30 - v31;
    if (v27 == v25)
    {
      unsigned int v40 = 0;
      unint64_t v41 = v39 >> 2;
      if (!v25)
      {
LABEL_42:
        unint64_t v66 = v22 >> 2;
        if (v29)
        {
          a4[98].i64[1] = v19 + v40;
          int v67 = (void *)(v18 + v40);
          unsigned int v68 = *(unsigned __int16 **)(a3 + 688);
          if (*(unsigned char *)(a3 + 784))
          {
            unsigned int v69 = *(unsigned __int16 **)(a3 + 712);
            for (uint64_t i = (*(void *)(a3 + 720) - (void)v69) >> 1; i; LODWORD(i) = i - 1)
            {
              int v71 = *v69++;
              v67[v71] = *(void *)(a4->i64[v68[2 * v71]] + 8 * v68[2 * v71 + 1]);
            }
          }
          else
          {
            int v74 = v29;
            do
            {
              *v67++ = *(void *)(a4->i64[*v68] + 8 * v68[1]);
              v68 += 2;
              --v74;
            }
            while (v74);
          }
          v40 += 8 * v29;
        }
        unint64_t v75 = v33 - v34;
        if (v41)
        {
          unint64_t v76 = (_DWORD *)(v18 + v40);
          *(void *)(a5 + 8368) = v19 + v40 + 8;
          uint64_t v77 = *(unsigned int **)(a3 + 664);
          int v78 = v41;
          do
          {
            unsigned int v79 = *v77++;
            *v76++ = *(_DWORD *)(a5 + 4 * v79);
            --v78;
          }
          while (v78);
          v40 += 4 * v41;
        }
        unint64_t v80 = v75 >> 2;
        if (v66)
        {
          int v81 = v37 + 4 * v38;
          int v82 = (void *)(v18 + (v81 & 0xFFFFFFFC));
          uint64_t v83 = *(int **)(a3 + 832);
          do
          {
            int v84 = *v83++;
            *v82++ = a4->i64[v84];
            LODWORD(v66) = v66 - 1;
          }
          while (v66);
          unsigned int v40 = v81 + 8 * (v22 >> 2);
        }
        if (v32)
        {
          int v129 = v32;
          unint64_t v130 = v19;
          char v85 = a6;
          uint64_t v86 = *(unsigned int *)(a3 + 800);
          memcpy((void *)(v18 + v40), (char *)a4 + 4 * *(unsigned int *)(a3 + 796), 4 * v86);
          int v87 = *(_DWORD *)(a3 + 804);
          if (v87)
          {
            BOOL v88 = *(unsigned int **)(a3 + 808);
            unint64_t v89 = (_DWORD *)(v18 + v40 + 4 * v86);
            do
            {
              unsigned int v90 = *v88++;
              *v89++ = *(_DWORD *)(a5 + 4 * v90);
              --v87;
            }
            while (v87);
          }
          v40 += 4 * v129;
          LOBYTE(a6) = v85;
          uint64_t v20 = (const void ***)(a3 + 1936);
          unint64_t v19 = v130;
        }
        if (v80)
        {
          unint64_t v91 = v19 + v40;
          *(void *)(a5 + 8368) = v91 + 8;
          a4[99].i64[0] = v91;
          uint64_t v92 = (_DWORD *)(v18 + v40);
          uint64_t v93 = *(unsigned __int16 **)(a3 + 736);
          if (*(unsigned char *)(a3 + 784))
          {
            int v94 = *(unsigned __int16 **)(a3 + 760);
            for (uint64_t j = (*(void *)(a3 + 768) - (void)v94) >> 1; j; LODWORD(j) = j - 1)
            {
              int v96 = *v94++;
              v92[v96] = *(_DWORD *)(a4->i64[v93[2 * v96]] + 4 * v93[2 * v96 + 1]);
            }
          }
          else
          {
            do
            {
              *v92++ = *(_DWORD *)(a4->i64[*v93] + 4 * v93[1]);
              v93 += 2;
              LODWORD(v80) = v80 - 1;
            }
            while (v80);
          }
        }
        goto LABEL_76;
      }
    }
    else
    {
      int v42 = v32;
      if (v28)
      {
        int v43 = v28;
        unsigned int v44 = (void *)v18;
        uint64_t v45 = v26;
        do
        {
          int v46 = *v45++;
          *v44++ = a4->i64[v46];
          --v43;
        }
        while (v43);
      }
      if (*(_DWORD *)(a3 + 872))
      {
        unsigned int v47 = *(void **)(a3 + 856);
        if (v47 != (void *)(a3 + 864))
        {
          do
          {
            *(_DWORD *)(v18 + 4 * *((unsigned int *)v47 + 7)) |= *((_DWORD *)v47 + 8);
            int8x16_t v72 = (void *)v47[1];
            if (v72)
            {
              do
              {
                uint64_t v73 = v72;
                int8x16_t v72 = (void *)*v72;
              }
              while (v72);
            }
            else
            {
              do
              {
                uint64_t v73 = (void *)v47[2];
                BOOL v13 = *v73 == (void)v47;
                unsigned int v47 = v73;
              }
              while (!v13);
            }
            unsigned int v47 = v73;
          }
          while (v73 != (void *)(a3 + 864));
        }
      }
      unsigned int v48 = (v28 + 3) & 0xFFFFFFFC;
      if (v35)
      {
        unsigned int v49 = *(_DWORD *)(a3 + 1008);
        if (v49 >= 4)
        {
          unint64_t v50 = &v26[v48];
          unsigned int v51 = v49 >> 2;
          uint64_t v52 = (_OWORD *)(v18 + 8 * v48);
          do
          {
            int v53 = *v50;
            v50 += 4;
            int v54 = &a4->i8[8 * v53];
            long long v55 = *((_OWORD *)v54 + 1);
            *uint64_t v52 = *(_OWORD *)v54;
            v52[1] = v55;
            v52 += 2;
            --v51;
          }
          while (v51);
        }
        v48 += v49;
      }
      int v32 = v42;
      int v56 = v27 - v25;
      if (v36)
      {
        unsigned int v57 = *(_DWORD *)(a3 + 1012);
        unsigned int v58 = (void *)(v18 + 8 * v48);
        if (*(unsigned char *)(a3 + 1736))
        {
          if (v57)
          {
            uint64_t v127 = (int *)(*(void *)(a3 + 640) + 4 * v48);
            do
            {
              int v128 = *v127++;
              *v58++ = a4->i64[v128];
              --v57;
            }
            while (v57);
          }
        }
        else if (v57 >= 4)
        {
          int v59 = (int *)(*(void *)(a3 + 640) + 4 * v48);
          unsigned int v60 = v57 >> 2;
          do
          {
            int v61 = *v59;
            v59 += 4;
            *unsigned int v58 = a4->i64[v61];
            v58 += 4;
            --v60;
          }
          while (v60);
        }
      }
      unsigned int v40 = 8 * v56;
      unint64_t v41 = v39 >> 2;
      if (!v25) {
        goto LABEL_42;
      }
    }
    if (v25 >= 4)
    {
      int v62 = *(uint64_t **)(a3 + 2440);
      unint64_t v63 = v25 >> 2;
      unint64_t v64 = (void *)(v18 + v40);
      do
      {
        uint64_t v65 = *v62;
        v62 += 4;
        *unint64_t v64 = v65;
        v64 += 4;
        --v63;
      }
      while (v63);
    }
    v40 += 8 * v25;
    goto LABEL_42;
  }
LABEL_76:
  unint64_t v97 = v19;
  uint64_t v98 = v12;
  char v99 = a6;
  unint64_t v100 = *v20;
  memcpy(v21, **v20, (unsigned char *)(*v20)[1] - (unsigned char *)**v20);
  if (*((unsigned char *)v100 + 200))
  {
    v101.i64[0] = v97;
    v101.i64[1] = v97 >> 5;
    *(int8x16_t *)&v21[*((unsigned int *)v100 + 51)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v21[*((unsigned int *)v100 + 51)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  int v102 = (unsigned int *)v100[22];
  for (uint64_t k = (unsigned int *)v100[23]; v102 != k; v102 += 3)
  {
    v104.i64[0] = a4->i64[v102[1]] + *v102;
    v104.i64[1] = (unint64_t)v104.i64[0] >> 5;
    *(int8x16_t *)&v21[v102[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v21[v102[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v104, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v105 = (unint64_t)&v21[v131];
  int v106 = *a1;
  LOBYTE(a6) = v99;
  uint64_t v12 = v98;
  int v107 = v20;
  unint64_t v10 = a2;
  if (*a1)
  {
    int64_t v108 = (unsigned char *)v100[1] - (unsigned char *)*v100;
    int v109 = *(_DWORD *)(a3 + 2344);
    LODWORD(v110) = *((_DWORD *)v106 + 2);
    int v111 = v110 + 1;
    if (*((_DWORD *)v106 + 3) >= (v110 + 1))
    {
      uint64_t v114 = *v106;
    }
    else
    {
      char v134 = a6;
      unsigned int v112 = -__clz(v110);
      int v132 = 1 << v112;
      unsigned int v113 = (char *)malloc_type_malloc(40 << (v112 & 0x1F), 0x10800400D7C94D2uLL);
      uint64_t v114 = v113;
      uint64_t v110 = *((unsigned int *)v106 + 2);
      if (v110)
      {
        memcpy(v113, *v106, 40 * v110);
        free(*v106);
        LODWORD(v110) = *((_DWORD *)v106 + 2);
      }
      *((_DWORD *)v106 + 3) = v132;
      *int v106 = v114;
      LOBYTE(a6) = v134;
    }
    uint64_t v115 = &v114[40 * v110];
    *(_DWORD *)uint64_t v115 = 0;
    *((void *)v115 + 1) = v105;
    *((void *)v115 + 2) = v21;
    *((void *)v115 + 3) = v108;
    *((_DWORD *)v115 + 8) = v109;
    *((_DWORD *)v106 + 2) = v111;
    uint64_t v12 = v98;
    int v107 = v20;
    unint64_t v10 = a2;
  }
  int v116 = *(_DWORD *)(a5 + 8464);
  uint64_t v117 = (char *)v107 + 28 * (a7 | (2 * a8));
  int v118 = *((_DWORD *)v117 + 316);
  uint64_t v119 = *((void *)v117 + 159);
  if ((*((_DWORD *)v117 + 320) & 7) - 1 == v116) {
    int v120 = *((_DWORD *)v117 + 320);
  }
  else {
    int v120 = ((_BYTE)v116 - 1) & 7;
  }
  unint64_t v11 = a10;
  if ((*a10 & 2) != 0) {
    uint64_t v121 = 1;
  }
  else {
    uint64_t v121 = (*a10 >> 1) & 2;
  }
  uint64_t v122 = &v10[4 * v121];
  uint64_t v123 = v122[6];
  *(void *)uint64_t v123 = *((void *)v117 + 157);
  *(_DWORD *)(v123 + 8) = (v105 >> 16) & 0xFFC00000 | v118 & 0x3FFFFF;
  *(_DWORD *)(v123 + 12) = v105 >> 6;
  *(void *)(v123 + 16) = v119;
  *(_DWORD *)(v123 + 24) = v120;
  v122[6] = v123 + 28;
LABEL_94:
  if (a6)
  {
    if ((*v11 & 2) != 0) {
      uint64_t v124 = 1;
    }
    else {
      uint64_t v124 = (*v11 >> 1) & 2;
    }
    unsigned int v125 = &v10[4 * v124];
    unsigned int v126 = (void *)v125[6];
    void *v126 = v12[374];
    v125[6] = v126 + 1;
  }
}

int8x8_t AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::emitFragmentProgramVariantAndArguments(void *a1, void *a2, uint64_t a3, void *a4, uint64x2_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, int8x8_t result, char a10)
{
  BOOL v10 = (a7 & 0xF8000000002) == 0 || a10 == 1;
  if (v10) {
    return result;
  }
  unsigned int v11 = a8;
  uint64_t v17 = *(unsigned int *)(a3 + 608);
  uint64_t v127 = *(void *)((char *)a1 + 182);
  if (v17)
  {
    unint64_t v18 = (a2[50] + 31) & 0xFFFFFFFFFFFFFFE0;
    unint64_t v19 = v18 + a2[52];
    a2[50] = v18 + v17;
  }
  else
  {
    unint64_t v19 = 0;
    unint64_t v18 = 0;
  }
  uint64_t v20 = (char *)((a2[30] + 63) & 0xFFFFFFFFFFFFFFC0);
  uint64_t v130 = a2[32];
  a2[30] = &v20[*(_DWORD *)(*(void *)(a3 + 1936) + 8) - **(_DWORD **)(a3 + 1936)];
  unint64_t v21 = *(void *)(a3 + 840) - *(void *)(a3 + 832);
  int v22 = *(_DWORD *)(a3 + 792);
  if (v21) {
    int v23 = *(_DWORD *)(a3 + 792) & 1;
  }
  else {
    int v23 = 0;
  }
  if (v17)
  {
    unint64_t v24 = *(unsigned int *)(a3 + 1016);
    unint64_t v25 = *(int **)(a3 + 640);
    uint64_t v26 = (*(void *)(a3 + 648) - (void)v25) >> 2;
    int v27 = *(_DWORD *)(a3 + 1004);
    uint64_t v28 = (*(void *)(a3 + 696) - *(void *)(a3 + 688)) >> 2;
    uint64_t v29 = *(void *)(a3 + 672);
    uint64_t v30 = *(void *)(a3 + 664);
    int v31 = *(_DWORD *)(a3 + 804) + *(_DWORD *)(a3 + 800);
    uint64_t v32 = *(void *)(a3 + 744);
    uint64_t v33 = *(void *)(a3 + 736);
    int v34 = *(unsigned __int8 *)(a3 + 1048);
    int v35 = *(unsigned __int8 *)(a3 + 1049);
    if (*(unsigned char *)(a3 + 1048)) {
      a5[58] = vaddw_u32((uint64x2_t)vdupq_n_s64(v19), *(uint32x2_t *)(a3 + 612));
    }
    if (v35) {
      a5[60].i64[0] = v19 + *(unsigned int *)(a3 + 632);
    }
    uint64_t v36 = 8 * (v28 + v26);
    int v37 = v23 + v22;
    if (v31) {
      a5[64].i64[0] = v36 + v19 + 4 * (v37 + ((v21 >> 1) & 0xFFFFFFFE));
    }
    unint64_t v38 = v29 - v30;
    if (v26 == v24)
    {
      unsigned int v39 = 0;
      unint64_t v40 = v38 >> 2;
      if (!v24)
      {
LABEL_41:
        unint64_t v65 = v21 >> 2;
        if (v28)
        {
          a5[98].i64[1] = v19 + v39;
          unint64_t v66 = (void *)(v18 + v39);
          int v67 = *(unsigned __int16 **)(a3 + 688);
          if (*(unsigned char *)(a3 + 784))
          {
            unsigned int v68 = *(unsigned __int16 **)(a3 + 712);
            for (uint64_t i = (*(void *)(a3 + 720) - (void)v68) >> 1; i; LODWORD(i) = i - 1)
            {
              int v70 = *v68++;
              v66[v70] = *(void *)(a5->i64[v67[2 * v70]] + 8 * v67[2 * v70 + 1]);
            }
          }
          else
          {
            int v73 = v28;
            do
            {
              *v66++ = *(void *)(a5->i64[*v67] + 8 * v67[1]);
              v67 += 2;
              --v73;
            }
            while (v73);
          }
          v39 += 8 * v28;
        }
        unint64_t v74 = v32 - v33;
        if (v40)
        {
          unint64_t v75 = (_DWORD *)(v18 + v39);
          *(void *)(a6 + 7216) = v19 + v39 + 8;
          unint64_t v76 = *(unsigned int **)(a3 + 664);
          int v77 = v40;
          do
          {
            unsigned int v78 = *v76++;
            *v75++ = *(_DWORD *)(a6 + 4 * v78);
            --v77;
          }
          while (v77);
          v39 += 4 * v40;
        }
        unint64_t v79 = v74 >> 2;
        if (v65)
        {
          int v80 = v36 + 4 * v37;
          int v81 = (void *)(v18 + (v80 & 0xFFFFFFFC));
          int v82 = *(int **)(a3 + 832);
          do
          {
            int v83 = *v82++;
            *v81++ = a5->i64[v83];
            LODWORD(v65) = v65 - 1;
          }
          while (v65);
          unsigned int v39 = v80 + 8 * (v21 >> 2);
        }
        if (v31)
        {
          int v126 = v31;
          uint64_t v84 = *(unsigned int *)(a3 + 800);
          memcpy((void *)(v18 + v39), (char *)a5 + 4 * *(unsigned int *)(a3 + 796), 4 * v84);
          int v85 = *(_DWORD *)(a3 + 804);
          if (v85)
          {
            uint64_t v86 = *(unsigned int **)(a3 + 808);
            int v87 = (_DWORD *)(v18 + v39 + 4 * v84);
            do
            {
              unsigned int v88 = *v86++;
              *v87++ = *(_DWORD *)(a6 + 4 * v88);
              --v85;
            }
            while (v85);
          }
          v39 += 4 * v126;
          unsigned int v11 = a8;
        }
        if (v79)
        {
          unint64_t v89 = v19 + v39;
          *(void *)(a6 + 7216) = v89 + 8;
          a5[99].i64[0] = v89;
          unsigned int v90 = (_DWORD *)(v18 + v39);
          unint64_t v91 = *(unsigned __int16 **)(a3 + 736);
          if (*(unsigned char *)(a3 + 784))
          {
            uint64_t v92 = *(unsigned __int16 **)(a3 + 760);
            for (uint64_t j = (*(void *)(a3 + 768) - (void)v92) >> 1; j; LODWORD(j) = j - 1)
            {
              int v94 = *v92++;
              v90[v94] = *(_DWORD *)(a5->i64[v91[2 * v94]] + 4 * v91[2 * v94 + 1]);
            }
          }
          else
          {
            do
            {
              *v90++ = *(_DWORD *)(a5->i64[*v91] + 4 * v91[1]);
              v91 += 2;
              LODWORD(v79) = v79 - 1;
            }
            while (v79);
          }
        }
        goto LABEL_75;
      }
    }
    else
    {
      int v41 = v31;
      if (v27)
      {
        int v42 = v27;
        int v43 = (void *)v18;
        unsigned int v44 = v25;
        do
        {
          int v45 = *v44++;
          *v43++ = a5->i64[v45];
          --v42;
        }
        while (v42);
      }
      if (*(_DWORD *)(a3 + 872))
      {
        int v46 = *(void **)(a3 + 856);
        if (v46 != (void *)(a3 + 864))
        {
          do
          {
            *(_DWORD *)(v18 + 4 * *((unsigned int *)v46 + 7)) |= *((_DWORD *)v46 + 8);
            int v71 = (void *)v46[1];
            if (v71)
            {
              do
              {
                int8x16_t v72 = v71;
                int v71 = (void *)*v71;
              }
              while (v71);
            }
            else
            {
              do
              {
                int8x16_t v72 = (void *)v46[2];
                BOOL v10 = *v72 == (void)v46;
                int v46 = v72;
              }
              while (!v10);
            }
            int v46 = v72;
          }
          while (v72 != (void *)(a3 + 864));
        }
      }
      unsigned int v47 = (v27 + 3) & 0xFFFFFFFC;
      if (v34)
      {
        unsigned int v48 = *(_DWORD *)(a3 + 1008);
        if (v48 >= 4)
        {
          unsigned int v49 = &v25[v47];
          unsigned int v50 = v48 >> 2;
          unsigned int v51 = (_OWORD *)(v18 + 8 * v47);
          do
          {
            int v52 = *v49;
            v49 += 4;
            int v53 = &a5->i8[8 * v52];
            long long v54 = *((_OWORD *)v53 + 1);
            *unsigned int v51 = *(_OWORD *)v53;
            v51[1] = v54;
            v51 += 2;
            --v50;
          }
          while (v50);
        }
        v47 += v48;
      }
      int v31 = v41;
      int v55 = v26 - v24;
      if (v35)
      {
        unsigned int v56 = *(_DWORD *)(a3 + 1012);
        unsigned int v57 = (void *)(v18 + 8 * v47);
        if (*(unsigned char *)(a3 + 1736))
        {
          if (v56)
          {
            uint64_t v124 = (int *)(*(void *)(a3 + 640) + 4 * v47);
            do
            {
              int v125 = *v124++;
              *v57++ = a5->i64[v125];
              --v56;
            }
            while (v56);
          }
        }
        else if (v56 >= 4)
        {
          unsigned int v58 = (int *)(*(void *)(a3 + 640) + 4 * v47);
          unsigned int v59 = v56 >> 2;
          do
          {
            int v60 = *v58;
            v58 += 4;
            *unsigned int v57 = a5->i64[v60];
            v57 += 4;
            --v59;
          }
          while (v59);
        }
      }
      unsigned int v39 = 8 * v55;
      unint64_t v40 = v38 >> 2;
      if (!v24) {
        goto LABEL_41;
      }
    }
    if (v24 >= 4)
    {
      int v61 = *(uint64_t **)(a3 + 2440);
      unint64_t v62 = v24 >> 2;
      unint64_t v63 = (void *)(v18 + v39);
      do
      {
        uint64_t v64 = *v61;
        v61 += 4;
        *unint64_t v63 = v64;
        v63 += 4;
        --v62;
      }
      while (v62);
    }
    v39 += 8 * v24;
    goto LABEL_41;
  }
LABEL_75:
  uint64_t v95 = *(void *)(a3 + 1936);
  memcpy(v20, *(const void **)v95, *(void *)(v95 + 8) - *(void *)v95);
  if (*(unsigned char *)(v95 + 200))
  {
    v96.i64[0] = v19;
    v96.i64[1] = v19 >> 5;
    *(int8x16_t *)&v20[*(unsigned int *)(v95 + 204)] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[*(unsigned int *)(v95 + 204)], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v96, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  unint64_t v97 = *(unsigned int **)(v95 + 176);
  for (uint64_t k = *(unsigned int **)(v95 + 184); v97 != k; v97 += 3)
  {
    v99.i64[0] = a5->i64[v97[1]] + *v97;
    v99.i64[1] = (unint64_t)v99.i64[0] >> 5;
    *(int8x16_t *)&v20[v97[2]] = vbslq_s8((int8x16_t)xmmword_242EA7D10, *(int8x16_t *)&v20[v97[2]], (int8x16_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v99, (int8x16_t)xmmword_242EA7CF0), (uint8x16_t)xmmword_242EA7D00));
  }
  if (!*(_DWORD *)(v95 + 240)) {
    *(void *)&v20[*(unsigned __int16 *)(v95 + 244)] = v127;
  }
  unint64_t v100 = (unint64_t)&v20[v130];
  int8x16_t v101 = (char **)*a1;
  if (*a1)
  {
    uint64_t v102 = *(void *)(v95 + 8) - *(void *)v95;
    int v103 = *(_DWORD *)(a3 + 2344);
    LODWORD(v104) = *((_DWORD *)v101 + 2);
    int v105 = v104 + 1;
    if (*((_DWORD *)v101 + 3) >= (v104 + 1))
    {
      uint64_t v110 = *v101;
    }
    else
    {
      unsigned int v129 = v11;
      int v106 = a4;
      unsigned int v107 = -__clz(v104);
      int v108 = 1 << v107;
      int v109 = (char *)malloc_type_malloc(40 << (v107 & 0x1F), 0x10800400D7C94D2uLL);
      uint64_t v110 = v109;
      uint64_t v104 = *((unsigned int *)v101 + 2);
      if (v104)
      {
        memcpy(v109, *v101, 40 * v104);
        free(*v101);
        LODWORD(v104) = *((_DWORD *)v101 + 2);
      }
      *((_DWORD *)v101 + 3) = v108;
      *int8x16_t v101 = v110;
      a4 = v106;
      unsigned int v11 = v129;
    }
    int v111 = &v110[40 * v104];
    *(_DWORD *)int v111 = 1;
    *((void *)v111 + 1) = v100;
    *((void *)v111 + 2) = v20;
    *((void *)v111 + 3) = v102;
    *((_DWORD *)v111 + 8) = v103;
    *((_DWORD *)v101 + 2) = v105;
  }
  int v112 = *(_DWORD *)(*a4 + 3216);
  int v113 = *(_DWORD *)(*a4 + 3228);
  int v114 = *(_DWORD *)(*a4 + 3240);
  int v115 = (v100 >> 16) & 0xFFC00000 | *(_DWORD *)(*a4 + 3232) & 0x3FFFFF;
  int8x8_t v116 = vand_s8(*(int8x8_t *)(*a4 + 3220), (int8x8_t)0x3FFFF0000);
  uint64_t v117 = a4[401];
  if (v117) {
    uint64_t v118 = v117 + 8 * v11;
  }
  else {
    uint64_t v118 = *(void *)(*a4 + 3288) + 8 * v11;
  }
  unint64_t v119 = *(void *)(v118 + 32);
  v120.i64[0] = HIDWORD(v119);
  v120.i64[1] = v119;
  uint64_t result = vorr_s8(v116, vand_s8((int8x8_t)vmovn_s64(v120), (int8x8_t)0xFFFFFFFC0000FFFFLL));
  uint64_t v121 = a2[126];
  uint64_t v122 = a2[128] + v121;
  a2[126] = v121 + 28;
  *(_DWORD *)uint64_t v121 = v112;
  *(int8x8_t *)(v121 + 4) = result;
  *(_DWORD *)(v121 + 12) = v113;
  *(_DWORD *)(v121 + 16) = v115;
  *(_DWORD *)(v121 + 20) = v100 >> 6;
  *(_DWORD *)(v121 + 24) = v114;
  uint64_t v123 = (unint64_t *)a2[6];
  *uint64_t v123 = __ROR8__(v122, 32) & 0xFFFFFFFC000000FFLL | 0x700;
  a2[6] = v123 + 1;
  return result;
}

uint64_t AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveVertexBarrier(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  if ((a2 & 2) != 0) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = (a2 >> 1) & 2;
  }
  uint64_t v4 = result + 32 * v3;
  uint64_t v7 = *(unint64_t **)(v4 + 48);
  uint64_t v6 = (void *)(v4 + 48);
  uint64_t v5 = v7;
  uint64_t v8 = v6 - 1;
  uint64_t v9 = v6 + 1;
  if (a2)
  {
    unsigned int v11 = (unint64_t *)*v9;
    unint64_t v10 = *v9 - (void)v5;
  }
  else
  {
    unint64_t v10 = 0;
    unsigned int v11 = v5;
  }
  uint64_t v12 = (char *)v11 + 4;
  if ((unint64_t)v12 > *v8)
  {
    uint64_t result = AGX::DataBufferAllocator<34ul>::growNoInline(result, v3, 0);
    if (result)
    {
      unint64_t v13 = *v6 + v10 + 4;
      if (v13 > *v8) {
        abort();
      }
      *uint64_t v9 = v13;
      uint64_t result = AGX::DataBufferAllocator<34ul>::getGPUAddress(v2, v3);
      *uint64_t v5 = __ROR8__(result, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    *uint64_t v9 = (unint64_t)v12;
  }
  return result;
}

void *AGX::RenderUSCStateLoader<AGX::HAL200::Encoders,AGX::HAL200::Classes>::reserveBatchingDrawDataBufferSpace(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[7];
  if ((unint64_t)(v4 + 212) > result[5])
  {
    int v15 = (unint64_t *)result[6];
    uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(result, 0, 0);
    if (result)
    {
      uint64_t v16 = v3[6];
      unint64_t v17 = v16 + v4 - (void)v15 + 212;
      if (v17 > v3[5]) {
        goto LABEL_24;
      }
      v3[7] = v17;
      *int v15 = __ROR8__(v3[8] + v16, 32) & 0xFFFFFFFF000000FFLL | 0x80000000;
    }
  }
  else
  {
    result[7] = v4 + 212;
  }
  uint64_t v5 = *(unsigned int *)(a2 + 608);
  uint64_t v6 = v3[46];
  if (!v6)
  {
    uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 10, 0);
    if (!result) {
      goto LABEL_24;
    }
    uint64_t v6 = v3[46];
  }
  uint64_t v7 = v5 + 31;
  uint64_t v8 = v3[47];
  unint64_t v9 = v8 + v7;
  if ((unint64_t)(v8 + v7) <= v3[45])
  {
LABEL_5:
    v3[47] = v9;
    goto LABEL_6;
  }
  uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 10, 0);
  if (result)
  {
    unint64_t v9 = v3[46] + v8 - v6 + v7;
    if (v9 > v3[45]) {
      goto LABEL_24;
    }
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v10 = v3[127];
  unint64_t v11 = v10 + 636;
  if ((unint64_t)(v10 + 636) <= v3[125])
  {
LABEL_7:
    v3[127] = v11;
    goto LABEL_8;
  }
  uint64_t v18 = v3[126];
  uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 30, 0);
  if (result)
  {
    unint64_t v11 = v3[126] + v10 - v18 + 636;
    if (v11 > v3[125]) {
      goto LABEL_24;
    }
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v12 = (*(_DWORD *)(*(void *)(a2 + 1936) + 8) - **(_DWORD **)(a2 + 1936)) + 63;
  uint64_t v13 = v3[27];
  unint64_t v14 = v13 + v12;
  if ((unint64_t)(v13 + v12) <= v3[25])
  {
LABEL_9:
    v3[27] = v14;
    return result;
  }
  uint64_t v19 = v3[26];
  uint64_t result = (void *)AGX::DataBufferAllocator<34ul>::growNoInline(v3, 5, 0);
  if (result)
  {
    unint64_t v14 = v3[26] + v13 - v19 + v12;
    if (v14 <= v3[25]) {
      goto LABEL_9;
    }
LABEL_24:
    abort();
  }
  return result;
}

void sub_242B8EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t v23 = STACK[0x868];
  if ((uint64_t *)STACK[0x868] != &a22 && v23) {
    MEMORY[0x24566ED70](v23, 0x1000C8000313F17);
  }
  unint64_t v24 = STACK[0xC80];
  if ((unint64_t *)STACK[0xC80] != &STACK[0x880])
  {
    if (v24) {
      MEMORY[0x24566ED70](v24, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

void AGX::PassiveResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindPassiveResource(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = *(void *)(a1 + 32);
  if (v5 == 16 && *(void *)(a1 + 72) && *(_DWORD *)(a1 + 64) > *(_DWORD *)(a2 + 16)) {
    return;
  }
  unint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *(void *)a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)(a1 + 8) + 8 * v9);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (v11)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v11[1];
            if (v12 == v6)
            {
              if (v11[2] == v6) {
                goto LABEL_74;
              }
            }
            else if ((v12 & (v7 - 1)) != v9)
            {
              goto LABEL_24;
            }
            unint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_24;
            }
          }
        }
        do
        {
          unint64_t v13 = v11[1];
          if (v13 == v6)
          {
            if (v11[2] == v6)
            {
LABEL_74:
              *((_DWORD *)v11 + 9) |= *(_DWORD *)(a2 + 20);
              return;
            }
          }
          else
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
            if (v13 != v9) {
              break;
            }
          }
          unint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_24:
  if (v5 <= 0xE)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 304) + 1;
    *(_DWORD *)(a1 + 304) = v14;
    if (v14 >= 2)
    {
      while (1)
      {
        unsigned int v15 = v14 >> 1;
        uint64_t v16 = a1 + 16 * (v14 >> 1);
        unsigned int v18 = *(_DWORD *)(v16 + 48);
        unint64_t v17 = (_OWORD *)(v16 + 48);
        if (*(_DWORD *)(a2 + 16) >= v18) {
          break;
        }
        *(_OWORD *)(a1 + 16 * v14 + 48) = *v17;
        BOOL v19 = v14 > 3;
        v14 >>= 1;
        if (!v19) {
          goto LABEL_34;
        }
      }
      unsigned int v15 = v14;
LABEL_34:
      unint64_t v6 = *(void *)a2;
      unsigned int v14 = v15;
    }
    uint64_t v23 = a1 + 16 * v14;
    *(void *)(v23 + 56) = v6;
    *(_DWORD *)(v23 + 48) = *(_DWORD *)(a2 + 16);
    if (!v7) {
      goto LABEL_111;
    }
LABEL_36:
    uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v7 <= v6) {
        unint64_t v2 = v6 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
    unint64_t v25 = *(void **)(*(void *)(a1 + 8) + 8 * v2);
    if (v25)
    {
      uint64_t v26 = (void *)*v25;
      if (v26)
      {
        if (v24.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v28 = v26[1];
            if (v28 == v6)
            {
              if (v26[2] == v6) {
                return;
              }
            }
            else if ((v28 & (v7 - 1)) != v2)
            {
              goto LABEL_111;
            }
            uint64_t v26 = (void *)*v26;
            if (!v26) {
              goto LABEL_111;
            }
          }
        }
        while (1)
        {
          unint64_t v27 = v26[1];
          if (v27 == v6)
          {
            if (v26[2] == v6) {
              return;
            }
          }
          else
          {
            if (v27 >= v7) {
              v27 %= v7;
            }
            if (v27 != v2) {
              goto LABEL_111;
            }
          }
          uint64_t v26 = (void *)*v26;
          if (!v26) {
            goto LABEL_111;
          }
        }
      }
    }
    goto LABEL_111;
  }
  unint64_t v20 = *(void *)(a1 + 56);
  if (!v20 || !v7) {
    goto LABEL_102;
  }
  uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] > 1uLL)
  {
    unint64_t v22 = *(void *)(a1 + 56);
    if (v7 <= v20) {
      unint64_t v22 = v20 % v7;
    }
  }
  else
  {
    unint64_t v22 = (v7 - 1) & v20;
  }
  uint64_t v29 = *(void *)(a1 + 8);
  uint64_t v30 = *(void ***)(v29 + 8 * v22);
  if (!v30) {
    goto LABEL_102;
  }
  int v31 = *v30;
  if (!*v30) {
    goto LABEL_102;
  }
  unint64_t v32 = v7 - 1;
  if (v21.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v33 = v31[1];
      if (v33 == v20)
      {
        if (v31[2] == v20) {
          goto LABEL_75;
        }
      }
      else if ((v33 & v32) != v22)
      {
        goto LABEL_102;
      }
      int v31 = (void *)*v31;
      if (!v31) {
        goto LABEL_102;
      }
    }
  }
  while (1)
  {
    unint64_t v34 = v31[1];
    if (v34 == v20) {
      break;
    }
    if (v34 >= v7) {
      v34 %= v7;
    }
    if (v34 != v22) {
      goto LABEL_102;
    }
LABEL_68:
    int v31 = (void *)*v31;
    if (!v31) {
      goto LABEL_102;
    }
  }
  if (v31[2] != v20) {
    goto LABEL_68;
  }
LABEL_75:
  if (v21.u32[0] > 1uLL)
  {
    if (v7 <= v20) {
      v20 %= v7;
    }
  }
  else
  {
    v20 &= v32;
  }
  int v35 = *(void **)(v29 + 8 * v20);
  do
  {
    uint64_t v36 = v35;
    int v35 = (void *)*v35;
  }
  while (v35 != v31);
  if (v36 == (void *)(a1 + 24)) {
    goto LABEL_92;
  }
  unint64_t v37 = v36[1];
  if (v21.u32[0] > 1uLL)
  {
    if (v37 >= v7) {
      v37 %= v7;
    }
  }
  else
  {
    v37 &= v32;
  }
  if (v37 != v20)
  {
LABEL_92:
    if (!*v31) {
      goto LABEL_93;
    }
    unint64_t v38 = *(void *)(*v31 + 8);
    if (v21.u32[0] > 1uLL)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v32;
    }
    if (v38 != v20) {
LABEL_93:
    }
      *(void *)(v29 + 8 * v20) = 0;
  }
  uint64_t v39 = *v31;
  if (*v31)
  {
    unint64_t v40 = *(void *)(v39 + 8);
    if (v21.u32[0] > 1uLL)
    {
      if (v40 >= v7) {
        v40 %= v7;
      }
    }
    else
    {
      v40 &= v32;
    }
    if (v40 != v20)
    {
      *(void *)(*(void *)(a1 + 8) + 8 * v40) = v36;
      uint64_t v39 = *v31;
    }
  }
  *uint64_t v36 = v39;
  *(void *)(a1 + 32) = v5 - 1;
  operator delete(v31);
LABEL_102:
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 64);
  *(void *)(a1 + 72) = *(void *)a2;
  unsigned int v41 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 64) = v41;
  uint64_t v77 = *(void *)(a1 + 68);
  int v78 = *(_DWORD *)(a1 + 76);
  unsigned int v42 = 1;
  unsigned int v43 = 2;
  while (1)
  {
    uint64_t v44 = *(_DWORD *)(a1 + 48 + 16 * v43) <= *(_DWORD *)(a1 + 48 + 16 * (v43 | 1)) ? v43 : v43 | 1;
    int v45 = (unsigned int *)(a1 + 48 + 16 * v44);
    if (v41 <= *v45) {
      break;
    }
    *(_OWORD *)(a1 + 16 * v42 + 48) = *(_OWORD *)v45;
    unsigned int v43 = 2 * v44;
    unsigned int v42 = v44;
    if ((2 * v44) >= 0x10) {
      goto LABEL_110;
    }
  }
  uint64_t v44 = v42;
LABEL_110:
  uint64_t v46 = a1 + 16 * v44;
  *(_DWORD *)(v46 + 48) = v41;
  *(void *)(v46 + 52) = v77;
  *(_DWORD *)(v46 + 60) = v78;
  unint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7) {
    goto LABEL_36;
  }
LABEL_111:
  unsigned int v47 = operator new(0x28uLL);
  *unsigned int v47 = 0;
  v47[1] = v6;
  *((_OWORD *)v47 + 1) = *(_OWORD *)a2;
  v47[4] = *(void *)(a2 + 16);
  float v48 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v49 = *(float *)(a1 + 40);
  if (!v7 || (float)(v49 * (float)v7) < v48)
  {
    BOOL v50 = 1;
    if (v7 >= 3) {
      BOOL v50 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v51 = v50 | (2 * v7);
    unint64_t v52 = vcvtps_u32_f32(v48 / v49);
    if (v51 <= v52) {
      size_t prime = v52;
    }
    else {
      size_t prime = v51;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 16);
    }
    if (prime > v7)
    {
LABEL_123:
      if (prime >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      long long v54 = operator new(8 * prime);
      int v55 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v54;
      if (v55) {
        operator delete(v55);
      }
      uint64_t v56 = 0;
      *(void *)(a1 + 16) = prime;
      do
        *(void *)(*(void *)(a1 + 8) + 8 * v56++) = 0;
      while (prime != v56);
      uint64_t v58 = a1 + 24;
      unsigned int v57 = *(void **)(a1 + 24);
      if (!v57) {
        goto LABEL_147;
      }
      size_t v59 = v57[1];
      size_t v60 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        size_t v61 = v59 & v60;
        *(void *)(*(void *)(a1 + 8) + 8 * v61) = v58;
        for (uint64_t i = (void *)*v57; *v57; uint64_t i = (void *)*v57)
        {
          size_t v63 = i[1] & v60;
          if (v63 == v61)
          {
            unsigned int v57 = i;
          }
          else
          {
            uint64_t v64 = *(void *)(a1 + 8);
            if (*(void *)(v64 + 8 * v63))
            {
              *unsigned int v57 = *i;
              uint64_t v65 = 8 * v63;
              void *i = **(void **)(*(void *)(a1 + 8) + v65);
              **(void **)(*(void *)(a1 + 8) + v65) = i;
            }
            else
            {
              *(void *)(v64 + 8 * v63) = v57;
              unsigned int v57 = i;
              size_t v61 = v63;
            }
          }
        }
        goto LABEL_147;
      }
      if (v59 >= prime) {
        v59 %= prime;
      }
      *(void *)(*(void *)(a1 + 8) + 8 * v59) = v58;
      unsigned int v69 = (void *)*v57;
      if (!*v57)
      {
LABEL_147:
        unint64_t v7 = prime;
        goto LABEL_148;
      }
      while (2)
      {
        size_t v71 = v69[1];
        if (v71 >= prime) {
          v71 %= prime;
        }
        if (v71 != v59)
        {
          uint64_t v72 = *(void *)(a1 + 8);
          if (!*(void *)(v72 + 8 * v71))
          {
            *(void *)(v72 + 8 * v71) = v57;
LABEL_152:
            unsigned int v57 = v69;
            unsigned int v69 = (void *)*v69;
            size_t v59 = v71;
            if (!v69) {
              goto LABEL_147;
            }
            continue;
          }
          *unsigned int v57 = *v69;
          uint64_t v70 = 8 * v71;
          *unsigned int v69 = **(void **)(*(void *)(a1 + 8) + v70);
          **(void **)(*(void *)(a1 + 8) + v70) = v69;
          unsigned int v69 = v57;
        }
        break;
      }
      size_t v71 = v59;
      goto LABEL_152;
    }
    if (prime < v7)
    {
      unint64_t v66 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v7 < 3 || (uint8x8_t v67 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v67.i16[0] = vaddlv_u8(v67), v67.u32[0] > 1uLL))
      {
        unint64_t v66 = std::__next_prime(v66);
      }
      else
      {
        uint64_t v68 = 1 << -(char)__clz(v66 - 1);
        if (v66 >= 2) {
          unint64_t v66 = v68;
        }
      }
      if (prime <= v66) {
        size_t prime = v66;
      }
      if (prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 16);
      }
      else
      {
        if (prime) {
          goto LABEL_123;
        }
        unint64_t v76 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        if (v76) {
          operator delete(v76);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 16) = 0;
      }
    }
LABEL_148:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v73 = *(void *)(a1 + 8);
  unint64_t v74 = *(void **)(v73 + 8 * v2);
  if (v74)
  {
    *unsigned int v47 = *v74;
    goto LABEL_169;
  }
  *unsigned int v47 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v47;
  *(void *)(v73 + 8 * v2) = a1 + 24;
  if (*v47)
  {
    unint64_t v75 = *(void *)(*v47 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v75 >= v7) {
        v75 %= v7;
      }
    }
    else
    {
      v75 &= v7 - 1;
    }
    unint64_t v74 = (void *)(*(void *)(a1 + 8) + 8 * v75);
LABEL_169:
    *unint64_t v74 = v47;
  }
  ++*(void *)(a1 + 32);
}

void sub_242B8F4AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 ResourceTracker<_ResourceGroupBinding>::addResource(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unint64_t v8 = a3;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v9);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    if (result.n128_u32[0] > 1uLL)
    {
      unint64_t v11 = a3;
      if (v9 <= a3) {
        unint64_t v11 = a3 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & a3;
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v11);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (v13)
      {
        if (result.n128_u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v15 = v13[1];
            if (v15 == a3)
            {
              if (*((_DWORD *)v13 + 4) == a3) {
                goto LABEL_61;
              }
            }
            else if ((v15 & (v9 - 1)) != v11)
            {
              goto LABEL_22;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == a3)
          {
            if (*((_DWORD *)v13 + 4) == a3)
            {
LABEL_61:
              *((_DWORD *)v13 + 11) |= a4;
              return result;
            }
          }
          else
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
            if (v14 != v11) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
LABEL_22:
    if (result.n128_u32[0] > 1uLL)
    {
      unint64_t v4 = a3;
      if (v9 <= a3) {
        unint64_t v4 = a3 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a3;
    }
    uint64_t v16 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v16)
    {
      unint64_t v17 = (char *)*v16;
      if (*v16)
      {
        if (result.n128_u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v17 + 1);
            if (v19 == a3)
            {
              if (*((_DWORD *)v17 + 4) == a3) {
                goto LABEL_80;
              }
            }
            else if ((v19 & (v9 - 1)) != v4)
            {
              goto LABEL_41;
            }
            unint64_t v17 = *(char **)v17;
            if (!v17) {
              goto LABEL_41;
            }
          }
        }
        do
        {
          unint64_t v18 = *((void *)v17 + 1);
          if (v18 == a3)
          {
            if (*((_DWORD *)v17 + 4) == a3) {
              goto LABEL_80;
            }
          }
          else
          {
            if (v18 >= v9) {
              v18 %= v9;
            }
            if (v18 != v4) {
              break;
            }
          }
          unint64_t v17 = *(char **)v17;
        }
        while (v17);
      }
    }
  }
LABEL_41:
  unint64_t v17 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v17 = 0;
  *((void *)v17 + 1) = v8;
  *((_DWORD *)v17 + 4) = a3;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v9 && (float)(v21 * (float)v9) >= v20)
  {
    unint64_t v8 = v4;
  }
  else
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_54;
    }
    if (prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v9) {
LABEL_54:
      }
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        v8 %= v9;
      }
    }
    else
    {
      unint64_t v8 = (v9 - 1) & v8;
    }
  }
  uint64_t v29 = *(void *)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v8);
  if (v30)
  {
    *(void *)unint64_t v17 = *v30;
  }
  else
  {
    *(void *)unint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v17;
    *(void *)(v29 + 8 * v8) = a1 + 16;
    if (!*(void *)v17) {
      goto LABEL_79;
    }
    unint64_t v31 = *(void *)(*(void *)v17 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v31 >= v9) {
        v31 %= v9;
      }
    }
    else
    {
      v31 &= v9 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
  }
  *uint64_t v30 = v17;
LABEL_79:
  ++*(void *)(a1 + 24);
LABEL_80:
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(v17 + 40) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(v17 + 24) = result;
  return result;
}

void sub_242B8F86C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResource(void *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = result[5];
  if (!*(unsigned char *)(v4 + 480)) {
    goto LABEL_9;
  }
  uint64_t v5 = result[6];
  uint64_t v6 = result[7];
  uint64_t v7 = result[8];
  uint64_t v8 = result[9];
  if (!(v6 | v7 | v8 | v5)) {
    goto LABEL_9;
  }
  unint64_t v9 = (void *)(a2 + (int)*MEMORY[0x263F4B188]);
  if ((*((unsigned char *)v9 + 23) & 0x10) != 0) {
    unint64_t v9 = (void *)*v9;
  }
  uint64_t v10 = (uint64_t *)*v9;
  if (*v9 && (v12 = *v10, uint64_t v11 = v10[1], v13 = v11 | *v10, v14 = v10[2], v15 = v10[3], v13 | v14 | v15))
  {
    unint64_t v16 = v8 & v15;
    if (v16)
    {
      uint64_t v17 = 3;
LABEL_16:
      float v21 = &result[v17];
      char v22 = __clz(v16) ^ 0x3F;
      unint64_t v23 = v21[14];
      uint64_t v18 = (v21[10] >> v22) & 1;
      uint64_t v19 = (v23 >> v22) & 1;
      goto LABEL_10;
    }
    unint64_t v16 = v7 & v14;
    if ((v7 & v14) != 0)
    {
      uint64_t v17 = 2;
      goto LABEL_16;
    }
    unint64_t v16 = v6 & v11;
    if ((v6 & v11) != 0)
    {
      uint64_t v17 = 1;
      goto LABEL_16;
    }
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    unint64_t v16 = v12 & v5;
    if ((v12 & v5) != 0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_9:
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
LABEL_10:
  float v20 = (uint64_t *)(v4 + 16 * a3 + 8 * (a4 > 0x3F));
  *float v20 = *v20 & ~(1 << a4) | (v18 << a4);
  v20[20] = v20[20] & ~(1 << a4) | (v19 << a4);
  v20[40] &= ~(1 << a4);
  return result;
}

void AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindResource(uint64_t a1, uint64_t *a2, unsigned int a3, unsigned int a4, int a5)
{
  unint64_t v5 = a2[2];
  if ((v5 & 0x7FFFFFFF80) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v6 + 480))
    {
      uint64_t v7 = (void *)(v6 + 16 * a3 + 8 * (a4 > 0x3F));
      BOOL v8 = (*v7 & (1 << a4)) != 0;
      if (((v7[20] | *v7) & (1 << a4)) != 0)
      {
        unint64_t v9 = (a2[1] + 127) & 0xFFFFFFFFFFFFFF80;
        uint64_t v10 = a2;
        if ((v5 & 0x1000000000000000) != 0) {
          uint64_t v10 = (uint64_t *)*a2;
        }
        uint64_t v12 = v10;
        unint64_t v13 = v9;
        int v14 = v5 >> 7;
        int v15 = a5;
        BOOL v16 = v8;
        ResourceTracker<_ResourceGroupBinding>::addResource(a1, (uint64_t)&v12, *((_DWORD *)a2 + 12), a5);
      }
    }
    else if ((a5 & 0x82A) != 0)
    {
      unint64_t v11 = (a2[1] + 127) & 0xFFFFFFFFFFFFFF80;
      uint64_t v12 = a2;
      unint64_t v13 = v11;
      int v14 = v5 >> 7;
      int v15 = a5;
      AGX::PassiveResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindPassiveResource(a1 + 160, (uint64_t)&v12);
    }
  }
}

double AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindResource(void *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a2 + (int)*MEMORY[0x263F4B188];
  unint64_t v4 = *(void *)(v3 + 16);
  if ((v4 & 0x7FFFFFFF80) != 0 && (v4 >> 61) - 5 >= 0xFFFFFFFC)
  {
    if (*(unsigned char *)(a1[5] + 480) && (uint64_t v6 = a1[6], v7 = a1[7], v8 = a1[8], v9 = a1[9], v7 | v8 | v9 | v6))
    {
      uint64_t v10 = (uint64_t **)(a2 + (int)*MEMORY[0x263F4B188]);
      if ((v4 & 0x1000000000000000) != 0) {
        uint64_t v10 = *(uint64_t ***)v3;
      }
      unint64_t v11 = *v10;
      if (*v10)
      {
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        uint64_t v14 = v13 | *v11;
        uint64_t v15 = v11[2];
        uint64_t v16 = v11[3];
        if (v14 | v15 | v16)
        {
          unint64_t v17 = v9 & v16;
          if (v17)
          {
            uint64_t v18 = 3;
          }
          else
          {
            unint64_t v17 = v8 & v15;
            if ((v8 & v15) != 0)
            {
              uint64_t v18 = 2;
            }
            else
            {
              unint64_t v17 = v7 & v13;
              if ((v7 & v13) != 0)
              {
                uint64_t v18 = 1;
              }
              else
              {
                unint64_t v17 = v12 & v6;
                if ((v12 & v6) == 0) {
                  return result;
                }
                uint64_t v18 = 0;
              }
            }
          }
          char v21 = __clz(v17);
          char v22 = &a1[v18];
          uint64_t v23 = v22[10];
          uint64_t v24 = 1 << (v21 ^ 0x3Fu);
          BOOL v25 = (v24 & v23) != 0;
          if ((v24 & (v22[14] | v23)) != 0)
          {
            unint64_t v26 = (*(void *)(v3 + 8) + 127) & 0xFFFFFFFFFFFFFF80;
            uint8x8_t v27 = (uint64_t **)v3;
            if ((v4 & 0x1000000000000000) != 0) {
              uint8x8_t v27 = *(uint64_t ***)v3;
            }
            uint64_t v28 = v27;
            unint64_t v29 = v26;
            int v30 = v4 >> 7;
            int v31 = a3;
            BOOL v32 = v25;
            *(void *)&double result = ResourceTracker<_ResourceGroupBinding>::addResource((uint64_t)a1, (uint64_t)&v28, *(_DWORD *)(v3 + 48), a3).n128_u64[0];
          }
        }
      }
    }
    else if ((a3 & 0x82A) != 0)
    {
      unint64_t v19 = (*(void *)(v3 + 8) + 127) & 0xFFFFFFFFFFFFFF80;
      uint64_t v28 = (uint64_t **)(a2 + (int)*MEMORY[0x263F4B188]);
      unint64_t v29 = v19;
      int v30 = v4 >> 7;
      int v31 = a3;
      AGX::PassiveResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindPassiveResource((uint64_t)(a1 + 20), (uint64_t)&v28);
    }
  }
  return result;
}

double AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setAndBindRenderTarget(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6)
{
  if (*(_DWORD *)(a2 + 236)
    || !AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, 0, 0, 0, 0))
  {
    return result;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 144) + a5;
  int v14 = *(unsigned __int8 *)(a2 + 380);
  if (v14 == 3 || v14 == 0)
  {
    unint64_t v16 = (unint64_t)AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getPlaneSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a2, 0, 1) >> 7;
    if (!v16) {
      return result;
    }
  }
  else
  {
    unsigned int v17 = v13 + 1;
    if (v13 + 1 < *(_DWORD *)(a2 + 140) || v17 == *(_DWORD *)(a2 + 64)) {
      unint64_t v18 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a2, v17, 0);
    }
    else {
      unint64_t v18 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a2, 0);
    }
    unint64_t v16 = (v18
         - AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a2, v13, 0)) >> 7;
    if (!v16) {
      return result;
    }
  }
  unint64_t v19 = (AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(a2, a4, v13, a6, 0)+ 127) & 0xFFFFFFFFFFFFFF80;
  if (!*(unsigned char *)(a1[5] + 480) || (uint64_t v20 = a1[6], v21 = a1[7], v22 = a1[8], v23 = a1[9], !(v21 | v22 | v23 | v20)))
  {
    unsigned int v41 = (uint64_t *)(a3 + (int)*MEMORY[0x263F4B188]);
    unint64_t v42 = v19;
    int v43 = v16;
    int v44 = 12;
    AGX::PassiveResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::bindPassiveResource((uint64_t)(a1 + 20), (uint64_t)&v41);
    return result;
  }
  uint64_t v24 = a3 + (int)*MEMORY[0x263F4B188];
  uint64_t v25 = *(void *)(v24 + 16);
  unint64_t v26 = (uint64_t **)v24;
  if ((v25 & 0x1000000000000000) != 0) {
    unint64_t v26 = *(uint64_t ***)v24;
  }
  uint8x8_t v27 = *v26;
  if (*v26)
  {
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v29 | *v27;
    uint64_t v32 = v27[2];
    uint64_t v31 = v27[3];
    if (v30 | v32 | v31)
    {
      unint64_t v33 = v23 & v31;
      if (v33)
      {
        uint64_t v34 = 3;
      }
      else
      {
        unint64_t v33 = v22 & v32;
        if ((v22 & v32) != 0)
        {
          uint64_t v34 = 2;
        }
        else
        {
          unint64_t v33 = v21 & v29;
          if ((v21 & v29) != 0)
          {
            uint64_t v34 = 1;
          }
          else
          {
            unint64_t v33 = v28 & v20;
            if ((v28 & v20) == 0) {
              return result;
            }
            uint64_t v34 = 0;
          }
        }
      }
      char v35 = __clz(v33);
      uint64_t v36 = &a1[v34];
      uint64_t v37 = v36[10];
      uint64_t v38 = 1 << (v35 ^ 0x3Fu);
      BOOL v39 = (v38 & v37) != 0;
      if ((v38 & (v36[14] | v37)) != 0)
      {
        unint64_t v40 = (uint64_t *)(a3 + (int)*MEMORY[0x263F4B188]);
        if ((v25 & 0x1000000000000000) != 0) {
          unint64_t v40 = *(uint64_t **)v24;
        }
        unsigned int v41 = v40;
        unint64_t v42 = v19;
        int v43 = v16;
        int v44 = 12;
        BOOL v45 = v39;
        *(void *)&double result = ResourceTracker<_ResourceGroupBinding>::addResource((uint64_t)a1, (uint64_t)&v41, *(_DWORD *)(v24 + 48), 12).n128_u64[0];
      }
    }
  }
  return result;
}

void AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::setResourceGroup(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3 = a1 + (((unint64_t)a2 >> 3) & 0x1FF8);
  *(void *)(v3 + 48) |= 1 << a2;
  uint64_t v4 = 112;
  if (a3) {
    uint64_t v4 = 80;
  }
  *(void *)(v3 + v4) |= 1 << a2;
  uint64_t v5 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v5 + 480))
  {
    *(unsigned char *)(v5 + 480) = 1;
    unint64_t prime = vcvtps_u32_f32(128.0 / *(float *)(a1 + 32));
    if (prime == 1)
    {
      unint64_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      unint64_t prime = std::__next_prime(prime);
    }
    int8x8_t v8 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v8) {
      goto LABEL_20;
    }
    if (prime < *(void *)&v8)
    {
      unint64_t v9 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v8 < 3uLL || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
      {
        unint64_t v9 = std::__next_prime(v9);
      }
      else
      {
        uint64_t v11 = 1 << -(char)__clz(v9 - 1);
        if (v9 >= 2) {
          unint64_t v9 = v11;
        }
      }
      if (prime <= v9) {
        unint64_t prime = v9;
      }
      if (prime < *(void *)&v8)
      {
LABEL_20:
        std::__hash_table<std::__hash_value_type<std::string,unsigned int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned int>>>::__do_rehash<true>(a1, prime);
      }
    }
  }
}

double AGX::ResourceGroupUsage<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::reset(uint64_t a1)
{
  if (*(void *)(a1 + 192))
  {
    unint64_t v2 = *(void **)(a1 + 184);
    if (v2)
    {
      do
      {
        unint64_t v3 = (void *)*v2;
        operator delete(v2);
        unint64_t v2 = v3;
      }
      while (v3);
    }
    *(void *)(a1 + 184) = 0;
    uint64_t v4 = *(void *)(a1 + 176);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)(a1 + 168) + 8 * i) = 0;
    }
    *(void *)(a1 + 192) = 0;
  }
  *(_DWORD *)(a1 + 464) = 0;
  bzero((void *)(a1 + 208), 0x100uLL);
  if (*(void *)(a1 + 24))
  {
    uint64_t v6 = *(void **)(a1 + 16);
    if (v6)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      for (uint64_t j = 0; j != v8; ++j)
        *(void *)(*(void *)a1 + 8 * j) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint8x8_t v10 = *(_OWORD **)(a1 + 40);
  double result = 0.0;
  v10[28] = 0u;
  v10[29] = 0u;
  v10[26] = 0u;
  v10[27] = 0u;
  v10[24] = 0u;
  v10[25] = 0u;
  v10[22] = 0u;
  v10[23] = 0u;
  v10[20] = 0u;
  v10[21] = 0u;
  v10[18] = 0u;
  v10[19] = 0u;
  v10[16] = 0u;
  v10[17] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  *uint8x8_t v10 = 0u;
  v10[1] = 0u;
  return result;
}

uint64_t AGX::SampledComputeContext<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses,AGX::HAL200::EncoderComputeServiceClasses>::duplicateShaderAddresses(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(v2 + 1920);
  uint64_t result = [*(id *)v2 device];
  uint64_t v5 = *(void *)(v3 + 16);
  if (*(unsigned char *)(a1 + 56) && *(unsigned char *)(a1 + 57)) {
    AGX::cloneIFTs_impl<AGX::HAL200::ObjClasses,AGX::HAL200::Classes>();
  }
  uint64_t v6 = *(void *)(a1 + 24) + 24 * *(unsigned int *)(a1 + 36);
  int v7 = *(unsigned __int8 *)(*(void *)(result + 808) + 7456);
  *(unsigned char *)uint64_t v6 = 3;
  int v8 = *(_DWORD *)(*(void *)(a1 + 48) + 1508);
  if (v7)
  {
    *(_DWORD *)(v6 + 4) = v8;
    *(_DWORD *)uint64_t v6 = (*(_DWORD *)(a1 + 40) << 8) | 3;
  }
  else
  {
    *(_DWORD *)uint64_t v6 = (v8 << 8) | 3;
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(a1 + 40);
  }
  *(void *)(v6 + 8) = *(void *)(v5 + 1200);
  *(void *)(v6 + 16) = *(void *)(v5 + 1424) + *(void *)(v5 + 1200);
  int v9 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 36) = (*(_DWORD *)(a1 + 36) + 1) % *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = v9;
  return result;
}

uint64_t AGX::SamplerGen3<AGX::HAL200::Classes,AGX::HAL200::Encoders>::SamplerGen3(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  long long v10 = *(_OWORD *)a4;
  long long v11 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 32) = v11;
  *(_OWORD *)a1 = v10;
  if (*(char *)(a4 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a4 + 48), *(void *)(a4 + 56));
  }
  else
  {
    long long v12 = *(_OWORD *)(a4 + 48);
    *(void *)(a1 + 64) = *(void *)(a4 + 64);
    *(_OWORD *)(a1 + 48) = v12;
  }
  AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields((unint64_t *)(a1 + 72), a4);
  if ((~*(_DWORD *)(a4 + 4) & 0x600000) != 0)
  {
    unsigned int v15 = 0;
    uint64_t v16 = 0;
    unsigned int v17 = 0;
    uint64_t v18 = 0;
    goto LABEL_87;
  }
  unsigned int v13 = *(_DWORD *)(a4 + 40) - 1;
  if (v13 > 0x284) {
    int v14 = &texFormatUnsupported;
  }
  else {
    int v14 = (uint64_t *)*(&off_26516F8A0 + v13);
  }
  int v19 = *((_DWORD *)v14 + 21);
  uint64_t v68 = 0;
  switch(*v14)
  {
    case 0:
    case 1:
    case 10:
    case 40:
    case 116:
    case 117:
    case 118:
      if (v19) {
        char v20 = 12;
      }
      else {
        char v20 = 8;
      }
      BYTE6(v68) = v20;
      BYTE5(v68) = v20;
      BYTE4(v68) = v20;
      HIBYTE(v68) = 8;
      break;
    case 9:
    case 17:
    case 35:
    case 37:
    case 39:
    case 50:
      HIDWORD(v68) = 269488144;
      break;
    case 11:
      BYTE6(v68) = 5;
      WORD2(v68) = 1541;
      break;
    case 12:
      HIDWORD(v68) = 67372036;
      break;
    case 13:
      int v21 = 84215041;
      goto LABEL_22;
    case 14:
      int v21 = 17106181;
      goto LABEL_22;
    case 33:
    case 49:
    case 56:
      HIDWORD(v68) = 538976288;
      break;
    case 38:
      int v21 = 34212362;
LABEL_22:
      HIDWORD(v68) = v21;
      break;
    case 119:
    case 120:
      uint64_t v68 = 0x808080806060606;
      break;
    default:
      break;
  }
  uint64_t v22 = 0;
  uint64_t v23 = (float *)(a4 + 20);
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v24 = v14[1];
  do
  {
    switch(v24)
    {
      case 0:
        if (*v23 <= 1.0) {
          float v28 = *v23;
        }
        else {
          float v28 = 1.0;
        }
        if (*v23 >= 0.0) {
          float v29 = v28;
        }
        else {
          float v29 = 0.0;
        }
        unsigned int v27 = (float)(v29
                                  * (float)(~(-1 << *((unsigned char *)&v68 + v22 + 4)) << *((unsigned char *)&v68 + v22))) & ~(-1 << (*((unsigned char *)&v68 + v22) + *((unsigned char *)&v68 + v22 + 4)));
        goto LABEL_28;
      case 1:
        char v33 = *((unsigned char *)&v68 + v22);
        if (*v23 <= 1.0) {
          float v34 = *v23;
        }
        else {
          float v34 = 1.0;
        }
        if (*v23 >= -1.0) {
          float v35 = v34;
        }
        else {
          float v35 = -1.0;
        }
        char v36 = *((unsigned char *)&v68 + v22 + 4) - 1;
        unsigned int v37 = (int)(float)(v35 * (float)(~(-1 << v36) << v33));
        unsigned int v27 = (v37 >> 31 << (v36 + v33)) | v37 & ~(-1 << (v36 + v33));
        goto LABEL_28;
      case 2:
        int v25 = *((unsigned __int8 *)&v68 + v22 + 4);
        if (v25 == 32) {
          unsigned int v26 = -1;
        }
        else {
          unsigned int v26 = ~(-1 << v25);
        }
        unsigned int v27 = v26 & *(_DWORD *)v23;
        goto LABEL_28;
      case 3:
        int v32 = *((unsigned __int8 *)&v68 + v22 + 4);
        if (v32 == 32) {
          unsigned int v27 = *(unsigned int *)v23;
        }
        else {
          unsigned int v27 = *(_DWORD *)v23 & ~(-1 << (v32 - 1)) | (*(_DWORD *)v23 >> 31 << (v32 - 1));
        }
        goto LABEL_28;
      case 4:
        unsigned int v27 = *(unsigned int *)v23;
        if (*((unsigned char *)&v68 + v22 + 4) != 32)
        {
          int v30 = HIWORD(v27) & 0x8000;
          float v31 = fabsf(*(float *)&v27);
          if (v31 >= 65520.0)
          {
            LOWORD(v30) = v30 | 0x7C00;
          }
          else if (v31 > 0.000000029802)
          {
            if (v31 >= 0.000000089407)
            {
              if (v31 >= 2.351e-38) {
                v30 |= COERCE_UNSIGNED_INT((float)((float)(v31 + COERCE_FLOAT(COERCE_UNSIGNED_INT(*(float *)&v27 * 8192.0) & 0x7F800000))- COERCE_FLOAT(COERCE_UNSIGNED_INT(*(float *)&v27 * 8192.0) & 0x7F800000))* 1.9259e-34) >> 13;
              }
              else {
                v30 |= vcvts_n_u32_f32(v31, 0x18uLL);
              }
            }
            else
            {
              LOWORD(v30) = v30 | 1;
            }
          }
          unsigned int v27 = (unsigned __int16)v30;
        }
LABEL_28:
        *((float *)&v69 + v22) = *(float *)&v27;
        break;
      default:
        break;
    }
    ++v22;
    ++v23;
  }
  while (v22 != 4);
  unsigned int v15 = 0;
  int v38 = *((_DWORD *)v14 + 16);
  if (v38 <= 75391)
  {
    if (v38 <= 42751)
    {
      if (v38 > 34431)
      {
        if (v38 != 34432)
        {
          int v39 = 42112;
          goto LABEL_85;
        }
      }
      else if (v38 != 0x8000)
      {
        int v39 = 32896;
        goto LABEL_85;
      }
LABEL_86:
      unsigned int v15 = v69;
      uint64_t v16 = HIDWORD(v69);
      unsigned int v17 = v70;
      uint64_t v18 = HIDWORD(v70);
      goto LABEL_87;
    }
    if (v38 < 0x10000)
    {
      if (v38 == 42752) {
        goto LABEL_75;
      }
      int v39 = 50816;
LABEL_85:
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      if (v38 != v39) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    if (v38 == 0x10000)
    {
      uint64_t v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      unsigned int v15 = HIDWORD(v70);
      goto LABEL_87;
    }
    unsigned __int16 v40 = 9344;
LABEL_84:
    int v39 = v40 | 0x10000;
    goto LABEL_85;
  }
  if (v38 <= 107647)
  {
    if (v38 <= 80191)
    {
      if (v38 != 75392)
      {
        uint64_t v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        if (v38 == 75520) {
          goto LABEL_75;
        }
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    if (v38 == 80192)
    {
      uint64_t v18 = v69;
      unsigned int v17 = HIDWORD(v69);
      uint64_t v16 = v70;
      unsigned int v15 = HIDWORD(v70);
      goto LABEL_87;
    }
    unsigned __int16 v40 = 18048;
    goto LABEL_84;
  }
  if (v38 <= 144703)
  {
    if (v38 == 107648)
    {
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      unsigned int v15 = v69;
      uint64_t v16 = HIDWORD(v70);
      goto LABEL_87;
    }
    unsigned __int16 v40 = -14720;
    goto LABEL_84;
  }
  if (v38 != 144704)
  {
    if (v38 != 173824)
    {
      int v39 = 181888;
      goto LABEL_85;
    }
LABEL_75:
    unsigned int v17 = v69;
    uint64_t v16 = HIDWORD(v69);
    unsigned int v15 = v70;
    uint64_t v18 = HIDWORD(v70);
    goto LABEL_87;
  }
  uint64_t v18 = v69;
  unsigned int v15 = HIDWORD(v69);
  uint64_t v16 = v70;
  unsigned int v17 = HIDWORD(v70);
LABEL_87:
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v15 | (unint64_t)(v16 << 32);
  *(void *)(a1 + 88) = v17 | (unint64_t)(v18 << 32);
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  unint64_t v41 = *(void *)(a1 + 72) & 0xF03FFFFFFFFFFFFFLL;
  if (a5) {
    v41 |= 0xF80000000000000uLL;
  }
  *(void *)(a1 + 72) = v41;
  unsigned int v42 = objc_msgSend(a3, "resourceIndex", v68);
  int v43 = (os_unfair_lock_s *)(a2 + 6152);
  BOOL v44 = v42 != 0;
  BOOL v45 = (int *)MEMORY[0x263F4B188];
  unsigned int v46 = v42;
  if (!v42)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 6192));
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(a2 + 6184), memory_order_acquire);
    if (explicit)
    {
      unsigned int v46 = explicit;
      while (1)
      {
        unint64_t v48 = explicit & 0xFFFFFFFF00000000;
        unint64_t v49 = (v48 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(a2 + 6176) + 8) + *v45 + 24) + 32 * v46))
            + 0x100000000;
        unint64_t explicit = v48 | v46;
        unint64_t v50 = explicit;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 6184), &explicit, v49);
        if (explicit == v50) {
          break;
        }
        unsigned int v46 = explicit;
        if (!explicit) {
          goto LABEL_94;
        }
      }
    }
    else
    {
LABEL_94:
      int v51 = *(_DWORD *)(a2 + 6168);
      if (v51)
      {
        if (!*(void *)(a2 + 6184)) {
          AGX::Mempool<16u,0u,true,AGX::HAL200::SamplerHeapElem>::grow(a2 + 6152, 2 * v51);
        }
      }
      else
      {
        AGX::Mempool<16u,0u,true,AGX::HAL200::SamplerHeapElem>::grow(a2 + 6152, 0x10u);
      }
      unint64_t v52 = atomic_load_explicit((atomic_ullong *volatile)(a2 + 6184), memory_order_acquire);
      if (v52)
      {
        unsigned int v46 = v52;
        do
        {
          unint64_t v53 = v52 & 0xFFFFFFFF00000000;
          unint64_t v54 = (v53 | *(unsigned int *)(*(void *)(*(void *)(*(void *)(a2 + 6176) + 8) + *v45 + 24)
                                       + 32 * v46))
              + 0x100000000;
          unint64_t v52 = v53 | v46;
          unint64_t v55 = v52;
          atomic_compare_exchange_strong((atomic_ullong *volatile)(a2 + 6184), &v52, v54);
          if (v52 == v55) {
            break;
          }
          unsigned int v46 = v52;
        }
        while (v52);
      }
      else
      {
        unsigned int v46 = 0;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 6192));
  }
  unsigned int v56 = *(_DWORD *)(a2 + 6196);
  if (v56 < v46)
  {
    unsigned int v57 = *(_DWORD *)(a2 + 6196);
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 6196), &v57, v46, memory_order_relaxed, memory_order_relaxed);
    if (v57 != v56 && v57 < v46)
    {
      unsigned int v58 = v57;
      do
      {
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a2 + 6196), &v58, v46, memory_order_relaxed, memory_order_relaxed);
        if (v58 == v57) {
          break;
        }
        unsigned int v57 = v58;
      }
      while (v58 < v46);
    }
  }
  atomic_fetch_add((atomic_uint *volatile)(a2 + 6200), 1u);
  uint64_t v59 = *(unsigned int *)(a1 + 96);
  *(_DWORD *)(a1 + 96) = v46;
  uint64_t v60 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = v43;
  int v61 = *(unsigned __int8 *)(a1 + 112);
  *(unsigned char *)(a1 + 112) = v44;
  if (v59) {
    BOOL v62 = v61 == 0;
  }
  else {
    BOOL v62 = 0;
  }
  if (v62)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v60 + 40));
    uint64_t v63 = *(void *)(v60 + 32);
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v60 + 24) + 8) + *v45 + 24) + 32 * v59) = v63;
    uint64_t v64 = v63;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v60 + 32), (unint64_t *)&v64, (v63 & 0xFFFFFFFF00000000 | v59) + 0x100000000);
    if (v64 != v63)
    {
      uint64_t v65 = v64;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v60 + 24) + 8) + *v45 + 24) + 32 * v59) = v64;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v60 + 32), (unint64_t *)&v65, (v64 & 0xFFFFFFFF00000000 | v59) + 0x100000000);
        BOOL v62 = v65 == v64;
        uint64_t v64 = v65;
      }
      while (!v62);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v60 + 40));
    int v43 = *(os_unfair_lock_s **)(a1 + 104);
  }
  uint64_t v66 = *(void *)(a1 + 72);
  os_unfair_lock_lock(v43 + 10);
  *(void *)(*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + *v45 + 24) + 32 * *(unsigned int *)(a1 + 96)) = v66;
  os_unfair_lock_unlock(v43 + 10);
  return a1;
}

void sub_242B915C0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v3);
  AGX::Mempool<16u,0u,true,AGX::HAL200::SamplerHeapElem>::Allocation::~Allocation(v4);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void AGX::Mempool<16u,0u,true,AGX::HAL200::SamplerHeapElem>::grow(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = [[AGXBuffer alloc] initUntrackedInternalBufferWithDevice:*(void *)a1 length:32 * a2 options:0];
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  int v7 = (int *)MEMORY[0x263F4B188];
  if (v6)
  {
    memcpy(*(void **)&v4[*MEMORY[0x263F4B188] + 24], *(const void **)(v6 + (int)*MEMORY[0x263F4B188] + 24), 32 * *(unsigned int *)(a1 + 16));
  }
  *(void *)(a1 + 8) = v5;
  LODWORD(v8) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = a2;
  if (v8 <= 1) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v8;
  }
  uint64_t v9 = a2 - 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if (v8 < v9)
  {
    uint64_t v11 = 32 * v8;
    uint64_t v12 = v8;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v11) = ++v12;
      v11 += 32;
    }
    while (v9 != v12);
  }
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = 32 * v9;
  *(_DWORD *)(*(void *)(*(void *)(v10 + 8) + *v7 + 24) + v14) = v13;
  uint64_t v15 = v13;
  atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v15, (v13 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
  if (v15 != v13)
  {
    uint64_t v16 = v15;
    do
    {
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + *v7 + 24) + v14) = v15;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 32), (unint64_t *)&v16, (v15 & 0xFFFFFFFF00000000 | v8) + 0x100000000);
      BOOL v17 = v16 == v15;
      uint64_t v15 = v16;
    }
    while (!v17);
  }
  uint64_t v18 = *(atomic_uint **)(a1 + 56);
  atomic_uint v19 = *v18;
  if ((*v18 + 1) > 1) {
    unsigned int v20 = v19 + 1;
  }
  else {
    unsigned int v20 = 1;
  }
  atomic_uint v21 = *v18;
  atomic_compare_exchange_strong(v18, (unsigned int *)&v21, v20);
  if (v21 != v19)
  {
    atomic_uint v22 = v21;
    do
    {
      if ((v21 + 1) > 1) {
        unsigned int v23 = v21 + 1;
      }
      else {
        unsigned int v23 = 1;
      }
      atomic_compare_exchange_strong(v18, (unsigned int *)&v22, v23);
      BOOL v17 = v22 == v21;
      atomic_uint v21 = v22;
    }
    while (!v17);
  }
}

unsigned int *AGX::Mempool<16u,0u,true,AGX::HAL200::SamplerHeapElem>::Allocation::~Allocation(unsigned int *a1)
{
  if (*a1 && !*((unsigned char *)a1 + 16))
  {
    uint64_t v2 = (os_unfair_lock_s *)(*((void *)a1 + 1) + 40);
    os_unfair_lock_lock(v2);
    uint64_t v3 = *((void *)a1 + 1);
    uint64_t v4 = *a1;
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v6 = (int *)MEMORY[0x263F4B188];
    *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + (int)*MEMORY[0x263F4B188] + 24) + 32 * v4) = v5;
    uint64_t v7 = v5;
    atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v7, (v5 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
    if (v7 != v5)
    {
      uint64_t v8 = v7;
      do
      {
        *(_DWORD *)(*(void *)(*(void *)(*(void *)(v3 + 24) + 8) + *v6 + 24) + 32 * v4) = v7;
        atomic_compare_exchange_strong((atomic_ullong *volatile)(v3 + 32), (unint64_t *)&v8, (v7 & 0xFFFFFFFF00000000 | v4) + 0x100000000);
        BOOL v9 = v8 == v7;
        uint64_t v7 = v8;
      }
      while (!v9);
    }
    os_unfair_lock_unlock(v2);
  }
  return a1;
}

unint64_t *AGX::SamplerStateEncoderGen4<AGX::HAL200::TextureFormatTable>::SamplerStateFields::SamplerStateFields(unint64_t *result, uint64_t a2)
{
  float v3 = *(float *)(a2 + 8);
  float v2 = *(float *)(a2 + 12);
  unsigned int v4 = *(_DWORD *)(a2 + 4);
  unsigned int v5 = v4 & 0x1F;
  int v6 = HIWORD(v4) & 3;
  int v7 = (v4 >> 18) & 3;
  unsigned int v8 = v4 & 0x4000;
  if (v3 > v2) {
    float v3 = *(float *)(a2 + 12);
  }
  BOOL v9 = v6 == 2;
  BOOL v10 = v6 != 1;
  if (v7 == 2)
  {
    BOOL v9 = 1;
    BOOL v10 = 1;
  }
  BOOL v11 = !v10;
  uint64_t v12 = 0x2000000;
  if (!v11) {
    uint64_t v12 = 0;
  }
  int v13 = v7 != 1 || v9;
  BOOL v11 = v13 == 0;
  uint64_t v14 = 0x800000;
  if (!v11) {
    uint64_t v14 = 0;
  }
  float v15 = v3 * 64.0;
  float v16 = 896.0;
  if (v15 <= 896.0) {
    float v16 = v15;
  }
  uint64_t v17 = v16 & 0x3FF;
  if (v15 < 0.0) {
    uint64_t v17 = 0;
  }
  float v18 = v2 * 64.0;
  float v19 = 896.0;
  if (v18 <= 896.0) {
    float v19 = v18;
  }
  uint64_t v20 = (v19 & 0x3FF) << 10;
  if (v18 < 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v21 = (-1048576 * __clz(~(-1 << -(char)__clz(v5 - 1)))) & 0x700000;
  BOOL v22 = v5 >= 2;
  uint64_t v23 = 0;
  if (!v22) {
    uint64_t v21 = 0;
  }
  if (v8)
  {
    uint64_t v24 = v21;
  }
  else
  {
    uint64_t v23 = 0x4000000000;
    uint64_t v24 = 0;
  }
  uint64_t v25 = v20 | v17;
  uint64_t v26 = v14 | v12;
  if (v9) {
    uint64_t v26 = 83886080;
  }
  uint64_t v27 = v26 | v24 | v25;
  *uint64_t result = v27;
  uint64_t v28 = 0x10000000;
  if ((*(_WORD *)a2 & 0x40) == 0) {
    uint64_t v28 = 0x8000000;
  }
  if (((v8 != 0) & ((*(_WORD *)a2 & 0x20) >> 5)) == 0) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v28 | v27;
  *uint64_t result = v29;
  unsigned int v30 = 0;
  switch(*(_DWORD *)(a2 + 4) >> 5)
  {
    case 0:
      break;
    case 1:
      unsigned int v30 = 5;
      break;
    case 2:
      unsigned int v30 = v8 >> 14;
      break;
    case 3:
      unsigned int v30 = v8 >> 13;
      break;
    case 4:
    case 5:
      unsigned int v30 = 3;
      break;
    default:
      unsigned int v30 = 4;
      break;
  }
  unint64_t v31 = v29 | ((unint64_t)v30 << 29);
  *uint64_t result = v31;
  uint64_t v32 = 0;
  switch(((unint64_t)*(unsigned int *)(a2 + 4) >> 8) & 7)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v32 = 5;
      break;
    case 2uLL:
      uint64_t v32 = v8 >> 14;
      break;
    case 3uLL:
      uint64_t v32 = v8 >> 13;
      break;
    case 4uLL:
    case 5uLL:
      uint64_t v32 = 3;
      break;
    default:
      uint64_t v32 = 4;
      break;
  }
  unint64_t v33 = v31 | (v32 << 32);
  *uint64_t result = v33;
  uint64_t v34 = 0;
  switch(((unint64_t)*(unsigned int *)(a2 + 4) >> 11) & 7)
  {
    case 0uLL:
      break;
    case 1uLL:
      uint64_t v34 = 5;
      break;
    case 2uLL:
      uint64_t v34 = v8 >> 14;
      break;
    case 3uLL:
      uint64_t v34 = v8 >> 13;
      break;
    case 4uLL:
    case 5uLL:
      uint64_t v34 = 3;
      break;
    default:
      uint64_t v34 = 4;
      break;
  }
  uint64_t v35 = v33 | v23 | (v34 << 35);
  *uint64_t result = v35;
  unsigned int v36 = (*(_WORD *)a2 & 0xF) - 1;
  if (v36 > 8) {
    uint64_t v37 = 0x30000000000;
  }
  else {
    uint64_t v37 = qword_242EAC330[v36];
  }
  uint64_t v38 = v37 | v35;
  *uint64_t result = v38;
  unint64_t v39 = v38 & 0x3FFBFFFFFFFFFFLL | ((unint64_t)((*(_WORD *)a2 & 0xF) != 0) << 42);
  *uint64_t result = v39;
  unint64_t v40 = v39 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)((*(_DWORD *)(a2 + 4) & 0x1000000u) >> 24) << 63);
  *uint64_t result = v40;
  int v41 = vcvts_n_s32_f32(*(float *)(a2 + 16), 6uLL);
  if (v41 >= 1023) {
    int v41 = 1023;
  }
  if (v41 <= -1024) {
    LOWORD(v41) = -1024;
  }
  unint64_t v42 = v40 & 0x800007FFFFFFFFFFLL | ((unint64_t)(v41 & 0x7FF) << 43);
  *uint64_t result = v42;
  *uint64_t result = v42 | ((unint64_t)((*(_DWORD *)(a2 + 4) >> 21) & 3) << 61);
  return result;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 56) = a2;
  *(void *)(result + 64) = a3;
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(void *)(result + 72) = *(void *)(a2 + 5992);
  {
    uint64_t v15 = a2;
    uint64_t v16 = result;
    a2 = v15;
    uint64_t result = v16;
    if (v12)
    {
      int v13 = os_parse_boot_arg_int();
      int v14 = 0;
      if (!v13) {
        int v14 = 96;
      }
      AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3(AGX::HAL200::Device *,AGX::DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *)::ptc_max_count_override = v14;
      a2 = v15;
      uint64_t result = v16;
    }
  }
  int v3 = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3(AGX::HAL200::Device *,AGX::DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *)::ptc_max_count_override;
  *(_DWORD *)(result + 112) = AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::SpillInfoGen3(AGX::HAL200::Device *,AGX::DeviceInternalBuffer<AGX::USCSpillBufferResourceInfo> *)::ptc_max_count_override;
  unsigned int v4 = *(_DWORD *)(a2 + 5912);
  signed int v6 = *(_DWORD *)(result + 72);
  unsigned int v5 = *(_DWORD *)(result + 76);
  signed int v7 = 2 * *(_DWORD *)(a2 + 5888) / v4;
  int v8 = (v6 * v3 + 712) * v4;
  *(_DWORD *)(result + 80) = v8;
  *(_DWORD *)(result + 84) = v8 + (v5 << 6);
  int v9 = v5 * v3;
  if (v7 < v6) {
    signed int v6 = v7;
  }
  unsigned int v10 = v7 * v4;
  if (v10 < v5) {
    unsigned int v5 = v10;
  }
  *(_DWORD *)(result + 104) = v6;
  *(_DWORD *)(result + 108) = v5;
  int v11 = (v6 * v3 + 712) * v4;
  *(_DWORD *)(result + 88) = v9;
  *(_DWORD *)(result + 92) = v11;
  *(_DWORD *)(result + 96) = v11 + (v5 << 6);
  *(_DWORD *)(result + 100) = v5 * v3;
  return result;
}

void sub_242B91EDC(_Unwind_Exception *a1)
{
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragment(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 + 5912);
  *(_DWORD *)(a1 + 48) = 2;
  int v5 = *a3 + *a2;
  int v6 = a3[1] + a2[1];
  int v7 = *(_DWORD *)(a1 + 112);
  int v8 = *(_DWORD *)(a1 + 76);
  if (v6 <= v7) {
    int v9 = *(_DWORD *)(a1 + 112);
  }
  else {
    int v9 = a3[1] + a2[1];
  }
  int v10 = *(_DWORD *)(a1 + 80) + (v9 + 64) * v4 + (a2[3] + a2[2] + a3[2] + v9) * v8;
  if (v4 < 2)
  {
    unint64_t v17 = 0;
    unint64_t v22 = 0;
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 72);
    unsigned int v12 = v7 * v11;
    LODWORD(v13) = 32 * v11;
    int v14 = v6 - 2;
    if (v6 >= 66) {
      int v14 = 64;
    }
    if (v14 <= 32) {
      uint64_t v15 = (unsigned __int16)(v14 - 1);
    }
    else {
      uint64_t v15 = 32;
    }
    int v16 = v14 + v6;
    if ((int)v13 >= v14 + v6) {
      uint64_t v13 = (v14 + v6 - 1);
    }
    else {
      uint64_t v13 = v13;
    }
    unint64_t v17 = (v14 << 16) | ((unint64_t)(unsigned __int16)(v6 - 1) << 32) | v15 | (v13 << 48);
    unsigned int v18 = v12 + 4194240;
    BOOL v19 = v12 >= v6 + 64;
    unsigned int v20 = v12 - (v6 + 64);
    if (!v19) {
      unsigned int v20 = 0;
    }
    if (v6 <= v7) {
      unsigned int v21 = v18;
    }
    else {
      unsigned int v21 = v20;
    }
    unint64_t v22 = *(void *)&v16 & 0x3FFFFFLL | ((unint64_t)((v21 * v4) & 0x3FFFFF) << 22);
  }
  int v23 = v5 * v8;
  int v24 = *(_DWORD *)(a1 + 88);
  int v25 = v23 - v24;
  if (v23 <= v24) {
    int v25 = 0;
  }
  int v26 = *(unsigned __int8 *)(v3 + 7815);
  if (v23 <= v24) {
    int v27 = 0;
  }
  else {
    int v27 = *(_DWORD *)(a1 + 88);
  }
  int v28 = v27 + v7 + v25 + *(_DWORD *)(a1 + 84);
  if (v26) {
    int v29 = v28;
  }
  else {
    int v29 = v25 + *(_DWORD *)(a1 + 84);
  }
  int v30 = *(_DWORD *)(a1 + 4);
  if (v10 > v30)
  {
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v22;
  }
  BOOL v31 = v10 > v30;
  int v32 = *(_DWORD *)(a1 + 24);
  BOOL v33 = v32 < v29;
  if (v32 > v29) {
    int v29 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v29;
  return v33 || v31;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForCompute(uint64_t a1, unsigned int a2, unsigned int a3, int a4, unsigned int a5, int a6, int a7)
{
  uint64_t v7 = *(void *)(a1 + 56);
  int v8 = *(_DWORD *)(v7 + 5912);
  *(_DWORD *)(a1 + 48) = 3;
  if (a2 <= a3) {
    unsigned int v9 = a3;
  }
  else {
    unsigned int v9 = a2;
  }
  int v10 = 32 * v9;
  int v11 = 32 * a4;
  if (a6) {
    int v12 = a6 + 64;
  }
  else {
    int v12 = 0;
  }
  unsigned int v13 = (a7 + 31) >> 5;
  unsigned int v14 = ((v11 + 6143) >> 12) + ((v10 + 17279) >> 12);
  unsigned int v15 = ((v10 + 78719) >> 16) + ((v11 + 67583) >> 16);
  unsigned int v16 = ((v12 + 4095) >> 12) + ((a5 + 0x1FFF) >> 12);
  unsigned int v17 = ((a5 + 69631) >> 16) + ((v12 + 0xFFFF) >> 16);
  if (a7) {
    unsigned int v18 = (a7 + 31) >> 5;
  }
  else {
    unsigned int v18 = 32;
  }
  if (*(_DWORD *)(v7 + 5864) == 21) {
    unsigned int v19 = 10;
  }
  else {
    unsigned int v19 = 14;
  }
  if (v19 >= v18) {
    unsigned int v20 = v18;
  }
  else {
    unsigned int v20 = v19;
  }
  unsigned int v21 = v17 + v15 * v20;
  int v22 = v21 + v14 * v18 + v16;
  int v23 = *(_DWORD *)(a1 + 112);
  int v24 = *(_DWORD *)(a1 + 76);
  if (v22 <= v23) {
    unsigned int v25 = *(_DWORD *)(a1 + 112);
  }
  else {
    unsigned int v25 = v21 + v14 * v18 + v16;
  }
  unsigned int v26 = v21 + v25;
  int v27 = *(_DWORD *)(a1 + 80) + (v25 + 64) * v8;
  if (v8 < 2)
  {
    unint64_t v34 = 0;
    unint64_t v39 = 0;
  }
  else
  {
    int v28 = *(_DWORD *)(a1 + 72);
    unsigned int v29 = v23 * v28;
    LODWORD(v30) = 32 * v28;
    int v31 = v22 - 2;
    if (v22 >= 66) {
      int v31 = 64;
    }
    if (v31 <= 32) {
      uint64_t v32 = (unsigned __int16)(v31 - 1);
    }
    else {
      uint64_t v32 = 32;
    }
    int v33 = v31 + v22;
    if ((int)v30 >= v31 + v22) {
      uint64_t v30 = (v31 + v22 - 1);
    }
    else {
      uint64_t v30 = v30;
    }
    unint64_t v34 = (v31 << 16) | ((unint64_t)(unsigned __int16)(v22 - 1) << 32) | v32 | (v30 << 48);
    unsigned int v35 = v29 + 4194240;
    BOOL v36 = v29 >= v22 + 64;
    unsigned int v37 = v29 - (v22 + 64);
    if (!v36) {
      unsigned int v37 = 0;
    }
    if (v22 <= v23) {
      unsigned int v38 = v35;
    }
    else {
      unsigned int v38 = v37;
    }
    unint64_t v39 = *(void *)&v33 & 0x3FFFFFLL | ((unint64_t)((v38 * v8) & 0x3FFFFF) << 22);
  }
  int v40 = v27 + v26 * v24;
  if (!a7) {
    unsigned int v13 = 1;
  }
  if (*(unsigned char *)(v7 + 7815))
  {
    signed int v55 = 0x60 / v13;
    if (v13 > 1) {
      ++v55;
    }
    if ((int)v13 >= 32) {
      unsigned int v13 = 32;
    }
    unsigned int v56 = v13 + 95;
    if (v55 >= 96) {
      unsigned int v57 = 96;
    }
    else {
      unsigned int v57 = v55;
    }
    if (v57 >= 8) {
      int v58 = 8;
    }
    else {
      int v58 = v57;
    }
    int v59 = (v19 * v15 + v56 * v14 + v57 * v16 + v58 * v17) * v24;
    int v60 = *(_DWORD *)(a1 + 88);
    BOOL v47 = __OFSUB__(v59, v60);
    int v62 = v59 - v60;
    char v61 = (v62 < 0) ^ v47 | (v62 == 0);
    if (v61) {
      int v62 = 0;
    }
    if (v61) {
      int v60 = 0;
    }
    int v49 = *(_DWORD *)(a1 + 84) + v23 + v62 + v60;
  }
  else
  {
    uint64_t v41 = *(unsigned int *)(v7 + 7816);
    unsigned int v42 = 0x60 / v13;
    if ((v41 & 0x80000000) == 0)
    {
      if (a5)
      {
        if (v41 <= 0x3E)
        {
          unint64_t v63 = ((v41 << 12) + 0x10000) / ((a5 + 63) & 0x1FFFFFFC0uLL);
          if (v42 >= v63) {
            unsigned int v42 = v63;
          }
        }
      }
    }
    int v43 = v42 * v13;
    if (v43 >= 96) {
      int v43 = 96;
    }
    if (v19 >= v43) {
      unsigned int v19 = v43;
    }
    if (v42 >= 8) {
      int v44 = 8;
    }
    else {
      int v44 = v42;
    }
    int v45 = (v19 * v15 + v43 * v14 + v42 * v16 + v44 * v17) * v24;
    int v46 = *(_DWORD *)(a1 + 88);
    BOOL v47 = __OFSUB__(v45, v46);
    int v48 = v45 - v46;
    if ((v48 < 0) ^ v47 | (v48 == 0)) {
      int v48 = 0;
    }
    int v49 = v48 + *(_DWORD *)(a1 + 84);
  }
  int v50 = *(_DWORD *)(a1 + 4);
  if (v40 > v50)
  {
    *(_DWORD *)a1 = v25;
    *(_DWORD *)(a1 + 4) = v40;
    *(void *)(a1 + 8) = v34;
    *(void *)(a1 + 16) = v39;
  }
  BOOL v51 = v40 > v50;
  int v52 = *(_DWORD *)(a1 + 24);
  BOOL v53 = v52 < v49;
  if (v52 > v49) {
    int v49 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v49;
  return v53 || v51;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForFragmentWithTile(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 + 5912);
  *(_DWORD *)(a1 + 48) = 5;
  int v5 = *a3 + *a2;
  int v6 = a3[1] + a2[1];
  int v7 = *(_DWORD *)(a1 + 112);
  int v8 = *(_DWORD *)(a1 + 76);
  if (v6 <= v7) {
    int v9 = *(_DWORD *)(a1 + 112);
  }
  else {
    int v9 = a3[1] + a2[1];
  }
  int v10 = *(_DWORD *)(a1 + 80) + (v9 + 64) * v4 + (a2[3] + a2[2] + a3[2] + v9) * v8;
  if (v4 < 2)
  {
    unint64_t v17 = 0;
    unint64_t v22 = 0;
  }
  else
  {
    int v11 = *(_DWORD *)(a1 + 72);
    unsigned int v12 = v7 * v11;
    LODWORD(v13) = 32 * v11;
    int v14 = v6 - 2;
    if (v6 >= 66) {
      int v14 = 64;
    }
    if (v14 <= 32) {
      uint64_t v15 = (unsigned __int16)(v14 - 1);
    }
    else {
      uint64_t v15 = 32;
    }
    int v16 = v14 + v6;
    if ((int)v13 >= v14 + v6) {
      uint64_t v13 = (v14 + v6 - 1);
    }
    else {
      uint64_t v13 = v13;
    }
    unint64_t v17 = (v14 << 16) | ((unint64_t)(unsigned __int16)(v6 - 1) << 32) | v15 | (v13 << 48);
    unsigned int v18 = v12 + 4194240;
    BOOL v19 = v12 >= v6 + 64;
    unsigned int v20 = v12 - (v6 + 64);
    if (!v19) {
      unsigned int v20 = 0;
    }
    if (v6 <= v7) {
      unsigned int v21 = v18;
    }
    else {
      unsigned int v21 = v20;
    }
    unint64_t v22 = *(void *)&v16 & 0x3FFFFFLL | ((unint64_t)((v21 * v4) & 0x3FFFFF) << 22);
  }
  int v23 = v5 * v8;
  int v24 = *(_DWORD *)(a1 + 88);
  int v25 = v23 - v24;
  if (v23 <= v24) {
    int v25 = 0;
  }
  int v26 = *(unsigned __int8 *)(v3 + 7815);
  if (v23 <= v24) {
    int v27 = 0;
  }
  else {
    int v27 = *(_DWORD *)(a1 + 88);
  }
  int v28 = v27 + v7 + v25 + *(_DWORD *)(a1 + 84);
  if (v26) {
    int v29 = v28;
  }
  else {
    int v29 = v25 + *(_DWORD *)(a1 + 84);
  }
  int v30 = *(_DWORD *)(a1 + 4);
  if (v10 > v30)
  {
    *(_DWORD *)a1 = v9;
    *(_DWORD *)(a1 + 4) = v10;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v22;
  }
  BOOL v31 = v10 > v30;
  int v32 = *(_DWORD *)(a1 + 24);
  BOOL v33 = v32 < v29;
  if (v32 > v29) {
    int v29 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v29;
  return v33 || v31;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForObject(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  *(_DWORD *)(a1 + 48) = 4;
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(v6 + 5912);
  if (a2 <= a3) {
    unsigned int v8 = a3;
  }
  else {
    unsigned int v8 = a2;
  }
  int v9 = 32 * v8;
  int v10 = 32 * a4;
  int v11 = *(_DWORD *)(v6 + 7816);
  if (v11 >= 0x3F) {
    int v12 = 63;
  }
  else {
    int v12 = *(_DWORD *)(v6 + 7816);
  }
  int v13 = (v12 << 12) + 0x10000;
  if (v11 >= 0) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 323584;
  }
  if ((a6 + 31) >> 5 >= 0x20) {
    unsigned int v15 = 32;
  }
  else {
    unsigned int v15 = (a6 + 31) >> 5;
  }
  unsigned int v16 = ((v10 + 6143) >> 12) + ((v9 + 17279) >> 12);
  unsigned int v17 = ((v9 + 78719) >> 16) + ((v10 + 67583) >> 16);
  unsigned int v18 = (a5 + 0x1FFF) >> 12;
  unsigned int v19 = (a5 + 69631) >> 16;
  if (a6) {
    unsigned int v20 = v15;
  }
  else {
    unsigned int v20 = 32;
  }
  unsigned int v21 = (a5 + 63) & 0xFFFFFFC0;
  if (*(_DWORD *)(v6 + 5864) == 21) {
    unsigned int v22 = 10;
  }
  else {
    unsigned int v22 = 14;
  }
  if (v22 >= v20) {
    unsigned int v23 = v20;
  }
  else {
    unsigned int v23 = v22;
  }
  unsigned int v24 = v19 + v17 * v23;
  unsigned int v25 = v24 + v16 * v20 + v18;
  int v26 = *(_DWORD *)(a1 + 108);
  unsigned int v27 = *(_DWORD *)(a1 + 112);
  if ((int)v25 <= (int)v27) {
    unsigned int v28 = *(_DWORD *)(a1 + 112);
  }
  else {
    unsigned int v28 = v24 + v16 * v20 + v18;
  }
  int v29 = *(_DWORD *)(a1 + 92) + (v28 + 64) * v7 + (v24 + v28) * v26;
  if (v7 < 2)
  {
    unint64_t v35 = 0;
    unint64_t v39 = 0;
  }
  else
  {
    int v30 = *(_DWORD *)(a1 + 72);
    unsigned int v31 = v27 * v30;
    LODWORD(v32) = 32 * v30;
    int v33 = v25 - 2;
    if (v25 >= 0x42) {
      int v33 = 64;
    }
    if (v33 <= 32) {
      uint64_t v34 = (unsigned __int16)(v33 - 1);
    }
    else {
      uint64_t v34 = 32;
    }
    if ((int)v32 >= (int)(v33 + v25)) {
      uint64_t v32 = v33 + v25 - 1;
    }
    else {
      uint64_t v32 = v32;
    }
    unint64_t v35 = (v33 << 16) | ((unint64_t)(unsigned __int16)(v25 - 1) << 32) | v34 | (v32 << 48);
    unsigned int v36 = v31 + 4194240;
    BOOL v37 = v31 >= v25 + 64;
    unsigned int v38 = v31 - (v25 + 64);
    if (!v37) {
      unsigned int v38 = 0;
    }
    if (v25 > v27) {
      unsigned int v36 = v38;
    }
    unint64_t v39 = (v33 + v25) & 0x3FFFFF | ((unint64_t)((v36 * v7) & 0x3FFFFF) << 22);
  }
  unsigned int v40 = v14 / v21;
  if (v40 >= 0x60) {
    int v41 = 96;
  }
  else {
    int v41 = v40;
  }
  unsigned int v42 = v41 * v20;
  if (v42 >= 0x60) {
    unsigned int v42 = 96;
  }
  if (v22 >= v42) {
    unsigned int v22 = v42;
  }
  if (v40 >= 8) {
    unsigned int v40 = 8;
  }
  int v43 = (v22 * v17 + v42 * v16 + v41 * v18 + v40 * v19) * v26;
  int v44 = *(_DWORD *)(a1 + 100);
  int v45 = v43 - v44;
  if (v43 <= v44) {
    int v45 = 0;
  }
  int v46 = *(unsigned __int8 *)(v6 + 7815);
  if (v43 <= v44) {
    int v47 = 0;
  }
  else {
    int v47 = *(_DWORD *)(a1 + 100);
  }
  int v48 = v47 + v27 + v45 + *(_DWORD *)(a1 + 96);
  if (v46) {
    int v49 = v48;
  }
  else {
    int v49 = v45 + *(_DWORD *)(a1 + 96);
  }
  int v50 = *(_DWORD *)(a1 + 4);
  if (v29 > v50)
  {
    *(_DWORD *)a1 = v28;
    *(_DWORD *)(a1 + 4) = v29;
    *(void *)(a1 + 8) = v35;
    *(void *)(a1 + 16) = v39;
  }
  BOOL v51 = v29 > v50;
  int v52 = *(_DWORD *)(a1 + 24);
  BOOL v53 = v52 < v49;
  if (v52 > v49) {
    int v49 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v49;
  return v53 || v51;
}

BOOL AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::checkSpillParamsForMesh(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6)
{
  *(_DWORD *)(a1 + 48) = 4;
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(v6 + 5912);
  if (a2 <= a3) {
    unsigned int v8 = a3;
  }
  else {
    unsigned int v8 = a2;
  }
  int v9 = 32 * v8;
  int v10 = 32 * a4;
  int v11 = *(_DWORD *)(v6 + 7816);
  if (v11 >= 0x3F) {
    int v12 = 63;
  }
  else {
    int v12 = *(_DWORD *)(v6 + 7816);
  }
  int v13 = (v12 << 12) + 0x10000;
  if (v11 >= 0) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = 323584;
  }
  unsigned int v15 = (a6 + 31) >> 5;
  if (v15 >= 0x20) {
    unsigned int v15 = 32;
  }
  if (!a6) {
    unsigned int v15 = 32;
  }
  unsigned int v16 = v14 / ((a5 + 63) & 0xFFFFFFC0);
  if (((a5 + 63) & 0xFFFFFFC0) == 0) {
    unsigned int v16 = 0x60u / v15;
  }
  if (v16 >= 0x10) {
    int v17 = 16;
  }
  else {
    int v17 = v16;
  }
  unsigned int v18 = v17 * v15;
  unsigned int v19 = ((v10 + 6143) >> 12) + ((v9 + 17279) >> 12);
  unsigned int v20 = ((v9 + 78719) >> 16) + ((v10 + 67583) >> 16);
  unsigned int v21 = (a5 + 69631) >> 16;
  if (v18 >= 0x60) {
    unsigned int v18 = 96;
  }
  if (v16 >= 8) {
    unsigned int v16 = 8;
  }
  if (*(_DWORD *)(v6 + 5864) == 21) {
    unsigned int v22 = 10;
  }
  else {
    unsigned int v22 = 14;
  }
  if (v22 >= v18) {
    unsigned int v22 = v18;
  }
  int v23 = v19 * v18;
  int v24 = v20 * v22;
  unsigned int v25 = ((a5 + 0x1FFF) >> 12) * v17;
  int v26 = v21 * v16;
  unsigned int v27 = v21 * v16 + v24;
  unsigned int v28 = v27 + v23 + v25;
  int v29 = *(_DWORD *)(a1 + 108);
  unsigned int v30 = *(_DWORD *)(a1 + 112);
  if ((int)v28 <= (int)v30) {
    unsigned int v31 = *(_DWORD *)(a1 + 112);
  }
  else {
    unsigned int v31 = v27 + v23 + v25;
  }
  int v32 = *(_DWORD *)(a1 + 92) + (v31 + 64) * v7 + (v27 + v31) * v29;
  if (v7 < 2)
  {
    unint64_t v39 = 0;
    unint64_t v44 = 0;
  }
  else
  {
    int v33 = *(_DWORD *)(a1 + 72);
    unsigned int v34 = v30 * v33;
    LODWORD(v35) = 32 * v33;
    int v36 = v28 - 2;
    if (v28 >= 0x42) {
      int v36 = 64;
    }
    if (v36 <= 32) {
      uint64_t v37 = (unsigned __int16)(v36 - 1);
    }
    else {
      uint64_t v37 = 32;
    }
    unsigned int v38 = v36 + v28;
    if ((int)v35 >= (int)(v36 + v28)) {
      uint64_t v35 = v36 + v28 - 1;
    }
    else {
      uint64_t v35 = v35;
    }
    unint64_t v39 = (v36 << 16) | ((unint64_t)(unsigned __int16)(v28 - 1) << 32) | v37 | (v35 << 48);
    unsigned int v40 = v34 + 4194240;
    BOOL v41 = v34 >= v28 + 64;
    unsigned int v42 = v34 - (v28 + 64);
    if (!v41) {
      unsigned int v42 = 0;
    }
    if (v28 <= v30) {
      unsigned int v43 = v40;
    }
    else {
      unsigned int v43 = v42;
    }
    unint64_t v44 = *(void *)&v38 & 0x3FFFFFLL | ((unint64_t)((v43 * v7) & 0x3FFFFF) << 22);
  }
  int v45 = (v25 + v26 + v23 + v24) * v29;
  int v46 = *(_DWORD *)(a1 + 100);
  int v47 = v45 - v46;
  if (v45 <= v46) {
    int v47 = 0;
  }
  int v48 = *(unsigned __int8 *)(v6 + 7815);
  if (v45 <= v46) {
    int v49 = 0;
  }
  else {
    int v49 = *(_DWORD *)(a1 + 100);
  }
  int v50 = v49 + v30 + v47 + *(_DWORD *)(a1 + 96);
  if (v48) {
    int v51 = v50;
  }
  else {
    int v51 = v47 + *(_DWORD *)(a1 + 96);
  }
  int v52 = *(_DWORD *)(a1 + 4);
  if (v32 > v52)
  {
    *(_DWORD *)a1 = v31;
    *(_DWORD *)(a1 + 4) = v32;
    *(void *)(a1 + 8) = v39;
    *(void *)(a1 + 16) = v44;
  }
  int v53 = *(_DWORD *)(a1 + 24);
  BOOL v54 = v53 < v51;
  if (v53 > v51) {
    int v51 = *(_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a1 + 24) = v51;
  return v54 || v32 > v52;
}

__n128 AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::allocateUSCSpillBuffer(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = 5936;
  if (*(_OWORD *)(v3 + 5936) == 0) {
    uint64_t v4 = 5952;
  }
  int32x2_t v5 = vmovn_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v3 + v4))))));
  unsigned __int32 v6 = vadd_s32(vdup_lane_s32(v5, 1), v5).u32[0];
  unsigned int v7 = *(_DWORD *)(v3 + 5912);
  if (a3)
  {
    unsigned int v8 = 2 * *(_DWORD *)(v3 + 5888) / v7 * v7;
    if (v8 < v6) {
      unsigned __int32 v6 = v8;
    }
  }
  int v9 = *(_DWORD *)(a1 + 4);
  int v11 = *(_DWORD *)(a1 + 40);
  unsigned __int32 v10 = *(_DWORD *)(a1 + 44);
  if (v11 < 1)
  {
    int v14 = 0;
    unsigned __int32 v13 = 0;
    int v18 = *(_DWORD *)(a1 + 24);
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 36);
    unsigned __int32 v13 = *(_DWORD *)(a1 + 32) + v12;
    int v14 = (v10 + v11 + v13) * v6;
    BOOL v15 = __OFSUB__(v12, *(_DWORD *)a1);
    int v16 = v12 - *(_DWORD *)a1;
    int v17 = v16 * v7;
    if ((v16 < 0) ^ v15 | (v16 == 0)) {
      int v17 = 0;
    }
    v9 += v14 + v17;
    int v18 = *(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 24) + v14;
  }
  a2[3].n128_u16[4] = 0;
  a2[2].n128_u32[2] = v11;
  a2[2].n128_u32[3] = v10;
  a2[3].n128_u32[0] = v13;
  a2[3].n128_u32[1] = v14;
  a2->n128_u64[0] = (uint64_t)(int)((v9 + 7) & 0xFFFFFFF8) << 12;
  a2->n128_u64[1] = (uint64_t)(int)((v18 + 7) & 0xFFFFFFF8) << 12;
  __n128 result = *(__n128 *)(a1 + 8);
  a2[1] = result;
  return result;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::mergeFrom(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  int v3 = *(_DWORD *)(a1 + 4);
  if (v2 > v3)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)(a1 + 4) = v2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  int32x2_t v4 = *(int32x2_t *)(a1 + 24);
  __int32 v5 = v4.i32[1];
  int v6 = *(_DWORD *)(a2 + 24);
  int32x2_t v7 = vrev64_s32(v4);
  __int32 v8 = v4.i32[0];
  if (v4.i32[0] <= v6) {
    __int32 v8 = *(_DWORD *)(a2 + 24);
  }
  *(_DWORD *)(a1 + 24) = v8;
  int v9 = *(_DWORD *)(a2 + 28);
  if (v4.i32[1] <= v9) {
    __int32 v5 = *(_DWORD *)(a2 + 28);
  }
  *(_DWORD *)(a1 + 28) = v5;
  int v10 = *(_DWORD *)(a2 + 32);
  int v11 = *(_DWORD *)(a1 + 32);
  int v12 = *(_DWORD *)(a1 + 36);
  BOOL v13 = v11 < v10;
  if (v11 > v10) {
    int v10 = *(_DWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 32) = v10;
  int v14 = *(_DWORD *)(a2 + 36);
  BOOL v15 = v12 < v14;
  if (v12 > v14) {
    int v14 = v12;
  }
  *(_DWORD *)(a1 + 36) = v14;
  signed int v16 = *(_DWORD *)(a2 + 40);
  signed int v17 = *(_DWORD *)(a1 + 40);
  signed int v18 = *(_DWORD *)(a1 + 44);
  if (v17 <= v16) {
    int v19 = *(_DWORD *)(a2 + 40);
  }
  else {
    int v19 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(a1 + 40) = v19;
  signed int v20 = *(_DWORD *)(a2 + 44);
  if (v18 <= v20) {
    int v21 = *(_DWORD *)(a2 + 44);
  }
  else {
    int v21 = v18;
  }
  v22.i64[0] = __PAIR64__(v17, v18);
  v22.u64[1] = (unint64_t)v7;
  v23.i64[0] = __PAIR64__(v16, v20);
  v23.i64[1] = __PAIR64__(v6, v9);
  *(_DWORD *)(a1 + 44) = v21;
  uint16x4_t v24 = (uint16x4_t)vmovn_s32(vcgtq_s32(v23, v22));
  v24.i16[0] = vmaxv_u16(v24);
  int v25 = v2 > v3 || v15;
  return (v24.i32[0] | v13 | v25) & 1;
}

uint64_t AGX::SpillInfoGen3<AGX::HAL200::Encoders,AGX::HAL200::Classes,AGX::HAL200::ObjClasses>::getSpillParamsForVertex(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5 = *(void *)(a2 + 56);
  int v6 = *(_DWORD *)(v5 + 5912);
  if (a3 <= a4) {
    unsigned int v7 = a4;
  }
  else {
    unsigned int v7 = a3;
  }
  int v8 = 32 * v7;
  unsigned int v9 = ((32 * a5 + 6143) >> 12) + ((v8 + 17279) >> 12);
  unsigned int v10 = ((v8 + 78719) >> 16) + ((32 * a5 + 67583) >> 16);
  unsigned int v11 = v10 + v9;
  int v12 = *(_DWORD *)(a2 + 108);
  unsigned int v13 = *(_DWORD *)(a2 + 112);
  int v14 = *(_DWORD *)(a2 + 92);
  if (v6 < 2)
  {
    unint64_t v20 = 0;
    unint64_t v24 = 0;
  }
  else
  {
    int v15 = *(_DWORD *)(a2 + 72);
    unsigned int v16 = v13 * v15;
    LODWORD(v17) = 32 * v15;
    int v18 = v11 - 2;
    if (v11 >= 0x42) {
      int v18 = 64;
    }
    if (v18 <= 32) {
      uint64_t v19 = (unsigned __int16)(v18 - 1);
    }
    else {
      uint64_t v19 = 32;
    }
    if ((int)v17 >= (int)(v18 + v11)) {
      uint64_t v17 = v18 + v11 - 1;
    }
    else {
      uint64_t v17 = v17;
    }
    unint64_t v20 = (v18 << 16) | ((unint64_t)(unsigned __int16)(v11 - 1) << 32) | v19 | (v17 << 48);
    unsigned int v21 = v16 + 4194240;
    BOOL v22 = v16 >= v11 + 64;
    unsigned int v23 = v16 - (v11 + 64);
    if (!v22) {
      unsigned int v23 = 0;
    }
    if (v11 <= v13) {
      unsigned int v23 = v21;
    }
    unint64_t v24 = (v18 + v11) & 0x3FFFFF | ((unint64_t)((v23 * v6) & 0x3FFFFF) << 22);
  }
  if (*(_DWORD *)(v5 + 5864) == 21) {
    int v25 = 10;
  }
  else {
    int v25 = 14;
  }
  int v26 = (v25 * v10 + 96 * v9) * v12;
  int v28 = *(_DWORD *)(a2 + 96);
  int v27 = *(_DWORD *)(a2 + 100);
  int v29 = *(unsigned __int8 *)(v5 + 7815);
  int v30 = v26 - v27;
  if (v26 <= v27) {
    int v30 = 0;
  }
  int v31 = v30 + v28;
  if (v26 <= v27) {
    int v32 = 0;
  }
  else {
    int v32 = v27;
  }
  int v33 = v32 + v13 + v31;
  if (v29) {
    int v34 = v33;
  }
  else {
    int v34 = v31;
  }
  if ((int)v11 <= (int)v13) {
    unsigned int v11 = v13;
  }
  *(_DWORD *)__n128 result = v11;
  *(_DWORD *)(result + 4) = v14 + (v11 + 64) * v6 + (v11 + v10) * v12;
  *(void *)(result + 8) = v20;
  *(void *)(result + 16) = v24;
  *(_DWORD *)(result + 24) = v34;
  return result;
}

void AGX::TextureGen4<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::texBaseAddressesUpdated(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return;
  }
  uint64_t v1 = a1;
  int v2 = *(uint64_t **)(a1 + 208);
  BOOL v3 = *((_DWORD *)v2 + 6) >= 2u && *((_DWORD *)v2 + 20) == 0;
  uint64_t v4 = *(void *)(a1 + 24);
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  if (v4 == 9)
  {
    unsigned int v6 = (v5 + 0x3FFF) >> 14;
    LOWORD(v7) = 1;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 132);
    int v7 = *(_DWORD *)(a1 + 136);
  }
  __int16 v265 = v7;
  uint64_t v8 = v2[1];
  uint64_t v291 = *((unsigned int *)v2 + 21);
  uint64_t v294 = *v2;
  long long v298 = (void *)(a1 + 380);
  unint64_t v9 = *(void *)(a1 + 380);
  unsigned int v10 = *(_DWORD *)(a1 + 196);
  int v277 = *(_DWORD *)(a1 + 192);
  int v11 = *((_DWORD *)v2 + 16);
  int v283 = *(_DWORD *)(a1 + 140);
  unsigned int v280 = *(_DWORD *)(a1 + 112);
  unsigned int v12 = *(_DWORD *)(a1 + 376);
  unint64_t v268 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, 0);
  size_t v287 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v1, 0);
  if (!v3)
  {
    unint64_t v13 = 0;
    size_t v272 = 0;
    *(void *)uint64_t v275 = *(void *)(v1 + 72);
    uint64_t GPUVirtualAddress = *(void *)(v1 + 488);
    if (!GPUVirtualAddress) {
      goto LABEL_16;
    }
LABEL_13:
    if (*(_DWORD *)(GPUVirtualAddress + 1080)) {
      uint64_t GPUVirtualAddress = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(GPUVirtualAddress, 0, 0, 0, 0);
    }
    else {
      uint64_t GPUVirtualAddress = 0;
    }
    goto LABEL_16;
  }
  size_t v272 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v1, 1u);
  *(void *)uint64_t v275 = *(void *)(v1 + 72);
  unint64_t v13 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v1, 0, 0, 0, 1u);
  uint64_t GPUVirtualAddress = *(void *)(v1 + 488);
  if (GPUVirtualAddress) {
    goto LABEL_13;
  }
LABEL_16:
  if (v5 >= 0x4000) {
    __int16 v15 = 0x4000;
  }
  else {
    __int16 v15 = v5;
  }
  if (v4 == 9) {
    __int16 v16 = v15;
  }
  else {
    __int16 v16 = v5;
  }
  int8x8_t v17 = vand_s8((int8x8_t)vshl_u32((uint32x2_t)vshl_s32(vdup_n_s32(v11 | 8u), vneg_s32(vmul_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v10), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL), (int32x2_t)0x300000003))), (uint32x2_t)0xC00000009), (int8x8_t)0x700000000E00);
  if ((v9 & 0xFC) != 0) {
    int v18 = 0;
  }
  else {
    int v18 = v9;
  }
  if ((_BYTE)v9 && BYTE1(v9) == 1)
  {
    unsigned int v19 = v6;
    if (!BYTE2(v9))
    {
      uint64_t v21 = 0;
      uint64_t v20 = v291;
      goto LABEL_55;
    }
    uint64_t v20 = v291;
    if ((v9 & 0x10000) != 0)
    {
      uint64_t v21 = 1;
      goto LABEL_55;
    }
    goto LABEL_29;
  }
  unsigned int v19 = v6;
  if (BYTE1(v9) == 2 && (v9 & 0x30000) == 0)
  {
    uint64_t v21 = 2;
    uint64_t v20 = v291;
    goto LABEL_55;
  }
  uint64_t v20 = v291;
  if ((_BYTE)v9)
  {
    if (BYTE1(v9) != 2)
    {
      if (BYTE1(v9) == 3)
      {
        uint64_t v21 = 5;
        if (BYTE2(v9)) {
          uint64_t v21 = 0;
        }
        goto LABEL_55;
      }
      if (BYTE1(v9) == 4)
      {
        if (!BYTE2(v9))
        {
          uint64_t v21 = 6;
          goto LABEL_55;
        }
        if ((v9 & 0x10000) != 0)
        {
          uint64_t v21 = 7;
          goto LABEL_55;
        }
      }
      goto LABEL_29;
    }
    if ((BYTE2(v9) & 3) == 3)
    {
      uint64_t v21 = 8;
      goto LABEL_55;
    }
    if ((v9 & 0x10000) == 0)
    {
      if ((v9 & 0x20000) != 0)
      {
        uint64_t v21 = 4;
        goto LABEL_55;
      }
      goto LABEL_29;
    }
LABEL_50:
    uint64_t v21 = 3;
    goto LABEL_55;
  }
  if (BYTE1(v9) == 2 && (v9 & 0x10000) != 0) {
    goto LABEL_50;
  }
LABEL_29:
  uint64_t v21 = 0;
LABEL_55:
  unsigned int v22 = HIBYTE(v10);
  unsigned int v23 = ((v11 | 8) >> (3 * v10)) & 7;
  if (v23 > 5) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = qword_242EAA870[v23];
  }
  int v25 = v298;
  if (((unsigned __int32)v17.i32[0] >> 9) > 5u) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = qword_242EAA8A0[(unsigned __int32)v17.i32[0] >> 9];
  }
  int v27 = (v11 | 8) >> (3 * v22);
  if (((unsigned __int32)v17.i32[1] >> 12) > 5u) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = qword_242EAA8D0[(unsigned __int32)v17.i32[1] >> 12];
  }
  int v30 = (const float *)(v1 + 236);
  int v29 = *(_DWORD *)(v1 + 236);
  unsigned int v31 = v27 & 7;
  if (v31 > 5) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = qword_242EAA900[v31];
  }
  int v33 = *(uint64_t **)(v1 + 208);
  BOOL v34 = v277 == 4 || (v277 & 0xFFFFFFFD) == 1;
  if (v34) {
    __int16 v35 = v19;
  }
  else {
    __int16 v35 = v16;
  }
  if (!v34) {
    __int16 v16 = v19;
  }
  unint64_t v36 = ((v294 & 0x7F) << 6) & 0x1FFF | ((unint64_t)(v8 & 7) << 13) | ((unint64_t)((v35 - 1) & 0x3FFF) << 28) | ((unint64_t)((v16 - 1) & 0x3FFF) << 42) | ((unint64_t)((v280 >> 2) & 3) << 56) | ((unint64_t)(GPUVirtualAddress != 0) << 59) | (16 * v18) | (unint64_t)v21 | v24 | v26 | v28 | v32;
  if (v283 == 1)
  {
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v37 = v36 & 0xFBFFFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v37 = v36 | 0x400000000000000;
    uint64_t v38 = (unint64_t)(16 * (((_BYTE)v283 - 1) & 0xFu)) << 44;
    unint64_t v39 = 0x8000000000000000;
  }
  uint64_t v40 = *(unsigned int *)(v1 + 308);
  int v41 = *(_DWORD *)(v1 + 312);
  int v42 = *((_DWORD *)v33 + 18);
  uint64_t v43 = v39 | (*(void *)v275 >> 4) & 0xFFFFFFFFFFFLL;
  uint64_t v44 = *(void *)(v1 + 32);
  int v45 = 1;
  switch((int)v20)
  {
    case 0:
      goto LABEL_100;
    case 1:
    case 2:
    case 4:
      uint64_t v20 = 0x300000000000;
      if ((v9 & 0x40000) != 0) {
        goto LABEL_86;
      }
      goto LABEL_80;
    case 3:
      int v45 = 0;
      uint64_t v20 = 0x100000000000;
      if ((v9 & 0x40000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_86;
    default:
      int v45 = 0;
      uint64_t v20 = 0;
      if ((v9 & 0x40000) != 0)
      {
LABEL_86:
        uint64_t v47 = v44 - 563;
        if (unint64_t)(v44 - 563) < 0x3A && ((0x3F7F00000701C7FuLL >> v47))
        {
          uint64_t v20 = qword_242EAA930[v47];
          goto LABEL_100;
        }
      }
      else
      {
LABEL_80:
        char v46 = v44 - 74;
        if ((unint64_t)(v44 - 586) <= 0x37)
        {
          if (((1 << v46) & 0x84090000140002) != 0)
          {
            uint64_t v20 = 0x300000000000;
            goto LABEL_100;
          }
          if (((1 << v46) & 0x42023800000000) != 0)
          {
            uint64_t v20 = 0x200000000000;
            goto LABEL_100;
          }
          if (((1 << v46) & 0x40000000001) != 0)
          {
            uint64_t v20 = 0x100000000000;
            goto LABEL_100;
          }
        }
      }
      if (v45)
      {
        if (v294 == 10 || v294 == 40) {
          uint64_t v20 = 0x300000000000;
        }
        else {
          uint64_t v20 = 0x100000000000;
        }
      }
LABEL_100:
      uint64_t v49 = v20 & 0xFF00000000000 | v43;
      if (v18 != 3 && v18)
      {
        unint64_t v52 = v20 & 0x300000000000 | v43 & 0x80003FFFFFFFFFFFLL;
        int v50 = v287;
        if (v12 < 2) {
          unsigned __int16 v53 = v265 - 1;
        }
        else {
          unsigned __int16 v53 = v12 - 1;
        }
        unint64_t v51 = v52 | ((unint64_t)v53 << 46);
        if (!(_BYTE)v9) {
          goto LABEL_124;
        }
      }
      else
      {
        int v50 = v287;
        unint64_t v51 = v49 & 0x80003FFFFFFFFFFFLL | ((v287 << 46) + 0x3FFFC00000000000) & 0x3FFFC00000000000;
        if (!(_BYTE)v9) {
          goto LABEL_124;
        }
      }
      if (!v29)
      {
        unsigned int v54 = BYTE1(v9) - 3;
        if ((v9 & 0x10000) != 0 || v54 <= 1)
        {
          unsigned int v55 = 1;
          if (v54 >= 2 && ((BYTE1(v9) == 1) & WORD1(v9)) == 0) {
            unsigned int v55 = (BYTE1(v9) == 2) & WORD1(v9);
          }
          BOOL v57 = (v268 & 0xFFFFFFFFFFFFC000) != 0 && v9 - 1 < 2;
          BOOL v34 = (v57 & v55) == 0;
          uint64_t v58 = 0x4000000000000000;
          if (v34) {
            uint64_t v58 = 0;
          }
          unint64_t v51 = v51 & 0xBFFFFFFFFFFFFFFFLL | v58;
        }
      }
LABEL_124:
      if ((v37 & 0x3F) == 3)
      {
        unint64_t v59 = 0;
        v51 |= 0x8000000000000000;
        uint64_t v60 = (((unint64_t)(v19 * v50) << 8) + 0x3FFFFFFFF0) & 0x3FFFFFF800;
        uint64_t v61 = ((_WORD)v12 - 1) & 0x7FF | (unint64_t)v38;
LABEL_126:
        uint64_t v38 = v60 | v61;
        goto LABEL_150;
      }
      int v62 = ((v9 & 0xFF00) == 512) & (BYTE2(v9) >> 2);
      if (!v62)
      {
        unint64_t v59 = 0;
        if ((unint64_t)(v44 - 586) > 0x2B || ((1 << (v44 - 74)) & 0xC0000000003) == 0) {
          goto LABEL_138;
        }
      }
      v51 |= 0x8000000000000000;
      if v40 <= 0x1F && ((0xF00001FF >> v40))
      {
        unint64_t v59 = qword_242EAAB00[v40];
        if (v62) {
          goto LABEL_133;
        }
LABEL_138:
        unint64_t v66 = v9 >> 40;
        if (!v13) {
          goto LABEL_149;
        }
LABEL_139:
        v51 |= 0x8000000000000000;
        uint64_t v38 = ((v272 << 44) + 0xFFFF00000000000) & 0xFFFF00000000000 | (v13 >> 4) & 0xFFFFFFFFFFFLL;
        if ((v37 & 0x800000000000000) != 0)
        {
          uint64_t v38 = ((v272 << 44) + 0xFFFF00000000000) & 0xFFFF00000000000 | (v13 >> 4) & 0xFFFFFFFFFFFLL | ((v66 & 3) << 60);
          unint64_t v59 = v59 & 0xFFFFFFFFFFFFFFFCLL | HIWORD(v9) & 3;
        }
        goto LABEL_150;
      }
      unint64_t v59 = 0;
      if (!v62) {
        goto LABEL_138;
      }
LABEL_133:
      uint64_t v63 = 0;
      if ((v9 & 0x40000) != 0 && v42 != 1)
      {
        uint64_t v63 = 512;
        switch(v41)
        {
          case 1:
            BOOL v64 = v42 == 2;
            uint64_t v63 = 768;
            uint64_t v65 = 256;
            goto LABEL_146;
          case 3:
            uint64_t v63 = 256;
            break;
          case 4:
            break;
          case 5:
            BOOL v64 = v42 == 2;
            uint64_t v63 = 1280;
            uint64_t v65 = 256;
            goto LABEL_146;
          case 6:
            BOOL v64 = v42 == 2;
            uint64_t v63 = 1536;
            goto LABEL_145;
          default:
            BOOL v64 = v42 == 2;
            uint64_t v63 = 1024;
LABEL_145:
            uint64_t v65 = 512;
LABEL_146:
            if (v64) {
              uint64_t v63 = v65;
            }
            break;
        }
      }
      v59 |= v63;
      unint64_t v66 = v9 >> 40;
      if (v13) {
        goto LABEL_139;
      }
LABEL_149:
      if ((v37 & 0x800000000000000) != 0)
      {
        v51 |= 0x8000000000000000;
        *((void *)&v84 + 1) = v66;
        *(void *)&long long v84 = GPUVirtualAddress;
        uint64_t v61 = v38 & 0xFF00000000000;
        uint64_t v60 = (v84 >> 4) & 0x30000FFFFFFFFFFFLL;
        goto LABEL_126;
      }
LABEL_150:
      unint64_t v67 = v37 & 0xEFFFFFFFFFFFFFFFLL | ((unint64_t)(v29 != 0) << 60);
      switch(v29)
      {
        case 0x40000:
          v67 |= 0x6000000000000000uLL;
          break;
        case 0x10000:
          unint64_t v67 = v67 & 0x9FFFFFFFFFFFFFFFLL | 0x4000000000000000;
          break;
        case 0x4000:
          unint64_t v67 = v67 & 0x9FFFFFFFFFFFFFFFLL | 0x2000000000000000;
          break;
      }
      unint64_t v68 = v67 | ((unint64_t)*(unsigned int *)(v1 + 512) << 63);
      uint64_t v69 = v1 + 400;
      *(void *)(v1 + 408) = v51;
      *(void *)(v1 + 416) = v38;
      *(void *)(v1 + 424) = v59;
      unsigned int v70 = *(_DWORD *)(v1 + 144);
      int v71 = v70 + *(_DWORD *)(v1 + 108) - 1;
      if (v71 | v70 || (v67 & 0x400000000000000) != 0)
      {
        unint64_t v72 = v68 | 0x400000000000000;
        *(void *)(v1 + 408) = v51 | 0x8000000000000000;
        *(void *)(v1 + 416) = v38 & 0xF0000FFFFFFFFFFFLL | ((unint64_t)(v70 & 0xF | (16 * (v71 & 0xF))) << 44);
      }
      else
      {
        unint64_t v72 = v68 & 0xFBFFFFFFFFFFFFFFLL;
      }
      *(void *)uint64_t v69 = v72;
      unint64_t v73 = *v298;
      uint64_t v276 = v1;
      long long v292 = (const float *)(v1 + 236);
      if ((*v298 & 0x20000) != 0)
      {
        uint64_t v76 = *(void *)(v1 + 24);
      }
      else
      {
        uint64_t v278 = *v33;
        uint64_t v273 = v33[1];
        unsigned int v74 = *((_DWORD *)v33 + 17);
        BOOL v75 = *((_DWORD *)v33 + 6) >= 2u && *((_DWORD *)v33 + 20) == 0;
        int v269 = *(_DWORD *)(v1 + 192);
        int v77 = *(_DWORD *)(v1 + 196);
        unsigned int v78 = (0x58D1000u >> (3 * BYTE1(v77))) & 0xE00;
        unsigned int v79 = (0x2C688000u >> (3 * BYTE2(v77))) & 0x7000;
        unsigned int v80 = (0x2C688u >> (3 * HIBYTE(v77))) & 7;
        int v81 = (v74 >> 6) & 7;
        unsigned int v82 = (0x2C688u >> (3 * *(_DWORD *)(v1 + 196))) & 7;
        if (v82 == v81)
        {
          int v83 = 128;
        }
        else if (v81 == v78 >> 9)
        {
          int v83 = 192;
        }
        else if (v81 == v79 >> 12)
        {
          int v83 = 256;
        }
        else if (v80 == v81)
        {
          int v83 = 320;
        }
        else
        {
          int v83 = v81 << 6;
        }
        int v85 = (v74 >> 9) & 7;
        if (v82 == v85)
        {
          int v86 = 1024;
        }
        else if (v85 == v78 >> 9)
        {
          int v86 = 1536;
        }
        else if (v85 == v79 >> 12)
        {
          int v86 = 2048;
        }
        else if (v80 == v85)
        {
          int v86 = 2560;
        }
        else
        {
          int v86 = v85 << 9;
        }
        int v87 = (v74 >> 12) & 7;
        if (v82 == v87)
        {
          int v88 = 0x2000;
        }
        else if (v87 == v78 >> 9)
        {
          int v88 = 12288;
        }
        else if (v87 == v79 >> 12)
        {
          int v88 = 0x4000;
        }
        else if (v80 == v87)
        {
          int v88 = 20480;
        }
        else
        {
          int v88 = v87 << 12;
        }
        int v89 = (v74 >> 15) & 7;
        uint64_t v295 = v1 + 400;
        if (v82 == v89)
        {
          int v90 = 0x10000;
        }
        else if (v89 == v78 >> 9)
        {
          int v90 = 98304;
        }
        else if (v89 == v79 >> 12)
        {
          int v90 = 0x20000;
        }
        else if (v80 == v89)
        {
          int v90 = 163840;
        }
        else
        {
          int v90 = v89 << 15;
        }
        uint64_t v266 = *(unsigned int *)(v276 + 388);
        int v262 = *((_DWORD *)v33 + 18);
        int v263 = *((_DWORD *)v33 + 21);
        unint64_t v261 = *(void *)(v276 + 72);
        unsigned int v284 = v40;
        int v281 = v41;
        if (v75) {
          unint64_t v260 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v276, 0, 0, 0, 1u);
        }
        else {
          unint64_t v260 = 0;
        }
        int v91 = v90 | v88;
        uint64_t v92 = *(void *)(v276 + 488);
        if (v92 && *(_DWORD *)(v92 + 1080)) {
          uint64_t v258 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getGPUVirtualAddress(v92, 0, 0, 0, 0);
        }
        else {
          uint64_t v258 = 0;
        }
        unsigned int v259 = v91 | v86 | v83;
        uint64_t v1 = v276;
        int v257 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v276, 0);
        int v93 = 0;
        if (v75) {
          int v93 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getStride<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Units)2,(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::Op)0>(v276, 1u);
        }
        uint64_t v76 = *(void *)(v276 + 24);
        unsigned int v94 = *(_DWORD *)(v276 + 128);
        if (v94 >= 0x4000) {
          __int16 v95 = 0x4000;
        }
        else {
          __int16 v95 = *(_DWORD *)(v276 + 128);
        }
        if (v76 == 9) {
          __int16 v96 = v95;
        }
        else {
          __int16 v96 = *(_DWORD *)(v276 + 128);
        }
        unint64_t v288 = v73;
        if (v76 == 9)
        {
          unsigned int v98 = (v94 + 0x3FFF) >> 14;
          LOWORD(v97) = 1;
        }
        else
        {
          unsigned int v98 = *(_DWORD *)(v276 + 132);
          int v97 = *(_DWORD *)(v276 + 136);
        }
        unsigned int v99 = *(_DWORD *)(v276 + 140);
        unsigned int v70 = *(_DWORD *)(v276 + 144);
        int v100 = *(_DWORD *)(v276 + 376);
        unint64_t v101 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v276, 0);
        int v29 = *(_DWORD *)(v276 + 236);
        AGX::PBEStateEncoderGen9<kAGXRevHAL200>::StateFields::StateFields((unint64_t *)v300, 1, v278, v273, v269, v259, v288, v266, v263, v284, v281, v262, v261, v260, v258, v257, v93, v96, v98,
          v97,
          1u,
          v70,
          v99,
          v100,
          v101,
          1u,
          0,
          v29,
          *(void *)(v276 + 32),
          0);
        long long v102 = v300[1];
        *(_OWORD *)(v276 + 432) = v300[0];
        *(_OWORD *)(v276 + 448) = v102;
        uint64_t v69 = v295;
        int v25 = v298;
        unint64_t v73 = *v298;
        int v30 = v292;
      }
      if (v76 == 9)
      {
        LODWORD(v103) = *(_DWORD *)(v1 + 128);
        goto LABEL_281;
      }
      unsigned int v104 = v29;
      if (v29 && *(unsigned char *)(v1 + 232) || (*(unsigned char *)(v1 + 40) & 0x20) == 0) {
        goto LABEL_280;
      }
      unint64_t v105 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v1, 0);
      unint64_t v106 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v1, v70, 0);
      if (*(unsigned char *)(v1 + 16)) {
        goto LABEL_227;
      }
      if (*(unsigned char *)(v1 + 232))
      {
        unint64_t v107 = *(void *)(v1 + 320);
      }
      else if (v104)
      {
        unint64_t v107 = v104;
      }
      else
      {
        if (BYTE1(v73) == 1) {
          char v108 = BYTE2(v73) & 1;
        }
        else {
          char v108 = 0;
        }
        char v109 = 1;
        if (BYTE1(v73) - 3 >= 2 && (v108 & 1) == 0)
        {
          if (BYTE1(v73) == 2) {
            char v109 = BYTE2(v73) & 1;
          }
          else {
            char v109 = 0;
          }
        }
        unsigned int v110 = (v73 - 1);
        if (v110 <= 1 && v105 >= 0x4000 && (v109 & 1) != 0)
        {
          unint64_t v107 = 0x4000;
        }
        else
        {
          if (v110 < 3)
          {
LABEL_227:
            unint64_t v107 = 128;
            goto LABEL_253;
          }
          BOOL v112 = (v73 & 0x10000) != 0 && BYTE1(v73) == 2 && v73 == 0;
          unint64_t v107 = 128;
          if (!v112) {
            unint64_t v107 = 16;
          }
        }
      }
LABEL_253:
      if (!(_BYTE)v73)
      {
LABEL_280:
        LODWORD(v103) = 0;
        goto LABEL_281;
      }
      uint64_t v113 = v73 & 0xFFFF00;
      if ((v73 & 0xFFFF00) != 0x300 && (v73 & 0x1FF00) != 0x10200 && (v73 & 0x1FF00) != 0x10100)
      {
        if (v113 == 512 || v113 == 256)
        {
          unint64_t v103 = v106 >> 7;
          goto LABEL_281;
        }
        goto LABEL_280;
      }
      char v114 = 2;
      if (*(unsigned char *)(*(void *)(v1 + 208) + 49) == 8) {
        char v114 = 3;
      }
      BOOL v115 = v107 > 0x80;
      BOOL v116 = v107 > 0x80;
      unint64_t v117 = (((*(unsigned int *)(v1 + 132) * (unint64_t)*(unsigned int *)(v1 + 128)) << v114) + 0x3FFF) & 0xFFFFFFFFFFFFC000;
      if (v115) {
        char v118 = 14;
      }
      else {
        char v118 = 7;
      }
      if (v115) {
        unint64_t v119 = v117;
      }
      else {
        unint64_t v119 = 0;
      }
      unint64_t v120 = (v105 - v119) >> v118;
      BOOL v121 = (v106 & 0x3FFF) == 0;
      unint64_t v122 = v106 - v117;
      if (!v106) {
        unint64_t v122 = 0;
      }
      BOOL v123 = !v121 || !v116;
      if (v121 && v116) {
        unint64_t v124 = v122;
      }
      else {
        unint64_t v124 = v105 - v106;
      }
      if (v123) {
        char v125 = 7;
      }
      else {
        char v125 = 14;
      }
      unint64_t v126 = v124 >> v125;
      if (v123) {
        unsigned __int16 v127 = v126 - 20839;
      }
      else {
        unsigned __int16 v127 = v126;
      }
      LODWORD(v103) = v127 | ((unsigned __int16)v120 << 16);
LABEL_281:
      long long v128 = *(_OWORD *)(v69 + 16);
      v300[0] = *(_OWORD *)v69;
      v300[1] = v128;
      long long v129 = *(_OWORD *)(v1 + 448);
      v300[2] = *(_OWORD *)(v1 + 432);
      long long v301 = v129;
      uint64_t v130 = (os_unfair_lock_s *)(*(void *)(v1 + 472) + 56);
      os_unfair_lock_lock(v130);
      uint64_t v131 = *(void **)(v1 + 472);
      uint64_t v132 = *(unsigned int *)(v1 + 464);
      uint64_t v133 = (int)*MEMORY[0x263F4B188];
      char v134 = (_OWORD *)(*(void *)(v131[1] + v133 + 24) + 32 * v132);
      int v135 = (_OWORD *)(*(void *)(v131[2] + v133 + 24) + 32 * v132);
      uint64_t v136 = *(void *)(v131[3] + v133 + 24);
      _OWORD *v134 = v300[0];
      v134[1] = v300[1];
      v135[1] = v301;
      _OWORD *v135 = v300[2];
      *(_DWORD *)(v136 + 4 * v132) = v103;
      os_unfair_lock_unlock(v130);
      if (!*(unsigned char *)(v1 + 240)) {
        return;
      }
      unint64_t v264 = v1 + 240;
      unint64_t v137 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v1, 0);
      unint64_t v138 = *(unsigned int *)(v1 + 236);
      uint64_t v139 = *v25 & 0xFF00;
      if (v139 == 768)
      {
        unsigned int v140 = *(_DWORD *)(v1 + 136);
      }
      else if ((*v25 & 0x10000) != 0 || v139 == 1024)
      {
        if (v139 == 1024) {
          unsigned int v140 = 6 * *(_DWORD *)(v1 + 376);
        }
        else {
          unsigned int v140 = *(_DWORD *)(v1 + 376);
        }
      }
      else
      {
        unsigned int v140 = 1;
      }
      uint64_t v141 = v1;
      uint64_t v142 = v138 - 1;
      uint64_t v303 = 0;
      uint64_t v304 = 0;
      long long v301 = 0u;
      long long v302 = 0u;
      unint64_t v143 = (8
            * ((v138 - 1 + ((v137 + (v138 << 8) - 1) & -(uint64_t)(v138 << 8)))
             / v138)
            + 2047) & 0xFFFFFFFFFFFFF800;
      uint64_t v144 = v140;
      memset(v300, 0, sizeof(v300));
      AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::calcSparseParams(v141, (uint64_t)v300, &v304, &v303);
      uint64_t v145 = -(uint64_t)v138;
      unsigned int v146 = __clz(((unint64_t)(-(int)v138 & (v142 + v304)) + v142) / v138);
      int v147 = -v146;
      uint64_t v148 = ((4 << -(char)v146) + 12);
      unint64_t v285 = ((unint64_t)(-(int)v138 & (v142 + v304)) + v142) / v138;
      unint64_t v149 = v285;
      uint64_t v150 = v303 + v143 * v144;
      uint64_t v151 = v285 + v138 - 1;
      uint64_t v152 = *(void *)(v141 + 72);
      uint64_t v296 = v150;
      uint64_t v289 = *(void *)(v141 + 296);
      int v270 = (_DWORD *)(v289 + v150);
      int v153 = (uint32x2_t *)(v289 + v150 - (v303 & 0xFFFFFFFFFFFFFFFCLL));
      v153[1] = vshl_u32((uint32x2_t)0x100000001, *(uint32x2_t *)((char *)&v300[2] + 4));
      uint32x2_t *v153 = *(uint32x2_t *)((char *)&v300[1] + 12);
      v153[2].i32[0] = BYTE9(v301);
      v153[2].i32[1] = ((AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(v141, 0)+ (*(_DWORD *)(v141 + 236) << 8)- 1) & -(uint64_t)(*(_DWORD *)(v141 + 236) << 8))/ *(unsigned int *)(v141 + 236);
      v153[20].i32[0] = 0;
      unsigned int v154 = (*(_DWORD *)(v141 + 128) + *(_DWORD *)(v141 + 216) - 1) / *(_DWORD *)(v141 + 216);
      unsigned int v155 = (*(_DWORD *)(v141 + 132) + *(_DWORD *)(v141 + 220) - 1) / *(_DWORD *)(v141 + 220);
      uint64_t v156 = v141;
      if (v154 < 2) {
        unsigned int v157 = 0;
      }
      else {
        unsigned int v157 = 32 - __clz(~(-1 << -(char)__clz(v154 - 1)));
      }
      int v274 = *(unsigned __int8 *)(*(void *)(v141 + 208) + 88);
      unsigned int v158 = *(_DWORD *)(v141 + 64);
      if (v155 < 2) {
        unsigned int v159 = 0;
      }
      else {
        unsigned int v159 = 32 - __clz(~(-1 << -(char)__clz(v155 - 1)));
      }
      uint64_t v160 = (*(_DWORD *)(v141 + 112) * v274);
      unint64_t v161 = *(unsigned int *)v30;
      if (v158 < 2)
      {
LABEL_302:
        unsigned int v162 = 1;
      }
      else
      {
        unsigned int v162 = 0;
        while (1)
        {
          char v163 = v157 - v162;
          if (v157 < v162) {
            char v163 = 0;
          }
          char v164 = v159 - v162;
          if (v159 < v162) {
            char v164 = 0;
          }
          if (v160 << (v163 + v164) < v161) {
            break;
          }
          if (v158 == ++v162) {
            goto LABEL_302;
          }
        }
      }
      uint64_t v165 = (v296 + v151 + v148) & v145;
      uint64_t v166 = v289 + v148 + v296;
      unsigned int v167 = *(_DWORD *)(v141 + 140) - 1;
      if (v162 < v167)
      {
        if (v154 < 2) {
          unsigned int v168 = 0;
        }
        else {
          unsigned int v168 = 32 - __clz(~(-1 << -(char)__clz(v154 - 1)));
        }
        unsigned int v169 = 32 - __clz(~(-1 << -(char)__clz(v155 - 1)));
        if (v155 >= 2) {
          unsigned int v170 = v169;
        }
        else {
          unsigned int v170 = 0;
        }
        if (v158 < 2)
        {
LABEL_317:
          unsigned int v167 = 1;
        }
        else
        {
          unsigned int v167 = 0;
          while (1)
          {
            char v171 = v168 - v167;
            if (v168 < v167) {
              char v171 = 0;
            }
            char v172 = v170 - v167;
            if (v170 < v167) {
              char v172 = 0;
            }
            if (v160 << (v171 + v172) < v161) {
              break;
            }
            if (v158 == ++v167) {
              goto LABEL_317;
            }
          }
        }
      }
      unsigned int v173 = 0;
      uint64_t v267 = v152 + v296;
      unint64_t v174 = v165 + v152;
      v153[3].i32[1] = v167;
      int v175 = *(unsigned __int8 *)(v156 + 316);
      int v176 = v274;
      unsigned int v282 = v167;
      int v279 = v175;
      do
      {
        unsigned int v177 = *(_DWORD *)(v156 + 128);
        unsigned int v178 = *(_DWORD *)(v156 + 132);
        unsigned int v179 = v177 >> (v173 + *(unsigned char *)(v156 + 144));
        if (v179 <= 1) {
          unsigned int v179 = 1;
        }
        unsigned int v180 = v178 >> (v173 + *(unsigned char *)(v156 + 144));
        if (v180 <= 1) {
          unsigned int v180 = 1;
        }
        agxCalcSparseInputs(*(_DWORD *)(v156 + 236), v177, v178, *(_DWORD *)(v156 + 216), *(_DWORD *)(v156 + 220), *(_DWORD *)(v156 + 112) * v274, *(_DWORD *)(v156 + 64), 1u, 1u, 0, v173, v175 != 0, 0, 0, v179, v180, (uint64_t)v300);
        int v175 = v279;
        int v181 = HIDWORD(v300[2]);
        uint64_t v182 = 4 * v173;
        uint64_t v183 = (char *)v153 + v182;
        *((_DWORD *)v183 + 8) = HIDWORD(v300[2]);
        int v184 = v301;
        LODWORD(v182) = *(__int32 *)((char *)v153[20].i32 + v182);
        *((_DWORD *)v183 + 24) = v301;
        v153[20].i32[++v173] = v182 + v184 * v181;
      }
      while (v173 <= v282);
      v153[3].i32[0] = v153[20].i32[v282 + 1];
      *(void *)(v156 + 520) = v267;
      *int v270 = 0;
      uint64_t v185 = (1 << v147);
      v270[2] = 1 << v147;
      if (v285)
      {
        unint64_t v186 = 0;
        if (v285 < 0xCuLL || v285 == 0 || v285 >= 0xFFFFFFFE) {
          goto LABEL_334;
        }
        unint64_t v187 = v296 + v289 + 12;
        if ((unint64_t)v292 < v187 + 4 * v285 && v187 < v264)
        {
          unint64_t v186 = 0;
          do
          {
LABEL_334:
            v270[(v186 + 3)] = (v174 + (*(_DWORD *)v292 * v186)) >> 14;
            ++v186;
          }
          while (v285 != v186);
          goto LABEL_335;
        }
        uint64_t v188 = 0;
        unint64_t v186 = v285 - (v285 & 7);
        uint64x2_t v189 = (uint64x2_t)vdupq_n_s64(v174);
        int32x4_t v190 = (int32x4_t)xmmword_242EA7E20;
        int32x4_t v191 = (int32x4_t)vld1q_dup_f32(v292);
        v192.i64[0] = 0x400000004;
        v192.i64[1] = 0x400000004;
        v193.i64[0] = 0x800000008;
        v193.i64[1] = 0x800000008;
        do
        {
          uint32x4_t v194 = (uint32x4_t)vmulq_s32(v191, v190);
          uint32x4_t v195 = (uint32x4_t)vmulq_s32(v191, vaddq_s32(v190, v192));
          uint64_t v196 = &v270[v188 & 0xFFFFFFF8];
          *(int32x4_t *)(v196 + 3) = vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vaddw_u32(v189, *(uint32x2_t *)v194.i8), 0xEuLL), (int64x2_t)vaddw_high_u32(v189, v194), 0xEuLL);
          *(int32x4_t *)(v196 + 7) = vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vaddw_u32(v189, *(uint32x2_t *)v195.i8), 0xEuLL), (int64x2_t)vaddw_high_u32(v189, v195), 0xEuLL);
          v188 += 8;
          int32x4_t v190 = vaddq_s32(v190, v193);
        }
        while (v186 != v188);
        if ((v285 & 7) != 0) {
          goto LABEL_334;
        }
      }
LABEL_335:
      if (v185 <= v285) {
        goto LABEL_344;
      }
      unint64_t v197 = v185 - v285;
      if (v197 <= 0xB) {
        goto LABEL_343;
      }
      unint64_t v198 = ~(unint64_t)v285 + v185;
      if (-4 - (int)v285 < v198 || HIDWORD(v198)) {
        goto LABEL_343;
      }
      uint64_t v199 = 0;
      unint64_t v200 = v197 & 0xFFFFFFFFFFFFFFF8;
      int32x4_t v201 = vdupq_n_s32(0x3FB6EB0u);
      unint64_t v202 = v197 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        long long v203 = (int32x4_t *)&v270[(v285 + v199 + 3)];
        *long long v203 = v201;
        v203[1] = v201;
        v199 += 8;
        v202 -= 8;
      }
      while (v202);
      if (v197 != v200)
      {
        unint64_t v149 = v285 + v200;
        do
LABEL_343:
          v270[(v149++ + 3)] = 66809520;
        while (v185 != v149);
      }
LABEL_344:
      v270[1] = v285;
      uint64_t v204 = *v298 & 0xFF00;
      if ((*v298 & 0x10000) != 0)
      {
        if (v204 == 1024) {
          int v205 = 6 * *(_DWORD *)(v156 + 376);
        }
        else {
          int v205 = *(_DWORD *)(v156 + 376);
        }
        if (!v205) {
          return;
        }
      }
      else if (v204 == 768)
      {
        int v205 = *(_DWORD *)(v156 + 136);
        if (!v205) {
          return;
        }
      }
      else
      {
        int v205 = 1;
      }
      int v206 = 0;
      int v271 = v205;
      do
      {
        unsigned int v207 = 0;
        do
        {
          unsigned int v208 = *(_DWORD *)(v156 + 112) * v176;
          unsigned int v209 = *(_DWORD *)(v156 + 236);
          unsigned int v210 = *(_DWORD *)(v156 + 128);
          unsigned int v211 = *(_DWORD *)(v156 + 132);
          unsigned int v212 = *(_DWORD *)(v156 + 216);
          unsigned int v213 = *(_DWORD *)(v156 + 220);
          unsigned int v214 = *(_DWORD *)(v156 + 64);
          unsigned int v215 = *(_DWORD *)(v156 + 144) + v207;
          if (v210 >> (*(unsigned char *)(v156 + 144) + v207) <= 1) {
            int v216 = 1;
          }
          else {
            int v216 = v210 >> (*(unsigned char *)(v156 + 144) + v207);
          }
          unsigned int v217 = v211 >> v215;
          if (v217 <= 1) {
            int v218 = 1;
          }
          else {
            int v218 = v217;
          }
          unsigned int v286 = v207;
          agxCalcSparseInputs(v209, v210, v211, v212, v213, v208, v214, 1u, 1u, v206, v207, v175 != 0, 0, 0, v216, v218, (uint64_t)v300);
          char v219 = BYTE8(v300[2]);
          char v299 = BYTE4(v300[2]);
          int v220 = 1 << SBYTE8(v300[2]);
          int v297 = 1 << SBYTE4(v300[2]);
          unsigned int v221 = (v218 + v220 - 1) & -v220;
          unsigned int v293 = ((1 << v299) + v216 - 1) & -(1 << v299);
          if (v293) {
            BOOL v222 = v221 == 0;
          }
          else {
            BOOL v222 = 1;
          }
          if (!v222)
          {
            uint64_t v223 = (_DWORD *)&v153[20] + v286;
            int v224 = DWORD1(v300[1]);
            int v290 = v300[1];
            int v226 = DWORD2(v300[1]);
            int v225 = HIDWORD(v300[1]);
            int v227 = v300[2];
            int v228 = HIDWORD(v300[2]);
            int v229 = LODWORD(v300[2]) | HIDWORD(v300[1]);
            unsigned int v230 = 0;
            if (BYTE9(v301))
            {
              do
              {
                unsigned int v231 = 0;
                int v232 = (unsigned __int16)(v230 >> v299);
                do
                {
                  int v234 = (unsigned __int16)(v231 >> v219);
                  if (v229)
                  {
                    int v235 = 0;
                    int v233 = 0;
                    int v236 = 1;
                    BOOL v237 = v225 != 0;
                    BOOL v238 = v227 != 0;
                    int v239 = v225;
                    int v240 = v227;
                    do
                    {
                      int v241 = ((v236 & (v290 + v232)) << v235) | v233;
                      --v239;
                      if (v237)
                      {
                        int v242 = v235 + 1;
                      }
                      else
                      {
                        int v239 = 0;
                        int v241 = v233;
                        int v242 = v235;
                      }
                      int v233 = ((v236 & (v224 + v234)) << v242) | v241;
                      --v240;
                      if (v238)
                      {
                        int v243 = v242 + 1;
                      }
                      else
                      {
                        int v240 = 0;
                        int v233 = v241;
                        int v243 = v242;
                      }
                      v236 *= 2;
                      int v235 = v243 - 1;
                      BOOL v238 = v240 != 0;
                      BOOL v237 = v239 != 0;
                    }
                    while (v240 | v239);
                  }
                  else
                  {
                    int v233 = 0;
                  }
                  *(_DWORD *)(v166 + 4 * (*v223 + v232 + v153[3].i32[0] * v206 + v228 * v234)) = (v233 + v226) | ((v233 + v226) >> 8 << 9);
                  v231 += v220;
                }
                while (v231 < v221);
                v230 += v297;
              }
              while (v230 < v293);
            }
            else
            {
              do
              {
                unsigned int v244 = 0;
                int v245 = (unsigned __int16)(v230 >> v299);
                do
                {
                  int v247 = (unsigned __int16)(v244 >> v219);
                  if (v229)
                  {
                    int v248 = 0;
                    int v246 = 0;
                    int v249 = 1;
                    BOOL v250 = v227 != 0;
                    BOOL v251 = v225 != 0;
                    int v252 = v227;
                    int v253 = v225;
                    do
                    {
                      int v254 = ((v249 & (v224 + v247)) << v248) | v246;
                      --v252;
                      if (v250)
                      {
                        int v255 = v248 + 1;
                      }
                      else
                      {
                        int v252 = 0;
                        int v254 = v246;
                        int v255 = v248;
                      }
                      int v246 = ((v249 & (v290 + v245)) << v255) | v254;
                      --v253;
                      if (v251)
                      {
                        int v256 = v255 + 1;
                      }
                      else
                      {
                        int v253 = 0;
                        int v246 = v254;
                        int v256 = v255;
                      }
                      v249 *= 2;
                      int v248 = v256 - 1;
                      BOOL v251 = v253 != 0;
                      BOOL v250 = v252 != 0;
                    }
                    while (v253 | v252);
                  }
                  else
                  {
                    int v246 = 0;
                  }
                  *(_DWORD *)(v166 + 4 * (*v223 + v245 + v153[3].i32[0] * v206 + v228 * v247)) = (v246 + v226) | ((v246 + v226) >> 8 << 9);
                  v244 += v220;
                }
                while (v244 < v221);
                v230 += v297;
              }
              while (v230 < v293);
            }
          }
          unsigned int v207 = v286 + 1;
          uint64_t v156 = v276;
          int v176 = v274;
          int v175 = v279;
        }
        while (v286 + 1 <= v282);
        ++v206;
      }
      while (v206 != v271);
      return;
  }
}

unint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getMipmapSize<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void *)(a1 + 380);
  if ((_BYTE)v2) {
    BOOL v3 = *(void *)(a1 + 380) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  unint64_t result = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)0>(a1, *(_DWORD *)(a1 + 64), a2);
  if (*(unsigned char *)(a1 + 232)) {
    unint64_t result = (result + *(void *)(a1 + 320) - 1) & -*(void *)(a1 + 320);
  }
  if ((_BYTE)v2)
  {
    if ((v2 & 0xFFFF00) == 0x300
      || ((uint64_t v6 = v2 & 0x1FF00, (v2 & 0xFFFF00) != 0x400) ? (v7 = v6 == 65792) : (v7 = 1),
          !v7 ? (BOOL v8 = v6 == 66560) : (BOOL v8 = 1),
          !v8 ? (BOOL v9 = v6 == 66048) : (BOOL v9 = 1),
          v9))
    {
      if (*(unsigned char *)(a1 + 16))
      {
        return (result + 127) & 0xFFFFFFFFFFFFFF80;
      }
      else
      {
        uint64_t v10 = (v2 >> 16) & 1;
        if (BYTE1(v2) == 1) {
          char v11 = BYTE2(v2) & 1;
        }
        else {
          char v11 = 0;
        }
        if (BYTE1(v2) != 2) {
          LOBYTE(v10) = 0;
        }
        if (v11) {
          LOBYTE(v10) = 1;
        }
        if (BYTE1(v2) - 3 >= 2) {
          char v12 = v10;
        }
        else {
          char v12 = 1;
        }
        if (result >= 0x4000 && (v2 - 1) <= 1u && (v12 & 1) != 0)
        {
          uint64_t v13 = 0x4000;
        }
        else
        {
          BOOL v15 = (v2 & 0x10000) != 0 && BYTE1(v2) == 2 && v2 == 0;
          uint64_t v13 = 128;
          if (!v15) {
            uint64_t v13 = 16;
          }
          if ((v2 - 1) < 3u) {
            uint64_t v13 = 128;
          }
        }
        return (result + v13 - 1) & -v13;
      }
    }
  }
  return result;
}

BOOL AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::calcSparseParams(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  unsigned int v8 = *(_DWORD *)(a1 + 64);
  uint64_t v9 = AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(a1, v8, 0);
  uint64_t v10 = *(unsigned int *)(a1 + 236);
  uint64_t v11 = (v9 + v10 - 1) & -v10;
  *a3 = v11;
  uint64_t v12 = *(void *)(a1 + 380);
  uint64_t v13 = (unsigned __int16)v12 & 0xFF00;
  if (v13 == 768)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 136);
  }
  else if ((v12 & 0x10000) != 0 || v13 == 1024)
  {
    if (v13 == 1024) {
      unsigned int v14 = 6 * *(_DWORD *)(a1 + 376);
    }
    else {
      unsigned int v14 = *(_DWORD *)(a1 + 376);
    }
  }
  else
  {
    unsigned int v14 = 1;
  }
  *a3 = v11 * v14;
  unsigned int v15 = *(_DWORD *)(a1 + 128);
  unsigned int v16 = *(_DWORD *)(a1 + 132);
  int v17 = *(_DWORD *)(a1 + 144);
  int v18 = v15 >> v17;
  if (v15 >> v17 <= 1) {
    int v18 = 1;
  }
  unsigned int v19 = v16 >> v17;
  if (v19 <= 1) {
    unsigned int v19 = 1;
  }
  BOOL result = agxCalcSparseInputs(v10, v15, v16, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220), *(_DWORD *)(a1 + 112) * *(unsigned __int8 *)(*(void *)(a1 + 208) + 88), v8, 1u, 1u, 0, 0, *(unsigned char *)(a1 + 316), 0, 0, v18, v19, a2);
  *a4 = 224;
  return result;
}

uint64_t AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::getLevelOffset<(AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::View)1>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!*(unsigned char *)(a1 + 232) && !*(unsigned char *)(a1 + 240))
  {
    unsigned int v71 = *(_DWORD *)(a1 + 128);
    if (v71 <= 1) {
      unsigned int v71 = 1;
    }
    unsigned int v72 = (*(_DWORD *)(a1 + 216) + v71 - 1) / *(_DWORD *)(a1 + 216);
    if (*(_DWORD *)(a1 + 132) <= 1u) {
      int v73 = 1;
    }
    else {
      int v73 = *(_DWORD *)(a1 + 132);
    }
    unsigned int v74 = (*(_DWORD *)(a1 + 220) + v73 - 1) / *(_DWORD *)(a1 + 220);
    if (*(unsigned char *)(a1 + 380) == 2)
    {
      return AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTiled(a1, v72, v74, a3, a2);
    }
    else
    {
      return AGX::Texture<(AGXTextureMemoryLayout)3,AGX::HAL200::Encoders,AGX::HAL200::Classes>::sumLevelSizesTwiddled(a1, v72, v74, a3, 0, a2);
    }
  }
  unsigned int v5 = a3;
  if (!a2)
  {
    unsigned int v7 = 0;
    uint64_t v6 = 0;
    uint64_t v60 = a1 + 24 * a3;
    unsigned int v9 = *(unsigned __int8 *)(v60 + 252);
    unsigned int v10 = *(unsigned __int8 *)(v60 + 253);
    goto LABEL_83;
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  uint64_t v78 = a1;
  uint64_t v8 = a1 + 24 * a3;
  unsigned int v9 = *(unsigned __int8 *)(v8 + 252);
  unsigned int v10 = *(unsigned __int8 *)(v8 + 253);
  int v11 = *(unsigned __int8 *)(v8 + 258);
  BOOL v21 = v11 == 2;
  unsigned int v12 = v11 - 1;
  unsigned int v13 = *(unsigned __int16 *)(v8 + 242);
  unsigned int v14 = *(unsigned __int16 *)(v8 + 244);
  unsigned int v15 = (unsigned __int8 *)(v8 + 260);
  unsigned int v16 = (unsigned __int8 *)(v8 + 261);
  int v17 = (char *)(v8 + 257);
  int v18 = (unsigned char *)(v8 + 255);
  unsigned int v19 = (char *)(v8 + 254);
  int v20 = *(unsigned __int8 *)(v8 + 259);
  BOOL v21 = v21 && v20 == 0;
  int v22 = v21;
  unsigned int v23 = (unsigned __int8 *)(v8 + 256);
  int v24 = *(unsigned __int8 *)(v8 + 251);
  int v25 = *(unsigned __int16 *)(v8 + 248);
  while (1)
  {
    if (v9 >= v7) {
      char v26 = v9 - v7;
    }
    else {
      char v26 = 0;
    }
    if (v10 >= v7) {
      char v27 = v10 - v7;
    }
    else {
      char v27 = 0;
    }
    unsigned int v28 = v13 >> v7;
    unsigned int v29 = v14 >> v7;
    char v79 = v26;
    if (v12 > 1)
    {
      if (v28 <= 1) {
        int v40 = 1;
      }
      else {
        int v40 = v13 >> v7;
      }
      unsigned int v31 = (*v15 + v40 - 1) / *v15;
      if (v29 <= 1) {
        int v41 = 1;
      }
      else {
        int v41 = v14 >> v7;
      }
      char v42 = *v17;
      unsigned int v33 = (*v16 + v41 - 1) / *v16;
      if (*v17)
      {
        unsigned int v43 = 1 << v42;
        int v44 = -1 << v42;
        int v45 = (v31 + ~v44) & v44;
        int v46 = (v33 + ~v44) & v44;
        if (v43 <= v33) {
          unsigned int v47 = v45;
        }
        else {
          unsigned int v47 = v31;
        }
        if (v43 > v33) {
          int v46 = v33;
        }
        if (v43 <= v31)
        {
          unsigned int v31 = v47;
          unsigned int v33 = v46;
        }
      }
      LOBYTE(v36) = *v18;
      char v39 = *v19;
      if (1 << *v18 >= v33 || v31 >> v39)
      {
        if (!(v33 >> v36) && 1 << v39 < v31)
        {
          if (v33 < 2) {
            unsigned int v55 = 0;
          }
          else {
            unsigned int v55 = __clz(~(-1 << -(char)__clz(v33 - 1))) - 32;
          }
          v39 += v36 + v55;
          int v36 = -v55;
        }
      }
      else
      {
        if (v31 < 2) {
          LOBYTE(v48) = 0;
        }
        else {
          unsigned int v48 = 32 - __clz(~(-1 << -(char)__clz(v31 - 1)));
        }
        LOBYTE(v36) = v39 + v36 - v48;
        char v39 = v48;
      }
    }
    else
    {
      unsigned int v30 = (*v15 + v28 - 1) / *v15;
      if (v30 <= 1) {
        unsigned int v31 = 1;
      }
      else {
        unsigned int v31 = v30;
      }
      unsigned int v32 = (*v16 + v29 - 1) / *v16;
      if (v32 <= 1) {
        unsigned int v33 = 1;
      }
      else {
        unsigned int v33 = v32;
      }
      unsigned int v34 = 1 << v26;
      unsigned int v35 = 1 << v27;
      LOBYTE(v36) = *v18;
      char v37 = *v19;
      if (1 << *v18 >= (1 << v27) || v34 >> v37)
      {
        unsigned int v49 = v35 >> v36;
        unsigned int v50 = 1 << v37;
        unsigned int v51 = __clz(~(-1 << -(char)__clz(v35 - 1))) - 32;
        if (v7 >= v10) {
          unsigned int v51 = 0;
        }
        BOOL v52 = v50 >= v34;
        if (v50 < v34) {
          char v53 = v37 + v36 + v51;
        }
        else {
          char v53 = *v19;
        }
        if (v52) {
          LOBYTE(v54) = *v18;
        }
        else {
          int v54 = -v51;
        }
        if (v49) {
          char v39 = *v19;
        }
        else {
          char v39 = v53;
        }
        if (!v49) {
          LOBYTE(v36) = v54;
        }
      }
      else
      {
        unsigned int v38 = 32 - __clz(~(-1 << -(char)__clz(v34 - 1)));
        if (v7 < v9) {
          char v39 = v38;
        }
        else {
          char v39 = 0;
        }
        LOBYTE(v36) = v37 + v36 - v39;
      }
    }
    if (v22)
    {
      uint64_t v56 = 1 << v27;
LABEL_73:
      unint64_t v58 = (v56 << v27) * *v23;
      goto LABEL_76;
    }
    if (v20 == 4)
    {
      char v57 = v79;
    }
    else
    {
      char v57 = v79;
      if (v20 != 3 && v20 != 2)
      {
        uint64_t v56 = 1 << v79;
        goto LABEL_73;
      }
    }
    unint64_t v58 = ((1 << v57 << v27) * *v23 + 127) & 0xFFFFFFFFFFFFFF80;
LABEL_76:
    unint64_t v59 = ((v33 + ~(-1 << v36)) >> v36) * ((v31 + ~(-1 << v39)) >> v39) * v24 * v25;
    if (v59 >= 4 * v58 / 3) {
      break;
    }
    v6 += v59;
    if (a2 == ++v7) {
      goto LABEL_90;
    }
  }
  unsigned int v5 = a3;
  a1 = v78;
LABEL_83:
  if (v9 >= v7) {
    unsigned int v61 = v9 - v7;
  }
  else {
    unsigned int v61 = 0;
  }
  if (v10 >= v7) {
    unsigned int v62 = v10 - v7;
  }
  else {
    unsigned int v62 = 0;
  }
  unsigned int v63 = a2 - v7;
  if (v63)
  {
    uint64_t v65 = (unsigned __int8 *)(a1 + 24 * v5);
    int v66 = v65[259];
    unint64_t v67 = v65 + 256;
    if (v65[258] == 2 && v66 == 0)
    {
      uint64_t v64 = 0;
      do
      {
        v64 += (1 << v62 << v62) * *v67;
        BOOL v52 = v62-- != 0;
        if (!v52) {
          unsigned int v62 = 0;
        }
        --v63;
      }
      while (v63);
    }
    else
    {
      switch(v66)
      {
        case 4:
          uint64_t v64 = 0;
          uint64_t v75 = *v67;
          do
          {
            v64 += ((1 << v61 << v62) * v75 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v61) {
              --v61;
            }
            else {
              unsigned int v61 = 0;
            }
            if (v62) {
              --v62;
            }
            else {
              unsigned int v62 = 0;
            }
            --v63;
          }
          while (v63);
          break;
        case 3:
          uint64_t v64 = 0;
          uint64_t v76 = *v67;
          do
          {
            v64 += ((1 << v61 << v62) * v76 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v61) {
              --v61;
            }
            else {
              unsigned int v61 = 0;
            }
            if (v62) {
              --v62;
            }
            else {
              unsigned int v62 = 0;
            }
            --v63;
          }
          while (v63);
          break;
        case 2:
          uint64_t v64 = 0;
          uint64_t v69 = *v67;
          do
          {
            v64 += ((1 << v61 << v62) * v69 + 127) & 0xFFFFFFFFFFFFFF80;
            if (v61) {
              --v61;
            }
            else {
              unsigned int v61 = 0;
            }
            if (v62) {
              --v62;
            }
            else {
              unsigned int v62 = 0;
            }
            --v63;
          }
          while (v63);
          break;
        default:
          uint64_t v64 = 0;
          do
          {
            v64 += (1 << v61 << v62) * *v67;
            BOOL v52 = v61-- != 0;
            if (!v52) {
              unsigned int v61 = 0;
            }
            BOOL v52 = v62-- != 0;
            if (!v52) {
              unsigned int v62 = 0;
            }
            --v63;
          }
          while (v63);
          break;
      }
    }
  }
  else
  {
LABEL_90:
    uint64_t v64 = 0;
  }
  return v64 + v6;
}